name: Elle Consistency Check

on: [ push, pull_request ]

env:
  CARGO_TERM_COLOR: always

jobs:
  consistency_check:
    runs-on: ubuntu-latest
    container: rust-node:1.88.0
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'

      # Install Java and Leiningen for elle-cli
      - name: Install Java and Leiningen
        run: |
          apt-get update
          apt-get install -y openjdk-17-jdk-headless wget git graphviz
          java -version
          wget https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
          chmod +x lein
          mv lein /usr/local/bin/
          lein version

      # Clone and build elle-cli
      - name: Build elle-cli
        run: |
          git clone https://github.com/ligurio/elle-cli.git /tmp/elle-cli
          cd /tmp/elle-cli
          lein deps
          lein uberjar

      # Build the moor-model-checker workload tool (direct DB access, no scheduler)
      - name: Build moor-model-checker
        run: cargo build --bin moor-model-checker

      # Run the direct database list-append workload with reasonable parameters for CI
      - name: Run list-append workload
        run: |
          mkdir -p test-output/elle-graphs
          ./target/debug/list-append \
            --num-props 3 \
            --num-concurrent-workloads 4 \
            --num-workload-iterations 1000 \
            --output-file test-output/workload.edn

      # Verify strict serializability with elle-cli (with cycle graph generation)
      - name: Check consistency with Elle
        run: |
          cd /tmp/elle-cli
          java -jar target/elle-cli-0.1.9-standalone.jar \
            --model list-append \
            --consistency-model strict-serializable \
            --directory $GITHUB_WORKSPACE/test-output/elle-graphs \
            --plot-format svg \
            --cycle-search-timeout 5000 \
            $GITHUB_WORKSPACE/test-output/workload.edn | tee $GITHUB_WORKSPACE/test-output/elle-result.txt

          echo "Workload statistics:"
          echo "  Total operations: $(grep -c '^{' $GITHUB_WORKSPACE/test-output/workload.edn)"
          echo "  Invoke operations: $(grep -c ':type :invoke' $GITHUB_WORKSPACE/test-output/workload.edn)"
          echo "  OK operations: $(grep -c ':type :ok' $GITHUB_WORKSPACE/test-output/workload.edn)"

          if ls $GITHUB_WORKSPACE/test-output/elle-graphs/*.svg 2>/dev/null; then
            echo "Cycle graphs generated: $(ls -1 $GITHUB_WORKSPACE/test-output/elle-graphs/*.svg | wc -l)"
          fi

          if grep -q "true" $GITHUB_WORKSPACE/test-output/elle-result.txt; then
            echo "✓ Consistency check PASSED: No anomalies detected"
            exit 0
          else
            echo "✗ Consistency check FAILED: Anomalies detected"
            echo ""
            echo "Anomaly Summary:"
            echo "================"

            # Count anomalies by type from elle-result.txt
            # Check for each known Elle anomaly type
            for anomaly in "G0" "G1a" "G1b" "G1c" "G-single-realtime" "G-single" "G-nonadjacent-realtime" "G-nonadjacent" "G2-item" "G2"; do
              if grep -q "$anomaly" $GITHUB_WORKSPACE/test-output/elle-result.txt; then
                count=$(grep -c "$anomaly" $GITHUB_WORKSPACE/test-output/elle-result.txt || echo "0")
                echo "  $anomaly: $count"
              fi
            done

            echo ""
            echo "First anomaly example:"
            echo "====================="
            # Show first anomaly with some context (up to 15 lines)
            grep -A 15 "G-single\|G-nonadjacent\|G1c\|G2" $GITHUB_WORKSPACE/test-output/elle-result.txt | head -20

            echo ""
            echo "See full results in test-output/elle-result.txt"
            if ls $GITHUB_WORKSPACE/test-output/elle-graphs/*.svg 2>/dev/null; then
              echo "Cycle graphs available in test-output/elle-graphs/"
            fi

            exit 1
          fi

