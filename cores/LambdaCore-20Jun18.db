** LambdaMOO Database, Format Version 4 **
98
1748
0
5
2
71
36
38
96
#0
The System Object

24
2
-1
-1
-1
1
-1
5
23
do_login_command
2
173
-1
server_started
2
173
-1
core_object_info core_objects
2
173
-1
init_for_core
2
173
-1
user_created user_connected
2
173
-1
user_disconnected user_client_disconnected
2
173
-1
bf_chparent chparent
2
173
-1
bf_add_verb add_verb
2
173
-1
bf_add_property add_property
2
173
-1
bf_recycle recycle
2
173
-1
user_reconnected
2
173
-1
bf_set_verb_info set_verb_info
2
173
-1
bf_match match
2
173
-1
bf_rmatch rmatch
2
173
-1
checkpoint_finished
2
173
-1
do_out_of_band_command doobc
2
173
-1
handle_uncaught_error
2
173
-1
checkpoint_started
2
173
-1
bf_force_input
2
173
-1
moveto
2
173
-1
bf_set_property_info set_property_info
2
173
-1
include_for_core
2
173
-1
handle_task_timeout
2
173
-1
119
builder
login
last_huh
guest_log
last_restart_time
biglist
big_mail_recipient
limbo
registration_db
new_player_log
verb_help
core_help
prog_help
wiz_help
shutdown_task
wiz_utils
site_db
math_utils
set_utils
builtin_function_help
new_prog_log
generic_help
guest
spell
seq_utils
quota_log
you
max_seconds
max_ticks
hacker
generic_db
shutdown_message
shutdown_time
no_one
player_db
class_registry
player_class
gender_utils
trig_utils
time_utils
editor_help
mail_recipient
mail_agent
mail_editor
note_editor
verb_editor
generic_editor
match_utils
object_utils
lock_utils
gripe_recipients
letter
dump_interval
list_utils
command_utils
player
wiz
prog
code_utils
help
nothing
failed_match
ambiguous_match
perm_utils
building_utils
string_utils
news
note
container
thing
exit
room
player_start
root_class
recycler
garbage
mail_options
edit_options
display_options
generic_options
maxint
minint
error
newt_log
toad_log
site_log
housekeeper
network
generic_biglist_home
feature
local
gopher
prog_options
build_options
generic_utils
quota_utils
paranoid_db
no_connect_message
sysobj
byte_quota_utils
object_quota_utils
server_options
feature_warehouse
builder_help
mail_help
ftp
password_verifier
frand_class
mail_recipient_class
stage_talk
pasting_feature
core_history
matrix_utils
force_input_count
frand_help
convert_utils
gendered_object
list_editor
http
123
1
4
2
5
1
10
2
1
1
11
2
1
1
12
2
1
0
1529543472
2
5
1
13
2
5
1
14
2
5
1
15
2
5
1
16
2
5
1
17
2
5
1
18
2
5
1
19
2
5
1
22
2
5
1
23
2
5
3
0
2
5
1
24
2
5
1
25
2
5
1
26
2
5
1
27
2
5
1
28
2
5
1
29
2
5
1
30
2
5
1
31
2
1
1
32
2
5
1
33
2
5
1
34
2
5
1
35
36
1
0
5
2
5
0
30000
2
5
1
36
2
5
1
37
2
5
2

2
5
0
0
2
5
1
38
2
1
1
39
2
1
4
2
4
3
2
generics
2
Generic objects intended for use as the parents of new objects
4
13
1
3
1
7
1
5
1
9
1
54
1
8
1
1
1
6
1
58
1
57
1
50
1
45
1
46
4
3
2
utilities
2
Objects holding useful general-purpose verbs
4
20
1
20
1
55
1
24
1
27
1
41
1
26
1
43
1
51
1
52
1
53
1
56
1
42
1
21
1
33
1
13
1
79
1
81
1
59
1
91
1
93
2
5
1
40
2
5
1
41
2
1
1
26
2
5
1
43
2
5
1
44
2
5
1
45
2
5
1
46
2
5
1
47
2
5
1
48
2
5
1
49
2
5
1
50
2
5
1
51
2
5
1
52
2
5
1
53
2
5
4
1
1
2
2
5
1
54
2
5
0
3600
2
5
1
55
2
5
1
56
2
5
1
6
2
5
1
57
2
5
1
58
2
5
1
59
2
5
1
60
2
5
1
-1
2
5
1
-3
2
5
1
-2
2
5
1
42
2
5
1
21
2
5
1
20
2
5
1
61
2
5
1
9
2
5
1
8
2
5
1
5
2
5
1
7
2
5
1
3
2
5
1
62
2
5
1
1
2
5
1
63
2
5
1
64
2
5
1
65
2
5
1
66
2
5
1
67
2
5
1
68
2
5
0
2147483647
2
5
0
-2147483648
2
5
1
69
2
5
1
70
2
5
1
70
2
5
1
70
2
5
1
71
2
5
1
72
2
5
1
73
2
1
1
74
2
5
1
-1
2
5
1
75
2
1
1
76
2
5
1
77
2
5
1
78
2
5
1
79
2
5
1
80
2
1
0
0
2
5
1
0
2
1
1
79
2
5
1
81
2
5
1
82
2
5
1
83
2
1
1
84
2
1
1
85
2
1
1
86
2
5
1
87
2
1
1
88
2
5
1
40
2
5
1
89
2
5
1
90
2
5
4
1
4
3
2
LambdaMOO
2
1.8.3+47
0
1529447738
2
1
1
91
36
1
0
19398082
2
5
1
92
2
5
1
93
2
5
1
94
2
1
1
95
2
5
1
97
2
5
5
2
4
4
1
2
The System Object
2
5
2
The known universe.
2
5
4
2
0
23528
0
1084848672
36
1
#1
Root Class

152
2
-1
-1
-1
-1
3
-1
37
initialize
2
173
-1
recycle
2
173
-1
set_name
2
173
-1
title
2
173
-1
titlec
2
173
-1
set_aliases
2
173
-1
match
2
173
-1
match_object
2
173
-1
set_description
2
173
-1
description
2
173
-1
look_self
2
173
-1
notify
2
173
-1
tell
2
173
-1
tell_lines
2
173
-1
accept
2
173
-1
moveto
2
173
-1
eject eject_nice eject_basic
2
173
-1
is_unlocked_for
2
173
-1
huh
2
173
-1
set_message
2
173
-1
do_examine
2
173
-1
examine_key
2
173
-1
examine_names
2
173
-1
examine_desc
2
173
-1
examine_contents
2
173
-1
examine_verbs
2
173
-1
get_message
2
173
-1
room_announce*_all_but
2
173
-1
init_for_core
2
173
-1
contents
36
173
-1
examine_verb_ok
2
173
-1
is_listening
2
173
-1
hidden_verbs
2
173
-1
examine_owner
2
173
-1
announce*_all_but
2
173
-1
tell_lines_suspended
2
173
-1
acceptable
2
173
-1
4
key
aliases
description
object_size
4
0
0
2
4
4
0
2
5
2

2
5
4
2
0
22038
0
1084848672
36
1
#2
Wizard

7
2
62
97
-1
57
-1
-1
0
0
99
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
4
5
2
5
5
36
1
5
36
1
5
36
1
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
36
1
5
36
1
5
36
1
5
36
1
5
36
1
5
36
1
5
36
1
5
36
1
5
2
5
5
2
5
5
2
5
5
36
1
5
2
5
4
0
2
4
5
2
5
5
2
1
5
2
5
4
0
2
5
5
2
5
5
2
5
4
6
0
0
0
0
4
3
1
17
0
0
0
0
4
3
1
29
0
0
0
0
4
3
1
34
0
0
0
0
4
3
1
70
0
0
0
0
2
4
5
2
4
4
2
1
90
1
89
36
1
4
2
0
1529444339
2
localhost
2
0
5
2
0
0
1529543472
2
1
0
0
2
5
5
2
5
5
36
1
5
36
1
5
36
0
5
36
1
4
37
1
0
1
1
1
2
1
3
1
4
1
5
1
6
1
7
1
8
1
9
1
10
1
11
1
12
1
15
1
17
1
20
1
21
1
24
1
29
1
34
1
40
1
42
1
52
1
53
1
54
1
56
1
57
1
58
1
70
1
72
1
75
1
78
1
82
1
86
1
87
1
94
1
97
2
1
5
36
1
1
2
2
4
4
0
2
0
2

2
0
5
2
5
5
2
5
5
2
4
5
2
5
2
its
2
5
2
Its
2
5
5
2
5
5
2
5
5
2
5
0
1529543480
2
1
0
-10000
36
0
5
2
5
2
Itself
2
5
2
Its
2
5
2
It
2
5
2
It
2
5
2
itself
2
5
2
its
2
5
2
it
2
5
2
it
2
5
1
62
2
5
0
0
2
0
5
2
5
5
2
5
5
2
5
5
2
5
0
1529444339
2
1
4
4
0
50000
0
769725
0
1084848672
0
0
36
0
0
0
2
0
5
2
0
0
0
2
4
4
1
2
Wizard
2
1
2

2
5
4
2
0
5052
0
1084848672
36
1
#3
generic room

152
2
-1
-1
-1
1
50
0
47
confunc
2
173
-1
disfunc
2
173
-1
say
2
85
-2
emote
2
93
-2
announce
2
173
-1
match_exit
2
173
-1
add_exit
2
173
-1
tell_contents
2
173
-1
@exits
2
13
-1
look_self
2
173
-1
acceptable
2
173
-1
add_entrance
2
173
-1
bless_for_entry
2
173
-1
@entrances
2
9
-1
go
2
93
-2
l*ook
2
93
-2
announce_all
2
173
-1
announce_all_but
2
173
-1
enterfunc
2
173
-1
exitfunc
2
173
-1
remove_exit
2
173
-1
remove_entrance
2
173
-1
@add-exit
2
25
-1
@add-entrance
2
25
-1
recycle
2
173
-1
e east w west s south n north ne northeast nw northwest se southeast sw southwest u up d down
2
13
-1
@eject @eject! @eject!!
2
25
-1
ejection_msg oejection_msg victim_ejection_msg
36
173
-1
accept_for_abode
2
173
-1
@resident*s
2
25
-1
match
2
173
-1
@remove-exit
2
25
-1
@remove-entrance
2
25
-1
moveto
2
173
-1
who_location_msg
2
173
-1
exits entrances
2
173
-1
obvious_exits obvious_entrances
2
173
-1
here_huh
2
173
-1
room_announce*_all_but
2
173
-1
examine_commands_ok
2
173
-1
examine_key
2
173
-1
examine_contents
2
173
-1
free_entry
36
173
-1
init_for_core
2
173
-1
dark
2
173
-1
announce_lines_x
2
173
-1
basic_accept_for_abode
2
173
-1
13
who_location_msg
free_home
victim_ejection_msg
ejection_msg
oejection_msg
residents
free_entry
entrances
blessed_object
blessed_task
exits
dark
ctype
17
2
%T
2
5
0
0
2
5
2
You have been expelled from %i by %n.
2
5
2
You expel %d from %i.
2
5
2
%N unceremoniously %{!expels} %d from %i.
2
5
4
0
2
5
0
1
2
5
4
0
2
4
1
-1
2
5
0
0
2
5
4
0
2
4
0
0
2
5
0
3
2
5
5
2
4
4
1
2
generic room
2
5
5
2
5
4
2
0
28944
0
1084848672
36
1
#4
generic builder

144
2
-1
-1
-1
88
58
-1
33
@quota
2
25
-1
@create
2
89
-2
@recycle
2
25
-1
@recreate
2
89
13
@dig
2
89
-2
@audit
2
89
-2
@count
2
25
-1
@countDB
2
25
-1
@sort-owned*-objects
2
25
-1
@add-owned
2
25
-1
@verify-owned
2
9
-1
@unlock
2
25
-1
@lock
2
89
0
@newmess*age
2
89
-2
@unmess*age
2
89
-2
_messagify
2
173
-1
@kids
2
29
-1
@contents
2
25
-1
@par*ents
2
25
-1
@location*s
2
25
-1
@cl*asses
2
89
-2
classes_2
2
173
-1
_create
2
173
-1
_recycle
2
173
-1
@chparent
2
89
1
@check-chp*arent
2
89
1
@set*prop
2
89
1
build_option
2
173
-1
set_build_option
2
173
-1
@build-o*ptions @buildo*ptions @builder-o*ptions @buildero*ptions
2
89
-2
@meas*ure
36
89
-2
init_for_core
2
173
-1
@listedit @pedit
36
25
-1
1
build_options
86
4
0
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
36
1
5
36
1
5
36
1
5
36
1
5
36
1
5
36
1
5
36
1
5
36
1
5
2
5
5
2
5
5
2
5
5
36
1
5
2
5
5
2
4
5
2
5
5
2
1
5
2
5
4
0
2
5
5
2
5
5
2
5
5
2
4
5
2
4
4
2
1
90
1
89
36
1
5
2
0
5
2
0
5
2
1
1
84
2
5
5
2
5
5
36
1
5
36
1
5
36
0
5
36
1
5
2
1
5
36
1
5
2
4
5
2
0
5
2
0
5
2
5
5
2
5
5
2
4
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
1
0
0
36
0
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
1
62
2
5
5
2
0
5
2
5
5
2
5
5
2
5
5
2
5
5
2
1
5
36
0
5
2
0
5
2
0
5
2
4
4
1
2
generic builder
2
1
2
You see a player who should type '@describe me as ...'.
2
5
4
2
0
36256
0
1084848672
36
1
#5
generic thing

152
2
-1
-1
-1
1
8
6
6
g*et t*ake
2
45
-1
d*rop th*row
2
45
-1
moveto
2
173
-1
take_failed_msg take_succeeded_msg otake_failed_msg otake_succeeded_msg drop_failed_msg drop_succeeded_msg odrop_failed_msg odrop_succeeded_msg
2
173
-1
gi*ve ha*nd
2
109
1
examine_key
2
173
-1
8
drop_failed_msg
drop_succeeded_msg
odrop_failed_msg
odrop_succeeded_msg
otake_succeeded_msg
otake_failed_msg
take_succeeded_msg
take_failed_msg
12
2
You can't seem to drop %t here.
2
5
2
You drop %t.
2
5
2
tries to drop %t but fails!
2
5
2
drops %t.
2
5
2
picks up %t.
2
5
2

2
5
2
You take %t.
2
5
2
You can't pick that up.
2
5
5
2
4
4
1
2
generic thing
2
5
5
2
5
4
2
0
4787
0
1084848672
36
1
#6
generic player

152
2
-1
-1
-1
1
40
7
102
init_for_core
2
173
-1
confunc
2
173
-1
disfunc
2
173
-1
initialize
2
173
-1
acceptable
2
173
-1
my_huh
2
173
-1
last_huh
2
173
-1
my_match_object
2
173
-1
tell_contents
2
173
-1
titlec
2
173
-1
notify
2
173
-1
notify_lines
2
173
-1
linesplit
2
173
-1
linelen
36
173
-1
@more
2
25
-1
@wrap
36
9
-2
@linelen*gth
36
25
-1
@pagelen*gth
2
25
-1
tell
2
173
-1
gag_p
2
173
-1
set_gaglist
2
173
-1
@gag*!
2
89
-2
@listgag @gaglist @gagged
2
29
-1
@ungag
2
29
-1
whodunnit
2
173
-1
@ch*eck-full
2
89
-2
@paranoid
2
89
-2
@sw*eep
2
9
-1
wh*isper
2
157
1
page
2
93
-2
receive_page
2
173
-1
page_origin_msg page_echo_msg page_absent_msg
36
173
-1
i inv*entory
2
9
-1
look_self
2
173
-1
home
2
9
-1
@sethome
2
9
-1
g*et take
2
45
-1
@move @teleport
2
93
1
@eject @eject! @eject!!
2
89
5
where*is @where*is
2
93
-2
@who
2
93
-2
@wizards
2
29
-1
?* help info*rmation @help
2
93
-2
display_option
2
173
-1
edit_option
2
173
-1
set_mail_option set_edit_option set_display_option
2
173
-1
@mailo*ptions @mail-o*ptions @edito*ptions @edit-o*ptions @displayo*ptions @display-o*ptions
2
89
-2
set_name
2
173
-1
set_aliases
2
173
-1
@rename*#
2
89
1
@addalias*# @add-alias*#
2
89
1
@rmalias*# @rm-alias*#
2
89
5
@desc*ribe
2
89
13
@mess*ages
2
25
-1
@notedit
96
25
-1
@last-c*onnection
2
29
-1
set_gender
2
173
-1
@gender
2
25
-1
set_brief
2
173
-1
@mode
2
89
-2
@exam*ine
2
29
-1
exam*ine
2
25
-1
add_feature
36
173
-1
remove_feature
36
173
-1
@add-feature @addfeature
2
25
-1
@remove-feature @rmfeature
2
25
-1
@features
2
93
11
@features
2
25
-1
@memory
36
9
-1
@version
36
9
-1
@uptime
36
9
-1
@quit
2
9
-1
examine_commands_ok
2
173
-1
is_listening
2
173
-1
moveto
2
173
-1
announce*_all_but
2
173
-1
linewrap
36
173
-1
@set-note-string @set-note-text
2
25
-1
verb_sub
2
173
-1
ownership_quota
2
173
-1
tell_lines
2
173
-1
@lastlog
2
29
-1
set_linelength
2
173
-1
set_pagelength
2
173
-1
set_home
2
173
-1
@registerme
2
89
-2
ctime
2
173
-1
@age
36
25
-1
news
2
29
-1
@edit
36
89
-2
erase_paranoid_data
2
173
-1
@move-new
2
89
-2
notify_lines_suspended
2
173
-1
_chparent
2
173
-1
@users
36
13
-1
@password
2
89
-2
recycle
2
173
-1
gc_gaglist
2
173
-1
email_address
2
173
-1
set_email_address
2
173
-1
reconfunc
2
173
-1
@owner
36
29
-1
45
features
previous_connection
email_address
last_disconnect_time
help
more_msg
linetask
linesleft
linebuffer
pagelen
owned_objects
linelen
current_folder
all_connect_places
last_connect_place
dict
brief
lines
page_absent_msg
pq
pqc
page_origin_msg
page_echo_msg
edit_options
last_connect_time
ownership_quota
gender
prc
ppc
poc
psc
pr
pp
po
ps
home
password
gaglist
paranoid
display_options
verb_subs
first_connect_time
size_quota
last_password_time
last_connect_attempt
49
4
0
36
1
0
0
2
0
2

2
0
0
0
2
1
0
0
2
5
2
*** More ***  %n lines left.  Do @more [rest|flush] for more.
2
5
4
2
0
0
0
0
36
1
0
0
36
1
4
0
36
0
0
0
36
1
4
0
2
1
0
-79
36
1
0
1
2
4
4
0
2
0
2
?
2
0
4
0
2
5
0
0
2
5
0
0
2
4
2
%N is not currently logged in.
2
5
2
its
2
5
2
Its
2
5
2
You sense that %n is looking for you in %l.
2
5
2
Your message has been sent.
2
5
4
0
2
5
0
0
2
1
0
0
36
0
2
neuter
2
5
2
Itself
2
5
2
Its
2
5
2
It
2
5
2
It
2
5
2
itself
2
5
2
its
2
5
2
it
2
5
2
it
2
5
1
62
2
5
2
impossible password to type
2
0
4
0
2
5
0
0
2
5
4
0
2
5
4
0
2
5
0
2147483647
2
1
4
0
36
0
0
0
2
0
0
0
2
0
5
2
4
4
1
2
generic player
2
1
2
You see a player who should type '@describe me as ...'.
2
5
4
2
0
97774
0
1084848672
36
1
#7
generic exit

152
2
-1
-1
-1
1
-1
46
11
invoke
2
173
-1
move
2
173
-1
recycle
2
173
-1
leave_msg oleave_msg arrive_msg oarrive_msg nogo_msg onogo_msg
2
173
-1
set_name
2
173
-1
set_aliases
2
173
-1
announce_all_but
2
173
-1
defaulting_oleave_msg
2
173
-1
moveto
2
173
-1
examine_key
2
173
-1
announce_msg
2
173
-1
9
obvious
source
dest
nogo_msg
onogo_msg
arrive_msg
oarrive_msg
oleave_msg
leave_msg
13
0
1
2
5
1
-1
2
5
1
-1
2
5
0
0
2
5
0
0
2
5
0
0
2
5
0
0
2
5
0
0
2
5
0
0
2
5
5
2
4
4
1
2
generic exit
2
5
5
2
5
4
2
0
7191
0
1084848672
36
1
#8
generic container

152
2
-1
-1
-1
5
83
9
15
p*ut in*sert d*rop
2
157
3
re*move ta*ke g*et
2
157
5
look_self
2
173
-1
acceptable
2
173
-1
open
2
45
-1
@lock_for_open @lock-for-open
2
105
0
is_openable_by
2
173
-1
close
2
45
-1
@unlock_for_open @unlock-for-open
2
41
-1
tell_contents
2
173
-1
set_opened
2
173
-1
@opacity
2
105
12
set_opaque
2
173
-1
oclose_msg close_msg oopen_msg open_msg oput_fail_msg put_fail_msg oremove_fail_msg oremove_msg remove_fail_msg remove_msg oput_msg put_msg oopen_fail_msg open_fail_msg empty_msg
36
173
-1
dark
2
173
-1
19
oclose_msg
close_msg
oopen_msg
open_msg
oput_fail_msg
put_fail_msg
opaque
dark
oremove_fail_msg
oremove_msg
remove_fail_msg
remove_msg
oput_msg
put_msg
oopen_fail_msg
open_fail_msg
empty_msg
opened
open_key
31
2
closes %d.
2
5
2
You close %d.
2
5
2
opens %d.
2
5
2
You open %d.
2
5
2

2
5
2
You can't put %d in that.
2
5
0
1
2
1
0
1
2
1
2

2
5
2
removes %d from %i.
2
5
2
You can't remove that.
2
5
2
You remove %d from %i.
2
5
2
puts %d in %i.
2
5
2
You put %d in %i.
2
5
2

2
5
2
You can't open that.
2
5
2
It is empty.
2
5
0
0
2
1
0
0
2
4
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
4
4
1
2
generic container
2
5
5
2
5
4
2
0
9415
0
1084848672
36
1
#9
generic note

152
2
-1
-1
-1
5
54
63
11
r*ead
2
45
-1
er*ase
2
45
-1
wr*ite
2
157
4
del*ete rem*ove
2
153
5
encrypt
2
105
0
decrypt
2
41
-1
text
2
173
-1
is_readable_by
2
173
-1
set_text
2
173
-1
is_writable_by
2
173
-1
mailme @mailme
2
41
-1
3
writers
encryption_key
text
15
4
0
2
5
0
0
2
4
4
0
2
4
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
4
4
1
2
generic note
2
5
2
There appears to be some writing on the note ...
2
5
4
2
0
6265
0
1084848672
36
1
#10
Login Commands

16
2
-1
-1
-1
1
-1
68
45
?
2
93
-1
wel*come @wel*come
2
93
-1
w*ho @w*ho
2
93
-1
co*nnect @co*nnect
2
93
-1
cr*eate @cr*eate
2
93
-1
q*uit @q*uit
2
93
-1
up*time @up*time
2
93
-1
v*ersion @v*ersion
2
93
-1
parse_command
2
173
-1
check_for_shutdown
2
173
-1
check_player_db
2
173
-1
_match_player
2
173
-1
notify
2
173
-1
tell
36
173
-1
player_creation_enabled
2
173
-1
newt_registration_string registration_string
2
173
-1
init_for_core
2
173
-1
special_action
2
164
-1
blacklisted graylisted redlisted spooflisted
2
173
-1
blacklist_add*_temp graylist_add*_temp redlist_add*_temp spooflist_add*_temp
2
173
-1
blacklist_remove*_temp graylist_remove*_temp redlist_remove*_temp spooflist_remove*_temp
2
173
-1
listname
2
173
-1
who(vanilla)
2
173
-1
record_connection
2
173
-1
sample_lag
2
173
-1
is_lagging
2
173
-1
max_connections
2
173
-1
request_character
2
173
-1
req*uest @req*uest
2
93
-1
h*elp @h*elp
2
93
-1
maybe_print_lag
2
173
-1
current_lag
2
173
-1
maybe_limit_commands
2
173
-1
server_started
2
173
-1
uptime_since
2
173
-1
count_bg_players
2
173
-1
blacklisted_temp graylisted_temp redlisted_temp spooflisted_temp
2
173
-1
templist_expired
2
173
-1
temp_newt_registration_string
2
173
-1
add_interception
36
173
-1
delete_interception
36
173
-1
interception
36
173
-1
intercepted_password
2
173
-1
do_out_of_band_command doobc
36
173
-1
check_for_checkpoint
2
173
-1
40
welcome_message
newt_registration_string
registration_string
registration_address
create_enabled
bogus_command
blank_command
graylist
blacklist
redlist
who_masks_wizards
max_player_name
spooflist
ignored
max_connections
connection_limit_msg
lag_samples
request_enabled
help_message
last_lag_sample
lag_sample_interval
boot_process
lag_cutoff
lag_exemptions
newted
current_connections
current_numcommands
max_numcommands
temporary_newts
downtimes
print_lag
current_lag
temporary_blacklist
temporary_redlist
temporary_spooflist
temporary_graylist
intercepted_players
intercepted_actions
goaway_message
checkpoint_in_progress
44
4
5
2
Welcome to the LambdaCore database.
2

2
Type 'connect wizard' to log in.
2

2
You will probably want to change this text and the output of the `help' command, which are stored in $login.welcome_message and $login.help_message, respectively.
2
5
2
Your character is temporarily hosed.
2
5
2
Character creation is disabled.
2
5
2

2
5
0
1
2
5
2
?
2
1
2
welcome
2
1
4
2
4
0
4
0
2
0
4
2
4
0
4
0
2
0
4
2
4
0
4
0
2
0
0
0
2
0
0
40
2
5
4
2
4
0
4
0
2
0
4
0
2
5
0
99999
36
5
2
*** The MOO is too busy! The current lag is %l; there are %n connected.  WAIT FIVE MINUTES BEFORE TRYING AGAIN.
36
1
4
5
0
0
0
0
0
0
0
0
0
0
2
5
0
0
2
5
4
1
2
Sorry, but there's no help here yet.  Type `?' for a list of commands.
2
5
0
0
2
5
0
15
2
5
0
0
2
5
0
5
2
5
4
0
2
5
4
0
2
0
4
1
1
-2
2
5
4
1
0
1
2
5
0
20
2
5
4
0
2
4
4
2
4
2
0
1529543472
0
0
4
2
0
1529444307
0
0
2
5
0
0
2
5
0
0
2
1
4
2
4
0
4
0
2
0
4
2
4
0
4
0
2
0
4
2
4
0
4
0
2
0
4
2
4
0
4
0
2
0
4
0
36
0
4
0
36
0
4
24
2
                          ***************************
2
                          *  Welcome to LagdaMOO!  *
2
                          ***************************
2
                                       
2
                      Running Version %v of LagdaMOO
2

2
PLEASE NOTE:
2
   LagdaMOO is a new kind of society, where thousands of people voluntarily
2
come together from all over the world.  What these people say or do may not
2
always be to your liking; as when visiting any international city, it is wise
2
to be careful who you associate with and what you say.
2
   The operators of LagdaMOO have provided the materials for the buildings of
2
this community, but are not responsible for what is said or done in them.  In
2
particular, you must assume responsibility if you permit minors or others to
2
access LagdaMOO through your facilities.  The statements and viewpoints
2
expressed here are not necessarily those of the wizards, Pavel Curtis, 
2
Stanford University, or Placeware Inc., and those parties disclaim any 
2
responsibility for them.
2

2
NOTICE FOR JOURNALISTS AND RESEARCHERS:
2
  The citizens of LagdaMOO request that you ask for permission from all
2
direct participants before quoting any material collected here.
2

2
For assistance either now or later, type `help'.
2
5
0
0
2
5
5
2
4
4
1
2
Login Commands
2
5
2
This provides everything needed by #0:do_login_command.  See `help $login' on $core_help for details.
2
5
4
2
0
42064
0
1084848672
36
1
#11
Player Last_huh Verbs

16
2
-1
-1
-1
1
-1
10
4
@*
2
173
-1
give hand
2
173
-1
get take
2
173
-1
drop throw
2
173
-1
0
4
5
2
4
4
1
2
Player Last_huh Verbs
2
5
2
A repository of last-resort player verbs to be called by $player:last_huh
2
5
4
2
0
4598
0
1084848672
36
1
#12
Guest Log

0
2
-1
-1
-1
1
-1
11
4
enter
2
173
-1
last
2
173
-1
init_for_core
2
173
-1
find
2
173
-1
2
connections
max_entries
6
4
0
2
0
0
511
2
0
5
2
4
4
1
2
Guest Log
2
5
5
2
5
4
2
0
3738
0
1084848672
36
1
#13
Generic BigList Utilities

16
36
-1
-1
-1
78
-1
79
26
length
36
173
-1
find_nth
36
173
-1
find_ord
36
173
-1
set_nth
36
173
-1
kill
36
173
-1
insert_after insert_before
36
173
-1
extract_range
36
173
-1
delete_range
36
173
-1
keep_range
36
173
-1
insert_last
36
173
-1
start
36
173
-1
next
36
173
-1
_find_nth
36
173
-1
_find_ord
36
173
-1
_set_nth
36
173
-1
_skill
36
173
-1
_extract
36
173
-1
_merge
36
173
-1
_smerge
36
173
-1
_split
36
173
-1
_rmerge
36
173
-1
_scrunch
36
173
-1
_listfind_nth
36
173
-1
_insertfirst
36
173
-1
debug
36
173
-1
_call
2
173
-1
2
about
maxfanout
7
4
15
2
Implementation notes
2
--------------------
2
Each biglist is actually a tree (a kind of B-tree, actually).
2
The routines above pass around handles of the form
2

2
    {root_node, size, leftmost_ord}
2

2
where root_node is the (string) name of a property that holds the root of the tree, size is the number of leaves in the tree, and leftmost_ord is the :_ord value of the leftmost element of the list (i.e., the leftmost leaf).
2
Each node property has a value of the form 
2

2
    {height,list of subtrees}.
2

2
where the each of the subtrees is itself a 3-element list as above unless
2
the height is 0, in which case the subtrees are actually biglist elements of the arbitrary form determined by the home object.
2
At every level, each node except the rightmost has between this.maxfanout/2 and this.maxfanout subtrees; the rightmost is allowed to have as few as 1 subtree.
36
5
0
7
36
5
4
73
2
Generic BigList Utilities
2
----------------------------
2
This is a package for maintaining huge persistent (sorted) lists in a format that is less likely to spam the server (which runs into a certain amount of trouble dealing with long ordinary lists --- btw we use `biglist' to refer to the huge data structure we're about to describe and `list' to refer to ordinary MOO lists {...}).  The biglist in question lives on a particular object, to which we will refer in the discussion below as the `home' object, and its various elements appear as leaves of a tree whose nodes are kept in properties of the home object.  It should be noted that the home object does not need to be (and in fact should *not* be) a descendant of this one; this object merely provides utilities for manipulating the properties on the home object that are used in a particular biglist manipulation.  
2

2
All of the utilities below refer to `caller' to locate the home object.  Thus verbs to manipulate a given biglist must be located on or inherited by its home object itself.  The home object needs to define the following verbs
2

2
  :_make(@args)     => new property on home object with value args
2
  :_kill(prop)      delete a given property that was created by :_make
2
  :_get(prop)       => home.prop
2
  :_put(prop,@args) set home.prop = args
2
  :_ord(element)    given something that is of the form of a biglist element
2
                    return the corresponding ordinal (for sorting purposes).
2
                    If you never intend to use :find_ord, then this can be a 
2
                    routine that always returns 0 or some other random value.
2

2
See #5546 (Generic Biglist Resident) or $big_mail_recipient
2
for examples.
2

2
Those of the following routines that take a biglist argument are expecting
2
either {} (empty biglist) or some biglist returned by one of the other routines
2

2
  :length(biglist)          => length(biglist) (i.e., number of elements)
2
  :find_nth(biglist,n)      => biglist[n]
2
  :find_ord(biglist,k,comp) => n where n is
2
     the largest such that home:(comp)(k,home:_ord(biglist[n])) is false, or
2
     the smallest such that home:(comp)(k,home:_ord(biglist[n+1])) is true.
2
     Always returns a value between 0 and length(biglist) inclusive.
2
     This assumes biglist to be sorted in order of increasing :_ord values 
2
     with respect to home:(comp)().
2
     Standard situation is :_ord returns a number and comp is a < verb.
2

2
  :start(biglist,s,e)  => {biglist[s..?],@handle} or {}
2
  :next(@handle)       => {biglist[?+1..??],@newhandle} or {}
2
     These two are used for iterating over a range of elements of a biglist
2
     The canonical incantation for doing
2
        for elt in (biglist[first..last])
2
          ...
2
        endfor
2
     is
2
        handle = :start(biglist,first,last);
2
        while(handle)
2
          for elt in (handle[1])
2
            ...
2
          endfor
2
          handle = :next(@listdelete(handle,1));
2
        endwhile
2

2
The following all destructively modify their biglist argument(s) L (and M).
2

2
  :set_nth(L,n,value)  =>  L[n] = value
2
     replaces the indicated element
2

2
  :insert_before(L,M,n) => {@L[1..n-1],@M,@L[n..length(L)]}
2
  :insert_after (L,M,n) => {@L[1..n],  @M,@L[n+1..length(L)]}
2
     takes two distinct biglists, inserts one into the other at the given point
2
     returns the resulting consolidated biglist
2

2
  :extract_range(L,m,n) => {{@L[1..m-1],@L[n+1..]}, L[m..n]} 
2
     breaks the given biglist into two distinct biglists.
2

2
  :delete_range(L,m,n[,leafkiller]) => {@L[1..m-1],@L[n+1..]}
2
  :keep_range  (L,m,n[,leafkiller]) => L[m..n]
2
     like extract_range only we destroy what we don't want.
2

2
  :insertlast(L,value)  => {@L,value}
2
     inserts a new element at the end of biglist.  
2
     If find_ord is to continue to work properly, it is assumed that the 
2
     home:_ord(elt) is greater (comp-wise) than all of the :_ord values
2
     of elements currently in the biglist.
2

2
  :kill(L[,leafkiller]) 
2
     destroys all nodes used by biglist.  
2
     Calls home:leafkiller on each element.
36
5
5
36
4
4
2
2
ghblu
2
biglist_utils
36
1
4
1
2
This is the Generic BigList Utilities utility package.  See `help $biglist' for more details.
36
5
4
2
0
22666
0
1084848672
36
1
#14
Generic Large-Capacity Mail Recipient

144
36
-1
-1
-1
45
17
70
44
_genprop
36
173
-1
_make
2
173
-1
_kill
2
173
-1
_get
36
173
-1
_put
36
173
-1
_ord
36
173
-1
_makemsg
36
173
-1
_killmsg
36
173
-1
_message_num
36
173
-1
_message_date
36
173
-1
_message_hdr
36
173
-1
_message_text
36
173
-1
_lt_msgnum
36
173
-1
_lt_msgdate
36
173
-1
receive_batch
36
173
-1
receive_message
36
173
-1
messages_in_seq
36
173
-1
display_seq_headers
36
173
-1
display_seq_full
36
173
-1
list_rmm
36
173
-1
undo_rmm
36
173
-1
expunge_rmm
36
173
-1
rm_message_seq
36
173
-1
renumber
36
173
-1
length_all_msgs
36
173
-1
length_num_le
36
173
-1
length_date_le
36
173
-1
exists_num_eq
36
173
-1
new_message_num
36
173
-1
from_msg_seq
36
173
-1
%from_msg_seq
36
173
-1
to_msg_seq
36
173
-1
%to_msg_seq
36
173
-1
subject_msg_seq
36
173
-1
body_msg_seq
36
173
-1
date_sort
36
173
-1
_fix_last_msg_date
36
173
-1
__fix
36
173
-1
init_for_core
2
173
-1
length_date_gt
36
173
-1
_repair
2
165
-1
repair
2
41
-1
restore_from
2
173
-1
set_message_body_by_index
36
173
-1
4
summary_uses_body
_mgr
mowner
_genprop
26
0
0
36
5
1
13
36
5
1
36
36
1
2

36
1
5
36
5
0
0
36
1
4
0
36
0
5
36
5
5
36
5
5
36
5
5
36
5
4
0
36
1
5
36
1
5
36
1
5
36
1
4
0
36
0
5
36
5
5
36
5
5
36
1
5
36
0
5
36
0
5
36
0
5
36
4
4
1
2
Generic Large-Capacity Mail Recipient
36
1
4
41
2
Generic Large Capacity Mail Recipient
2
-------------------------------------
2
Since any modifications to large lists entail copying the entire list over, operations on ordinary mail recipients having large numbers of messages, that actually change the content of .messages will take inordinately long.  Thus we have this version which makes use of the $biglist package, scattering the messages onto numerous properties so that write operations involving only a few messages will not require recopying of the entire list.
2

2
In nearly all respects it behaves as the ordinary Mail Recipient, except that it is faster for certain kinds of operations.
2

2
Certain unimplemented verbs, like :date_sort(), and :messages() currently return E_VERBNF.
2

2
To convert an existing $mail_recipient-child (call it #MR) into a $big_mail_recipient-child the basic procedure is
2

2
    ;;something.foo= #MR:messages();
2
    @rmm 1-$ from #MR
2
    @unrmm expunge
2
    @chparent #MR to $big_mail_recipient
2
    ;#MR:receive_batch(@something.foo);
2

2
Reconstructing Damaged Big Mail Recipients
2
------------------------------------------
2
On rare occasions, the tree structure created by $biglist can be corrupted (this can happen on lists sufficiently large that a list-modification operation (e.g., @rmm, @renumber) runs out of ticks/seconds).  In the vast majority of such cases, your messages are all still there; it's simply that the tree we use for finding/searching them is messed up.
2

2
To recover messages from a damaged big mail recipient (#DBMR)
2
 --- read to the end before you start typing any commands ---
2

2
create a fresh $big_mail_recipient (#NEWBMR) and then do the following:
2

2
   ;#NEWBMR:restore_from(#DBMR)
2

2
When this finishes, #NEWBMR will contain all of the mail messages we were able to find.  (note that this will include messages that you had deleted from #DBMR but not expunged).  #NEWMBR should thenceforth be useable in place of #DBMR, however if #DBMR contains custom verbs and non-clear properties, these will also need to be copied over.
2

2
Alternatively, one may do
2

2
   @copyobject #DBMR to #TEMPBMR
2
   ;#DBMR:restore_from(#TEMPBMR)
2

2
to rebuild #DBMR in place.  This, however, will take about twice as long.
2

2
oooooooooooooooooooooooooooooooo
2
WARNING!!! WARNING!!! WARNING!!!
2
oooooooooooooooooooooooooooooooo
2

2
Calling #OBJ:restore_from(...) COMPLETELY AND IRREVOCABLY REMOVES ALL MESSAGES from the object that it is run on (#OBJ); you MUST be sure to EITHER have made a copy of #OBJ OR be doing the restore to a DIFFERENT object.
36
5
4
2
0
37437
0
1084848672
36
1
#15
Limbo

16
2
-1
-1
-1
1
-1
73
5
acceptable
2
173
-1
confunc
2
173
-1
who_location_msg
36
173
-1
moveto
36
173
-1
eject
2
173
-1
0
4
5
2
4
4
1
2
The Body Bag
2
5
5
2
5
4
2
0
2330
0
1084848672
36
1
#16
Registration Database

0
36
-1
-1
-1
37
-1
25
10
find* _only* _every*
36
173
-1
add
36
173
-1
init_for_core
36
173
-1
suspicious_address
2
173
-1
suspicious_userid
2
173
-1
describe_registration
2
173
-1
prune
2
173
-1
report_prune_progress
2
173
-1
prune_reset
2
173
-1
search
2
109
11
7
registrar
prune_progress
prune_stop
total_pruned_people
total_pruned_characters
prune_task
alphabet
14
1
2
36
5
2
aaa
36
5
2
zzz
36
5
0
0
36
5
0
0
36
5
0
0
36
5
2
abcdefghijklmnopqrstuvwxy0123456789_.@+z
36
5
2

36
5
5
36
1
4
4
2

2

4
0
4
0
36
0
0
0
36
4
4
1
2
Registration Database
36
5
5
36
5
4
2
0
8549
0
1084848672
36
1
#17
Player-Creation-Log

0
2
46
-1
29
14
-1
-1
5
display_seq_headers
2
173
-1
msg_summary_line
2
173
-1
init_for_core
2
173
-1
is_usable_by
2
173
-1
expire_old_messages
2
13
-1
0
26
0
1
2
5
1
13
2
5
1
36
36
1
2

36
1
4
0
2
5
0
0
36
1
4
0
36
0
4
1
1
17
2
5
2
%n (%#) can't send to moderated list %t (%[#t]) directly.
2
5
4
0
2
5
4
0
2
5
4
1
1
2
36
1
4
0
36
1
0
2592000
36
1
0
0
36
1
4
0
36
0
5
2
5
5
2
5
4
0
36
1
5
36
0
5
36
0
5
36
0
0
0
2
4
4
2
2
Player-Creation-Log
2
PCL
36
1
2
Log of player creations.
2
5
4
2
0
3172
0
1084848672
36
1
#18
Verb Help DB

16
36
-1
-1
-1
1
-1
12
3
find_topics
36
173
-1
get_topic
2
173
-1
dump_topic
2
173
-1
1
help_msg
5
4
23
2
This is not a help database in the same way that children of $generic_help are. This object does the work when someone calls help in this way:
2

2
    help <object>:<verb>
2

2
It parses out the object and verb reference, pulls out the comments at the beginning of the verb, and returns them to the help system for nice display.
2

2
    :find_topics(string)
2
       tries to pull out an object:verb reference from string
2
       returns {string} if successful
2
       returns {} if not
2

2
    :get_topic(string)
2
       tries to pull out an object:verb reference from string (returns 0 if
2
          it fails to do so)
2
       tries to match the object
2
       checks the object to see if the verb exists
2
       pulls out the initial comments from the verb if they exist
2
       returns a meaningful list of strings to be displayed to the player
2

2
    :dump_topic(string)
2
       does the same as :get_topic above, but returns the verb documentation
2
          in dump form.
2
----
36
5
5
36
4
4
2
2
verbhelp
2
vh
36
5
2
A `help database' that knows about all of the documented verbs.
36
5
4
2
0
3958
0
1084848672
36
1
#19
Core Utility Help

16
36
-1
-1
-1
30
-1
84
3
find_topics
36
173
-1
get_topic
36
173
-1
dump_topic
2
173
-1
43
$login
$container
$mail_agent
MR-subscribing
MR-naming
MR-access
$mail_recipient
receiving-mail
mail-format
mail-resolve
sending-mail
mail-system
$player_db
core-index
object-matching
$no_one
$exit
$room
$help
$generic_db
$generic_editor
$generic_help
$generic_options
MR-sequences
MR-reading
MR-writing
MR-searching
$housekeeper
$recycler
$error
$biglist
$guest_log
mail-resolution
$news
matching
MR-expiration
mail-expiration
$big_mail_recipient
init_for_core
include_for_core
proxy_for_core
$core_objects
make-core-database
49
4
77
2
$login
2
------
2
This object manages command parsing for unconnected players and governs the initiation of an actual connection.  There are verbs pertaining to registration, controlling player creation, and doing site-locks (see `help blacklist' on $wiz_help).
2

2
COMMANDS FOR UNCONNECTED PLAYERS
2

2
Recall that for each line that an unconnected player types, the server parses that line into words (the same way normal commands are parsed into a list of words that is then assigned to `args') and then #0:do_login_command is called.
2

2
  :parse_command (@args) => {verb, @args}
2
    given the sequence of arguments that were fed to #0:do_login_command
2
    this returns the name of a verb on $login to be called together with a 
2
    list of arguments to be passed to it.
2

2
By default this just returns args iff args[1] names an actual verb on $login that is +x and has args {"any","none","any"}.  Otherwise, it returns one of
2

2
  .blank_command   -- verb to call if command line is empty
2
  .bogus_command   -- verb to call if command line otherwise unintelligible
2

2
In both cases :parse_command returns a verbname followed by the entire args list passed to it (including the would-be verb at the beginning if any).
2

2
Currently the following verbs are available to non-connected players
2

2
  h*elp @h*elp       -- print .welcome_message
2
  ?                  -- print a short list of available commands
2
  w*ho @w*ho         -- print a list of logged in players (excluding wizards)
2
  co*nnect @co*nnect -- connect to an existing player
2
  cr*eate @cr*eate   -- create a new player
2
  up*time @up*time   -- tell how long the server has been running
2
  version @version   -- tell which version of the server is running
2
  q*uit @q*uit       -- logoff
2

2
Adding a new command is fairly straightforward; just create a verb on $login, making sure a previous verb doesn't already match the name you want to give it.  Then give it args of "any" "none "any" and make sure it is +x.  Such a verb should begin with `if (caller != #0) return E_PERM; ...' so as to prevent anyone other from a not-logged-in player from making use of it.
2

2
CUSTOMIZATIONS
2

2
  .welcome_message 
2
    -- the message for "help" to print.
2
  .create_enabled 
2
    == 0 => @create prints .registration_string if one tries to use it
2
    == 1 => anyone from a non-blacklisted site (see `help blacklist')
2
            may use @create to make a new player
2

2
  .registration_address
2
    -- an email address for character creation requests
2
  .registration_string  
2
    -- string to print to players to give them information about how to get 
2
       a character created for them, .registration_address is substituted 
2
       for %e, % for %%
2
  .newt_registration_string
2
    -- string to print to @newted players (see `help @newt').
2
       same substitutions as for .registration_string.
2

2
  .max_connections
2
    -- integer representing the maximum connected players permitted on this moo.
2
  .connection_limit_msg
2
    -- string printed out when this is reached.
2
  .lag_exemptions
2
    -- list of non-wizard players who may login anyway.
2

2
Other verbs
2
   :registration_string()      => .registration_string with substitutions
2
   :newt_registration_string() => .newt_registration_string with substitutions
2
   :player_creation_enabled(connection) 
2
       decides whether someone on connection should be allowed to create 
2
       a player.  If you decide this shouldn't depend strictly on the blacklist
2
       and on the value of .create_enabled, here's where the extra code can go.
2
   :check_for_shutdown()
2
       prints a warning message to append to the login banner in the event 
2
       that the server will be going down soon.
2
   :check_player_db()
2
       prints a warning message to append to the login banner in the event 
2
       that $player_db is being reloaded to warn players that their character
2
       names might not be recognized.
2

2
SITE LOCKS
2
see `help blacklist'
2

36
5
4
29
2
The Generic Container (for programmers)
2

2
In addition to the command verbs described under `help containers'
2
and the _msg properties described in `help container-messages',
2
the following verbs and properties are available for use within programs
2

2
.opened == TRUE iff the container is open
2
.dark   == TRUE iff the contents of the container may be seen
2
.opaque -- describes the correlation between .open and .dark
2
   == 0  container is always !dark
2
   == 1  container is dark iff it is closed
2
   == 2  container is always dark              
2

2
:set_opaque(newvalue)   
2
  changes the .opaque value for the container
2
  => newvalue or E_PERM or E_INVARG
2

2
:set_opened(newvalue)   
2
  opens/closes the container (updates .open and .dark) according to newvalue
2
  => newvalue or E_PERM
2

2
:is_openable_by(player) 
2
 what the :open command uses to test whether the player should be able to open
2
 the container.  By default this refers to .open_key  (set by
2
 @(un)lock_for_open), but the object owner is free to customize this.
2

2
N.B.:  There is no way to directly set .dark; .dark can be changed only by 
2
changing one of .opaque or .opened.  Use :set_opaque(0) and :set_opaque(2)
2
to have .dark change independently of the value of .opened.
36
5
4
68
2
$mail_agent
2

2
This object contains a two distinct sets of routines:
2

2
  1.  utilities for performing basic mailsystem functions, e.g.,
2
      matching on recipient names, resolving mail forwarding, 
2
      formatting messages, sending messages
2

2
Recipient Matching
2

2
match           - match on a $mail_recipient
2
match_recipient - match on either a $mail_recipient or a player
2
match_failed    - print angry messages to the user for $failed/ambiguous_match
2

2
look_self  - provides a list of available $mail_recipients
2
check_names
2
touch
2
accept
2

2
Message Format
2

2
make_message        - produces a message in the canonical transmission format
2
name                - single recipient     => string for address field
2
name_list           - list of recipients   => string for address field
2
parse_address_field - address field string => object list
2

2
Sending Messages
2

2
send_message  - advertised message sending routine.
2
raw_send      - raw message sending routine 
2
                (only called by $mail_editor:send and this:send_message)
2
resolve_addr  - converts a given list recipients into a list of actual 
2
                recipients and objects to be notified.
2
sends_to      - Does X forward (transitively) to Y
2

2
Mail Options
2

2
option         
2
option_verbose
2

2
  2.  canonical versions of mail_recipient verbs
2

2
Ideally, the verbs to perform operations on a given mail recipient would be located on the recipient itself, except for the fact that these verbs also need to be located on players, which for various reasons, shouldn't be children of $mail_recipient.  Multiple inheritance would solve our problems, but we don't have it yet.  Ergo, both $mail_recipient and $player refer to the following verbs here:
2

2
display_seq_full     print entire text of messages  (@read)
2
display_seq_headers  print headers of messages      (@mail)
2
rm_message_seq       remove messages                (@rmm)
2
undo_rmm             undo last rm_message_seq       (@unrmm)
2
expunge_rmm          flush removed messages         (@unrmm expunge)
2
list_rmm             list removed messages          (@unrmm list)
2
renumber             renumber messages              (@renumber)
2
msg_summary_line     msg header => display_seq_headers/list_rmm summary line
2

2
parse_message_seq    command line msg sequence spec => message sequence
2
new_message_num      => message number of next new message
2
length_all_msgs      => number of messages (total)
2
length_num_le        => number of messages numbered <= some number
2
length_date_le       => number of messages dated <= some date
2
exists_num_eq        => true iff there exists a messsage with the given number
2
from_msg_seq         => message sequence of msgs from given sender(s)
2
to_msg_seq           => message sequence of msgs to given recipient(s)
2
subject_msg_seq      => message sequence of msgs with subjects containing text
2
body_msg_seq         => message sequence of msgs with bodies containing text
2
messages_in_seq      => list of {message number, message} pairs
2

2
messages             == :messages_in_seq(1,:length_all_msgs()+1)   (obsolete)
2

2
The $mail_agent versions of these verbs are set_task_perms(caller_perms()) and perform their operations on caller, which in turn is assumed to have done any necessary security checks.
36
5
4
38
2
Subscribing to Mail Recipients
2
------------------------------
2
There are two notions of being "subscribed" to a mailing list/recipient.
2

2
(1) Hard subscribed == being on the recipient's .mail_forward list so that mail sent to this list is forwarded to one's own .messages as well (see `help mail-forwarding').
2

2
(2) Soft subscribed == keeping track of a current message for this recipient and (optionally) being on the recipient's .mail_notify list.
2

2

2
Each player has a .current_message property that contains, for each recipient the player cares to keep track of, a current message number and a last read date.
2

2
player:current_message(rcpt)                 (somewhat obsolete)
2
 => player's current message number for rcpt 
2

2
player:get_current_message(rcpt) 
2
 => player's {current message number for rcpt, last-read-date for rcpt}
2

2
player:make_current_message(rcpt)
2
 => adds a current_message entry for rcpt  (NOOP if rcpt == player)
2

2
player:set_current_message(rcpt,n|E_NONE,[,date])
2
 => sets player's current message number for rcpt to n iff n!=E_NONE
2
    updates the last-read-date for rcpt to date iff date > last-read-date
2

2
player:kill_current_message(rcpt)
2
 => removes current-message info for rcpt  (NOOP if rcpt == player)
2

2

2
On $mail_recipient, .mail_forward and .mail_notify are -c so one needs to use the following verbs to actually modify them.
2

2
    :add_forward(@new_recipients)
2
    :delete_forward(@recpients)
2
    :add_notify(@new_notifiees)
2
    :delete_notify(@notifiees)
2

2
A recipient's owner is, of course, allowed to make arbitrary changes to .mail_forward and .mail_notify.  However, the default versions of these verbs also allow any player to add him/herself to a recipient's .mail_forward or .mail_notify if the recipient is readable (see `help MR-access') by him/her.
2

2
Likewise any player may use the :delete* verbs to delete him/herself from any .mail_forward/.mail_notify list, regardless of his actual access to the list.
36
5
4
15
2
One may always refer to a list by its object number.  In order to refer to it by name, it must be contained in $mail_agent, which holds all mailing lists, i.e., those that you want others to be able to refer to by name.
2

2
The .aliases field holds the names by which one may refer to the list, but only those names not containing spaces actually count for anything.  As with certain other types of objects (e.g., players), set_aliases() needs to be called in order to change the .aliases field.
2

2
$mail_agent:match(name) 
2
    is the canonical way to obtain the objectid of a mailing list 
2
    given the name ("*" is assumed; an initial "*" will be dropped).
2

2
$mail_agent:match_recipient(name) 
2
    is the canonical way to obtain the objectid of a list or player
2
    matching the given name.  An initial "*" indicates that this is 
2
    supposed to be a list.
2

2
$mail_agent:match_failed(objid,name) 
2
    is the mail_recipient counterpart to $command_utils:object_match_failed
36
5
4
32
2
Controlling Access to Mail Recipients
2
-------------------------------------
2
:is_writable_by(one) - one may alter/add/remove saved messages
2
:is_readable_by(one) - one may read messages.
2
:is_usable_by(one)   - one may send to this list
2

2
By default, these verbs refer to the following properties:
2

2
writers   - list of players other from the owner who can do anything
2
readers   - if == 1, indicates a public mailing list.
2
            list of additional readers (by default anyone who receives mail 
2
            sent to the list can read the saved messages).
2
moderated - if false, indicates a normal mail recipient everyone can send to.
2
            otherwise this should be a list of approved senders.
2

2
Terminology:
2
  A mailing list is "public" if everyone can read it.
2
  A mailing list is "moderated" if not everyone can send to it.
2

2
Note that while being able to write to a recipient implies being able to read from it or send to it, neither of read-ability or send-ability implies the other.
2

2
It is highly recommended that if you are creating custom mail recipients with variable reader/sender lists, i.e., you find you need to write your own :is_readable/usable/writabe_by verbs, you are best off if such verbs are of the form
2

2
  return pass(@args) || << your_test(args[1]) >>
2

2
and have .writers == .readers == {} and .moderated == 1.  This will ensure
2
 (1) wizards having write access
2
     --- necessary in order for :receive_message to work
2
 (2) writers being able to read and send (the converse being a ludicrous 
2
     situation), 
2
 (3) persons on the mail_forward list of someone with reader access will also
2
     have read access (convenient).
36
5
4
20
2
Generic Mail Recipient
2
----------------------
2
A "mail recipient" is, by definition, an object that can be sent mail.
2
Mail recipients must either be players or descendants of $mail_recipient.
2

2
One source of confusion is that the terms "mail recipient", "mail folder", "mailing list", and "mail collection" really all refer to the same kind of object.  It so happens that $mail_recipient serve several distinct functions and we tend to use whatever term happens to best match the application under discussion, e.g., it's a "mailing list" if we're playing with its .mail_forward property but it's also a "mail folder" if we're examining the messages that have been saved in it.
2

2
Note that, by default, a freshly created recipient is accessibly only by you.  If you wish to make a publically accessible recipient, set .readers=1.  Furthermore, if you want to allow a message on your recipient to be removed by its sender without your intervention, set .rmm_own_msgs=1.  Finally, in order for other players to be able to refer to your recipient by name, the object must reside in $mail_agent.  $mail_agent will not accept the object unless it has an actual description and a name distinct from all other mail recipient names/aliases.
2

2
Topics:
2

2
  MR-access       -- controlling read, write and send access to a recipient
2
  MR-naming       -- naming conventions and how to match on recipient names
2
  MR-sequences    -- message sequence arguments to $mail_recipient verbs
2
  MR-reading      -- reading messages/headers on recipients
2
  MR-searching    -- searching message lists for patterns in certain fields
2
  MR-writing      -- removing and renumbering messages
2
  MR-subscribing  -- updating .mail_forward, .mail_notify 
2
                       and the story of .current_message
2
  MR-expiration   -- expiring and netmailing messages from recipients
36
5
4
24
2
Receiving Mail
2
--------------
2
By definition a recipient "receives" a mail message when its :receive_message verb is called with that message as an argument.
2

2
:new_message_num()
2
=> number that will be assigned to the next incoming message.
2
By default this returns the maximum of the message numbers appearing in 
2
messages or .messages_going, incremented by 1.  If the recipient is a player
2
then the value returned will be 1 higher if it conflicts with the player's 
2
current message number for him/herself.
2

2
:receive_message(msg,sender)
2
By default this first calls this:new_message_num to obtain a message number to assign to the incoming message and then appends {num,msg} to this.messages.  
2
`sender', the original sender, is supplied in case one wants different 
2
action depending on who is sending the message (e.g., mail-gagging).
2
The return value should be an error or string if :receive_message is considered to have failed in some way.  Otherwise, a number should be returned --- this number is given to any :notify_mail routines that are called and is expected to either be 0 or the number assigned to the incoming message.
2

2
Note that :receive_message can do arbitrary things, including resending the same message to a new destination.  Hacking :receive_message to resend messages is different from using .mail_forward in the following respects
2
  (1) the resent message is considered to be a distinct message having this 
2
      object as its "author" --- i.e., the From: line will necessarily be 
2
      different.
2
  (2) since this "forwarding" is invisible to the mailsystem, 
2
      there is no protection against loops and multiple copies.
2

36
5
4
34
2
Mail Transmission Format
2
------------------------
2
There is a standard message format used for transmitting messages.  This is the format that $mail_editor:make_message produces, and that :receive_message verbs on players and $mail_recipients expect to see.  The (currently experimental) @refile and @copym commands also use this format to transfer messages.
2

2
This *transmission* format is distinct from the *storage* format, though, for convenience this same format is often used as well for storing messages in player collections and ordinary $mail_recipient children though, in general, there is no requirement that this be the case.
2

2
A transmitted message is a list in the following form
2

2
   date (number),
2
     the time() value at the time the message was sent.
2
   from (string),
2
     the sending object (address list form)
2
     if this is not a player, an additional header will indicate the 
2
     current ownership of the object.
2
   to  (string),
2
     recipients (address list form) which can either be players 
2
     or $mail_recipient descendents.
2
   subject (string),
2
     subject of the message, or " " if there is no subject,
2
  @additional optional headers (list of strings),
2
     each header has the form "<header-name>: text" where <header-name>: 
2
     is padded out to a width of 10 columns for the convenience of 
2
     :display_message.  Currently "Reply-to: <address list>" is the only 
2
     additional header in use,
2
   "",
2
  @body of message (list of strings)
2

2
Note that the from, to and subject lines do *not* include a header name like "From:", "To:", or "Subject:".  The @'s indicate that the lists in question get spliced in (as usual), thus the entire message is a list whose first element is a number and the rest are strings.
2

2
The address lists that appear in the from and to lines is a string in the form a sequence of object ids, each enclosed in parentheses and preceded by optional text, e.g.,
2

2
  "*Core-DB-Issues (#8175), Rog (#4292), and Haakon (#2)"
2

2
The text is intended to give the current name of each object for the benefit of human readers, but is actually ignored by all header parsing routines.  The convention is that the text is either a player name or a * followed by a mailing list name.
36
5
4
52
2
Resolving Mail Forwarding & Notification
2
----------------------------------------
2
For each recipient of a given mail message, the following two verbs are called to determine where the message should actually go and who should be notified about it:
2

2
:mail_forward([from])
2
    should return either
2
     . a list of objects (either players or $mail_recipients)
2
         to which mail for this recipient will be redirected.
2
     . a string error message to be printed to the player sending the message.
2
         If this recipient is one of the original destinations (i.e., not the
2
         result of a previous forwarding), no mail is actually sent.
2

2
    If :mail_forward returns a nonempty list, the recipient itself will *not*
2
    actually receive the mail message unless it is included in the list.
2
    #-1 is allowed to be on the list; it is ignored but does make the list 
2
    nonempty.  Thus, having :mail_forward() return {#-1} is the canonical way
2
    to have arriving mail disappear without being kept or forwarded.
2

2
:mail_notify([from]) 
2
    should return a list of objects that are to be told about any mail sent 
2
    to this recipient (whether or not the recipient actually receives it).
2
    Said objects must have a :notify_mail verb, but other from that, there 
2
    is no restriction on what these can be.
2

2
    object:notify_mail is called with the arguments 
2
    (sender,recipients,msgnumbers) where 
2
      recipients  == list of recipients including object in .mail_notify
2
      msgsnumbers == corresponding list of :receive_message return values
2
                 (or 0 if :receive_message is not actually called, which
2
                  will be the case if the recipient forwards without keeping)
2

2
When called as part of a mail send, the `from' argument is the immediate predecessor on the forwarding chain.  The default versions of these verbs return the values of .mail_forward and .mail_notify respectively (pronoun_subbing if the value is a string), unless this is a moderated mailing list and `from' is an unapproved sender (see `help MR-access') in which case the following verbs are called instead:
2

2
:moderator_forward(from) 
2
    what :mail_forward should return for mail coming from unapproved senders
2
    This returns .moderator_forward (pronoun_subbed if a string) by default.
2

2
:moderator_notify(from)
2
    what :mail_notify should return for mail coming from unapproved senders
2
    This returns .moderator_notify (pronoun_subbed if a string) by default.
2

2
Since the :mail_forward verbs only see the previous sender in the forwarding chain, if, e.g, B is moderated but A can send to B (i.e., B:mail_forward(A) returns an actual list), then any mail sent to A goes to B even if the original sender isn't normally allowed to send to B directly.
2

2
These verbs should all allow `from' to be omitted in which case they should return as if `from' were a generic approved sender (e.g., wizard).
2

2
It should rarely be necessary to actually modify any of :*_forward/*_notify verbs, since one has a fair amount of control over their behavior via the following properties
2

2
  .mail_forward
2
  .mail_notify
2
  .moderated          (see `help MR-access')
2
  .moderator_forward
2
  .moderator_notify
36
5
4
24
2
Sending Mail
2
------------
2
$mail_agent:send_message(from,recipients,headers,body)
2
  from:        sender of the message 
2
               (this must be you or something you own; otherwise => E_PERM)
2
  recipients:  object or list of objects (must all be players or 
2
               $mail_recipient descendants)
2
  headers:     either a string (contents of the Subject: line) 
2
               or a list {subject,replytos} replytos is a list 
2
               of objects designated to receive replies.
2
               Use {"",replytos} to have a Reply-to: without a Subject:
2

2
This is the canonical way to send a mail message from a program.
2
This calls $mail_agent:make_message to format the arguments into an actual message (see `help mail-format') and then $mail_agent:raw_send to do the actual sending which goes as follows:
2

2
  (1) Call :mail_forward on all recipients add any new recipients thus obtained to final recipient list, keep calling mail:forward on the new recipients until we obtain no additional recipients.  If one of the initial recipients is invalid, is not a player or $mail_recipient, or has its mail_forward return a string error, then we print the error message and abort at this point with no mail being sent.  If one of the later recipients bombs similarly, error messages are printed, but in this case mail still goes out to the other recipients.
2

2
  (2) Call :mail_notify on all recipients encountered in stage (1) to get a list of objects to notify.
2

2
  (3) All final recipients receive the message (see `help receive-mail')
2
  (4) All notifications are delivered (using :notify_mail())
2

2
We return {0, @failed_recipients} if we bombed out at step 1.
2
Otherwise return {1, @actual_rcpts} indicating what mail was sent.
36
5
4
13
2
Mail System
2
-----------
2
The following topics describe the guts of the LambdaCore mail system
2

2
sending-mail     -- how to send mail from a program; what happens.
2
mail-forwarding  -- how to do mail forwarding/notification (the simple version)
2
mail-resolve     -- how mail forwarding/notification works, in gory detail
2
receiving-mail   -- what :receive_message should do
2
mail-format      -- format of transmitted messages
2
mail-command-parsing   (TODO) -- routines for parsing mail commands
2

2
$mail_recipient  -- generic non-player mail recipient
2
$mail_agent      -- mail utility object
36
5
4
34
2

2
Database of Players
2
-------------------
2
This is an instance of the Generic Database ($generic_db) that
2
holds the {name/alias,#objectid} pairs for every 
2
name and alias of every player in the MOO.
2

2
Verbs supplied include
2

2
  :find(string)        => player or $ambiguous_match or $failed_match
2
  :find_exact(string)  => player or $failed_match (does not do partial matches)
2
  :find_all(string)    => list of all matching players
2

2
  :insert(string,player) 
2
       records that string is now a name or alias of player
2
  :delete(string) 
2
       removes string from the db
2
  :available(string)
2
       returns 1 if string is available as a player name or alias,
2
       an object if string is in use, or 0 if string is otherwise unavailable.
2
  :load()
2
       resets the db, inserting all current player names and aliases.
2

2
The internal representation and all of the above verbs (except :load() and
2
:available()) are as described for $generic_db.
2

2
It should be noted that for any application that involves resolving a player name from a command line, you should be using $string_utils:match_player() rather than $player_db:find(), since the former will deal correctly with other ways of referring to players apart from their names and aliases (e.g., literal object numbers, "me", "$no_one"...).
2

2
:load() needs to be done periodically as it is possible for the player db 
2
to get out of synch with reality.  In particular, there is currently no way
2
to block someone writing his own player :recycle() verb that neglects to 
2
remove his names from the player db.
2

2
While a :load() is in progress the .frozen property is set to 1 to indicate that any results of :find*() are not to be trusted.
36
5
4
2
2
*index*
2
Core Utility Help Topics
36
5
4
64
2

2
Which :match...() Verb Do I Call?
2
---------------------------------
2
There are many situations where one wishes to obtain an object from a room or a player's .contents whose name/aliases matches a particular string.  There are four main verbs available for this and it is important to understand the distinctions between them and how they are supposed to be used.
2

2
(*)  LOC:match("X")
2
     -- what you get looking for something that is inside LOC and named "X".
2
        By default, this looks through LOC.contents to find a unique object 
2
        having a name or alias that has "X" as a prefix.
2

2
Essentially, you can think of :match as a contents-matching verb, though, e.g., for rooms you also get matches on exits as well.
2

2
(*)  LOC:match_object("X", YOU)           [YOU defaults to player]
2
(*)  YOU:my_match_object("X", LOC)        [LOC defaults to player.location]
2
     -- what YOU get being located at LOC and looking for something named "X".
2
        By default these both return $string_utils:match_object("X",LOC,YOU)
2

2
(*)  $string_utils:match_object("X", LOC, YOU) 
2
   -- what you *would* get *if* YOU were a typical player, YOU were inside LOC,
2
      YOU were looking for something named "X", *and* LOC were a typical place.
2

2
In other words, $string_utils:match_object describes the :match_object() algorithm for "typical places" and the :my_match_object for "typical players":
2

2
    (1)  check for "X" being one of "", "me", "here", "$something", or "#n"
2
    (2)  try YOU:match("X") i.e., something in your inventory (maybe)
2
    (3)  try LOC:match("X") i.e., some object in the room (maybe)
2

2
The distinction between these location:match_object and player:my_match_object has to do with whether the player or the location should determine what the matching algorithm is.  Which one you should use depends on the command that you are writing.  If you are writing a command with a virtual-reality flavor, then you should be respecting the room owner's idea of which objects you can "see" and thus the command should be calling the location's :match_object verb.  If you are writing a building/programming command where it is appropriate for the player to determine the matching algorithm  --- whether because the current location is irrelevant, not to be trusted, or both --- then the player's :my_match_object verb should be called.
2

2
Examples:
2

2
  `look diamond in box'
2
      calls box:match("diamond").  This is a match on the contents of box.
2

2
  `take ball', 
2
      calls player.location:match_object("ball")
2
      to determine which "ball" to take.  Note that if the room is dark, 
2
      we might not be able to find any "ball".
2

2
  `@program widget:foo', 
2
      calls player:my_match_object("widget") to get the player's own idea
2
      of what "widget" should be.  Note that if I were carrying something 
2
      named "widget" and expecting to be programming a :foo() verb on it,
2
      it would be potentially disastrous should the room where I am decide
2
      for me to be programming something else (not even necessarily 
2
      called "widget").
2

2
Object Matching Failures
2
------------------------
2
As with other matching routines, one gets back 
2

2
  $failed_match in the case of no matching object
2
  $ambiguous_match in the case of more than one matching object
2
  $nothing in the case of a blank string argument
2

2
or an object-id.  In these first 3 cases, one usually wants to translate these nonresults to the player; this is what $command_utils:object_match_failed.  The standard idiom to mimic what the builtin parser does, say, with the direct object is
2

2
  dobj = foo:match_???(dobjstr);
2
  if($command_utils:object_match_failed(dobj, dobjstr))
2
    "...give up.  nothing to do.   error message has already printed...";
2
  else
2
    "...dobj is something useful.  Continue...";
2
    ...
2
  endif
36
5
4
25
2
$no_one
2
-------
2
... is a powerless player.  He owns no objects, not even himself; nor does he own any verbs.  He is, however, a programmer and thus may use eval().  In fact his sole purpose is to evaluate questionable code.  `questionable' could be in either or both of the following senses 
2

2
(1) Its origin is sufficiently uncertain so that there is no obvious way of deciding whose permissions it should run under.
2
(2) The code itself is potentially malicious, i.e., to the extent that one does not want to be evaluating it using one's own permissions.
2

2
set_task_perms($no_one);  is thus the canonical idiom in wizard code for rendering anything that follows mostly harmless.  For use by ordinary programmers, we have:
2

2
    $no_one:eval(string)
2

2
which attempts to evaluate an arbitrary string using $no_one's permissions.
2
string is either an expression or ";" followed by one or more statements, of which the final semicolon may be omitted.  return values are what eval() would return (either {1,value} or {0,@error_messages}).
2

2
Similarly, we have
2

2
    $no_one:eval_d(string)
2

2
which attempts to evaluate the specified string, but does it without the debug flag turned on (so that, for example, you'll get an error as opposed to terminating by traceback).
2

2
And, as a helpful utility for calling verbs whose behavior may be unpredictable, there is
2

2
    $no_one:call_verb(object, verb name, args)
2

2
which calls the specified verb with $no_one's permissions.
36
5
4
19
2
Exits
2
-----
2
An exit can be renamed by either the owner of the exit or the owner of its source.
2

2
The standard verbs that are called in exit movement are:
2

2
:move(object)  - moves the object via this exit
2
:invoke()      - equivalent to :move(player)
2

2
When an exit is invoked on a particular object (via exit:move(object)), the following occurs.
2

2
(1) The exit may be locked against the object, in which case we print the 
2
   nogo messages and quit.
2

2
(2) (room=exit.dest):bless_for_entry(object) is called.  Assuming that exit is recognized by room as being a legitimate entrance (i.e., is in room.entrances), this will enable room:accept(object) to return true.
2

2
(3) object:moveto(room) is called and the various messages (see `help exit-messages') are :announced/:told.  Note that this, in accordance with the way the builtin move() (and hence the default :moveto()) works, we get a call to room:accept(object) which checks for the room itself being locked against the object, and otherwise returns true if the blessing in the previous step worked.  The move is performed, here:exitfunc(object) and room:enterfunc(object) are called.  In particular, room:enterfunc clears the blessing bestowed in (2) now that it is no longer needed.
2

2
In general, the move may fail, in which case we :announce the (o)nogo_msgs.
36
5
4
81
2
The Generic Room ($room)
2
----------------
2

2
(1)  Announcements
2

2
:announce         (@text)         => broadcasts to all except player
2
:announce_all     (@text)         => broadcasts to all
2
:announce_all_but (objects,@text) => broadcasts to all except those in objects
2

2
say, emote
2

2

2
(2)  Command recovery
2

2
:huh            (verb,args) - server hook: last chance to make sense of verb
2
:here_huh       (verb,args) - room's last attempt to parse something
2
:here_explain_syntax (this,verb,args) - attempts to explain usage of verb
2

2

2
(3)  Residency
2

2
free_home  - true => @sethome allows anyone to set his .home to be here
2
residents  - objects on this list may teleport in and/or set their homes here.
2

2
:accept_for_abode(player) 
2
            => true iff player should be allowed to set .home to this room.
2

2
@resident*s
2

2

2
(4)  Looking
2

2
dark  - true => contents are not visible
2
ctype - 0..3 for four different styles of .contents lists
2

2
:match         (string)        => exit or object in room's .contents
2
:tell_contents (objects,ctype) - format objects according to ctype, tell player
2

2
l*ook
2

2

2
(5)  Entrance and exit.
2

2
:accept (object) - Called by move() and :moveto() before an object enters a room, if false is returned, movement is prevented.  Protocol permits this verb to make noise (though this is discouraged) as this is the only place the room will learn the object's original location.
2

2
:acceptable (object) - Called by verbs which wish to check whether movement will be possible.  Protocol prohibits this verb from making noise and requires it to return the same value as :accept would for the same arguments.
2

2
:is_unlocked_for (object) - interface with the @lock protocol.  Returns true or false depending on the state of locks for the object with the room.  Other things may prevent entrance even if this returns true.  Protocol prohibits this verb from making noise. 
2

2
:enterfunc (object) - called after entrance has succeeded.  Noise is fine.
2

2
:exitfunc (object) - called after an object has successfully left.  Noisemaking is fine.
2

2
(6)  Topology and Movement via Exits
2

2
See `help $exit' for an explanation of how the generic $exit works.
2

2
free_entry     - true  => `teleporting' in is allowed
2
                  false => only residents may teleport in
2
exits          - list of invokable exits leading from this room
2
entrances      - list of recognized exits leading to this room
2
blessed_object - object currently entering via an exit
2
blessed_task   - task_id for entering object
2

2
:match_exit      (string) => exit whose name matches string
2
:bless_for_entry (object) - set up room to accept object arriving from entrance
2
:add_exit        (exit)
2
:add_entrance    (exit)
2
:remove_exit     (exit)
2
:remove_entrance (exit)
2

2
e/east/w/west/s/south/n/north/ne/northeast/nw/northwest/se/southeast/sw/southwest/u/up/d/down, go, @add-exit, @add-entrance, @remove-exit, @remove-entrance, @exits, @entrances 
2

2

2
(7)  Ejection
2

2
victim_ejection_msg/oejection_msg/ejection_msg
2
:*_msg()  messages
2

2
@eject
2

36
5
4
2
2
*forward*
2
$generic_help
36
5
4
79
2
Generic Database
2
----------------
2
This holds a collection of {string key, datum} pairs, where datum can be anything.  At most one datum may be associated with any given string.  Data may be anything (lists, strings, numbers, objectids).  If you like, you can think of this as an array indexed by strings.
2
Verbs supplied include
2

2
  :find(string)          => datum, $ambiguous_match or $failed_match
2
  :find_key(string)      => full string key,  $ambiguous_match or $failed_match
2
  :find_exact(string)    => datum or $failed_match (no partial matches)
2
  :find_all(string)      => list of all data corresponding to matching strings
2
  :find_all_keys(string) => list of all matching strings
2

2
  :insert(string,datum)  
2
       if the string is already present in the db, 
2
       changes the associated datum and returns {old_datum};
2
       otherwise enters a new {string,datum} pair and return 0.
2
  :delete(string)
2
       if there is a datum associated with string, 
2
       remove this association and return {datum}; otherwise return 0.
2
  :delete2(string,datum)
2
       if the given datum is associated with string, 
2
       removes that association and return {datum}, 
2
       if some other datum is associated with string, just return {other datum}
2
       otherwise return 0.
2
  :clearall([4|3])
2
       removes all associations from the database.
2
       optional argument changes the type of the database 
2
       (4 is normal, 3 is a kludge for when the data are simply boolean flags
2
        i.e., this is a set of strings rather than a string-indexed array;
2
        more on this below)
2

2
  count [entries|chars] in this
2
        provide some vague statistics about how big this thing is.
2

2
N.B.  As entries get made, properties belonging to $generic_db.owner will be created on the db object itself.  These properties will be created having flags as specified by .node_perms, which by default is "r", but can be changed to "" should you want to ensure that randoms don't have access to the raw information.
2

2
Implementation notes
2
 - - - - - - - - - -
2
The representation is as a `trie', a tree in which each internal node corresponds to a prefix shared by two or more strings in the db.
2
Each internal node is kept in a property named " "+<prefix>, where <prefix> is a prefix shared by all strings in the subtree under this node.
2
The property value is a 4 element list
2

2
this.(" "+<prefix>)[1] = <common>
2
   maximal continuation shared by all strings beginning with prefix
2
   i.e., all these names actually begin with <prefix>+<common>
2

2
this.(" "+<prefix>)[2] = <continuations>
2
   string of all characters <c> that can follow <prefix>+<common> for which
2
   there is more than one string in the db beginning with <prefix>+<common>+<c>
2

2
this.(" "+<prefix>)[3] = <exact_matches>
2
   list of all strings in this subtree for which 
2
   the character (or lack thereof) following the <prefix>+<common> substring 
2
   suffices to determine the string.
2

2
this.(" "+<prefix>)[4] = <data>
2
   list of data corresponding to the strings in [3].
2

2
Child nodes are       this.(" "+<prefix>+<common>+<c>) 
2
       for all <c> in this.(" "+<prefix>)[2].
2
The root node is this.(" ").
2
If, e.g., there are 2 or more strings in the db beginning with a, 
2
there will be a node this.(" a").  
2
If all of these strings actually begin with "ani", then this.(" a")[1]=="ni".
2
The db consisting of the 5 correspondences
2

2
  {"animal", #1}
2
  {"anime",  #2}
2
  {"anil",   #3}
2
  {"anile",  #4}
2
  {"banal",  #5}
2

2
would be represented
2

2
this.(" ")    =={"",  "a",  {"banal"},         {#5}}
2
this.(" a")   =={"ni","lm", {},                {}}
2
this.(" anim")=={"",  "",   {"animal","anime"},{#1,#2}}
2
this.(" anil")=={"",  "",   {"anil","anile"},  {#3,#4}}
2

2
In some cases one may merely wish to hold a collection of strings without trying to associate a particular datum with each string.  One may then instead set up a db without the fourth field on each of the properties.  In this case the datum is taken to be the found string itself and that is what gets returned by :find*() in the event of a successful search.   :find and :find_key are then equivalent as are :find_all and :find_all_keys.  To setup the db this way, do a :clearall(3).  :clearall(4) reverts to the above described type of db with a separately kept datum.  Note that you can't change the type without emptying the db.  3 and 4 are currently the only db types allowed.
36
5
4
201
2
The Generic Editor enables a player to edit a list of strings.  While one might contrive to use it directly, it is rather intended as a parent for some actual editor.  It supplies the following commands:
2

2
say         <text>                      w*hat       
2
emote       <text>                      abort       
2
lis*t       [<range>] [nonum]           q*uit,done,pause 
2
ins*ert     [<ins>] ["<text>]           
2
n*ext,p*rev [n] ["<text>]               
2
del*ete     [<range>]                   
2
f*ind       /<str>[/[c][<range>]]       
2
s*ubst      /<str1>/<str2>[/[g][c][<range>]]
2
m*ove,c*opy [<range>] to <ins>          
2
join*l      [<range>]                   
2
fill        [<range>] [@<col>]          
2

2
$editor_help.(cmdname) descrbes cmdname
2
$editor_help.insert    descrbes insertion points (<ins>)
2
$editor_help.ranges    descrbes range specifications (<range>)
2

2
You'll notice that nowhere does it say how to load in a given list of strings or how and where one may save said list away when one is done editing.  These commands are supplied by the child editor object.  The generic editor contains only the code for editing lines, though it defines additional functions for use by the children:
2

2
  :loaded(player)
2
     returns the index (player in this.active) iff text has been loaded
2
     from somewhere, otherwise returns 0.
2

2
     Note that, by default, there is a difference between 
2

2
        having nothing loaded                (:text(who)==0) and 
2
        having loaded something with no text (:text(who)=={}).
2

2
     If you don't care about this distinction in a particular case,
2
     just do (player in this.active) instead of this:loaded(player).  
2
     If you don't want your editor to make this distinction at all, do
2

2
        @stateprop texts={} for <youreditor>
2

2
     which changes the initial value of :text() to {} 
2

2
In all functions below, 'who' is the index returned by :loaded(player) 
2

2
BTW, be careful about using 'player' in non-user (i.e., +x this-none-this) verbs --- much better to have the user verb get the index with :loaded() and then pass that around.  
2

2
Also be careful about suspend() and verbs that call suspend().  In particular, the player's index in the .active list can change during the suspend interval, so you must be sure to obtain the index (e.g., using :loaded()) again after the suspend() returns.
2

2
For your non-user verbs, we have
2

2
  :ok(who)
2
     returns E_PERM if the caller is not an editor verb and E_RANGE
2
     if 'who' does not point to a valid session.
2

2
which should take care of the more egregious security holes (but maybe not the less egregious ones).  For getting and loading text, we have
2

2
  :text(who)    
2
     the current text string list or 0 if nothing loaded yet.
2
  :load(who,text)
2
     loads the given list of strings as the text to be edited.
2
     this also resets the 'changed' flag and pushes the insertion 
2
     point to the end.
2

2
and various flags and properties (all of the set_* routines return E_PERM when not called from an editor verb, E_RANGE if who is out of bounds, E_INVARG if something is wrong with the 2nd arg, or the new value, which may not necessarily be the same as the 2nd arg (e.g., set_insertion(..,37) on a 5 line text buffer returns 6).
2

2
  :changed(who)
2
     has the text been altered since the last save/load?
2
     (the child editor gets to define what "save" means).
2
  :set_changed(who,value)
2
     Any child editor command that is considered to save the text should do a 
2
     :set_changed(who,0).  
2
     Note that if the changed flag is 0, the session will be flushed when 
2
     the player leaves the editor, so you may also want certain commands to
2
     do set_changed(who,1)...
2

2
  :origin(who)
2
     room where the player came from.  
2
  :set_origin(who,room)
2
     can be used to change the room the player will return to when finished
2
     editing.  Since origin gets set even in cases where the player teleports
2
     into the editor you probably won't usually need to do this.
2

2
  :insertion(who)
2
     current insertion point.
2
  :set_insertion(who,linenumber)
2
     linenumber needs to be a positive integer and will get 
2

2
  :readable(who)
2
     whether the current editing session has been made globally readable.
2
  :set_readable(who,boolean)
2
     change the readability of the current editing session.
2
     This is used by the publish/perish verbs.
2

2
We also provide
2

2
  :invoke(...)
2
      If the player has a previous unsaved (i.e., :changed()!=0)
2
      session, we return to it, moving the player to the editor.  
2
      If the player is already in the editor, this has no effect other
2
      than to print a few nasty messages.  In any case a :changed()
2
      session must be aborted or set_changed(,0) before anything else 
2
      can be started
2

2
      Otherwise, we pass the arguments (which are assumed to be the
2
      result of some munging of the command line) to :parse_invoke(),
2
      move the player to the editor and load whatever parse_invoke()
2
      specified.  The only interpretation the generic editor makes on
2
      the arguments is that if the boolean value of the first is true,
2
      this indicates that the player wanted to load something as
2
      opposed to resume a previous session.  Usually a command calling
2
      :invoke will have a true (i.e., nonzero number, nonempty list or
2
      string) first arg iff the command line is nonempty, in which case 
2
      'args' works fine for this purpose.
2

2
      If the command parses sucessfully (:parse_invoke() returns a list),
2
      we move the player to the editor if necessary and then call 
2
      :init_session() to set things up.
2

2
The child editor is assumed to provide
2

2
  :parse_invoke(...)
2
     given :invoke()'s arguments, determines what the player wants to edit.
2
     It either returns 0 and reports syntax errors to player,
2
     or it returns some list that :init_session() will understand.
2

2
  :init_session(who,@spec)
2
     where spec is something that was returned by :parse_invoke().
2
     Loads the text and sets the stateprops (below) to indicate that 
2
     we are working on whatever it is we're suppose to be working on.
2

2
  :working_on(who)   
2
     returns a string X as in "You are working on X."
2
     This is called by the 'w*hat' command, among other things.
2

2
Child editors may have their own properties giving state information for the various editing sessions.  The value of each such property will be a list giving a value for each player in the editor.  For each such property, you should, once the editor object has been created, initialize the property to {} and do one of
2

2
    @stateprop <propname>                 for <editor>
2
    @stateprop <propname>=<default-value> for <editor>
2
               (0 is the default <default-value>)
2

2
Henceforth, adding and deleting new editing sessions will amend the list held by the given property.  The value of the property for a given session can be obtained via this.<propname>[player in this.active] and can be changed with a corresponding listset() call.  The usual idiom for an editor command is
2

2
   if(!(who=this:loaded(player)))
2
     player:tell(nothing_loaded_msg());
2
   else
2
      ... various references to  this.<propname>[who] ...
2
   endif
2

2
To remove such a property from the list of such state properties:
2

2
    @rmstateprop <propname> from <editor>
2

2
Note that you can only do this with properties defined on the child editor itself.  
2

2
Sometimes you may wish to @stateprop a new property on an editor where active editing sessions exist.  @stateprop will fail if the property in question does not hold a list of the correct length (== length(editor.active); one value for each editing session).  You need to either give the @flush command to clear out all sessions and boot all players currently in the editor or somehow manually initialize the property to a list of appropriate values and pray that nobody enters/exits the editor between the property initialization and the @stateprop command --- this problem can be avoided by doing an eval() that does all of the initializations (beware of suspends()) and calls :set_stateprops directly.
2

2
Incidentally, the @flush command may be used at any time to clean out the editor or to remove all sessions older than a given date.
2

2
There are also numerous _msg properties that may be customized
2

2
    @depart          announced at the origin when :invoke() is called. 
2
    @return          announced at the origin the player is returned there.
2
    @nothing_loaded  printed when user attempts editing 
2
                     before anything has been loaded.
2
    @no_text         response to 'list' when :text()=={}
2
    @no_change       printed by 'what' when :changed()==0
2
    @change          printed by 'what' when :changed()==1
2
    @no_littering    printed upon leaving the editor with :changed()==1.
2
    @previous_session  printed by :invoke() when player tries to start a 
2
                     new session without aborting or saving the old one
2

2
The general procedure for creating a child editor:
2

2
. @create $generic_editor named <editor>
2

2
. define additional <editor> verbs/properties
2
    At the very least you need 'edit' and 'save' commands.
2
    Usually you can get away with just having 'edit' call :invoke();
2
    Presumably, you'll need at least a command to load text from somewhere
2
    as well as a command to save it back out.
2

2
. define a verb (somewhere) to invoke the editor 
2
    This could be just a one-liner that calls <editor>:invoke(args,verb).
2
    Either that or
2
      .  you have to set up an exit somewhere whose destination is <editor>
2
      .  you have to advertise the object number so that people can 
2
         teleport to it.
2
  
2
. @stateprop x for <editor>
2

2
. if you want the 'abort' command to boot the player from the editor do
2
    <editor>.exit_on_abort = 1;
2

2
. set <editor>.commands to be the list of additional commands defined
2
    by <editor>.  
2
    Each element of the list is itself a list of the form {name,args}.
2
  set <editor>.commands2 to be the list of commands that should appear
2
    in the `look' listing, and should be a list of strings appearing 
2
    as names in .commands on either <editor> or some editor ancestor.
2
  look at $verb_editor or $note_editor for an example.
2

2
. If you want to have help text for new verbs you define, create a child of 
2
    $generic_help and add properties to this object for each of the topics 
2
    that you want to provide help text.
2
    Finally, set <editor>.help = {this object} so that the help system
2
    knows to consult this object.
36
5
4
87
2
The Help System
2
---------------
2
When a player types help, the following list of objects is consulted for .help properties:  the player itself, all ancestors of player up to and including $player, and, if the current location is a room, the current location together with all ancestors of the current location back to and including $room.  Each help property should have as value either an object or a list of objects (otherwise we just ignore it).  These objects are then strung together as a list of `help databases' to be searched in order for the requested topic.
2

2
A help database (in the sense of anything that is usable by $player:help()) is any object having the following three verbs:
2

2
  :find_topics([string])
2
     where string is a supposed help topic, returns a list of strings,
2
     i.e., actual help topics that this db knows about, or some boolean 
2
     false value in the event that this db is clueless...
2
     If no arguments are given, this should return a list of all topics
2
     in the db
2

2
  :get_topic(string)
2
     given one of the strings returned by :find_topics this either
2
     returns a list of strings (text to be spewed to the player) or
2
     returns 1 to indicate that it has already taken care of printing
2
     information to the player.
2

2
  :dump_topic(string)
2
     like get_topic, but instead returns the raw text of a help topic
2
     as a (download/upload) script
2

2
In short if :find_topic reports that a particular db knows about a given topic
2
it returns the full topic name, so that :get_topic may be called on it later.
2
:dump_topic is used by maintainers (see $wiz:@gethelp) to edit help topics.
2

2
$generic_help and $help
2
-----------------------
2
The Generic Help Database, $generic_help, is the parent class of a particular kind of help database of which $help is an instance.  On help databases of this type, every help topic has a corresponding property, interpreted as follows:
2

2
  this.(topic) = string             
2
      one-line help text.
2

2
  this.(topic) = {"*<verb>*",@args}
2
      call this:<verb>(args,dblist) to get text where dblist is the list of 
2
      help objects that would have been consulted had the topic not been found 
2
      on this object.
2

2
  this.(topic) = other list of strings 
2
      multi-line help text
2

2
For the {"*<verb>*",...} form, the current verbs available are
2

2
  {"*forward*", topic, @rest}   
2
     - get help text for topic and then append the lines of `rest'.  
2
       rest may, in turn, begin with a "*<verb>*"...
2

2
  {"*pass*", topic, @rest}   
2
     - get help text for topic from the first help database after this one
2
       that actually has help text for topic, and then append lines of `rest'.
2
       As with "*forward*" rest may, in turn, begin with a "*<verb>*"...
2

2
  {"*subst*", @lines} 
2
     - All occurences of %[exp] in lines are replaced with the value of exp
2
         which is assumed to evaluate to a string.  
2
       All lines beginning with %;exp are replaced with the value of exp 
2
         which is assumed to evaluate to a list of strings.
2
       Evaluation is done using $no_one's permissions so exp in either case
2
       can only refer to public information.
2

2
  {"*index*", title}
2
     - returns a list of all topics in this database, arranged in columns.
2
       title is used as a heading for this index.
2

2
       In order for your help database to appear in the list presented
2
       by 'help index', your db object must be set to +r.
2

2
  {"*objectdoc*", object}
2
     - gets the documentation for the given object (i.e., object:help_msg())
2
       N.B. as with all other *verb* arguments, object must be a string.
2

2
  {"*verbdoc*", object, verbname}
2
     - gets the documentation for the named verb on the given object
2
       (i.e., any strings at the beginning of said verbcode)
2

2
Individual help dbs are free to define additional verbs that may be used in this context.  $help itself defines the following additional such verbs:
2

2
  {"*index_list*"}
2
     - returns a list of all index topics in all databases in the search list.
2
       An index topic is one whose actual text is {"*index*", something}.
2
       When creating a help db, you should be sure to make an index topic.
2

2
  {"*full_index*"}
2
     - prints indices for all help databases in the search list.
2

2
It should be noted (once again) that help databases need not be children of $generic_help, so long as they have :find_topics/:get_topic/:dump_topic working as specified above.
36
5
4
62
2
Generic Option Package
2
----------------------
2
It occasionally happens that one has a command or set of commands for which one wishes to provide several options/flags that a player can set to customize the command's behavior for him/herself.  Making each option a separate property is a bit expensive, especially when the option in question is merely a boolean flag that gets set to false in most cases.  This package provides an alternative, as well as providing a uniform set of commands for setting these flags/options and checking that the values given are of appropriate types.
2

2
Instead of needing several properties, only one is required to store a list containing values for all of the options.  An "option package" (pkg, below) is then an object of this class, which provides routines for manipulating such lists.
2

2
The set of option names is divided into a set of "real" options, those whose names will actually appear in a given list, and "extras" which are either synonyms for or represent combinations of real options.
2

2
 pkg:add_name(name)      adds name to .names  (remove it from .extras if there)
2
 pkg:add_name(name,1)    adds name to .extras (remove it from .names if there)
2
    => 1 - ok, 0 - already added, E_INVARG - illegal name, E_PERM
2

2
 pkg:remove_name(name)   remove name from either .names or .extras
2
    => 1 - ok, 0 - not present, E_PERM
2

2
For setting or retrieving values we have
2

2
 pkg:get(options,name) 
2
    => value (or 0 if name isn't a real option)
2
 pkg:set(options,name,value)
2
    => revised options (or string error message if something goes wrong)
2

2
By default, a given option can only be a boolean flag, having one of the values 0 (absent from the list), or 1 (present in the list).  :set translates 0/""/{} to 0 and any other non-object value to 1.
2

2
One may however designate a wider range of possible values for an option "foo" by either installing one of
2

2
  pkg.type_foo
2
    -- list of allowed types, 
2
       e.g., {NUM,STR}   => must be a number or a string
2
       e.g., {OBJ,{OBJ}} => must be an object or a list of objects
2
    for anything fancier use:
2

2
  pkg:check_foo(value)
2
    => string error message or {value munged as desired}
2

2
In general, the only restriction on option values is that 0 is the only false value; setting an option to "" or {} sets it to 0.  Every option defaults to 0, and no matter what you install as .type_foo or :check_foo(), 0 will always be a legal value for option "foo".
2

2
When presented with an option that is in .extras, :set will typecheck the value as described, however, then :actual(name, value) will be called to obtain a list of {name-of-real-option, value} pairs indicating which combination of real options should be set.
2

2
Other verbs
2
  pkg:parse(args,...)
2
    parses the command line arguments of a @whatever_option command
2
    => {optionname, value}  if the player wants to set an option
2
    => {optionname}         if the player wants to view an option
2
    => string error message  otherwise
2

2
  one may install pkg:parse_foo to parse arguments for option "foo" 
2
    !foo     => {"foo",0}  (:parse_foo not called)
2
    foo=     => {"foo",0}  (:parse_foo not called)
2
    -foo     => {"foo",0}  (:parse_foo not called)
2
    +foo     => pkg:parse_foo("foo",1)
2
    foo=word => pkg:parse_foo("foo","word")
2
    foo word1 word2    => pkg:parse_foo("foo",{"word1","word2"})
2
    foo is word1 word2 => pkg:parse_foo("foo",{"word1","word2"})
2

2
 pkg:show(options,name|list of names)
2
    => list of strings describing the current value of the named option(s).
2
       calls     pkg:show_foo(options,list of names) or
2
       refers to pkg.show_foo
2
       to describe option "foo"
2

2
(see sources for details...  at some point I'll finish writing this... --Rog)
36
5
4
24
2
Message Sequences
2
-----------------
2
A "message sequence" is a handle by which one may refer to a particular subset of a mail recipient's (player or $mail_recipient-descendant) saved messages.  Routines like rcpt:display_seq_headers or rcpt:display_seq_full need to be supplied with message-sequence arguments to deterimine which headers or full-messages to display.
2

2
Message sequences can in turn be obtained from routines like rcpt:parse_message_seq, which takes a command-line description of a message sequence on that particular recipient and returns the corresponding message sequence handle.
2

2
The actual form of a message sequence (though you shouldn't actually need to make use of this) is that of a set of integers in the format used by $seq_utils (see `help $seq_utils').  It should however be noted that these integers are *not* themselves message numbers, but rather indices into the list of saved messages.  For example, if a particular recipient holds 5 messages numbered 1,3,5,7,9.  Then the message sequence handle representing messages 3,5,7 collectively, would be {2,5} which is $seq_utils-ese for the range 2..4, namely the second, third and fourth messages saved on that recipient.
2

2
The following verbs are available for obtaining indices to use in message sequences
2

2
  :length_all_msgs()    => total number of messages, or equivalently,
2
                        => index of last message
2
  :length_num_le(n)     => number of messages numbered <= n, or equivalently,
2
                        => index of highest numbered message <= n
2
  :exists_num_eq(n)     => 0 unless there exists a message numbered n in which
2
                           case we return the index of that message.
2
  :length_date_le(date) => number of messages dated <= date, or equivalently,
2
                        => index of most recent message dated <= date
2

2
  :length_date_gt(date) => number of messages dated > date
2

2
Note that r:length_date_gt(date) == r:length_all_msgs()-r:length_date_le(date).
2
The only reason :length_date_gt is provided as a separate routine is in order 
2
to do quick checks for the existence of new mail (as @rn needs to do).
36
5
4
24
2
Read verbs
2
----------
2
The following verbs may be used to extract headers/messages from readable mail recipients/players;
2

2
:display_seq_headers (message sequence, current message number, last_read_date)
2
  Does a @mail listing of the given message sequence.  If current message
2
  number is given and the sequence includes it, we mark it with a `>'.
2
  Likewise if the sequence includes any new messages (i.e., dated after 
2
  last_read_date), these are also indicated as such.
2

2
display_seq_full (message sequence, preamble)
2
  Does a @read listing of the given message sequence.  Each message is preceded
2
  by preamble.
2
  => {new current message number, new last_read_date}
2

2
:messages_in_seq (index)
2
  => {n, msg}
2
:messages_in_seq (message sequence)
2
  => {{n_1,msg_1},{n_2,msg_2},...}
2
  where the n_i are message numbers and the msg_i are messages in transmission
2
  format (see `help mail-format')
2

2
:list_rmm ()
2
  Does an `@unrmm list' listing of messages in .messages_going
36
5
4
17
2
Write verbs
2
-----------
2
The following verbs can be used to manipulate writable mail recipients/players:
2

2
:rm_message_seq (message sequence)
2
  Does an @rmmail.  Messages in message sequence are removed from this 
2
  recipient's saved .messages and written to .messages_going.
2

2
:undo_rmm ()
2
  Does an @unrmm.  Messages in .messages_going are copied back to .messages.
2

2
:expunge_rmm ()
2
  Does an @unrmm expunge.  Blows away .messages_going.
2

2
:renumber ()
2
  Does a @renumber.
2

36
5
4
25
2
Search verbs
2
------------
2
The following verbs can be used on a readable mail-recipient/player to search for messages with fields matching a given pattern.
2

2
from_msg_seq (objectid or list [,mask])
2
  => message sequence: messages from (one of) the given objectid(s)
2

2
%from_msg_seq (string or list [,mask])
2
  => message sequence: messages with (one of) the given string(s)
2
     in the From: line
2

2
to_msg_seq (objectid or list [,mask])
2
  => message sequence: messages to (one of) the given objectid(s)
2

2
%to_msg_seq (string or list [,mask])
2
  => message sequence: messages with (one of) the given string(s)
2
     in the To: line
2

2
subject_msg_seq (string [,mask])
2
  => message sequence: messages with given string occurring in Subject:
2

2
body_msg_seq (string [,mask])
2
  => message sequence: messages with given string occurring in body of message
2

2
In all cases `mask' is a message sequence which one may supply to limit the range of the search.  One way of looking at it is that the message sequence to be returned is first intersected with mask.
36
5
4
43
2
The housekeeper is an object that can help keep other objects where they belong.  New MOOs may want to add their own user interface for the housekeeper; here is some information that may be helpful.
2

2
To indicate what objects should be cleaned:
2

2
  :add_cleanup(object[, requestor[, where]])
2
    Ask the housekeeper to clean 'object' for 'requestor' to 'where'.
2
    Requestor defaults to 'player'.
2
    Where defaults to object.location.
2

2
  :remove_cleanup(what[, requestor])
2
    Remove 'what' from the cleanup list at 'requestor's request.
2
    Will remove it only if 'requestor' made the original request and owns
2
    the object or the destination.
2

2
To actually get the housekeeper to clean stuff up:
2

2
  :cleanup([insist])
2
    Clean up player's objects.  Argument is 'up' or 'up!' for manually
2
    requested cleanups.  'up!' means to clean things even if it's against
2
    the housekeeper's better judgement.
2

2
  :replace(object[, insist])
2
    Clean up the indicated object.  'insist' is as in :cleanup.
2

2
  :continuous()
2
    Starts the housekeeper cleaning continuously, killing any previous
2
    continuous task.  This should be called only when starting up a new MOO,
2
    or if something has gone wrong, as normally it will just keep going
2
    without any help.
2

2
  :litterbug()
2
    Clean up all the places in housekeeper.public_places by getting rid of
2
    all contents not in their .residents lists.  This is called by
2
    :continuous, so it doesn't need to be called directly.
2

2
To find out what's being cleaned to where for whom:
2

2
  :cleanup_list([whom])
2
    Show 'player' the personal cleanup list for 'whom', or the housekeeper's
2
    complete list if no argument is given.
2

2
  :clean_status()
2
    Show 'player' a brief summary of eir personal cleanup list.
36
5
4
28
2
$recycler
2
=========
2

2
Rather than having the server built-in recycle() and create() functions handle the creation and destruction of objects, a recycling center has been created to simulate these actions by  changing objects that would have been recycled into children of $garbage (The Generic Garbage Object) and making them owned by Hacker, and then when they're needed again, to avoid a raw create() command, those objects are given to whoever's asking for them.
2

2
Most Useful Verbs
2
-----------------
2

2
$recycler:_recycle( object )
2
  This will effectively recycle an object. (As a point of fact, it changes ownership of the object to Hacker and makes the object a child of $garbage.)  It handles .ownership_quota and .owned_objects properly.  Generally, use this instead of a recycle() in your verbs.
2

2
$recycler:_create( parent object [ , new owner object ] )
2
  This effectively creates an object (with the specified parent, if possible, and with the specified owner, if possible; these are the same restrictions as on the server create() builtin).  This is what should generally be used instead of create() in your programming.
2

2
$recycler:valid ( object )
2
  This is a variant of the server built-in valid() except that it handles the $garbage objects as well.  It returns a 1 if the object specified -is- valid and is -not- a $garbage object.
2

2
Other Notes
2
-----------
2

2
request <object> from <recycler>
2
  This is not an internal verb (it's !x).  It is, however, a command-line verb that can be used to request a specific object from the recycler.  It's also useful for the creation of objects like a Magic Number Repository.  When the object is removed from the recycler, the .announce_removal_msg is announced to the room if it's set (it's piped through $string_utils for pronoun substitution).
2

2
show-history <recycler>
2
  This is a wizardly verb which allows wizards to check the `history list' of the recycler. The history maintains the latest ($recycler.nhist) entries.
2

2
$recycler.orphans
2
  This maintains a list of objects for which the recreation process got mangled. It ought to be checked every once in a while to see what's up.
2
1
4
10
2
$error
2
======
2

2
The Error Generator, $error, may be used to automatically generate errors. This is particularly useful if you are working in a !d verb but have occasion to -want- to crash with traceback. To raise a specific error, use $error:raise(error type) -- for example, $error:raise(E_PERM) will produce traceback resulting from a Permission Denied error.
2

2
Random notes about $error:
2

2
+ The complete list of errors is stored in $error.names.
2
+ The seemingly useless :accept() verb on $error is so that $error:E_RECMOVE and $error:E_NACC will be guaranteed success (success meaning, of course, a termination by traceback).
2
+ There is, unfortunately, no way to raise the error E_NONE.
2
1
4
72
2
Generic BigList Utilities
2
----------------------------
2
$biglist is a collection of routines for maintaining huge persistent (sorted) lists in a format that is less likely to spam the server (which runs into a certain amount of trouble dealing with long ordinary lists --- btw we use `biglist' to refer to the huge data structure we're about to describe and `list' to refer to ordinary MOO lists {...}).  The biglist in question lives on a particular object, to which we will refer in the discussion below as the `home' object, and its various elements appear as leaves of a tree whose nodes are kept in properties of the home object.  It should be noted that the home object does not need to be (and in fact should *not* be) a descendant of $biglist one; $biglist merely provides utilities for manipulating the properties on the home object that are used in a particular biglist manipulation.  
2

2
All of the utilities below refer to `caller' to locate the home object.  Thus verbs to manipulate a given biglist must be located on or inherited by its home object itself.  The home object needs to define the following verbs
2

2
  :_make(@args)     => new property on home object with value args
2
  :_kill(prop)      delete a given property that was created by :_make
2
  :_get(prop)       => home.prop
2
  :_put(prop,@args) set home.prop = args
2
  :_ord(element)    given something that is of the form of a biglist element
2
                    return the corresponding ordinal (for sorting purposes).
2
                    If you never intend to use :find_ord, then this can be a 
2
                    routine that always returns 0 or some other random value.
2

2
See $generic_biglist_home or $big_mail_recipient for examples.
2

2
Those of the following routines that take a biglist argument are expecting
2
either {} (empty biglist) or some biglist returned by one of the other routines
2

2
  :length(biglist)          => length(biglist) (i.e., number of elements)
2
  :find_nth(biglist,n)      => biglist[n]
2
  :find_ord(biglist,k,comp) => n where n is
2
     the largest such that home:(comp)(k,home:_ord(biglist[n])) is false, or
2
     the smallest such that home:(comp)(k,home:_ord(biglist[n+1])) is true.
2
     Always returns a value between 0 and length(biglist) inclusive.
2
     This assumes biglist to be sorted in order of increasing :_ord values 
2
     with respect to home:(comp)().
2
     Standard situation is :_ord returns a number and comp is a < verb.
2

2
  :start(biglist,s,e)  => {biglist[s..?],@handle} or {}
2
  :next(@handle)       => {biglist[?+1..??],@newhandle} or {}
2
     These two are used for iterating over a range of elements of a biglist
2
     The canonical incantation for doing
2
        for elt in (biglist[first..last])
2
          ...
2
        endfor
2
     is
2
        handle = :start(biglist,first,last);
2
        while(handle)
2
          for elt in (handle[1])
2
            ...
2
          endfor
2
          handle = :next(@listdelete(handle,1));
2
        endwhile
2

2
The following all destructively modify their biglist argument(s) L (and M).
2

2
  :set_nth(L,n,value)  =>  L[n] = value
2
     replaces the indicated element
2

2
  :insert_before(L,M,n) => {@L[1..n-1],@M,@L[n..length(L)]}
2
  :insert_after (L,M,n) => {@L[1..n],  @M,@L[n+1..length(L)]}
2
     takes two distinct biglists, inserts one into the other at the given point
2
     returns the resulting consolidated biglist
2

2
  :extract_range(L,m,n) => {{@L[1..m-1],@L[n+1..]}, L[m..n]} 
2
     breaks the given biglist into two distinct biglists.
2

2
  :delete_range(L,m,n[,leafkiller]) => {@L[1..m-1],@L[n+1..]}
2
  :keep_range  (L,m,n[,leafkiller]) => L[m..n]
2
     like extract_range only we destroy what we don't want.
2

2
  :insertlast(L,value)  => {@L,value}
2
     inserts a new element at the end of biglist.  
2
     If find_ord is to continue to work properly, it is assumed that the 
2
     home:_ord(elt) is greater (comp-wise) than all of the :_ord values
2
     of elements currently in the biglist.
2

2
  :kill(L[,leafkiller]) 
2
     destroys all nodes used by biglist.  
2
     Calls home:leafkiller on each element.
36
1
4
17
2
$guest_log
2

2
records guest connect/disconnect events.
2

2
.max_events  -- maximum number of connect/disconnect events kept
2
.connections -- actual list of events, the most recent ones first
2
    each element is of the form
2
      {object, is_connect, time, site}
2
    object is the particular guest that (dis)connected
2
    is_connect 1 or 0 according as this is a connect or not.
2

2
:find(who,when)
2
  => site name of WHO at the particular time
2
     (or 0 if WHO was not logged in then)
2

2
:last(n) 
2
  prints a listing of the last n events
36
5
4
2
2
*forward*
2
mail-resolve
36
5
4
32
2
*subst*
2
$news
2
-----
2
This object is a mail_recipient like any other (see `help $mail_recipient').  One may send messages to it and use the usual recipient manipulation commands (@mail, @read, @rmm,...).  
2

2
Selected messages on this recipient are ordered in reverse date order (i.e., most recent first) and concatenated to produce the "news" that is printed in response to the player `news' command.  Each news item is thus a distinct message.  The default $player:confunc checks to see if any new messages have been selected for inclusion in the "news" since the player last read the news.
2

2
The property $news.current_news holds the message sequence of messages currently considered as comprising "the news".  The following commands are used to change .current_news:
2

2
  @addnews <message-seq> to %[$news]
2
  @rmnews <message-seq> from %[$news]
2
  @setnews %[$news] to <message-seq>
2

2
@addnews includes the specified messages, @rmnews excludes the specified messages, and @setnews changes .current_news to be the given message sequence.  Note that these ONLY change whether a given message is marked as being "in the news" and do not actually add or remove messages from the mail recipient $news.
2

2
The procedure for adding a news article is
2

2
  Send a mail message to %[$mail_agent:name($news)]
2
  @addnews last to %[$news]
2
    This marks the message as belonging to the current newspaper.
2
    This also announces to any player who have not yet read this message 
2
    that there is a new version of the newspaper.
2

2
The preferred method for updating a news items is to send a new version of the item, @rmnews the old version and @addnews the new one.
2

2
The following ordinary mail commands behave differently
2
  @rmm   removes any reference to message from .current_news 
2
         in addition to removing the message itself from .messages
2
  @unrmm completely undoes the effect of the previous @rmm; 
2
         this includes restoring .current_news.
2

2
By default, the newspaper is moderated, however there is the possibility of unmoderating it (see `help MR-access'), letting arbitrary players send mail to it; administrators could then @addnews those items deemed worthy.
36
5
4
2
2
*forward*
2
object-matching
36
5
4
32
2
The mail messages stored in mail recipients may be removed automatically by a weekly expiration task. New core owners who wish to turn this feature on and cut down on the db space used by mail recipients (Remember, players are mail recipients too) should start this task:
2

2
    $wiz_utils:expire_mail_weekly
2

2
When this task runs, it searches through all mail recipients and checks their .expire_period property. This property contains a time, in seconds, that messages should expire after. If this property is set to 0, then no expiration will take place from that recipient. The task, then, will compile a list of messages that are older than the expire period (e.g., if the property is set to 30 days, messages older than 30 days from the current date will expire). The default expiration period for mail recipients is 30 days.
2

2
Normally, when the mail messages are expired from the recipient they are deleted. However, the owner of the recipient may elect to have the messages mailed to an email address prior to their erasure. There are two methods for doing this, one for players and one for children of $mail_recipient.
2

2
Players:
2

2
  Players may completely turn off mail expiration by setting the mail option `expire' off. If it is on, then $mail_agent.player_expire_time is the expire period used for mail on players. 
2
  If a player has a registered email address, he may simply turn the mail option `no_auto_forward' off in order to have the expired messages sent to his email address before they are deleted. (The reversed logic saves on db space). See `help mail-options' and `help @registerme'.
2

2
Mail Recipients:
2

2
  The command to set the expiration period of a mail recipient is:
2

2
    @set_expire <recipient> to <time>
2

2
The <time> specified can be in english format (30 days, 60 days, etc.). If left off (the owner types `@set_expire <recipient> to'), the command will print out the current expiration information for that recipient. A list owner may set the expiration period up to a maximum of 180 days.
2

2
  Similar to players, the owner of a mail recipient may have the mail sent to either his registered email address or to any other address he specifies before it expires. To prevent unsolicited email from going to a random address, confirmation must be made before the owner may set the address to something other than his registered address.
2

2
  The command is:
2

2
    @register <recipient> to <address>
2

2
If the owner leaves off the <address>, the current registered address (if any) and expiration period will be returned. Again, if the address specified is the player's registered address, nothing more need be done. If it is not, then an email message will be sent to that address containing a password. Presumably, the owner can retrieve that password and then log back into the MOO and type:
2

2
   @validate <recipient> with <password>
2

2
which will enable the mail forwarding before expiration.
36
5
4
2
2
*forward*
2
MR-expiration
36
5
4
41
2
Generic Large Capacity Mail Recipient
2
-------------------------------------
2
Since any modifications to large lists entail copying the entire list over, operations on ordinary mail recipients having large numbers of messages, that actually change the content of .messages will take inordinately long.  Thus we have this version which makes use of the $biglist package, scattering the messages onto numerous properties so that write operations involving only a few messages will not require recopying of the entire list.
2

2
In nearly all respects it behaves as the ordinary Mail Recipient, except that it is faster for certain kinds of operations.
2

2
Certain unimplemented verbs, like :date_sort(), and :messages() currently return E_VERBNF.
2

2
To convert an existing $mail_recipient-child (call it #MR) into a $big_mail_recipient-child the basic procedure is
2

2
    ;;something.foo= #MR:messages();
2
    @rmm 1-$ from #MR
2
    @unrmm expunge
2
    @chparent #MR to $big_mail_recipient
2
    ;#MR:receive_batch(@something.foo);
2

2
Reconstructing Damaged Big Mail Recipients
2
------------------------------------------
2
On rare occasions, the tree structure created by $biglist can be corrupted (this can happen on lists sufficiently large that a list-modification operation (e.g., @rmm, @renumber) runs out of ticks/seconds).  In the vast majority of such cases, your messages are all still there; it's simply that the tree we use for finding/searching them is messed up.
2

2
To recover messages from a damaged big mail recipient (#DBMR)
2
 --- read to the end before you start typing any commands ---
2

2
create a fresh $big_mail_recipient (#NEWBMR) and then do the following:
2

2
   ;#NEWBMR:restore_from(#DBMR)
2

2
When this finishes, #NEWBMR will contain all of the mail messages we were able to find.  (note that this will include messages that you had deleted from #DBMR but not expunged).  #NEWMBR should thenceforth be useable in place of #DBMR, however if #DBMR contains custom verbs and non-clear properties, these will also need to be copied over.
2

2
Alternatively, one may do
2

2
   @copyobject #DBMR to #TEMPBMR
2
   ;#DBMR:restore_from(#TEMPBMR)
2

2
to rebuild #DBMR in place.  This, however, will take about twice as long.
2

2
oooooooooooooooooooooooooooooooo
2
WARNING!!! WARNING!!! WARNING!!!
2
oooooooooooooooooooooooooooooooo
2

2
Calling #OBJ:restore_from(...) COMPLETELY AND IRREVOCABLY REMOVES ALL MESSAGES from the object that it is run on (#OBJ); you MUST be sure to EITHER have made a copy of #OBJ OR be doing the restore to a DIFFERENT object.
36
5
4
73
2

2
OBJECT:init_for_core([CORE_VARIANT_SPEC])
2

2
This verb is called in the final stage of core extraction (see $wiz:make-core-database), which occurs after all non-core objects have been recycled, the remaining ones have been renumbered and moved to #-1.  This verbcall then performs any final cleanups to establish the initial state of the object and is (pretty much) the last thing to happen to the object before the new core database is saved.
2

2
What exactly goes in an :init_for_core verb varies hugely.  Some considerations:
2

2
(1)  The :init_for_core verbs are invoked from the top down, i.e., a given object's :init_for_core call verb precedes that of any of its children.  Thus, when a given object's init_for_core() runs, you can safely assume that its entire ancestor chain has already been initialized in this way, and likewise that NONE of the descendants have been initialized yet.
2

2
(2)  For non-ancestral objects, all bets are off --- with a few exceptions, you should not assume that they will be in working order, i.e., only invoke verbs that you know aren't being changed, and don't mess with their properties.   Or if you must, make sure whatever you do works in BOTH the case where the other object's init_for_core has already run AND the case where it has not.
2

2
(3)  The object's own properties, where they contain references to other objects, will be GARBAGE; renumber() does not update object values within properties or lists.  That's your job (i.e., you qua author of :init_for_core).
2

2
(4)  The root object's :init_for_core will copy code from any verb whose name ends in "(core)" to the corresponding verbname obtained by dropping that suffix.  So, for example, if you find yourself writing 'set_verb_code(this, "verbname", {...})', you should instead create a (non-executable) "verbname(core)" verb, so as to have the verbcode in a place where you can edit it in a more readable form.  This means...
2

2
  (4a)  For non-root objects, it is very important that pass(@args) be called.
2
        And yes the @args need to be there, too, since while the 
2
        CORE_VARIANT_SPEC argument is currently unspecified and ignored
2
        by all existing init_for_core verbs, it is intended to mean
2
        mean something someday.
2

2
  (4b)  A given object's init_for_core will be applied to every descendant.
2
        Bracket the parts that only apply to the object itself with 
2

2
	   if ($code_utils:verb_location() == this)
2
	     ... 
2
	   endif
2

2
(5) Oddly enough, init_for_core verbs by default become part of the core database.  You can arrange for them to remove themselves, but in the cases where they're performing generic sorts of initializations that are likely to be applicable to other MOOs, it's best to leave them in place.  This is for the sake of other MOO admins who may, after some amount of their own development, want to (re)extract their own cores.  While they will most likely be modifying the various init_for_core verbs as needed, if they do NOT make such modifications then (ideally) a core extraction should produce the same core they started with.
2

2
Thus,
2

2
   (5a) init_for_core should be IDEMPOTENT; i.e., running it a second time on the
2
        same object should achieve the same result.  So, e.g., rather than
2

2
          player.current_message = {@player.current_message, {this, 0, 0}};
2

2
        which will create a duplicate entry the second time around, do
2

2
          player:set_current_message(this, 0, 0, 1);
2

2
   (5b) init_for_core should not depend on any non-core verbs/properties.  
2
        In particular, if your init_for_core deletes a LambdaMOO-specific 
2
        verb/property and you don't arrange to delete the init_for_core as well,
2
        then you should bracket that call (e.g., with `... ! E_PROPNF,E_VERBNF')
2
        so that it will work elsewhere even after said verb/property is long gone.
2

2
   (5c) if your init_for_core has a large amount of LambdaMOO-specific material, 
2
        consider splitting the verb into 
2

2
        (*) an :init_for_core that eliminates the LambdaMOO-specific material,
2
            and 
2

2
        (*) an :init_for_core(core) that accomplishes the generic initialization
2
            (and will be copied into place by $root_object:init_for_core so that
2
            ONLY the generic stuff escapes to the outside world.).  
2

2
        You can arrange for BOTH verbs to be called as follows:
2

2
	#foo:init_for_core
2
	if (caller_perms().wizard)
2
	  pass(@args);  // copies :init_for_core(core) to this
2

2
	  if ($code_utils:verb_location() == this)
2
	     // wipe LambdaMOO-specific properties/verbs from this object
2
	     ...
2
	     // call init_for_core(core) code
2
	     this:init_for_core()
2
	  endif
2
	endif
2

2
        though again, this depends on the various parent verbs being idempotent
2
        since in this case they will be invoked twice.
36
5
4
2
2
*forward*
2
$core_objects
36
5
4
2
2
*forward*
2
$core_objects
36
5
4
25
2

2
    $core_objects           ([CORE_VARIANT_SPEC])         => object list
2
    OBJECT:proxy_for_core   ([CORE_VARIANT_SPEC, IN_MCD]) => object
2
    OBJECT:include_for_core ([CORE_VARIANT_SPEC])         => property list
2

2
$core_objects() returns a list of those objects currently considered to be part of the core database.  
2
See help 'make-core-database' for a description of the overall core database extraction process.
2

2
The list of core objects is determined by a traversal of properties starting with #0.sysobj (normally == #0).
2

2
If a given property being traversed is not object-valued or the object id is invalid we are done with that property.
2

2
Otherwise the property's value is a valid object and we call its 'proxy_for_core' verb, if one exists.  Any such verb is expected to return an object id which will then be used to update this property and any others encountered in the traversal that likewise were pointing to the same object.  If the verb does not exist we use the original property value (i.e., exactly as if the verbcode had been "return this;").
2

2
If the object thus obtained is valid, we add it to the list of core objects.
2

2
For each object added, we call its 'include_for_core' verb if one exists.  Any such verb is expected to return a list of properties on that object, which are then recursively traversed as above.  If the verb does not exist, no additional properties are traversed (i.e., exactly as if the verb had returned an empty list).
2

2
The traversal ends when there are no further properties to visit.
2

2
The CORE_VARIANT_SPEC argument is reserved for future use.  For now, the value provided to $core_objects() is passed straight through to the various hook verbs (proxy/include) and otherwise ignored.
2

2
Note that the verb '$core_objects()' can be called at any time to see the full list of objects to be included in the core as per the above algorithm.
2

2
Note that proxy_for_core is only called once for any given object during the traversal.  The IN_MCD parameter will be true for calls coming from within an actual run of make-core-database and false in all other invocations of $core_objects().  Thus, provided IN_MCD is true, it is safe for proxy_for_core to create an object to return.
36
5
4
52
2
Syntax:  make-core-database
2

2
!!! NOTE:
2
!!! 
2
!!! This is, by design, an extraordinarily destructive command, 
2
!!! one NOT INTENDED to be run in the live instance of your MOO.
2
!!! 
2
!!! While there are various safeguards to keep it from being run in
2
!!! situations where it looks like this might be the live instance of
2
!!! the MOO (e.g., >1 player connected), there are limits on how
2
!!! idiot-proof we can be.
2
!!!
2
!!! You have been warned.
2

2
The correct use of this command is in a separate process.  
2
That is, once you have identified a database/checkpoint file from which you wish to extract a core, you
2

2
(*) Run a LOCAL moo process reading from that database file,
2
    
2
(*) Connect as $owner (usually $owner == #2).
2

2
(*) Invoke ($wiz:)make-core-database
2

2
Here "LOCAL" means you have open_network_connection() disabled (so that, e.g., spurious registration email doesn't go out) and you either run the moo on a port that is not accessible from the outside world or use one of the single-user/local configurations of the server (e.g., NETWORK_PROTOCOL = NP_SINGLE or -a 127.0.0.1 on the command line) so that no one else can connect while you're destroying the world (and perhaps mess with what eventually gets saved).
2

2
Once you type 'make-core-database', the actual extraction process then goes as follows:
2

2
(1) A particular set of objects, the "core objects" as determined by,
2
    oddly enough, $core_objects(), is identified.  
2
    
2
    See 'help $core_objects' for details on the algorithm used.
2
    
2
(2) Any core object and any property/verb thereon that has a non-core owner
2
    is chowned either to the (assumed wizardly) player or $hacker 
2
    according as the item in question is wizard-owned.
2

2
(3) All non-core objects are mercilessly recycled.
2

2
(4) Core objects are renumbered and max_object is reset,
2
    so as to produce a contiguous array [#0..max_object()] of objects.
2

2
(5) All objects are moved to #-1.
2

2
(6) OBJECT:init_for_core is called on all objects having such verbs.
2
    The sequence of calls is unspecified except in that an object 
2
    is initialized prior to any of its children.
2
    
2
    See 'help init_for_core' for more on what these verbs should look like.
2

2
(7) The byte-quota statistics are redone
2

2
(8) The moo is shut down and the database is saved.
36
5
5
36
5
4
1
2
core-index
36
1
5
36
4
4
1
2
Core Utility Help
36
5
2
Help database for LambdaCore utility objects and generics.
36
5
4
2
0
105976
0
1084848672
36
1
#20
string utilities

24
2
-1
-1
-1
78
-1
55
73
space
36
173
-1
left
36
173
-1
right
36
173
-1
centre center
36
173
-1
columnize columnise
36
173
-1
from_list
36
173
-1
english_list
36
173
-1
names_of
36
173
-1
from_seconds
36
173
-1
trim
36
173
-1
triml
36
173
-1
trimr
36
173
-1
strip_chars
36
173
-1
strip_all_but
36
173
-1
uppercase lowercase
36
173
-1
capitalize capitalise
36
173
-1
literal_object
36
173
-1
match
36
173
-1
match_str*ing
36
173
-1
match_object
36
173
-1
match_player
36
173
-1
match_player_or_object
36
173
-1
find_prefix
36
173
-1
index_d*elimited
36
173
-1
is_integer is_numeric
36
173
-1
ordinal
36
173
-1
group_number
36
173
-1
english_number
36
173
-1
english_ordinal
36
173
-1
english_ones
36
173
-1
english_tens
36
173
-1
subst*itute
36
173
-1
substitute_d*elimited
2
13
-1
_cap_property
2
173
-1
pronoun_sub
2
173
-1
pronoun_sub_secure
36
173
-1
pronoun_quote
36
173
-1
alt_pronoun_sub
2
13
-1
explode
36
173
-1
words
36
173
-1
word_start
36
173
-1
to_value
36
173
-1
prefix_to_value
36
173
-1
_tolist
36
173
-1
_unquote
36
173
-1
_toscalar
36
173
-1
parse_command
2
173
-1
from_value
2
173
-1
print print_suspended
36
173
-1
reverse
36
173
-1
char_list
36
173
-1
regexp_quote
36
173
-1
connection_hostname_bsd
36
173
-1
connection_hostname
36
173
-1
from_value_suspended
2
173
-1
end_expression
36
173
-1
first_word
36
173
-1
common
36
173
-1
title_list*c list_title*c
36
173
-1
name_and_number nn name_and_number_list nn_list
36
173
-1
columnize_suspended columnise_suspended
36
173
-1
a_or_an
36
173
-1
index_all
36
173
-1
match_stringlist match_string_list
36
165
-1
from_ASCII
36
173
-1
to_ASCII
36
173
-1
abbreviated_value
36
173
-1
_abbreviated_value
36
173
-1
match_suspended
36
173
-1
incr_alpha
36
173
-1
is_float
36
173
-1
inside_quotes
36
165
-1
strip_all_but_seq
36
173
-1
6
digits
ascii
alphabet
use_article_a
use_article_an
tab
11
2
0123456789
2
5
2
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
2
5
2
abcdefghijklmnopqrstuvwxyz
2
5
4
5
2
unit
2
unix
2
one
2
once
2
utility
36
1
4
0
36
1
2
	
2
5
4
97
2
For a complete description of a given verb, do `help $string_utils:verbname'
2

2
    Conversion routines:
2

2
:from_list    (list [,sep])                          => "foo1foo2foo3"
2
:english_list (str-list[,none-str[,and-str[, sep]]]) => "foo1, foo2, and foo3"
2
:title_list*c (obj-list[,none-str[,and-str[, sep]]]) => "foo1, foo2, and foo3"
2
                                                  or => "Foo1, foo2, and foo3"
2
:from_value   (value [,quoteflag [,maxlistdepth]])   => "{foo1, foo2, foo3}"
2
:print        (value)                                => value in string
2
:abbreviated_value (value, options)                  => short value in string
2

2
:to_value       (string)     => {success?, value or error message}
2
:prefix_to_value(string)     => {rest of string, value} or {0, error message}
2

2
:english_number(42)          => "forty-two"
2
:english_ordinal(42)         => "forty-second"
2
:ordinal(42)                 => "42nd"
2
:group_number(42135 [,sep])  => "42,135"
2
:from_ASCII(65)              => "A"
2
:to_ASCII("A")               => 65
2
:from_seconds(number)        => string of rough time passed in large increments
2

2
:name_and_number(obj [,sep]) => "ObjectName (#obj)"
2
:name_and_number_list({obj1,obj2} [,sep])
2
                             => "ObjectName1 (#obj1) and ObjectName2 (#obj2)"
2
:nn is an alias for :name_and_number.
2
:nn_list is an alias for :name_and_number_list.
2

2
    Type checking:
2

2
:is_integer   (string) => return true if string is composed entirely of digits
2
:is_float     (string) => return true if string holds just a floating point
2

2
    Parsing:
2

2
:explode (string,char) -- string => list of words delimited by char
2
:words   (string)      -- string => list of words (as with command line parser)
2
:word_start (string)   -- string => list of start-end pairs.
2
:first_word (string)   -- string => list {first word, rest of string} or {}
2
:char_list  (string)   -- string => list of characters in string
2

2
:parse_command (cmd_line [,player] => mimics action of builtin parser
2

2
    Matching:
2

2
:find_prefix  (prefix, string-list)=>list index of element starting with prefix
2
:index_delimited(string,target[,case]) =>index of delimited string occurrence
2
:index_all    (string, target string)          => list of all matched positions
2
:common       (first string, second string)  => length of longest common prefix
2
:match        (string, [obj-list, prop-name]+) => matching object
2
:match_player (string-list[,me-object])        => list of matching players
2
:match_object (string, location)               => default object match...
2
:match_player_or_object (string, location) => object then player matching
2
:literal_object (string)                       => match against #xxx, $foo
2
:match_stringlist (string, targets)            => match against static strings
2
:match_string (string, wildcard target,options)=> match against a wildcard
2

2
    Pretty printing:
2

2
:space         (n/string[,filler])     => n spaces
2
:left          (string,width[,filler]) => left justified string in field 
2
:right         (string,width[,filler]) => right justified string in field
2
:center/re     (string,width[,lfiller[,rfiller]]) => centered string in field
2
:columnize/se  (list,n[,width])        => list of strings in n columns
2

2
    Substitutions
2

2
:substitute (string,subst_list [,case])   -- general substitutions.
2
:substitute_delimited (string,subst_list [,case])
2
                                          -- like subst, but uses index_delim
2
:pronoun_sub (string/list[,who[,thing[,location]]])
2
                                          -- pronoun substitutions.
2
:pronoun_sub_secure (string[,who[,thing[,location]]],default)
2
                                          -- substitute and check for names.
2
:pronoun_quote (string/list/subst_list)   -- quoting for pronoun substitutions.
2

2
    Miscellaneous string munging:
2

2
:trim         (string)       => string with outside whitespace removed.
2
:triml        (string)       => string with leading whitespace removed.
2
:trimr        (string)       => string with trailing whitespace removed.
2
:strip_chars  (string,chars) => string with all chars in `chars' removed.
2
:strip_all_but(string,chars) => string with all chars not in `chars' removed.
2
:capitalize/se(string)       => string with first letter capitalized.
2
:uppercase/lowercase(string) => string with all letters upper or lowercase.
2
:names_of     (list of OBJ)  => string with names and object numbers of items.
2
:a_or_an      (word)         => "a" or "an" as appropriate for that word.
2
:reverse      (string)       => "gnirts"
2
:incr_alpha   (string)       => "increments" the string alphabetically
2

2
    A useful property:
2

2
.alphabet                    => "abcdefghijklmnopqrstuvwxyz"
2

2
Suspended versions (with _suspended at end of name) for
2
     :print     :from_value     :columnize/se      :match
2
5
5
2
4
4
2
2
string
2
utils
2
5
4
1
2
This is the string utilities utility package.  See `help $string_utils' for more details.
2
5
4
2
0
76712
0
1084848672
36
1
#21
building utilities

24
2
-1
-1
-1
78
-1
33
10
make_exit
2
173
-1
set_names
2
173
-1
recreate
2
173
-1
parse_names
2
173
-1
audit_object_category
2
173
-1
object_audit_string
2
173
-1
do_audit do_prospectus
2
173
-1
do_audit_item
2
173
-1
size_string
2
173
-1
init_for_core
2
173
-1
2
classes
class_string
7
4
12
1
6
1
3
1
7
1
9
1
8
1
5
1
74
1
45
1
30
1
37
1
78
1
68
2
5
4
12
2
p
2
R
2
E
2
N
2
C
2
T
2
F
2
M
2
H
2
D
2
U
2
O
2
5
4
13
2
Verbs useful for building.  For a complete description of a given verb, do `help $building_utils:verbname'.
2

2
make_exit(spec,source,dest[,don't-really-create]) => a new exit
2
          spec is an exit-spec as described in `help @dig'
2

2
set_names(object, spec) - sets name and aliases for an object
2
parse_names(spec) => list of {name, aliases}
2
          in both of these, spec is of the form
2
            <name>[[,:]<alias>,<alias>,...]
2
          (as described in `help @rename')
2

2
recreate(object, newparent) - effectively recycle and recreate object
2
          as a child of newparent
2
5
5
2
4
4
2
2
building
2
utils
2
5
4
1
2
This is the building utilities utility package.  See `help $building_utils' for more details.
2
5
4
2
0
12705
0
1084848672
36
1
#22
Programmer Help

16
36
-1
-1
-1
30
-1
19
2
errors
36
173
-1
prepositions
36
173
-1
74
@check-property
@check-chparent
@egrep
regular-expressions
@show
@grep
prog-index
help
prepositions
;
utilities
truth
tasks
statements
programming
precedence
language
functions
expressions
eval
errors
@verb
@setenv
@rmverb
@rmproperty
@prospectus
@property
@program
@list
@kill
@kids
@forked
@display
@dbsize
@copy
@chparent
@chmod
@args
.program
@clearproperty
@disown
@disinherit
@displayoptions
@display-options
@add-feature
@remove-feature
features
examine
mail
#
@programmer-options
@programmeroptions
@progoptions
@prog-options
options
utils
@killquiet
scattering
.flush
@rmverb#
@list#
@program#
@args#
@chmod#
@rename#
@addalias#
@add-alias#
@rmalias#
@rm-alias#
checkpoint-programming
@grepall
@egrepall
@properties
@props
80
4
2
2
*forward*
2
@check-chparent
36
5
4
10
2
Syntax:  @check-property <object>.<propname>
2
         @check-chparent <object> to <newparent>
2
         
2
You cannot add a new property to an object if an ancestor or a descendant already defines a property with the same name.  @check-property will give you the list of all descendants of <object> that that define .<propname>.  
2

2
Likewise you cannot chparent an object to a new parent if the new parent has a property that is also defined on the object or some descendant.  Use @check-chparent to find out all instances of conflicting properties that would interfere with @chparent in this manner.
2

2
Note that @check-property requires either that you own the object or that it be writeable, the same conditions that need to hold if you are to create new properties on the object.  Similarly, @check-chparent requires that you own the object and that the new parent is either fertile or likewise owned by you.
2

2
For objects with large numbers of descendants, these commands can be time-consuming.
36
5
4
2
2
*forward*
2
@grep
36
5
4
162
2
Regular expression matching allows you to test whether a string fits into a specific syntactic shape.  You can also search a string for a substring that fits a pattern.  See also the built-in function match()/rmatch().
2

2
A regular expression describes a set of strings.  The simplest case is one that describes a particular string; for example, the string `foo' when regarded as a regular expression matches `foo' and nothing else.  Nontrivial regular expressions use certain special constructs so that they can match more than one string.  For example, the regular expression `foo%|bar' matches either the string `foo' or the string `bar'; the regular expression `c[ad]*r' matches any of the strings `cr', `car', `cdr', `caar', `cadddar' and all other such strings with any number of `a''s and `d''s.
2

2
Regular expressions have a syntax in which a few characters are special constructs and the rest are "ordinary".  An ordinary character is a simple regular expression that matches that character and nothing else.  The special characters are `$', `^', `.', `*', `+', `?', `[', `]' and `%'.  Any other character appearing in a regular expression is ordinary, unless a `%' precedes it.
2

2
For example, `f' is not a special character, so it is ordinary, and therefore `f' is a regular expression that matches the string `f' and no other string.  (It does *not*, for example, match the string `ff'.)  Likewise, `o' is a regular expression that matches only `o'.
2

2
Any two regular expressions A and B can be concatenated.  The result is a regular expression which matches a string if A matches some amount of the beginning of that string and B matches the rest of the string.
2

2
As a simple example, we can concatenate the regular expressions `f' and `o' to get the regular expression `fo', which matches only the string `fo'.  Still trivial.
2

2
The following are the characters and character sequences that have special meaning within regular expressions.  Any character not mentioned here is not special; it stands for exactly itself for the purposes of searching and matching.
2

2
`.'  is a special character that matches any single character.  Using
2
     concatenation, we can make regular expressions like `a.b', which matches
2
     any three-character string that begins with `a' and ends with `b'.
2

2
`*'  is not a construct by itself; it is a suffix that means that the preceding
2
     regular expression is to be repeated as many times as possible.  In `fo*',
2
     the `*' applies to the `o', so `fo*' matches `f' followed by any number of
2
     `o''s.
2

2
     The case of zero `o''s is allowed: `fo*' does match `f'.
2

2
     `*' always applies to the *smallest* possible preceding expression.  Thus,
2
     `fo*' has a repeating `o', not a repeating `fo'.
2

2
     The matcher processes a `*' construct by matching, immediately, as many
2
     repetitions as can be found.  Then it continues with the rest of the
2
     pattern.  If that fails, it backtracks, discarding some of the matches of
2
     the `*''d construct in case that makes it possible to match the rest of
2
     the pattern.  For example, matching `c[ad]*ar' against the string
2
     `caddaar', the `[ad]*' first matches `addaa', but this does not allow the
2
     next `a' in the pattern to match.  So the last of the matches of `[ad]' is
2
     undone and the following `a' is tried again.  Now it succeeds.
2

2
`+'  is like `*' except that at least one match for the preceding pattern is
2
     required for `+'.  Thus, `c[ad]+r' does not match `cr' but does match
2
     anything else that `c[ad]*r' would match.
2

2
`?'  is like `*' except that it allows either zero or one match for the
2
     preceding pattern.  Thus, `c[ad]?r' matches `cr' or `car' or `cdr', and
2
     nothing else.
2

2
`[ ... ]'
2
     `[' begins a "character set", which is terminated by a `]'.  In the
2
     simplest case, the characters between the two brackets form the set.
2
     Thus, `[ad]' matches either `a' or `d', and `[ad]*' matches any string of
2
     `a''s and `d''s (including the empty string), from which it follows that
2
     `c[ad]*r' matches `car', etc.
2

2
     Character ranges can also be included in a character set, by writing two
2
     characters with a `-' between them.  Thus, `[a-z]' matches any lower-case
2
     letter.  Ranges may be intermixed freely with individual characters, as in
2
     `[a-z$%.]', which matches any lower case letter or `$', `%' or period.
2

2
     Note that the usual special characters are not special any more inside a
2
     character set.  A completely different set of special characters exists
2
     inside character sets: `]', `-' and `^'.
2

2
     To include a `]' in a character set, you must make it the first character.
2
     For example, `[]a]' matches `]' or `a'.  To include a `-', you must use it
2
     in a context where it cannot possibly indicate a range: that is, as the
2
     first character, or immediately after a range.
2

2
`[^ ... ]'
2
     `[^' begins a "complement character set", which matches any character
2
     except the ones specified.  Thus, `[^a-z0-9A-Z]' matches all characters
2
     *except* letters and digits.
2

2
     `^' is not special in a character set unless it is the first character.
2
     The character following the `^' is treated as if it were first (it may be
2
     a `-' or a `]').
2

2
`^'  is a special character that matches the empty string -- but only if at the
2
     beginning of the string being matched.  Otherwise it fails to match
2
     anything.  Thus, `^foo' matches a `foo' which occurs at the beginning of
2
     the string.
2

2
`$'  is similar to `^' but matches only at the *end* of the string.  Thus,
2
     `xx*$' matches a string of one or more `x''s at the end of the string.
2

2
`%'  has two functions: it quotes the above special characters (including `%'),
2
     and it introduces additional special constructs.
2

2
     Because `%' quotes special characters, `%$' is a regular expression that
2
     matches only `$', and `%[' is a regular expression that matches only `[',
2
     and so on.
2

2
     For the most part, `%' followed by any character matches only that
2
     character.  However, there are several exceptions: characters that, when
2
     preceded by `%', are special constructs.  Such characters are always
2
     ordinary when encountered on their own.
2

2
     No new special characters will ever be defined.  All extensions to the
2
     regular expression syntax are made by defining new two-character
2
     constructs that begin with `%'.
2

2
`%|' specifies an alternative.  Two regular expressions A and B with `%|' in
2
     between form an expression that matches anything that either A or B will
2
     match.
2

2
     Thus, `foo%|bar' matches either `foo' or `bar' but no other string.
2

2
     `%|' applies to the largest possible surrounding expressions.  Only a
2
     surrounding `%( ... %)' grouping can limit the grouping power of `%|'.
2

2
     Full backtracking capability exists for when multiple `%|''s are used.
2

2
`%( ... %)'
2
     is a grouping construct that serves three purposes:
2

2
       1. To enclose a set of `%|' alternatives for other operations.  Thus,
2
          `%(foo%|bar%)x' matches either `foox' or `barx'.
2

2
       2. To enclose a complicated expression for a following `*', `+', or `?'
2
          to operate on.  Thus, `ba%(na%)*' matches `bananana', etc., with any
2
          number of `na''s, including none.
2

2
       3. To mark a matched substring for future reference.
2

2
     This last application is not a consequence of the idea of a parenthetical
2
     grouping; it is a separate feature that happens to be assigned as a second
2
     meaning to the same `%( ... %)' construct because there is no conflict in
2
     practice between the two meanings.  Here is an explanation of this
2
     feature:
2

2
`%DIGIT'
2
     After the end of a `%( ... %)' construct, the matcher remembers the
2
     beginning and end of the text matched by that construct.  Then, later on
2
     in the regular expression, you can use `%' followed by DIGIT to mean
2
     "match the same text matched by the DIGIT'th `%( ... %)' construct in the
2
     pattern."  The `%( ... %)' constructs are numbered in the order that their
2
     `%(''s appear in the pattern.
2

2
     The strings matching the first nine `%( ... %)' constructs appearing in a
2
     regular expression are assigned numbers 1 through 9 in order of their
2
     beginnings.  `%1' through `%9' may be used to refer to the text matched by
2
     the corresponding `%( ... %)' construct.
2

2
     For example, `%(.*%)%1' matches any string that is composed of two
2
     identical halves.  The `%(.*%)' matches the first half, which may be
2
     anything, but the `%1' that follows must match the same exact text.
2

2
`%b' matches the empty string, but only if it is at the beginning or end of a
2
     word.  Thus, `%bfoo%b' matches any occurrence of `foo' as a separate word.
2
     `%bball%(s%|%)%b' matches `ball' or `balls' as a separate word.
2

2
     For the purposes of this construct and the five that follow, a word is
2
     defined to be a sequence of letters and/or digits.
2

2
`%B' matches the empty string, provided it is *not* at the beginning or end of
2
     a word.
2

2
`%<' matches the empty string, but only if it is at the beginning of a word.
2

2
`%>' matches the empty string, but only if it is at the end of a word.
2

2
`%w' matches any word-constituent character (i.e., any letter or digit).
2

2
`%W' matches any character that is not a word constituent.
36
5
4
7
2
Syntax:  @show <object>
2
         @show <object>.<prop-name>
2
         @show <object>:<verb-name>
2

2
Displays quite detailed information about an object, property or verb, including its name, owner, permission bits, etc.  The information displayed for an object can be quite long.
2

2
See also @display, which displays different information and is controlled differently.
36
5
4
11
2
Syntax:  @grep     <string> in <object>|{<objectlist>}
2
         @egrep    <regexp> in <object>|{<objectlist>}
2
         @grepall  <string> in <object>|{<objectlist>}
2
         @egrepall <regexp> in <object>|{<objectlist>}
2

2
@grep (@grepall) searches the given object(s) for verbs whose verbcode contains the given string as a substring of one of its lines.  
2
@egrep (@egrepall) searches the given object(s) for verbs whose verbcode contains a substring matching the given regular expression (see `help regular-expressions').
2

2
@grep and @egrep print just the first matching line in each verb found.
2
@grepall and @egrepall printed every matching line.
2

36
5
4
2
2
*index*
2
Programmer Help Topics
36
5
4
15
2
*pass*
2
help
2

2
For programmers, the help system provides the following additional forms:
2

2
  help object:verbname   -- prints any documentation strings that are present
2
                            at the beginning of the program for that verb.
2
  help $<whatever>_utils -- prints general information about one of the 
2
                            $..._utils objects (e.g., $string_utils, 
2
                            $list_utils, etc...), which are all libraries 
2
                            of generally used verbs.
2
  help builtin()         -- prints documentation from the programmers manual
2
                            about the named primitive, for example length()
2

2
For information about how the help system itself works and about how to associate local help databases with specific rooms or player classes, see `help $help'.
36
5
4
3
2
*prepositions*
2
The complete list of prepositions recognized by the command-line parser:
2

36
5
4
2
2
*forward*
2
eval
36
1
4
17
2
The core database has a number of objects serving as libraries of useful verbs.
2
More detailed information can be obtained for (some of) these, via `help $whatever_utils'
2

2
$building_utils -- 
2
$code_utils     -- parsing and manipulating verb code
2
$command_utils  -- reporting matching errors to the player
2
$gender_utils   -- managing gendered objects
2
$list_utils     -- list manipulation
2
$set_utils      -- set manipulation
2
$lock_utils     -- key expression manipulation
2
$match_utils    -- 
2
$object_utils   -- object information 
2
                  (inheritance/location hierarchy, verb/property lists)
2
$perm_utils     -- permissions
2
$string_utils   -- string manipulation
2
$time_utils     -- time (numeric and verbal) manipulation
2
$trig_utils     -- trigonometric and other numerical utilities
36
5
4
5
2
Several kinds of statements, expressions, and functions in the MOO programming language use a notion that some MOO values are 'true' and others 'false'.
2

2
The only values that are considered true are non-zero numbers, non-empty strings, and non-empty lists.
2

2
All other values (i.e., 0, "", {}, objects, and errors) are considered false.
36
1
4
18
2
*subst*
2
A task is an execution of a MOO program.  There are five ways for tasks to be created in LambdaMOO:
2
   + Every time a player types a command, a task is created to execute that command; we call these 'command tasks'.
2
   + Whenever a player connects or disconnects from the MOO, the server starts a task to do whatever processing is necessary, such as printing out 'Munchkin has connected' to all of the players in the same room; these are called 'server tasks'.
2
   + The FORK statement in the programming language creates a task whose execution is delayed for at least some given number of seconds; these are 'forked tasks'.
2
   + The suspend() function suspends the execution of the current task.  A snapshot is taken of whole state of the execution, and the execution will be resumed later.  These are called `suspended tasks'.
2
   + The read() function also suspends the execution of the current task, in this case waiting for the player to type a line of input.  When the line is received, the task resumes with the read() function returning the input line as result.  These are called `reading tasks'.
2

2
The last three kinds of tasks above are collectively known as `queued tasks' or `waiting tasks', since they may not run immediately.
2

2
To prevent a maliciously- or incorrectly-written MOO program from running forever and monopolizing the server, limits are placed on the running time of every task. One limit is on the length of time that tasks are allowed to run: queued tasks are given %[tostr(typeof(bgs = $server_options.bg_seconds) == ERR ? 3 | bgs)], and all other tasks, %[tostr(typeof(fgs = $server_options.fg_seconds) == ERR ? 5 | fgs)] seconds to run, after which they will - if they don't suspend() or end first - raise a 'Task ran out of seconds' traceback and die. But there is a second limit which is on the number of operations a task may execute.
2

2
The server counts down 'ticks' as any task executes.  Roughly speaking, it counts one tick for every expression evaluation (other than variables and literals), one for every `if', `fork' or `return' statement, and one for every iteration of a loop.  If the count gets all the way down to zero, a 'Task ran out of ticks' traceback is raised and the task is immediately and unceremoniously aborted.  Queued tasks begin with %[$string_utils:group_number(typeof(bgt = $server_options.bg_ticks) == ERR ? 10000 | bgt)], and all other tasks with %[$string_utils:group_number(typeof(fgt = $server_options.fg_ticks) == ERR ? 30000 | fgt)] ticks.
2

2
Because queued tasks may exist for long periods of time before they begin execution, there are commands to list the ones that you own and to kill them before they execute.  These commands are covered in the following help topics:
2

2
@forked -- listing the forked tasks that you own
2
@kill -- killing a particular forked task
36
1
4
62
2
The following kinds of statements exist in the MOO programming language:
2

2
        ;
2
The null statement does nothing.
2

2
        expression ;
2
The expression statement evaluates the expression and then discards the value.
2

2
        IF ( expression ) statements ENDIF
2
        IF ( expression ) statements ELSE statements ENDIF
2
        IF ( expression )
2
          statements
2
        ELSEIF ( expression )
2
          statements
2
        ...
2
        ELSE
2
          statements
2
        ENDIF
2
The conditional statement evaluates each expression in turn and executes the statements associated with the first one to return a true value; the ELSE statements are executed if none of the expressions returns a true value.  There can be any number of ELSEIF clauses and the ELSE part is optional.  See 'help truth' for the definition of 'true value'.
2

2
        FOR name IN ( expression ) statements ENDFOR
2
The list iteration statement first evaluates the expression, which must return a list.  It then executes the statements once for each element of that list, each time with the named variable having the value of the corresponding list element.
2

2
        FOR name IN [ expression .. expression ] statements ENDFOR
2
The numeric iteration statement first evaluates the two expressions, both of which must return numbers; call those numbers N1 and N2, respectively.  The statements are then executed once for each integer I such that N1 <= I <= N2, in increasing order; each time, the named variable has the corresponding value of I.
2

2
        WHILE ( expression ) statements ENDWHILE
2
        WHILE name ( expression ) statements ENDWHILE
2
The indefinite iteration statement repeatedly evaluates the expression and, each time it returns a true value, executes the statements.  The loop stops the first time that the expression returns a false value.  The definitions of 'true' and 'false' values is in 'help truth'.
2

2
        BREAK ;
2
        BREAK name ;
2
Each `break' statement indicates a specific surrounding loop; if <name> is not given, the statement refers to the innermost one. If it is given, <name> must be the name appearing right after the `for' or `while' keyword of the desired enclosing loop. When the `break' statement is executed, the indicated loop is immediately terminated and executing continues just as if the loop had completed its iterations normally.
2

2
        CONTINUE ;
2
        CONTINUE name ;
2
Allows you to terminate just the current iteration of a loop, making it immediately go on to the next one if any. 
2

2
        RETURN ;
2
        RETURN expression ;
2
The return statement evaluates the expression, if any, and returns the resulting value (or 0 if there is no expression) to the verb that called the current one.  Execution of the current verb is immediately terminated.
2

2
        TRY
2
          statements-0 ;
2
        EXCEPT variable-1 (codes-1)
2
          statements-1 ;
2
        EXCEPT variable-2 (codes-2)
2
          statements-2 ;
2
        ... (up to 255)
2
        ENDTRY
2
Each of the `statements-x' may be any number or combination of MOO statements and function calls. Each of the `codes-x' may be either the keyword `ANY' or else a comma-separated list of expressions that yield error codes. If the execution of `statements-0' raises an error listed in the `codes-x', then the statements associated in that EXCEPT clause where the code was listed are executed. When this occurs, `variable-x' is assigned this information about the error being raised:  {<error code>, <error message>, <value>, <traceback>}. If the error raised is not listed in any EXCEPT clause (which means the `ANY' keyword was not used), then the error continues to be raised. 
2

2
        TRY
2
          statements-0 ;
2
        FINALLY
2
          statements-last ;
2
        ENDTRY
2
In this construct, `statements-0' are executed. Then, whether an error was raised by their execution or not, `statements-last' are executed. If `statements-0' transfers control somewhere else, that transfer is interrupted so that `statements-last' can be run. If `statements-last' transfers control, then that overrides the first transfer. (Transfers include raising an error, returning from this verb, terminating the current iteration of a surrounding loop). `Statements-last' will always be executed, providing a good place for necessary cleanup code that will run even if `statements-0' doesn't simply run normally to completion.
2

2
        FORK ( expression ) statements ENDFORK
2
        FORK name ( expression ) statements ENDFORK
2
The fork statement first executes the expression, which must return a number; call that number N.  It then creates a new MOO task that will, after at least N seconds, execute the statements.  When the new task begins, all variables will have the values they had at the time the FORK statement was executed.  The task executing the FORK statement immediately continues execution.  If a variable name is given after the FORK keyword, then it is assigned the 'queue ID' of the newly-created task.  The value of this variable is visible both to the task executing the fork statement and to the statements in the newly-created task.  See 'help tasks' for more information about forked tasks.
36
1
4
26
2
MOO contains a rich programming language for the creation of interesting rooms, exits, and other objects.  Help is available on the following topics concerning programming in MOO:
2

2
language -- a brief reference for the syntax and semantics of the MOO language
2
tasks -- a brief description of MOO tasks and their resource limits
2

2
@property -- adding a property to an object
2
@rmproperty -- removing a property from an object
2

2
@verb   -- adding a verb to an object
2
@rmverb -- removing a verb from an object
2
@args   -- changing the syntax of a verb
2
@copy   -- copying a verb from one object to another
2

2
.program/@program -- entering the program for a verb
2
@list -- printing a listing of the program for a verb
2
@edit -- editing verb code
2

2
@show     -- looking at all the details of an object, a property, or a verb
2
@parents  -- listing the ancestors of an object
2
@kids     -- listing the children of an object
2
@contents -- listing the contents of an object
2
@chmod    -- changing the permissions on an object, a property, or a verb
2
@chparent -- changing the parent of an object
2
@rename   -- changing the name of a verb or object
2

2
eval -- executing MOO statements and expressions without writing a verb
36
1
4
18
2
The table below gives the relative precedence of all of the MOO operators; operators on higher lines in the table have higher precedence and those on the same line have identical precedence:
2

2
        !       - (without a left operand)
2
        ^
2
        *       /       %
2
        +       -
2
        ==      !=      <       <=      >       >=      in
2
        &&      ||
2
        ... ? ... | ... (the conditional expression)
2
        =
2

2
Thus, the horrendous expression
2

2
        x = a < b && c > d + e * f ? w in y | - q - r
2

2
would be grouped as follows:
2

2
        x = (((a < b) && (c > (d + (e * f)))) ? (w in y) | ((- q) - r))
36
1
4
5
2
The MOO programming language is described in excruciating detail in the LambdaMOO Programmer's Manual, available for download at http://lambda.moo.mud.org/pub/MOO/html/ProgrammersManual_toc.html.  The online help consists of a few quick reference guides here in the help system under the following topics:
2

2
statements -- the syntax and semantics of the various kinds of MOO statements
2
expressions -- the same for the various kinds of MOO expressions
2
functions -- a list of the primitive functions available to MOO programs
36
1
4
139
2
There are many, many built-in functions available to MOO programmers.  The following list gives a brief summary of the arguments and purpose of each function; for more information, see the LambdaMOO Programmer's Manual.  
2

2
pass(arg, ...)   -- calling a verb defined on this object's parent
2

2
time()           -- current time in seconds since midnight GMT, 1 Jan 70
2
ctime([time])    -- time (or current time) converted to a human-readable string
2

2
eval(string)     -- parsing and executing strings as MOO code
2

2
typeof(value)      -- determining the data type of a value
2
 tostr(value, ...) -- converting any set of values into a string
2
 toint(value)      -- converting any non-list value into an integer
2
 tonum(value)      -- converting any non-list value into an integer (obsolete)
2
 tofloat(value)    -- converting any non-list value into a floating-point
2
 toobj(value)      -- converting any non-list value into an object
2
 toliteral(value)  -- converting any value into a literal string
2
length(value)      -- returns the length of a string or list
2

2
equal(val1, val2)          -- is val1 indistinguishable from val2
2
min(n1, n2, ...)           -- minimum of n1,n2,...
2
max(n1, n2, ...)           -- maximum of n1,n2,...
2
abs(n)                     -- absolute value of n
2
sin(n), cos(n), tan(n)     -- sine, cosine, tangent of n
2
asin(n), acos(n), atan(n)  -- arc-sine, arc-cosine, arc-tangent of n
2
sinh(n), cosh(n), tanh(n)  -- hyperbolic sine, cosine, tangent of n
2
exp(n)                     -- `e' raised to the power of n
2
log(n), log10(n)           -- natural or base 10 logarithm of n (n > 0)
2
sqrt(n)                    -- square root of n, rounded down
2
random(n)                  -- random integer between 1 and n inclusive
2
floatstr(float, precision, sci) -- format a floating-point into string
2
ceil(f)          -- smallest integer > float f as a floating-point
2
floor(f)         -- largest integer < float f as floating-point
2
trunc(f)         -- truncate f at the decimal point, as floating-point
2

2
index(str1, str2 [, case-matters])  -- index of first str2 in str1
2
rindex(str1, str2 [, case-matters]) -- index of last  str2 in str1
2
strcmp(str1, str2) -- case-sensitive string comparison
2
strsub(subject, what, with [, case-matters]) -- substitution in a string
2
match(str1, str2 [, case-matters])  -- match first regular expr str2 in str1
2
rmatch(str1, str2 [, case-matters]) -- match last regular expr str2 in str1
2
substitute(template, subs)          -- perform substitutions on template
2

2
decode_binary(bin-string [, fully]) -- convert from a binary string
2
encode_binary(arg, ...)             -- convert to a binary string
2
      crypt(string [, salt])        -- one-way string encryption
2
string_hash(text)                 -- MD5 cryptographically secure hash of text
2
binary_hash(bin-string)           -- same but for a binary string
2
 value_hash(value)                -- string_hash(toliteral(value))
2

2
 is_member(value, list)           -- is exact value (case sensitive) in list
2
listappend(list, value [, index]) -- adding an element at the end of a list
2
listinsert(list, value [, index]) -- adding an element at the head of a list
2
   listset(list, value, index)    -- updating a list at some index
2
listdelete(list, index)           -- removing an element from a list
2
    setadd(list, element) -- adding an element to a set represented as a list
2
 setremove(list, element) -- removing an element from such a set
2

2
   valid(object)             -- testing whether an object exists
2
  create(parent [, owner(*)])-- creating a new MOO object
2
 recycle(object)             -- destroying a MOO object
2
    move(object, where)      -- altering the object-containment hierarchy
2
chparent(object, new-parent) -- altering the object-inheritance hierarchy
2
  parent(object)             -- object's parent   in the inheritance hierarchy
2
children(object)             -- object's children in the inheritance hierarchy
2
max_object()       -- the highest-numbered object in the MOO
2
renumber(obj)      -- changes an object's number to lowest available one (*)
2
reset_max_object() -- resets max_object() to the largest valid object (*)
2

2
     properties(object) -- a list of the properties defined on an object
2
   add_property(object, prop-name, value, info) -- add a new property
2
delete_property(object, prop-name)              -- remove a property
2
    property_info(object, prop-name)       -- {owner, perms} info on a property
2
set_property_info(object, prop-name, info) -- setting same
2
is_clear_property(object, prop-name) -- find out if a property is "clear"
2
   clear_property(object, prop-name) -- make a property "clear"
2

2
      verbs(object) -- a list of the verbs defined on an object
2
   add_verb(object, info, args)  -- add a verb to an object
2
delete_verb(object, verb-name)   -- remove a verb from an object
2
    verb_info(object, verb-name) -- {owner, perms, names} info for a verb defn.
2
    verb_args(object, verb-name) -- {dobj, prep, iobj} argument info for a verb
2
    verb_code(object, verb-name [, fully-paren [, indent]]) -- program listing
2
set_verb_info(object, verb-name, {owner, perms, names})
2
set_verb_args(object, verb-name, {dobj, prep, iobj})   
2
set_verb_code(object, verb-name, {line, line, ...})
2
disassemble(object, verb-desc)   -- listing of server's internal `compile' 
2

2
        is_player(object) -- testing whether or not object is a player
2
          players()       -- a list of all players, active or not
2
connected_players()       -- a list of all currently-connected players
2
     idle_seconds(player) -- seconds since given player typed anything
2
connected_seconds(player) -- seconds given player has been logged in
2
    boot_player(player)        -- disconnect player from the MOO immediately(*)
2
set_player_flag(player, value) -- set/clear player bit; boot player if clear(*)
2
connection_name(player)   -- a server-assigned name for player's connection
2

2
open_network_connection(@args) -- open a connection to another network site (*)
2
notify(player, string)    -- sending text to a player's terminal
2
read()                    -- reading a line of input from the player (*)
2
buffered_output_length([player])      -- how much output pending
2
force_input(player, str [, at-front]) -- put str in player's output queue
2
flush_input(player [, show-messages]) -- clear a player's output queue
2
output_delimiters(player) -- return {prefix,suffix} set by PREFIX/SUFFIX cmds
2
set_connection_option(player, option, value) -- set I/O options for player
2
   connection_options(player) -- list current I/O options for player
2
    connection_option(player, option) -- return setting of option for player
2

2
   listen(conn, point [, print-messages]) -- create server listening point (*)
2
u nlisten(canon) -- close the server listening point described by canon (*)
2
listeners() -- list of all listening points
2

2
        raise(code [, message [, value]]) -- raise code just like an error
2
call_function(func-name, arg, ...)        -- call func-name
2
function_info([name])   -- descriptions of available built-in functions
2

2
caller_perms()         -- the player whose permissions your caller was using
2
set_task_perms(player) -- changing permissions of the running task (*)
2
callers()      -- list of {obj, verb, owner, vloc, player}: this task's stack
2
suspend([secs])  -- suspending the current task for a number of seconds
2
resume(task [, value]) -- resume the given task with value returned
2
seconds_left() -- number of seconds left in the current task
2
ticks_left()   -- number of ticks   left in the current task
2
task_id()      -- a random number representing the currently-running task
2
queue_info([player]) -- who has tasks, or how many player has
2
queued_tasks() -- list of {id,start,0,20000,owner,obj,verb,line,this}
2
kill_task(id)  -- delete one of your tasks from the queue
2
task_stack(task-id [, include-line-numbers]) -- info about suspended task
2

2
server_log(string) -- add a comment to the server log file
2
server_version() -- a string of three numbers "major.minor.release"
2
memory_usage()   -- {{blocksize, nused, nfree}, ...}, the server's memory stats
2
shutdown(msg)    -- print msg and kill the server (*)
2
dump_database()  -- what it says (*)
2
db_disk_size()   -- size in bytes of recent full database
2

2
 value_bytes(value)  -- memory required to store value
2
object_bytes(object) -- memory required to store object
2

2
(*) => as you might have expected, these usually require wizard permissions.
36
1
4
75
2
The following kinds of expressions exist in the MOO programming language:
2

2
        number
2
        # integer
2
        # - integer
2
        "character string"
2
        error-name
2
Literal expressions return the obvious values: numbers (floating-point or integers), object numbers, strings, and errors.
2

2
        { expression , expression , ... , expression }
2
The list-construction expression evaluates the each of the expressions in turn and returns a list whose elements are the results of those expressions.  Any of the expressions may be prefixed with an at-sign ('@'); in this case, that expression must return a list and, rather than that list becoming an element of the final list, its elements are spliced into the final list.
2

2
        name
2
Variable expressions return the current value of the named variable.  Variable names must start with a letter or underscore ('_') and contain only letters, digits, and underscores.  The following variables are predefined:
2
            OBJ, STR, LIST, ERR, INT, FLOAT, NUM (same as INT)
2
            player, caller, this, verb, args
2
            argstr, dobj, dobjstr, prepstr, iobj, iobjstr
2
Their initial values are described in detail in the LambdaMOO Programmer's Manual.
2

2
        expression . name
2
        expression . ( expression )
2
        $ name
2
Property-reading expressions return the current value of a named property on the object that is the value of the first subexpression.  In the second form, the second subexpression must return a string, the name of the property to be read.  The third form is an abbreviation for '#0.name'.
2

2
        expression : name ( arguments )
2
        expression : ( expression ) ( arguments )
2
Verb-call expressions invoke a named verb on the object that is the value of the first subexpression, passing the given arguments.  In the second form, the second subexpression must return a string, the name of the verb to invoke.  The syntax and semantics of arguments is exactly as in the list-construction expression but no initial or final curly-braces ('{' or '}') are used.
2

2
        function ( arguments )
2
The function-call expression invokes one of the MOO primitive functions, as listed in 'help functions', passing the given arguments.
2

2
        expression [ expression ]
2
The indexing expression first evaluates the two subexpressions; call their values S and N, respectively.  S must be a string or a list and N must be a integer between 1 and the length of S, inclusive.  The Nth element of S is returned.  The elements of a string are themselves one-character strings. The special character `$' maybe used for N as shorthand for the length of the string or list S.
2

2
        expression [ expression .. expression ]
2
The subsequence expression first evaluates the three subexpressions; call their values S, N1, and N2, respecitively.  S must be a string or a list and N1 and N2 must be integers.  If N1 <= N2, then both must be between 1 and the length of S, inclusive (the shorthand character `$' may be used); the subsequence of S beginning at index N1 and continuing through index N2 is returned.  If N1 > N2, the empty sequence of the same type as S is returned, either "" or {}.
2

2
        name = expression
2
        expression . name = expression
2
        expression . ( expression ) = expression
2
        $ name = expression
2
Assignment expressions give new values to variables and object properties.  For the second and third forms, the expressions on the left-hand side of the '=' are evaluated first.  Then the right-hand side expression is evaluated and result is stored in the indicated variable or object property.
2
There is a special kind of assignment involving lists on the left hand side. See `help scattering' for details.
2

2
        expression + expression
2
        expression - expression
2
        expression * expression
2
        expression / expression
2
        expression % expression
2
        - expression
2
        expression ^ expression
2
The arithmetic expressions evaluate the subexpressions, all of which must return numbers of the same type (integer or floating-point), and then perform addition, subtraction, multiplication, division, remaindering, negation, or raising to a power, respectively.  For addition, the subexpressions may both return strings as well; in this case, the result is the concatenation of the two strings. For the last operation, raising to a power, if the first expression is an integer, the second must also be an integer. But if it is floating-point, then the second can be either floating point or an integer. This is the only type mixing permitted. You must do explicit type conversions with built-in functions (toint(), tofloat()) before evaluation mixed expressions on the other operations.
2

2
        expression == expression
2
        expression != expression
2
        expression < expression
2
        expression <= expression
2
        expression > expression
2
        expression >= expression
2
The comparison expressions evaluate the subexpressions and then test whether or not the first result is equal to, unequal to, less than, less than or equal to, greater than, or greater than or equal to the second result, respectively.  If the indicated relation holds then they return 1 and otherwise they return 0.  Comparisons of strings are performed case-insensitively, those of lists are performed on an element-by-element basis, objects are compared by their object numbers, and errors by an ordering given in the LambdaMOO Programmer's Manual.
2

2
        expression ? expression | expression
2
        expression && expression
2
        expression || expression
2
        ! expression
2
The logical expressions each return results based upon the truth value of their first subexpression; call the value of this expression X.  The first of these returns the value of the second subexpression if X is a true value and that of the third expression if X is a false value; the unused subexpression is not evaluated.  The definitions of 'true value' and 'false value' are given in 'help truth'.  The expression 'E1 && E2' is an abbreviation for 'E1 ? E2 | E1' except that E1 is only evaluated once.  The expression 'E1 || E2' is an abbreviation for 'E1 ? E1 | E2' except that E1 is only evaluated once.  The expression '! E' is an abbreviation for 'E ? 0 | 1'.
2

2
        expression IN expression
2
The list-membership expression first evaluates both subexpressions; call their values E and L, respectively.  L must be a list.  If E is an element of L, then the index of the first occurence of E in L is returned.  If E is not an element of L, then 0 is returned.
2

2
        `expression-1 ! codes => expression-2'
2
NOTE: the open- and close-quotation marks are really part of the syntax; they must be typed in. `Codes' is either the keywoard ANY or a comma-separated list of expressions that when evaluated should yield a list of error codes to be caught if they're raised. If `expression-1' is evaluated without raising an error, then its value is the value of the entire expresion. If it raises an error that is listed in `codes', it is caught. If the `=> expression-2' part was included (it is optional), then it is evaluated and its value is the result of the entire expression. If `expression-2' was omitted, then the error is the value of the expression. If the error was not listed and caught, then the error contines to be raised.
2

2
The method for disambiguating the meaning of a complex MOO expression in the absence of sufficient parentheses is described in 'help precedence'.
2

36
1
4
37
2
Syntax:  eval <MOO-code>
2
         ; <MOO-code>
2
         eval-d <MOO-code>
2

2
Evaluates the given piece of MOO code and prints the resulting value.  If the MOO code begins with one of the MOO language keywords ('if', 'for', 'while', 'fork', or 'return') or with the character ';', then the entire piece of code is treated as the program for a verb, with ';' appended to the end.  Otherwise, 'return' is appended to the front and ';' is appended to the end and that string is treated as the code for a verb.  In either case, the resulting verb is invoked and whatever value it returns is printed.
2

2
For programmers, this is such a mind-bogglingly useful thing to do that there is a simple abbreviation for this command; any command beginning with a semicolon (';') is treated as a use of 'eval'.
2

2
Eval treats specially a duplicated semicolon at the beginning.  It enables you to make multi-statement programs within eval (but does not by default print the return value).
2

2
Eval-d (no ";" abbreviation for this) evaluates the following text exactly as eval, except that the "d" debug flag (see programmer's manual for explanation) is turned off.  Thus errors will cause an error return value rather than a traceback.
2

2
If you set the programmer option `eval_time' to 1 (see `help @prog-options'), then eval will print out how many ticks and seconds the program required.
2

2
Examples:
2
   eval 3 + 4
2
   =>  7
2
   ;3+4
2
   =>  7
2
   ;for x in (player.aliases) player:tell(x); endfor
2
   Haakon
2
   Wizard
2
   ArchWizard
2
   =>  0
2
   ;;l = {}; for i in [1..10] l = {@l, i}; endfor return l
2
   =>  {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
2
   eval-d 8 + "foo"
2
   => E_TYPE  (Type mismatch)
2

2
You may customize your evaluation environment.  The player property .eval_env may contain statements to be executed prior to any evaluated program.  Two caveats:  This will throw off the tick count.  You can account for additional ticks inserted by your environment with the .eval_ticks property; just set it to the number of ticks you'd like subtracted from the total.  Additionally, if you make a syntax error in your program, the line reported will be wrong (it will count those initial statements), and if you make an error in the eval_env itself, you can be in deep trouble.  Despite these drawbacks, the eval_env property can be quite useful.  The following is a sample:
2

2
Eval_env:    "me=player;here=player.location;"
2
eval_ticks:  3
2

2
See also @setenv.
2

2
You can also define textual substitutions in a separate property, called eval_subs.  These are discouraged, however, for anything that can be done with variable assignments, because the overhead of replacing the strings in the evaluated program is significant.  However, some things, such as substituting characters which can't be typed easily on one keyboard (e.g. "[]" is difficult to type on some IBM keyboards), can only be done by textual substitutions.  Note that the eval substitutions are also interpreted by the verb editor when "eval_subs" is selected in your .edit_options property (see `help editors').  This adds to their overhead, but again, makes it possible for people to program who otherwise can't type the full character set.  Remember:  Don't use eval_subs unless you really have to!
36
1
4
3
2
*errors*
2
The complete list of error codes:
2

36
5
4
17
2
Syntax:  @verb <object>:<verb-name(s)>
2
         @verb <object>:<verb-name(s)> <dobj> [<prep> [<iobj>]]
2

2
Adds a new verb with the given name(s) to the named object.  If there are multiple names, they should be separated by spaces and all enclosed in quotes:
2

2
        @verb foo:"bar baz mum*ble"
2

2
The direct and indirect object specifiers (<dobj> and <iobj>) must be either 'none', 'this', or 'any'; their meaning is discussed in the LambdaMOO Programmer's Manual.  The preposition specifier (<prep>) must be either 'none', 'any', or one of the prepositional phrases listed in `help prepositions' (a prepositional phrase with more than one word must be enclosed in quotes ("")).  All three specifiers default to 'none'.
2

2
It is also possible to specify the new verb's permissions and owner as part of the same command (rather than having to issue separate @chmod/@chown commands)
2

2
     @verb <object>:<verb-name(s)> <dobj> <prep> <iobj> <permissions>
2
     @verb <object>:<verb-name(s)> <dobj> <prep> <iobj> <permissions> <owner>
2

2
<permissions> are as with @chmod, i.e., must be some subset of "rwxd".  They default to "rd" (specifying "w" for a verb is highly inadvisable).  The owner defaults to the player typing the command; only wizards can create verbs with owners other than themselves.
2

2
You may also use "tnt" in place of "this none this" for the dobj prep iobj arguments.  "this none this" is used to indicate non-command verbs, since the parser can't possibly interpret a command as "this none this".  For these verbs, the permissions default to "rxd"; the "x" bit is set so that they can be called from other programs.  (If they couldn't be used as commands, and they couldn't be called from programs, they wouldn't be good for anything!)
36
1
4
8
2
Syntax:  @setenv <environment string>
2

2
Defines the environment for eval (property player.eval_env).  See "help eval"
2
for more information.
2

2
Example:
2

2
  @setenv me=player;here=player.location;
36
1
4
10
2
Syntax:  @rmverb <object>:<verb-name>
2
         @rmverb <object>:<verb-name>  <dobj> <prep> <iobj>
2
         @rmverb# <object>:<verb-number>
2

2
Removes the named verb from the named object.
2
If there is more than one verb matching the given verb-name, this removes the most recently defined one.
2

2
With the 2nd form of the command the verb removed is the most recent one matching both the given verb-name *and* the given dobj/prep/iobj specifiers.
2

2
To remove the ambiguity in verbs with the same name, @rmverb# is provided where you can specify the verb by its 1-based index in the verbs() list output. Use of this form is strongly encouraged.
36
5
4
3
2
Syntax:  @rmproperty <object>.<prop-name>
2

2
Removes the named property from the named object.  '@rmproperty' may be abbreviated as '@rmprop'.
36
5
4
35
2
Usage:  @prospectus player [from number] [to number]
2

2
Like @audit, but displays more information.  The optional from and to arguments are for restricting the display to specific object numbers, if you happen to know the player only owns objects in the included range.
2

2
Example:
2
   Objects owned by Frand (from #0 to #54949):
2
     P[ 23]    #47 Frand                          [Hyperspace Hovel]
2
     T        #152 Frand's trio of shoes          [Frand]
2
   KfT[ 10]   #391 Frand's notifier class         [Nowhere]
2
     T[  8]   #393 Frand's chessboard             [The Dining Room]
2
   KfT[ 11]   #775 Frand's generic game board     [Nowhere]
2
     T[  6]   #893 Ghost game                     [The Dining Room]
2
     T[ 16]   #894 Frand's mind bender            [The Dining Room]
2
     C        #997 polka-dot hole                 [Hyperspace Hovel]
2
     R[  1]  #1002 Hyperspace Hovel              
2
     E      #11958 out                            Monster Cage->*Dr. Empirico's Lab
2
      ...
2

2
The K in the first column indicates that the object has children owned by other players.  A lowercase k indicates the object has children but owned only by the player.  The second column indicates whether the object is publicly readable or publicly parentable.  An r indicates readability.  A lowercase f indicates the object is both readable and allows children (is fertile).  An uppercase F indicates the object is not readable, yet allows children to be created.  (This is usually an error.)  If the object is readable by the issuer of the @prospectus command (that is, publicly readable or owned by the issuer), then the number in brackets indicates the number of verbs which have been defined on this object (not including any verbs from any parents).
2

2
The third column indicates what type of object this is.
2
        T       Thing
2
        E       Exit
2
        R       Room
2
        C       Container
2
        N       Note
2
        P       Player
2
        F       Feature
2
        M       Mail Recipient
2
        H       Help Database
2
        D       Database
2
        U       Utilities Package
2
        O       Options Package
2
        p       Parent object appropriate for players ("Player class")
2
        blank   Other
36
5
4
13
2
Syntax:  @property <object>.<prop-name>
2
         @property <object>.<prop-name> <initial-value>
2

2
Adds a new property named <prop-name> to the named object.  The initial value is given by the second argument, if present; it defaults to 0.  
2

2
Normally, a property is created with permissions 'rc' and owned by whoever types the command.  However, you may also specify these explicitly
2

2
         @property <object>.<prop-name> <initial-value> <permissions>
2
         @property <object>.<prop-name> <initial-value> <permissions> <owner>
2

2
Only wizards can create properties with owners other than themselves.
2

2
'@property' can be abbreviated as '@prop'.
36
1
4
20
2
Syntax:  @program <object>:<verb-name>
2
         @program <object>:<verb-name> <dobj> <preposition> <iobj>
2
         @program# <object>:<verb-number>
2

2
Changes the MOO program associated with the named verb on the named object.
2
If you provide <dobj> <preposition> and <iobj> as in the second form of this command, then it is the first verb with matching direct object, preposition and indirect object specifiers that is the one getting the new program.  This is useful if you have several verbs matching the same name.
2

2
Or, you can use @program# if you know the verb's number. This is the 1-based index of the verb as it appears in the verbs() (or @verbs) output list.
2

2
Typing the @program command always puts the server into a line-reading mode, in which each line you type is saved away without any action unless said line is one of the following:
2

2
  .
2
  @abort
2
  .<text>
2

2
A period on a line by itself ends the line-reading mode and continues with the command, in this case, the saved lines are considered as a program, checked for syntax errors and, if no errors are found, installed as the new program for the specified verb.  
2

2
@abort causes the command to terminate immediately with no change to any verb's program.  .<text> enters <text> literally as one of the lines to be saved, which is used for when, e.g., you want to enter the line `.' or the line `@abort'.
2

2
Note that this command *always* enters the line-reading mode, even if the indicated verb is not found.  In this case, lines of text are still read but they are ignored.  After any @program command, you always need to type a period or `@abort' to get back into the normal command-reading mode.
36
5
4
25
2
Syntax:  @list <object>:<verb>
2
         @list <object>:<verb> [with|without parentheses|numbers] [all]
2
         @list <object>:<verb> <dobj> <prep> <iobj>
2
         @list <object>:<verb> <start>..<end>
2
         @list# <object>:<verb-number> [any of the above]
2

2
Prints out the code for the MOO program associated with the named verb on the named object.  
2

2
Normally, the code is shown with each line numbered and with only those parentheses that are necessary to show the meaning of the program.  You can e.g., specify `without numbers' to have the numbers omitted or `with parentheses' to include all parentheses or even `with parentheses without numbers' to do both.  You can change the default behavior of this command via @prog-options (which see).
2

2
Normally, the @list command only shows the code for the named verb on the object itself or on the nearest ancestor that defines it; if you give the `all' option, it shows the code for the named verb on every ancestor that defines it, as well as on the object itself.
2

2
The 3rd form of the verb lists the verb matching the given dobj/prep/iobj specification if such exists.  
2
The 4th form prints only those lines in the specified range.
2

2
Example:
2
  Type `@list $room:say' to see the code for the `say' command, or even `@list $prog:@list' to see the code implementing @list itself...
2

2
The 2nd-4th forms may be combined, e.g.,
2

2
  @list frobule:burfle this in front of any without numbers 1..10
2

2
which would be useful if `frobule' had more than one `burfle' verb and we wanted to see the first 10 lines of the one having `this' `in front of' `any' as its respective dobj/prep/iobj specifiers.
2

2
Or, if you know the verb's number, you can use @list# to unambiguously refer to the verb. The number comes from the 1-based index of the verb as it appears in the verbs() (or @verbs) output list.
36
1
4
26
2
Syntax:  @kill task_id
2
         @kill [object]:[verb]
2
         @kill soon [number-of-seconds]
2
         @kill all
2
         @kill %trailing_id
2

2

2
Immediately kills one or more forked tasks.  The '@forked' command is useful for finding out what tasks you have pending; see 'help @forked' for details.  Only the owner of a task may kill it.
2

2
@kill task_id kills only the task with that id.
2

2
@kill object:verb kills all tasks which were scheduled by the object running the verb named.  Both object and verb are optional:  @kill object: kills all tasks scheduled by that object, and @kill :verb kills all tasks which were scheduled by any object running that verb.  This can be useful if you have several similar objects which are running tasks from similarly named verbs.  (Perversely, @kill : kills all tasks...  Any object running any task.)
2

2
@kill soon kills all tasks scheduled within the next minute.  @kill soon number kills all tasks scheduled within that number of seconds, e.g. @kill soon 300 would kill all tasks scheduled within the next five minutes.  This can be useful if you have a runaway task you want to quickly remove, but don't want to kill you later tasks.
2

2
@kill all kills all tasks.  Like @kill soon, but more dramatic.
2

2
@kill %trailing_id expects you to specify the last few digits of a task id.  It then kills all tasks that end with those digits.
2

2
@killq*uiet does all of the above without the pretty printout if more than one task is being killed.  It tells you the number of tasks that have been killed when it's finished.
2

2
Example:
2
  @forked
2
  1359083655  Sep 16 21:45:00 1991  yduJ          #5803:heartbeat (10) [#68]
2
  @kill %655
2
  Killed:   task 1359083655, verb #5803:heartbeat, line 10, this==#68
36
1
4
8
2
Syntax:  @kids object
2

2
A quick way to find out the children of an object.  Prints out the names and object numbers of the found children.  Note: this is not a list of all descendents, just direct children.
2

2
Example:
2
  @kids #3107
2
  Generic Body of Chlorinated Water(#3107) has 3 kids.
2
  The Pool(#1428)   The Hot Tub(#388)   Deep Blue Underground Pool(#17340)
36
5
4
26
2
Syntax:  @forked[-v*erbose] [all wizards]
2

2
Gives a list of all of the forked tasks you own, along with detailed information about each one.  Wizardly characters may specify `all wizards' and see the queued tasks which are owned by a player with .wizard=1. This is useful to find a task that $wiz_utils:random_wizard has put in various queues, and to also find code which is running with wizardly permissions that shouldn't be.
2

2
The information displayed includes the following:
2

2
Queue ID:
2
   A numeric identifier for the task, for use in killing it (see 'help @kill').
2

2
Start Time:
2
   The time after which the task will begin execution.
2

2
Owner:
2
   The player whose permissions under which the task is running.
2
   Unless you are a wizard, @forked will show only your tasks.
2

2
Verb:
2
   The object and verb-name of the code that forked the task.
2

2
Line:
2
   The line number of the first statement that the task will execute when it starts.  Note that the code for the verb in question may have changed since the task was forked; the forked task will use the version that was being executed when it was forked.
2

2
This:
2
   The value of `this' for the forked task, in the case that it is different from (i.e., is a descendant of) the object on which the verb code lives.
2

2
For a more verbose output, use `@forked-v*erbose'. This will display the same information as the above, but for any task which is not a fresh fork or foreground task, a callers()-style listing of the stack trace will be displayed.
36
1
4
42
2
Syntax: @display <object>.[property]
2
                         ,[inherited_property]
2
                         :[verb]
2
                         ;[inherited_verb]
2

2
@display is a fancy version of @show.  As @show, it can select individual verbs or properties to display.  In addition, it can display all the verbs or properties defined on an object, or all the verbs or properties defined on any of the object's ancestors.  Don't specify a property or verbname after the punctuation mark to get the "all" feature.  Its display is more compact than that of @show (it uses a one-line format, and truncates values that don't fit in the value field).
2

2
You may mix properties and verbs on the command line, but the parser may become confused.  (E.g. @display object,: displays all properties including inherited ones plus all locally defined verbs on the object.)
2

2
Examples:
2
Individual property:
2
  @display poolsweep.count
2
  .count                   yduJ (#68)            r c    8
2

2
Individual verb:
2
  @display poolsweep:tell
2
  #3560:tell                     yduJ (#68)           rxd    this none this
2

2
All properties, including one truncated value:
2
  @display poolsweep.
2
  poolsweep (#3560) [ readable ]
2
    Owned by yduJ (#68).
2
    Child of generic thing (#5).
2
    Location The Pool (#1428).
2
  .gagged                  yduJ (#68)            r c    0
2
  .count                   yduJ (#68)            r c    8
2
  .messages                yduJ (#68)            r c    {"The poolsweep stir..
2
  .index                   yduJ (#68)            r c    2
2
  .quantum                 yduJ (#68)            r c    20
2

2
Inherited verbs, edited for brevity, showing verbs from various parents, with owners, permissions, and argument lists.
2
  @d poolsweep;
2
  poolsweep (#3560) [ readable ]
2
   #3560:tell                     yduJ (#68)           rxd    this none this
2
   #3560:description              yduJ (#68)           rxd    this none this
2
      #5:"g*et t*ake"             Haakon (#2)          rxd    this none none
2
      #5:"d*rop th*row"           Haakon (#2)          rxd    this none none
2
      #5:moveto                   Haakon (#2)          rxd    this none this
2
      #1:description              Haakon (#2)          rxd    this none this
2
      #1:look_self                Haakon (#2)          rxd    this none this
2

2
Some aspects of @display can be customized (see `help @display-options').
36
5
4
3
2
Syntax:  @dbsize
2

2
@dbsize goes through the entire database, counting the valid and invalid objects, giving a summary at the end.  This information can be useful, but because this command is cpu intensive, it should be used sparingly.
36
5
4
14
2
Syntax:  @copy <object>:<verb> to [<newobject>][:<newverb>]
2
         @copy-move <object>:<verb> to [<newobject>][:<newverb>]
2

2
Copies the code of the named verb to the new object and verbname.  Permissions, and arguments of the new verb are set to match those of the old verb in the event that the new verb does not already exist.  One of <newobject> or :<newverb> must be supplied.  If no new verbname is given, the old name is retained.  Likewise, <newobject> defaults to <object> if not given.
2

2
@copy-move will delete the old verb after it has copied.  Useful for restructuring code/object hierarchies.
2

2
Examples:
2
  @copy me:verbname to myobject
2
  @copy me:test_verb to myobject:real_verb
2

2
In general, @copy'ing verbs is a bad idea.  In the vast majority of cases, the desired effect can be accomplished with parenting (i.e., having <object> be an ancestor of <newobject>), which has the advantage that if a verb is updated or fixed, this immediately becomes available to child objects that inherit this verb.  In such a case, copies that were made using @copy have to be tracked down and fixed by hand.
2

2
This facility is provided for those rare occasions where one has no choice but to actually copy the verb.
36
5
4
7
2
Syntax:  @chparent <object> to <new parent>
2

2
Changes the parent of the named object to be the named parent.  The object acquires all the verb and property definitions of its parent.  Newly acquired properties are initilialized with `clear' values so that they inherit whatever values are currently assigned to the parent's corresponding properties (see `help @clearproperty').
2

2
If the player does not own <new parent>, it must have been set `fertile'.  <object> must be owned by the player.  Neither <object> nor any descendant can define any property which already exist on <new parent>.  Use @check-chparent (see `help @check-chparent') to list such property conflicts.
2

2
It is also sometimes the case that you will own some object and want to @chparent some child of that object that you do not own.  Use @disinherit (see `help @disinherit') in such situations.
36
5
4
28
2
Syntax:  @chmod <object> <object-permissions>
2
         @chmod <object>.<prop-name> <property-permissions>
2
         @chmod <object>:<verb-name> <verb-permissions>
2
         @chmod# <object>:<verb-number> <verb-permissions>
2

2
Changes the permissions of an object, property or verb, to those given.  The following table shows what permission bits are allowed for each form of the command:
2
        <object-permissions>        r, w, f
2
        <property-permissions>      r, w, c
2
        <verb-permissions>          r, w, x, d
2

2
See the LambdaMOO Programmer's Manual for their meanings.
2

2
The form @chmod# is used to unambiguously refer to a verb by its 1-based index as it appears in the verbs() (or @verbs()) output list.
2

2
To clear all of the permissions for an object, verb, or property, use "" as the second argument.
2

2
@chmod also accepts +, !, and - as modifiers for a single permission to add or subtract that permission from the current set.  (! and - are the same.)
2

2
Examples:
2

2
Set a verb to be Readable and Callable:
2
  @chmod chair:sit rx
2

2
Set a verb to be not Callable, without changing its other permissions:
2
  @chmod cookies:eat !x
2

2
Set an object to be Fertile in addition to any current bits:
2
  @chmod table +f
36
5
4
9
2
Syntax:  @args <object>:<verb-name> <dobj>
2
         @args <object>:<verb-name> <dobj> <prep>
2
         @args <object>:<verb-name> <dobj> <prep> <iobj>
2
         @args# <object>:<verb-number> [any above combinations]
2

2
Changes the direct object, preposition, and/or indirect object specifiers for the named verb on the named object.  Any specifiers not provided on the command line are not changed.  The direct and indirect object specifiers (<dobj> and <iobj>) must be either 'none', 'this', or 'any'.  The preposition specifier (<prep>) must be either 'none', 'any', or one of the prepositional phrases listed in `help prepositions'.
2

2
To unambiguously refer to the verb on the object, in case there are more than one with the same name, use @args#. This takes the 1-based index of the verb as it appears in the verbs() (or @verbs()) output list.
2

36
1
4
13
2
Syntax:  .program <object>:<verb-name>
2
              :
2
              :
2
              <lines of MOO code>
2
              :
2
              :
2
         .
2

2
Provides or changes the MOO program associated with the named verb on the named object.
2

2
This command is mostly obsolete.  Use @program instead.  The only reason this command still exists is that it is a server builtin command that will continue to work in the (unlikely) event that @program gets trashed ...
2

2
This command works differently from most other MOO commands, in that it actually changes how the server will interpret later lines that you type to it.  After typing the '.program' line, you are in 'programming mode'.  All lines that you type in this mode are simply saved away in the server until you type a line containing only a single period ('.').  At that point, those lines are interpreted as a MOO program and are checked for syntax errors.  If none are found, a message to that effect is printed and the code you typed is installed as the program for the verb in question.  In any case, after typing the '.' line, you are returned to the normal input-handling mode.
36
1
4
32
2
Syntax:   @clearproperty <object>.<prop-name>
2

2
This clears <object>'s <prop-name> property.  That is the property value becomes `clear' and all further references to this property will use the value of the same property on the parent object.  Note that you can only clear inherited properties.  Nor is this the same as removing a property; the property continues to exist.
2

2
`@clearproperty' can be abbreviated as `@clearp'.
2

2
Example:
2

2
  @create #1 named foo
2
  You now have foo with object number #42 and parent Root Class (#1).
2
    [foo, as a child of #1 has a .description property which starts out clear]
2
  ;#1.description
2
  => ""
2
  ;#1.description = "You see nothing special"
2
  => "You see nothing special"
2
  ;#42.description  
2
  => "You see nothing special"
2
  ;#42.description = "Something special"
2
  => "Something special"
2
   [foo.description is now no longer clear; it has a value of its own]
2
  ;#1.description = "Boring"
2
  => "Boring"
2
  ;#42.description  
2
  => "Something special"
2
   
2
  @clearp foo.description
2
  Property #42.description cleared; value is now "Boring".
2
   [foo.description is now clear again]
2
  ;#1.description = ""
2
  => ""
2
  ;#42.description
2
  => ""
36
5
4
2
2
*forward*
2
@disinherit
36
5
4
11
2
Syntax:   @disinherit <object> 
2
          @disinherit <object> [from <parent>]
2

2
Synonym:  @disown
2

2
This command is used to remove an unwanted child from an object you own.  If you owned said child, you could use @chparent; this command is to cover the other case, namely where you don't own the child.  
2

2
Both forms of this command chparent <object> to its grandparent, provided you own the parent.  The second form matches the string you supply for <object> against the list of children of the given <parent>.
2

2
Turning off the fertile bit (.f) for a particular object prevents others from creating children of it or chparenting to it (see `help @chmod').
2
Note also that, though the name might seem to indicate otherwise, this command does not change the ownership of any object.
36
5
4
2
2
*forward*
2
@display-options
36
5
4
24
2
Syntax:  @display-option
2
         @display-option <option>
2

2
Synonym:  @displayoption
2

2
The display options customize the behavior of the @display command to your particular taste.  The first form of this command displays all of your display options.  The second form displays just that one option, one of the flags listed below.
2

2
The remaining forms of this command are for setting your display options:
2

2
         @display-option +<flag>
2
         @display-option -<flag>
2
         @display-option !<flag>           (equivalent to -<flag>)
2

2
These respectively set and reset the specified flag
2

2
-blank_tnt     Show the verb args on all verbs.
2
+blank_tnt     Don't show the verb args on `this none this' verbs.
2
-shortprep     Use full prepositions  (e.g., "on top of/on/onto/upon")
2
+shortprep     Use short prepositions (e.g., "on")
2
-thisonly      Specifying . (:) to retrieve all properties (verbs) will go
2
               up the ancestor chain until it finds a readable object with
2
               properties (verbs) defined on it.
2
+thisonly      Specifying . (:) to retrieve all properties (verbs) will only
2
               display properties (verbs) defined on the object itself.
36
5
4
24
2
*pass*
2
@add-feature
2

2
Note to programmers: @add-feature and @remove-feature are front-ends for player:add_feature and :remove_feature.
2

2
:add_feature returns
2

2
 * E_PERM unless caller == this || $perm_utils:controls(caller_perms())
2

2
 * E_INVARG if feature is not an object or is invalid
2

2
 * E_PERM if the object is not feature_ok
2

2
 * a true value otherwise
2

2
and calls feature:feature_add, if the verb exists.
2

2
:remove_feature returns
2

2
 * E_PERM unless caller == this || $perm_utils:controls(caller_perms()) || caller_perms() == feature.owner
2

2
 * a true value otherwise
2

2
and calls feature:feature_remove, if the verb exists.
36
5
4
2
2
*forward*
2
@add-feature
36
5
4
6
2
*pass*
2
features
2

2
Note to programmers: In order to be available for general use as a feature, an object must have a verb or property named "feature_ok" which returns a true value.
2

2
When a feature is added to a player's features list, feature:feature_add is called, if it exists, with the player in question as its argument.  Likewise, when a feature is removed, feature:feature_remove is called.
36
5
4
4
2
*pass*
2
examine
2

2
[Note to programmers: the 'obvious' verbs are those that can be invoked as commands and are not specified by the :hidden_verbs verb.  The default definition of "hidden" is "not readable".  You can override this definition with a :hidden_verbs verb that gets the default list with pass(@args) and then alters that list.]
36
5
4
5
2
*pass*
2
mail
2
 - - - - -
2
See `help mail-system' for a description of the programming interface to the mail system.
2
In particular, see `help $mail_recipient' for information on creating new mail collections.
36
5
4
7
2
#<string>[.<property>|.parent] [exit|player|inventory] [for <code>] returns information about the object (we'll call it <thing>) named by string.  String is matched in the current room unless one of exit|player|inventory is given.
2
If neither .<property>|.parent nor <code> is specified, just return <thing>.
2
If .<property> is named, return <thing>.<property>.  .parent returns parent(<thing>).
2
If <code> is given, it is evaluated, with the value returned by the first part being substituted for %# in <code>.
2
For example, the command
2
  #JoeFeedback.parent player for tonum(%#)
2
will return 26026 (unless Joe has chparented since writing this).
36
5
4
2
2
*forward*
2
@prog-options
36
5
4
2
2
*forward*
2
@prog-options
36
5
4
2
2
*forward*
2
@prog-options
36
5
4
38
2
Syntax:  @prog-option
2
         @prog-option <option>
2

2
Synonyms:  @progoption, @programmer-option @programmeroption
2

2
The first form displays all of your programmer options
2
The second displays just that one option, which may be one of the flags listed below.  The programmer options control various annoying details of your programming commands (e.g., @list, eval, @copy, ...)
2

2
The remaining forms of this command are for setting your programmer options:
2

2
         @prog-option +<flag>
2
         @prog-option -<flag>
2
         @prog-option !<flag>           (equivalent to -<flag>)
2

2
These respectively set and reset the specified flag
2

2
 -list_all_parens    @list shows only necessary parentheses by default
2
 +list_all_parens    @list shows all parentheses by default
2
 -list_no_numbers    @list gives line numbers by default
2
 +list_no_numbers    @list does not give line numbers by default
2
 -eval_time          eval does not show ticks/seconds consumed.
2
 +eval_time          eval shows ticks/seconds consumed.
2
 -copy_expert        @copy prints warning message.
2
 +copy_expert        @copy prints no warning message.
2
 -list_show_permissions  @list does not display permissions in header
2
 +list_show_permissions  @list displays permissions in header
2

2
All flags default to the `-' settings.  
2
Finally, we have
2

2
         @prog-option verb_args [is] <dobj> <prep> <iobj>
2
         @prog-option verb_args="<dobj> <prep> <iobj>"
2
         @prog-option -verb_args
2
                      (equivalent to verb_args="none none none")
2
         @prog-option +verb_args
2
                      (equivalent to verb_args="this none this")
2

2
which all serve to specify the (direct/indirect)-object and preposition to use in a @verb command for which these are not given at all.
36
5
4
5
2
*pass*
2
options
2

2
  @prog-options    --- programming commands (@list, @verb, ...)
2
  @display-options --- @display (*)
36
5
4
2
2
*forward*
2
utilities
36
5
4
2
2
*forward*
2
@kill
36
5
4
54
2
It is often the case in MOO programming that you will want to access the elements of a list individually, with each element stored in a separate variables.  This desire arises, for example, at the beginning of almost every MOO verb, since the arguments to all verbs are delivered all bunched together in a single list.  In such circumstances, you could write statements like these:
2

2
first = args[1];
2
second = args[2];
2
if (length(args) > 2)
2
  third = args[3];
2
else
2
  third = 0;
2
endif
2

2
This approach gets pretty tedious, both to read and to write, and it's prone to errors if you mistype one of the indices. Also, you often want to check whether or not any extra list elements were present, adding to the tedium.
2

2
MOO provides a special kind of assignment expression, called `scattering assignment' made just for cases such as these. A scattering assignment expression looks like this:
2

2
{<target>, ...} = <expr>
2

2
where each <target> describes a place to store elements of the list that results from evaluating <expr>. A <target> has one of the following forms:
2

2
`variable'
2
   This is the simplest target, just a simple variable; the list element in the corresponding position is assigned to the variable.  This is called a `required' target, since the assignment is required to put one of the list elements into the variable.
2

2
`?variable'
2
   This is called an `optional' target, since it doesn't always get assigned an element. If there are any list elements left over after all of the required targets have been accounted for (along with all of the other optionals to the left of this one), then this variable is treated like a required one and the list element in the corresponding position is assigned to the variable. If there aren't enough elements to assign one to this target, then no assignment is made to this variable, leaving it with whatever its previous value was.
2

2
`?variable' = `default-expr'
2
   This is also an optional target, but if there aren't enough list elements available to assign one to this target, the result of evaluating `default-expr' is assigned to it instead. Thus, `default-expr' provides a default value for the variable. The default value expressions are evaluated and assigned working from left to right -after- all of the other assignments have been performed.
2

2
`@variable'
2
   By analogy with the @ syntax in list construction, this variable is assigned a list of all of the `leftover' list elements in this part of the list after all of the other targets have been filled in. It is assigned the empty list if there aren't any elements left over. This is called a `rest' target, since it gets the rest of the elements. There may be at most one rest target in each scattering assignment expression.
2

2
If there aren't enough list elements to fill all of the required targets, or if there are more than enough to fill all of the required and optional targets but there isn't a rest target to take the leftover ones, then E_ARGS is raised.
2

2
Here are some examples of how this works.  Assume first that the verb me:foo() contains the following code:
2

2
b = c = e = 17;
2
{a, ?b, ?c = 8, @d, ?e = 9, f} = args;
2
return {a, b, c, d, e, f};
2

2
Then the following calls return the given values:
2

2
me:foo(1)                        error-->   E_ARGS
2
me:foo(1, 2)                     =>   {1, 17, 8, {}, 9, 2}
2
me:foo(1, 2, 3)                  =>   {1, 2, 8, {}, 9, 3}
2
me:foo(1, 2, 3, 4)               =>   {1, 2, 3, {}, 9, 4}
2
me:foo(1, 2, 3, 4, 5)            =>   {1, 2, 3, {}, 4, 5}
2
me:foo(1, 2, 3, 4, 5, 6)         =>   {1, 2, 3, {4}, 5, 6}
2
me:foo(1, 2, 3, 4, 5, 6, 7)      =>   {1, 2, 3, {4, 5}, 6, 7}
2
me:foo(1, 2, 3, 4, 5, 6, 7, 8)   =>   {1, 2, 3, {4, 5, 6}, 7, 8}
2

2
Using scattering assignment, the example at the begining of this section could be rewritten more simply, reliably, and readably:
2

2
{first, second, ?third = 0} = args;
2

2
It is good MOO programming style to use a scattering assignment at the top of nearly every verb, since it shows so clearly just what kinds of arguments the verb expects.
36
5
4
5
2
Syntax:  .flush
2

2
Clear out all recent lines of input that haven't been processed yet by the server. Useful when you change your mind about lines you have typed that haven't run yet.
2

2
This command name can be changed by the `set_connection_option()' built-in function, or if $server_options.default_flush_command exists and is non-empty, that value is used. If it exists and -is- empty, then no flush command exists at all.
36
5
4
2
2
*forward*
2
@rmverb
36
5
4
2
2
*forward*
2
@list
36
5
4
2
2
*forward*
2
@program
36
5
4
2
2
*forward*
2
@args
36
5
4
2
2
*forward*
2
@chmod
36
5
4
2
2
*pass*
2
@rename
36
5
4
2
2
*pass*
2
@addalias
36
5
4
2
2
*pass*
2
@addalias
36
5
4
2
2
*pass*
2
@rmalias
36
5
4
2
2
*pass*
2
@rmalias
36
5
4
7
2
The MOO checkpoint is created by a UNIX system fork() call, which creates a separate process but with the same memory image as the running the MOO.  That process then writes that information into a database.
2

2
The act of calling this separate-but-equal process is intrinsically laggy because the MOO server memory is already saturated by the running version of the MOO.  Adding an equal size process to the mix results in heavy swapping between memory and harddrive.  It would therefore be considered wise not to run any processor or memory intensive MOOcode during checkpoint.
2

2
If you wish to alter any of your code to avoid executing during a checkpoint, you can check the value of $login.checkpoint_in_progress, which returns 1 during checkpoint and 0 otherwise.  This value is itself toggled by the verbs $sysobj:checkpoint_started and $sysobj:checkpoint_finished.
2

2
Also see help on:   dump_database()   @dump-database   checkpoint
36
1
4
2
2
*forward*
2
@grep
36
5
4
2
2
*forward*
2
@grep
36
5
4
3
2
*verbdoc*
2
$prog
2
@properties
2
1
4
2
2
*forward*
2
@properties
2
1
5
36
5
4
1
2
prog-index
36
1
5
36
4
4
1
2
Programmer Help
36
5
2
This provides help on the programmer commands available on $prog and related topics.
36
5
4
2
0
90272
0
1084848672
36
1
#23
Wizard Help

16
36
-1
-1
-1
30
-1
22
0
52
@guests
@log
@egrep
@unnewt
@denewt
@newt
@grep
$site_db
graylist
blacklist
@recycle
wiz-index
@dump-database
@players
@net-who
@@who
@quota
@detoad
@untoad
@toad
@grepcore
@who-calls
@abort-shutdown
@shutdown
@programmer
@shout
@chown
redlist
@blacklist
@graylist
@redlist
@make-guest
@spooflist
spooflist
@make-player
@register
@new-password
@deprogrammer
forked-tasks
mail-lists
@grant
adding-help-text
further-reading
@temp-newt
site-info
recycling-players
advertised
news-items
routine_tasks
@chown#
@grepall
@egrepall
58
4
6
2

2
@guests now  [shows information about currently connected guests]
2
@guests all  [shows all entries in $guest_log]
2
@guests <n>  [shows the last <n> entries of $guest_log]
2

2
Note, some wizards prefer to use verbs on $guest_log manually, particularly :last().
36
5
4
11
2
Syntax:  @log <message>
2
         @log
2

2
The first form enters <message> as a one-line comment in the server log.
2
The second form prompts for a sequence of lines to be collectively entered as an extended comment.  This uses $command_utils:read_lines so all of those conventions apply, i.e., a period on a line by itself ends the text, `@abort' aborts the command, etc...).  Example:  If Wizard (#2) types
2

2
    @log I did $dump_interval=3600
2

2
the following line appears in the server log
2

2
    Aug 19 22:36:52:  COMMENT:  from Wizard (#2):  I did $dump_interval=3600
36
5
4
2
2
*forward*
2
@grep
36
5
4
2
2
*forward*
2
@denewt
36
5
4
10
2
Syntax:    @denewt <player> [commentary]
2

2
Synonyms:  @unnewt
2
           @get-better
2

2
@denewt reverses the effects of @newt, removing the player from $login.newted, and if appropriate, $login.temporary_newts.
2

2
Mail is sent to $newt_log including any commentary you provide.  E.g.,
2

2
  @denewt Twit  He promises not to do it again.
36
5
4
28
2
*subst*
2
Syntax:  @newt <player> [commentary]
2
         @temp-newt <player> for <period>
2

2
The @newt command temporarily prevents logins on a given player.
2
It works by adding the player to $login.newted, and for @temp-newt, also adding the player and an end time to $login.temporary_newts.  $login will deny connection to any player in $login.newted, unless they are temporarily newted and their time has expired, in which case it will clean up---denewt them---and allow the connection attempt.  Use @denewt to reverse this.
2

2
You must give either the player's full name or its object number.
2
Also, this command does not let you @newt yourself.
2

2
Mail will be sent to $newt_log, listing the player's .all_connect_places and including any commentary you provide.  E.g.,
2

2
  @newt Twit  did real annoying things.
2

2
As with @toad and @programmer, there are messages that one may set
2

2
@newt  [%[$wiz.newt_msg]]
2
  Printed to everyone in the room in which the victim is being @newted.
2
  If you're worried about accidentally newting yourself in the process of
2
  setting this message, you can't (see above).
2

2
@newt_victim  [%[$wiz.newt_victim_msg]]
2
  Printed to the victim.  
2
  This is followed by $login:newt_registration_string().
2

2
See `help @toad' if you need something more drastic.
2

2
The @temp-newt variant of @newt permits you to specify a time period during which this player may not use the MOO.  Time units must be acceptable to $time_utils:parse_english_time_interval.
36
5
4
12
2
*pass*
2
@grep
2

2
For wizards, the following forms are also available for doing full-db searches
2

2
         @grep  <pattern>
2
         @grep  <pattern> from [#]<n>
2

2
and likewise for @egrep, @grepall, and @egrepall.
2
The first searches all objects in the database while the second searches the range [#<n>..max_object()]
2

2
See also:  @grepcore, @who-calls.
36
5
4
21
2
Database of places
2
------------------
2
i.e., places people have connected from.
2

2
  :add(sitename,player)
2
      records the fact that player connected from sitename.
2
  :load()
2
      clears the db and reloads all of the player connection info.
2

2
  .domain
2
      default domain for unqualified sitenames given to :add.
2
      
2
For each domain we keep a list of players and subdomains. 
2
For example, :add("doc.ic.ac.uk",#666) enters #666 on the lists for "doc.ic.ac.uk", and, if we have to create an entry for "doc.ic.ac.uk", we enter "doc" on the list for "ic.ac.uk", "ic" on the list for "ac.uk", etc....  In this case, :find("ic") will return the "ic.ac.uk" list if there is no other domain in $site_db starting with "ic".  Note that the "ic.ac.uk" list may contain both objects, i.e., namely players that have connected from the site "ic.ac.uk", and strings, i.e., subdomains of "ic.ac.uk" like "doc".
2

2
  :find_exact(string)    => player/subdomain list or $failed_match
2
  :find_all_keys(string) => list of all domains that begin with string
2
  :find_key     (string) => unique domain that begins with string, 
2
                            $ambiguous_match or $failed_match
2

2
The other $generic_db functions (:find, :find_all) are also available, though admittedly less useful.
36
5
4
2
2
*forward*
2
blacklist
36
5
4
35
2

2
The Site Blacklist
2
------------------
2
$login maintains three lists of hosts/domains to support player registration schemes and blocking of connections from highly untrusted hosts:
2

2
  .redlist   -- all connections from these sites are disabled 
2
  .blacklist -- player creation and guest logins are disabled
2
  .graylist  -- advisory list of potential trouble spots (putting a site on the
2
                .graylist merely annotates it in @net-who listings).
2
  .spooflist -- guests from these sites cannot use @request to request 
2
                a character
2

2
The lists are kept in a special format so it is highly recommended that you 
2
either use $wiz:@*list/@un*list or the following verbs to query/update the 
2
respective lists rather than bash them directly:
2

2
  $login:*listed     (host)              is host is on .*list?
2
  $login:*list_add   (domain or subnet)  add domain or subnet to .*list
2
  $login:*list_remove(domain or subnet)  remove domain or subnet from .*list
2

2
where `*' is one of `black', `red', `gray', or `spoof'.
2

2
There are also temporary versions of the above four lists, stored in associated $login.temporary_*list in the same format, except two additional bits of data are stored.  The time the temporary *listing started, and the duration that it will last.  In addition there exists:
2

2
  $login:*list_add_temp(domain or subnet, start time, duration)
2
  $login:*list_remove_temp(domain or subnet)
2

2
When the normal $login:*listed verb is called, both the regular *list and the temporary *list are checked.  If the host is on the temporary list, then the length of MOO up time since the start time is checked against the duration.  If expired, the host is removed from the temporary *list and a false value is returned (meaning that the host is not *listed).
2

2
One may either specify a domain name (e.g., "baz.edu") or a numeric IP address (e.g., "36.0.23.17").  Domain names match all hosts underneath that domain, so, e.g., puting "baz.edu" on a list effectively adds "x.bax.edu" for all x as well.  
2
Likewise, an incomplete numeric address, e.g., "128.42" will match that entire subnet, in this case all hosts whose IP numbers have the form "128.42.m.n" for arbitrary integers m and n.
2

2
One may also give a domain name containing a wildcard ("*"), e.g., "fritz*.baz.edu", in which case all hostnames matching in the sense of $string_utils:match_string() are considred to be on the list.  Wildcard matching should be avoided since it is more time-consuming.
2

2
It should be noted that, since there is no direct access to the domain name service from within the MOO, it is possible for a host to be blacklisted or redlisted via its domain name, and yet have someone be able to connect from that host (and, in the case of a blacklisted host, create a character) --- this can happen if the name service is down and connection_name() on that player thus has given the numeric IP address rather than the domain name.  Similarly, if you list a host by IP number alone, it will still be possible to get in via the site's domain name.  Thus to be completely assured of shutting out a site, you need to list it both by domain name and IP number.
36
5
4
6
2
*pass*
2
@recycle
2

2
Of course, wizards are allowed to @recycle anything at all.
2

2
There is, however, a block (in $player:recycle) against recycling actual players, i.e., descendants of $player that have the player flag set.  This is mainly to prevent stupid mistakes.  If, for some reason, you want to recycle a player, you need to @toad it first.
36
5
4
2
2
*index*
2
Wizard Help Topics
36
5
4
3
2
Syntax:  @dump-database
2

2
Invokes the builtin dump_database(), which requests that the server checkpoint the database at its next opportunity.  It is not normally necessary to call this function; the server automatically checkpoints the database at regular intervals; see the chapter on server assumptions about the database for details.
36
5
4
3
2
Syntax:  @players [with objects]
2

2
Hmmm... what *does* this do, anyway?
36
5
4
9
2
Syntax:  @net-who [<player>...]
2
         @net-who from [<domain>]
2

2
Synonym: @@who
2

2
@net-who without any arguments prints all connected users and hosts.  If one or more <player> arguments are given, the specified users are printed along with their current or most recent connected hosts.  If any of these hosts are mentioned on $login.blacklist or $login.graylist (see `help blacklist'), 
2
an annotation appears.
2

2
With a `from...' argument, this command consults $site_db and prints all players who have ever connected from the given domain.
36
5
4
2
2
*forward*
2
@net-who
36
5
4
7
2
*pass*
2
@quota
2

2
 - - - - - - - - - - - - - - - - - - - - - - - - - -
2
Syntax:  @quota <player> is [public] [+]<number> [<reason>]
2

2
This second and more interesting form of the verb is used to set a player's quota.  Mail will be sent to $quota_log, and also $local.public_quota_log if there is one and if the "public" argument is given; if a reason is supplied, it will be included in the message.  If the number is prefixed with a +, it's taken as an amount to add to the player's current quota; if not, it's an absolute amount.
36
5
4
2
2
*forward*
2
@untoad
36
5
4
13
2
Syntax:  @untoad <object> [as <name>,<alias>,<alias>...]
2

2
Synonym: @detoad
2

2
Turns the object into a player.  
2
If the name/alias... specification is given, the object is also renamed.
2
In order for this to work, the object must be a nonplayer descendant of $player and the new object name (or the original name if none is given in the command line) must be available for use as a player name.  As with ordinary player @renaming, any aliases which are unavailable for use as player names are eliminated.
2

2
If the object is a descendant of $guest, then it becomes a new guest character.
2
Otherwise the object is chowned to itself.  In the latter case, it is advisable to check that the .password property has something nontrivial in it.
2

2
If the object is a descendant of $prog, then its .programmer flag is set.
2
Note that the .wizard flag is not set under any circumstances.
36
5
4
26
2
*subst*
2
Syntax:  @toad   <player>  [graylist|blacklist|redlist]
2
         @toad!  <player>
2
         @toad!! <player>
2

2
Resets the player flag of <player> (thus causing <player> to be booted), resets the .programmer and .wizard flags, chowns the player object to $hacker, and removes all of its names and aliases from $player_db.
2

2
You must give either the player's full name or its object number.
2
Also, this command does not let you @toad yourself.
2

2
In some cases you may wish to add the player's last connected site to the site graylist, blacklist or redlist --- see `help blacklist' --- in order to invoke various kinds of blocking on that site (e.g., if player creation is enabled, you may want to enter the player on the blacklist to keep him from immediately creating a new character).  Specifying one of the listnames `graylist', `blacklist' or `redlist' will do this.
2

2
@toad!  <player>  is synonymous with  @toad <player> blacklist
2
@toad!! <player>  is synonymous with  @toad <player> redlist
2

2
There are messages that one may set to customize toading.  After all, a toading is (supposed to be) a rare event and you will doubtless want to put on a good show.  Thus we have
2

2
@toad  [%[$wiz.toad_msg]]
2
  Printed to everyone in the room in which the victim is being @toaded.
2
  If you're worried about accidentally toading yourself in the process of
2
  setting this message, see above.
2

2
@toad_victim  [%[$wiz.toad_victim_msg]]
2
  Printed to the victim.
2

2
These are pronoun_subbed with victim == dobj.
36
5
4
6
2
Syntax:  @grepcore <pattern>
2
         @who-calls <verbname>
2

2
@grepcore pattern is @grep pattern in {all core objects}.  Core objects are computed for you by #0:core_objects().
2

2
@who-calls greps for the verbname + "(", hoping to catch it as a verb call.  Currently @who-calls does not allow you to restrict the search as @grep does.  (Volunteers?)
36
5
4
2
2
*forward*
2
@grepcore
36
5
4
3
2
Syntax:  @abort-sh*utdown [<text>]
2

2
This aborts any shutdown currently in progress (i.e., set in motion by @shutdown).  All players are notified that no shutdown will actually occur; <text>, if given will be included in this notification.
36
5
4
5
2
Syntax:  @shutdown [in <m>] [<text>]
2

2
This is the friendly way to do a server shutdown; it arranges for the actual shutdown to take place `m' minutes hence (default two).  Shutdown is preceded by a sequence of warnings to all connected players.  Warnings are likewise given to all players who connect during this time.  <text>, if given is included in these warning messages, perhaps as an explanation for why the server is being shut down.
2

2
Shutdown may be aborted at any time by using @abort-shutdown.
36
5
4
16
2
*subst*
2
Syntax:  @programmer <player>
2

2
Sets the programmer flag on the indicated player and sends mail to $new_prog_log.  
2

2
If the player is not already a descendant of $prog, we @chparent him/her to $prog.  In this case, if $prog has a larger .ownership_quota than its ancestors, then we raise the player's quota by the difference between $prog.ownership_quota and the .ownership_quota of the common ancestor of player and $prog, be this $player or some intermediate class.
2

2
There are messages that one may set to customize how the granting of a programmer bit looks to the victim and to any onlookers.  After all, this is a seminal event in a MOOer's life...  Thus we have
2

2
@programmer  [%[$wiz.programmer_msg]]
2
  Printed to everyone in the room with the victim being @programmer'ed.
2

2
@programmer_victim  [%[$wiz.programmer_victim_msg]]
2
  Printed to the victim.
2

2
These are pronoun subbed with victim == dobj.
36
5
4
3
2
Syntax:  @shout <text>
2

2
Broadcasts the given text to all connected players.
36
5
4
14
2
Syntax:  @chown <object>            [to] <owner>
2
         @chown <object>.<propname> [to] <owner>
2
         @chown <object>:<verbname> [to] <owner>
2
         @chown# <object>:<verbnumber> [to] <owner>
2

2
Changes the ownership of the indicated object, property or verb.
2

2
Verb ownership changes are fairly straightforward, being merely a matter of changing the verb_info() on a single verb. Referring to a verb isn't as straightforward since two verbs on the same object can have the same name. So, @chown# is provided where you can refer to a verb by it's 1-based index in the output of the verbs() builtin.
2

2
Changing an object ownership includes changing the ownership on all +c properties on that object.  Note that @chown will not change the ownership of any other properties, nor will it change verb ownerships.  Use @grant if you need to do a more complete ownership change.  The quota of the former owner is increased by one, as is the quota of the new owner decreased by one.
2

2
Changing a property ownership is truly hairy.  If the property is +c one shouldnot be doing this, unless it is to correct a past injustice which caused the property to be owned by the wrong player.  In the case of -c properties, the property ownership is changed on all descendent objects (currently, if +c instances of a -c property are found in the traversal of all of the descendants, these are not changed, being deemed sufficiently weird that they should be handled on a case-by-case basis...).
2

2
If there's any justice, a future version of the server will prevent occurrences of (1) +c properties being owned by someone other than the object owner (2) -c properties with different owners on descendant objects (3) -c properties that are +c on some descendants.
36
5
4
2
2
*forward*
2
blacklist
36
5
4
18
2
Syntax:  @redlist   [<domain or subnet> [for <duration>] [commentary]]
2
         @blacklist [<domain or subnet> [for <duration>] [commentary]]
2
         @graylist  [<domain or subnet> [for <duration>] [commentary]]
2
         @spooflist [<domain or subnet> [for <duration>] [commentary]]
2

2
Syntax:  @unredlist   [<domain or subnet> [commentary]]
2
         @unblacklist [<domain or subnet> [commentary]]
2
         @ungraylist  [<domain or subnet> [commentary]]
2
         @unspooflist [<domain or subnet> [commentary]]
2

2
With no argument, the current contents of the corresponding list are printed.
2
Otherwise, the specified domain or subnet is added to or removed from the list and mail will be sent to $site_log.
2

2
To add a domain or subnet to a *list only temporarily, include a `for <duration>' statement before any commentary.  The <duration> should be in english form such as 1 day or 1 month 2 weeks or 1 year 3 months 2 weeks 4 days.  No commas should separate increments in the duration.  See `help $time_utils:parse_english_time_interval' for more details.  If you are not temporarily *listing a domain or subnet, but are including a commentary, be sure that the commentary does not start with the word `for'.
2

2
If the given domain or subnet has subdomains/subsubnets that are already on the list, you will be prompted as to whether you want to remove them.  Note that adding an entry for a particular domain or subnet effectively adds all subdomains/subsubnets, so unless there's some reason for keeping an explicit entry for a particular subdomain, chances are you will indeed want to remove them.  One reason to keep an explicit entry for a subdomain would be if you intended to unlist the full domain later but wanted to be sure you didn't unlist the subdomain in the process.
2

2
See `help blacklist' for a description of the functions of these lists.
36
5
4
2
2
*forward*
2
@blacklist
36
5
4
2
2
*forward*
2
@blacklist
36
5
4
9
2
Syntax:  @make-guest <adjective>
2

2
This creates a new guest character.  For example,
2
  @make-guest Loud
2
creates a child of $guest, owned by $hacker, named Loud_Guest and with aliases Loud and Loud_Guest.
2

2
Note that in order to have `connect guest' connect to a guest character, there needs to exist some guest character having "Guest" as a name or alias.
2

2
See also `help @make-player'.
36
5
4
2
2
*forward*
2
@blacklist
36
5
4
2
2
*forward*
2
blacklist
36
5
4
11
2
@make-player name [email-address [commentary]]
2
Creates a player.
2
Generates a random password for the player.
2
Email-address is stored in $registration_db and on the player object.
2
Comments should be enclosed in quotes.
2

2
Example: @make-player George sanford@frobozz.com "George shares email with Fred Sanford (Fred #5461)"
2

2
If the email address is already in use, prompts for confirmation.  If the name is already in use, prompts for confirmation.  (Say no, this is a bug: it will break if you say yes.)  If you say no at one of the confirming prompts, character is not made.
2

2
If network is enabled (via $network.active) then asks if you want to mail the password to the user after character is made.
36
5
4
5
2
Information about $wizard:@register
2
----
2
Registers a player.
2
Syntax:  @register name email-address [additional commentary]
2
Email-address is stored in $registration_db and on the player object.
36
5
4
4
2
@new-password player is [password]
2
Sets a player's password; omit password string to have one randomly generated.  Prints the encrypted old string when done for error recovery.  [No current software will allow you to give the encrypted string as input.]
2

2
Offers to send mail to the user with the new password, if the user has a registered email address and the network is enabled.
36
5
4
5
2
Information about $wiz:@deprog*rammer
2
----
2
@deprogrammer victim [for <duration>] [reason]
2

2
Removes the prog-bit from victim.  If a duration is specified (see help $time_utils:parse_english_time_interval), then the victim is put into the temporary list. He will be automatically removed the first time he asks for a progbit after the duration expires.  Either with or without the duration you can specify a reason, or you will be prompted for one. However, if you don't have a duration, don't start the reason with the word `For'.
36
5
4
3
2
If you are a wizard, '@forked' with no arguments will spam you with all the forked tasks that there are (this is useful sometimes, but it's nice to know ahead of time).
2

2
To see just your own, type '@forked me'.  To see just one player's, type '@forked <player>'.
36
5
4
9
2
You probably want to subscribe to (or at least be familiar with) the following mailing lists:
2

2
*Player-Creation-Log
2
*New-Prog-Log
2
*Quota-Log
2
*News
2
*Site-Locks
2
*Password-Change-Log
2

36
5
4
9
2
Information about generic wizard(#218):@grant/@grants*/@transfer
2
----
2
@grant <object> to <player>
2
@grants <object> to <player>   --- same as @grant but may suspend.
2
@transfer <expression> to <player> -- like 'grant', but evalutes a possible list of objects to transfer.
2

2
Ownership of the object changes as in @chown and :set_owner (i.e., .owner and all c properties change).  In addition all verbs and !c properties owned by the original owner change ownership as well.  Finally, for !c properties, instances on descendant objects change ownership (as in :set_property_owner).
2

2
This verb does the transfer whether the recipient has enough quota for it or not.
36
5
4
5
2
For information about how the help system itself works and about how to associate local help databases with specific rooms or player classes, see `help $help'.
2

2
To get a list of the object numbers associated with various $help databases, type 'help index'.
2

2
If you need to modify existing help text, and need to find which help database the relevant property is defined on, use 'help full-index'.  (Note, it's spammy, but tells you what you need to know.)
36
5
4
7
2
Other topics of interest to wizards:
2

2
$login
2
$guest_log
2
$no_one
2
$recycler
2
$help
36
5
4
5
2
Information about $wiz:@temp-newt
2
----
2
@temp-newt victim [for duration] [reason]
2

2
Temporarily newts victim.  If a duration is specified (see help $time_utils:parse_english_time_interval), then the victim is put into the temporary list. E will be automatically removed the first time e tries to connect after the duration expires.  You will be prompted for a reason for the newting, but as of this writing, specifying a reason from the command line isn't an option.
36
5
4
1
2
To look at where a player is currently connecting from, use @netwho.  To see previous connect sites, look at <player>.all_connect_places.
36
5
4
7
2
General procedure:
2

2
  Make sure e doesn't own anything.
2
  @toad em
2
  @recycle em
2

2
It makes a real mess if you don't clean up .owned_objects.  See $wiz_utils:initialize_owned, but note, running this verb takes maybe three hours (at last report) and adds to lag.  This is why we frown so severely on leaving blood on the carpet.
36
5
4
9
2
Some wizards choose not to be among those listed when a player types '@wizards' (or similar).
2

2
The property $wiz.advertised defaults to 1; set it to 0 to remove yourself from the list.
2

2
To keep your non-wizard character off the list, set your wizard character's .public_identity character to 0.  To get it back on, set .public_identity to the object number of your non-wizard character.
2

2
$wiz_utils:is_wizard returns true for the wizard and the corresponding .public_identity player.  Both will likewise appear in $wiz_utils:connected_wizards_unadvertised() and $wiz_utils:all_wizards_unadvertised().
2

2
:is_wizard is for checking permissions on wizard feature-objects and the like, while :all/connected_wizards_unadvertised wouble be for things like wizard-shouts (e.g., the one issued by $player:recycle).
36
5
4
12
2
*subst*
2
To add a news item:
2

2
Send regular mail to *news with the message you want in the news.  Then:
2

2
  @addnews <message-number> to %[tostr($news)]
2

2
To remove a news item:
2

2
  @rmnews <message-number> from %[tostr($news)]
2

2
Note, the message date doesn't show up, so you might consider adding a date to the message body itself.
36
5
4
29
2
There are a number of routine daily or weekly tasks that can help keep your MOO clean or otherwise well-maintained.
2

2

2
$byte_quota_utils:schedule_measurement_task
2
        If you are using byte quota, this will schedule your quota measurement task.  Every night, every item on the moo which has not been measured in the last $byte_quota_utils.cycle_days will be measured.  A report will be mailed to $byte_quota_utils.report_recipients.  You may wish to edit this verb to change the time that it runs---it will run at midnight PST.
2

2
$wiz_utils:expire_mail_weekly
2
        If you wish to expire old mail from users and mailing lists, run this verb.  Once a week (scheduled from the first time you type ;$wiz_utils:expire_mail_weekly(), not at a particular hour) it will go through and expire mail based on players' @mail-options settings.
2

2
$wiz_utils:flush_editors
2
        Once a week this will remove all sessions which were begun more than 30 days ago in the note, verb, and mail editors.  Schedule is from when first typed.
2

2
$paranoid_db:semiweeklyish
2
        This will go through the @paranoid database and remove entries for players who have not connected within the past three days, and for those users who have turned off the @paranoid function.  Schedule is at 11pm PST.
2

2
$login:sample_lag
2
        This will provide an estimate of the CPU portion of what is normally called "lag"---that is, the delay between entering a command and having that command fulfilled.
2

2
$housekeeper:continuous
2
        If you wish to provide players with the ability to have individual items transported to a known starting location, use this verb.
2

2

2
Additionally, there are tasks that you don't have to start manually, but which get started by various actions in the MOO.
2

2
$network:add_queued_mail
2
        This indicates that there was a temporary failure to deliver email.  If this task is constantly in the queue, it is worth checking $network.queued_mail, deleting those which will never be delivered.  Queued mail does not expire.
2

2
$housekeeper:move_players_home
2
        This task is used to consolidate the tasks spawned by disconnecting players---they get a 5 minute grace period to log back in before they are moved back home.
36
5
4
2
2
*forward*
2
@chown
36
5
4
2
2
*forward*
2
@grep
36
5
4
2
2
*forward*
2
@grep
36
5
5
36
5
4
1
2
wiz-index
36
1
5
36
4
4
1
2
Wizard Help
36
5
4
1
2
This describes the various commands available on $wiz.
36
5
4
2
0
31466
0
1084848672
36
1
#24
Wizard Utilities

16
2
-1
-1
-1
78
-1
27
42
set_programmer
2
173
-1
set_player
2
173
-1
set_owner
2
173
-1
set_property_owner
2
173
-1
unset_player
2
173
-1
set_property_flags
2
173
-1
_set_property_flags
2
173
-1
random_password
2
173
-1
queued_tasks
2
173
-1
isnewt
2
173
-1
initialize_owned
2
173
-1
verify_owned_objects
2
173
-1
connected_wizards connected_wizards_unadvertised
36
173
-1
all_wizards_advertised all_wizards all_wizards_unadvertised
36
173
-1
rename_all_instances
2
173
-1
missed_help
2
173
-1
show_missing_help
2
173
-1
init_for_core
2
173
-1
show_netwho_listing
2
173
-1
show_netwho_from_listing
2
173
-1
check_player_request check_reregistration
2
173
-1
make_player
2
173
-1
send_new_player_mail
2
173
-1
do_make_player
2
93
-2
do_register
2
173
-1
do_new_password
2
173
-1
set_owner_new
2
173
-1
boot_idlers
2
173
-1
grant_object
2
173
-1
connection_hash
2
173
-1
newt_player
2
173
-1
unset_programmer
2
173
-1
is_wizard
36
173
-1
expire_mail
2
13
-1
expire_mail_weekly
2
173
-1
check_prog_restricted
2
173
-1
expire_mail_players
2
173
-1
expire_mail_lists
2
173
-1
flush_editors
2
173
-1
random_wizard
2
173
-1
set_email_address
2
173
-1
get_email_address
2
173
-1
21
default_programmer_quota
default_player_quota
missed_help_strings
missed_help_counters
record_missed_help
programmer_restricted
boot_task
boot_exceptions
programmer_restricted_temp
suicide_string
next_perm_index
wizards
old_task_perms_user
expiration_progress
system_chars
new_core_message
chparent_restricted
rename_restricted
change_password_restricted
expiration_recipient
registration_domain_restricted
26
0
7
2
5
0
7
2
5
4
0
2
1
4
0
2
1
0
0
2
5
4
0
2
5
0
585440461
2
5
4
0
2
5
4
0
2
5
2
You don't *really* want to commit suicide, do you?
2
5
0
1
2
5
4
1
1
2
2
5
4
1
1
8060
2
5
1
-1
2
5
4
3
1
36
1
38
1
71
2
5
4
145
2
Getting Started with your LambdaCore MOO
2
========================================
2

2
Thank you for choosing LambdaCore!
2

2
Initial Setup Notes
2
-------------------
2

2
The "welcome" screen, seen when a player connects.
2
  -- this is stored in $login.welcome_message
2

2
Do you want on-line character creation?
2
  -- this is stored in $login.create_enabled
2
     for more detailed information, edit $login:player_creation_enabled
2

2
Do you want to limit the number of players on the MOO at once?
2
  -- look at $login.max_connections
2
     the `connection_limit' message on $login is the message printed
2
     when this limit is reached.
2

2
Do you want a different default player class?
2
  -- set $player_class to a different value
2
     *do not* change $player
2

2
You should also set the following:
2
  $network.postmaster
2
    -- your email address, or the email address of the person who will 
2
       handle your email
2
  $network.site
2
    -- the machine your MOO is running on (e.g. "lambda.moo.mud.org")
2
  $network.port
2
    -- the port your MOO is running on (e.g. 8888)
2
  $network.MOO_Name
2
    -- the name of your MOO (e.g. "LambdaMOO")
2
  $site_db.domain
2
  -- this is set to the `domain' of your address
2
     (eg `foo.com' for `moo.foo.com')
2

2
If you compiled the server with open_network_connection() enabled (allowing the MOO to open up connections with other computers on the network), then you should set
2
  $network.active = 1
2
     This will enable @newpassword, @registerme, @password, @mailme, @netforward, and others to send mail from the MOO.
2

2
-------------------------------------------------------------------
2

2
Setting Yourself Up
2
-------------------
2

2
Set a password for yourself.
2
  -- @password <new-password>
2

2
Set a description for yourself.
2
  -- @describe me as <anything>
2

2
Set a gender for yourself.
2
  -- @gender <gender>
2

2
There are, also, a large number of messages you can set on yourself.  Setting them will enhance the virtual reality.
2

2
-------------------------------------------------------------------
2

2
About Guests
2
------------
2

2
To make a new Guest character:
2
  -- @make-guest <guestname>
2
     will make a new guest with the name you specify with `_Guest' appended
2
     and some other standard but useful aliases
2

2
This is the easiest way to make Guest characters.  The most important things to remember about Guests, if you want to make them yourself, are:
2
  -- make them owned by nonwizards, and not owned by themselves
2
  -- make sure they've got .password == 0, and that .password is nonclear
2
  -- at least one Guest must always be named `Guest'; this can be an alias
2

2
To set the default description and gender for a guest:
2
  -- set .default_description to the description the guest should start with
2
  -- set .default_gender to the gender the guest should start with
2
  -- remember to set .description and .gender too, for the guest's first use
2

2
-------------------------------------------------------------------
2

2
Adding to the Newspaper
2
-----------------------
2

2
The newspaper is a special mailing list.  To add a post to the newspaper, send mail to it (as *News or $news), and then note the number of your post (let's call it <x> and:
2
  -- @addnews <x> to *News
2
... in general, `@addnews $ to *News' will work as well.
2

2
-------------------------------------------------------------------
2

2
Quota
2
-----
2

2
By default, LambdaCore runs with byte-based quota, an in-DB quota system, limiting users by total database space as opposed to total objects.  You'll need to do two things:
2
  -- decide on the default quota:
2
     ;$byte_quota_utils.default_quota[1] = <a number of bytes>
2
  -- start the measurement task; see `help routine_tasks' for more information (Note: this help topic contains information about more than just the quota task; it should be read regardless of how quota is set).
2

2
If you prefer the quota system documented in the LambdaMOO Programmer's Manual, directly supported by the server, you can enable object-based quota:
2
  -- set $quota_utils to $object_quota_utils
2

2
It's best that you make this switch before users start, because converting existing users is an awkward (and inherently arbitrary and political) move.
2

2
-------------------------------------------------------------------
2

2
Making Programmers
2
------------------
2

2
The command to turn someone into a programmer is `@programmer'  Its syntax is `@programmer <user>'.  For example:
2
  -- @programmer Haakon
2
The `@programmer' verb will prompt you if the user isn't set up with a description and a gender.
2

2
No code to automatically grant programmer bits is included with LambdaCore.
2

2
Making Wizards
2
--------------
2

2
THINK CAREFULLY.
2

2
Be very careful before giving someone a wizard bit.  That person can do gross damage to your database, and fixable but serious damage to the machine it runs on.  That person can quite possibly open outbound network connections from your machine, and thus commit acts for which your host system will be blamed.  That person can ruin your MOO's as-yet-untarnished reputation.
2

2
Wizards have technical power, the ability to change anything within the database, to create anything within the database.  Be careful with the idea of a `Social Wizard' -- a nontechnical person holding a wizard bit is fairly likely to, at some point, accidentally do something destructive.  It's a good idea not to socialize as your wizard character, for the same reason, to make it less likely to be accidentally destructive.
2

2
That said, in general you don't turn an existing character into a wizard, you make a -new- character to be the wizard.  This is because the existing character probably owns code and objects which could be destructive if suddenly made wizardly; it's a good security measure to make a fresh player.  So, to make a fresh player:
2
  -- @make-player (see `help @make-player' for more information)
2
     this will make you a new player. for this example, #123
2

2
To make #123 a wizard:
2
  -- @programmer #123
2
     (a nonprogrammer wizard is a truly strange beast)
2
  -- ;#123.wizard = 1;
2
  -- @chparent #123 to $wiz
2
  -- ;#123.public_identity = <the player's nonwizard character's object number>
2

2
-------------------------------------------------------------------
2

2
Good luck with your new LambdaCore database!
2

2
Visit us at LambdaMOO: lambda.moo.mud.org 8888
2

2
Join the international mailing list for MOO coders: send an email message to moo-cows-request@the-b.org with the word `subscribe' as the body of your message.
2

2
Do good things.
2

2
The LambdaMOO Wizards
2
[authored February 15, 1999]
2
1
4
0
2
0
4
0
36
0
4
0
2
0
4
1
1
2
2
5
0
0
2
5
4
36
2
Wizard Utilities
2
----------------
2
The following functions are substitutes for various server builtins.
2
Anytime one feel tempted to use one of the expressions on the right,
2
use the corresponding one on the left instead.  This will take care
2
of various things that the server (for whatever reason) does not handle.
2

2
:set_programmer(object)             object.programmer = 1;
2
    chparent object to $prog
2
    send mail to $prog_log
2

2
:set_player(object[,nochown])       set_player_flag(object,1);
2
    set player flag, 
2
    add name/aliases to $player_db,
2
    and maybe do a self chown.
2

2
:unset_player(object[,newowner])    set_player_flag(object,0);
2
    unset player flag,
2
    remove name/aliases from $player_db
2
    chown to newowner if given
2

2
:set_owner(object, newowner)        object.owner = newowner;
2
    change ownership on object
2
    change ownership on all +c properties
2
    juggle .ownership_quotas
2

2
:set_property_owner(object, property, newowner[, suspend-ok])
2
    change owner on a given property
2
    if this is a -c property, we change the owner on all descendants
2
    for which this is also a -c property.
2
    Polite protest if property is +c and newowner != object.owner.
2

2
:set_property_flags(object, property, flags[, suspend-ok])
2
    change the permissions on a given property and propagate these to 
2
    *all descendants*.  property ownership is changed on descendants 
2
    where necessary.
2
5
5
2
4
4
1
2
Wizard Utilities
2
5
4
1
2
This is the Wizard Utilities utility package.  See `help $wiz_utils' for more details.
2
5
4
2
0
55744
0
1084848672
36
1
#25
Site DB

0
36
-1
-1
-1
37
-1
39
11
find* _only* _every*
36
173
-1
add
36
173
-1
load
2
173
-1
domain_literal
36
173
-1
init_for_core
2
173
-1
prune_alpha
2
173
-1
report_prune_progress
2
173
-1
prune_fixup
2
173
-1
prune_numeric
2
173
-1
schedule_prune
2
173
-1
prune_reset
2
173
-1
8
domain
prune_progress
prune_stop
total_pruned_people
total_pruned_sites
prune_task
alphabet
 l
15
2
localdomain
36
1
2
aaa
36
4
2
zzz
36
5
0
0
36
5
0
0
36
5
0
298000796
36
5
2
abcdefghijklmnopqrstuvwxy0123456789_z
36
5
4
4
2
ocal
2

4
2
2
localdomain
2
localhost.localdomain
4
2
4
1
2
localhost
4
1
1
2
36
0
2

36
5
5
36
1
4
4
2

2
l
4
0
4
0
36
0
0
0
36
4
4
3
2
sitedb
2
site
2
db
36
5
4
2
2
This object holds a db of places from which players have connected (see `help $site_db').
2
The site blacklist and the graylist live as well (see `help blacklist').
36
5
4
2
0
13167
0
1084848672
36
1
#26
Math Utilities

16
36
-1
-1
-1
78
-1
43
43
xsin
36
173
-1
xcos
36
173
-1
factorial
36
173
-1
pow
36
173
-1
fibonacci
36
173
-1
geometric
36
173
-1
divmod
36
173
-1
combinations
36
173
-1
permutations
36
173
-1
simpson
36
173
-1
parts
36
173
-1
sqrt
36
173
-1
div
36
173
-1
mod
36
173
-1
exp
36
173
-1
aexp
36
173
-1
random
36
173
-1
random_range
36
173
-1
is_prime
36
173
-1
AND XOR
36
173
-1
OR
36
173
-1
NOT
36
173
-1
BLFromInt
36
173
-1
IntFromBL
36
173
-1
gcd greatest_common_divisor
36
173
-1
lcm least_common_multiple
36
173
-1
are_rel_prime are_relatively_prime
36
173
-1
base_conversion
36
173
-1
norm
36
173
-1
sin
36
173
-1
cos
36
173
-1
tan
36
173
-1
arcsin asin
36
173
-1
arccos acos
36
173
-1
arctan atan
36
173
-1
deg2rads deg2rad
36
173
-1
rads2deg rad2deg
36
173
-1
precision
36
173
-1
round
36
173
-1
mean average
36
173
-1
sum_float
36
173
-1
sum_int sum
36
173
-1
rint
36
173
-1
12
base_alphabet
tangents
factor
taylor
and
xor
sines
pi
piscale
phi
e
e_string
17
2
0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz
36
5
4
45
0
174
0
349
0
524
0
699
0
874
0
1051
0
1227
0
1405
0
1583
0
1763
0
1943
0
2125
0
2308
0
2493
0
2679
0
2867
0
3057
0
3249
0
3443
0
3639
0
3838
0
4040
0
4244
0
4452
0
4663
0
4877
0
5095
0
5317
0
5543
0
5773
0
6008
0
6248
0
6494
0
6745
0
7002
0
7265
0
7535
0
7812
0
8097
0
8390
0
8692
0
9004
0
9325
0
9656
0
10000
36
5
0
10000
36
5
0
100
36
5
4
16
4
16
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
4
16
0
0
0
1
0
0
0
1
0
0
0
1
0
0
0
1
0
0
0
1
0
0
0
1
0
0
0
1
0
0
0
1
4
16
0
0
0
0
0
2
0
2
0
0
0
0
0
2
0
2
0
0
0
0
0
2
0
2
0
0
0
0
0
2
0
2
4
16
0
0
0
1
0
2
0
3
0
0
0
1
0
2
0
3
0
0
0
1
0
2
0
3
0
0
0
1
0
2
0
3
4
16
0
0
0
0
0
0
0
0
0
4
0
4
0
4
0
4
0
0
0
0
0
0
0
0
0
4
0
4
0
4
0
4
4
16
0
0
0
1
0
0
0
1
0
4
0
5
0
4
0
5
0
0
0
1
0
0
0
1
0
4
0
5
0
4
0
5
4
16
0
0
0
0
0
2
0
2
0
4
0
4
0
6
0
6
0
0
0
0
0
2
0
2
0
4
0
4
0
6
0
6
4
16
0
0
0
1
0
2
0
3
0
4
0
5
0
6
0
7
0
0
0
1
0
2
0
3
0
4
0
5
0
6
0
7
4
16
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
8
0
8
0
8
0
8
0
8
0
8
0
8
0
8
4
16
0
0
0
1
0
0
0
1
0
0
0
1
0
0
0
1
0
8
0
9
0
8
0
9
0
8
0
9
0
8
0
9
4
16
0
0
0
0
0
2
0
2
0
0
0
0
0
2
0
2
0
8
0
8
0
10
0
10
0
8
0
8
0
10
0
10
4
16
0
0
0
1
0
2
0
3
0
0
0
1
0
2
0
3
0
8
0
9
0
10
0
11
0
8
0
9
0
10
0
11
4
16
0
0
0
0
0
0
0
0
0
4
0
4
0
4
0
4
0
8
0
8
0
8
0
8
0
12
0
12
0
12
0
12
4
16
0
0
0
1
0
0
0
1
0
4
0
5
0
4
0
5
0
8
0
9
0
8
0
9
0
12
0
13
0
12
0
13
4
16
0
0
0
0
0
2
0
2
0
4
0
4
0
6
0
6
0
8
0
8
0
10
0
10
0
12
0
12
0
14
0
14
4
16
0
0
0
1
0
2
0
3
0
4
0
5
0
6
0
7
0
8
0
9
0
10
0
11
0
12
0
13
0
14
0
15
36
5
4
16
4
16
0
0
0
1
0
2
0
3
0
4
0
5
0
6
0
7
0
8
0
9
0
10
0
11
0
12
0
13
0
14
0
15
4
16
0
1
0
0
0
3
0
2
0
5
0
4
0
7
0
6
0
9
0
8
0
11
0
10
0
13
0
12
0
15
0
14
4
16
0
2
0
3
0
0
0
1
0
6
0
7
0
4
0
5
0
10
0
11
0
8
0
9
0
14
0
15
0
12
0
13
4
16
0
3
0
2
0
1
0
0
0
7
0
6
0
5
0
4
0
11
0
10
0
9
0
8
0
15
0
14
0
13
0
12
4
16
0
4
0
5
0
6
0
7
0
0
0
1
0
2
0
3
0
12
0
13
0
14
0
15
0
8
0
9
0
10
0
11
4
16
0
5
0
4
0
7
0
6
0
1
0
0
0
3
0
2
0
13
0
12
0
15
0
14
0
9
0
8
0
11
0
10
4
16
0
6
0
7
0
4
0
5
0
2
0
3
0
0
0
1
0
14
0
15
0
12
0
13
0
10
0
11
0
8
0
9
4
16
0
7
0
6
0
5
0
4
0
3
0
2
0
1
0
0
0
15
0
14
0
13
0
12
0
11
0
10
0
9
0
8
4
16
0
8
0
9
0
10
0
11
0
12
0
13
0
14
0
15
0
0
0
1
0
2
0
3
0
4
0
5
0
6
0
7
4
16
0
9
0
8
0
11
0
10
0
13
0
12
0
15
0
14
0
1
0
0
0
3
0
2
0
5
0
4
0
7
0
6
4
16
0
10
0
11
0
8
0
9
0
14
0
15
0
12
0
13
0
2
0
3
0
0
0
1
0
6
0
7
0
4
0
5
4
16
0
11
0
10
0
9
0
8
0
15
0
14
0
13
0
12
0
3
0
2
0
1
0
0
0
7
0
6
0
5
0
4
4
16
0
12
0
13
0
14
0
15
0
8
0
9
0
10
0
11
0
4
0
5
0
6
0
7
0
0
0
1
0
2
0
3
4
16
0
13
0
12
0
15
0
14
0
9
0
8
0
11
0
10
0
5
0
4
0
7
0
6
0
1
0
0
0
3
0
2
4
16
0
14
0
15
0
12
0
13
0
10
0
11
0
8
0
9
0
6
0
7
0
4
0
5
0
2
0
3
0
0
0
1
4
16
0
15
0
14
0
13
0
12
0
11
0
10
0
9
0
8
0
7
0
6
0
5
0
4
0
3
0
2
0
1
0
0
36
5
4
361
0
175
0
349
0
523
0
698
0
872
0
1045
0
1219
0
1392
0
1564
0
1736
0
1908
0
2079
0
2250
0
2419
0
2588
0
2756
0
2924
0
3090
0
3256
0
3420
0
3584
0
3746
0
3907
0
4067
0
4226
0
4384
0
4540
0
4695
0
4848
0
5000
0
5150
0
5299
0
5446
0
5592
0
5736
0
5878
0
6018
0
6157
0
6293
0
6428
0
6561
0
6691
0
6820
0
6947
0
7071
0
7193
0
7314
0
7431
0
7547
0
7660
0
7771
0
7880
0
7986
0
8090
0
8192
0
8290
0
8387
0
8480
0
8572
0
8660
0
8746
0
8829
0
8910
0
8988
0
9063
0
9135
0
9205
0
9272
0
9336
0
9397
0
9455
0
9511
0
9563
0
9613
0
9659
0
9703
0
9744
0
9781
0
9816
0
9848
0
9877
0
9903
0
9925
0
9945
0
9962
0
9976
0
9986
0
9994
0
9998
0
10000
0
9998
0
9994
0
9986
0
9976
0
9962
0
9945
0
9925
0
9903
0
9877
0
9848
0
9816
0
9781
0
9744
0
9703
0
9659
0
9613
0
9563
0
9511
0
9455
0
9397
0
9336
0
9272
0
9205
0
9135
0
9063
0
8988
0
8910
0
8829
0
8746
0
8660
0
8572
0
8480
0
8387
0
8290
0
8192
0
8090
0
7986
0
7880
0
7771
0
7660
0
7547
0
7431
0
7314
0
7193
0
7071
0
6947
0
6820
0
6691
0
6561
0
6428
0
6293
0
6157
0
6018
0
5878
0
5736
0
5592
0
5446
0
5299
0
5150
0
5000
0
4848
0
4695
0
4540
0
4384
0
4226
0
4067
0
3907
0
3746
0
3584
0
3420
0
3256
0
3090
0
2924
0
2756
0
2588
0
2419
0
2250
0
2079
0
1908
0
1736
0
1564
0
1392
0
1219
0
1045
0
872
0
698
0
523
0
349
0
175
0
0
0
-175
0
-349
0
-523
0
-698
0
-872
0
-1045
0
-1219
0
-1392
0
-1564
0
-1736
0
-1908
0
-2079
0
-2250
0
-2419
0
-2588
0
-2756
0
-2924
0
-3090
0
-3256
0
-3420
0
-3584
0
-3746
0
-3907
0
-4067
0
-4226
0
-4384
0
-4540
0
-4695
0
-4848
0
-5000
0
-5150
0
-5299
0
-5446
0
-5592
0
-5736
0
-5878
0
-6018
0
-6157
0
-6293
0
-6428
0
-6561
0
-6691
0
-6820
0
-6947
0
-7071
0
-7193
0
-7314
0
-7431
0
-7547
0
-7660
0
-7771
0
-7880
0
-7986
0
-8090
0
-8192
0
-8290
0
-8387
0
-8480
0
-8572
0
-8660
0
-8746
0
-8829
0
-8910
0
-8988
0
-9063
0
-9135
0
-9205
0
-9272
0
-9336
0
-9397
0
-9455
0
-9511
0
-9563
0
-9613
0
-9659
0
-9703
0
-9744
0
-9781
0
-9816
0
-9848
0
-9877
0
-9903
0
-9925
0
-9945
0
-9962
0
-9976
0
-9986
0
-9994
0
-9998
0
-10000
0
-9998
0
-9994
0
-9986
0
-9976
0
-9962
0
-9945
0
-9925
0
-9903
0
-9877
0
-9848
0
-9816
0
-9781
0
-9744
0
-9703
0
-9659
0
-9613
0
-9563
0
-9511
0
-9455
0
-9397
0
-9336
0
-9272
0
-9205
0
-9135
0
-9063
0
-8988
0
-8910
0
-8829
0
-8746
0
-8660
0
-8572
0
-8480
0
-8387
0
-8290
0
-8192
0
-8090
0
-7986
0
-7880
0
-7771
0
-7660
0
-7547
0
-7431
0
-7314
0
-7193
0
-7071
0
-6947
0
-6820
0
-6691
0
-6561
0
-6428
0
-6293
0
-6157
0
-6018
0
-5878
0
-5736
0
-5592
0
-5446
0
-5299
0
-5150
0
-5000
0
-4848
0
-4695
0
-4540
0
-4384
0
-4226
0
-4067
0
-3907
0
-3746
0
-3584
0
-3420
0
-3256
0
-3090
0
-2924
0
-2756
0
-2588
0
-2419
0
-2250
0
-2079
0
-1908
0
-1736
0
-1564
0
-1392
0
-1219
0
-1045
0
-872
0
-698
0
-523
0
-349
0
-175
0
0
0
175
36
5
9
3.141592653589793116
36
5
9
0.008726646259971640798
36
5
9
1.618033988749894903
36
5
9
2.718281828459049976
36
5
2
2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251019
36
5
4
56
2
Trigonometric/Exponential functions:
2
  sin(a),cos(a),tan(a) -- returns 10000*(the value of the corresponding
2
       trigonometric function) angle a is in degrees.
2
  arctan([x,]y) -- returns arctan(y/x) in degrees in the range -179..180.
2
       x defaults to 10000.  Quadrant is that of (x,y).
2
  exp(x[,n]) -- calculates e^x with an nth order taylor polynomial
2
  aexp(x) -- calculates 10000 e^(x/10000)
2

2
Statistical functions:
2
  combinations(n,r) -- returns the number of combinations given n objects
2
       taken r at a time.
2
  permutations(n,r) -- returns the number of permutations possible given
2
       n objects taken r at a time.
2

2
Number decomposition:
2
  div(n,d) -- correct version of / (handles negative numbers correctly)
2
  mod(n,d) -- correct version of % (handles negative numbers correctly)
2
  divmod(n,d) -- {div(n,d),mod(n,d)}
2
  parts(n,q[,i]) -- returns a list of two elements {integer,decimal fraction}
2

2
Other math functions:
2
  sqrt(x)      -- returns the largest integer n <= the square root of x
2
  pow(x,n)     -- returns x^n
2
  factorial(x) -- returns x!
2
  norm(a,b,c,d,...) -- returns sqrt(a^2+b^2+c^2+...)
2
  sum(a,b,c,d,...) -- returns the sum of all arguments.
2

2
Series:
2
  fibonacci(n) -- returns the 1st n fibonacci numbers in a list
2
  geometric(x,n) -- returns the value of the nth order geometric series at x
2

2
Integer Properties:
2
  gcd(a,b) -- find the greatest common divisor of the two numbers
2
  lcm(a,b) -- find the least common multiple of the two numbers
2
  are_relatively_prime(a,b) -- return 1 if a and b are relatively prime
2
  is_prime(n) -- returns 1 if the number is a prime and 0 otherwise
2
  
2
Miscellaneous:
2
  random(n) -- returns a random number from 0..n if n > 0 or n..0 if n < 0
2
  random_range(n[,mean]) -- returns a random number from mean - n..mean + n
2
      with mean defaulting to 0
2
  simpson({a,b},{f(a),f((a+b)/2),f(b)}) -- returns the numerical
2
      approximation of an integral using simpson's rule
2
  base_conversion(num|string, oldbase, newbase [,sens]) -- converts the number
2
      given as first arg from oldbase to the newbase.
2

2
Bitwise Arithmetic:
2
  AND(x,y) -- returns x AND y
2
  OR(x,y) -- returns x OR y
2
  XOR(x,y) -- returns x XOR y (XOR is the exclusive-or function)
2
  NOT(x) -- returns the complement of x
2
      All bitwise manipulation is of 32-bit values.
2

2
Bitwise Conversions:
2
  BlFromInt(d) -- converts a decimal number d to a list of 1's and 0's, 32-bit
2
  IntFromBl(b) -- converts a list of 1's and 0's (any precision) to decimal
36
5
5
36
4
4
4
2
Math Utilities
2
Math_Utils
2
trigonometric utilites
2
trig_utils
36
5
4
1
2
This is the Math Utilities utility package.  See `help $math_utils' for more details.
36
5
4
2
0
36400
0
1084848672
36
1
#27
Set Utilities

16
36
-1
-1
-1
78
-1
41
8
union
36
173
-1
intersection
36
173
-1
diff*erence
36
173
-1
contains
36
173
-1
exclusive_or xor
36
173
-1
difference_suspended diff_suspended
36
173
-1
equal
36
173
-1
intersection_preserve_case
36
173
-1
0
5
4
22
2
This object is useful for operations that treat lists as sets (i.e.,
2
without concern about order and assuming no duplication).
2

2
 union(set, set, ...)        => union
2
 intersection(set, set, ...) => intersection
2
 intersection_preserve_case(base set, set, set, ...)
2
        => intersection with the case of the base set's elements preserved
2

2
 diff*erence(set1, set2, ..., setn)
2
        => result of removing all elements of sets 2..n from set 1.
2

2
 difference_suspended(set1, set2, ..., setn)
2
        => same as above except it suspends as needed.
2

2
 exclusive_or(set, set, set, ...)
2
        => all elements that are contained in exactly one of the sets
2

2
 contains(set1, set2, ..., setn)
2
        => true if and only if all of sets 2..n are subsets of set 1
2

2
 equal(set1, set2)
2
        => true if and only if set1 and set2 are equal
36
5
5
36
4
4
2
2
Set Utilities
2
set_utilities
36
5
4
1
2
This is the Set Utilities utility package.  See `help $set_utils' for more details.
36
5
4
2
0
5574
0
1084848672
36
1
#28
Builtin Function Help

16
36
-1
-1
-1
30
-1
23
0
129
match()
rmatch()
substitute()
sqrt()
server_log()
pass()
builtin-index
open_network_connection()
connection_name()
shutdown()
dump_database()
memory_usage()
reset_max_object()
renumber()
server_version()
output_delimiters()
callers()
kill_task()
queued_tasks()
read()
suspend()
task_id()
seconds_left()
ticks_left()
caller_perms()
set_task_perms()
eval()
boot_player()
notify()
idle_seconds()
connected_seconds()
connected_players()
set_player_flag()
is_player()
players()
set_verb_code()
verb_code()
delete_verb()
add_verb()
set_verb_args()
verb_args()
set_verb_info()
verb_info()
verbs()
delete_property()
add_property()
set_property_info()
property_info()
properties()
move()
max_object()
recycle()
children()
parent()
valid()
chparent()
create()
setremove()
setadd()
listset()
listdelete()
listinsert()
listappend()
strcmp()
rindex()
index()
crypt()
strsub()
length()
ctime()
time()
random()
abs()
max()
min()
toobj()
tonum()
tostr()
typeof()
clear_property()
is_clear_property()
set_connection_option()
queue_info()
is_member()
equal()
toliteral()
value_bytes()
acos()
asin()
atan()
binary_hash()
string_hash()
buffered_output_length()
call_function()
ceil()
connection_options()
connection_option()
sin()
cos()
tan()
sinh()
cosh()
tanh()
db_disk_size()
decode_binary()
disassemble()
encode_binary()
exp()
floatstr()
floor()
flush_input()
force_input()
function_info()
listen()
listeners()
log()
log10()
object_bytes()
raise()
resume()
task_stack()
tofloat()
toint()
trunc()
unlisten()
value_hash()
load_server_options()
verb_cache_stats()
log_cache_stats()
135
4
22
2
Syntax:  match (STR <subject>, STR <pattern> [, <case-matters>])  => LIST
2
         rmatch (STR <subject>, STR <pattern> [, <case-matters>])  => LIST
2

2
The function `match()' (`rmatch()') searches for the first (last) occurrence of the regular expression <pattern> in the string <subject>.  If <pattern> is syntactically malformed, then E_INVARG is raised. The process of matching can in some cases consume a great deal of memory in the server; should this memory consumption become excessive, then the matching process is aborted and E_QUOTA is raised.
2

2
If no match is found, the empty list is returned; otherwise, these functions return a list containing information about the match (see below).  By default, the search ignores upper/lower case distinctions.  If <case-matters> is provided and true, then case is treated as significant in all comparisons.
2

2
The list that `match()' (`rmatch()') returns contains the details about the match made.  The list is in the form:
2

2
     {<start>, <end>, <replacements>, <subject>}
2

2
where <start> is the index in STRING of the beginning of the match, <end> is the index of the end of the match, <replacements> is a list described below, and <subject> is the same string that was given as the first argument to the `match()' or `rmatch()'.
2

2
The <replacements> list is always nine items long, each item itself being a list of two numbers, the start and end indices in <subject> matched by some parenthesized sub-pattern of <pattern>.  The first item in <replacements> carries the indices for the first parenthesized sub-pattern, the second item carries those for the second sub-pattern, and so on.  If there are fewer than nine parenthesized sub-patterns in <pattern>, or if some sub-pattern was not used in the match, then the corresponding item in <replacements> is the list {0, -1}.  See the discussion of `%)' in `help regular-expressions', for more information on parenthesized sub-patterns.
2

2
   match("foo", "f*o")          =>  {1, 2, {{0, -1}, ...}, "foo"}
2
   match("foo", "fo*")          =>  {1, 3, {{0, -1}, ...}, "foo"}
2
   match("foobar", "o*b")       =>  {2, 4, {{0, -1}, ...}, "foobar"}
2
   rmatch("foobar", "o*b")      =>  {4, 4, {{0, -1}, ...}, "foobar"}
2
   match("foobar", "f%(o*%)b")  =>  {1, 4, {{2, 3}, {0, -1}, ...}, "foobar"}
2

2
See `help regular-expressions' for information on the syntax and semantics of patterns.
36
5
4
2
2
*forward*
2
match()
36
5
4
9
2
Syntax:  substitute (STR <template>, LIST <subs>)  => STR
2

2
Performs a standard set of substitutions on the string <template>, using the information contained in <subs>, returning the resulting, transformed <template>.  <Subs> should be a list like those returned by `match()' or `rmatch()' when the match succeeds.
2

2
In <template>, the strings `%1' through `%9' will be replaced by the text matched by the first through ninth parenthesized sub-patterns when `match()' or `rmatch()' was called.  The string `%0' in <template> will be replaced by the text matched by the pattern as a whole when `match()' or `rmatch()' was called. The string '%%' will be replaced by a single '%' sign. If '%' appears in <template> followed by any other character, E_INVARG will be raised.
2

2
     subs = match("*** Welcome to LambdaMOO!!!", "%(%w*%) to %(%w*%)");
2
     substitute("I thank you for your %1 here in %2.", subs)
2
             =>   "I thank you for your Welcome here in LambdaMOO."
36
5
4
3
2
Syntax:  sqrt (FLOAT <x>)  => FLOAT
2

2
Returns the square root of <x>.  If <x> is negative, then E_INVARG is raised.
36
5
4
3
2
Syntax:  server_log (STR <message> [, <is-error>])  => none
2

2
The text in <message> is sent to the server log.  If the programmer is not a wizard, then E_PERM is raised.  If <is-error> is provided and true, then <message> is marked in the server log as an error.
36
5
4
13
2
Syntax:  pass (<arg>, ...)   => value
2

2
Often, it is useful for a child object to define a verb that *augments* the behavior of a verb on its parent object. For example, the root object (an ancestor of every other object) defines a :description() verb that simply returns the value of `this.description'; this verb is used by the implementation of the `look' command. In many cases, a programmer would like the description of some object to include some non-constant part; for example, a sentence about whether or not the object was `awake' or `sleeping'.  This sentence should be added onto the end of the normal description.  The programmer would like to have a means of calling the normal `description' verb and then appending the sentence onto the end of that description.  The function `pass()' is for exactly such situations.
2

2
`Pass()' calls the verb with the same name as the current verb but as defined on the parent of the object that defines the current verb.  The arguments given to the called verb are the ones given to pass() and the returned value of the called verb is returned from the call to pass(). The initial value of `this' in the called verb is the same as in the calling verb.
2

2
Thus, in the example above, the child-object's :description() verb might have the following implementation:
2

2
    return pass(@args) + "  It is " + (this.awake ? "awake." | "sleeping.");
2

2
That is, it calls its parent's :description() verb and then appends to the result a sentence whose content is computed based on the value of a property on the object.
2

2
In the above example, `pass()' would have worked just as well, since :description() is not normally given any arguements.  However, it is a good idea to get into the habit of using `pass(@args)' rather than `pass(args[1])' or `pass()' even if the verb being pass()ed to is already known to take a set number of arguments or none at all.  For one thing, though the args may be irrelevant to the code that you've written, it may be that the corresponding verb on the parent has been rewritten to take additional arguments, in which case you will want your verb to continue to work...
36
5
4
2
2
*index*
2
Server Built-in Functions
36
5
4
13
2
Syntax:  open_network_connection (<value>, ... [, <listener>])   => obj
2

2
Establishes a network connection to the place specified by the arguments and more-or-less pretends that a new, normal player connection has been established from there.  The new connection, as usual, will not be logged in initially and will have a negative object number associated with it for use with `read()', `notify()', and `boot_player()'.  This object number is the value returned by this function.
2

2
If the programmer is not a wizard or if the `OUTBOUND_NETWORK' compilation option was not used in building the server, then `E_PERM' is raised.  If the network connection cannot be made for some reason, then other errors will be returned, depending upon the particular network implementation in use.
2

2
For the TCP/IP network implementations (the only ones as of this writing that support outbound connections), there must be at least two arguments, a string naming a host (possibly using the numeric Internet syntax) and an integer specifying a TCP port.  If a connection cannot be made because the host does not exist, the port does not exist, the host is not reachable or refused the connection, `E_INVARG' is raised.  If the connection cannot be made for other reasons, including resource limitations, then `E_QUOTA' is raised.
2

2
Beginning with version 1.8.3, an optional third argument may be supplied, `listener' must be an object, whose listening verbs will be called at appropriate points.  See the description in `listen()' for more details.
2

2
The outbound connection process involves certain steps that can take quite a long time, during which the server is not doing anything else, including responding to user commands and executing MOO tasks.  See the chapter on server assumptions about the database for details about how the server limits the amount of time it will wait for these steps to successfully complete.
2

2
It is worth mentioning one tricky point concerning the use of this function.  Since the server treats the new connection pretty much like any normal player connection, it will naturally try to parse any input from that connection as commands in the usual way.  To prevent this treatment, you should use `set_connection_option()' to set the `hold-input' option true on the connection.
36
5
4
17
2
Syntax:  connection_name (obj <player>)   => str
2

2
Returns a network-specific string identifying the connection being used by the given player.  If the programmer is not a wizard and not <player>, then E_PERM is raised.  If <player> is not currently connected, then E_INVARG is raised.
2

2
For the TCP/IP networking configurations, for in-bound connections, the string has the form
2

2
  "port <lport> from <host>, port <port>"
2

2
where <lport> is the listening port on which the connection arrived, <host> is either the name or decimal TCP address of the host to which the connection was opened, and <port> is the decimal TCP port of the connection on that host.
2

2
For the System V 'local' networking configuration, the string is the UNIX login name of the connecting user or, if no such name can be found, something of the form
2

2
  "User <#number>"
2

2
where <#number> is a UNIX numeric user ID.
2

2
For the other networking configurations, the string is the same for all connections and, thus, useless.
36
5
4
3
2
Syntax:  shutdown ([STR <message>])   => none
2

2
Requests that the server shut itself down at its next opportunity.  Before doing so, the given <message> is printed to all connected players.  If the programmer is not a wizard, then E_PERM is raised.
36
5
4
3
2
Syntax:  dump_database ()   => none
2

2
Requests that the server checkpoint the database at its next opportunity.  It is not normally necessary to call this function; the server automatically checkpoints the database at regular intervals; see the chapter on server assumptions about the database for details.  If the programmer is not a wizard, then E_PERM is raised.
36
5
4
17
2
Syntax:  memory_usage ()   => list
2

2
On some versions of the server, this returns statistics concerning the server
2
consumption of system memory.  The result is a list of lists, each in the
2
following format:
2

2
    {<block-size>, <nused>, <nfree>}
2

2
where <block-size> is the size in bytes of a particular class of memory
2
fragments, <nused> is the number of such fragments currently in use in the
2
server, and <nfree> is the number of such fragments that have been reserved
2
for use but are currently free.
2

2
On servers for which such statistics are not available, `memory_usage()'
2
returns `{}'.  The compilation option `USE_SYSTEM_MALLOC' controls
2
whether or not statistics are available; if the option is provided, statistics
2
are not available.
36
5
4
5
2
Syntax:  reset_max_object ()   => none
2

2
The server's idea of the highest object number ever used is changed to be the highest object number of a currently-existing object, thus allowing reuse of any higher numbers that refer to now-recycled objects.  If the programmer is not a wizard, then E_PERM is raised.
2

2
This operation is intended for use in making new versions of the LambdaCore database from the then-current LambdaMOO database, and other similar situations.  Its use requires great care.
36
5
4
7
2
Syntax:  renumber (OBJ <object>)   => OBJ
2

2
The object number of the object currently numbered <object> is changed to be the least nonnegative object number not currently in use and the new object number is returned.  If <object> is not valid, then E_INVARG is raised.  If the programmer is not a wizard, then E_PERM is raised. If there are no unused nonnegative object numbers less than <object>, then <object> is returned and no changes take place.
2

2
The references to <object> in the parent/children and location/contents hierarchies are updated to use the new object number, and any verbs, properties and/or objects owned by <object> are also changed to be owned by the new object number.  The latter operation can be quite time consuming if the database is large.  No other changes to the database are performed; in particular, no object references in property values or verb code are updated.
2

2
This operation is intended for use in making new versions of the LambdaCore database from the then-current LambdaMOO database, and other similar situations.  Its use requires great care.
36
5
4
22
2
Syntax:  server_version ()   => str
2

2
Returns a string giving the version number of the MOO server in the following
2
format:
2

2
    "<major>.<minor>.<release>"
2

2
where <major>, <minor>, and <release> are all decimal numbers.
2

2
The major version number changes very slowly, only when existing MOO code might
2
stop working, due to an incompatible change in the syntax or semantics of the
2
programming language, or when an incompatible change is made to the database
2
format.
2

2
The minor version number changes more quickly, whenever an upward-compatible
2
change is made in the programming language syntax or semantics.  The most
2
common cause of this is the addition of a new kind of expression, statement, or
2
built-in function.
2

2
The release version number changes as frequently as bugs are fixed in the
2
server code.  Changes in the release number indicate changes that should only
2
be visible to users as bug fixes, if at all.
36
5
4
3
2
Syntax:  output_delimiters (OBJ <player>)   => LIST
2

2
Returns a list of two strings, the current "output prefix" and "output suffix" for <player>.  If <player> does not have an active network connection, then E_INVARG is raised.  If either string is currently undefined, the value `""' is used instead.  See the discussion of the `PREFIX' and `SUFFIX' commands in the LambdaMOO Programmers Manual for more information about the output prefix and suffix.
36
5
4
14
2
Syntax:  callers ([include-line-numbers])   => list
2

2
Returns information on each of the verbs and built-in functions currently waiting to resume execution in the current task.  When one verb or function calls another verb or function, execution of the caller is temporarily suspended, pending the called verb or function returning a value.  At any given time, there could be several such pending verbs and functions: the one that called the currently executing verb, the verb or function that called that one, and so on.  The result of `callers()' is a list, each element of which gives information about one pending verb or function in the following format:
2

2
  {<this>, <verb-name>, <programmer>, <verb-loc>, <player>, <line-number>}
2

2
For verbs, <this> is the initial value of the variable `this' in that verb, <verb-name> is the name used to invoke that verb, <programmer> is the player with whose permissions that verb is running, <verb-loc> is the object on which that verb is defined, and <player> is the initial value of the variable `player' in that verb, and <line-number> indicates which line of the verb's code is executing. The <line-number> element is included only if the `include-line-numbers' argument was provided and is true.
2

2
For functions, <this>, <programmer>, and <verb-loc> are all #-1, <verb-name> is the name of the function, and <line-number> is an index used internally to determine the current state of the built-in function. The simplest correct test for a built-in function entry is
2

2
(VERB-LOC == #-1 && PROGRAMMER == #-1 && VERB-NAME != "")
2

2

2
The first element of the list returned by `callers()' gives information on the verb that called the currently-executing verb, the second element describes the verb that called that one, and so on.  The last element of the list describes the first verb called in this task.
36
5
4
3
2
Syntax:  kill_task (INT <task-id>)   => none
2

2
Removes the task with the given <task-id> from the queue of waiting tasks. If the programmer is not the owner of that task and not a wizard, then E_PERM is raised.  If there is no task on the queue with the given <task-id>, then E_INVARG is raised.
36
5
4
10
2
Syntax:  queued_tasks ()   => LIST
2

2
Returns information on each of the background tasks (i.e., forked, suspended, or reading)  owned by the programmer (or, if the programmer is a wizard, all queued tasks). The returned value is a list of lists, each of which encodes certain information about a particular queued task in the following format:
2

2
    {<task-id>, <start-time>, <ticks>, <clock-id>,
2
     <programmer>, <verb-loc>, <verb-name>, <line>, <this>, <task-size>}
2

2
where <task-id> is a numeric identifier for this queued task, <start-time> is the time after which this task will begin execution (in `time()' format), <ticks> is the number of ticks this task will have when it starts (always 20,000 now, though this is changeable. This makes this value obsolete and no longer interesting), <clock-id> is a number whose value is no longer interesting, <programmer> is the permissions with which this task will begin execution (and also the player who "owns" this task), <verb-loc> is the object on which the verb that forked this task was defined at the time, <verb-name> is that name of that verb, <line> is the number of the first line of the code in that verb that this task will execute, and <this> is the value of the variable `this' in that verb. For reading tasks, <start-time> is `-1'.  <task-size> is in bytes, and is the size of memory in use by the task for local variables, stack frames, etc.
2

2
The <ticks> and <clock-id> fields are now obsolete and are retained only for backward-compatibility reasons.  They may disappear in a future version of the server.
36
5
4
15
2
Syntax:  read ([OBJ <conn> [, non-blocking]])   => STR
2

2
Reads and returns a line of input from the connection <conn> (or, if not provided, from the player that typed the command that initiated the current task). If <non-blocking> is false or not provided, this function suspends the current task, resuming it when there is input available to be read. If <non-blocking> is provided and true, this function never suspends the calling task; if there is no input currently available for input, `read()' simply returns 0 immediately.
2

2
If <conn> is provided, then the programmer must either be a wizard or the owner of <conn>, if <conn> is not provided, then `read()' may only be called by a wizard and only in the task that was last spawned by a command from the connection in question. Otherwise, E_PERM is raised. If the given <conn> is not currently connected and has no pending lines of input, or if the connection is closed while a task is waiting for input but before any lines of input are received, then `read()' raises E_INVARG.
2

2
The restriction on the use of `read()' without any arguments preserves the following simple invariant: if input is being read from a player, it is for the task started by the last command that the player typed. This invariant adds responsibility to the programmer, however. If your program calls another verb before doing a `read()', then either that verb must not suspend, or else you must arrange that no commands will be read from the connection in the meantime. The most straightforward way to do this is to call
2

2
  set_connection_option(<conn>, "hold-input", 1)
2

2
before any task suspension could happen, then make all of your calls to `read()' and other code that might suspend, and finally call
2

2
  set_connection_option(<conn>, "hold-input", 0)
2

2
to allow commands once again to be read and interpreted normally.
36
5
4
38
2
Syntax:  suspend ([INT <seconds>])   => value
2

2
Suspends the current task, and resumes it after at least <seconds> seconds. (If <seconds> is not provided, the task is suspended indefinitely; such a task can only be resumed by use of the `resume()' function.) When the task is resumed, it will have a full quota of ticks and seconds.  This function is useful for programs that run for a long time or require a lot of ticks.  If <seconds> is negative, then E_INVARG is raised. `Suspend()' returns zero unless it was resumed via `resume()' in which case it returns the second argument given to that function.
2

2
In some sense, this function forks the `rest' of the executing task.  However, there is a major difference between the use of `suspend(<seconds>)' and the use of the `fork (<seconds>)'.  The `fork' statement creates a new task (a "forked task") while the currently-running task still goes on to completion, but a `suspend()' suspends the currently-running task (thus making it into a "suspended task").  This difference may be best explained by the following examples, in which one verb calls another:
2

2
    .program   #0:caller_A
2
    #0.prop = 1;
2
    #0:callee_A();
2
    #0.prop = 2;
2
    .
2

2
    .program   #0:callee_A
2
    fork(5)
2
      #0.prop = 3;
2
    endfork
2
    .
2

2
    .program   #0:caller_B
2
    #0.prop = 1;
2
    #0:callee_B();
2
    #0.prop = 2;
2
    .
2

2
    .program   #0:callee_B
2
    suspend(5);
2
    #0.prop = 3;
2
    .
2

2
Consider `#0:caller_A', which calls `#0:callee_A'.  Such a task would assign 1 to `#0.prop', call `#0:callee_A', fork a new task, return to `#0:caller_A', and assign 2 to `#0.prop', ending this task.  Five seconds later, if the forked task had not been killed, then it would begin to run; it would assign 3 to `#0.prop' and then stop.  So, the final value of `#0.prop' (i.e., the value after more than 5 seconds) would be 3.
2

2
Now consider `#0:caller_B', which calls `#0:callee_B' instead of `#0:callee_A'.  This task would assign 1 to `#0.prop', call `#0:callee_B', and suspend.  Five seconds later, if the suspended task had not been killed, then it would resume; it would assign 3 to `#0.prop', return to `#0:caller', and assign 2 to `#0.prop', ending the task. So, the final value of `#0.prop' (i.e., the value after more than 5 seconds) would be 2.
2

2
A suspended task, like a forked task, can be described by the `queued_tasks()' function and killed by the `kill_task()' function. Suspending a task does not change its task id.  A task can be suspended again and again by successive calls to `suspend()'.
2

2
Once `suspend()' has been used in a particular task, then the `read()' function will always raise E_PERM in that task.  For more details, see the description of `read()'.
2

2
By default, there is no limit to the number of tasks any player may suspend, but such a limit can be imposed from within the database. See the chapter in the LambdaMOO Programmers Manual on server assumptions about the database for details.
36
5
4
3
2
Syntax:  task_id ()   => INT
2

2
Returns the numeric identifier for the currently-executing task.  Such numbers are randomly selected for each task and can therefore safely be used in circumstances where unpredictability is required.
36
5
4
2
2
*forward*
2
ticks_left()
36
5
4
4
2
Syntax:  ticks_left ()   => INT
2
       seconds_left ()   => INT
2

2
These two functions return the number of ticks or seconds (respectively) left to the current task before it will be forcibly terminated.  These are useful, for example, in deciding when to fork another task to continue a long-lived computation.
36
5
4
6
2
Syntax:  caller_perms ()   => obj
2

2
Returns the permissions in use by the verb that called the currently-executing
2
verb.  If the currently-executing verb was not called by another verb (i.e., it
2
is the first verb called in a command or server task), then
2
`caller_perms()' returns `#-1'.
36
5
4
5
2
Syntax:  set_task_perms (OBJ <player>)   => none
2

2
Changes the permissions with which the currently-executing verb is running to be those of <player>.  If <player> is not of type OBJ, then E_INVARG is raised.  If the programmer is neither <player> nor a wizard, then E_PERM is raised.
2

2
Note: This does not change the owner of the currently-running verb, only the permissions of this particular invocation.  It is used in verbs owned by wizards to make themselves run with lesser (usually non-wizard) permissions.
36
5
4
23
2
Syntax:  eval (str <string>)   => list
2

2
The MOO-code compiler processes <string> as if it were to be the program associated with some verb and, if no errors are found, that fictional verb is invoked.  If the programmer is not, in fact, a programmer, then E_PERM is raised.  The normal result of calling `eval()' is a two element list. The first element is true if there were no compilation errors and false otherwise.  The second element is either the result returned from the fictional verb (if there were no compilation errors) or a list of the compiler's error messages (otherwise).
2

2
When the fictional verb is invoked, the various built-in variables have values as shown below:
2

2
    player    the same as in the calling verb
2
    this      #-1
2
    caller    the same as the initial value of `this' in the calling verb
2

2
    args      {}
2
    argstr    ""
2

2
    verb      ""
2
    dobjstr   ""
2
    dobj      #-1
2
    prepstr   ""
2
    iobjstr   ""
2
    iobj      #-1
2

2
The fictional verb runs with the permissions of the programmer and as if its `d' permissions bit were on.
2

2
    eval("return 3 + 4;")   =>   {1, 7}
36
5
4
9
2
Syntax:  boot_player (obj <player>)   => none
2

2
Immediately terminates any currently-active connection to the given <player>.  The connection will not actually be closed until the currently-running task returns or suspends, but all MOO functions (such as notify(), connected_players(), and the like) immediately behave as if the connection no longer exists. If the programmer is not either a wizard or the same as <player>, then `E_PERM' is returned.  If there is no currently-active connection to <player>, then this function does nothing.
2

2
If there was a currently-active connection, then the following verb call is made when the connection is actually closed:
2

2
$user_disconnected(player)
2

2
It is not an error if this verb does not exist; the corresponding call is simply skipped.
36
5
4
7
2
Syntax:  notify (OBJ conn, STR string [, no-flush]) => 0 or 1
2

2
Enqueues <string> for output (on a line by itself) on the connection <conn>. If the programmer is not <conn> or a wizard, then E_PERM is raised. If <conn> is not a currently-active connection, then this function does nothing. Output is normally written to connections only between tasks, not during execution.
2

2
The server will not queue an arbitrary amount of output for a connection; the `MAX_QUEUED_OUTPUT' compilation option (in `options.h') controls the limit. When an attempt is made to enqueue output that would take the server over its limit, it first tries to write as much output as possible to the connection without having to wait for the other end. If that doesn't result in the new output being able to fit in the queue, the server starts throwing away the oldest lines in the queue until the new output will fit. The server remembers how many lines of output it has `flushed' in this way and, when next it can succeed in writing anything to the connection, it first writes a line like `>> Network buffer overflow; X lines of output to you have been lost <<' where <X> is the number of of flushed lines.
2

2
If <no-flush> is provided and true, then `notify()' never flushes any output from the queue; instead it immediately returns false. `Notify()' otherwise always returns true.
36
5
4
2
2
*forward*
2
connected_seconds()
36
5
4
4
2
Syntax:  connected_seconds (obj <player>)   => int
2
              idle_seconds (obj <player>)   => int
2

2
These functions return the number of seconds that the currently-active connection to <player> has existed and been idle, respectively.  If <player> is not the object number of a player object with a currently-active connection, then E_INVARG is raised.
36
5
4
3
2
Syntax:  connected_players ([include-all])   => LIST
2

2
Returns a list of the object numbers of those player objects with currently-active connections. If <include-all> is provided and true, includes the object numbers associated with all current connections, including those that are outbound and/or not yet logged-in.
36
5
4
7
2
Syntax:  set_player_flag (OBJ <object>, <value>)   => none
2

2
Confers or removes the ``player object'' status of the given <object>, depending upon the truth value of <value>.  If <object> is not valid, E_INVARG is raised.  If the programmer is not a wizard, then E_PERM is raised.
2

2
If <value> is true, then <object> gains (or keeps) "player object" status: it will be an element of the list returned by `players()', the expression `is_player(<object>)' will return true, and users can connect to <object> by name when they log into the server.
2

2
If <value> is false, the <object> loses (or continues to lack) "player object" status: it will not be an element of the list returned by `players()', the expression `is_player(<object>)' will return false, and users cannot connect to <object> by name when they log into the server.  In addition, if a user is connected to <object> at the time that it loses ``player object'' status, then that connection is immediately broken, just as if `boot_player(<object>)' had been called (see the description of `boot_player()' below).
36
5
4
3
2
Syntax:  is_player (OBJ <object>)   => INT
2

2
Returns a true value if the given <object> is a player object and a false value otherwise.  If <object> is not valid, E_INVARG is raised.
36
5
4
3
2
Syntax:  players ()   => list
2

2
Returns a list of the object numbers of all player objects in the database.
36
5
4
2
2
*forward*
2
verb_code()
36
5
4
8
2
Syntax:  verb_code (OBJ <object>, STR <verb-name> [, <fully-paren> [, <indent>]])   => LIST
2
     set_verb_code (OBJ <object>, STR <verb-name>, LIST <code>)   => LIST
2

2
These functions get and set (respectively) the MOO-code program associated with the verb named <verb-name> on <object>.  The program is represented as a list of strings, one for each line of the program; this is the kind of value returned by `verb_code()' and expected as the third argument to `set_verb_code()'.  For `verb_code()', the expressions in the returned code are usually written with the minimum-necessary parenthesization; if <fully-paren> is true, then all expressions are fully parenthesized. Also for `verb_code()', the lines in the returned code are usually not indented at all; if <indent> is true, each line is indented to better show the nesting of statements.
2

2
If <object> is not valid, then E_INVARG is raised.  If <object> does not define a verb named <verb-name>, then E_VERBNF is raised.  If the programmer does not have read (write) permission on the verb in question, then `verb_code()' (`set_verb_code()') raises E_PERM.  If the programmer is not, in fact, a programmer, then E_PERM is raised.
2

2
For `set_verb_code()', the result is a list of strings, the error messages generated by the MOO-code compiler during processing of <code>.  If the list is non-empty, then `set_verb_code()' did not install <code>; the program associated with the verb in question is unchanged.
36
5
4
3
2
Syntax:  delete_verb (obj <object>, str <verb-name>)   => none
2

2
Removes the verb named <verb-name> from the given <object>.  If <object> is not valid, then E_INVARG is raised.  If the programmer does not have write permission on <object>, then E_PERM is raised. If <object> does not define a verb named <verb-name>, then E_VERBNF is raised.
36
5
4
5
2
Syntax:  add_verb (obj <object>, list <info>, list <args>)   => int
2

2
Defines a new verb on the given <object>.  The new verb's owner, permission bits and name(s) are given by <info> in the same format as is returned by `verb_info()'.  The new verb's direct-object, preposition, and indirect-object specifications are given by <args> in the same format as is returned by `verb_args()'.  The new verb initially has the empty program associated with  it; this program does nothing but return an unspecified value.  
2

2
If <object> is not valid, or <info> does not specify a valid owner and well-formed permission bits and verb names, or <args> is not a legitimate syntax specification, then `E_INVARG' is raised.  If the programmer does not have write permission on <object> or if the owner specified by <info> is not the programmer and the programmer is not a wizard, then `E_PERM' is raised.  Otherwise, this function returns a positive integer representing the new verb's index in this object's `verbs()' list.  
36
5
4
2
2
*forward*
2
verb_args()
36
5
4
12
2
Syntax:  verb_args (OBJ <object>, STR <verb-name>)   => LIST
2
     set_verb_args (OBJ <object>, STR <verb-name>, LIST <args>)   => none
2

2
These two functions get and set (respectively) the direct-object, preposition, and indirect-object specifications for the verb named <verb-name> on the given <object>.  If <object> is not valid, then E_INVARG is raised.  If <object> does not define a verb named <verb-name>, then E_VERBNF is raised.  If the programmer does not have read (write) permission on the verb in question, then `verb_args()' (`set_verb_args()') raises E_PERM.  Verb args specifications have the following form:
2

2
    {<dobj>, <prep>, <iobj>}
2

2
where <dobj> and <iobj> are strings drawn from the set `"this"', `"none"', and `"any"', and <prep> is a string that is either `"none"', `"any"', or one of the prepositional phrases listed much earlier in the description of verbs in the first chapter.  This is the kind of value returned by `verb_info()' and expected as the third argument to `set_verb_info()'.  Note that for `set_verb_args()', <prep> must be only one of the prepositional phrases, not (as is shown in that table) a set of such phrases separated by `/' characters.  `Set_verb_args()' raises E_INVARG if any of the <dobj>, <prep>, or <iobj> strings is illegal.
2

2
    verb_args($container, "take")
2
                        =>   {"any", "out of/from inside/from", "this"}
2
    set_verb_args($container, "take", {"any", "from", "this"})
36
5
4
2
2
*forward*
2
verb_info()
36
5
4
8
2
Syntax:  verb_info (OBJ <object>, STR <verb-name>)   => LIST
2
     set_verb_info (OBJ <object>, STR <verb-name>, LIST <info>)   => none
2

2
These two functions get and set (respectively) the owner, permission bits, and name(s) for the verb named <verb-name> on the given <object>.  If <object> is not valid, then E_INVARG is raised.  If <object> does not define a verb named <verb-name>, then E_VERBNF is raised. If the programmer does not have read (write) permission on the verb in question, then `verb_info()' (`set_verb_info()') raises E_PERM.  Verb info has the following form:
2

2
    {<owner>, <perms>, <names>}
2

2
where <owner> is an object, <perms> is a string containing only characters from the set `r', `w', `x', and `d', and <names> is a string.  This is the kind of value returned by `verb_info()' and expected as the third argument to `set_verb_info()'. The latter function raises E_INVARG if <owner> is not valid, if <perms> contains any illegal characters, or if <names> is the empty string or consists entirely of spaces; it raises E_PERM if <owner> is not the programmer and the programmer is not a wizard.
36
5
4
3
2
Syntax:  verbs (OBJ <object>)   => LIST
2

2
Returns a list of the names of the verbs defined directly on the given <object>, not inherited from its parent.  If <object> is not valid, then E_INVARG is raised.  If the programmer does not have read permission on <object>, then E_PERM is raised.
36
5
4
3
2
Syntax:  delete_property (obj <object>, str <prop-name>)   => none
2

2
Removes the property named <prop-name> from the given <object> and all of its descendants.  If <object> is not valid, then E_INVARG is raised.  If the programmer does not have write permission on <object>, then E_PERM is raised.  If <object> does not directly define a property named <prop-name> (as opposed to inheriting one from its parent), then `E_PROPNF' is raised.
36
5
4
3
2
Syntax:  add_property (obj <object>, str <prop-name>, <value>, list <info>)   => none
2

2
Defines a new property on the given <object>, inherited by all of its descendants; the property is named <prop-name>, its initial value is <value>, and its owner and initial permission bits are given by <info> in the same format as is returned by `property_info()'. If <object> is not valid or <object> already has a property named <prop-name> or <info> does not specify a legitimate owner and permission bits, then E_INVARG is raised.  If the programmer does not have write permission on <object> or if the owner specified by <info> is not the programmer and the programmer is not a wizard, then E_PERM is raised.
36
5
4
2
2
*forward*
2
property_info()
36
5
4
8
2
Syntax:  property_info (OBJ <object>, STR <prop-name>)   => LIST
2
     set_property_info (OBJ <object>, STR <prop-name>, LIST <info>)   => none
2

2
These two functions get and set (respectively) the owner and permission bits for the property named <prop-name> on the given <object>.  If <object> is not valid, then E_INVARG is raised.  If <object> has no non-built-in property named <prop-name>, then E_PROPNF is raised.  If the programmer does not have read (write) permission on the property in question, then `property_info()' (`set_property_info()') raises E_PERM.  Property info has the following form:
2

2
    {<owner>, <perms> [, new-name]}
2

2
where <owner> is an object and <perms> is a string containing only characters from the set `r', `w', and `c', and <new-name> is a string; <new-name> is never part of the value returned by `property_info()', but it may optionally be given as part of the value provided to `set_property_info()'.  This list is the kind of value returned by `property_info()' and expected as the third argument to `set_property_info()'; the latter function raises E_INVARG if <owner> is not valid or <perms> contains any illegal characters, or, when <new-name> is given, if <prop-name> is not defined directly on <object> or <new-name> names an existing property defined on <object> or any of its ancestors or descendants.
36
5
4
3
2
Syntax:  properties (OBJ <object>)   => LIST
2

2
Returns a list of the names of the properties defined directly on the given <object>, not inherited from its parent.  If <object> is not valid, then E_INVARG is raised.  If the programmer does not have read permission on <object>, then E_PERM is raised.
36
5
4
23
2
Syntax:  move (OBJ <what>, OBJ <where>)   => none
2

2
Changes <what>'s location to be <where>.  This is a complex process because a number of permissions checks and notifications must be performed. The actual movement takes place as described in the following paragraphs.
2

2
<what> should be a valid object and <where> should be either a valid object or `#-1' (denoting a location of 'nowhere'); otherwise E_INVARG is raised.  The programmer must be either the owner of <what> or a wizard; otherwise, E_PERM is raised.
2

2
If <where> is a valid object, then the verb-call
2

2
    <where>:accept(<what>)
2

2
is performed before any movement takes place.  If the verb returns a false value and the programmer is not a wizard, then <where> is considered to have refused entrance to <what>; `move()' raises E_NACC.  If <where> does not define an `accept' verb, then it is treated as if it defined one that always returned false.
2

2
If moving <what> into <where> would create a loop in the containment hierarchy (i.e., <what> would contain itself, even indirectly), then E_RECMOVE is raised instead.
2

2
The `location' property of <what> is changed to be <where>, and the `contents' properties of the old and new locations are modified appropriately.  Let <old-where> be the location of <what> before it was moved.  If <old-where> is a valid object, then the verb-call
2

2
    <old-where>:exitfunc(<what>)
2

2
is performed and its result is ignored; it is not an error if <old-where> does not define a verb named `exitfunc'.  Finally, if <where> and <what> are still valid objects, and <where> is still the location of <what>, then the verb-call
2

2
    <where>:enterfunc(<what>)
2

2
is performed and its result is ignored; again, it is not an error if <where> does not define a verb named `enterfunc'.
36
5
4
6
2
Syntax:  max_object ()   => obj
2

2
Returns the largest object number yet assigned to a created object.  Note that
2
the object with this number may no longer exist; it may have been recycled.
2
The next object created will be assigned the object number one larger than the
2
value of `max_object()'.
36
5
4
5
2
Syntax:  recycle (OBJ <object>)   => none
2

2
The given <object> is destroyed, irrevocably.  The programmer must either own <object> or be a wizard; otherwise, E_PERM is raised.  If <object> is not valid, then E_INVARG is raised.  The children of <object> are reparented to the parent of <object>.  Before <object> is recycled, each object in its contents is moved to `#-1' (implying a call to <object>'s `exitfunc' verb, if any) and then <object>'s `recycle' verb, if any, is called with no arguments.
2

2
After <object> is recycled, if the owner of the former object has a property named `ownership_quota' and the value of that property is a number, then `recycle()' treats that value as a "quota" and increments it by one, storing the result back into the `ownership_quota' property.
36
5
4
2
2
*forward*
2
parent()
36
5
4
4
2
Syntax:  parent (OBJ <object>)   => OBJ
2
       children (OBJ <object>)   => LIST
2

2
These functions return the parent and a list of the children of <object>, respectively.  If <object> is not valid, then E_INVARG is raised.
36
5
4
6
2
Syntax:  valid (OBJ <object>)   => INT
2

2
Returns a non-zero integer (i.e., a true value) if <object> is a valid object (one that has been created and not yet recycled) and zero (i.e., a false value) otherwise.
2

2
    valid(#0)    =>   1
2
    valid(#-1)   =>   0
36
5
4
7
2
Syntax:  chparent (obj <object>, obj <new-parent>)   => none
2

2
Changes the parent of <object> to be <new-parent>. If <object> is not valid, or if <new-parent> is neither valid nor equal to #-1, then E_INVARG is raised. If the programmer is neither a wizard or the owner of <object>, or if <new-parent> is not fertile (i.e., its `f' bit is not set) and the programmer is neither the owner of <new-parent> nor a wizard, then `E_PERM' is raised.  If <new-parent> is equal to <object> or one of its current ancestors, E_RECMOVE is raised. If <object> or one of its descendants defines a property with the same name as one defined either on <new-parent> or on one of its ancestors, then `E_INVARG' is returned.
2

2
Changing an object's parent can have the effect of removing some properties from and adding some other properties to that object and all of its descendants (i.e., its children and its children's children, etc.).  Let <common> be the nearest ancestor that <object> and <new-parent> have in common before the parent of <object> is changed.  Then all properties defined by ancestors of <object> under <common> (that is, those ancestors of <object> that are in turn descendants of <common>) are removed from <object> and all of its descendants.  All properties defined by <new-parent> or its ancestors under <common> are added to <object> and all of its descendants.  As with `create()', the newly-added properties are given the same permission bits as they have on <new-parent>, the owner of each added property is either the owner of the object it's added to (if the `c' permissions bit is set) or the owner of that property on <new-parent>, and the value of each added property is "clear"; see the description of the built-in function `clear_property()' for details.  All properties that are not removed or added in the reparenting process are completely unchanged.
2

2
If <new-parent> is equal to #-1, then <object> is given no parent at all; it becomes a new root of the parent/child hierarchy. In this case, all formerly inherited properties on <object> are simply removed.
36
5
4
22
2
Syntax:  create (obj <parent> [, obj <owner>])   => obj
2

2
Creates and returns a new object whose parent is <parent> and whose owner is as described below.  Either the given <parent> object must be fertile (i.e., its `f' bit must be set) or else the programmer must own <parent> or be a wizard; otherwise `E_PERM' is raised. `E_PERM' is also raised if <owner> is provided and not the same as the programmer, unless the programmer is a wizard.  After the new object is created, its `initialize' verb, if any, is called with no arguments.
2

2
The new object is assigned the least non-negative object number that has not yet been used for a created object.  Note that no object number is ever reused, even if the object with that number is recycled.
2

2
The owner of the new object is either the programmer (if <owner> is not provided), the new object itself (if <owner> was given as `#-1'), or <owner> (otherwise).
2

2
The other built-in properties of the new object are initialized as follows:
2
    name         ""
2
    location     #-1
2
    contents     {}
2
    programmer   0
2
    wizard       0
2
    r            0
2
    w            0
2
    f            0
2

2
In addition, the new object inherits all of the other properties on <parent>.  These properties have the same permission bits as on <parent>.  If the `c' permissions bit is set, then the owner of the property on the new object is the same as the owner of the new object itself; otherwise, the owner of the property on the new object is the same as that on <parent>.  The initial value of every inherited property is "clear"; see the description of the built-in function `clear_property()' for details.
2

2

2
If the intended owner of the new object has a property named `ownership_quota' and the value of that property is a number, then `create()' treats that value as a "quota".  If the quota is less than or equal to zero, then the quota is considered to be exhausted and `create()' raises `E_QUOTA' instead of creating an object. Otherwise, the quota is decremented and stored back into the `ownership_quota' property as a part of the creation of the new object.
36
5
4
2
2
*forward*
2
setadd()
36
5
4
10
2
Syntax:  setadd (LIST <list>, <value>)   => LIST
2
      setremove (LIST <list>, <value>)   => LIST
2

2
Returns a copy of <list> with the given <value> added or removed, as appropriate.  `Setadd()' only adds <value> if it is not already an element of <list>; <list> is thus treated as a mathematical set. <value> is added at the end of the resulting list, if at all.  Similarly, `setremove()' returns a list identical to <list> if <value> is not an element.  If <value> appears more than once in <list>, only the first occurrence is removed in the returned copy.
2

2
    setadd({1, 2, 3}, 3)         =>   {1, 2, 3}
2
    setadd({1, 2, 3}, 4)         =>   {1, 2, 3, 4}
2
    setremove({1, 2, 3}, 3)      =>   {1, 2}
2
    setremove({1, 2, 3}, 4)      =>   {1, 2, 3}
2
    setremove({1, 2, 3, 2}, 2)   =>   {1, 3, 2}
36
5
4
8
2
Syntax:  listset (LIST <list>, <value>, INT <index>)   => LIST
2

2
Returns a copy of <list> with the <index>th element replaced by <value>.  If <index> is not in the range `[1..length(<list>)]', then E_RANGE is raised.
2

2
    x = {"foo", "bar", "baz"};
2
    listset(x, "mumble", 2)   =>   {"foo", "mumble", "baz"}
2

2
This function exists primarly for historical reasons; it was used heavily before the server supported indexed assignments like x[i] = v. New code should always use indexed assignment instead of `listset()' wherever possible.
36
5
4
6
2
Syntax:  listdelete (LIST <list>, INT <index>)   => LIST
2

2
Returns a copy of <list> with the <index>th element removed.  If <index> is not in the range `[1..length(<list>)]', then E_RANGE is raised.
2

2
    x = {"foo", "bar", "baz"};
2
    listdelete(x, 2)   =>   {"foo", "baz"}
36
5
4
20
2
Syntax:  listinsert (LIST <list>, <value> [, INT <index>])   => list
2
         listappend (LIST <list>, <value> [, INT <index>])   => list
2

2
These functions return a copy of <list> with <value> added as a new element.  `listinsert()' and `listappend()' add <value> before and after (respectively) the existing element with the given <index>, if provided.
2

2
The following three expressions always have the same value:
2

2
    listinsert(<list>, <element>, <index>)
2
    listappend(<list>, <element>, <index> - 1)
2
    {@<list>[1..<index> - 1], <element>, @<list>[<index>..length(<list>)]}
2

2
If <index> is not provided, then `listappend()' adds the <value> at the end of the list and `listinsert()' adds it at the beginning; this usage is discouraged, however, since the same intent can be more clearly expressed using the list-construction expression, as shown in the examples below.
2

2
    x = {1, 2, 3};
2
    listappend(x, 4, 2)   =>   {1, 2, 4, 3}
2
    listinsert(x, 4, 2)   =>   {1, 4, 2, 3}
2
    listappend(x, 4)      =>   {1, 2, 3, 4}
2
    listinsert(x, 4)      =>   {4, 1, 2, 3}
2
    {@x, 4}               =>   {1, 2, 3, 4}
2
    {4, @x}               =>   {4, 1, 2, 3}
36
5
4
2
2
*forward*
2
listinsert()
36
5
4
3
2
Syntax:  strcmp (STR <str1>, STR <str2>)   => INT
2

2
Performs a case-sensitive comparison of the two argument strings.  If <str1> is lexicographically less than <str2>, the `strcmp()' returns a negative number.  If the two strings are identical, `strcmp()' returns zero.  Otherwise, `strcmp()' returns a positive number.  The ASCII character ordering is used for the comparison.
36
5
4
2
2
*forward*
2
index()
36
5
4
10
2
Syntax:  index (STR <str1>, STR <str2> [, <case-matters>])   => INT
2
        rindex (STR <str1>, STR <str2> [, <case-matters>])   => INT
2

2
The function `index()' (`rindex()') returns the index of the first character of the first (last) occurrence of <str2> in <str1>, or zero if <str2> does not occur in <str1> at all.  By default the search for an occurrence of <str2> is done while ignoring the upper/lower case distinction.  If <case-matters> is provided and true, then case is treated as significant in all comparisons.
2

2
    index("foobar", "o")        =>   2
2
    rindex("foobar", "o")       =>   3
2
    index("foobar", "x")        =>   0
2
    index("foobar", "oba")      =>   3
2
    index("Foobar", "foo", 1)   =>   0
36
5
4
12
2
Syntax:  crypt (str <text> [, str <salt>])   => str
2

2
Encrypts the given <text> using the standard UNIX encryption method.  If provided, <salt> should be a two-character string for use as the extra encryption ``salt'' in the algorithm.  If <salt> is not provided, a random pair of characters is used.  In any case, the salt used is also returned as the first two characters of the resulting encrypted string.  
2

2
Aside from the possibly-random selection of the salt, the encryption algorithm is entirely deterministic.  In particular, you can test whether or not a given string is the same as the one used to produced a given piece of encrypted text; simply extract the first two characters of the encrypted text and pass the candidate string and those two characters to `crypt()'.  If the result is identical to the given encrypted text, then you've got a match.  
2

2
    crypt("foobar")         =>   "J3fSFQfgkp26w"
2
    crypt("foobar", "J3")   =>   "J3fSFQfgkp26w"
2
    crypt("mumble", "J3")   =>   "J3D0.dh.jjmWQ"
2
    crypt("foobar", "J4")   =>   "J4AcPxOJ4ncq2"
2

2
Note: As of version 1.8.3, the entire salt (of any length) is passed to the operating system's low-level crypt function.  It is unlikely, however, that all operating systems will return the same string when presented with a longer salt.  Therefore, identical calls to `crypt()' may generate different results on different platforms, and your password verification systems will fail.  Use a salt longer than two characters at your own risk.
36
5
4
7
2
Syntax:  strsub (STR <subject>, STR <what>, STR <with> [, <case-matters>])   => STR
2

2
Replaces all occurrences in <subject> of <what> with <with>, performing string substitution.  The occurrences are found from left to right and all substitutions happen simultaneously.  By default, occurrences of <what> are searched for while ignoring the upper/lower case distinction. If <case-matters> is provided and true, then case is treated as significant in all comparisons.
2

2
    strsub("%n is a fink.", "%n", "Fred")   =>   "Fred is a fink."
2
    strsub("foobar", "OB", "b")             =>   "fobar"
2
    strsub("foobar", "OB", "b", 1)          =>   "foobar"
36
5
4
8
2
Syntax:  length (<list or string>)   => int
2

2
Returns the number of characters in <list or string>.  
2

2
    length("foo")       =>   3
2
    length("")          =>   0
2
    length({1, 2, 3})   =>   3
2
    length({})          =>   0
36
5
4
13
2
Syntax:  ctime ([INT <time>])   => str
2

2
Interprets <time> as a time, using the same representation as given in the description of `time()', and converts it into a 28-character, human-readable string in the following format:
2

2
    Mon Aug 13 19:13:20 1990 PDT
2

2
If the current day of the month is less than 10, then an extra blank appears between the month and the day:
2

2
    Mon Apr  1 14:10:43 1991 PST
2

2
If <time> is not provided, then the current time is used.
2

2
Note that `ctime()' interprets <time> for the local time zone of the computer on which the MOO server is running.
36
5
4
3
2
Syntax:  time ()   => INT
2

2
Returns the current time, represented as the number of seconds that have elapsed since midnight on 1 January 1970, Greenwich Mean Time.
36
5
4
3
2
Syntax:  random ([INT <mod>])   => INT
2

2
<Mod> must be a positive integer; otherwise, E_INVARG is raised.  An integer is chosen randomly from the range `[1..<mod>]' and returned. If <mod> is not provided, it defaults to the largest MOO integer, 2147483647.
36
5
4
3
2
Syntax:  abs (num <x>)   => num
2

2
Returns the absolute value of <x>.  If <x> is negative, then the result is `-<x>'; otherwise, the result is <x>. The number x can be either integer or floating-point; the result is of the same kind.
36
5
4
2
2
*forward*
2
min()
36
5
4
4
2
Syntax:  min (num <x>, ...)   => num
2
         max (num <x>, ...)   => num
2

2
These two functions return the smallest or largest of their arguments, respectively.  All of the arguments must be numbers of the same kind (i.e., either integer or floating-point); otherwise E_TYPE is raised.
36
5
4
8
2
Syntax:  toobj (<value>)   => OBJ
2

2
Converts the given MOO value into an object number and returns that object number.  The conversions are very similar to those for `toint()' except that for strings, the number *may* be preceded by `#'.
2

2
    toobj("34")       =>   #34
2
    toobj("#34")      =>   #34
2
    toobj("foo")      =>   #0
2
    toobj({1, 2})     -error->   E_TYPE
36
5
4
12
2
Syntax:  toint (<value>)   => INT
2
         tonum (<value>)   => INT
2

2
Converts the given MOO value into an integer and returns that integer. Floating-point numbers are rounded toward zero, truncating their fractional parts. Object numbers are converted into the equivalent integers, strings are parsed as the decimal encoding of a real number which is then converted to an integer. Errors are converted into integers obeying the same ordering (with respect to `<=' as the errors themselves.) `Toint()' raises E_TYPE if <value> is a LIST.  If <value> is a string but the string does not contain a syntactically-correct number, then `toint()' returns 0.
2

2
    toint(34.7)        =>   34
2
    toint(-34.7)       =>   34
2
    toint(#34)         =>   34
2
    toint("34")        =>   34
2
    toint("34.7")      =>   34
2
    toint(" - 34  ")   =>  -34
2
    toint(E_TYPE)      =>    1
36
5
4
13
2
Syntax:  tostr (<value>, ...)   => STR
2

2
Converts all of the given MOO values into strings and returns the concatenation of the results.
2

2
    tostr(17)                  =>   "17"
2
    tostr(1.0/3.0)             =>   "0.333333333333333"
2
    tostr(#17)                 =>   "#17"
2
    tostr("foo")               =>   "foo"
2
    tostr({1, 2})              =>   "{list}"
2
    tostr(E_PERM)              =>   "Permission denied"
2
    tostr("3 + 4 = ", 3 + 4)   =>   "3 + 4 = 7"
2

2
Note that `tostr()' does not do a good job of converting lists into strings; all lists, including the empty list, are converted into the string `"{list}"'. The function `toliteral()' is better for this purpose.
36
5
4
11
2
Syntax:  typeof (<value>)   => INT
2

2
Takes any MOO value and returns a number representing the type of <value>. The result is the same as the initial value of one of these built-in variables: `INT', `FLOAT', `STR', `LIST', `OBJ', or `ERR'.  Thus, one usually writes code like this:
2

2
    if (typeof(x) == LIST) ...
2

2
and not like this:
2

2
    if (typeof(x) == 4) ...
2

2
because the former is much more readable than the latter.
36
5
4
4
2
Syntax:  clear_property (OBJ <object>, STR <prop-name>)  => none
2
      is_clear_property (OBJ <object>, STR <prop-name>)  => INT
2

2
These two functions test for clear and set to clear, respectively, the property named <prop-name> on the given <object>.  If <object> is not valid, then E_INVARG is raised.  If <object> has no non-built-in property named <prop-name>, then E_PROPNF is raised.  If the programmer does not have read (write) permission on the property in question, then `is_clear_property()' (`clear_property()') raises E_PERM. If a property is clear, then when the value of that property is queried the value of the parent's property of the same name is returned.  If the parent's property is clear, then the parent's parent's value is examined, and so on. If <object> is the definer of the property <prop-name>, as opposed to an inheritor of the property, then `clear_property()' raises E_INVARG.
36
5
4
2
2
*forward*
2
clear_property()
36
5
4
38
2
Syntax:  set_connection_option (OBJ conn, STR option, value)   => none
2

2
Controls a number of optional behaviors associated the connection <conn>. Raises `E_INVARG' if <conn> does not specify a current connection and `E_PERM' if the programmer is neither <conn> nor a wizard. Unless otherwise specified below, options can only be set (<value> is true) or unset (otherwise). The following values for <option> are currently supported:  
2

2
"binary"
2
   When set, the connection is in `binary mode', in which case both input from and output to <conn> can contain arbitrary bytes. Input from a connection in binary mode is not broken into lines at all; it is delivered to either the read() function or normal command parsing as `binary strings', in whatever size chunks come back from the operating system. (See the early section in the LambdaMOO Programmers Manual on MOO value types for a description of the binary string representation.) For output to a connection in binary mode, the second argument to `notify()' must be a binary string; if it is malformed, `E_INVARG' is raised.
2

2
   Fine point: If the connection mode is changed at any time when there is pending input on the connection, said input will be delivered as per the previous mode (i.e., when switching out of binary mode, there may be pending ``lines'' containing tilde-escapes for embedded linebreaks, tabs, tildes and other characters; when switching into binary mode, there may be pending lines containing raw tabs and from which nonprintable characters have been silently dropped as per normal mode. Only during the initial invocation of `$do_login_command()' on an incoming connection or immediately after the call to `open_network_connection()' that creates an outgoing connection is there guaranteed not to be pending input. At other times you will probably want to flush any pending input immediately after changing the connection mode.
2

2
"hold-input"
2
   When set, no input received on <conn> will be treated as a command; instead, all input remains in the queue until retrieved by calls to `read()' or until this connection option is unset, at which point command processing resumes. Processing of out-of-band input lines is unaffected by this option.
2

2
"disable-oob"
2
   When set, disables all out of band processing. All subsequent input lines until the next command that unsets this option will be made available for reading tasks or normal command parsing exactly as if the out-of-band prefix and the out-of-band quoting prefix had not been defined for this server.
2

2
"client-echo"
2
   The setting of this option is of no significance to the server. However calling `set_connection_option()' for this option sends the Telnet Protocol `WONT ECHO' or `WILL ECHO' command, depending on whether <value> is true or false, respectively. For clients that support the Telnet Protocol, this should toggle whether or not the client echoes locally the characters typed by the user. Note that the server itself never echoes input characters under any circumstances. (This option is only available under the TCP/IP networking configurations.)
2

2
"flush-command"
2
   This option is string-valued. If <value> is a non-empty string, then it becomes the new `flush' command for this connection, by which the player can flush all queued input that has not yet been processed by the server. If the string is empty, then <conn> is set to have no flush command at all. `set_connection_option' also allows specifying a non-string <value> which is equivalent to specifying the empty string. The default value of this option can be set via the property `$server_options.default_flush_command'; see the chapter in the LambdaMOO Programmers Manual on server assumptions about the database for details.
2

2
"intrinsic-commands"
2
   This option value is a list of strings, each being the name of one of the available server intrinsic commands (see the section in the LambdaMOO Programmers Manual on Command Lines That Receive Special Treatment). Commands not on the list are disabled, i.e., treated as normal MOO commands to be handled by `$do_command' and/or the built-in command parser. `set_connection_option' also allows specifying an integer <value> which, if zero, is equivalent to specifying the empty list, and otherwise is taken to be the list of all available intrinsic commands (the default setting).  
2

2
   Thus, one way to make the verbname `PREFIX' available as an ordinary command is as follows:
2

2
    set_connection_option(player, "intrinsic-commands",
2
      setremove(connection_option(player, "intrinsic-commands"), "PREFIX"));
2

2
   Note that `connection_option()' always returns the list, even if `set_connection_option' was previously called with a numeric value.  Thus,
2

2
    save = connection_option(player,"intrinsic-commands");
2
    set_connection_option(player, "intrinsic-commands, 1);
2
    full_list = connection_option(player,"intrinsic-commands");
2
    set_connection_option(player,"intrinsic-commands", save);
2
    return full_list;
2

2
   is a way of getting the full list of intrinsic commands available in the server while leaving the current connection unaffected.
36
5
4
3
2
queue_info([obj user])
2

2
Returns the number of forked tasks that <user> has at the moment.  Since it doesn't say which tasks, security is not a significant issue.  If no argument is given, then gives a list of all users with task queues in the server.  (Essentially all connected players + all open connections + all users with tasks running in the background.)
36
5
4
9
2
Syntax:  is_member (ANY value, LIST list)   => INT
2

2
Returns true if there is an element of <list> that is completely indistinguishable from <value>. This is much the same operation as "<value> in <list>" except that, unlike `in', the `is_member()' function does not treat upper- and lower-case characters in strings as equal.
2

2
Raises E_ARGS if two values are given or if more than two values are given. Raises E_TYPE if the second argument is not a list. Otherwise returns the index of <value> in <list>, or 0 if it's not in there.
2

2
  is_member(3, {3, 10, 11})                 => 1
2
  is_member("a", {"A", "B", "C"})           => 0
2
  is_member("XyZ", {"XYZ", "xyz", "XyZ"})   => 3
36
5
4
9
2
Syntax:  equal(value1, value2)   => INT
2

2
Returns true if <value1> is completely indistinguishable from <value2>. This is much the same operation as "<value1> == <value2>" except that, unlike ==, the `equal()' function does not treat upper- and lower-case characters in strings as equal.
2

2
Raises E_ARGS if none, one, or more than two arguments are given.
2

2
equal(1, 2)                   => 0
2
equal("ChIcKeN", "chicken")   => 0
2
equal("ABC123", "ABC123")     => 1
36
5
4
10
2
Syntax:  toliteral (<value>)   => STR
2

2
Returns a string containing a MOO literal expression that, when evaluated, would be equal to <value>. If no arguments or more than one argument is given, E_ARGS is raised.
2

2
Examples:
2
toliteral(43)                       =>  "43"
2
toliteral(1.0/3.0)                  =>  "0.33333333333333"
2
toliteral(#17)                      =>  "#17"
2
toliteral(E_PERM)                   =>  "E_PERM"
2
toliteral({"A", "B", {"C", 123}})   =>  "{\"A\", \"B\", {\"C\", 123}}"
36
5
4
3
2
Syntax:  value_bytes(<value>)   => INT
2

2
Returns the number of bytes of the server's memory required to store the given <value>.
36
5
4
3
2
Syntax:  acos (FLOAT <x>)   => FLOAT
2

2
Returns the arc-cosine (inverse cosine) of x, in the range [0..pi]. Raises E_INVARG if x is outside the range [-1.0..1.0].
36
5
4
3
2
Syntax:  asin (FLOAT <x>)   => FLOAT
2

2
Returns the arc-sine (inverse sine) of x, in the range [-pi/2..pi/2]. Raises E_INVARG if x is outside the range [-1.0..1.0].
36
5
4
3
2
Syntax:  atan (FLOAT <y> [, FLOAT <x>])   => FLOAT
2

2
Returns the arc-tangent (inverse tangent) of y in the range [-pi/2..pi/2] if x is not provided, or of y/x in the range [-pi..pi] if x is provided.
36
5
4
12
2
Syntax:  binary_hash (STR bin-string)   => STR
2
         string_hash (STR text)         => STR
2

2
Returns a 32-character hexadecimal string encoding the result of applying the MD5 cryptographically secure hash function to the contents of the string `text' or the binary string `bin-string'. MD5, like other such functions, has the property that, if
2

2
string_hash(x) == string_hash(y)
2

2
then, almost certainly
2

2
equal(x, y)
2

2
This can be useful, for example, in certain networking applications:  after sending a large piece of text across a connection, also send across the result of applying string_hash() to the text; if the destination site also applies string_hash() to the text and gets the same result, you can be quite confident that the large text has arrived unchanged.
36
5
4
2
2
*forward*
2
binary_hash()
36
5
4
3
2
Syntax:  buffered_output_length ([OBJ conn])   => INT
2

2
Returns the number of bytes currently buffered for output to the connection `conn'.  If conn is not provided, returns the maximum number of bytes that will be buffered up for output on any connection.
36
5
4
3
2
Syntax:  call_function (STR func-name, arg, ...)   => value
2

2
Calls the built-in function named `func-name', passing the given arguments, and returns whatever that function returns. Raises E_INVARG if func-name is not recognized as the name of a known built-in function. This allows you to compute the name of the function to call and, in particular, allows you to write a call to a built-in function that may or may not exist in the particular version of the server you're using.
36
5
4
3
2
Syntax:  ceil (FLOAT <x>)   => FLOAT
2

2
Returns the smallest integer not less than x, as a floating-point number.
36
5
4
3
2
Syntax:  connection_options (OBJ conn)   => LIST
2

2
Return a list of (<name>, <value>) pairs describing the current settings of all of the allowed options for the connection <conn>. Raises E_INVARG if <conn> does not specify a current connection and E_PERM if the programmer is neither <conn> nor a wizard.
36
5
4
3
2
Syntax:  connection_option (OBJ conn, STR name)   => value
2

2
Returns the current setting of the option <name> for the connection <conn>. Raises E_INVARG if <conn> does not specify a current connection and E_PERM if the programmer is neither <conn> nor a wizard.
36
5
4
5
2
Syntax:  cos (FLOAT x)   => FLOAT
2
         sin (FLOAT x)   => FLOAT
2
         tan (FLOAT x)   => FLOAT
2

2
Returns the cosine, sine, or tangent of <x>, respectively.
36
5
4
2
2
*forward*
2
sin()
36
5
4
2
2
*forward*
2
sin()
36
5
4
5
2
Syntax:  cosh (FLOAT x)   => FLOAT
2
         sinh (FLOAT x)   => FLOAT
2
         tanh (FLOAT x)   => FLOAT
2

2
Returns the hyperbolic cosine, sine, or tangent of <x>, respectively.
36
5
4
2
2
*forward*
2
sinh()
36
5
4
2
2
*forward*
2
sinh()
36
5
4
3
2
Syntax:  db_disk_size()   => INT
2

2
Returns the total size, in bytes, of the most recent full representation of the database as one or more disk files. Raises E_QUOTA if, for some reason, no such on-disk representation is currently available.
36
5
4
9
2
Syntax:  decode_binary (STR bin-string [, fully])   => LIST
2

2
Returns a list of strings and/or integers representing the bytes in the binary string <bin-string> in order. If <fully> is false or omitted, the list contains an integer only for each non-printing, non-space byte; all other characters are grouped into the longest possible contiguous substrings. If <fully> is proved and true, the list contains only integers, one for each byte represented in <bin-string>. Raises E_INVARG if <bin-string> is not a properly-formed binary string. (See the LambdaMOO programmer's manual on MOO value types for a full description of binary strings.)
2

2
decode_binary("foo")               =>  {"foo"}
2
decode_binary("~~foo")             =>  {"~foo"}
2
decode_binary("foo~0D~0A")         =>  {"foo", 13, 10}
2
decode_binary("foo~0Abar~0Abaz")   =>  {"foo", 10, "bar", 10, "baz"}
2
decode_binary("foo~0D~0A", 1)      =>  {102, 111, 111, 13, 10}
36
5
4
5
2
Syntax:  disassemble (OBJ object, STR verb-desc)   => LIST
2

2
Returns a (longish) list of strings giving a listing of the server's internal "compiled" form of the verb as specified by <verb-desc> on <object>. This format is not documented and may indeed change from release to release, but some programmers may nonetheless find the output of `disassemble()' interesting to peruse as a way to gain a deeper appreciation of how the server works.
2

2
If <object> is not valid, then E_INVARG is raised. If <object> does not define a verb as specified by <verb-desc>, then E_VERBNF is raised. If the programmer does not have read permission on the verb in question, then disassemble() raises E_PERM.
36
5
4
7
2
Syntax:  encode_binary(arg, ...)   => STR
2

2
Each argument must be an integer between 0 and 255, a string, or a list containing only legal arguments for this function. This function translates each integer and string in turn into its binary string equivalent, returning the concatenation of all these substrings into a single binary string. (See the early sections in the LambdaMOO Programmer's Manual on MOO value types for a full description of binary strings.)
2

2
encode_binary("~foo")                     =>  "~7Efoo"
2
encode_binary({"foo", 10}, {"bar", 13})   =>  "foo~0Abar~0D"
2
encode_binary("foo", 10, "bar", 13)       =>  "foo~0Abar~0D"
36
5
4
3
2
Syntax:  exp (FLOAT x)   => FLOAT
2

2
Returns `e' raised to the power of <x>.
36
5
4
3
2
Syntax:  floatstr (FLOAT x, INT precision [, scientific])   => STR
2

2
Converts <x> into a string with more control than provided by either `tostr()' or `toliteral()'. <Precision> is the number of digits to appear to the right of the decimal point, capped at 4 more than the maximum available precision, a total of 19 on most machines; this makes it possible to avoid rounding errors if the resulting string is subsequently read back as a floating-point value. If <scientific> is false or not provided, the result is a string in the form "MMMMMMM.DDDDDD", preceded by a minus sign if and only if <x> is negative. If <scientific> is provided and true, the result is a string in the form "M.DDDDDDe+EEE", again preceded by a minus sign if and only if <x> is negative.
36
5
4
3
2
Syntax:  floor (FLOAT x)   => FLOAT
2

2
Returns the largest integer not greater than x, as a floating-point number.
36
5
4
3
2
Syntax:  flush_input (OBJ conn [, show-messages])   => none
2

2
Performs the same actions as if the connection <conn>'s definied flush command had been received on that connection, i.e., removes all pending lines of input from <conn>'s queue and, if <show-messages> is provided and true, prints a messages to <conn> listing the flushed lines, if any.  See the chapter in the LambdaMOO Programmer's Manual on server assumptions about the database for more information about a connection's defined flush command.
36
5
4
3
2
Syntax:  force_input (OBJ conn, STR line [, at-front])   => none
2

2
Inserts the string <line> as an input task in the queue for the connection <conn>, just as if it had arrived as input over the network. If <at-front> is provided and true, then the new line of input is put at the front of <conn>'s queue, so that it will be the very next line of input processed even if there is already some other input in that queue. Raises E_INVARG if <conn> does not specify a current connection and E_PERM if the programmer is neither <conn> nor a wizard.
36
5
4
17
2
Syntax:  function_info ([STR name])   => LIST
2

2
Returns descriptions of the various built-in functions available on the server. If <name> is provided, only the description of the function with that name is returned. If <name> is omitted, a list of descriptions is returned, one for each function available on the server. E_INVARG is raised if <name> is provided but no function with that name is available on the server.
2

2
Each function description is a list of the following form:
2

2
  {<name>, <min-args>, <max-args>, <types>}
2

2
where <name> is the name of the built-in function, <min-args> is the minimum number of arguments that must be to the function, <max-args> is the maximum number of arguments that can be provided to the function or -1 if there is no maximum, and <types> is a list of <max-args> integers (or <min-args> if <max-args> is -1), each of which represents the type of argument required in the corresponding position. Each type number is as would be returned from the `typeof()' built-in function except that -1 indicates that any type of value is acceptable and -2 indicates that either integers or floating-point numbers may be given. For example, here are several entries from the list:
2

2
  {"listdelete", 2, 2, {4, 0}}
2
  {"suspend", 0, 1, {0}}
2
  {"server_log", 1, 2, {2, -1}}
2
  {"max", 1, -1, {-2}}
2
  {"tostr", 0, -1, {}}
2

2
`Listdelete()' takes exactly 2 arguments, of which the first must be a list (LIST == 4) and the second must be an integer (INT == 0). `Suspend()' has one optional argument that, if provided, must be an integer. `Server_log()' has one required argument that must be a string (STR == 2) and one optional argument that, if provided, may be of any type. `Max()' requires at least one argument but can take any number above that, and the first argument must be either an integer or a floating-point number; the type(s) required for any other arguments can't be determined from this description. Finally, `tostr()' takes any number of arguments at all, but it can't be determined from this description which argument types would be acceptable in which positions.
36
5
4
11
2
Syntax:  listen (OBJ object, point [, print-messages])   => value
2

2
Create a new point at which the server will listen for network connections, just as it does normally. <Object> is the object whose verbs `do_login_command', `do_command', `do_out_of_band_command', `user_connected', `user_created', `user_reconnected', `user_disconnected', and `user_client_disconnected' will be called at appropriate points asthese verbs are called on #0 for normal connections. (See the chapter in the LambdaMOO Programmer's Manual on server assumptions about the database for the complete story on when these functions are called.) <Point> is a network-configuration-specific parameter describing the listening point. If <print-messages> is provided and true, then the various database-configurable messages (also detailed in the chapter on server assumptions) will be printed on connections received at the new listening point. `Listen()' returns <canon>, a `canonicalized' version of <point>, with any configuration-specific defaulting or aliasing accounted for.
2

2
This raises E_PERM if the programmer is not a wizard, E_INVARG if <object> is invalid or there is already a listening point described by <point>, and E_QUOTA if some network-configuration-specific error occurred.
2

2
For the TCP/IP configurations, <point> is a TCP port number on which to listen and <canon> is equal to <point> unless <point> is zero, in which case <canaon> is a port number assigned by the operating system.
2

2
For the local multi-user configurations, <point> is the UNIX file name to be used as the connection point and <canon> is always equal to <point>.
2

2
In the single-user configuration, there can be only one listening point at a time; <point> can be any value at all and <canon> is always zero.
36
5
4
7
2
Syntax:  listeners ()  => LIST
2

2
Returns a list describing all existing listening points, including the default one set up automatically by the server when it was started (unless that one has since been destroyed by a call to `unlisten()'). Each element of the list has the following form:
2

2
  {<object>, <canon>, <print-messages>}
2

2
where <object> is the first argument given in the call to `listen()' to create this listening point, <print-messages> is true if the third argument in that call was provided and true, and <canon> was the value returned by that call. (For the initial listening point, <object> is #0, <canon> is determined by the command-line arguments or a network-configuration-specific default, and <print-messages> is true.)
36
5
4
4
2
Syntax:  log (FLOAT x)     => FLOAT
2
         log10 (FLOAT x)   => FLOAT
2

2
Returns the natural or base 10 logarithm of <x>. Raises E_INVARG if <x> is not positive.
36
5
4
2
2
*forward*
2
log()
36
5
4
3
2
Syntax:  object_bytes (OBJ object)   => INT
2

2
Returns the number of bytes of the server's memory required to store the given <object>, including the space used by the values of all its non-clear properties and by the verbs and properties defined directly on the object. Raises E_INVARG if <object> is not a valid object and E_PERM if the programmer is not a wizard.
36
5
4
3
2
Syntax:  raise (code [, STR message [, value]])   => none
2

2
Raises <code> as an error in the same way as other MOO expressions, statements, and functions do. <Message>, which defaults to the value `tostr(<code>)', and <value>, which defaults to zero, are made available to any `try-except' statements to catch the error. If the error is not caught, then <message> will appear on the first line of the traceback printed to the user.
36
5
4
3
2
Syntax:  resume (INT task-id [, value])   => none
2

2
Immediately ends the suspension of the suspended task with the given <task-id>; that task's call to `suspend()' will return <value>, which defaults to zero. `Resume()' raises E_INVARG if <task-id> does not specify an existing suspended task and E_PERM if the programmer is neither a wizard nor the owner of the specified task.
36
5
4
3
2
Syntax:  task_stack (INT task-id [, include-line-numbers])  => LIST
2

2
Returns information like that returned by the `callers()' function, but for the suspended task with the given <task-id>; the <include-line-numbers> argument has the same meaning as in `callers()'. Raises E_INVARG if <task-id> does not specify an existing suspended task and E_PERM if the programmer is neither a wizard nor the owner of the specified task.
36
5
4
9
2
Syntax:  tofloat (value)   => FLOAT
2

2
Converts the given MOO value into a floating-point number and returns that number. Integers and objects numbers are converted into the corresponding integral floating-point numbers. Strings are parsed as the decimal encoding of a real number which is then represented as closely as possible as a floating-point number. Errors are first converted to integers as in `toint()' and then converted as integers are. `Tofloat()' raises E_TYPE if <value> is a LIST. If <value> is a string but the string does not contain a syntactically-correct number, then `tofloat()' raises E_INVARG.
2

2
  tofloat(34)       =>  34.0
2
  tofloat(#34)      =>  34.0
2
  tofloat("34")     =>  34.0
2
  tofloat("34.7")   =>  34.7
2
  tofloat(E_TYPE)   =>  1.0
36
5
4
2
2
*forward*
2
tonum()
36
5
4
3
2
Syntax:  trunc (FLOAT <x>)   => FLOAT
2

2
Returns the integer obtained by truncating <x> at the decimal point, as a floating-point number. For negative <x>, this is equivalent to `ceil()'; otherwise, it is equivalent to `floor()'.
36
5
4
3
2
Syntax:  unlisten (<canon>)   => none
2

2
Stop listening for connections on the point described by <canon>, which should be the second element of some element of the list returned by `listeners()'. Raises E_PERM if the programmer is not a wizard and E_INVARG if there does not exist a listener with that description.
36
5
4
3
2
Syntax:  value_hash (<value>)   => STR
2

2
Returns the same string as `string_hash(toliteral(<value>))'; see the description of `string_hash()' for details.
36
5
4
3
2
Syntax:  load_server_options ()   => none
2

2
After modifying properties on $server_options, wizards must call `load_server_options()'.  Changes made may not take effect until this function is called.  This allows the server to cache option values internally; this significantly speeds up built-in function invocation.  If the programmer is not a wizard, then E_PERM is raised.
36
5
4
8
2
Syntax:  verb_cache_stats ()   => LIST
2
         log_cache_stats ()    => none
2

2
As of version 1.8.1, the server caches verbname-to-program lookups to improve performance.  These functions respectively return or write to the server log file the current cache statistics.  For `verb_cache_stats' the return value will be a list of the form
2

2
    {<hits>, <negative_hits>, <misses>, <table_clears>, <histogram>}
2

2
though this may change in future server releases.  The cache is invalidated by any builtin function call that may have an effect on verb lookups (e.g., `delete_verb()').
36
5
4
2
2
*forward*
2
verb_cache_stats()
36
5
5
36
5
4
1
2
builtin-index
36
1
5
36
4
4
1
2
Builtin Function Help
36
5
4
32
2
A help database (in the sense of anything that is usable by $player:help()) is any object having the following two verbs:
2

2
  :find_topics(string)
2
     returns a list of strings or some boolean false value.
2

2
  :get_topic(string)
2
     given one of the strings returned by :find_topics this either
2
     returns a list of strings (text to be spewed to the player) or
2
     returns 1 to indicate that it has already taken care of printing
2
     information to the player.
2

2
$player:help() consults any .help properties that exist on the player, its ancestors, player.location and its ancestors (in that order).  These properties are assumed to have values that are objects or lists of objects, each object itself assumed to be a help database in the above sense.  The main help database ($help) is placed at the end of the list of databases to be consulted.
2

2
The Generic Help Database (this object) is the standard model help database of which the actual help database itself ($help) is an instance.  On help databases of this type, every help topic has a corresponding property, interpreted as follows:
2

2
this.(topic) = string           - one-line help text.
2
this.(topic) = {"*verb*",@args} - call this:verb(@args) to get text
2
this.(topic) = any other list   - multi-line help text
2

2
For the {"*verb*",...} form, the current verbs available are
2

2
  {"*forward*", topic2, @rest}   
2
     - get topic2 help text and then append rest.  
2
       rest may, in turn, begin with a "*verb*"...
2

2
  {"*subst*", @lines} 
2
     - all occurences of %[exp] in lines are replaced with value of exp.  
2
       exp is assumed to evaluate to a string.  Evaluation is done using 
2
       $no_one's permissions so exp can only refer to public information.
2

2
  {"*index*"}
2
     - returns a list of all topics in this database, arranged in columns.
36
5
4
2
0
89775
0
1084848672
36
1
#29
New-Prog-Log

0
2
46
-1
34
45
-1
14
7
init_for_core
2
173
-1
receive_message
2
173
-1
display_seq_headers display_seq_full
2
173
-1
from_msg_seq
2
173
-1
to_msg_seq
2
173
-1
%to_msg_seq subject_msg_seq
2
173
-1
%from_msg_seq
2
173
-1
1
keyword
23
2
PROGRAMMER
2
5
4
0
2
5
0
0
36
1
4
0
36
0
0
1
2
5
2
%n (%#) can't send to moderated list %t (%[#t]) directly.
2
5
4
0
2
5
4
0
2
5
4
1
1
2
36
1
4
0
36
1
0
2592000
36
1
0
0
36
1
4
0
36
0
5
2
5
5
2
5
4
0
36
1
5
36
0
5
36
0
5
36
0
5
2
4
4
3
2
New-Prog-Log
2
New_Prog_Log
2
NPL
36
1
2
Record of who's been made a @programmer.
2
5
4
2
0
6043
0
1084848672
36
1
#30
Generic Help Database

144
36
-1
-1
-1
1
60
-1
12
find_topics
2
173
-1
get_topic
2
173
-1
sort_topics
36
173
-1
columnize
36
173
-1
forward pass
36
173
-1
subst
36
173
-1
index
36
173
-1
initialize
2
173
-1
verbdoc
2
173
-1
dump_topic
2
173
-1
objectdoc
36
173
-1
find_index_topics
36
173
-1
2
index
index_cache
6
4
0
36
5
4
0
36
1
5
36
4
4
1
2
Generic Help Database
36
5
2
A help database of the standard form in need of a description. See `help $generic_help'...
36
5
4
2
0
9501
0
1084848672
36
1
#31
Generic Guest

16
36
-1
-1
-1
88
-1
4
22
boot
2
173
-1
disfunc
2
173
-1
defer
2
173
-1
mail_catch_up
2
173
-1
create
36
89
-2
eject
36
173
-1
log
36
173
-1
confunc
2
173
-1
log_disconnect
2
173
-1
@last-c*onnection
2
29
-1
my_huh
2
173
-1
@read @peek
36
89
-2
set_current_folder
36
173
-1
init_for_core
2
173
-1
set_name set_aliases
2
173
-1
extra_confunc_msg
2
173
-1
do_reset
2
173
-1
@request
2
89
-2
connection_name_hash
2
173
-1
@subscribe*-quick @unsubscribed*-quick
2
89
-2
current_folder
2
173
-1
notify
2
173
-1
5
default_gender
default_description
request
extra_confunc_msg
free_to_use
90
2
neuter
36
1
4
1
2
By definition, guests appear nondescript.
36
1
0
0
2
0
2

36
5
0
1
36
1
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
1
5
36
1
5
36
1
5
36
1
5
36
1
5
36
1
5
36
1
5
36
1
5
36
5
5
36
5
5
36
5
5
36
1
5
36
5
5
36
4
5
36
5
5
36
5
2
%t (%[#t]) is a guest character.
36
5
4
0
36
5
5
36
5
5
36
5
5
36
4
5
36
4
4
2
1
90
1
89
36
1
5
2
0
5
2
0
5
2
1
0
0
36
5
5
36
5
5
36
1
5
36
1
5
36
0
5
36
1
5
2
1
0
79
36
1
5
36
4
5
2
0
5
2
0
5
36
5
5
36
5
0
30
36
4
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
2
1
0
0
36
0
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
1
62
36
5
0
0
2
0
5
36
5
0
1
36
5
5
36
5
5
36
5
5
2
1
4
4
0
0
0
0
0
0
0
0
36
0
5
2
0
5
2
0
5
36
4
4
1
2
Generic Guest
2
1
4
1
2
By definition, guests appear nondescript.
36
5
4
2
0
12606
0
1084848672
36
1
#32
Mr. Spell

16
36
-1
-1
-1
37
-1
16
18
description
36
173
-1
valid
36
173
-1
get_input
2
173
-1
guess_words
36
173
-1
find_exact
36
173
-1
sort
36
173
-1
_every_key
36
173
-1
_suspend
36
173
-1
insert delete delete2
36
173
-1
add_word
36
173
-1
remove_word
36
173
-1
submit
36
173
-1
purge_entire_database
36
173
-1
random
36
173
-1
help_msg
36
13
-1
init_for_core
2
173
-1
clear-submitted
36
141
4
proxy_for_core
2
173
-1
11863
 worthl
 drive
 driver
 uns
 topi
 frien
 computa
entries
 activa
 messa
 locatio
 setti
 sett
 creati
 lambd
 rigoro
 rigo
 programmer
 harde
 redef
 redem
 keybi
 keyb
 buffe
 artifice
 horizont
 vertica
 automati
 trunc
 redr
 scrol
 connecti
 emac
 fris
 cyni
 interse
 corner
 headlin
 keyw
 tablesp
 irritat
 bonu
 intere
 graz
 dozen
 pastu
 rollin
 fields
 proofr
 foote
 locati
 times
 inser
 clipb
 savi
 unk
 faili
 faile
 missp
 playe
 zigz
 zes
 zer
 zen
 zea
 zealo
 Ze
 Zan
 zag
 za
 Yv
 Yuk
 Yug
 Yuc
 yu
 yt
 yout
 yourse
 yours
 Youngs
 youn
 Yos
 York
 yor
 yon
 Yoke
 yok
 yog
 Yod
 yip
 yi
 yest
 yes
 yeo
 yell
 yello
 yel
 yeas
 year
 yaw
 yarm
 Yard
 yar
 yap
 Yank
 yan
 Yam
 Yal
 Yak
 yac
 yachts
 ya
 xyle
 xy
 Xero
 Xer
 xen
 xe
 X
 wyn
 Wya
 Wy
 Wu
 wron
 Wrong
 wrongd
 wro
 write
 writ
 wris
 wrin
 wrig
 wri
 wres
 wrec
 wrea
 wreat
 wre
 wrat
 wrap
 wra
 wr
 wov
 woul
 wou
 Wort
 worsh
 worse
 wors
 worr
 worm
 worl
 worksh
 works
 workp
 workma
 workm
 workb
 Words
 wool
 woody
 woodw
 woods
 woodr
 woodla
 Woodl
 woodc
 Wood
 woo
 wonde
 wond
 won
 womb
 woma
 wolv
 Wolf
 wol
 wok
 woe
 witt
 withs
 withh
 withe
 withdra
 withd
 witc
 with
 wisp
 wish
 wise
 wis
 wire
 wiretapp
 wiret
 wirem
 wir
 Winte
 Wint
 wins
 Winnip
 Winni
 Winn
 wink
 wingm
 wing
 winem
 wine
 Winds
 windo
 windb
 wind
 Winch
 winc
 win
 Wilso
 Wils
 Wilm
 willow
 willo
 Willia
 Williams
 Willi
 Willa
 Will
 Wilkin
 Wilki
 Wilk
 Wilh
 wilf
 Wile
 wildc
 wild
 Wil
 wiggl
 wiggi
 Wigg
 wig
 wie
 widt
 wido
 widg
 wide
 wid
 wick
 wic
 whos
 whoo
 whom
 whole
 wholes
 whol
 who'
 whiz
 Whitt
 whiteh
 white
 whit
 whist
 whis
 whirl
 whir
 whipp
 whip
 whin
 whims
 whim
 whic
 whet
 wherew
 where'
 whereo
 wherea
 wher
 when
 whel
 wheez
 wheel
 whee
 Whea
 what'
 what
 Whar
 Whal
 wha
 wet
 western
 weste
 Wesl
 West
 Wert
 Were
 wer
 Wend
 Wen
 Welles
 Welle
 well
 Weld
 welc
 Wel
 weir
 Wein
 weight
 weig
 Wei
 weed
 week
 wed
 we'
 Web
 weathers
 weat
 weari
 wear
 weap
 wealt
 weal
 weak
 wea
 ways
 wayl
 wax
 wave
 wavel
 wavef
 wav
 watt
 waters
 waterm
 Waterl
 waterf
 Wate
 watchma
 watchm
 watc
 Wat
 waste
 wast
 wasp
 washbo
 washb
 wash
 wart
 warra
 warr
 warp
 warm
 wareh
 ware
 wardr
 ward
 war
 wap
 wang
 wand
 want
 waltz
 Walte
 Walt
 wallo
 walle
 Walla
 wall
 walko
 walk
 Waldo
 Wald
 Wal
 wakef
 Wak
 Wait
 wais
 Wain
 wai
 Wah
 wagg
 wag
 waf
 wad
 wack
 wac
 vu
 vow
 Vouc
 vou
 vot
 vorti
 vort
 vora
 vor
 volunta
 volun
 volume
 volum
 volu
 Voltai
 volta
 Volt
 voll
 volcani
 volc
 vol
 voic
 vog
 voca
 vocal
 vocab
 vocabu
 voc
 voi
 Vl
 vivi
 Viva
 vivaci
 vivac
 viv
 vitrio
 vitri
 vitr
 vita
 vit
 visit
 visio
 Visi
 viscou
 visco
 visce
 visc
 visa
 vis
 viru
 virtuos
 virtuosi
 virtuo
 virt
 virg
 Virgi
 Virgini
 virgin
 vir
 viole
 viola
 vio
 vint
 vine
 vind
 vin
 villa
 villai
 vill
 vil
 vii
 vigi
 vigila
 vig
 viewp
 Vietn
 Viet
 Vienn
 Vien
 view
 video
 vide
 vid
 victoria
 Victori
 Victo
 vict
 Vick
 vicin
 vici
 vice
 vica
 vic
 vibr
 vibrat
 vib
 via
 vie
 vexa
 vex
 veteri
 vete
 vet
 vestig
 vesti
 vest
 ves
 vertic
 verti
 verte
 verteb
 vert
 versa
 versat
 Vers
 Vero
 Verna
 vern
 vermo
 vermi
 verm
 verit
 veri
 verdi
 Verd
 verbo
 verba
 verb
 veran
 verac
 vera
 Ver
 Venu
 venture
 ventu
 vent
 venom
 veno
 Veni
 veng
 Venet
 venera
 vener
 vene
 vend
 ven
 velv
 velo
 vell
 vela
 Vel
 vei
 vehi
 veh
 vege
 veg
 veer
 vee
 vec
 ve
 Vaug
 Vaud
 Vau
 Vat
 Vass
 vase
 vas
 vari
 varie
 varian
 varia
 var
 vap
 vani
 Vander
 Vande
 Vand
 Vanc
 van
 vam
 valu
 vall
 valid
 vali
 Valer
 valen
 valedicto
 valed
 vale
 val
 vain
 vai
 vagi
 vaga
 vag
 Vad
 vacuol
 vacuo
 vacu
 vacc
 vaca
 vacat
 vac
 utt
 uto
 utili
 util
 uti
 uter
 ute
 Ut
 usurp
 usur
 usua
 USI
 USC
 usa
 U.
 Ursu
 Urs
 urina
 urin
 uri
 urge
 urgen
 urg
 uret
 ure
 Urb
 ura
 Urani
 uran
 ur
 upw
 upto
 Upt
 upsta
 upstat
 upst
 upsi
 upse
 ups
 uproa
 upro
 upri
 upr
 uppercl
 upperc
 upp
 upl
 uphols
 upho
 uphe
 uph
 upd
 upbr
 upb
 unive
 univa
 Univ
 unite
 unitar
 unita
 unit
 unis
 unip
 unim
 unif
 unid
 unde
 underc
 und
 unc
 unb
 unan
 una
 umb
 umbra
 umbr
 umbi
 um
 ulti
 ult
 ulc
 ul
 Ukr
 Uk
 ug
 ub
 tyra
 tyrann
 Tyranni
 tyr
 typog
 typo
 typi
 typho
 Typh
 type
 typew
 typesett
 typese
 types
 Typ
 two
 twitc
 twit
 twis
 twir
 twin
 twil
 twig
 twi
 twen
 twel
 tweed
 twee
 twe
 twa
 TW
 TV
 tuto
 tut
 Tusk
 tusc
 Tuscan
 Tus
 turt
 turp
 turno
 turne
 turna
 turk
 Turi
 turbo
 turbin
 turbid
 turbi
 turb
 turn
 tup
 Tunis
 Tuni
 tungs
 tung
 tune
 tun
 tumu
 tumb
 tum
 tula
 tul
 tug
 tuf
 Tuck
 Tuc
 tubu
 tuber
 tube
 tub
 TT
 tsa
 ts
 trut
 trust
 trus
 trun
 trumpe
 trump
 Trum
 Trud
 truc
 trua
 Trout
 troub
 troubles
 troubl
 trou
 tropos
 tropo
 troph
 trop
 trom
 trol
 trod
 tro
 trivia
 trivi
 triv
 trium
 triumpha
 triu
 trit
 trist
 Tris
 tripo
 triple
 Triplet
 tripl
 trip
 trio
 trini
 trinit
 trin
 trime
 trim
 trilo
 trill
 trilli
 tril
 trigo
 trig
 triflu
 trif
 trie
 trid
 trick
 trichl
 trich
 Tric
 tribut
 tribun
 tribu
 tribes
 tribe
 trib
 Triang
 Triangula
 triangu
 trian
 tria
 tri
 tres
 trend
 trenc
 trenche
 tren
 trem
 tree
 trea
 treat
 treasu
 treaso
 treas
 tread
 treac
 tre
 travers
 traversa
 traver
 travel
 trave
 trav
 trau
 Trash
 tras
 trapezo
 trape
 trap
 transver
 transv
 transshipp
 transs
 transpos
 transpor
 transpo
 transpl
 transpi
 transpa
 transp
 transo
 transmu
 transmi
 transmitte
 transmitta
 transmitt
 transmit
 transmis
 transm
 transl
 transiti
 Transit
 transi
 transg
 transfu
 transfo
 transfi
 transfe
 transferr
 transfere
 transf
 transe
 transd
 transcrip
 transcr
 transco
 transce
 transcende
 transcen
 transc
 transa
 trans
 tranq
 tran
 your
 tramp
 you'
 you
 yo
 tram
 ye
 yea
 y
 traito
 trait
 trainm
 work
 word
 traine
 wor
 wom
 wo
 trail
 wit
 train
 tragi
 wi
 trage
 trag
 who
 traffick
 traf
 whi
 whe
 tradi
 trades
 wh
 wes
 trade
 wee
 tract
 we
 wa
 track
 trace
 way
 was
 trac
 Toy
 toxic
 wan
 w
 vo
 tox
 townsm
 vi
 va
 v
 towns
 town
 usu
 towh
 use
 us
 up
 towe
 un
 unio
 towa
 uni
 u
 ty
 tour
 touc
 tur
 tu
 tou
 try
 tru
 totem
 tote
 tra
 trai
 trad
 tota
 tr
 tow
 tot
 tos
 tortu
 torto
 tort
 tors
 thing
 Torr
 torp
 Toroi
 telephone
 toro
 torn
 teams
 take
 Tor
 suppor
 Tops
 topol
 style
 topo
 statesm
 top
 toothp
 standa
 spend
 tooth
 toot
 specifi
 spaces
 sovi
 tool
 sourc
 too
 tons
 someti
 smalle
 toni
 size
 situa
 tong
 sincer
 ton
 tomog
 tomo
 tomm
 serve
 tomb
 send
 toma
 tom
 seem
 secur
 toll
 toler
 tole
 Tol
 say
 tok
 toile
 rul
 toi
 revie
 togg
 tog
 retu
 tof
 TOE
 resou
 require
 todd
 Toda
 tod
 requir
 Toba
 remai
 Tob
 toas
 relatio
 relati
 relate
 toad
 toa
 to
 relat
 regio
 TN
 recor
 recen
 Titu
 receive
 receiv
 reas
 titi
 titani
 reache
 reach
 tita
 Tit
 raisi
 tire
 tira
 raise
 Tir
 quickl
 tipp
 provide
 tip
 tint
 proposi
 propose
 tink
 programm
 ting
 profit
 productiv
 producti
 product
 Tin
 timo
 produci
 produce
 processi
 probab
 time
 price
 timbe
 timb
 tim
 presen
 tilt
 possi
 populat
 til
 Tigr
 tigh
 tig
 tif
 plann
 tie
 tide
 performa
 tid
 tickl
 tick
 tic
 particular
 tibe
 Tibet
 Tib
 Ti
 ours
 thyroi
 organiz
 thyro
 thyr
 order
 thym
 thy
 operati
 operate
 thw
 open
 Thur
 thunders
 thunderb
 thun
 thumb
 number
 thum
 thul
 numbe
 numb
 thug
 thu
 thrus
 thru
 never
 throw
 throu
 name
 thron
 names
 ms
 mrs
 throa
 thro
 movi
 move
 thrif
 thri
 month
 thres
 three
 threa
 threat
 thread
 thre
 thra
 thr
 membe
 thous
 meeti
 thought
 thoug
 medica
 thou
 matter
 matte
 markete
 thoro
 fucke
 fuck
 fuch
 Thorn
 manager
 thori
 Thor
 thom
 make
 makes
 Tho
 thist
 this
 thirte
 thirt
 longe
 locate
 thirs
 thir
 locat
 livin
 thio
 thin
 Thim
 thiev
 thie
 thicke
 thic
 thi
 leadsm
 leader
 they'
 they
 Thet
 larges
 these
 thes
 keys
 Thermo
 keep
 thermi
 therm
 thereu
 its
 issue
 theret
 involve
 involv
 thereo
 investo
 there'
 therefo
 interna
 theref
 inflati
 therea
 individual
 there
 thera
 increase
 ther
 include
 includ
 theore
 theoret
 theor
 theol
 Theod
 Theo
 thenc
 then
 them
 theis
 thei
 thea
 havi
 The
 tha
 that'
 that
 thank
 than
 give
 thall
 thal
 Thai
 getty
 Th
 textur
 general
 textu
 text
 texa
 Tex
 tetrahedra
 tetrah
 forme
 tetraf
 tetr
 tet
 followe
 testim
 testic
 testi
 find
 testam
 figure
 testa
 test
 tess
 feel
 tes
 territ
 terrif
 eyes
 experienc
 terri
 terre
 Terra
 executiv
 terr
 examp
 terp
 europea
 tern
 termin
 estat
 termina
 estab
 termi
 term
 espe
 employe
 tera
 ter
 electroni
 tep
 tenu
 effo
 educat
 tenta
 tent
 economic
 tensio
 earni
 tensi
 tens
 earl
 teno
 doors
 tenne
 Tenn
 dolla
 does
 tene
 tender
 tende
 tend
 deve
 tenac
 tena
 ten
 describe
 describ
 tempt
 departm
 deman
 tempor
 tempo
 defensi
 Temple
 templ
 tempe
 decisio
 tempes
 temper
 temperat
 decide
 tempera
 temp
 tem
 tell
 custome
 telev
 telety
 telet
 create
 teles
 telepro
 telepr
 countri
 telephon
 teleph
 corporati
 telepa
 telep
 corporat
 teleo
 telegrap
 teleg
 continui
 Telec
 continue
 tele
 tel
 consumer
 Tek
 Teh
 consume
 constructi
 teethe
 teeth
 teet
 computer
 compute
 teen
 companio
 tee
 tedi
 communicati
 Ted
 communicat
 tech
 technoc
 techno
 comin
 Technic
 techni
 techn
 tec
 tea
 citiz
 teasp
 tease
 teas
 tear
 team
 teak
 teac
 te
 cause
 taxp
 taxo
 taxi
 buy
 tax
 taw
 buildi
 tav
 taut
 tau
 bring
 tattl
 tatt
 tate
 tat
 bette
 taste
 tast
 benefit
 tass
 believ
 Task
 tas
 Tarta
 tart
 Tarr
 tarpa
 tarp
 avera
 avai
 taran
 tara
 tar
 associati
 tapp
 associat
 tapi
 aske
 tape
 tap
 arms
 Tao
 announce
 tanta
 annou
 tantal
 Tant
 amou
 american
 alw
 tangen
 tange
 tang
 Tana
 tan
 Tamp
 additio
 adden
 activ
 actio
 accordi
 tamar
 tama
 tam
 tally
 Tall
 talk
 tali
 tale
 talc
 tal
 takeo
 tak
 tail
 tai
 Tah
 tag
 Taff
 taf
 tad
 tactic
 tacti
 tact
 tack
 Taci
 tach
 tachi
 tac
 tabul
 tabu
 table
 tables
 tablea
 tabl
 tab
 ta
 T
 systemi
 sys
 syru
 syring
 syrin
 syri
 Syr
 synthes
 synth
 synta
 synt
 synops
 synop
 synon
 syno
 synergi
 syne
 syndi
 synd
 synch
 synchron
 sync
 syna
 synaps
 synap
 syn
 sympt
 sympo
 symph
 sympa
 symp
 symb
 symbo
 symbi
 sym
 Sylva
 Sylv
 Syll
 syllo
 sylla
 syllabi
 syl
 syco
 syc
 syb
 Sy
 swu
 sword
 swor
 swo
 Switz
 Switc
 switchb
 swit
 swish
 swis
 swir
 swing
 swin
 swim
 swig
 swi
 swelt
 swel
 sweet
 sweep
 swee
 Swede
 Swed
 Swea
 sweat
 swe
 swath
 swat
 Swarth
 Swart
 swar
 swank
 swan
 swamp
 swam
 swal
 swag
 swab
 swa
 sw
 suze
 suz
 Sut
 sust
 suspi
 suspe
 suspens
 suspen
 susp
 susc
 Susa
 Sus
 survi
 surve
 survey
 surv
 surt
 surro
 surre
 surr
 surp
 surm
 surj
 surge
 surg
 surfa
 surf
 sure
 surc
 sur
 supre
 supra
 supr
 suppressi
 suppr
 suppos
 suppo
 suppl
 supple
 supp
 superv
 superst
 supers
 supern
 superl
 superi
 superfl
 superf
 superb
 supe
 sup
 suntann
 sunt
 sunshi
 sunsh
 suns
 Sunn
 sunl
 sunk
 sung
 sunf
 sunde
 sund
 sunbu
 sunb
 sun
 summi
 summe
 Summa
 summat
 summar
 summ
 Sume
 Suma
 sum
 sulta
 sult
 Sull
 sulk
 sulf
 sulfu
 sulfi
 sulfa
 sul
 suit
 suic
 sui
 suggesti
 sugg
 sug
 suffr
 Suffo
 suffic
 suffi
 suf
 sue
 Suda
 Sud
 suck
 succ
 succu
 succe
 successi
 succes
 suc
 subv
 subu
 subtr
 subtle
 subtl
 subte
 subt
 subsume
 subsu
 substituti
 substitut
 substi
 substa
 substantia
 subst
 subsis
 subsid
 subsi
 subs
 submitt
 submi
 subm
 subl
 subje
 subj
 sub
 su
 Styr
 styli
 styl
 sty
 Stut
 stur
 stupe
 stupef
 stup
 stun
 stump
 stum
 stuf
 studi
 stude
 Stud
 stuc
 stubb
 stub
 Stu
 struc
 struct
 stru
 strop
 strong
 stron
 Strom
 strob
 stro
 striv
 strip
 strin
 strik
 strid
 strict
 strick
 Stric
 stri
 stres
 strep
 streng
 stren
 stree
 strea
 stream
 stre
 stra
 straw
 strato
 strategi
 strate
 strata
 strat
 strang
 stran
 straig
 strai
 strab
 str
 stowa
 stow
 story
 storm
 store
 stor
 stop
 stoo
 stone
 stonewa
 stonew
 ston
 stom
 stole
 stol
 Stok
 stoi
 stoc
 Stockh
 stock
 sto
 Stir
 stip
 stink
 sting
 stin
 stimula
 stimulat
 stim
 still
 stile
 stil
 stig
 stiff
 stif
 stic
 stickl
 sti
 Steward
 stewa
 stew
 Stevens
 Steven
 stev
 Stet
 stern
 stere
 ster
 Stephens
 Stephe
 Stepha
 steph
 step
 stenog
 steno
 stenc
 sten
 stel
 Stei
 steepl
 steep
 Steel
 stee
 stea
 stear
 steam
 stealt
 steal
 stead
 ste
 stay
 Staun
 stau
 statut
 statue
 statu
 stationa
 statio
 stati
 state
 statesma
 states
 stater
 Stat
 stas
 starv
 start
 starli
 starl
 Stark
 starc
 star
 Stapl
 staph
 stap
 stann
 stand
 stanch
 stanc
 stan
 stamp
 stami
 Stam
 stall
 stale
 stal
 stairw
 stair
 stai
 stagn
 stage
 stag
 Staf
 stad
 stac
 stab
 stablem
 stabl
 sta
 st
 SS
 squirm
 squire
 squir
 squi
 squee
 squea
 squeak
 sque
 squa
 squaw
 squatte
 squatt
 squat
 squas
 squal
 squad
 sq
 spy
 zig
 sput
 spur
 spun
 spum
 spu
 spru
 sprou
 Spro
 spring
 springt
 sprin
 sprig
 spri
 spre
 spra
 spr
 spou
 spot
 sportswrite
 sportswr
 sportsw
 sportsm
 sports
 sport
 spor
 spoon
 spook
 spoo
 spont
 spong
 spon
 spokesm
 spokes
 spoke
 spok
 Spoi
 spo
 splu
 splo
 splint
 splin
 spli
 splen
 splee
 sple
 spla
 splay
 splas
 spl
 spite
 spit
 spiri
 spir
 spino
 spinn
 spina
 spin
 spil
 spike
 spik
 spid
 spic
 spice
 spi
 sphero
 sphe
 spha
 sph
 Sperm
 Zu
 Zoro
 Zor
 zoo
 zom
 Zod
 zo
 zi
 zir
 zip
 Zio
 zin
 z
 sper
 spenc
 Spen
 spel
 speed
 spee
 specu
 spectros
 spectrog
 spectrograp
 spectro
 spectra
 spectr
 Specta
 spectac
 spect
 speck
 specif
 specie
 speci
 spec
 spea
 spear
 speak
 spe
 spa
 spay
 spat
 spas
 Spart
 spark
 spar
 spani
 span
 space
 spac
 sp
 soy
 sow
 sove
 sov
 southwe
 southw
 souther
 southea
 southe
 South
 sout
 sour
 soun
 soul
 soug
 sou
 sort
 sorro
 sorr
 Soren
 Sore
 sor
 sophom
 sophoc
 Sopho
 Sophi
 sophist
 sophis
 Soph
 Sop
 sooths
 sooth
 soot
 soo
 sonor
 Sono
 sonn
 songb
 song
 sona
 son
 Somm
 somew
 somet
 Somers
 somer
 someo
 someb
 some
 somb
 soma
 Somal
 som
 solve
 solv
 solut
 solu
 Solo
 solita
 solit
 solid
 solic
 solicito
 soli
 sole
 soldi
 sold
 sola
 sol
 soi
 softw
 soft
 sof
 sod
 Socr
 socke
 sock
 socio
 Socie
 socia
 soci
 soc
 sobr
 sob
 soaps
 soap
 soa
 so
 Sny
 snugg
 snug
 snuf
 snu
 snowf
 snow
 snor
 snoop
 snoo
 snob
 snobb
 sno
 snipp
 snip
 sniff
 snif
 Sni
 snee
 snea
 sne
 sna
 snar
 snapp
 snap
 snak
 snag
 sn
 Smy
 smut
 smug
 smud
 smu
 smoot
 smoo
 smoke
 smokes
 smok
 smo
 smith
 smit
 smi
 smel
 sme
 sma
 Smal
 sm
 slur
 slum
 slugg
 slug
 slu
 slow
 Slove
 slov
 slou
 sloth
 slot
 slop
 sloga
 slog
 sloa
 Slo
 sliv
 slit
 slipp
 slip
 slin
 slim
 slid
 slic
 sli
 slei
 sleet
 sleep
 slee
 sled
 sledg
 sle
 sla
 slavi
 slave
 slav
 slau
 slate
 slat
 slap
 sland
 slan
 slac
 sl
 skyw
 skyli
 skyl
 Sky
 skul
 skull
 sku
 skit
 skir
 skip
 skin
 skimp
 skim
 skil
 skid
 ski
 sket
 skel
 ske
 ska
 skate
 sk
 siz
 sixte
 sixt
 six
 situ
 sit
 Sisy
 Sist
 sis
 sire
 sir
 sinuso
 sinus
 sinu
 sink
 sini
 singlet
 singl
 Singa
 sing
 sinew
 sine
 Since
 sinc
 Sin
 simult
 simu
 simplic
 simpli
 simple
 simpl
 simp
 Simo
 Simm
 simi
 sim
 Silv
 silt
 sill
 silk
 silico
 silici
 silica
 sili
 sila
 sil
 Signo
 signi
 signa
 sign
 Sigm
 sigh
 sights
 sight
 sig
 sien
 Sieg
 Siege
 Sie
 side
 sidewi
 sidewa
 sidewal
 sidew
 sidest
 sides
 sider
 sidem
 sideli
 sidel
 sideb
 sid
 sickl
 sick
 Sici
 Sic
 sibl
 Sib
 sia
 Siam
 SI
 Shy
 shutt
 shuto
 shut
 shun
 shuf
 shud
 shu
 shrun
 shrug
 shrub
 shru
 shro
 shriv
 shrink
 shrin
 shril
 shri
 shrew
 Shre
 shra
 shr
 showp
 showm
 show
 shov
 shoul
 shou
 shot
 shorts
 shortc
 short
 shore
 shor
 shop
 shoo
 shoe
 shod
 Shoc
 sho
 shive
 shiv
 shirt
 shir
 shipma
 shipm
 Shipl
 shipbu
 shipb
 ship
 shin
 shim
 Shil
 shif
 shi
 Sherw
 sherr
 sheri
 sher
 shep
 shen
 Shelt
 Shell
 she'
 Shel
 Shei
 sheep
 shee
 Shed
 sheat
 Shear
 shea
 She
 sha
 shaw
 shav
 Shatte
 shat
 sharpe
 Sharp
 share
 shar
 Shap
 shant
 shan
 shamef
 shame
 sham
 shallo
 shall
 shal
 shake
 Shakespeare
 Shakes
 shak
 shagg
 shag
 Shaf
 shado
 shad
 shac
 sh
 sextu
 sext
 Sex
 Sewa
 sew
 Seve
 severa
 sever
 seven
 sevente
 sevent
 sev
 set
 ses
 servo
 servic
 servicem
 servi
 serv
 serpent
 serp
 seria
 seri
 serg
 serend
 sere
 Sera
 serap
 ser
 sequi
 seque
 seques
 sequen
 sequ
 seq
 sepu
 septu
 septi
 septe
 septa
 sept
 sepa
 separ
 sep
 senti
 sente
 sent
 sensu
 senso
 sensi
 sens
 Seno
 seni
 Sene
 sena
 sen
 Semit
 Semina
 seminar
 semin
 semi
 sema
 sem
 sell
 self
 seleni
 selena
 selen
 Selec
 selectm
 sele
 sel
 seiz
 seismog
 seismo
 seis
 sei
 segr
 Segm
 seg
 seep
 seed
 see
 seduc
 seduct
 sedu
 sedit
 sedim
 sedimenta
 sedi
 sede
 seda
 sed
 secu
 sect
 secreti
 secretari
 secreta
 secret
 secr
 seco
 secl
 sece
 sec
 seaw
 seat
 seaso
 seas
 searc
 sear
 sean
 seam
 seal
 seag
 seaf
 sea
 se
 Scyt
 scy
 scut
 scurr
 scur
 sculptu
 sculpt
 sculp
 scul
 scuf
 scu
 scrut
 scrupu
 scrup
 scru
 scro
 scriptu
 script
 scrip
 scrim
 scrib
 scri
 screwb
 screw
 screen
 screec
 scree
 scre
 scra
 scraw
 scrat
 scrap
 scram
 scr
 scour
 scou
 Scott
 Scots
 scot
 scorp
 scorn
 score
 scor
 scop
 scoo
 sco
 scl
 scient
 scie
 sci
 Schwa
 Schw
 Schuy
 Schum
 Schul
 Schu
 Schr
 school
 schoolm
 schoolg
 schoolb
 schoo
 schol
 Scho
 Schna
 schn
 Schm
 Schli
 schl
 schizop
 schiz
 schis
 schi
 schema
 schemat
 schem
 sche
 scha
 Sch
 scen
 scene
 sce
 scatt
 scat
 scarl
 scarf
 scare
 Scar
 scapu
 scap
 scant
 scandi
 Scanda
 scand
 scan
 scam
 scala
 scal
 scab
 sca
 sc
 saxon
 Saxo
 sax
 sawt
 sawf
 saw
 Savoy
 savo
 sava
 savan
 Savag
 sav
 saut
 Saul
 Saud
 Sauc
 sauce
 sau
 Saturn
 Satura
 saturat
 satu
 satisfa
 satis
 satir
 satia
 sati
 sata
 sat
 Sask
 Sash
 sas
 sars
 sard
 sarco
 sarca
 sarc
 sara
 Sar
 sapp
 sapi
 sap
 Santa
 Sant
 sanitar
 sanit
 sani
 sanguine
 sangu
 sang
 sandpi
 sandp
 Sande
 sandb
 sanda
 sand
 sancti
 sanct
 sanch
 Sanc
 sanat
 sana
 San
 Samu
 Samp
 samo
 sam
 salva
 Salvat
 salvag
 salv
 saluta
 salut
 salu
 salt
 saloo
 salo
 salm
 sall
 saliv
 Salis
 salin
 Sali
 salesm
 Sales
 Sale
 salam
 sala
 Sal
 sail
 Sai
 Sagit
 sagi
 sage
 sagac
 saga
 sag
 safe
 saf
 sadis
 sadi
 saddl
 sadd
 sad
 sacril
 sacrif
 sacri
 sacra
 Sacram
 sacr
 Sach
 sac
 Sabi
 Sabb
 sab
 sa
 s
 Ryd
 Ry
 Rutl
 Ruthe
 ruth
 rut
 rust
 russe
 Russ
 Rush
 rus
 rup
 runt
 Runn
 Rung
 runa
 run
 rump
 rumm
 Rum
 rui
 ruff
 ruf
 rue
 Rudy
 Rudo
 rudi
 rudd
 rud
 rubi
 Rube
 rubb
 rub
 ru
 roya
 roy
 Rowl
 Rowe
 row
 rout
 Rous
 roundh
 roun
 roug
 rough
 rou
 rotu
 roto
 Roth
 rotar
 rota
 Rot
 rost
 roset
 Rosenb
 Rosen
 roseb
 rose
 rosa
 Ros
 roose
 Roos
 room
 rook
 rooft
 roof
 roo
 Ron
 Rome
 Roma
 rom
 Rolli
 roll
 rol
 roi
 rog
 roe
 rode
 rod
 rocke
 rocka
 rock
 roc
 robo
 Robi
 Rober
 Robe
 robb
 rob
 roa
 roads
 roadb
 road
 ro
 river
 rive
 riva
 riv
 rit
 risk
 rise
 ris
 ripe
 rip
 riot
 Rio
 ring
 rin
 rim
 rill
 ril
 righ
 Rigg
 Rig
 riflem
 rifl
 rif
 Rie
 ridi
 Ridge
 ridg
 ridd
 rid
 rico
 Ricke
 rick
 Richa
 Rich
 ric
 ribos
 ribo
 rib
 ri
 rhyt
 rhy
 rhombi
 rhom
 rhodo
 Rhodes
 Rhode
 Rhod
 Rho
 rhino
 rhine
 rhi
 rheuma
 rheu
 rhet
 rheo
 rhen
 Rhe
 Rha
 rh
 Rey
 revv
 revolu
 revol
 revo
 reviv
 revisi
 revisa
 revis
 revi
 reversi
 revers
 reveren
 revere
 rever
 reven
 revela
 revel
 reve
 rev
 Reub
 Reu
 retrogre
 retrog
 retrofitt
 retrof
 retro
 retrie
 retri
 retr
 retir
 retina
 retin
 retic
 reticu
 reti
 rete
 retarda
 retar
 retal
 retai
 reta
 ret
 resur
 resum
 resul
 resu
 restra
 restr
 resto
 resti
 resta
 rest
 responsi
 respons
 respond
 respo
 respir
 respira
 respirato
 respi
 respe
 resp
 resor
 reson
 resol
 resolu
 reso
 resisti
 resis
 resin
 resig
 resid
 residua
 residu
 reside
 residen
 resi
 reserv
 reser
 resen
 resem
 rese
 resc
 res
 requis
 requi
 req
 reput
 repul
 repub
 repu
 rept
 repris
 repri
 repre
 repress
 repres
 repr
 repor
 repo
 repli
 reple
 repl
 repetitio
 repet
 reper
 repen
 repelle
 repell
 repel
 repea
 repeat
 repe
 repar
 repai
 repa
 rep
 rent
 reno
 rene
 rende
 rend
 rena
 ren
 Remu
 remor
 remo
 remitt
 remit
 remis
 remin
 remini
 remi
 remem
 remed
 remedi
 reme
 Rema
 reman
 rem
 relig
 relie
 relic
 reli
 rele
 rela
 rel
 rejo
 rej
 rein
 reim
 Rei
 rehe
 reh
 regul
 Regula
 regulat
 regu
 regrett
 regret
 regres
 regressi
 regr
 registra
 regist
 regis
 Regin
 Regim
 regiment
 regimen
 regi
 rega
 regal
 reg
 refut
 refug
 refu
 refra
 refrac
 refracto
 refr
 reflec
 refl
 refe
 referr
 referent
 referend
 referen
 referee
 refere
 refer
 ref
 Reev
 reed
 ree
 reduc
 redu
 Redst
 reds
 rede
 redd
 redb
 reda
 red
 recus
 recurr
 recur
 recu
 recto
 rectif
 recti
 recta
 rect
 recr
 recon
 reco
 recl
 reck
 recit
 reciproca
 recipr
 recip
 reci
 recessi
 reces
 recepti
 recep
 recei
 rece
 rec
 rebutt
 rebut
 rebu
 rebellio
 rebelli
 rebell
 rebel
 rebe
 Reb
 realt
 real
 read
 reac
 react
 rea
 re
 razo
 raz
 Ray
 raw
 ravi
 raven
 rave
 rav
 Rau
 rattl
 ratt
 ratio
 rati
 rate
 rat
 Rast
 rasp
 ras
 Rare
 rar
 rapt
 rapp
 rapi
 rap
 rans
 Ranki
 Rank
 range
 rang
 rando
 Rand
 ranch
 ranc
 ran
 rampa
 ramp
 Rama
 Ram
 ral
 rak
 raj
 rais
 rain
 rail
 rai
 rag
 raffi
 raff
 Raf
 radiu
 radioch
 radioc
 radioa
 radio
 radic
 radia
 radian
 radi
 Rad
 racke
 rack
 Rach
 race
 rac
 rab
 rabi
 rabbi
 rabb
 ra
 r
 quota
 quot
 quo
 quizz
 quiz
 quix
 quit
 quirk
 quir
 quip
 quinti
 quint
 quin
 quill
 quil
 quiet
 quie
 quicks
 quic
 qui
 questi
 ques
 quer
 quee
 Que
 qua
 quat
 quasi
 quas
 quartz
 quarti
 quarter
 quarte
 quart
 quarrym
 quarry
 quarre
 quarr
 quar
 quantit
 quanti
 Quant
 quan
 quali
 qualit
 qual
 Quak
 quai
 quadru
 quadrill
 quadril
 quadric
 quadri
 quadra
 quadrat
 quadran
 quadrang
 quadr
 quad
 quac
 qu
 Q
 pytha
 Pyt
 pyrox
 pyrol
 pyro
 pyri
 Pyre
 pyram
 pyra
 pyr
 Pyg
 py
 putt
 put
 puss
 push
 Pus
 purve
 purv
 pursu
 purs
 purpose
 purpo
 purp
 purl
 purit
 purin
 Puri
 purga
 purgati
 purg
 Purc
 purch
 pur
 puppy
 puppe
 pupp
 pupa
 pup
 punk
 puni
 pund
 punctua
 punct
 punc
 pun
 pumpk
 pump
 pum
 pulsa
 puls
 pulp
 pull
 Pul
 Pug
 puf
 Puer
 pue
 puddl
 puddi
 pud
 puck
 puc
 Pub
 public
 publ
 pube
 pu
 Pto
 ptA
 pt
 psyc
 psychoth
 psychot
 psychos
 psychoph
 psychopa
 psychop
 psychoanalys
 psychoan
 psychoa
 psycho
 psychia
 psychiatri
 psychi
 psy
 psa
 ps
 prud
 pru
 proxi
 proxima
 prox
 prow
 provoc
 provocati
 provo
 provis
 provin
 provid
 providen
 provi
 prove
 prover
 proven
 prov
 Prou
 protrus
 protru
 protr
 protoz
 protot
 protopl
 protop
 proto
 protesta
 protes
 proteo
 protecto
 protec
 protea
 prote
 prota
 prot
 prosti
 prost
 prosper
 prospec
 prosp
 prosod
 proso
 prosec
 prose
 proscr
 prosc
 pros
 pror
 propy
 proprio
 proprie
 propr
 propos
 propor
 propo
 propit
 propi
 prophet
 proph
 proper
 propel
 propelle
 propell
 prope
 propag
 propagan
 propa
 prop
 proo
 pronounc
 prono
 pron
 promp
 promo
 promisc
 promis
 promi
 promethe
 Promet
 Prome
 prom
 prolon
 prolo
 prolif
 proli
 prol
 Prok
 proj
 prohibiti
 proh
 progressi
 progre
 progra
 programme
 progr
 progn
 proge
 prog
 profus
 profu
 profi
 professo
 profe
 prof
 produ
 prodi
 prod
 proct
 Procru
 procr
 procla
 procl
 proces
 proced
 proce
 proc
 probl
 proba
 prob
 pro
 priz
 priva
 priv
 prism
 pris
 prio
 print
 princ
 Princi
 prince
 prin
 prime
 prima
 prim
 prig
 Prie
 prick
 pric
 pri
 preve
 preva
 prev
 Pret
 presump
 presu
 Presto
 presti
 prestig
 prest
 press
 presiden
 presi
 prese
 prescr
 presc
 Pres
 prepon
 prepo
 prepara
 preparati
 prepa
 prep
 premi
 premie
 prem
 prel
 preferr
 prefere
 prefer
 prefec
 prefe
 prefa
 pref
 preem
 preempti
 pree
 predic
 predict
 predica
 predi
 pred
 preco
 precis
 precipita
 precipit
 precip
 preci
 prece
 preca
 prec
 Prea
 pre
 pray
 pran
 prais
 prai
 Pragm
 pragmatis
 prag
 Prac
 practic
 practica
 pra
 pr
 power
 powe
 powd
 pow
 poun
 poul
 Pou
 Pott
 potenti
 pote
 potb
 potat
 potas
 pota
 pot
 postu
 postpr
 postpo
 postp
 posto
 postma
 postm
 posterio
 poste
 postc
 posta
 post
 posse
 possessi
 posses
 possem
 poss
 positi
 posi
 Pose
 pos
 portug
 Portu
 portray
 portrai
 portr
 porti
 portent
 porten
 porte
 porta
 port
 porp
 poro
 porn
 porc
 por
 populi
 popula
 popu
 popl
 pop
 Pool
 poo
 pontifi
 pontif
 ponti
 Pont
 ponde
 pond
 ponc
 ponch
 Pon
 pompo
 pompe
 pompa
 pomp
 pom
 polyt
 polyph
 Polyp
 polymo
 polyme
 polym
 Polyhe
 polyhedra
 polyh
 polygo
 polyg
 poly
 polon
 polo
 Pollut
 pollu
 pollo
 Poll
 polka
 polk
 politi
 polit
 polis
 polio
 polic
 police
 policem
 poli
 pole
 Polarog
 polarograp
 polaro
 polaris
 Polari
 polar
 pola
 Pol
 pok
 poiso
 pois
 point
 poin
 poi
 pog
 poet
 poe
 podi
 pod
 Pock
 poc
 po
 pneumo
 pn
 Ply
 pluton
 pluto
 Plut
 plush
 plus
 plun
 plumba
 plumb
 plum
 plugg
 plug
 pluc
 plu
 plow
 plo
 plia
 pli
 pleu
 plent
 pleni
 plen
 Plei
 pleb
 plea
 pleas
 ple
 playw
 playb
 play
 Platonis
 Platon
 plato
 platit
 plati
 plate
 plat
 plasti
 plast
 plasm
 plas
 planta
 plant
 plano
 plank
 planetari
 planeta
 planet
 plane
 plan
 plaint
 Plain
 plai
 plagu
 plagi
 plagia
 plag
 plac
 placen
 place
 placa
 pla
 pl
 piz
 pix
 piv
 Pitts
 Pitt
 piti
 pith
 pitc
 pit
 pistol
 pisto
 pist
 pisc
 Pis
 piro
 pira
 Pir
 piq
 pipe
 pip
 Pion
 pio
 pint
 Pins
 pinn
 pinki
 pink
 pinh
 pine
 pinc
 pin
 pim
 pillo
 pilla
 pill
 pilg
 pilf
 pile
 pil
 pigm
 piggi
 pigg
 pige
 pig
 piet
 pier
 piec
 pie
 pid
 pictu
 pict
 pico
 picnicke
 picnick
 picn
 Picket
 picker
 Picke
 pick
 picc
 Pica
 Pic
 pian
 piani
 pia
 pi
 physiot
 physio
 Physic
 phys
 Phyl
 phy
 phr
 photol
 photog
 phot
 phosphore
 phospho
 phosphi
 phosp
 phos
 phono
 phonem
 phone
 phon
 phoen
 Phoe
 pho
 phl
 philos
 philo
 Philip
 Phili
 philan
 phila
 Phil
 Phi
 pheny
 pheno
 phenomeno
 phenomena
 phenom
 phenol
 phen
 Phe
 Pha
 pharmaco
 phar
 phan
 phalan
 phal
 phag
 ph
 Pf
 pew
 petu
 pett
 petrol
 petro
 petri
 petr
 peti
 Peter
 Pete
 pet
 pestil
 pesti
 pest
 pess
 pessimi
 pes
 pervers
 perve
 perva
 pervas
 perv
 perus
 peru
 pertu
 perti
 pert
 persuas
 persu
 perspir
 perspic
 perspicu
 perspi
 persp
 persona
 perso
 persis
 persi
 Perse
 persev
 Persec
 pers
 perpe
 perpetua
 perpetu
 perpet
 perp
 permu
 permitt
 permit
 permis
 permi
 perme
 perma
 perm
 Perk
 perj
 peris
 periphe
 periph
 perip
 perio
 Peril
 peric
 Peri
 perfum
 perfu
 perform
 perfo
 perfi
 perfe
 perf
 pere
 percu
 perch
 perce
 percepti
 percep
 percen
 perc
 per
 Peps
 peppe
 pepp
 pep
 peo
 penur
 penu
 pente
 pentag
 pentago
 penta
 pent
 pensi
 pens
 penny
 penna
 penn
 penm
 penitenti
 penit
 peni
 penet
 pene
 pend
 penc
 penal
 pena
 pen
 pem
 pelv
 pelt
 pell
 pel
 Pegg
 Peg
 peep
 pee
 pedia
 pedi
 pede
 peda
 pedan
 pedag
 ped
 pecul
 pecu
 pect
 pec
 pea
 Peas
 pearl
 Pear
 Peal
 peak
 Peach
 peace
 peac
 Pe
 pay
 pawn
 paw
 pav
 paun
 Pauls
 Pauli
 Paul
 Pau
 Patte
 Patt
 patron
 patrol
 patrolm
 patroll
 patro
 patri
 patrio
 patrim
 patrici
 Patric
 Patria
 patr
 pati
 pathog
 patho
 path
 patern
 pater
 paten
 pate
 patc
 Pat
 pasto
 pasti
 Pasteu
 paste
 past
 passiv
 passio
 passi
 passe
 Passag
 passa
 pass
 pasc
 Pas
 particu
 partici
 participa
 partic
 parti
 part
 parso
 parsim
 parsi
 Pars
 Parr
 parol
 paro
 parliamenta
 parli
 parla
 parl
 parki
 Park
 parish
 paris
 pari
 parenthes
 parenth
 parenta
 paren
 pare
 parc
 parasi
 paras
 paraph
 parap
 paranoi
 paranoia
 paran
 parama
 param
 paralle
 parall
 paral
 parago
 parag
 parado
 paradig
 paradi
 parad
 parab
 parabolo
 para
 par
 papy
 papp
 paperw
 pape
 papa
 pap
 panto
 panthei
 panth
 pant
 panor
 pano
 panick
 pani
 pane
 pandem
 pande
 panda
 Pand
 pancr
 Panc
 pana
 pan
 pamp
 Pam
 Palo
 palm
 palli
 palladia
 Palla
 pall
 palin
 pali
 Paleo
 Pale
 palaz
 Palat
 pala
 pal
 Pak
 pair
 paint
 Pain
 pai
 pagea
 page
 pag
 padd
 pad
 Packa
 pack
 pacifi
 pacifis
 paci
 pace
 pac
 Pab
 Pa
 p
 oz
 oxy
 oxida
 oxi
 oxe
 oxa
 ox
 owl
 Owe
 ow
 ovi
 overt
 over
 oven
 ove
 ova
 ov
 ouz
 outl
 out
 our
 oug
 ou
 Otto
 Ott
 Oti
 oth
 otherw
 other
 ot
 ostra
 Ostrac
 ostr
 oste
 osteopa
 osteop
 osteo
 osten
 ost
 oss
 osmo
 osm
 Osi
 O'S
 oscilla
 osci
 osc
 Osb
 Os
 Orw
 orthop
 orthog
 orthodox
 orthodon
 orthod
 ortho
 orth
 ort
 Orpha
 orp
 Oro
 orna
 ornam
 orn
 Orl
 Orio
 Orin
 origina
 orig
 orie
 ori
 orga
 organ
 organi
 org
 Ores
 Oreg
 ore
 ordi
 orde
 ord
 orchi
 orche
 orc
 orbi
 orb
 oratori
 orato
 orat
 orange
 oran
 ora
 or
 opu
 optom
 opto
 optimi
 optima
 optim
 opti
 opth
 opt
 oppre
 oppressi
 oppr
 opposi
 oppos
 oppo
 opp
 opin
 opi
 opera
 operat
 operan
 oper
 Ope
 OPa
 opal
 op
 oo
 onto
 ont
 ons
 onr
 Onom
 ono
 onlo
 onl
 One
 onco
 onc
 on
 omnip
 omn
 omitt
 omit
 omi
 ome
 omb
 oma
 Om
 Oly
 Ols
 olivi
 Olive
 Oliv
 Olig
 oligo
 oliga
 oli
 ole
 olds
 Olde
 old
 ola
 Ol
 ok
 oil
 oilm
 oi
 ohm
 Oh
 ogr
 og
 ofte
 oft
 offsh
 offse
 offs
 officio
 officia
 official
 offici
 office
 offi
 offer
 offen
 offe
 off
 of
 oed
 Oe
 Ody
 odo
 O'D
 odi
 Ode
 od
 octo
 octi
 octe
 Octav
 octan
 octahedra
 octah
 octag
 octa
 oct
 O'Co
 O'C
 o'
 ocea
 oceani
 Oce
 occurre
 occurr
 occur
 occupa
 occup
 occul
 occu
 occlus
 occl
 occid
 occi
 occ
 oc
 obvi
 obv
 obtr
 obt
 obstr
 obsti
 obst
 obso
 obsessi
 obses
 observa
 observat
 obser
 obseq
 obse
 obsc
 obs
 obo
 obliv
 oblig
 obliga
 obli
 obl
 objec
 obj
 obf
 obe
 obd
 ob
 oat
 oas
 Oakl
 oak
 oa
 o
 nympho
 nym
 NY
 nutritio
 nutrit
 nutr
 nut
 nurs
 nur
 numis
 numi
 numero
 Numeri
 numera
 nume
 num
 nul
 nug
 nud
 nucle
 nucleol
 nucleo
 nuclei
 nuclea
 nuc
 nub
 nu
 now
 Novo
 novi
 Novel
 nove
 Nova
 nov
 nou
 notor
 noto
 notic
 noti
 note
 nota
 not
 nostra
 Nostr
 Nosta
 nost
 nose
 noseb
 nos
 Norwa
 Norw
 North
 northwe
 northw
 Northr
 northern
 norther
 northea
 northe
 Nort
 Norman
 normal
 norma
 Norm
 Nord
 Nor
 noon
 noo
 none
 nonc
 non
 nomo
 nomina
 nomi
 noma
 nom
 Nol
 noise
 noi
 Noe
 nodu
 nod
 noc
 nobo
 noblem
 nobl
 nobe
 Nob
 Noa
 NO
 NN
 nitrog
 nitroge
 nitro
 nitri
 nitr
 nit
 Nipp
 nip
 nio
 ninete
 ninet
 nine
 nin
 NIMb
 nim
 Nil
 Nik
 nihi
 nih
 nightm
 nightc
 night
 nigh
 nigg
 nige
 Nig
 Niel
 Nie
 nicot
 Nico
 nick
 Nichols
 Nicho
 Nich
 nice
 nic
 nib
 nia
 Ni
 Newto
 newt
 newspaperm
 newsp
 newsm
 news
 newl
 Newf
 Newe
 newc
 newb
 New
 neve
 neva
 Nev
 neutr
 neut
 neuros
 neurop
 neuron
 neuroa
 neuroana
 neuro
 neura
 neural
 neur
 neu
 nett
 Neth
 net
 nest
 nes
 nerv
 Ner
 nept
 nep
 neop
 neona
 neon
 neol
 neo
 Nels
 Nell
 Nel
 nei
 Negr
 nego
 neglige
 negli
 negl
 neg
 needl
 need
 nee
 nect
 necrom
 necromanc
 necr
 neckl
 neck
 nece
 necessi
 nec
 nebula
 nebu
 neb
 neat
 near
 Nea
 Ne
 Nd
 NC
 NB
 Nazi
 Naza
 Naz
 navi
 nave
 nava
 nav
 naut
 nausea
 naus
 nau
 natu
 natio
 nati
 Nath
 Nata
 Nat
 nast
 Nash
 nasA
 nas
 narra
 narr
 narco
 narci
 narc
 nar
 Napo
 nap
 Nan
 nam
 nak
 naiv
 Nair
 nai
 Nag
 nad
 Nab
 na
 N
 myt
 mysti
 myste
 myst
 mys
 myr
 myop
 myoc
 myo
 Myn
 Myel
 mye
 myco
 myce
 Myc
 My
 Muz
 mutu
 mutt
 mutin
 muti
 muta
 mutat
 mutan
 mut
 mustac
 musta
 must
 musl
 musko
 muske
 Musk
 musi
 mush
 muse
 musc
 muscu
 Musco
 mus
 murr
 murk
 Muri
 murd
 mur
 Muo
 munic
 muni
 munc
 Mun
 mum
 multit
 multiplica
 multiplicat
 multipli
 multiple
 multiplex
 multip
 mult
 mullig
 mulli
 Mulle
 mull
 mulc
 mul
 mugg
 mug
 muf
 mue
 muddl
 mudd
 Mud
 muc
 mu
 Mr
 mov
 Mouth
 mout
 mous
 mour
 mounta
 mount
 moun
 moul
 Mou
 mott
 moto
 motiv
 moti
 mothe
 moth
 mote
 mot
 moss
 mosq
 Mose
 Mos
 morti
 mortgage
 mortg
 morta
 mort
 mors
 morri
 Morris
 morr
 morpho
 morphi
 morphe
 morp
 moroc
 Moro
 mori
 morg
 Morel
 more
 mora
 moral
 mor
 Moor
 moonl
 Moon
 mood
 moo
 Montr
 Montev
 Monte
 Montag
 Monta
 mont
 monstr
 monst
 mons
 Monr
 monot
 monome
 monom
 monolo
 monol
 monog
 monoc
 mono
 monke
 monk
 monit
 monic
 Moni
 mong
 money
 monet
 mone
 Mona
 monast
 monas
 monar
 monad
 Mon
 mome
 momenta
 mom
 molybde
 moly
 molt
 molly
 molli
 Moll
 Moli
 molec
 mole
 Mold
 mola
 mol
 moist
 mois
 Moi
 Moha
 Moh
 Moe
 modula
 modu
 modi
 Modes
 moder
 mode
 mod
 mocke
 mock
 moc
 mobi
 mob
 moa
 mo
 mn
 mix
 mitt
 mitr
 mito
 mite
 Mit
 mist
 Misso
 Missis
 missio
 missi
 miss
 miso
 mise
 misce
 miscel
 misc
 misa
 mis
 mira
 mirac
 mir
 minute
 minutem
 minut
 minus
 minue
 minu
 minst
 minsk
 Mins
 mino
 Minne
 Minn
 minis
 minima
 minim
 mini
 mines
 Minera
 miner
 mine
 Mind
 minc
 min
 mimick
 mimic
 mimi
 Mime
 mim
 Milto
 Milt
 millio
 Milli
 millen
 millenn
 mille
 Mill
 milk
 militi
 milita
 militari
 militar
 milit
 mili
 miles
 mile
 mild
 mila
 Mil
 migrat
 migr
 migh
 mig
 midwi
 Midwes
 Midwe
 midw
 midst
 midsh
 mids
 midg
 Middlet
 middlem
 Middl
 midd
 Mid
 Micron
 micr
 Micke
 Mick
 Miche
 Micha
 Mich
 mic
 mias
 mia
 Mi
 Mex
 mett
 metrop
 metro
 metr
 meti
 methy
 Methu
 metho
 metha
 methan
 meth
 meteorit
 meteori
 meteo
 mete
 metap
 metamorpho
 metamorphi
 metam
 metallurgi
 metallu
 metallo
 metalli
 metall
 metal
 metab
 metaboli
 meta
 met
 messi
 mess
 meso
 mesc
 mes
 merry
 merri
 merrim
 Merr
 merl
 merit
 merid
 meri
 merg
 Mere
 merc
 mercuri
 mercu
 merch
 merce
 Merca
 Mer
 ment
 mensu
 mens
 meni
 mende
 menda
 mend
 mena
 men
 memora
 memoran
 memorab
 memor
 memo
 memb
 mem
 Melv
 melod
 melodr
 melodi
 melo
 mell
 meli
 melani
 Melan
 mela
 mel
 mei
 megaw
 megal
 megab
 mega
 meg
 meet
 mee
 medl
 Medit
 medio
 medicin
 medici
 medic
 media
 medi
 meda
 med
 mechanis
 mech
 mec
 meat
 meas
 meant
 mean
 meal
 mead
 meado
 mea
 me
 McNa
 McN
 McM
 McLe
 McL
 McKi
 McKen
 McKe
 McK
 McI
 McGra
 McGr
 McGo
 McGi
 McG
 McF
 McDon
 McDo
 McD
 McCon
 McCo
 McClu
 McCl
 McCa
 McCar
 McCal
 McC
 McA
 Mc
 Mb
 maz
 mayor
 mayo
 Mayf
 maya
 May
 Maxw
 Maxim
 maxima
 maxi
 max
 maw
 Mav
 Maurit
 Mauric
 Mauri
 Maur
 mau
 matu
 Matt
 Mats
 matro
 matri
 matrim
 matric
 matria
 matr
 matin
 mati
 Mathi
 Mathew
 Mathem
 Mathematic
 mathe
 math
 matern
 materi
 mater
 Mate
 matc
 mat
 masti
 maste
 mast
 massi
 Masse
 massac
 massa
 Mass
 masq
 Masoni
 Mason
 masoc
 maso
 Mase
 masc
 mas
 Mary
 Marve
 marv
 martyr
 marty
 Martini
 Martin
 martia
 Marti
 marte
 mart
 Marshal
 marsha
 Marsh
 mars
 marro
 marri
 Marria
 marr
 marque
 marq
 marm
 Marlb
 Marl
 marks
 Marko
 marke
 mark
 Marj
 marit
 marion
 Mario
 marina
 marin
 Marie
 Maria
 Mari
 margina
 margi
 Marga
 marg
 Marcel
 Marce
 Marc
 mara
 mar
 map
 Mao
 manumit
 manum
 Manu
 mantl
 mantis
 manti
 mant
 Manse
 mans
 mano
 mann
 manip
 manife
 manif
 mania
 maniac
 mani
 manh
 mange
 mang
 mane
 mandr
 manda
 mandat
 mand
 Manage
 manag
 mana
 man
 mamma
 mammal
 mamm
 mam
 malto
 Malt
 malp
 Malon
 Malo
 maln
 mallo
 malle
 mall
 malig
 malic
 mali
 malfo
 malf
 male
 Maldi
 mald
 malcon
 malc
 Mala
 Malay
 malar
 malada
 malad
 mal
 mak
 maje
 maj
 maint
 mains
 mainl
 Main
 mailm
 mail
 Maid
 maide
 mai
 Maho
 maha
 Mah
 Magnu
 magnif
 magni
 magneti
 magnet
 magnes
 magne
 magna
 magnan
 magn
 magis
 magic
 magi
 maggo
 magg
 Mag
 Mae
 mads
 madri
 Madr
 madm
 Madel
 Made
 Madd
 Madam
 mada
 Mad
 macros
 macrom
 macr
 mackina
 Macki
 macke
 MacK
 machine
 machin
 machi
 Mach
 Maced
 Mace
 MacD
 maca
 mac
 Ma
 m
 lyse
 lys
 lyr
 Lync
 Lyn
 lympho
 lymp
 lym
 Ly
 luxuri
 luxuria
 luxu
 Luxe
 lux
 Luth
 lute
 lut
 lust
 lus
 lur
 lung
 Lund
 lunc
 luna
 lunat
 lunar
 lun
 lump
 lumino
 lumina
 lumi
 lumb
 lumberm
 lumbe
 lum
 lull
 lul
 luk
 lugg
 luge
 lug
 Luf
 Lud
 Lucret
 Lucre
 lucr
 luck
 lucia
 Luci
 Luc
 Lub
 lubrici
 lubrica
 lubr
 Lu
 l'
 loya
 loy
 Lowe
 low
 lovela
 Lovel
 lov
 Louv
 louse
 lous
 Loun
 Loui
 louds
 loud
 lou
 Lotte
 lott
 lot
 loss
 los
 Loren
 Lore
 lord
 lor
 loquac
 loq
 lops
 Lope
 lop
 loos
 loop
 Loom
 look
 loo
 longit
 longi
 longh
 long
 lone
 lon
 Lomb
 Lomba
 Lom
 loll
 lol
 Loin
 loi
 logic
 logi
 logg
 logar
 loga
 Log
 lof
 loe
 lodg
 lod
 locus
 locu
 locom
 locomoto
 locomoti
 loco
 Lockh
 Lock
 loca
 local
 loc
 lobu
 lobs
 lob
 loat
 loam
 loa
 lo
 liz
 Livi
 live
 Liverp
 Liver
 liv
 litu
 litto
 littl
 litt
 litiga
 liti
 lithos
 lithog
 litho
 lithi
 lith
 literat
 lite
 lit
 list
 Lis
 liqui
 lique
 liquef
 liq
 lipsc
 Lips
 lip
 lione
 Lio
 Lino
 link
 lingua
 lingu
 linge
 ling
 linem
 linea
 line
 Linds
 Lindb
 Lind
 Lin
 limp
 limi
 lime
 limb
 Lim
 Lilli
 Lill
 Lila
 lil
 lik
 lign
 lighth
 ligh
 Ligg
 Liga
 lig
 LIFe
 lifes
 lifeb
 lif
 lieu
 Lie
 lice
 licens
 licen
 lic
 Libret
 libre
 libra
 librar
 libr
 libi
 libert
 Libera
 liber
 libel
 libe
 lib
 lia
 li
 Lexic
 lexico
 lex
 lew
 Levit
 Levin
 Levi
 lever
 leve
 lev
 leu
 lette
 letterm
 lett
 Letha
 leth
 let
 Lest
 lesso
 lesse
 less
 les
 lep
 Leop
 leoni
 Leonar
 Leona
 Leon
 Leo
 lenti
 Lent
 Lenn
 Lenin
 Leni
 leng
 Len
 lemo
 lemm
 lem
 leit
 Leig
 Lei
 Leh
 legu
 legit
 legis
 legi
 legg
 legen
 lege
 legate
 legat
 lega
 leg
 lef
 leew
 leer
 lee
 led
 lect
 lech
 lec
 Lebe
 leba
 Leb
 Lea
 Leaven
 leav
 leat
 lease
 leas
 lear
 leap
 Lean
 leak
 leaf
 leads
 leade
 lead
 leac
 le
 lazy
 laz
 layo
 laym
 lay
 lax
 laws
 lawr
 lawma
 lawm
 lawg
 lawb
 law
 lava
 lav
 Laurent
 Lauren
 laure
 laur
 laund
 laun
 laug
 Laud
 lauda
 lau
 latt
 latitudi
 latit
 latin
 Lati
 lath
 latera
 later
 late
 lat
 lass
 lasc
 las
 laryng
 lary
 larv
 Lars
 Lark
 larg
 Lare
 larc
 lar
 lape
 lap
 Lao
 lanth
 lant
 lank
 langui
 langu
 Lang
 lands
 land
 lanca
 Lanc
 Lan
 lamp
 lami
 lamen
 lame
 lamb
 Lama
 Lam
 Lak
 laid
 Lai
 Lagr
 Lago
 lag
 lady
 lad
 lacun
 lacu
 lact
 lack
 Lacer
 lace
 lac
 labr
 labor
 labo
 labil
 labia
 labi
 Lab
 la
 l
 Ky
 Kur
 kud
 ku
 Kru
 Kris
 Kri
 Kre
 Kra
 krau
 Krak
 Kr
 Kowa
 Kow
 Kor
 Kon
 kol
 Koe
 Koda
 kod
 Koc
 Ko
 Knut
 Knud
 Knuc
 knu
 Knox
 Knowle
 Knowled
 knowl
 know
 knott
 Knot
 knoc
 knob
 kno
 Knig
 knic
 Kni
 knee
 kne
 kna
 knap
 Kn
 Kle
 kla
 Kl
 kiw
 kiv
 kitte
 kitt
 kitc
 Kit
 Kirk
 Kirc
 Kir
 Kio
 kink
 Kings
 king
 kines
 kine
 kind
 kin
 Kimb
 Kim
 kill
 kil
 Kie
 kidna
 kidnapp
 kidn
 kidd
 Kid
 kic
 kib
 ki
 Kha
 kh
 keyne
 Keyn
 key
 kett
 keto
 ketc
 ket
 kes
 kerr
 kern
 Ker
 kep
 Keny
 Kent
 Kenne
 Kenn
 Ken
 kell
 Kelle
 Kel
 Keen
 keel
 kee
 kea
 Ke
 kay
 Kau
 Kath
 Kat
 Kara
 Kar
 kap
 kao
 kan
 kam
 Kalm
 kalei
 kale
 kal
 Kaf
 Kab
 Ka
 K
 jux
 jut
 Justin
 justic
 justi
 jus
 jurisp
 juris
 juri
 jura
 Jur
 junke
 junk
 juni
 June
 Junc
 junct
 jun
 jump
 jumb
 jum
 Julie
 Juli
 Jule
 Jul
 Juk
 juj
 jui
 jugg
 jug
 Judic
 judicia
 judici
 judica
 judicat
 judi
 Juda
 Jud
 jub
 jua
 Ju
 Joy
 jow
 Jovi
 Jov
 journeym
 journe
 journa
 jour
 jou
 Jose
 Josep
 Jos
 Jorgen
 Jorg
 Jor
 Jona
 Jon
 joll
 Jol
 joi
 Johnst
 Johns
 John
 Joha
 Johans
 Johann
 Johanne
 Joh
 jogg
 jog
 Joe
 jocu
 jock
 joc
 job
 Joan
 Joann
 Joa
 Jo
 jit
 jin
 jimm
 Jim
 jil
 jigg
 jig
 ji
 Jewel
 Jewe
 jew
 jet
 Jesu
 jess
 Jessi
 Jes
 Jero
 jerk
 Jere
 Jerem
 Jer
 jeo
 jenni
 Jenn
 Jen
 jel
 jej
 Jef
 Jea
 Jean
 jeal
 je
 jaz
 jaw
 jav
 jau
 jas
 jar
 Jap
 Janu
 janit
 jani
 Jane
 Jan
 Jame
 Jam
 jak
 Jai
 jag
 Jacq
 Jacobs
 Jacobi
 Jaco
 JACk
 Jacks
 jacka
 jac
 jab
 Ja
 j
 Iva
 Iv
 it'
 iti
 ite
 Itali
 ita
 It
 Ist
 iss
 Israeli
 Isr
 isot
 isomo
 isom
 Isol
 isoc
 isoch
 iso
 isla
 islam
 Isl
 Isin
 isi
 Isab
 Isaa
 Isa
 Is
 Irv
 irrit
 irri
 irreve
 irrev
 irresp
 irresolu
 irreso
 irres
 irrepro
 irrepr
 irrep
 irrem
 irrede
 irreden
 irred
 irrec
 irreco
 irre
 irra
 irr
 Iron
 irons
 iro
 irk
 Irishm
 Irish
 Iris
 iri
 Ire
 Ira
 Ir
 ips
 ip
 iono
 ion
 iodin
 iodi
 iod
 io
 involu
 involut
 invol
 invo
 invite
 invit
 invio
 invi
 investi
 inves
 invert
 invers
 inver
 invento
 inventi
 inven
 invei
 inve
 inva
 invas
 invar
 invali
 inval
 inv
 inu
 intuiti
 intu
 intrus
 intru
 introv
 introd
 introduct
 intro
 intric
 intri
 intra
 intran
 intr
 intox
 inton
 intol
 into
 intima
 intimat
 inti
 intes
 interve
 interv
 interst
 inters
 interrupti
 interru
 interro
 interr
 interpr
 interpo
 interpola
 interp
 intern
 intermi
 interm
 interi
 interfere
 interf
 interce
 interc
 inter
 intent
 intensi
 intens
 intend
 inten
 intem
 intellige
 intelli
 intelle
 intel
 integ
 integra
 integr
 inte
 inta
 int
 insur
 insupp
 insup
 insula
 insul
 insuf
 insub
 insu
 instrum
 instruc
 instr
 instit
 instin
 instil
 insti
 inste
 insta
 instan
 instal
 inst
 inspi
 inspe
 insp
 insom
 insolv
 insol
 inso
 insis
 insin
 insign
 insigh
 insig
 insid
 insi
 insen
 insec
 insect
 inse
 inscri
 insc
 insa
 ins
 inquisiti
 inquis
 inquir
 inqui
 inq
 inp
 inor
 inope
 inop
 ino
 innu
 innoc
 inno
 inna
 inn
 inm
 inla
 inl
 ink
 injur
 injun
 Inju
 inj
 init
 iniq
 inim
 ini
 inhu
 inhom
 inho
 inhibito
 inhi
 inheri
 inhere
 inhe
 inha
 inhal
 inhab
 inhabita
 inh
 ingra
 ingrati
 ingrat
 ingr
 ingesti
 inges
 Ingen
 ingenu
 inge
 ing
 infusi
 infus
 infu
 infra
 infr
 informat
 informa
 info
 influe
 influent
 influ
 infle
 infla
 inflate
 inflat
 inflam
 inflammat
 inflamm
 infl
 infir
 infinitu
 infinite
 infin
 infim
 infi
 infes
 inferr
 infern
 infere
 infer
 infel
 infec
 infe
 infa
 infantrym
 infantr
 infan
 infam
 inf
 inext
 inexpli
 inexpl
 inexpe
 inexper
 inexp
 inex
 ines
 inerti
 inert
 iner
 inequit
 inequi
 ineq
 inel
 ineffi
 ineffe
 inef
 ine
 industri
 indus
 indul
 induct
 induc
 indu
 Indoc
 indo
 individ
 indiv
 indist
 indispo
 indisp
 indisc
 indiscre
 indiscr
 indis
 indir
 indigna
 indign
 indige
 indiges
 indigen
 indig
 indica
 indic
 india
 Indian
 Indi
 Inde
 indet
 indes
 inden
 indel
 indefi
 indef
 indecis
 indeci
 indec
 ind
 incurre
 incurr
 incur
 incul
 incub
 incu
 incre
 incredu
 incred
 increa
 incr
 incorr
 incorp
 incor
 inconv
 incontr
 incont
 inconsid
 inconsi
 incons
 incong
 inconc
 incon
 incompreh
 incompr
 incompl
 incompa
 incomp
 incommu
 incomme
 incomm
 incom
 inco
 inclus
 inclu
 incli
 incl
 incis
 incid
 inci
 incest
 inces
 incep
 incen
 ince
 incar
 incapac
 incap
 incant
 incan
 inca
 Inc
 inbr
 inbo
 inb
 inaug
 inau
 inat
 inapt
 inapp
 inappro
 inappr
 inap
 inan
 inal
 inadv
 inade
 inad
 inactiv
 inact
 inacc
 inaccu
 inac
 ina
 in
 imput
 impul
 impu
 improvis
 improvi
 improv
 improp
 impro
 impri
 impressi
 impress
 impres
 impreg
 imprec
 impre
 impra
 impr
 impost
 impos
 importu
 importa
 impor
 impol
 impo
 implica
 impli
 imple
 impla
 implan
 impl
 impi
 impet
 impert
 impers
 imperm
 imperi
 imperc
 imper
 impen
 impelle
 impell
 impel
 imped
 impe
 impassi
 impas
 impar
 impal
 impa
 imp
 immun
 immu
 immor
 immodes
 immod
 immob
 immo
 immig
 immi
 immer
 immed
 imme
 imma
 immat
 imm
 imi
 imbr
 imb
 ima
 imagina
 imagi
 image
 im
 illust
 illusi
 illusio
 illus
 illum
 illumi
 illu
 illit
 illi
 illegit
 illegi
 ille
 ill
 I'
 Ili
 il
 ii
 ignora
 ignor
 igno
 igni
 ign
 ig
 if
 idy
 ido
 idiot
 idios
 idiom
 idi
 ideo
 iden
 idea
 ide
 Ida
 Id
 icosahedra
 icos
 icon
 icono
 ico
 Icel
 iceb
 ice
 IC
 ibi
 ibe
 ib
 ia
 I
 hysteri
 hystere
 hys
 hypothes
 hypothe
 hypotha
 hypoth
 hypot
 hypocrit
 hypocr
 hypoch
 hypoc
 hypo
 hypn
 hyph
 hype
 hyperb
 hyperbolo
 hyp
 hymn
 hym
 hygr
 hyg
 hydroxyl
 hydroxy
 hydrox
 hydros
 hydropho
 hydrop
 hydrol
 hydrog
 hydrochl
 hydroch
 hydroc
 hydro
 hydra
 hydran
 hydr
 hyd
 hya
 Hy
 Hux
 Hutchin
 Hutchi
 Hutc
 hut
 Hust
 husb
 husbandm
 hus
 hurt
 hurra
 hurr
 hurl
 hurd
 hur
 Hunt
 Hunga
 Hung
 hund
 hun
 hump
 humm
 humil
 humid
 humidi
 humi
 Humb
 huma
 hum
 hul
 Hugh
 Hugg
 hug
 Huf
 Hud
 huc
 hub
 Hube
 Hubb
 Hu
 hoyd
 hoy
 hows
 Howe
 How
 hov
 House
 housewi
 housew
 housebr
 houseb
 hous
 hour
 Houg
 houd
 Hou
 hoth
 hote
 hotb
 hot
 hoste
 host
 hospit
 hosp
 hos
 Hort
 horsew
 horsep
 horsem
 horsef
 hors
 horri
 horr
 horo
 Hornbl
 hornb
 horn
 hori
 hora
 Hor
 Hopk
 hope
 hop
 hoov
 Hoos
 hoop
 hook
 hoof
 hood
 hoo
 honora
 honorari
 honor
 hono
 honey
 hones
 hone
 hond
 hon
 homom
 homol
 homogene
 homog
 homo
 homic
 homi
 homew
 homes
 homeom
 homeo
 homem
 homebu
 homeb
 home
 hom
 holy
 holste
 Hols
 holog
 holoc
 Holo
 Holm
 holly
 Hollo
 Holli
 Holle
 holla
 Holl
 hole
 hold
 Hol
 hog
 Hof
 Hodge
 hod
 hock
 hoc
 Hobo
 hobby
 hobb
 Hob
 hoar
 hoag
 Hoa
 ho
 hith
 Hitc
 Hit
 histori
 histor
 histoc
 histo
 hist
 His
 hirs
 Hiro
 hire
 hir
 hippo
 Hippoc
 Hipp
 hip
 hint
 Hind
 hin
 Him
 Hilt
 hillm
 hill
 Hila
 hil
 highwaym
 highw
 highl
 highb
 high
 hig
 Hiero
 hiera
 hierar
 hie
 hideo
 hide
 hid
 Hic
 Hibe
 Hib
 Hiat
 hia
 Hi
 hey
 hexag
 hexa
 hex
 Hew
 Heus
 heu
 Hett
 Hete
 heteros
 heteroge
 heterog
 het
 Hess
 Hesi
 hesitat
 hes
 Hert
 Hersh
 hers
 herr
 herp
 heroin
 heroi
 Hero
 hermi
 Herme
 herma
 Herm
 heri
 hereu
 hereto
 heret
 hereina
 herei
 hered
 herea
 here
 herd
 Herc
 Herb
 Hera
 Her
 Hepa
 hep
 henri
 Henr
 Hendr
 Hend
 hench
 hence
 henc
 hen
 Hemp
 hemor
 hemo
 hemis
 hemi
 hem
 help
 helms
 helm
 Helle
 hell
 he'
 helio
 helic
 heli
 Hele
 Hel
 heir
 Hein
 height
 heig
 hei
 heg
 hef
 hee
 hedo
 hedg
 hed
 hect
 heck
 heca
 hec
 Hebr
 Hebe
 heb
 heavy
 heave
 heaven
 heav
 heathe
 heath
 heat
 heartb
 heart
 hears
 hear
 healt
 Heal
 head
 headwa
 headw
 headst
 headsm
 heads
 headli
 headl
 hea
 he
 hazel
 haze
 haza
 haz
 Hayd
 Hay
 Hawt
 Hawk
 Hawa
 Haw
 haven
 have
 hav
 haun
 haul
 haug
 hau
 Hatti
 Hatt
 Hath
 hate
 hatc
 hat
 haste
 hast
 hash
 has
 Harves
 harve
 harv
 Hart
 hars
 harri
 Harris
 Harr
 harp
 harmonic
 harmoni
 harmo
 harm
 Harle
 Harl
 hare
 hardwo
 hardw
 hardt
 hardbo
 hardb
 hard
 harb
 Hara
 har
 happe
 happ
 haploi
 hapl
 hap
 Hanso
 Hanse
 Hans
 Hanov
 Hano
 Hanna
 Hann
 Hanl
 Hank
 hango
 hangm
 hanga
 hang
 handym
 handy
 handwr
 handw
 hands
 handm
 handle
 handl
 handic
 handicrafts
 handicr
 handica
 handicappe
 handicapp
 handi
 handc
 handb
 hand
 Han
 Hamp
 Hammo
 hamm
 Haml
 hamb
 Ham
 Halve
 halv
 Hals
 halo
 Hallo
 Halle
 hall
 hali
 half
 Hale
 hal
 Hait
 hair
 hails
 hail
 hai
 hagg
 hage
 Hag
 hadr
 hadd
 Had
 hack
 hac
 habitu
 habitat
 habita
 habit
 habi
 Habe
 Haber
 hab
 Haa
 Ha
 h
 gyro
 gyr
 gyps
 gyp
 gym
 gymna
 gymnast
 gymn
 gy
 Gw
 Guy
 Gut
 Gustav
 Gusta
 Gust
 gus
 Gur
 guns
 gunp
 gunn
 gunm
 gunk
 gunfi
 gunf
 Gun
 gum
 Gull
 gul
 guilt
 guill
 guild
 guil
 guide
 guid
 gui
 guess
 gues
 guer
 Gue
 guardi
 guard
 guara
 guarante
 guar
 guani
 guan
 gua
 Gu
 Grum
 grub
 gru
 grown
 grow
 grov
 group
 groun
 grounds
 grou
 Grot
 Gross
 gros
 groo
 groc
 groa
 gro
 griz
 grit
 grist
 gris
 grip
 grind
 grin
 Grime
 Grima
 grim
 gril
 Grif
 griev
 grie
 grid
 gri
 grey
 Gret
 Gren
 greg
 Greenw
 greens
 greene
 Greenbe
 Greenb
 Green
 greed
 gree
 grea
 great
 greas
 gre
 gra
 gray
 gravi
 grave
 graves
 grav
 gratu
 grati
 grate
 grat
 grass
 gras
 graphi
 graph
 grape
 grap
 granula
 granu
 grant
 grani
 grands
 grandp
 grandn
 grandm
 grandi
 grandc
 grand
 gran
 grammar
 gram
 grain
 grai
 graf
 gradu
 grad
 grace
 grac
 gr
 gov
 gour
 Gou
 Gott
 Goth
 Got
 goss
 gosh
 gos
 gorge
 gorg
 Gore
 gord
 Gor
 gop
 goos
 goof
 Goody
 Goodw
 good
 goo
 Gonz
 gon
 Gold
 Goldst
 Golds
 goldf
 golde
 Gol
 gog
 Goe
 godw
 gods
 Godf
 godd
 God
 gobb
 gob
 goa
 Go
 gnom
 gnomo
 gno
 gna
 gn
 GM
 glyc
 glyco
 glyce
 glyceri
 glycerin
 gly
 glutami
 gluta
 glut
 glue
 glu
 glot
 glos
 glori
 gloria
 Glor
 gloo
 glom
 globu
 glob
 glo
 glit
 glis
 glim
 glid
 Gli
 Glend
 Glen
 glee
 glea
 gle
 gla
 glau
 glassw
 glass
 glas
 gland
 glan
 glamor
 glam
 gladi
 gladd
 glad
 glac
 glacia
 gl
 giv
 Giu
 girli
 girl
 gird
 gir
 ginsb
 Gins
 ging
 Gin
 gimb
 Gim
 Gille
 Gill
 Gile
 Gilb
 gil
 gigg
 giga
 gig
 gif
 Gidd
 gid
 gibb
 gibbo
 gibbe
 gib
 gia
 gian
 gi
 ghou
 gho
 ghe
 Gha
 gh
 Gett
 get
 gesta
 Ges
 gerundi
 geru
 germin
 germic
 germi
 germani
 germa
 Germ
 Gerh
 gerb
 Gera
 geral
 Ger
 George
 Geor
 geoph
 geop
 geom
 geog
 geode
 geodes
 geod
 geoc
 geoche
 geoch
 geo
 genu
 gentlem
 gentl
 gentil
 genti
 gent
 geno
 genit
 geni
 Genev
 genes
 genero
 genera
 gener
 gene
 gen
 Gemi
 gem
 gelat
 gela
 gel
 geig
 Gei
 gee
 ge
 gaz
 Gay
 gaw
 Gave
 gav
 Gaus
 gaun
 gaul
 Gauge
 gaug
 gauc
 gau
 gate
 Gat
 gastron
 gastr
 gast
 Gasp
 Gas
 Gart
 Garri
 garr
 garn
 garl
 gari
 garg
 Garde
 gard
 garb
 gar
 gap
 gant
 Gann
 gangli
 gangl
 Gang
 gan
 game
 gambi
 gamb
 Gam
 Galva
 galvani
 galv
 gallu
 gallow
 gallon
 gallo
 galli
 galle
 gallan
 galla
 Gall
 galen
 Gale
 Galat
 galac
 gala
 gal
 Gait
 Gaine
 Gain
 gail
 Gai
 gagg
 gag
 gaf
 gadg
 gad
 Gabr
 gabb
 gab
 ga
 G
 fuz
 fut
 fuss
 fusi
 fuse
 fus
 furth
 further
 furtherm
 furt
 furr
 furni
 furn
 furlo
 furl
 fur
 funn
 fungi
 fung
 fune
 fund
 functo
 functi
 func
 fun
 fumi
 fum
 full
 ful
 Fuj
 fug
 fuc
 Fu
 FT
 Fry
 frustr
 frus
 frui
 Fru
 froz
 frow
 frot
 frostb
 fros
 frontiers
 fronti
 fronta
 fron
 fro
 friv
 frit
 fril
 Frigi
 frigh
 Frig
 fried
 Frie
 Fric
 fria
 fri
 Frey
 Freu
 Fresn
 freshm
 fresh
 fresc
 fres
 frenc
 Frenchm
 Fren
 freew
 Freet
 freem
 freeh
 freedm
 freed
 free
 Frederick
 Frede
 Fredd
 Fred
 frea
 fre
 fra
 fraz
 fraud
 frau
 frat
 frankfu
 Frankf
 Frank
 Franco
 Francisc
 Francis
 Franci
 France
 franc
 fran
 frame
 fram
 frai
 fragmenta
 fragm
 frag
 frac
 fracti
 fraction
 fr
 foxho
 foxh
 fox
 fourte
 fourt
 fours
 four
 founta
 fount
 found
 foun
 foul
 fou
 fost
 foss
 fossi
 fos
 fortun
 fortu
 fortr
 forti
 forth
 Forte
 fort
 forsa
 fors
 formu
 formic
 Formi
 formatt
 format
 formal
 forma
 form
 fork
 forgo
 forgi
 forgett
 forget
 forge
 forg
 forfei
 forf
 fores
 fore
 Ford
 force
 forc
 forbo
 forbidd
 forbi
 Forbea
 forbe
 forb
 fora
 for
 fop
 footw
 foots
 footpa
 footp
 footm
 footb
 foot
 fool
 food
 foo
 Fonta
 Font
 fond
 fon
 follo
 folli
 foll
 folks
 folk
 folia
 foli
 Fold
 fol
 foi
 fogg
 Fog
 focu
 foc
 foa
 foam
 fo
 FM
 fly
 flut
 flus
 fluorid
 fluori
 fluore
 fluo
 fluf
 flue
 flu
 flowe
 flow
 flour
 floun
 flou
 flot
 Florid
 flori
 Flore
 Flora
 flor
 flop
 floor
 flood
 floodl
 floo
 flog
 floc
 flo
 flirta
 flir
 flip
 flint
 flin
 fli
 flexu
 flex
 Flet
 fles
 flem
 flee
 fledg
 fled
 flea
 fle
 flax
 flau
 flatu
 flatt
 flat
 flash
 flas
 Flan
 flam
 flak
 flai
 flags
 flage
 flag
 fla
 fl
 fiz
 fix
 fiv
 Fitz
 Fitc
 Fit
 fist
 fissi
 fiss
 Fisk
 fisherm
 fishe
 fish
 fisc
 Fisch
 Fis
 firs
 firm
 firewo
 firew
 Fires
 firep
 firem
 fireb
 fire
 fir
 Finn
 Finl
 fini
 fing
 fines
 fine
 financi
 finan
 final
 fina
 fin
 filth
 filt
 film
 fill
 fili
 file
 fila
 fil
 figura
 figu
 fig
 fifte
 fift
 FIF
 fier
 fien
 fiel
 fief
 fie
 fide
 fidd
 fid
 fict
 fic
 fibro
 fibr
 Fibe
 fib
 fia
 fian
 fi
 fev
 feuda
 feu
 fett
 feti
 fet
 festi
 fest
 fes
 ferru
 ferrom
 ferro
 ferri
 ferre
 Ferr
 fero
 Fern
 fermi
 ferme
 ferm
 Fer
 fenc
 fen
 feminis
 femi
 fem
 felo
 fell
 felic
 felicit
 felici
 Feli
 Feld
 fel
 fei
 feed
 fee
 fede
 fed
 Febr
 feb
 featherbe
 featherb
 feath
 feat
 feas
 fear
 fea
 fe
 Faye
 Fay
 Faus
 faun
 fault
 faul
 Fau
 fatt
 Fati
 fath
 fate
 fat
 fast
 fasc
 fascis
 fascic
 fas
 fart
 farm
 fare
 farc
 Fara
 far
 fanta
 fantasi
 fant
 fang
 fanf
 fanc
 fan
 famil
 famili
 familia
 fami
 fam
 fals
 fallo
 falla
 fall
 falc
 fal
 fait
 Fairf
 Fair
 fain
 fail
 fails
 fai
 Fah
 fade
 fad
 factor
 facto
 fact
 facil
 faci
 facet
 face
 fac
 fabr
 Fab
 Fa
 F
 Ez
 eyel
 eyebr
 eyeb
 ey
 exulta
 exul
 exud
 exu
 extrus
 extru
 extro
 extric
 extri
 extrema
 extre
 extra
 extrav
 extrad
 extract
 extrac
 extr
 extol
 extolle
 extoll
 exto
 extin
 exti
 exter
 extensi
 extens
 extend
 exten
 extem
 exte
 ext
 expu
 expre
 expressi
 expr
 exposito
 exposi
 expos
 expor
 expon
 exponenti
 expo
 explos
 explora
 explor
 exploi
 explo
 explica
 expli
 expla
 explan
 expl
 expir
 expia
 expi
 expert
 experi
 experim
 experie
 exper
 expens
 expend
 expen
 expell
 expel
 expediti
 expedit
 exped
 expec
 expecto
 expecta
 expe
 expa
 expan
 expansi
 expans
 exp
 exoti
 exot
 exorc
 exor
 exoga
 exog
 exo
 existe
 exis
 exi
 exhu
 exho
 exhib
 exhi
 exha
 exhausti
 exhau
 exh
 exerc
 exer
 exempt
 exempl
 exempla
 exem
 exeg
 exec
 executi
 execu
 execr
 exe
 excus
 excur
 excul
 excu
 excre
 excret
 excr
 exco
 exclusio
 exclus
 exclu
 excla
 exclam
 excl
 excita
 excit
 excis
 exci
 excha
 exch
 exces
 excep
 excelle
 excell
 excel
 exce
 exc
 exa
 exas
 exami
 exam
 exal
 exac
 ex
 evolu
 evol
 evoc
 evo
 evil
 evid
 evi
 every
 everg
 Evere
 Ever
 eventu
 event
 even
 Eve
 eva
 evas
 Evans
 evang
 evan
 eval
 ev
 eute
 Eut
 Europe
 Euro
 Euri
 eur
 euphori
 eupho
 euphe
 eup
 eule
 Eul
 eugeni
 Eug
 Euc
 Eucl
 Eu
 eti
 ethy
 etho
 ethno
 ethn
 Ethi
 ether
 ethe
 Etha
 eth
 ete
 etc
 et
 estu
 estop
 esto
 esti
 Este
 esta
 est
 Essen
 esse
 Ess
 espou
 espo
 esp
 eso
 Esc
 escr
 Esch
 esca
 escape
 escap
 es
 e'
 erup
 erud
 eru
 Ers
 erro
 errat
 erran
 errant
 erra
 err
 erot
 erosi
 eros
 Erod
 ero
 Erne
 Ern
 Eric
 Eri
 erg
 ere
 era
 Erat
 eras
 erad
 er
 equiv
 equita
 equit
 equipp
 equipo
 equip
 equino
 equin
 equilibri
 equili
 equil
 equi
 equa
 equat
 eq
 Eps
 epoc
 epo
 epithel
 epith
 epita
 epitax
 epit
 epist
 episo
 episc
 episcopal
 Epis
 epiphy
 epip
 epil
 epigram
 epigr
 epig
 epider
 epidem
 epid
 epic
 epicy
 Epicu
 epi
 Ephe
 Ephes
 Ephem
 ephemeri
 eph
 epA
 ep
 eo
 enz
 envi
 enve
 env
 enun
 enum
 enu
 entre
 entra
 entr
 ento
 entir
 enti
 enthusiast
 enthu
 enth
 ente
 enter
 ent
 ens
 enr
 enq
 enor
 eno
 enig
 eni
 Englishm
 Engli
 Engle
 Engla
 Engl
 engi
 eng
 enfo
 enf
 energ
 ener
 ene
 endot
 endoga
 endog
 endo
 end
 encu
 encr
 encom
 enco
 enc
 en
 emuls
 emu
 empo
 emplo
 empl
 empi
 emphy
 empha
 emphas
 emph
 emp
 Emo
 Emma
 Emm
 emitte
 emitt
 emit
 emissi
 emis
 Emil
 Emig
 emi
 emeri
 emerg
 emer
 eme
 embry
 embroid
 embro
 embra
 embr
 embod
 embo
 embl
 embed
 embedde
 embedd
 embe
 emba
 embarg
 embar
 emb
 eman
 ema
 em
 elys
 Ely
 elut
 elu
 Elsi
 Else
 Els
 elo
 Elm
 Ellis
 ellips
 ellipsoi
 ellipso
 ellip
 ellio
 Elli
 Ell
 Elk
 Eliz
 Elis
 eli
 eleve
 elev
 elep
 elem
 eleg
 electrop
 electron
 electrolyt
 electrol
 electroencephalograp
 electroe
 electroc
 electro
 electric
 electri
 electre
 electr
 electora
 electo
 elec
 elea
 Ele
 Elde
 eld
 elb
 elas
 Ela
 el
 Ek
 eje
 ej
 Eis
 einsteini
 Ein
 eighte
 eigh
 eige
 eigenv
 eigens
 eig
 eid
 ei
 Eh
 Egy
 egr
 egot
 ego
 egg
 ega
 Eg
 eff
 effluv
 efflu
 efflo
 effl
 Effic
 effica
 effi
 effec
 effectu
 effe
 effa
 ef
 eer
 EEl
 ee
 Edwi
 Edwa
 Edwardi
 Edw
 educ
 edu
 Edmo
 Edmond
 Edm
 edito
 Edit
 edif
 edi
 Edge
 edg
 ede
 edd
 Ed
 ecum
 ecu
 ect
 ecs
 economi
 econome
 Econ
 ecol
 eco
 ecli
 ecl
 echo
 echi
 ech
 ecc
 eccl
 Ec
 Eb
 eaves
 eav
 eate
 eat
 easy
 Eastw
 easte
 east
 ease
 eas
 earthmo
 earthm
 earthe
 eart
 earn
 ear
 eag
 Ea
 e
 dysp
 dys
 dyna
 dynas
 dynam
 dynami
 dyn
 dye
 dya
 dy
 dwi
 dwe
 dwa
 dw
 duti
 dutc
 Dutchm
 dut
 dust
 dusk
 duse
 Dus
 Durk
 dure
 Dura
 Duran
 dur
 duplica
 dupli
 dupl
 dup
 duo
 Dunl
 Dunk
 dung
 Dune
 dunc
 Dun
 Dump
 dumb
 dum
 dull
 dul
 Dug
 duf
 due
 Dud
 duct
 duck
 duc
 dubi
 Dub
 Dua
 du
 dry
 drun
 drum
 drug
 drud
 dru
 drows
 drow
 dros
 drop
 droop
 droo
 dro
 driz
 driv
 drip
 drib
 dri
 dres
 drea
 dream
 dread
 dre
 drawb
 draw
 drap
 dramati
 dramat
 drama
 dram
 drai
 dragon
 drago
 drag
 draftsm
 drafts
 draf
 Dra
 dr
 doz
 downw
 downtr
 downt
 downst
 downs
 downp
 down
 dow
 dov
 Dougl
 Dough
 doug
 doub
 doubt
 doubl
 double
 doublet
 Dou
 dot
 dos
 Doro
 dorm
 Dori
 Dorc
 Dora
 Dor
 dop
 doorm
 doorke
 doork
 door
 doom
 Dool
 Doo
 Dono
 Donne
 Donn
 Done
 Donal
 Dona
 Don
 dominic
 Domini
 domina
 domin
 domi
 domes
 Dome
 dom
 dolt
 Dolom
 dolo
 doll
 dole
 dol
 dogt
 dogmat
 dogm
 dogg
 dogb
 dog
 doe
 dodecahedra
 dode
 Dod
 documenta
 docu
 doctrina
 doctr
 docto
 doctora
 doct
 dock
 doc
 dobb
 Dob
 Do
 Dn
 Dixi
 dix
 divo
 divisi
 divis
 divin
 divid
 divi
 dives
 diversio
 diversi
 divers
 diverg
 diver
 dive
 diva
 div
 ditt
 dit
 distu
 distrib
 distributi
 distri
 distr
 distin
 distil
 disti
 dista
 dist
 dissi
 disse
 dissem
 diss
 disrupti
 disr
 disq
 dispu
 dispo
 dispersi
 disper
 dispensa
 dispen
 dispel
 dispell
 dispe
 dispa
 disp
 Disn
 dism
 dishw
 dish
 disg
 disd
 discuss
 discu
 discriminat
 discri
 discre
 discreti
 discret
 discr
 disco
 discipli
 disci
 disce
 disc
 disa
 dis
 dirt
 directr
 directo
 direc
 dire
 dir
 diplomat
 diplom
 diploi
 dipl
 diph
 dip
 dior
 diop
 Dion
 dioc
 dio
 dinn
 ding
 Din
 diminu
 dimi
 dime
 dim
 dilut
 dilu
 Dill
 dile
 dila
 dilat
 dil
 digre
 digr
 dignit
 dign
 digita
 digi
 digesti
 dige
 dig
 diff
 diffusi
 diffu
 diffr
 diffic
 diffi
 diffe
 differenti
 differe
 differ
 diffeo
 dif
 diet
 diel
 Die
 did
 dicti
 dicta
 dictat
 dict
 Dicke
 dick
 dicho
 dich
 dic
 dia
 diatom
 diato
 diath
 diat
 diaph
 diap
 Dian
 diama
 diam
 diale
 dial
 diagr
 diagn
 diagnost
 diag
 diac
 diab
 diabe
 di
 dh
 dextr
 dexte
 dex
 dew
 devou
 devote
 devot
 Devon
 devo
 devis
 devil
 devia
 devi
 dev
 deut
 deu
 detra
 detr
 deton
 deto
 detes
 deterre
 deterr
 determina
 determ
 deter
 deten
 detec
 dete
 deta
 d'
 detai
 det
 desu
 destru
 destr
 desti
 destin
 dest
 dess
 despot
 despon
 despo
 despi
 despe
 desp
 desol
 deso
 desir
 desig
 desid
 desi
 deser
 desec
 dese
 descripti
 descrip
 descr
 descend
 desce
 desca
 Desc
 des
 derr
 dero
 deriv
 deris
 deri
 dere
 Derb
 dera
 der
 depu
 depri
 depressi
 depres
 deprec
 depreci
 depreca
 depre
 depr
 deposito
 deposi
 depos
 depor
 depo
 deplo
 deple
 depl
 depe
 depa
 dep
 deox
 deo
 denud
 denu
 dent
 dens
 denou
 denota
 denot
 deno
 Denn
 denia
 deni
 Dene
 dend
 den
 demurre
 demurr
 demur
 demu
 demons
 demoni
 demon
 demol
 democ
 democrat
 demo
 demitt
 demit
 demis
 demi
 demen
 deme
 dema
 demar
 demag
 dem
 delus
 delu
 delt
 delphin
 Delp
 Dell
 deliv
 delir
 deliq
 deline
 delin
 delim
 delig
 delica
 delicat
 delic
 deli
 delete
 delet
 deleg
 delec
 dele
 Delan
 Dela
 Del
 dej
 dei
 deh
 degu
 degre
 degra
 degr
 dege
 dega
 deg
 defra
 defr
 deform
 defore
 defor
 defo
 defle
 defla
 defl
 definiti
 defini
 defin
 defic
 defi
 deferr
 defer
 defens
 defend
 defen
 defect
 defec
 defe
 defa
 def
 deers
 Deer
 deep
 dee
 deduct
 dedu
 ded
 decryp
 decry
 decre
 decree
 decr
 decor
 deconv
 decont
 decontroll
 decon
 decompr
 decompo
 decom
 decoll
 decol
 deco
 declin
 decli
 decla
 declara
 declarato
 declarati
 declar
 declam
 decl
 decis
 decim
 decid
 deci
 decep
 decen
 deceit
 decei
 dece
 Decat
 decad
 deca
 dec
 debut
 debug
 debugge
 debugg
 debu
 debt
 debri
 debr
 Debo
 debil
 debi
 Debb
 Deba
 debau
 debat
 debar
 deb
 deat
 Dear
 Dean
 deal
 deaf
 deadl
 dead
 deac
 deaco
 dea
 de
 daz
 Dayto
 Dayt
 dayb
 day
 Daw
 Davis
 David
 Davi
 Dave
 dav
 daup
 daug
 Dau
 date
 data
 dat
 dash
 das
 Darw
 Dart
 Darr
 darl
 dark
 dar
 dapp
 dap
 Danu
 Danie
 Dani
 dange
 dang
 dand
 Dan
 damp
 damn
 damas
 Dama
 dam
 dall
 Dale
 Dal
 Dak
 dais
 dairym
 Dair
 Dai
 Dahl
 dah
 daf
 Dad
 dact
 dac
 Dab
 da
 d
 Czec
 Cze
 cza
 cz
 cyt
 cys
 Cyri
 Cyr
 Cypri
 Cyp
 Cyn
 cyl
 cyclot
 Cyclop
 cyclo
 cycli
 cycl
 Cyc
 cya
 cyani
 cyana
 cy
 cuttl
 cutt
 cuto
 cutle
 cutl
 cut
 custom
 custod
 custodi
 custo
 cust
 cush
 Cushi
 cus
 curva
 curv
 curta
 curt
 curso
 curs
 curricula
 curri
 curra
 curr
 curl
 curio
 curi
 curd
 curb
 cur
 cupr
 cupi
 cup
 Cunn
 cun
 cumu
 Cumm
 cumb
 cum
 culv
 cultu
 culti
 cult
 culpa
 culp
 cul
 cuf
 cudd
 cud
 cuc
 cub
 Cu
 crystallo
 crystalli
 crystall
 crys
 cryptograp
 crypto
 cryptanalys
 crypta
 cryp
 cryo
 cry
 crus
 crump
 crumb
 crum
 crui
 crue
 crud
 cruc
 crucifi
 crucif
 cru
 crowb
 crow
 crou
 crot
 crosswa
 crossw
 crossb
 cross
 cros
 croo
 cron
 Crom
 croco
 Crocke
 crock
 croc
 croa
 Cro
 criti
 crite
 crit
 criss
 Crisp
 cris
 crin
 crime
 Crim
 cri
 crewm
 crew
 creti
 Creta
 Cret
 crest
 cresc
 cres
 crep
 Creo
 crem
 creep
 creek
 creed
 cree
 credu
 credit
 credi
 crede
 credent
 cred
 crea
 creat
 cream
 creak
 cre
 cra
 craz
 cray
 crawl
 Craw
 crave
 crav
 crat
 cras
 crap
 crank
 crani
 Cran
 Cram
 crag
 craftsp
 craftsm
 crafts
 craf
 crac
 crab
 cr
 cp
 coz
 coy
 cox
 cowpo
 cowp
 cowm
 cowl
 cowh
 cowb
 cowar
 cowa
 Cow
 covet
 covera
 cover
 coven
 cove
 cova
 covari
 covar
 cov
 cous
 courtes
 courte
 court
 coura
 cour
 coup
 county
 countrym
 country
 countr
 counters
 counterpr
 counterpo
 counterp
 counterm
 counterf
 countera
 counter
 counte
 count
 couns
 counc
 councilw
 councilm
 coun
 could
 coul
 coug
 cou
 cotto
 cotta
 cott
 cot
 Cost
 cosmo
 cosm
 cose
 cos
 corv
 coru
 corte
 cort
 corrupti
 corrup
 corru
 corros
 corrod
 corrob
 corro
 corrige
 corrig
 corri
 corres
 correc
 corre
 corra
 corr
 corpus
 corpu
 corpsm
 corps
 corpora
 corpo
 corp
 corone
 corona
 Coron
 coro
 cornf
 Corneli
 Cornel
 Corne
 corn
 cork
 Corin
 Cori
 Core
 cordi
 cord
 Corb
 cora
 cor
 coq
 copy
 copr
 Copp
 Coper
 Cope
 cop
 Coor
 coop
 cool
 cooke
 cook
 coo
 convulsi
 convu
 convolu
 convol
 convo
 convi
 convey
 convert
 conversa
 convers
 converg
 conver
 convent
 conven
 conve
 conva
 conval
 conv
 contu
 controvers
 controv
 control
 controlle
 controll
 contro
 contriv
 contrit
 contrib
 contributo
 contri
 contra
 contrave
 contrav
 contrar
 contral
 contradis
 contradic
 contrad
 contract
 contrace
 contrac
 contrab
 contr
 conto
 continuo
 continua
 continu
 contine
 contin
 contig
 conti
 contex
 contes
 contenti
 content
 conten
 contem
 contempt
 contempo
 conte
 conta
 contam
 contag
 cont
 consump
 consum
 consul
 consultat
 consulta
 consult
 consula
 consu
 construc
 constru
 constri
 constra
 constr
 constituti
 constitut
 consti
 conste
 consta
 Constanti
 Const
 conspira
 conspirat
 conspir
 consp
 consor
 conson
 consol
 conso
 consis
 consig
 consid
 consi
 conserva
 conservato
 conservati
 conser
 conseq
 consen
 consec
 conse
 conscr
 consci
 conscio
 conscie
 consc
 consa
 cons
 Conr
 conque
 conquer
 conq
 connota
 connot
 Conno
 conniv
 conni
 Connec
 Conne
 Conn
 conjun
 conjug
 conju
 conjo
 conje
 conj
 conif
 coni
 congressw
 congressm
 congres
 congre
 congra
 congr
 Congo
 conge
 congesti
 conges
 congeni
 congen
 cong
 confus
 confuc
 Confu
 confro
 confr
 conforma
 confor
 confo
 confl
 confiscat
 confis
 confirma
 confir
 config
 confid
 confiden
 confide
 confida
 confi
 confes
 conferr
 confere
 confer
 confed
 confec
 confe
 conf
 cone
 conduc
 conduct
 condu
 condo
 condi
 conde
 condes
 conden
 condem
 condemna
 cond
 concurre
 concurr
 concur
 concu
 concr
 concor
 conco
 conclus
 conclu
 concl
 concis
 concil
 conci
 conces
 concerti
 concert
 concer
 concep
 concen
 concei
 conce
 conca
 conc
 Cona
 Con
 comput
 compul
 compulsi
 compu
 compt
 compre
 compressi
 compres
 compreh
 comprehens
 compr
 composi
 compos
 compon
 compo
 complim
 complic
 compli
 complex
 complet
 complem
 complementar
 complementa
 comple
 compla
 complain
 complai
 compl
 compi
 competiti
 competi
 compete
 compet
 compensat
 compens
 compend
 compen
 compel
 compell
 compe
 compa
 compat
 compassi
 compas
 compara
 compar
 compani
 compan
 Compac
 comp
 commut
 commun
 communic
 communi
 commu
 commonw
 common
 commod
 commodi
 commo
 committeew
 committeem
 committee
 committe
 committa
 committ
 commit
 commissa
 commiss
 commis
 commi
 commer
 commenta
 comment
 commens
 commend
 commenda
 commen
 comme
 comma
 comman
 comm
 Comi
 comet
 -
 comed
 come
 combu
 combina
 combinato
 combi
 comba
 comb
 coma
 Com
 column
 columb
 Columbi
 colu
 colt
 Colos
 colora
 colorat
 color
 coloni
 colon
 Colom
 Colo
 collu
 colloqui
 colloquia
 colloqu
 colloq
 collo
 Collin
 Collie
 colli
 collegi
 colleg
 collec
 colle
 colla
 collat
 collar
 collap
 collag
 coll
 coli
 Cole
 cola
 col
 coinciden
 coinc
 coin
 coi
 coho
 Cohe
 cohes
 coher
 coh
 cogniz
 cognit
 cogni
 cogna
 cogn
 cog
 coffee
 coffe
 coff
 cof
 coexi
 coex
 coerci
 coer
 coed
 coe
 codo
 codi
 code
 codd
 cod
 coco
 cockl
 cock
 Cochr
 coch
 coca
 coc
 cobbl
 cobb
 Cob
 coax
 Coat
 coas
 coar
 coale
 coal
 coag
 coac
 coachm
 coa
 CO
 Cly
 clut
 clum
 club
 clu
 cloud
 clou
 clothesm
 clothes
 clothe
 cloth
 clot
 close
 clos
 clon
 clog
 clod
 clockw
 cloc
 cloa
 clo
 clip
 Clint
 clini
 cling
 clin
 clima
 climat
 clim
 Cliff
 clif
 clie
 clic
 cli
 clev
 clerg
 clergym
 cler
 Clem
 clea
 cleav
 clear
 clean
 cle
 cla
 Clay
 claust
 Clause
 claus
 Claud
 Claudi
 Clau
 clat
 classif
 classi
 class
 clas
 Clark
 clari
 Claren
 Clare
 Clar
 clap
 clan
 clam
 clair
 Claim
 clai
 clad
 cl
 civil
 civi
 civ
 city
 citro
 citr
 citi
 cita
 cit
 circumv
 circumst
 circumsp
 circumsc
 circums
 circumfe
 circumf
 circumc
 circumcis
 circum
 circulat
 circul
 circui
 circu
 circl
 Cir
 cinn
 Cinem
 cine
 Cinde
 Cind
 cinc
 Cin
 cil
 cig
 Cice
 Cic
 ci
 chut
 churc
 churchw
 churchm
 Churchi
 churchg
 chur
 chunk
 chun
 chum
 chug
 chuc
 chub
 chu
 Chry
 chronog
 chrono
 chroni
 chron
 chrom
 chromi
 chroma
 chromatograp
 chromato
 chromati
 chro
 chri
 Christop
 Christo
 Christin
 Christia
 Christi
 Christens
 Christe
 christ
 Chr
 chow
 chos
 choreo
 chore
 chordat
 chorda
 chord
 chora
 chor
 Chop
 choo
 Chom
 chole
 chol
 chok
 choir
 choi
 choc
 cho
 chloropl
 chlorop
 chloro
 chlori
 chl
 chiva
 chiv
 chit
 Chis
 chir
 chip
 Chine
 chinc
 Chinam
 China
 chin
 Chime
 chimer
 chim
 chill
 child
 chil
 chig
 chie
 chick
 Chican
 chicag
 Chica
 Chic
 chia
 Chi
 chevr
 Chev
 Cheste
 Chest
 Ches
 cheru
 Cher
 Chen
 chemi
 chemist
 chemiso
 chemis
 chem
 cheese
 cheesec
 chees
 cheer
 cheek
 chee
 checksumm
 checks
 checke
 chec
 chea
 cheat
 che
 cha
 chau
 chatt
 chate
 chat
 chasti
 chast
 chas
 chartre
 chartr
 Chart
 Charlo
 Charle
 Charles
 Charl
 charit
 charis
 chari
 charg
 chara
 char
 Chapl
 chaper
 chape
 chap
 chao
 chant
 change
 chang
 chand
 chanc
 chance
 chancel
 chan
 Champa
 champ
 chamo
 chamb
 cham
 chalk
 chalc
 chal
 chairw
 chairm
 chair
 chai
 chaf
 Chad
 Ch
 Cet
 cess
 ces
 cerv
 certif
 certi
 certa
 cert
 ceri
 ceremoni
 cerem
 cerebr
 cereb
 cere
 Cera
 cer
 centu
 centrifuga
 centrif
 centri
 centr
 centi
 center
 centen
 cente
 cent
 censu
 censo
 cens
 cen
 cem
 cellulo
 cellu
 cell
 celes
 celer
 celeb
 celebra
 celebr
 cele
 Cela
 Cel
 ced
 Ceci
 Cec
 Ce
 Cay
 cavil
 cavi
 caver
 cavem
 cave
 cava
 cav
 caution
 caut
 causa
 caus
 caul
 cauc
 Cauca
 Cau
 cattlem
 cattl
 catt
 cats
 cati
 cathod
 catho
 Cather
 Cathe
 cath
 cater
 categ
 cate
 catc
 catat
 catas
 catalys
 cataly
 catal
 Cata
 cat
 casu
 Casti
 caste
 cast
 Cassi
 casse
 cass
 cask
 cash
 case
 casc
 cas
 carv
 cartog
 carto
 carti
 carte
 cart
 carry
 carro
 Carri
 Carra
 carr
 carpen
 carpe
 Carp
 Caroli
 Carol
 caro
 Carne
 carna
 carn
 carmi
 Carme
 Carm
 carlo
 Carli
 Carl
 carib
 Cari
 cargo
 carg
 caret
 caref
 caree
 care
 cardio
 Cardi
 card
 carcinog
 carci
 carc
 carbu
 carbox
 carboni
 carbona
 carbon
 Carbo
 carbi
 carb
 Cara
 car
 captiv
 captio
 capti
 capta
 capt
 capst
 caps
 capr
 Capito
 capita
 capit
 Capi
 cape
 capacita
 capacit
 capa
 cap
 canv
 Canton
 canto
 canti
 canter
 Cante
 canta
 Cant
 canon
 Cano
 cannon
 canno
 canni
 canne
 canna
 cann
 cank
 canis
 Cani
 candl
 candida
 candi
 cande
 cand
 cancer
 cancel
 cancell
 canc
 Canad
 Cana
 Can
 campa
 camp
 Camil
 Cami
 Camero
 Camera
 cameram
 camer
 Camelo
 camel
 came
 cambr
 Camb
 cam
 Calve
 calv
 calumn
 calu
 calo
 callig
 calli
 Calla
 call
 caliph
 calip
 calif
 calib
 calibr
 cali
 calf
 calen
 cale
 Calde
 cald
 Calcul
 calcula
 calcu
 calci
 calc
 calami
 calam
 cala
 Cal
 Cair
 Cain
 Cai
 cah
 cag
 caf
 caden
 cade
 cadd
 cada
 cad
 cact
 caco
 cach
 cac
 cabine
 cabi
 caba
 cab
 ca
 c
 Byz
 byw
 Byron
 Byro
 Byr
 bypa
 byp
 byl
 by
 Buz
 Buxt
 Bux
 butyr
 buty
 Buttr
 button
 butto
 Butterf
 butter
 butte
 butt
 bute
 butc
 buta
 but
 bust
 businessm
 busi
 bush
 bus
 Burt
 burst
 burs
 Burro
 burr
 Burn
 Burm
 burle
 burl
 Burgu
 burgl
 burge
 burg
 buret
 burea
 bureaucrat
 bureauc
 bure
 burde
 burd
 Bur
 buo
 bunk
 bung
 bund
 bun
 bump
 bumb
 bum
 bully
 bullh
 bullf
 bulle
 bulld
 bull
 bulk
 bulg
 Bulb
 bul
 built
 build
 buil
 bui
 bugg
 bug
 buf
 Bue
 budget
 budg
 Buddhi
 Buddh
 Budd
 Bud
 bucks
 Buckl
 bucket
 bucke
 buck
 buch
 Bucha
 Buc
 Bub
 bu
 bryop
 bryo
 Brya
 Bry
 brut
 brush
 brus
 brun
 brui
 Bruc
 Bruce
 bru
 browni
 Browne
 Brown
 brow
 brou
 brothe
 brot
 broom
 Brookl
 Brook
 brood
 broo
 bronz
 Bronc
 bronch
 bronchi
 bronchio
 bron
 bromi
 brom
 brok
 brock
 broc
 broa
 broad
 bro
 Britt
 brita
 Britan
 Brit
 Brist
 bris
 brink
 brind
 brin
 brim
 Bril
 bright
 brigh
 brigad
 briga
 brig
 brie
 bridgew
 Bridget
 bridg
 bride
 brid
 brickl
 brick
 bric
 brib
 bria
 bri
 brew
 breve
 brev
 Bret
 Brenn
 Brend
 Bren
 brem
 breez
 bree
 brea
 breat
 breas
 breaka
 break
 bread
 bre
 bra
 Brazil
 Brazi
 braz
 brave
 brav
 brass
 Bras
 brandy
 Brande
 Brand
 bran
 brak
 Brain
 Brai
 Brahms
 Brah
 bragg
 Brag
 Brad
 brac
 bracke
 brack
 brace
 br
 Boyl
 boyc
 boy
 box
 bowm
 bowl
 Bowe
 Bowd
 Bow
 bout
 bourg
 bourb
 bour
 bound
 bounc
 boun
 boul
 boug
 bou
 botu
 botto
 bottl
 bott
 both
 bota
 botani
 bot
 boson
 boso
 Bos
 borr
 boro
 Borne
 born
 Bori
 Borea
 Bore
 borderl
 border
 bord
 Bora
 bor
 boots
 bootlegg
 bootl
 Boot
 boor
 Boon
 boom
 booksh
 books
 booki
 book
 boo
 Bonne
 bonn
 boni
 bong
 bonds
 bond
 bona
 bon
 bombas
 bomba
 bom
 Bolt
 bolsh
 Bolshe
 Bolshevis
 Bols
 Bolo
 Boli
 bole
 bold
 bol
 Bois
 Boi
 Boh
 bogg
 boge
 bog
 Boe
 bodyb
 body
 bod
 boc
 bobbi
 bobb
 Bob
 boa
 boatm
 boat
 boas
 board
 boar
 bo
 blust
 blus
 blur
 blun
 Blum
 blueg
 bluebo
 bluebi
 blueb
 blue
 blu
 blow
 blot
 Bloom
 blood
 bloodst
 bloodsh
 bloods
 bloo
 blon
 Blom
 blocka
 block
 Bloc
 blo
 blit
 bliss
 blis
 blind
 blin
 bli
 bles
 Blen
 Blee
 blea
 ble
 bla
 blaz
 blat
 blast
 blasp
 blas
 blank
 bland
 blanc
 Blanch
 blan
 blam
 Blai
 bladd
 blad
 Blacks
 Blackm
 blackbo
 blackb
 blac
 bl
 biz
 biva
 biv
 bitu
 bittern
 bitter
 bitte
 bitt
 bit
 bist
 bisma
 Bism
 bish
 bise
 bis
 birt
 bird
 bir
 bipa
 bip
 bioti
 biot
 biom
 bio
 bino
 Bingh
 bing
 bind
 bina
 bin
 bimo
 Bime
 bim
 billio
 Billi
 bill
 bili
 bila
 bil
 bije
 bij
 bigo
 Big
 bif
 bienn
 bie
 bidi
 bidd
 bid
 bico
 bica
 bic
 biblio
 bibli
 bibl
 bib
 bia
 bi
 Bh
 bey
 bewi
 bewa
 bew
 beve
 Bever
 bev
 betw
 bett
 Bets
 betro
 betra
 betr
 beto
 Bethe
 beth
 Bete
 beta
 bet
 bests
 besto
 bestir
 besti
 best
 Besse
 Bess
 bespe
 besp
 besi
 bese
 beset
 bes
 bery
 Bertr
 Berth
 bert
 berr
 Bernie
 Berni
 Berne
 Bernar
 Berna
 Bern
 Berm
 Berl
 Berke
 berk
 beri
 Bergs
 Bergl
 berg
 berea
 Bere
 ber
 beq
 Beo
 benze
 Benz
 benth
 Bent
 Benn
 beni
 Beng
 benefic
 benefici
 benefice
 benefi
 benef
 Benedic
 benedicti
 Bened
 Bene
 Bend
 benc
 ben
 bemA
 bem
 belv
 Belt
 belo
 belly
 bellm
 Bellin
 belli
 bella
 Bell
 belie
 beli
 Belgi
 Belg
 belf
 bela
 Bel
 bei
 behe
 beha
 behav
 beh
 begu
 bego
 beginn
 begi
 begga
 begg
 bege
 beg
 befor
 befog
 befo
 befi
 befa
 bef
 Beet
 beef
 Beec
 beeb
 Bee
 bedsp
 beds
 bedro
 bedr
 bedimm
 bedi
 Bedf
 bed
 beck
 Beca
 bec
 beauti
 beaut
 Beau
 beatif
 beati
 beate
 beat
 beas
 Beard
 bear
 bead
 beac
 beach
 bea
 be
 bayon
 Bayo
 bay
 bawd
 baw
 Baud
 bau
 battlef
 battl
 batte
 batt
 Bato
 bathr
 bath
 bate
 Batc
 Bat
 bast
 bassi
 Bass
 baske
 bask
 basil
 basi
 bash
 basep
 basem
 basel
 baseba
 baseb
 base
 basa
 bas
 Barto
 Barth
 Barte
 barten
 bart
 Barry
 barri
 barret
 barre
 barrac
 barra
 barr
 barone
 baron
 baro
 Barnet
 Barne
 barna
 Barn
 Barl
 bark
 bari
 barg
 baref
 bare
 Barc
 barbi
 barber
 barbe
 barbari
 barbar
 Barba
 Barb
 bar
 baptiste
 Baptist
 Baptism
 bap
 Bantu
 bant
 bankr
 bank
 bani
 bangl
 bang
 bane
 bandw
 bands
 band
 bana
 Ban
 Bamb
 Bam
 Baltim
 Balt
 bals
 balm
 ballo
 ballet
 balle
 Balla
 ball
 Balk
 Bali
 bale
 bald
 Bal
 Bake
 baker
 Bak
 bail
 Bai
 Bah
 bagg
 bag
 baf
 Bade
 bad
 bacteria
 bact
 backwa
 backw
 backst
 backs
 backpl
 backp
 backl
 backb
 back
 baci
 bach
 Bacc
 Bacca
 bac
 bab
 babysi
 babys
 Baby
 Babe
 Babb
 ba
 b
 Azt
 azi
 Az
 Aye
 Ay
 axo
 axis
 axiom
 axio
 axi
 ax
 awe
 awa
 awar
 awak
 aw
 avoi
 Avoc
 avoca
 avo
 avia
 aviat
 avi
 avers
 averr
 aver
 Aven
 ave
 Ava
 avar
 av
 autu
 auton
 automo
 automa
 autom
 autocrat
 autocr
 autoco
 autoc
 auto
 auti
 auth
 authori
 autho
 authe
 aut
 Austra
 Austr
 Auste
 aust
 ausp
 aus
 auro
 Auri
 aure
 Aura
 aur
 aun
 Augus
 augu
 augm
 auge
 Aug
 audito
 audit
 audio
 audi
 auda
 aud
 auct
 auc
 Aub
 Au
 Atw
 attrib
 attributi
 attri
 attr
 attic
 Atti
 attes
 attent
 attend
 atten
 atte
 atta
 attai
 attac
 attach
 att
 Atroph
 atrop
 atroc
 atro
 atr
 aton
 atom
 ato
 atm
 atlan
 Atlantic
 Atlanti
 atl
 Atk
 athl
 Athen
 Athei
 athe
 ath
 atav
 ata
 At
 asyn
 asymp
 asym
 asy
 asu
 astrop
 astron
 astrono
 astrona
 astro
 astri
 astra
 astr
 Astor
 Asto
 asti
 astero
 asteri
 aste
 asta
 ast
 Assy
 assur
 assum
 assu
 assoc
 asso
 assis
 Assim
 assig
 assid
 assi
 asses
 assem
 asse
 assas
 Assai
 assail
 assa
 ass
 aspira
 aspir
 aspi
 asph
 asper
 aspe
 aspa
 aspara
 asp
 ask
 asia
 Asi
 ashm
 Ashl
 Ashe
 ash
 ascr
 asce
 ascen
 ascend
 asc
 as
 aru
 artis
 artifi
 artif
 Artic
 articu
 arti
 Arth
 arteri
 arteriol
 arterio
 arter
 artem
 arte
 Art
 arse
 arseni
 arsena
 ars
 arrow
 arrog
 arro
 arri
 arre
 arra
 arran
 Arr
 arp
 arous
 arou
 arom
 aro
 Armo
 armi
 Armc
 armat
 Armad
 arma
 arm
 Arle
 Arl
 Arka
 Ark
 Aristote
 Aristot
 Aristoc
 aristocrat
 arist
 arise
 aris
 aria
 Ari
 argumenta
 argum
 argu
 Argon
 argo
 argi
 arg
 arena
 aren
 areaw
 area
 are
 arde
 ard
 arcta
 arct
 arcs
 archiv
 architectu
 archit
 Archi
 archet
 arche
 archai
 archa
 arch
 arcc
 arcan
 arcad
 Arca
 arc
 arbo
 arbi
 arbitr
 arb
 arac
 Arab
 Arabi
 ara
 Ar
 Aqui
 aque
 aqua
 Aquar
 aq
 apt
 apro
 apri
 Apr
 approx
 approv
 approp
 appro
 apprehens
 appreh
 apprec
 appre
 appra
 appr
 appos
 appoi
 appointe
 appo
 applic
 appli
 Apple
 appla
 appl
 appendi
 appen
 appel
 appea
 appeas
 appear
 appe
 appa
 appare
 appar
 appal
 app
 apot
 apos
 apolo
 apoll
 Apol
 apoc
 apocr
 Apoca
 apo
 api
 apha
 aph
 aper
 ape
 apa
 apath
 apat
 apar
 ap
 A&
 anyw
 anyb
 any
 anx
 antony
 Anton
 Antoi
 Anto
 antis
 antiqua
 antiquar
 antiq
 antipa
 antip
 antigo
 Antig
 antici
 antic
 anti
 anthro
 anthra
 anthr
 Antho
 anthe
 anth
 anten
 ante
 Antarc
 Antar
 antag
 Anta
 ant
 ANSe
 Ans
 anorthi
 anort
 anor
 anon
 anoma
 anom
 anod
 ano
 annull
 annul
 annu
 annoy
 anno
 anni
 anne
 Annale
 Annal
 anna
 Ann
 ank
 aniso
 anise
 anis
 anio
 anima
 animad
 anim
 ani
 anhydri
 anhy
 Anh
 angu
 angs
 Ango
 Anglo
 angli
 Angle
 Angl
 angi
 Ange
 angel
 Angelin
 Angelic
 Angeli
 Ang
 anec
 ane
 Andro
 Andre
 Andr
 Ando
 andesi
 andes
 Ander
 Ande
 And
 anci
 anchor
 anch
 ance
 ancestr
 anc
 anatom
 anato
 Anat
 anasto
 anasti
 anas
 anar
 analys
 analy
 analo
 anal
 anag
 anach
 anac
 Anab
 Ana
 an
 amy
 amu
 ampli
 ampl
 amphib
 amphibo
 amphibi
 amphi
 amph
 Amper
 ampe
 amp
 amor
 amon
 amoe
 amo
 ammonia
 ammon
 ammo
 amme
 Amm
 amin
 amid
 ami
 amet
 america
 Ameri
 Amer
 amend
 amen
 amel
 ame
 ambus
 ambul
 ambu
 ambrosi
 ambr
 ambl
 ambit
 ambig
 ambi
 amb
 Amaz
 amate
 amat
 Amar
 aman
 amal
 Ama
 AM
 alve
 alva
 Alv
 alum
 alumna
 alumn
 alumi
 alu
 altr
 alto
 alti
 alth
 altern
 alte
 alta
 alt
 Also
 als
 Alpha
 alphab
 alph
 Alpe
 alp
 along
 alon
 alo
 almo
 alma
 Alm
 ally
 alluv
 allus
 allu
 Alls
 allow
 allott
 allot
 alloc
 allo
 Allis
 alli
 alley
 aller
 Allen
 alleg
 allegr
 allego
 alle
 Alla
 All
 alkali
 alk
 Alis
 alig
 alie
 Alic
 alia
 ali
 algor
 Algo
 algi
 Alger
 Algeb
 alge
 alga
 algae
 alg
 alfred
 Alfr
 alf
 Alexandr
 Alexa
 Alex
 Alec
 Ale
 aldr
 Alde
 alderm
 alder
 ald
 alcoh
 alco
 alc
 Album
 albu
 Albr
 Albert
 Alber
 Albe
 Albani
 Alban
 alba
 alb
 Alam
 alabam
 Alab
 Ala
 al
 Ak
 Aj
 airs
 airp
 airma
 airm
 airli
 airl
 airf
 Aire
 air
 Ain
 aile
 ail
 Aid
 Aide
 Ai
 ahe
 ah
 agric
 agricu
 agri
 agre
 agr
 agon
 ago
 agno
 agne
 Agn
 agi
 aggressi
 aggres
 aggre
 aggr
 aggl
 agglu
 agg
 agen
 Age
 aga
 Agat
 Agai
 ag
 afterw
 afte
 aft
 afr
 afor
 afo
 afl
 afi
 Afg
 affr
 affore
 affo
 affl
 affirma
 affir
 affi
 affec
 affe
 affa
 aff
 af
 aest
 aes
 aeros
 aerob
 aero
 aer
 Aeo
 Aen
 Aeg
 ae
 advo
 adviso
 advise
 advis
 advi
 advert
 advers
 adverb
 adver
 adven
 adventu
 adve
 adva
 advant
 adv
 adulte
 adult
 adu
 adsorp
 adsorb
 ads
 Adria
 Adri
 Adre
 adr
 ador
 adopti
 adop
 Adolp
 Adol
 ado
 admo
 admi
 admix
 admitt
 admit
 admis
 admira
 admiral
 admir
 admin
 administrat
 administr
 adm
 adjud
 adju
 adjoi
 adjo
 adje
 adj
 adi
 adhes
 adher
 adh
 adeq
 adeno
 aden
 Adel
 Ade
 addr
 addit
 Addis
 Addi
 adde
 add
 adap
 adam
 adag
 ada
 Ad
 acu
 actu
 acto
 actin
 actino
 actini
 acti
 Act
 acry
 acrob
 acrobat
 acro
 acre
 acr
 acquitt
 acquit
 acquis
 acquie
 acqui
 acqua
 acq
 aco
 acm
 ackn
 Ack
 aci
 Achi
 ach
 acet
 acer
 ace
 accusa
 accusati
 accus
 accur
 accu
 accru
 accred
 accre
 accr
 accoun
 accou
 accor
 accompl
 accompa
 accompani
 accomp
 accom
 acco
 accla
 accl
 accid
 acci
 acce
 accessi
 acces
 accep
 accentu
 accen
 accel
 acc
 acad
 Acade
 academi
 academic
 aca
 ac
 Abyss
 aby
 abutt
 abut
 abus
 abu
 abstra
 abstr
 abst
 absorp
 absorb
 absor
 absol
 absolu
 abso
 absente
 abse
 absc
 absci
 abs
 abro
 abri
 abre
 abra
 abras
 Abram
 Abr
 abov
 abou
 abori
 abor
 abom
 abol
 abo
 abn
 abla
 abl
 Abid
 Abi
 abh
 abey
 abett
 abet
 aberr
 Aber
 Abel
 abe
 abdo
 abd
 Abbo
 abbe
 abb
 abA
 abas
 abac
 Ab
 Aar
 AaA
 AA
 A
submitted
trusted
 procedure
 quoti
 abbr
 evaluat
 introduce
 define
 own
 propert
 ancesto
 defau
 uncl
 manne
 modif
 modifi
 reduce
 behavi
 newel
 behave
 severe
 contai
 bless
 relea
 toug
 remov
 imprope
 satisfy
 notif
 securi
 belon
 smell
 temporar
 eage
 chirp
 obvio
 branc
 optio
 owne
 menti
 liste
 suppli
 remove
 seemi
 shorte
 solidi
 fiddle
 flic
 slig
 please
 teach
 optiona
 functiona
 centre
 parse
 personal
 alias
 owner
 zool
 finis
 complete
 fak
 initial
 cure
 modific
 elim
 unf
 actual
 easi
 faste
 impai
 simplif
 subjecti
 interfe
 specifica
 alterna
 present
 existent
 extreme
 carefu
 curre
 definite
 sandw
 reasona
 instant
 finishe
 unsc
 represe
 implic
 generat
 frid
 fille
 neate
 backwar
 basic
 circumstanc
 incidenta
 conveni
 delib
 whil
 applicat
 critic
11870
4
3
2
ess
2

4
2
2
worthlessness
2
worthless
36
1
4
3
2

2
r
4
3
2
driveway
2
driven
2
drive
36
1
4
3
2

2

4
2
2
drivers
2
driver
36
1
4
3
2

2
c
4
1
2
unsure
36
1
4
3
2
c
2

4
2
2
topical
2
topic
36
1
4
3
2
d
2

4
3
2
friendly
2
friends
2
friend
36
1
4
3
2
tion
2

4
2
2
computations
2
computation
36
1
0
25132
36
1
4
3
2
t
2

4
2
2
activating
2
activate
36
1
4
3
2
ge
2

4
2
2
messages
2
message
36
1
4
3
2
n
2

4
2
2
locations
2
location
36
1
4
3
2
ng
2

4
2
2
settings
2
setting
36
1
4
3
2

2
i
4
1
2
settle
36
1
4
3
2

2

4
2
2
creation
2
creating
36
1
4
3
2
a
2

4
2
2
lambdahouse
2
lambda
36
1
4
3
2
us
2

4
2
2
rigorously
2
rigorous
36
1
4
3
2
r
2
o
4
1
2
rigor
36
1
4
3
2

2

4
2
2
programmers
2
programmer
36
1
4
3
2

2

4
2
2
harder
2
harden
36
1
4
3
2
in
2

4
2
2
redefining
2
redefine
36
1
4
3
2
pti
2

4
2
2
redemptive
2
redemption
36
1
4
3
2
nding
2

4
2
2
keybindings
2
keybinding
36
1
4
3
2

2
i
4
1
2
keyboard
36
1
4
3
2

2

4
2
2
buffer
2
buffet
36
1
4
3
2

2

4
2
2
artificer
2
artifice
36
1
4
3
2
al
2

4
2
2
horizontally
2
horizontal
36
1
4
3
2
l
2

4
2
2
vertically
2
vertical
36
1
4
3
2
c
2

4
2
2
automatically
2
automatic
36
1
4
3
2
ate
2

4
2
2
truncated
2
truncate
36
1
4
3
2
aw
2

4
2
2
redraw
2
redraws
36
1
4
3
2
l
2

4
2
2
scrolling
2
scroll
36
1
4
3
2

2

4
2
2
connection
2
Connecticut
36
1
4
3
2

2

4
2
2
emacs
2
emaciate
36
1
4
3
2

2

4
2
2
frisbee
2
frisky
36
1
4
3
2
c
2

4
2
2
cynical
2
cynic
36
1
4
3
2
ct
2

4
2
2
intersection
2
intersect
36
1
4
3
2

2

4
2
2
corner
2
cornerstone
36
1
4
3
2
e
2

4
2
2
headlines
2
headline
36
1
4
3
2
ord
2

4
2
2
keywords
2
keyword
36
1
4
3
2
oon
2

4
2
2
tablespoonful
2
tablespoon
36
1
4
3
2
e
2

4
2
2
irritated
2
irritate
36
1
4
3
2
s
2

4
2
2
bonuses
2
bonus
36
1
4
3
2
st
2

4
2
2
interesting
2
interest
36
1
4
3
2

2

4
2
2
grazing
2
graze
36
1
4
3
2

2

4
2
2
dozens
2
dozen
36
1
4
3
2
re
2

4
2
2
pastures
2
pasture
36
1
4
3
2

2

4
2
2
rolling
2
Rollins
36
1
4
3
2

2

4
2
2
fields
2
fieldstone
36
1
4
3
2
ead
2

4
2
2
proofreading
2
proofread
36
1
4
3
2

2

4
2
2
footer
2
Foote
36
1
4
3
2

2
o
4
1
2
locating
36
1
4
3
2

2

4
2
2
times
2
timeshare
36
1
4
3
2
t
2

4
2
2
insertion
2
insert
36
1
4
3
2
oard
2

4
2
2
clipboards
2
clipboard
36
1
4
3
2

2

4
2
2
saving
2
Saviour
36
1
4
3
2

2

4
2
2
unknown
2
unkempt
36
1
4
3
2
ng
2

4
2
2
failings
2
failing
36
1
4
3
2

2

4
2
2
failer
2
failed
36
1
4
3
2
elling
2

4
2
2
misspellings
2
misspelling
36
1
4
3
2
r
2

4
2
2
players
2
player
36
1
4
3
2
ag
2

4
2
2
zigzag
2
zigzagging
36
1
4
3
2
t
2

4
2
2
zesty
2
zest
36
1
4
3
2
o
2

4
3
2
zeroth
2
zeroes
2
zero
36
1
4
3
2

2

4
2
2
zenith
2
Zen
36
1
4
3
2
l
2
o
4
2
2
Zealand
2
zeal
36
1
4
3
2

2

4
2
2
zealous
2
zealot
36
1
4
3
2

2
anrs
4
5
2
Zeus
2
zeta
2
Zellerbach
2
Zeiss
2
zebra
36
1
4
3
2

2

4
2
2
Zanzibar
2
Zan
36
1
4
3
2

2

4
3
2
Zagreb
2
zagging
2
zag
36
1
4
3
2

2
gn
4
5
2
zazen
2
zap
2
Zambia
2
Zaire
2
Zachary
36
1
4
3
2
e
2

4
2
2
Yvette
2
Yves
36
1
4
3
2

2

4
2
2
Yukon
2
Yuki
36
1
4
3
2
oslav
2

4
2
2
Yugoslavia
2
Yugoslav
36
1
4
3
2

2

4
3
2
yuck
2
yucca
2
Yucatan
36
1
4
3
2

2
cgk
4
2
2
yule
2
yuh
36
1
4
3
2
t
2

4
2
2
yttrium
2
ytterbium
36
1
4
3
2
h
2

4
2
2
youthful
2
youth
36
1
4
3
2
l
2

4
2
2
yourselves
2
yourself
36
1
4
3
2

2
e
4
1
2
yours
36
1
4
3
2
t
2

4
2
2
Youngstown
2
youngster
36
1
4
3
2
g
2
s
4
2
2
youngish
2
young
36
1
4
3
2

2

4
2
2
Yost
2
Yosemite
36
1
4
3
2

2

4
2
2
Yorktown
2
york
36
1
4
3
2

2
k
4
1
2
yore
36
1
4
3
2

2

4
3
2
Yonkers
2
yond
2
yon
36
1
4
3
2

2

4
2
2
yokel
2
yoke
36
1
4
3
2

2
e
4
2
2
Yokuts
2
Yokohama
36
1
4
3
2

2

4
4
2
yogurt
2
yogi
2
yoghurt
2
yoga
36
1
4
3
2
e
2

4
2
2
Yoder
2
yodel
36
1
4
3
2

2

4
2
2
yipping
2
yip
36
1
4
3
2

2
p
4
3
2
yin
2
yield
2
Yiddish
36
1
4
3
2
er
2

4
2
2
yesteryear
2
yesterday
36
1
4
3
2

2
t
4
2
2
yeshiva
2
yes
36
1
4
3
2
man
2

4
2
2
yeomanry
2
yeoman
36
1
4
3
2

2
o
4
1
2
yell
36
1
4
3
2
w
2

4
4
2
Yellowstone
2
Yellowknife
2
yellowish
2
yellow
36
1
4
3
2

2
l
4
1
2
yelp
36
1
4
3
2
t
2

4
2
2
yeasty
2
yeast
36
1
4
3
2

2

4
4
2
yearn
2
yearbook
2
years
2
year
36
1
4
3
2

2

4
3
2
yawn
2
yawl
2
yaw
36
1
4
3
2

2

4
2
2
yarmulke
2
Yarmouth
36
1
4
3
2

2

4
3
2
yardstick
2
yardage
2
yard
36
1
4
3
2

2
dm
4
2
2
yarrow
2
yarn
36
1
4
3
2

2

4
2
2
yapping
2
yap
36
1
4
3
2

2

4
3
2
Yankton
2
Yankee
2
yank
36
1
4
3
2

2
k
4
1
2
yang
36
1
4
3
2

2

4
2
2
Yamaha
2
yam
36
1
4
3
2

2

4
2
2
Yalta
2
Yale
36
1
4
3
2

2

4
2
2
Yakima
2
yak
36
1
4
3
2
ht
2
s
4
1
2
yacht
36
1
4
3
2
m
2

4
2
2
yachtsmen
2
yachtsman
36
1
4
3
2

2
cklmnprw
4
4
2
Yates
2
Yaqui
2
Yaounde
2
yah
36
1
4
3
2

2

4
2
2
xylene
2
xylem
36
1
4
3
2
l
2
e
4
1
2
xylophone
36
1
4
3
2

2

4
2
2
Xerox
2
xerography
36
1
4
3
2

2
o
4
1
2
Xerxes
36
1
4
3
2
o
2

4
2
2
xenophobia
2
xenon
36
1
4
3
2

2
nr
4
0
36
1
4
3
2

2
ey
4
4
2
x's
2
xi
2
Xavier
2
x
36
1
4
3
2

2

4
2
2
wynn
2
Wyner
36
1
4
3
2

2

4
2
2
Wyatt
2
Wyandotte
36
1
4
3
2

2
an
4
5
2
Wyoming
2
Wyman
2
Wylie
2
Wyeth
2
WY
36
1
4
3
2

2

4
2
2
Wuhan
2
Wu
36
1
4
3
2

2
g
4
1
2
Wronskian
36
1
4
3
2

2
d
4
2
2
wrongful
2
wrong
36
1
4
3
2
o
2

4
3
2
wrongdoing
2
wrongdoer
2
wrongdo
36
1
4
3
2

2
n
4
2
2
wrought
2
wrote
36
1
4
3
2

2

4
2
2
writeup
2
write
36
1
4
3
2

2
e
4
3
2
writhe
2
writ
2
written
36
1
4
3
2
t
2

4
3
2
wristwatch
2
wristband
2
wrist
36
1
4
3
2

2

4
2
2
wrinkle
2
wring
36
1
4
3
2

2

4
3
2
Wrigley
2
wright
2
wriggle
36
1
4
3
2

2
gnst
4
0
36
1
4
3
2
t
2

4
2
2
wrestle
2
wrest
36
1
4
3
2
k
2

4
2
2
wreckage
2
wreck
36
1
4
3
2

2
t
4
1
2
wreak
36
1
4
3
2
h
2

4
2
2
wreathe
2
wreath
36
1
4
3
2

2
acs
4
2
2
wretch
2
wrench
36
1
4
3
2
h
2

4
2
2
wrathful
2
wrath
36
1
4
3
2

2

4
2
2
wrapup
2
wrap
36
1
4
3
2

2
pt
4
3
2
wrangle
2
wraith
2
wrack
36
1
4
3
2

2
aeio
4
1
2
wry
36
1
4
3
2
e
2

4
2
2
woven
2
wove
36
1
4
3
2
d
2

4
2
2
wouldn't
2
would
36
1
4
3
2

2
l
4
1
2
wound
36
1
4
3
2
h
2
l
4
4
2
worthy
2
worthwhile
2
Worthington
2
worth
36
1
4
3
2
ip
2

4
2
2
worshipful
2
worship
36
1
4
3
2

2

4
2
2
worsen
2
worse
36
1
4
3
2

2
eh
4
1
2
worst
36
1
4
3
2

2

4
2
2
worry
2
worrisome
36
1
4
3
2

2

4
2
2
wormy
2
worm
36
1
4
3
2
d
2

4
2
2
worldwide
2
world
36
1
4
3
2

2

4
2
2
workshop
2
worksheet
36
1
4
3
2

2
h
4
3
2
workstation
2
workspace
2
works
36
1
4
3
2

2

4
2
2
workplace
2
workpiece
36
1
4
3
2
n
2

4
2
2
workmanlike
2
workman
36
1
4
3
2

2
a
4
1
2
workmen
36
1
4
3
2

2

4
2
2
workbook
2
workbench
36
1
4
3
2

2

4
2
2
Wordsworth
2
words
36
1
4
3
2

2

4
3
2
Woolworth
2
woolgather
2
wool
36
1
4
3
2

2

4
2
2
woodyard
2
woody
36
1
4
3
2

2

4
3
2
woodwork
2
woodwind
2
Woodward
36
1
4
3
2

2

4
3
2
woodside
2
woodshed
2
Woods
36
1
4
3
2

2

4
2
2
woodruff
2
Woodrow
36
1
4
3
2

2

4
2
2
Woodlawn
2
woodland
36
1
4
3
2

2
a
4
1
2
woodlot
36
1
4
3
2

2

4
3
2
woodcut
2
woodcock
2
woodcarver
36
1
4
3
2

2
clrswy
4
7
2
woodpeck
2
woodhen
2
woodgrain
2
wooden
2
Woodbury
2
Woodard
2
wood
36
1
4
3
2

2
dl
4
2
2
Wooster
2
woo
36
1
4
3
2
r
2

4
3
2
wonderland
2
wonderful
2
wonder
36
1
4
3
2

2
e
4
1
2
wondrous
36
1
4
3
2

2
d
4
4
2
wont
2
won't
2
Wong
2
won
36
1
4
3
2

2

4
2
2
wombat
2
womb
36
1
4
3
2
n
2

4
2
2
womanhood
2
woman
36
1
4
3
2
e
2

4
2
2
wolves
2
wolve
36
1
4
3
2

2

4
5
2
wolfish
2
Wolfgang
2
Wolff
2
Wolfe
2
wolf
36
1
4
3
2

2
fv
4
2
2
wold
2
Wolcott
36
1
4
3
2

2

4
2
2
woke
2
wok
36
1
4
3
2

2

4
3
2
woeful
2
woebegone
2
woe
36
1
4
3
2

2

4
2
2
witty
2
Witt
36
1
4
3
2
t
2

4
2
2
withstood
2
withstand
36
1
4
3
2

2

4
2
2
withhold
2
withheld
36
1
4
3
2

2

4
2
2
wither
2
withe
36
1
4
3
2
w
2

4
3
2
withdrawn
2
withdrawal
2
withdraw
36
1
4
3
2
r
2
a
4
1
2
withdrew
36
1
4
3
2
h
2

4
2
2
witchcraft
2
witch
36
1
4
3
2

2
dehs
4
5
2
withy
2
withal
2
without
2
within
2
with
36
1
4
3
2

2

4
2
2
wispy
2
wisp
36
1
4
3
2

2

4
4
2
wishy
2
wishful
2
wishbone
2
wish
36
1
4
3
2

2

4
4
2
wisenheimer
2
wisecrack
2
wiseacre
2
wise
36
1
4
3
2

2
ehp
4
3
2
wistful
2
wisdom
2
Wisconsin
36
1
4
3
2

2
mt
4
1
2
wire
36
1
4
3
2

2

4
2
2
wiretapping
2
wiretapper
36
1
4
3
2
ap
2
p
4
1
2
wiretap
36
1
4
3
2

2

4
2
2
wiremen
2
wireman
36
1
4
3
2

2
e
4
1
2
wiry
36
1
4
3
2
r
2

4
3
2
wintertime
2
Winters
2
winter
36
1
4
3
2

2
e
4
2
2
wintry
2
Winthrop
36
1
4
3
2

2

4
3
2
Winston
2
winsome
2
Winslow
36
1
4
3
2
e
2

4
2
2
Winnipesaukee
2
Winnipeg
36
1
4
3
2

2
p
4
1
2
Winnie
36
1
4
3
2

2
i
4
2
2
winnow
2
Winnetka
36
1
4
3
2

2

4
2
2
winkle
2
wink
36
1
4
3
2

2

4
2
2
wingmen
2
wingman
36
1
4
3
2

2
m
4
4
2
wingtip
2
wingspan
2
wingback
2
wing
36
1
4
3
2
a
2

4
2
2
winemaster
2
winemake
36
1
4
3
2

2
m
4
3
2
wineskin
2
winery
2
wine
36
1
4
3
2

2

4
4
2
windsurf
2
windstorm
2
Windsor
2
windshield
36
1
4
3
2
w
2

4
3
2
windowsill
2
windowpane
2
window
36
1
4
3
2

2

4
2
2
windbreak
2
windbag
36
1
4
3
2

2
bos
4
6
2
windy
2
windward
2
windup
2
windmill
2
windfall
2
wind
36
1
4
3
2

2

4
2
2
Winchester
2
winch
36
1
4
3
2

2
h
4
1
2
wince
36
1
4
3
2

2
cdegknst
4
5
2
winy
2
wino
2
Winifred
2
Winfield
2
win
36
1
4
3
2
n
2

4
2
2
Wilsonian
2
Wilson
36
1
4
3
2

2
o
4
1
2
Wilshire
36
1
4
3
2

2

4
2
2
Wilmington
2
Wilma
36
1
4
3
2

2

4
2
2
willowy
2
willow
36
1
4
3
2

2
w
4
1
2
Willoughby
36
1
4
3
2
m
2
s
4
1
2
William
36
1
4
3
2

2

4
3
2
Williamson
2
Williamsburg
2
Williams
36
1
4
3
2

2
a
4
2
2
Willis
2
Willie
36
1
4
3
2

2

4
2
2
Willard
2
Willa
36
1
4
3
2

2
aio
4
3
2
Wills
2
willful
2
will
36
1
4
3
2
s
2

4
2
2
Wilkinson
2
Wilkins
36
1
4
3
2

2
n
4
1
2
Wilkie
36
1
4
3
2

2
i
4
1
2
Wilkes
36
1
4
3
2
elm
2

4
2
2
Wilhelmina
2
Wilhelm
36
1
4
3
2

2

4
2
2
wilful
2
Wilfred
36
1
4
3
2

2

4
2
2
Wiley
2
wile
36
1
4
3
2
at
2

4
2
2
wildcatter
2
wildcat
36
1
4
3
2

2
c
4
4
2
wildlife
2
wildfire
2
wilderness
2
wild
36
1
4
3
2

2
defhklms
4
4
2
wily
2
wilt
2
Wilcox
2
Wilbur
36
1
4
3
2

2

4
2
2
wiggly
2
wiggle
36
1
4
3
2
n
2

4
2
2
Wiggins
2
wigging
36
1
4
3
2

2
il
4
0
36
1
4
3
2

2
g
4
4
2
wigwam
2
wigmake
2
Wightman
2
wig
36
1
4
3
2

2

4
3
2
Wier
2
wiener
2
wield
36
1
4
3
2
h
2

4
2
2
widthwise
2
width
36
1
4
3
2
w
2

4
2
2
widowhood
2
widow
36
1
4
3
2
e
2

4
2
2
widget
2
widgeon
36
1
4
3
2

2

4
3
2
widespread
2
widen
2
wide
36
1
4
3
2

2
egot
4
0
36
1
4
3
2

2

4
2
2
wicket
2
wick
36
1
4
3
2

2
k
4
1
2
Wichita
36
1
4
3
2

2

4
2
2
whosoever
2
whose
36
1
4
3
2

2

4
2
2
whoosh
2
whoop
36
1
4
3
2

2

4
3
2
whomsoever
2
whomever
2
whom
36
1
4
3
2

2
s
4
2
2
wholehearted
2
whole
36
1
4
3
2

2

4
2
2
wholesome
2
wholesale
36
1
4
3
2

2
e
4
1
2
wholly
36
1
4
3
2

2

4
3
2
who'll
2
who'd
2
who've
36
1
4
3
2

2

4
2
2
whizzing
2
whiz
36
1
4
3
2

2

4
3
2
whittle
2
Whittier
2
Whittaker
36
1
4
3
2

2

4
3
2
Whitehorse
2
whitehead
2
Whitehall
36
1
4
3
2

2
h
4
5
2
whitewash
2
whitetail
2
whiten
2
whiteface
2
white
36
1
4
3
2

2
et
4
7
2
Whitney
2
Whitman
2
Whitlock
2
whither
2
Whitcomb
2
Whitaker
2
whit
36
1
4
3
2
le
2

4
2
2
whistleable
2
whistle
36
1
4
3
2

2
t
4
3
2
whisper
2
whisk
2
whish
36
1
4
3
2

2

4
4
2
whirlwind
2
whirlpool
2
whirligig
2
whirl
36
1
4
3
2

2
l
4
1
2
whir
36
1
4
3
2

2

4
3
2
Whipple
2
whippet
2
Whippany
36
1
4
3
2

2
p
4
3
2
whipsaw
2
whiplash
2
whip
36
1
4
3
2

2

4
2
2
whinny
2
whine
36
1
4
3
2

2

4
2
2
whimsic
2
whimsey
36
1
4
3
2

2
s
4
2
2
whimper
2
whim
36
1
4
3
2
h
2

4
2
2
whichever
2
which
36
1
4
3
2

2

4
2
2
whet
2
whether
36
1
4
3
2
ith
2

4
2
2
wherewithal
2
wherewith
36
1
4
3
2

2

4
2
2
where're
2
where'd
36
1
4
3
2

2

4
2
2
whereon
2
whereof
36
1
4
3
2

2

4
2
2
whereas
2
whereabout
36
1
4
3
2
e
2
ao'w
4
7
2
wherever
2
whereupon
2
wheresoever
2
wherein
2
wherefore
2
whereby
2
where
36
1
4
3
2

2

4
3
2
whenever
2
whence
2
when
36
1
4
3
2

2

4
5
2
whelp
2
whelm
2
Wheller
2
whelk
2
Whelan
36
1
4
3
2

2

4
2
2
wheezy
2
wheeze
36
1
4
3
2

2

4
4
2
wheelhouse
2
wheelchair
2
wheelbase
2
wheel
36
1
4
3
2

2
lz
4
2
2
wheedle
2
whee
36
1
4
3
2
t
2

4
2
2
Wheatstone
2
wheat
36
1
4
3
2

2

4
2
2
what're
2
what'd
36
1
4
3
2

2
'
4
5
2
whatsoever
2
whatnot
2
Whatley
2
whatever
2
what
36
1
4
3
2

2

4
3
2
wharves
2
Wharton
2
wharf
36
1
4
3
2
e
2

4
2
2
Whalen
2
whale
36
1
4
3
2

2
lrt
4
2
2
wham
2
whack
36
1
4
3
2

2

4
2
2
wetland
2
wet
36
1
4
3
2

2

4
2
2
westernmost
2
western
36
1
4
3
2
r
2
n
4
1
2
westerly
36
1
4
3
2
ey
2

4
2
2
Wesleyan
2
Wesley
36
1
4
3
2

2
e
4
8
2
westward
2
Weston
2
Westminster
2
Westinghouse
2
Westfield
2
Westchester
2
westbound
2
west
36
1
4
3
2

2

4
2
2
Werther
2
wert
36
1
4
3
2

2

4
2
2
weren't
2
were
36
1
4
3
2

2
et
4
1
2
Werner
36
1
4
3
2

2

4
2
2
Wendy
2
Wendell
36
1
4
3
2

2
d
4
1
2
went
36
1
4
3
2

2

4
2
2
Wellesley
2
Welles
36
1
4
3
2

2
s
4
1
2
Weller
36
1
4
3
2

2
e
4
4
2
Wells
2
wellington
2
wellbeing
2
well
36
1
4
3
2

2

4
2
2
Weldon
2
weld
36
1
4
3
2

2

4
2
2
welcome
2
Welch
36
1
4
3
2

2
cdl
4
3
2
welt
2
welsh
2
welfare
36
1
4
3
2

2

4
2
2
weird
2
weir
36
1
4
3
2

2

4
2
2
Weinstein
2
Weinberg
36
1
4
3
2

2

4
2
2
weighty
2
weight
36
1
4
3
2
h
2
t
4
1
2
weigh
36
1
4
3
2

2
gnr
4
3
2
Weiss
2
Weierstrass
2
Wei
36
1
4
3
2

2

4
2
2
weedy
2
weed
36
1
4
3
2

2

4
4
2
weekend
2
weekday
2
weeks
2
week
36
1
4
3
2

2

4
4
2
wedlock
2
wedge
2
wed
2
wednesday
36
1
4
3
2

2

4
4
2
we've
2
we'll
2
we'd
2
we're
36
1
4
3
2

2

4
4
2
Webster
2
weber
2
Webb
2
web
36
1
4
3
2
trip
2

4
2
2
weatherstripping
2
weatherstrip
36
1
4
3
2
her
2
s
4
3
2
weatherproof
2
weatherbeaten
2
weather
36
1
4
3
2

2

4
2
2
wearisome
2
wearied
36
1
4
3
2

2
i
4
3
2
wearable
2
weary
2
wear
36
1
4
3
2
on
2

4
2
2
weaponry
2
weapon
36
1
4
3
2
h
2

4
2
2
wealthy
2
wealth
36
1
4
3
2

2
t
4
1
2
weal
36
1
4
3
2

2

4
2
2
weaken
2
weak
36
1
4
3
2

2
klprt
4
3
2
weave
2
weasel
2
wean
36
1
4
3
2

2

4
2
2
wayside
2
ways
36
1
4
3
2
a
2

4
2
2
waylay
2
waylaid
36
1
4
3
2

2

4
4
2
waxy
2
waxwork
2
waxen
2
wax
36
1
4
3
2

2
fl
4
3
2
wavenumber
2
waveguide
2
wave
36
1
4
3
2
e
2

4
2
2
wavelet
2
wavelength
36
1
4
3
2

2

4
2
2
wavefront
2
waveform
36
1
4
3
2

2
e
4
1
2
wavy
36
1
4
3
2

2

4
4
2
Watts
2
wattle
2
wattage
2
watt
36
1
4
3
2

2

4
3
2
waterside
2
watershed
2
Waters
36
1
4
3
2

2

4
2
2
watermelon
2
Waterman
36
1
4
3
2

2

4
2
2
Waterloo
2
waterline
36
1
4
3
2

2

4
2
2
waterfront
2
waterfall
36
1
4
3
2
r
2
flms
4
9
2
watery
2
waterway
2
Watertown
2
waterproof
2
Waterhouse
2
Watergate
2
watercourse
2
Waterbury
2
water
36
1
4
3
2

2

4
2
2
watchman
2
watchmake
36
1
4
3
2

2
a
4
1
2
watchmen
36
1
4
3
2
h
2
m
4
5
2
watchword
2
watchful
2
watchdog
2
watchband
2
watch
36
1
4
3
2

2
cet
4
3
2
Watson
2
Watkins
2
Watanabe
36
1
4
3
2

2

4
5
2
wastewater
2
wasteland
2
wasteful
2
wastebasket
2
waste
36
1
4
3
2

2
e
4
3
2
wastrel
2
wastage
2
wast
36
1
4
3
2

2

4
2
2
waspish
2
wasp
36
1
4
3
2

2

4
2
2
washbowl
2
washboard
36
1
4
3
2

2
o
4
2
2
Washburn
2
washbasin
36
1
4
3
2

2
b
4
4
2
washy
2
washout
2
wash
2
washington
36
1
4
3
2

2

4
3
2
warty
2
wartime
2
wart
36
1
4
3
2
nt
2

4
2
2
warranty
2
warrant
36
1
4
3
2

2
a
4
2
2
warrior
2
warren
36
1
4
3
2

2

4
2
2
warplane
2
warp
36
1
4
3
2

2

4
6
2
warmup
2
warmth
2
warmonger
2
warmish
2
warmhearted
2
warm
36
1
4
3
2
ouse
2

4
2
2
warehouseman
2
warehouse
36
1
4
3
2

2
h
4
1
2
ware
36
1
4
3
2
o
2

4
2
2
wardroom
2
wardrobe
36
1
4
3
2

2
r
4
2
2
warden
2
ward
36
1
4
3
2

2
demprt
4
10
2
wary
2
Warwick
2
Warsaw
2
warn
2
warlike
2
Waring
2
warhead
2
warfare
2
warble
2
war
36
1
4
3
2

2

4
3
2
Wappinger
2
wapiti
2
wapato
36
1
4
3
2

2

4
2
2
wangle
2
Wang
36
1
4
3
2

2

4
2
2
wander
2
wand
36
1
4
3
2

2

4
5
2
wanton
2
wants
2
wanting
2
wanted
2
want
36
1
4
3
2

2

4
2
2
waltzing
2
waltz
36
1
4
3
2
r
2

4
2
2
Walters
2
Walter
36
1
4
3
2

2
ez
4
3
2
Walton
2
Waltham
2
Walt
36
1
4
3
2

2

4
2
2
wallow
2
wallop
36
1
4
3
2

2

4
2
2
wallet
2
Waller
36
1
4
3
2

2

4
2
2
Wallace
2
wallaby
36
1
4
3
2

2
aeo
4
6
2
wally
2
Walls
2
wallpaper
2
Wallis
2
wallboard
2
wall
36
1
4
3
2

2

4
2
2
walkover
2
walkout
36
1
4
3
2

2
o
4
3
2
walkway
2
walkie
2
walk
36
1
4
3
2

2

4
2
2
Waldorf
2
Waldo
36
1
4
3
2

2
o
4
2
2
Waldron
2
Walden
36
1
4
3
2

2
dklt
4
7
2
Walsh
2
walrus
2
Walpole
2
walnut
2
Walgreen
2
wale
2
Walcott
36
1
4
3
2

2

4
2
2
wakeful
2
Wakefield
36
1
4
3
2
e
2
f
4
4
2
wakeup
2
wakerobin
2
waken
2
wake
36
1
4
3
2

2

4
3
2
waitress
2
Waite
2
wait
36
1
4
3
2
t
2

4
3
2
waistline
2
waistcoat
2
waist
36
1
4
3
2

2

4
2
2
Wainwright
2
wainscot
36
1
4
3
2

2
nst
4
2
2
waive
2
wail
36
1
4
3
2

2

4
2
2
Wahl
2
wah
36
1
4
3
2

2

4
2
2
waggle
2
wagging
36
1
4
3
2

2
g
4
4
2
wagoneer
2
Wagner
2
wage
2
wag
36
1
4
3
2

2

4
2
2
wafer
2
waffle
36
1
4
3
2

2

4
5
2
Wadsworth
2
wadi
2
wade
2
waddle
2
wad
36
1
4
3
2

2

4
3
2
wacky
2
wacke
2
wack
36
1
4
3
2

2
k
4
2
2
Waco
2
WAC
36
1
4
3
2
l
2

4
5
2
vulture
2
vulpine
2
vulnerable
2
vulgar
2
Vulcan
36
1
4
3
2

2

4
2
2
vowel
2
vow
36
1
4
3
2
h
2

4
2
2
vouchsafe
2
vouch
36
1
4
3
2

2
c
4
1
2
Vought
36
1
4
3
2

2

4
3
2
votive
2
vote
2
votary
36
1
4
3
2
c
2

4
2
2
vorticity
2
vortices
36
1
4
3
2

2
i
4
1
2
vortex
36
1
4
3
2
ci
2

4
2
2
voracity
2
voracious
36
1
4
3
2

2
at
4
0
36
1
4
3
2
r
2

4
2
2
voluntary
2
voluntarism
36
1
4
3
2
t
2
a
4
1
2
volunteer
36
1
4
3
2

2

4
2
2
volumetric
2
volume
36
1
4
3
2

2
e
4
1
2
voluminous
36
1
4
3
2

2
mn
4
2
2
voluptuous
2
voluble
36
1
4
3
2

2

4
2
2
Voltaire
2
voltaic
36
1
4
3
2

2
i
4
2
2
voltage
2
Volta
36
1
4
3
2

2
a
4
3
2
voltmeter
2
Volterra
2
volt
36
1
4
3
2
ey
2

4
2
2
volleyball
2
volley
36
1
4
3
2

2

4
2
2
volcanism
2
volcanic
36
1
4
3
2
an
2
i
4
1
2
volcano
36
1
4
3
2

2
cltu
4
5
2
Volvo
2
Volstead
2
Volkswagen
2
volition
2
volatile
36
1
4
3
2
e
2

4
3
2
voiceband
2
voices
2
voice
36
1
4
3
2

2

4
2
2
vogue
2
Vogel
36
1
4
3
2

2
bl
4
1
2
vocate
36
1
4
3
2

2

4
2
2
vocalic
2
vocal
36
1
4
3
2

2
u
4
1
2
vocable
36
1
4
3
2
lar
2

4
2
2
vocabulary
2
vocabularian
36
1
4
3
2

2
a
4
1
2
vociferous
36
1
4
3
2

2
c
4
1
2
void
36
1
4
3
2
adi
2

4
2
2
Vladivostok
2
Vladimir
36
1
4
3
2

2

4
3
2
vivify
2
vivid
2
Vivian
36
1
4
3
2

2
c
4
2
2
Vivaldi
2
viva
36
1
4
3
2

2

4
2
2
vivacity
2
vivacious
36
1
4
3
2

2
i
4
1
2
vivace
36
1
4
3
2

2
ai
4
1
2
vivo
36
1
4
3
2
l
2

4
2
2
vitriolic
2
vitriol
36
1
4
3
2

2
o
4
1
2
vitrify
36
1
4
3
2

2
i
4
2
2
vitro
2
vitreous
36
1
4
3
2

2

4
4
2
vitamin
2
vital
2
vitae
2
vita
36
1
4
3
2

2
ar
4
2
2
Vito
2
vitiate
36
1
4
3
2

2

4
3
2
visitor
2
visitation
2
visit
36
1
4
3
2
n
2

4
2
2
visionary
2
vision
36
1
4
3
2

2
ot
4
2
2
Visigoth
2
visible
36
1
4
3
2

2

4
2
2
viscous
2
viscount
36
1
4
3
2

2
u
4
3
2
viscosity
2
viscometer
2
viscoelastic
36
1
4
3
2
ra
2

4
2
2
visceral
2
viscera
36
1
4
3
2

2
eo
4
0
36
1
4
3
2

2

4
2
2
visage
2
visa
36
1
4
3
2

2
aci
4
6
2
visual
2
vista
2
visor
2
Vishnu
2
vise
2
vis
36
1
4
3
2

2

4
2
2
virus
2
virulent
36
1
4
3
2

2
i
4
1
2
virtuoso
36
1
4
3
2

2

4
2
2
virtuosity
2
virtuosi
36
1
4
3
2

2
s
4
1
2
virtuous
36
1
4
3
2
u
2
o
4
2
2
virtue
2
virtual
36
1
4
3
2

2
i
4
2
2
virgule
2
Virgo
36
1
4
3
2

2
n
4
1
2
Virgil
36
1
4
3
2
a
2

4
2
2
Virginian
2
Virginia
36
1
4
3
2

2
i
4
2
2
virginal
2
virgin
36
1
4
3
2

2
gtu
4
1
2
virile
36
1
4
3
2

2

4
2
2
violet
2
violent
36
1
4
3
2

2

4
2
2
violate
2
viola
36
1
4
3
2
l
2
ae
4
1
2
violin
36
1
4
3
2

2

4
2
2
vintner
2
vintage
36
1
4
3
2

2

4
3
2
vineyard
2
vinegar
2
vine
36
1
4
3
2
ic
2

4
2
2
vindictive
2
vindicate
36
1
4
3
2

2
det
4
3
2
vinyl
2
Vinson
2
Vincent
36
1
4
3
2

2
i
4
2
2
village
2
villa
36
1
4
3
2
n
2

4
2
2
villainous
2
villain
36
1
4
3
2

2
a
4
1
2
villein
36
1
4
3
2

2
l
4
2
2
vilify
2
vile
36
1
4
3
2

2

4
2
2
viii
2
vii
36
1
4
3
2
l
2
a
4
1
2
vigil
36
1
4
3
2
nt
2

4
3
2
vigilantism
2
vigilante
2
vigilant
36
1
4
3
2

2
i
4
2
2
vigorous
2
vignette
36
1
4
3
2
o
2

4
2
2
viewport
2
viewpoint
36
1
4
3
2
am
2

4
2
2
Vietnamese
2
Vietnam
36
1
4
3
2

2
n
4
1
2
Viet
36
1
4
3
2

2

4
2
2
Viennese
2
Vienna
36
1
4
3
2

2
n
4
1
2
Vientiane
36
1
4
3
2

2
p
4
2
2
views
2
view
36
1
4
3
2

2

4
2
2
videotape
2
video
36
1
4
3
2

2
o
4
1
2
vide
36
1
4
3
2

2
e
4
1
2
Vida
36
1
4
3
2

2

4
2
2
Victorian
2
Victoria
36
1
4
3
2

2
a
4
1
2
victorious
36
1
4
3
2
r
2
i
4
2
2
victory
2
victor
36
1
4
3
2

2
o
4
3
2
victual
2
victrola
2
victim
36
1
4
3
2

2

4
2
2
Vicky
2
Vicksburg
36
1
4
3
2

2

4
2
2
vicinity
2
vicinal
36
1
4
3
2

2
n
4
2
2
vicissitude
2
vicious
36
1
4
3
2

2

4
2
2
viceroy
2
vice
36
1
4
3
2
r
2

4
2
2
vicarious
2
vicar
36
1
4
3
2

2
aeikt
4
1
2
Vichy
36
1
4
3
2
a
2
t
4
1
2
vibrant
36
1
4
3
2

2

4
2
2
vibrato
2
vibrate
36
1
4
3
2

2
r
4
1
2
viburnum
36
1
4
3
2

2

4
3
2
vial
2
viaduct
2
via
36
1
4
3
2

2
wnt
4
1
2
vie
36
1
4
3
2
tio
2

4
2
2
vexatious
2
vexation
36
1
4
3
2

2
a
4
1
2
vex
36
1
4
3
2
nar
2

4
2
2
veterinary
2
veterinarian
36
1
4
3
2
r
2
i
4
1
2
veteran
36
1
4
3
2

2
e
4
3
2
veto
2
vetch
2
vet
36
1
4
3
2

2

4
2
2
vestigial
2
vestige
36
1
4
3
2

2
g
4
1
2
vestibule
36
1
4
3
2

2
i
4
3
2
vestry
2
vestal
2
vest
36
1
4
3
2

2
t
4
3
2
vessel
2
vesper
2
vesicular
36
1
4
3
2

2
a
4
1
2
vertices
36
1
4
3
2

2
c
4
1
2
vertigo
36
1
4
3
2

2
b
4
1
2
vertex
36
1
4
3
2
ra
2

4
4
2
vertebrate
2
vertebral
2
vertebrae
2
vertebra
36
1
4
3
2

2
ei
4
0
36
1
4
3
2

2
t
4
2
2
Versailles
2
versa
36
1
4
3
2

2

4
2
2
versatile
2
versatec
36
1
4
3
2

2
a
4
3
2
versus
2
version
2
verse
36
1
4
3
2
n
2

4
2
2
Veronica
2
Verona
36
1
4
3
2

2

4
3
2
vernal
2
vernacular
2
Verna
36
1
4
3
2

2
a
4
3
2
Vernon
2
vernier
2
Verne
36
1
4
3
2

2

4
2
2
vermouth
2
Vermont
36
1
4
3
2

2

4
3
2
vermin
2
vermilion
2
vermiculite
36
1
4
3
2

2
io
4
1
2
vermeil
36
1
4
3
2

2

4
2
2
verity
2
veritable
36
1
4
3
2

2
t
4
3
2
verisimilitude
2
verify
2
veridic
36
1
4
3
2

2

4
2
2
verdict
2
Verdi
36
1
4
3
2

2
i
4
2
2
Verde
2
verdant
36
1
4
3
2
s
2

4
2
2
verbosity
2
verbose
36
1
4
3
2

2

4
2
2
verbatim
2
verbal
36
1
4
3
2

2
ao
4
3
2
verbiage
2
verbena
2
verb
36
1
4
3
2
da
2

4
2
2
verandah
2
veranda
36
1
4
3
2
i
2

4
2
2
veracity
2
veracious
36
1
4
3
2

2
cn
4
1
2
Vera
36
1
4
3
2

2
abdimnost
4
4
2
verve
2
Verlag
2
verge
2
very
36
1
4
3
2
s
2

4
2
2
Venusian
2
Venus
36
1
4
3
2

2

4
2
2
venturesome
2
venture
36
1
4
3
2
r
2
e
4
1
2
venturi
36
1
4
3
2

2
u
4
3
2
ventricle
2
ventilate
2
vent
36
1
4
3
2

2

4
2
2
venomous
2
venom
36
1
4
3
2

2
m
4
1
2
venous
36
1
4
3
2

2

4
3
2
venison
2
Venice
2
venial
36
1
4
3
2
e
2

4
2
2
vengeful
2
vengeance
36
1
4
3
2

2

4
2
2
Veneto
2
Venetian
36
1
4
3
2

2

4
2
2
venerate
2
venerable
36
1
4
3
2

2
a
4
1
2
venereal
36
1
4
3
2

2
rt
4
2
2
Venezuela
2
veneer
36
1
4
3
2

2

4
4
2
vendor
2
vendible
2
vendetta
2
vend
36
1
4
3
2

2
degiotu
4
1
2
venal
36
1
4
3
2
et
2

4
2
2
velvety
2
velvet
36
1
4
3
2

2

4
2
2
velours
2
velocity
36
1
4
3
2

2

4
2
2
vellum
2
Vella
36
1
4
3
2

2

4
2
2
Velasquez
2
velar
36
1
4
3
2

2
alov
4
1
2
veldt
36
1
4
3
2

2

4
2
2
vein
2
veil
36
1
4
3
2
c
2

4
2
2
vehicular
2
vehicle
36
1
4
3
2

2
i
4
1
2
vehement
36
1
4
3
2
ta
2

4
3
2
vegetate
2
vegetarian
2
vegetable
36
1
4
3
2

2
e
4
1
2
Vega
36
1
4
3
2

2

4
2
2
veery
2
veer
36
1
4
3
2

2
r
4
1
2
vee
36
1
4
3
2
tor
2

4
2
2
vectorial
2
vector
36
1
4
3
2

2
ceghilnrstx
4
2
2
Veda
2
veal
36
1
4
3
2
h
2

4
2
2
Vaughn
2
Vaughan
36
1
4
3
2

2

4
2
2
Vaudois
2
vaudeville
36
1
4
3
2

2
dg
4
2
2
vaunt
2
vault
36
1
4
3
2

2

4
2
2
Vatican
2
vat
36
1
4
3
2
a
2

4
2
2
Vassar
2
vassal
36
1
4
3
2

2

4
2
2
vasectomy
2
vase
36
1
4
3
2

2
es
4
3
2
vast
2
Vasquez
2
vascular
36
1
4
3
2

2
ae
4
3
2
Varitype
2
varistor
2
various
36
1
4
3
2

2

4
2
2
variety
2
variegate
36
1
4
3
2

2

4
2
2
variant
2
Varian
36
1
4
3
2

2
n
4
3
2
variate
2
variac
2
variable
36
1
4
3
2

2
i
4
3
2
vary
2
varsity
2
varnish
36
1
4
3
2

2

4
2
2
vaporous
2
vapid
36
1
4
3
2

2

4
3
2
vanity
2
vanish
2
vanilla
36
1
4
3
2

2

4
2
2
Vanderpoel
2
Vanderbilt
36
1
4
3
2

2
r
4
1
2
Vandenberg
36
1
4
3
2

2
e
4
1
2
vandal
36
1
4
3
2

2

4
2
2
Vancouver
2
Vance
36
1
4
3
2

2
cdi
4
6
2
vantage
2
vanquish
2
vanguard
2
vane
2
vanadium
2
van
36
1
4
3
2
p
2

4
2
2
vampire
2
vamp
36
1
4
3
2

2

4
2
2
valuate
2
value
36
1
4
3
2
e
2

4
2
2
valley
2
Valletta
36
1
4
3
2

2

4
2
2
validate
2
valid
36
1
4
3
2

2
d
4
2
2
valine
2
valiant
36
1
4
3
2

2

4
2
2
Valery
2
Valerie
36
1
4
3
2
t
2

4
2
2
valentine
2
valent
36
1
4
3
2
r
2

4
2
2
valedictory
2
valedictorian
36
1
4
3
2
ict
2
o
4
1
2
valediction
36
1
4
3
2

2
dnr
4
3
2
valeur
2
valet
2
vale
36
1
4
3
2

2
eilu
4
5
2
valve
2
Valparaiso
2
Valois
2
Valkyrie
2
Valhalla
36
1
4
3
2

2

4
2
2
vainglorious
2
vain
36
1
4
3
2

2
n
4
1
2
Vail
36
1
4
3
2
na
2

4
2
2
vaginal
2
vagina
36
1
4
3
2

2

4
2
2
vagary
2
vagabond
36
1
4
3
2

2
ai
4
2
2
vague
2
vagrant
36
1
4
3
2

2

4
2
2
Vaduz
2
vade
36
1
4
3
2

2

4
2
2
vacuole
2
vacuolate
36
1
4
3
2

2
l
4
2
2
vacuous
2
vacuo
36
1
4
3
2

2
o
4
2
2
vacuum
2
vacua
36
1
4
3
2
in
2

4
2
2
vaccine
2
vaccinate
36
1
4
3
2

2
t
4
1
2
vacant
36
1
4
3
2

2

4
2
2
vacationland
2
vacate
36
1
4
3
2

2
acu
4
1
2
vacillate
36
1
4
3
2
er
2

4
3
2
uttermost
2
utterance
2
utter
36
1
4
3
2
pia
2

4
2
2
utopian
2
utopia
36
1
4
3
2
t
2

4
3
2
utilities
2
utility
2
utilitarian
36
1
4
3
2

2
i
4
1
2
utile
36
1
4
3
2

2
l
4
1
2
Utica
36
1
4
3
2

2

4
2
2
uterus
2
uterine
36
1
4
3
2

2
r
4
1
2
utensil
36
1
4
3
2

2
eiot
4
4
2
Utrecht
2
utmost
2
Utah
2
UT
36
1
4
3
2

2

4
2
2
usurpation
2
usurp
36
1
4
3
2

2
p
4
3
2
usury
2
usurious
2
usurer
36
1
4
3
2
l
2

4
2
2
usually
2
usual
36
1
4
3
2

2

4
2
2
USIA
2
using
36
1
4
3
2

2

4
2
2
USC&GS
2
USC
36
1
4
3
2

2

4
4
2
usage
2
USAF
2
usable
2
USA
36
1
4
3
2
S
2

4
2
2
U.S.A
2
U.S
36
1
4
3
2
l
2

4
2
2
Ursuline
2
Ursula
36
1
4
3
2

2
u
4
1
2
Ursa
36
1
4
3
2

2

4
2
2
urinary
2
urinal
36
1
4
3
2

2
a
4
1
2
urine
36
1
4
3
2

2
n
4
2
2
Uris
2
Uri
36
1
4
3
2

2
n
4
1
2
urge
36
1
4
3
2

2

4
2
2
urgent
2
urgency
36
1
4
3
2

2
e
4
1
2
urging
36
1
4
3
2
h
2

4
2
2
urethra
2
urethane
36
1
4
3
2

2
t
4
2
2
uremia
2
urea
36
1
4
3
2
an
2

4
4
2
urbanite
2
urbane
2
Urbana
2
urban
36
1
4
3
2

2
n
4
1
2
uracil
36
1
4
3
2

2

4
2
2
uranium
2
urania
36
1
4
3
2

2
i
4
2
2
uranyl
2
Uranus
36
1
4
3
2

2
abegis
4
3
2
Uruguay
2
urn
2
urchin
36
1
4
3
2

2

4
2
2
upwind
2
upward
36
1
4
3
2

2

4
2
2
uptown
2
Upton
36
1
4
3
2

2
o
4
3
2
upturn
2
uptrend
2
uptake
36
1
4
3
2

2
t
4
3
2
upstart
2
upstand
2
upstair
36
1
4
3
2
e
2

4
2
2
upstater
2
upstate
36
1
4
3
2

2
a
4
1
2
upstream
36
1
4
3
2

2

4
2
2
upsilon
2
upside
36
1
4
3
2
t
2

4
2
2
upsetting
2
upset
36
1
4
3
2

2
eit
4
4
2
upswing
2
upsurge
2
upslope
2
upshot
36
1
4
3
2
r
2

4
2
2
uproarious
2
uproar
36
1
4
3
2

2
a
4
1
2
uproot
36
1
4
3
2

2

4
3
2
upriver
2
uprise
2
upright
36
1
4
3
2

2
io
4
1
2
upraise
36
1
4
3
2
assm
2

4
2
2
upperclassmen
2
upperclassman
36
1
4
3
2

2
l
4
1
2
uppercut
36
1
4
3
2
er
2
c
4
2
2
uppermost
2
upper
36
1
4
3
2

2

4
2
2
uplift
2
upland
36
1
4
3
2
ter
2

4
2
2
upholstery
2
upholster
36
1
4
3
2
l
2
s
4
1
2
uphold
36
1
4
3
2

2

4
2
2
upheld
2
upheaval
36
1
4
3
2

2
eo
4
1
2
uphill
36
1
4
3
2

2

4
2
2
updraft
2
update
36
1
4
3
2

2

4
2
2
upbring
2
upbraid
36
1
4
3
2

2
r
4
1
2
upbeat
36
1
4
3
2
rs
2

4
3
2
universe
2
universal
2
university
36
1
4
3
2

2

4
3
2
univariate
2
univalent
2
Univac
36
1
4
3
2

2
ae
4
0
36
1
4
3
2

2

4
2
2
unite
2
united
36
1
4
3
2

2

4
2
2
unitary
2
unitarian
36
1
4
3
2

2
r
4
1
2
unital
36
1
4
3
2

2
ae
4
2
2
unity
2
unit
36
1
4
3
2

2

4
2
2
unison
2
unisex
36
1
4
3
2

2

4
3
2
uniprocessor
2
unipolar
2
uniplex
36
1
4
3
2
od
2

4
2
2
unimodular
2
unimodal
36
1
4
3
2

2

4
2
2
unify
2
uniform
36
1
4
3
2
i
2

4
2
2
unidirectional
2
unidimensional
36
1
4
3
2
r
2
c
4
3
2
understand
2
underling
2
under
36
1
4
3
2
lassm
2

4
2
2
underclassmen
2
underclassman
36
1
4
3
2

2
e
4
1
2
undulate
36
1
4
3
2

2
l
4
4
2
unceremoniously
2
unction
2
uncouth
2
unchristian
36
1
4
3
2

2

4
2
2
unbidden
2
unbeknownst
36
1
4
3
2
im
2

4
2
2
unanimous
2
unanimity
36
1
4
3
2

2
n
4
1
2
unary
36
1
4
3
2

2
ir
4
1
2
umber
36
1
4
3
2

2

4
2
2
umbrage
2
umbra
36
1
4
3
2

2
a
4
1
2
umbrella
36
1
4
3
2
lic
2

4
3
2
umbilicus
2
umbilici
2
umbilical
36
1
4
3
2

2
b
4
2
2
umpire
2
umlaut
36
1
4
3
2
mat
2

4
2
2
ultimatum
2
ultimate
36
1
4
3
2

2
i
4
2
2
ultra
2
ulterior
36
1
4
3
2
er
2

4
2
2
ulcerate
2
ulcer
36
1
4
3
2

2
ct
4
4
2
Ulysses
2
Ulster
2
Ullman
2
Ulan
36
1
4
3
2
ain
2

4
2
2
Ukrainian
2
Ukraine
36
1
4
3
2

2
r
4
1
2
UK
36
1
4
3
2

2

4
3
2
ugly
2
ugh
2
Uganda
36
1
4
3
2
iquit
2

4
2
2
ubiquity
2
ubiquitous
36
1
4
3
2
n
2
n
4
1
2
tyrant
36
1
4
3
2

2
i
4
2
2
tyranny
2
Tyrannosaurus
36
1
4
3
2
c
2

4
2
2
tyrannicide
2
tyrannic
36
1
4
3
2

2
a
4
1
2
tyrosine
36
1
4
3
2
raph
2

4
2
2
typography
2
typographer
36
1
4
3
2

2
g
4
2
2
typology
2
typo
36
1
4
3
2

2

4
3
2
typing
2
typify
2
typic
36
1
4
3
2

2

4
3
2
typhoon
2
Typhon
2
typhoid
36
1
4
3
2

2
o
4
1
2
typhus
36
1
4
3
2

2
sw
4
3
2
typed
2
typeface
2
type
36
1
4
3
2
rit
2

4
2
2
typewritten
2
typewrite
36
1
4
3
2

2

4
2
2
typesetting
2
typesetter
36
1
4
3
2
t
2
t
4
1
2
typeset
36
1
4
3
2

2
e
4
2
2
typescript
2
types
36
1
4
3
2

2
ehio
4
0
36
1
4
3
2

2

4
4
2
twosome
2
Twombly
2
twofold
2
two
36
1
4
3
2
h
2

4
2
2
twitchy
2
twitch
36
1
4
3
2

2
c
4
1
2
twit
36
1
4
3
2
t
2

4
2
2
twisty
2
twist
36
1
4
3
2
l
2

4
2
2
twirly
2
twirl
36
1
4
3
2

2

4
4
2
twinkle
2
twinge
2
twine
2
twin
36
1
4
3
2

2

4
2
2
twill
2
twilight
36
1
4
3
2

2

4
2
2
twigging
2
twig
36
1
4
3
2

2
glnrst
4
2
2
twiddle
2
twice
36
1
4
3
2
t
2

4
2
2
twenty
2
twentieth
36
1
4
3
2

2

4
2
2
twelve
2
twelfth
36
1
4
3
2

2

4
2
2
tweedy
2
tweed
36
1
4
3
2

2
d
4
1
2
tweeze
36
1
4
3
2

2
eln
4
1
2
tweak
36
1
4
3
2

2

4
3
2
twain
2
twaddle
2
TWA
36
1
4
3
2

2
aeio
4
1
2
TWX
36
1
4
3
2

2

4
2
2
TVA
2
TV
36
1
4
3
2
r
2

4
2
2
tutorial
2
tutor
36
1
4
3
2

2
o
4
3
2
tutu
2
Tuttle
2
tutelage
36
1
4
3
2

2

4
2
2
Tuskegee
2
tusk
36
1
4
3
2
a
2
n
4
2
2
Tuscarora
2
Tuscaloosa
36
1
4
3
2

2

4
2
2
Tuscany
2
Tuscan
36
1
4
3
2

2
ck
4
1
2
tussle
36
1
4
3
2
le
2

4
3
2
turtleneck
2
turtleback
2
turtle
36
1
4
3
2

2

4
2
2
turpitude
2
turpentine
36
1
4
3
2

2

4
3
2
turnover
2
turnout
2
turnoff
36
1
4
3
2

2

4
2
2
turnery
2
turned
36
1
4
3
2

2

4
2
2
turnaround
2
turnabout
36
1
4
3
2

2

4
3
2
Turkish
2
turkey
2
turk
36
1
4
3
2
n
2

4
2
2
Turing
2
Turin
36
1
4
3
2

2

4
2
2
turbojet
2
turbofan
36
1
4
3
2

2

4
2
2
turbine
2
turbinate
36
1
4
3
2

2

4
2
2
turbidity
2
turbid
36
1
4
3
2

2
dn
4
0
36
1
4
3
2

2
io
4
2
2
turbulent
2
turban
36
1
4
3
2

2
aeo
4
6
2
turntable
2
turnstone
2
turnpike
2
turnkey
2
turnip
2
turn
36
1
4
3
2

2

4
2
2
tuple
2
tupelo
36
1
4
3
2

2

4
2
2
Tunisia
2
Tunis
36
1
4
3
2

2
s
4
1
2
tunic
36
1
4
3
2
t
2

4
2
2
tungsten
2
tungstate
36
1
4
3
2

2
s
4
1
2
tung
36
1
4
3
2

2

4
3
2
tuned
2
tuneful
2
tune
36
1
4
3
2

2
egi
4
4
2
tunnel
2
tundra
2
tuna
2
tun
36
1
4
3
2
lt
2

4
2
2
tumultuous
2
tumult
36
1
4
3
2

2

4
2
2
tumbrel
2
tumble
36
1
4
3
2

2
bu
4
1
2
tum
36
1
4
3
2

2

4
2
2
tularemia
2
Tulane
36
1
4
3
2

2
a
4
3
2
Tulsa
2
tulle
2
tulip
36
1
4
3
2

2

4
2
2
tugging
2
tug
36
1
4
3
2

2

4
2
2
tuft
2
tuff
36
1
4
3
2

2

4
2
2
Tucker
2
tuck
36
1
4
3
2

2
k
4
1
2
Tucson
36
1
4
3
2
l
2

4
2
2
tubule
2
tubular
36
1
4
3
2
cul
2

4
2
2
tuberculosis
2
tuberculin
36
1
4
3
2

2
r
4
1
2
tube
36
1
4
3
2

2
eu
4
2
2
tuba
2
tub
36
1
4
3
2

2

4
2
2
TTY
2
TTL
36
1
4
3
2
r
2

4
2
2
tsarina
2
tsar
36
1
4
3
2

2
a
4
1
2
tsunami
36
1
4
3
2
h
2

4
2
2
truthful
2
truth
36
1
4
3
2

2

4
4
2
trustworthy
2
trustful
2
trustee
2
trust
36
1
4
3
2

2
t
4
1
2
truss
36
1
4
3
2

2
c
4
2
2
trunk
2
trundle
36
1
4
3
2

2

4
2
2
trumpet
2
trumpery
36
1
4
3
2

2
e
4
1
2
trump
36
1
4
3
2

2
p
4
2
2
Trumbull
2
Truman
36
1
4
3
2

2

4
2
2
Trudy
2
trudge
36
1
4
3
2

2

4
3
2
truculent
2
truck
2
truce
36
1
4
3
2
n
2

4
2
2
truant
2
truancy
36
1
4
3
2

2

4
2
2
Troutman
2
trout
36
1
4
3
2

2
l
4
1
2
troubador
36
1
4
3
2

2

4
2
2
troublesome
2
troubleshoot
36
1
4
3
2
e
2
s
4
1
2
trouble
36
1
4
3
2

2
bt
4
4
2
trouser
2
troupe
2
trounce
2
trough
36
1
4
3
2
pher
2

4
2
2
tropospheric
2
troposphere
36
1
4
3
2

2
s
4
1
2
tropopause
36
1
4
3
2

2

4
2
2
trophy
2
trophic
36
1
4
3
2

2
ho
4
1
2
tropic
36
1
4
3
2

2

4
2
2
trompe
2
trombone
36
1
4
3
2
l
2

4
3
2
trollop
2
trolley
2
troll
36
1
4
3
2

2

4
2
2
trodden
2
trod
36
1
4
3
2

2
dlmpu
4
6
2
troy
2
trot
2
troop
2
Trojan
2
troika
2
troglodyte
36
1
4
3
2

2

4
2
2
trivial
2
trivia
36
1
4
3
2

2
a
4
1
2
trivium
36
1
4
3
2

2
i
4
1
2
trivalent
36
1
4
3
2
ph
2
a
4
1
2
triumph
36
1
4
3
2

2

4
2
2
triumphant
2
triumphal
36
1
4
3
2

2
m
4
1
2
triune
36
1
4
3
2

2

4
3
2
triton
2
tritium
2
trite
36
1
4
3
2
a
2

4
2
2
tristate
2
Tristan
36
1
4
3
2

2
t
4
2
2
trisyllable
2
trisodium
36
1
4
3
2

2

4
2
2
tripoli
2
tripod
36
1
4
3
2

2
t
4
2
2
triplex
2
triple
36
1
4
3
2

2

4
2
2
Triplett
2
triplet
36
1
4
3
2

2
e
4
1
2
triplicate
36
1
4
3
2

2
lo
4
5
2
triptych
2
triphenylphosphine
2
tripe
2
tripartite
2
trip
36
1
4
3
2

2

4
3
2
trioxide
2
triode
2
trio
36
1
4
3
2

2
t
4
1
2
Trinidad
36
1
4
3
2

2

4
2
2
trinity
2
trinitarian
36
1
4
3
2

2
i
4
1
2
trinket
36
1
4
3
2

2

4
2
2
trimester
2
trimer
36
1
4
3
2

2
e
4
1
2
trim
36
1
4
3
2

2

4
2
2
trilogy
2
trilobite
36
1
4
3
2

2
i
4
1
2
trill
36
1
4
3
2
on
2

4
2
2
trillionth
2
trillion
36
1
4
3
2

2
lo
4
0
36
1
4
3
2
n
2

4
2
2
trigonometry
2
trigonal
36
1
4
3
2

2
o
4
2
2
trigram
2
trig
36
1
4
3
2
o
2

4
2
2
trifluouride
2
trifluoride
36
1
4
3
2
l
2
u
4
1
2
trifle
36
1
4
3
2

2

4
3
2
tries
2
triennial
2
tried
36
1
4
3
2

2

4
2
2
tridiagonal
2
trident
36
1
4
3
2

2

4
5
2
tricky
2
trickster
2
trickle
2
trickery
2
trick
36
1
4
3
2
oro
2

4
2
2
trichloroethane
2
trichloroacetic
36
1
4
3
2

2
l
4
2
2
trichrome
2
Trichinella
36
1
4
3
2

2
hk
4
1
2
Triceratops
36
1
4
3
2

2

4
2
2
tribute
2
tributary
36
1
4
3
2

2

4
2
2
tribune
2
tribunal
36
1
4
3
2

2
nt
4
1
2
tribulate
36
1
4
3
2
m
2

4
2
2
tribesmen
2
tribesman
36
1
4
3
2

2
s
4
1
2
tribe
36
1
4
3
2

2
eu
4
1
2
tribal
36
1
4
3
2

2
u
4
1
2
triangle
36
1
4
3
2

2

4
2
2
triangulate
2
triangular
36
1
4
3
2
l
2
a
4
1
2
Triangulum
36
1
4
3
2

2
g
4
1
2
Trianon
36
1
4
3
2

2
n
4
6
2
triatomic
2
Triassic
2
trial
2
triad
2
triac
2
triable
36
1
4
3
2

2
abcdefglmnopstuv
4
1
2
trihedral
36
1
4
3
2

2

4
3
2
trestle
2
tress
2
trespass
36
1
4
3
2

2

4
2
2
trendy
2
trend
36
1
4
3
2
h
2
e
4
2
2
trenchant
2
trench
36
1
4
3
2
rm
2

4
2
2
trenchermen
2
trencherman
36
1
4
3
2

2
cd
4
1
2
Trenton
36
1
4
3
2

2

4
4
2
tremulous
2
tremor
2
tremendous
2
tremble
36
1
4
3
2

2

4
2
2
treetop
2
tree
36
1
4
3
2

2
cdst
4
0
36
1
4
3
2

2

4
3
2
treaty
2
treatise
2
treat
36
1
4
3
2
r
2

4
2
2
treasury
2
treasure
36
1
4
3
2
n
2

4
2
2
treasonous
2
treason
36
1
4
3
2

2
ou
4
0
36
1
4
3
2

2

4
3
2
treadmill
2
treadle
2
tread
36
1
4
3
2
her
2

4
2
2
treachery
2
treacherous
36
1
4
3
2

2
aemns
4
6
2
Trevelyan
2
trepidation
2
trellis
2
trek
2
trefoil
2
treble
36
1
4
3
2

2
a
4
1
2
traverse
36
1
4
3
2

2

4
2
2
traversal
2
traversable
36
1
4
3
2

2
s
4
1
2
travertine
36
1
4
3
2

2

4
2
2
travelogue
2
travel
36
1
4
3
2

2
lr
4
1
2
travesty
36
1
4
3
2

2
e
4
2
2
Travis
2
travail
36
1
4
3
2
ma
2

4
2
2
traumatic
2
trauma
36
1
4
3
2

2

4
2
2
trashy
2
trash
36
1
4
3
2

2
h
4
1
2
Trastevere
36
1
4
3
2
id
2

4
2
2
trapezoidal
2
trapezoid
36
1
4
3
2
z
2
o
4
1
2
trapezium
36
1
4
3
2

2
e
4
1
2
trap
36
1
4
3
2
s
2

4
2
2
transverse
2
transversal
36
1
4
3
2
e
2
r
4
1
2
transvestite
36
1
4
3
2

2

4
2
2
transshipping
2
transshipped
36
1
4
3
2
hip
2
p
4
1
2
transship
36
1
4
3
2

2

4
3
2
transposition
2
transpose
2
transposable
36
1
4
3
2
t
2

4
3
2
transporter
2
transportation
2
transport
36
1
4
3
2

2
rs
4
1
2
transpond
36
1
4
3
2
ant
2

4
2
2
transplantation
2
transplant
36
1
4
3
2
r
2

4
2
2
transpire
2
transpiration
36
1
4
3
2

2

4
2
2
transparent
2
transpacific
36
1
4
3
2

2
ailo
4
0
36
1
4
3
2

2

4
2
2
transom
2
transoceanic
36
1
4
3
2
t
2

4
2
2
transmute
2
transmutation
36
1
4
3
2

2
st
4
0
36
1
4
3
2

2

4
2
2
transmitter
2
transmitted
36
1
4
3
2

2

4
3
2
transmittance
2
transmittal
2
transmittable
36
1
4
3
2

2
ae
4
1
2
transmitting
36
1
4
3
2

2
t
4
1
2
transmit
36
1
4
3
2
si
2

4
2
2
transmission
2
transmissible
36
1
4
3
2

2
iu
4
1
2
transmogrify
36
1
4
3
2

2

4
3
2
translucent
2
transliterate
2
translate
36
1
4
3
2

2

4
2
2
transitive
2
transition
36
1
4
3
2

2
i
4
3
2
transitory
2
Transite
2
transit
36
1
4
3
2

2
t
4
2
2
transistor
2
transient
36
1
4
3
2
ress
2

4
3
2
transgressor
2
transgression
2
transgress
36
1
4
3
2
s
2

4
3
2
transfusion
2
transfuse
2
transfusable
36
1
4
3
2
rm
2

4
2
2
transformation
2
transform
36
1
4
3
2

2

4
2
2
transfix
2
transfinite
36
1
4
3
2
r
2
er
4
3
2
transferor
2
transferable
2
transfer
36
1
4
3
2

2

4
3
2
transferring
2
transferred
2
transferral
36
1
4
3
2

2

4
2
2
transference
2
transferee
36
1
4
3
2

2
eiou
4
0
36
1
4
3
2

2

4
2
2
transept
2
transect
36
1
4
3
2
uc
2

4
2
2
transduction
2
transducer
36
1
4
3
2
t
2

4
2
2
transcription
2
transcript
36
1
4
3
2
i
2
p
4
1
2
transcribe
36
1
4
3
2
n
2

4
2
2
transcontinental
2
transconductance
36
1
4
3
2

2
n
4
1
2
transceiver
36
1
4
3
2
nt
2

4
2
2
transcendental
2
transcendent
36
1
4
3
2
d
2
e
4
1
2
transcend
36
1
4
3
2

2
eor
4
0
36
1
4
3
2

2

4
3
2
transatlantic
2
transalpine
2
transact
36
1
4
3
2

2
acdefgilmopsv
4
1
2
Transylvania
36
1
4
3
2
uil
2

4
2
2
tranquillity
2
tranquil
36
1
4
3
2

2
qs
4
1
2
trance
36
1
4
3
2

2
s
4
1
2
your
36
1
4
3
2

2

4
2
2
trample
2
tramp
36
1
4
3
2

2

4
4
2
you've
2
you're
2
you'll
2
you'd
36
1
4
3
2

2
'rnt
4
1
2
you
36
1
4
3
2

2
udgknrs
4
2
2
yow
2
yolk
36
1
4
3
2

2
p
4
3
2
tramway
2
trammel
2
tram
36
1
4
3
2

2
alos
4
5
2
Yerkes
2
yen
2
Yemen
2
yet
2
ye
36
1
4
3
2

2
rs
4
4
2
Yeats
2
yeah
2
Yeager
2
yea
36
1
4
3
2

2
eoaituv
4
5
2
YWCA
2
y's
2
Ypsilanti
2
YMCA
2
y
36
1
4
3
2
r
2

4
2
2
traitorous
2
traitor
36
1
4
3
2

2
o
4
1
2
trait
36
1
4
3
2

2

4
2
2
trainmen
2
trainman
36
1
4
3
2

2
bmps
4
10
2
worktable
2
workout
2
workload
2
workhorse
2
workforce
2
workday
2
workaday
2
working
2
worked
2
work
36
1
4
3
2

2
s
4
2
2
wordy
2
word
36
1
4
3
2

2

4
2
2
trainee
2
trained
36
1
4
3
2

2
dklmrst
4
3
2
worn
2
wore
2
Worcester
36
1
4
3
2

2
ab
4
1
2
women
36
1
4
3
2

2
mreklnouv
4
4
2
wow
2
Wotan
2
wop
2
wobble
36
1
4
3
2

2

4
4
2
trailside
2
trailhead
2
trailblaze
2
trail
36
1
4
3
2

2
hct
4
2
2
witness
2
wit
36
1
4
3
2

2
em
4
2
2
training
2
train
36
1
4
3
2
c
2

4
2
2
tragicomic
2
tragic
36
1
4
3
2

2
tcdeglnrs
4
5
2
wizard
2
wive
2
wipe
2
wife
2
WI
36
1
4
3
2
d
2

4
2
2
tragedy
2
tragedian
36
1
4
3
2

2
ei
4
1
2
trag
36
1
4
3
2

2
'lmos
4
5
2
whore
2
whop
2
whoever
2
whoa
2
who
36
1
4
3
2

2

4
2
2
trafficking
2
trafficked
36
1
4
3
2
fic
2
k
4
1
2
traffic
36
1
4
3
2

2
cmnprstzl
4
2
2
whig
2
whiff
36
1
4
3
2

2
aelnrt
4
0
36
1
4
3
2
tion
2

4
2
2
tradition
2
traditional
36
1
4
3
2
m
2

4
2
2
tradesmen
2
tradesman
36
1
4
3
2

2
eioa
4
2
2
whup
2
why
36
1
4
3
2

2
tl
4
0
36
1
4
3
2

2
s
4
3
2
tradeoff
2
trademark
2
trade
36
1
4
3
2

2
kd
4
2
2
weep
2
wee
36
1
4
3
2

2

4
2
2
tractor
2
tract
36
1
4
3
2

2
esab'dilnrt
4
5
2
Weyerhauser
2
wept
2
Wehr
2
WECo
2
we
36
1
4
3
2

2
nsycdfghiklprtvx
4
3
2
Wabash
2
Waals
2
WA
36
1
4
3
2

2

4
2
2
trackage
2
track
36
1
4
3
2

2

4
4
2
traceback
2
tracery
2
traceable
2
trace
36
1
4
3
2

2
ls
4
4
2
wayward
2
Wayne
2
waybill
2
way
36
1
4
3
2

2
hpt
4
3
2
Wasserman
2
wasn't
2
was
36
1
4
3
2

2
ekt
4
2
2
Tracy
2
trachea
36
1
4
3
2

2

4
2
2
Toyota
2
toy
36
1
4
3
2

2

4
2
2
toxicology
2
toxic
36
1
4
3
2

2
tdg
4
2
2
wane
2
wan
36
1
4
3
2

2
aehioruy
4
3
2
WV
2
w's
2
w
36
1
4
3
2

2
icglrtuw
4
5
2
voyage
2
Voss
2
voodoo
2
von
2
vomit
36
1
4
3
2
i
2
c
4
1
2
toxin
36
1
4
3
2

2

4
2
2
townsmen
2
townsman
36
1
4
3
2

2
eabcdgilnorstv
4
4
2
viz
2
vixen
2
Viking
2
vi
36
1
4
3
2

2
cdgilmnprstu
4
1
2
VA
36
1
4
3
2

2
aioelu
4
6
2
vying
2
VT
2
v's
2
Vreeland
2
VHF
2
v
36
1
4
3
2

2
m
4
1
2
Townsend
36
1
4
3
2

2
s
4
2
2
townhouse
2
town
36
1
4
3
2

2
ar
4
0
36
1
4
3
2
e
2

4
2
2
towhee
2
towhead
36
1
4
3
2

2

4
5
2
useless
2
uses
2
useful
2
used
2
use
36
1
4
3
2

2
euaCI
4
7
2
USSR
2
USPS
2
USN
2
usher
2
USGS
2
USDA
2
us
36
1
4
3
2

2
bdhlprstw
4
6
2
upkeep
2
upgrade
2
upend
2
upcome
2
upon
2
up
36
1
4
3
2

2

4
2
2
tower
2
towel
36
1
4
3
2

2
iabcdksf
4
6
2
unless
2
unwieldy
2
unruly
2
UNESCO
2
until
2
UN
36
1
4
3
2
n
2

4
2
2
unions
2
union
36
1
4
3
2
rd
2

4
2
2
towards
2
toward
36
1
4
3
2

2
odfmpstv
4
7
2
Unix
2
Uniroyal
2
unique
2
uninominal
2
unilateral
2
unicorn
2
uniaxial
36
1
4
3
2

2
npsbgklmr.t
4
4
2
u's
2
UHF
2
UCLA
2
u
36
1
4
3
2

2
pr
4
6
2
Tyson
2
Tyndall
2
Tyler
2
tying
2
tycoon
2
Tyburn
36
1
4
3
2

2

4
2
2
tournament
2
tour
36
1
4
3
2
h
2

4
4
2
touchy
2
touchstone
2
touchdown
2
touch
36
1
4
3
2

2
nbikpt
4
6
2
turvy
2
turret
2
turquoise
2
turmoil
2
turgid
2
turf
36
1
4
3
2

2
rbcfglmnpst
4
4
2
tuxedo
2
tuition
2
Tudor
2
tuesday
36
1
4
3
2

2
crg
4
2
2
tout
2
tousle
36
1
4
3
2

2

4
4
2
trytophan
2
trypsin
2
trying
2
try
36
1
4
3
2

2
acdmnst
4
3
2
truism
2
truly
2
true
36
1
4
3
2

2

4
2
2
totemic
2
totem
36
1
4
3
2

2
m
4
1
2
tote
36
1
4
3
2

2
dicfgmnpsuv
4
3
2
tray
2
trawl
2
trajectory
36
1
4
3
2

2
nlt
4
1
2
traipse
36
1
4
3
2

2
ei
4
0
36
1
4
3
2
l
2

4
2
2
totalitarian
2
total
36
1
4
3
2

2
auyeio
4
1
2
TRW
36
1
4
3
2

2
aehn
4
2
2
towboat
2
tow
36
1
4
3
2

2
ae
4
1
2
tot
36
1
4
3
2

2

4
2
2
toss
2
Toshiba
36
1
4
3
2

2

4
2
2
torture
2
tortuous
36
1
4
3
2
ise
2

4
2
2
tortoiseshell
2
tortoise
36
1
4
3
2

2
ou
4
1
2
tort
36
1
4
3
2

2

4
2
2
torso
2
torsion
36
1
4
3
2

2

4
2
2
things
2
thing
36
1
4
3
2

2

4
4
2
torrid
2
torrent
2
Torrance
2
torr
36
1
4
3
2

2

4
3
2
torpor
2
torpid
2
torpedo
36
1
4
3
2
d
2

4
2
2
toroidal
2
toroid
36
1
4
3
2

2

4
2
2
telephones
2
telephone
36
1
4
3
2

2
i
4
1
2
Toronto
36
1
4
3
2

2

4
2
2
tornado
2
torn
36
1
4
3
2

2

4
2
2
teams
2
teamster
36
1
4
3
2

2
o
4
5
2
taker
2
takes
2
taketh
2
taken
2
take
36
1
4
3
2

2
noprst
4
8
2
tory
2
torus
2
torque
2
tori
2
tore
2
torch
2
Torah
2
tor
36
1
4
3
2
t
2

4
2
2
supports
2
support
36
1
4
3
2

2

4
2
2
Topsy
2
topsoil
36
1
4
3
2
og
2

4
2
2
topology
2
topologize
36
1
4
3
2

2

4
2
2
styles
2
style
36
1
4
3
2

2
l
4
2
2
topography
2
topocentric
36
1
4
3
2

2
a
4
1
2
statesmen
36
1
4
3
2

2
osi
4
8
2
topple
2
topnotch
2
topmost
2
topgallant
2
Topeka
2
topcoat
2
topaz
2
top
36
1
4
3
2

2

4
2
2
toothpick
2
toothpaste
36
1
4
3
2
rd
2

4
2
2
standards
2
standard
36
1
4
3
2

2

4
2
2
spending
2
spend
36
1
4
3
2

2
p
4
2
2
toothbrush
2
tooth
36
1
4
3
2

2
h
4
2
2
tootle
2
toot
36
1
4
3
2
c
2
a
4
1
2
specific
36
1
4
3
2

2

4
3
2
spaceship
2
spaces
2
spacesuit
36
1
4
3
2
et
2

4
2
2
soviets
2
soviet
36
1
4
3
2

2

4
4
2
toolsmith
2
toolmake
2
toolkit
2
tool
36
1
4
3
2
e
2

4
2
2
sources
2
source
36
1
4
3
2

2
lt
4
3
2
took
2
toodle
2
too
36
1
4
3
2
il
2

4
2
2
tonsillitis
2
tonsil
36
1
4
3
2
me
2

4
2
2
sometimes
2
sometime
36
1
4
3
2

2

4
2
2
smaller
2
Smalley
36
1
4
3
2

2

4
3
2
tonight
2
tonic
2
Toni
36
1
4
3
2

2

4
2
2
sizes
2
size
36
1
4
3
2
t
2

4
2
2
situation
2
situate
36
1
4
3
2

2

4
2
2
tongue
2
tong
36
1
4
3
2
e
2

4
2
2
sincerely
2
sincere
36
1
4
3
2

2
gis
4
6
2
tony
2
tonnage
2
tonk
2
tone
2
tonal
2
ton
36
1
4
3
2
raph
2

4
2
2
tomography
2
tomograph
36
1
4
3
2

2
g
4
1
2
tomorrow
36
1
4
3
2

2

4
2
2
tommy
2
Tommie
36
1
4
3
2

2

4
3
2
server
2
served
2
serve
36
1
4
3
2

2

4
2
2
tombstone
2
tomb
36
1
4
3
2

2

4
3
2
sends
2
sending
2
send
36
1
4
3
2
to
2

4
2
2
tomatoes
2
tomato
36
1
4
3
2

2
abmo
4
4
2
Tompkins
2
Tomlinson
2
tome
2
Tom
36
1
4
3
2

2
i
4
3
2
seems
2
seemed
2
seem
36
1
4
3
2

2
i
4
1
2
secure
36
1
4
3
2

2

4
3
2
tollhouse
2
tollgate
2
toll
36
1
4
3
2
a
2

4
3
2
tolerate
2
tolerant
2
tolerable
36
1
4
3
2

2
r
4
1
2
Toledo
36
1
4
3
2

2
el
4
3
2
toluene
2
Tolstoy
2
told
36
1
4
3
2

2

4
3
2
says
2
saying
2
say
36
1
4
3
2

2

4
3
2
Tokyo
2
token
2
tokamak
36
1
4
3
2
t
2

4
2
2
toiletry
2
toilet
36
1
4
3
2
e
2

4
2
2
rules
2
rule
36
1
4
3
2
l
2
e
4
2
2
toilsome
2
toil
36
1
4
3
2
w
2

4
2
2
reviews
2
review
36
1
4
3
2

2

4
2
2
toggle
2
togging
36
1
4
3
2

2
g
4
4
2
togs
2
Togo
2
together
2
tog
36
1
4
3
2
rn
2

4
3
2
returning
2
returned
2
return
36
1
4
3
2

2

4
2
2
tofu
2
toffee
36
1
4
3
2

2

4
3
2
toenail
2
TOEFL
2
toe
36
1
4
3
2
rce
2

4
3
2
resources
2
resource
2
resourceful
36
1
4
3
2

2

4
4
2
requirements
2
requires
2
required
2
require
36
1
4
3
2

2

4
2
2
toddle
2
Todd
36
1
4
3
2
y
2

4
2
2
today'll
2
today
36
1
4
3
2

2
ad
4
0
36
1
4
3
2

2
e
4
1
2
requiring
36
1
4
3
2

2

4
2
2
Tobago
2
tobacco
36
1
4
3
2
n
2

4
3
2
remains
2
remain
2
remainder
36
1
4
3
2

2
a
4
1
2
Toby
36
1
4
3
2
t
2

4
2
2
toastmaster
2
toast
36
1
4
3
2
n
2

4
2
2
relations
2
relation
36
1
4
3
2

2
o
4
1
2
relating
36
1
4
3
2

2

4
2
2
related
2
relate
36
1
4
3
2

2

4
2
2
toady
2
toad
36
1
4
3
2

2
ds
4
0
36
1
4
3
2

2
abdEfgiklmnoprstwuxy
4
2
2
toccata
2
to
36
1
4
3
2

2
ei
4
0
36
1
4
3
2
n
2

4
2
2
regions
2
region
36
1
4
3
2

2

4
2
2
TNT
2
TN
36
1
4
3
2
d
2

4
2
2
records
2
record
36
1
4
3
2
t
2

4
2
2
recently
2
recent
36
1
4
3
2

2

4
2
2
Titus
2
titular
36
1
4
3
2

2

4
2
2
received
2
receive
36
1
4
3
2

2
e
4
1
2
receiving
36
1
4
3
2
on
2
a
4
2
2
reasons
2
reason
36
1
4
3
2

2

4
2
2
titillate
2
titian
36
1
4
3
2

2

4
2
2
titanium
2
titanic
36
1
4
3
2

2

4
2
2
reaches
2
reached
36
1
4
3
2

2
e
4
2
2
reaching
2
reach
36
1
4
3
2
n
2
i
4
2
2
titanate
2
Titan
36
1
4
3
2

2
aiu
4
5
2
titrate
2
titmouse
2
title
2
tithe
2
tit
36
1
4
3
2
n
2

4
2
2
raising
2
raisin
36
1
4
3
2

2

4
2
2
tiresome
2
tire
36
1
4
3
2

2

4
2
2
Tirana
2
tirade
36
1
4
3
2

2

4
3
2
raises
2
raised
2
raise
36
1
4
3
2

2
ae
4
0
36
1
4
3
2

2

4
2
2
quickly
2
quicklime
36
1
4
3
2

2

4
3
2
tippy
2
tipple
2
Tipperary
36
1
4
3
2

2
n
4
3
2
provides
2
provided
2
provide
36
1
4
3
2

2
p
4
4
2
tiptoe
2
tipsy
2
tipoff
2
tip
36
1
4
3
2

2

4
2
2
tintype
2
tint
36
1
4
3
2

2

4
2
2
proposing
2
proposition
36
1
4
3
2

2

4
3
2
proposes
2
proposed
2
propose
36
1
4
3
2

2

4
2
2
tinkle
2
tinker
36
1
4
3
2

2
e
4
2
2
programming
2
programmable
36
1
4
3
2

2

4
2
2
tingle
2
tinge
36
1
4
3
2

2

4
2
2
profits
2
profit
36
1
4
3
2

2

4
2
2
productivity
2
productive
36
1
4
3
2

2
v
4
1
2
production
36
1
4
3
2

2
i
4
2
2
products
2
product
36
1
4
3
2

2
gkt
4
8
2
tiny
2
tinsel
2
tinfoil
2
tine
2
tinder
2
tincture
2
Tina
2
tin
36
1
4
3
2

2

4
2
2
timothy
2
Timon
36
1
4
3
2

2

4
2
2
producing
2
producible
36
1
4
3
2

2

4
3
2
produces
2
produced
2
produce
36
1
4
3
2

2

4
2
2
processing
2
procession
36
1
4
3
2

2

4
2
2
probably
2
probabilist
36
1
4
3
2

2
s
4
7
2
timeless
2
Timex
2
timeworn
2
timetable
2
timepiece
2
timeout
2
time
36
1
4
3
2

2

4
2
2
prices
2
price
36
1
4
3
2
r
2

4
2
2
timberland
2
timber
36
1
4
3
2

2
e
4
1
2
timbre
36
1
4
3
2

2
beo
4
2
2
timid
2
Tim
36
1
4
3
2

2
t
4
1
2
presence
36
1
4
3
2

2

4
2
2
tilth
2
tilt
36
1
4
3
2
bl
2

4
2
2
possibly
2
possible
36
1
4
3
2

2

4
2
2
population
2
populate
36
1
4
3
2

2
t
4
4
2
till
2
tile
2
tilde
2
til
36
1
4
3
2

2

4
2
2
Tigris
2
tigress
36
1
4
3
2
t
2

4
2
2
tighten
2
tight
36
1
4
3
2

2
hr
4
1
2
tiger
36
1
4
3
2

2

4
2
2
tift
2
Tiffany
36
1
4
3
2

2

4
2
2
planning
2
planned
36
1
4
3
2

2

4
4
2
tier
2
Tientsin
2
tied
2
tie
36
1
4
3
2

2

4
3
2
tidewater
2
tideland
2
tide
36
1
4
3
2
nce
2

4
2
2
performances
2
performance
36
1
4
3
2

2
e
4
4
2
tidy
2
tidbit
2
tidal
2
tid
36
1
4
3
2

2

4
2
2
ticklish
2
tickle
36
1
4
3
2

2
l
4
2
2
ticket
2
tick
36
1
4
3
2

2
k
4
1
2
tic
36
1
4
3
2

2

4
2
2
particularly
2
particular
36
1
4
3
2

2
t
4
1
2
Tiber
36
1
4
3
2

2

4
2
2
Tibetan
2
Tibet
36
1
4
3
2

2
e
4
1
2
tibia
36
1
4
3
2

2
bcdefglmnprt
4
3
2
tissue
2
Tioga
2
ti
36
1
4
3
2

2

4
2
2
ours
2
ourselves
36
1
4
3
2
d
2

4
2
2
thyroidal
2
thyroid
36
1
4
3
2
ation
2

4
2
2
organizations
2
organization
36
1
4
3
2

2
i
4
4
2
thyroxine
2
thyrotoxic
2
thyronine
2
thyroglobulin
36
1
4
3
2

2
o
4
1
2
thyratron
36
1
4
3
2

2

4
3
2
ordered
2
orders
2
order
36
1
4
3
2

2

4
3
2
thymus
2
thymine
2
thyme
36
1
4
3
2

2
mr
4
1
2
thy
36
1
4
3
2

2

4
3
2
operation
2
operating
2
operatic
36
1
4
3
2

2

4
2
2
operated
2
operate
36
1
4
3
2
a
2

4
2
2
thwart
2
thwack
36
1
4
3
2

2

4
4
2
opens
2
opening
2
opened
2
open
36
1
4
3
2

2

4
2
2
Thursday
2
Thurman
36
1
4
3
2

2

4
2
2
thunderstorm
2
thundershower
36
1
4
3
2

2

4
2
2
thunderbolt
2
thunderbird
36
1
4
3
2
der
2
bs
4
4
2
thunderous
2
thunderflower
2
thunderclap
2
thunder
36
1
4
3
2

2

4
2
2
thumbnail
2
thumb
36
1
4
3
2

2

4
2
2
numbers
2
number
36
1
4
3
2

2
b
4
1
2
thump
36
1
4
3
2

2

4
2
2
thulium
2
Thule
36
1
4
3
2

2
r
4
1
2
numbed
36
1
4
3
2

2
e
4
1
2
numb
36
1
4
3
2

2

4
2
2
thuggee
2
thug
36
1
4
3
2

2
glmnr
4
3
2
thus
2
thud
2
Thuban
36
1
4
3
2

2

4
2
2
thrust
2
thrush
36
1
4
3
2

2
s
4
2
2
Thruway
2
thrum
36
1
4
3
2

2

4
2
2
never
2
nevertheless
36
1
4
3
2

2

4
4
2
thrown
2
throwback
2
throwaway
2
throw
36
1
4
3
2
gh
2

4
3
2
throughput
2
throughout
2
through
36
1
4
3
2

2
s
4
4
2
named
2
nameplate
2
nameable
2
name
36
1
4
3
2

2

4
2
2
throng
2
throne
36
1
4
3
2

2

4
2
2
names
2
namesake
36
1
4
3
2

2

4
2
2
ms.
2
Ms
36
1
4
3
2

2

4
2
2
mrs.
2
Mrs
36
1
4
3
2
t
2

4
2
2
throaty
2
throat
36
1
4
3
2

2
anuw
4
4
2
throttle
2
thrombosis
2
throes
2
throb
36
1
4
3
2

2

4
2
2
moving
2
movie
36
1
4
3
2

2

4
4
2
moves
2
movement
2
moved
2
move
36
1
4
3
2
t
2

4
2
2
thrifty
2
thrift
36
1
4
3
2

2
f
4
4
2
thrive
2
thrips
2
thrill
2
thrice
36
1
4
3
2

2

4
2
2
months
2
month
36
1
4
3
2
h
2

4
2
2
threshold
2
thresh
36
1
4
3
2

2

4
3
2
threesome
2
threefold
2
three
36
1
4
3
2

2
dt
4
0
36
1
4
3
2

2

4
2
2
threaten
2
threat
36
1
4
3
2

2

4
2
2
threadbare
2
thread
36
1
4
3
2

2
aes
4
2
2
threw
2
threonine
36
1
4
3
2

2

4
2
2
thrash
2
thrall
36
1
4
3
2

2
aeiou
4
0
36
1
4
3
2
r
2

4
2
2
members
2
member
36
1
4
3
2
and
2

4
3
2
thousandth
2
thousandfold
2
thousand
36
1
4
3
2
ng
2

4
3
2
meetings
2
meeting
2
meetinghouse
36
1
4
3
2

2

4
3
2
thoughts
2
thoughtful
2
thought
36
1
4
3
2
h
2
t
4
1
2
though
36
1
4
3
2

2

4
2
2
medical
2
medicate
36
1
4
3
2

2
gs
4
1
2
thou
36
1
4
3
2

2

4
2
2
matters
2
matter
36
1
4
3
2

2
r
4
1
2
matte
36
1
4
3
2

2

4
2
2
marketed
2
marketeer
36
1
4
3
2
ugh
2

4
4
2
thoroughgoing
2
thoroughfare
2
thoroughbred
2
thorough
36
1
4
3
2

2

4
2
2
fucker
2
fucked
36
1
4
3
2

2
e
4
3
2
fucks
2
fucking
2
fuck
36
1
4
3
2
s
2

4
2
2
Fuchsia
2
Fuchs
36
1
4
3
2

2

4
3
2
thorny
2
Thornton
2
thorn
36
1
4
3
2

2

4
3
2
managers
2
manager
2
managerial
36
1
4
3
2

2

4
2
2
thorium
2
thoriate
36
1
4
3
2

2
ino
4
4
2
Thorstein
2
Thorpe
2
Thoreau
2
Thor
36
1
4
3
2

2

4
4
2
Thomson
2
Thompson
2
Thomistic
2
Thomas
36
1
4
3
2

2
s
4
2
2
makeup
2
make
36
1
4
3
2

2

4
2
2
makes
2
makeshift
36
1
4
3
2

2
mru
4
2
2
those
2
thong
36
1
4
3
2
le
2

4
2
2
thistledown
2
thistle
36
1
4
3
2

2
t
4
2
2
this'll
2
this
36
1
4
3
2
en
2

4
2
2
thirteenth
2
thirteen
36
1
4
3
2

2
e
4
2
2
thirty
2
thirtieth
36
1
4
3
2

2

4
2
2
longer
2
longevity
36
1
4
3
2

2

4
2
2
located
2
locate
36
1
4
3
2
t
2

4
2
2
thirsty
2
thirst
36
1
4
3
2

2
st
4
1
2
third
36
1
4
3
2

2
ei
4
0
36
1
4
3
2
g
2

4
2
2
living
2
Livingston
36
1
4
3
2

2

4
2
2
thiouracil
2
thiocyanate
36
1
4
3
2

2
g
4
4
2
thinnish
2
think
2
thine
2
thin
36
1
4
3
2
b
2

4
2
2
Thimbu
2
thimble
36
1
4
3
2

2

4
2
2
thieving
2
thieves
36
1
4
3
2

2
v
4
1
2
thief
36
1
4
3
2

2

4
2
2
thicket
2
thicken
36
1
4
3
2
k
2
e
4
2
2
thickish
2
thick
36
1
4
3
2

2
cemnors
4
3
2
thither
2
thigh
2
thiamin
36
1
4
3
2

2

4
2
2
leadsmen
2
leadsman
36
1
4
3
2

2

4
2
2
leaders
2
leader
36
1
4
3
2

2

4
4
2
they've
2
they're
2
they'll
2
they'd
36
1
4
3
2

2
'
4
1
2
they
36
1
4
3
2

2

4
2
2
Thetis
2
theta
36
1
4
3
2

2

4
2
2
largest
2
largesse
36
1
4
3
2

2

4
3
2
Theseus
2
theses
2
these
36
1
4
3
2

2
e
4
3
2
thespian
2
thesis
2
thesaurus
36
1
4
3
2

2

4
2
2
keys
2
keystone
36
1
4
3
2

2

4
3
2
thermostat
2
Thermofax
2
thermo
36
1
4
3
2

2

4
2
2
keeps
2
keep
36
1
4
3
2

2

4
2
2
thermistor
2
thermionic
36
1
4
3
2

2
io
4
1
2
thermal
36
1
4
3
2

2

4
2
2
thereupon
2
thereunder
36
1
4
3
2

2

4
2
2
its
2
itself
36
1
4
3
2

2

4
2
2
issues
2
issue
36
1
4
3
2
o
2

4
2
2
theretofore
2
thereto
36
1
4
3
2

2

4
2
2
involved
2
involve
36
1
4
3
2

2
e
4
1
2
involving
36
1
4
3
2

2

4
2
2
thereon
2
thereof
36
1
4
3
2
r
2

4
2
2
investors
2
investor
36
1
4
3
2

2

4
2
2
there'll
2
there'd
36
1
4
3
2
r
2

4
2
2
therefore
2
therefor
36
1
4
3
2

2

4
2
2
international
2
internal
36
1
4
3
2

2
o
4
1
2
therefrom
36
1
4
3
2
on
2

4
2
2
inflation
2
inflationary
36
1
4
3
2

2

4
3
2
thereat
2
thereafter
2
thereabouts
36
1
4
3
2

2

4
2
2
individuals
2
individual
36
1
4
3
2

2
af'otu
4
5
2
therewith
2
Theresa
2
therein
2
thereby
2
there
36
1
4
3
2
p
2

4
3
2
therapy
2
therapist
2
therapeutic
36
1
4
3
2

2

4
3
2
increases
2
increased
2
increase
36
1
4
3
2

2
aem
4
0
36
1
4
3
2

2

4
2
2
included
2
include
36
1
4
3
2

2
e
4
1
2
including
36
1
4
3
2

2
t
4
1
2
theorem
36
1
4
3
2
ic
2

4
2
2
theoretician
2
theoretic
36
1
4
3
2

2
e
4
2
2
theory
2
theorist
36
1
4
3
2
og
2

4
2
2
theology
2
theologian
36
1
4
3
2
o
2

4
2
2
Theodosian
2
Theodore
36
1
4
3
2

2
dlr
4
1
2
theocracy
36
1
4
3
2
e
2

4
2
2
thenceforth
2
thence
36
1
4
3
2

2
c
4
1
2
then
36
1
4
3
2

2

4
4
2
themselves
2
theme
2
thematic
2
them
36
1
4
3
2

2

4
2
2
theist
2
theism
36
1
4
3
2

2
s
4
1
2
their
36
1
4
3
2

2

4
2
2
theatric
2
Thea
36
1
4
3
2

2

4
2
2
having
2
Havilland
36
1
4
3
2

2
aimnorsty
4
5
2
Thelma
2
theft
2
thee
2
Thebes
2
the
36
1
4
3
2

2
ilnt
4
2
2
Thayer
2
thaw
36
1
4
3
2

2

4
2
2
that'll
2
that'd
36
1
4
3
2

2
'
4
2
2
thatch
2
that
36
1
4
3
2

2

4
3
2
thanksgiving
2
thankful
2
thank
36
1
4
3
2

2
k
4
1
2
than
36
1
4
3
2

2

4
5
2
gives
2
giveth
2
given
2
giveaway
2
give
36
1
4
3
2

2

4
2
2
thallophyte
2
thallium
36
1
4
3
2

2
l
4
1
2
Thalia
36
1
4
3
2

2

4
2
2
Thailand
2
Thai
36
1
4
3
2

2

4
2
2
Gettysburg
2
Getty
36
1
4
3
2

2
aeioruwy
4
0
36
1
4
3
2

2

4
2
2
texture
2
textural
36
1
4
3
2

2

4
2
2
generally
2
general
36
1
4
3
2

2
r
4
1
2
textual
36
1
4
3
2

2
u
4
4
2
Textron
2
textile
2
textbook
2
text
36
1
4
3
2

2

4
3
2
Texas
2
Texan
2
Texaco
36
1
4
3
2

2
at
4
0
36
1
4
3
2

2

4
2
2
tetrahedral
2
tetrahedra
36
1
4
3
2
edr
2
a
4
1
2
tetrahedron
36
1
4
3
2

2

4
2
2
former
2
formed
36
1
4
3
2
luo
2

4
2
2
tetrafluouride
2
tetrafluoride
36
1
4
3
2
a
2
fh
4
3
2
tetravalent
2
tetragonal
2
tetrachloride
36
1
4
3
2

2
r
4
3
2
tether
2
tete
2
tetanus
36
1
4
3
2

2

4
2
2
followed
2
followeth
36
1
4
3
2
on
2

4
2
2
testimony
2
testimonial
36
1
4
3
2

2

4
2
2
testicular
2
testicle
36
1
4
3
2

2
cm
4
1
2
testify
36
1
4
3
2

2

4
2
2
finds
2
find
36
1
4
3
2
ent
2

4
2
2
testamentary
2
testament
36
1
4
3
2

2

4
2
2
figures
2
figure
36
1
4
3
2

2
m
4
1
2
testate
36
1
4
3
2

2
ai
4
5
2
tests
2
testy
2
testes
2
testbed
2
test
36
1
4
3
2

2

4
2
2
tessellate
2
Tess
36
1
4
3
2

2

4
2
2
feels
2
feel
36
1
4
3
2

2
st
4
0
36
1
4
3
2
or
2

4
2
2
territory
2
territorial
36
1
4
3
2

2

4
2
2
terrify
2
terrific
36
1
4
3
2

2

4
2
2
eyes
2
eyesight
36
1
4
3
2
e
2

4
2
2
experiences
2
experience
36
1
4
3
2

2
ft
4
2
2
terrier
2
terrible
36
1
4
3
2

2

4
2
2
terrestrial
2
Terre
36
1
4
3
2

2

4
5
2
terrapin
2
terramycin
2
terrain
2
terrace
2
Terra
36
1
4
3
2
e
2

4
2
2
executives
2
executive
36
1
4
3
2

2
aei
4
2
2
terry
2
terror
36
1
4
3
2
le
2

4
2
2
examples
2
example
36
1
4
3
2
sichore
2

4
2
2
terpsichorean
2
Terpsichore
36
1
4
3
2
n
2

4
2
2
europeans
2
European
36
1
4
3
2

2

4
2
2
ternary
2
tern
36
1
4
3
2

2
a
4
3
2
terminus
2
terminology
2
termini
36
1
4
3
2
e
2

4
2
2
estates
2
estate
36
1
4
3
2

2

4
3
2
terminate
2
terminal
2
terminable
36
1
4
3
2
lish
2

4
3
2
establishing
2
established
2
establish
36
1
4
3
2

2
n
4
1
2
termite
36
1
4
3
2

2
i
4
2
2
terms
2
term
36
1
4
3
2
cial
2

4
2
2
especially
2
especial
36
1
4
3
2
e
2

4
2
2
employees
2
employee
36
1
4
3
2
to
2

4
2
2
teratology
2
teratogenic
36
1
4
3
2

2
amnpr
4
5
2
tertiary
2
terse
2
Teresa
2
tercel
2
terbium
36
1
4
3
2
c
2

4
2
2
electronics
2
electronic
36
1
4
3
2

2

4
2
2
tepid
2
tepee
36
1
4
3
2

2

4
2
2
tenure
2
tenuous
36
1
4
3
2
rt
2

4
2
2
efforts
2
effort
36
1
4
3
2

2

4
2
2
education
2
educate
36
1
4
3
2

2

4
2
2
tentative
2
tentacle
36
1
4
3
2

2
a
4
3
2
tenth
2
tenterhooks
2
tent
36
1
4
3
2

2

4
2
2
economics
2
economic
36
1
4
3
2
n
2

4
2
2
tensional
2
tension
36
1
4
3
2
ng
2

4
2
2
earnings
2
earning
36
1
4
3
2

2
o
4
1
2
tensile
36
1
4
3
2

2
i
4
3
2
tenspot
2
tensor
2
tense
36
1
4
3
2

2

4
3
2
early
2
earlier
2
earl
36
1
4
3
2

2

4
2
2
tenor
2
tenon
36
1
4
3
2

2

4
2
2
doors
2
doorstep
36
1
4
3
2

2

4
3
2
Tenney
2
Tennessee
2
Tenneco
36
1
4
3
2

2
e
4
2
2
Tennyson
2
tennis
36
1
4
3
2
r
2

4
2
2
dollars
2
dollar
36
1
4
3
2

2

4
2
2
does
2
doesn't
36
1
4
3
2

2

4
3
2
tenet
2
tenement
2
tenebrous
36
1
4
3
2

2

4
2
2
tenderloin
2
tenderfoot
36
1
4
3
2

2
r
4
1
2
tendency
36
1
4
3
2

2
e
4
2
2
tendon
2
tend
36
1
4
3
2
lop
2

4
4
2
develops
2
development
2
developed
2
develop
36
1
4
3
2
i
2

4
2
2
tenacity
2
tenacious
36
1
4
3
2

2
c
4
2
2
tenant
2
tenable
36
1
4
3
2

2
adenostu
4
2
2
tenfold
2
ten
36
1
4
3
2

2

4
2
2
described
2
describe
36
1
4
3
2

2
e
4
1
2
describing
36
1
4
3
2

2

4
3
2
temptress
2
temptation
2
tempt
36
1
4
3
2
ent
2

4
2
2
departments
2
department
36
1
4
3
2
d
2

4
2
2
demands
2
demand
36
1
4
3
2
a
2
r
4
1
2
temporal
36
1
4
3
2

2
r
4
1
2
tempo
36
1
4
3
2

2

4
2
2
defensive
2
defensible
36
1
4
3
2

2

4
2
2
Templeton
2
temple
36
1
4
3
2

2
e
4
1
2
template
36
1
4
3
2

2
rs
4
0
36
1
4
3
2
n
2

4
2
2
decisions
2
decision
36
1
4
3
2
t
2

4
2
2
tempestuous
2
tempest
36
1
4
3
2

2
a
4
1
2
temper
36
1
4
3
2

2

4
2
2
temperature
2
temperate
36
1
4
3
2

2

4
3
2
decides
2
decided
2
decide
36
1
4
3
2

2
t
4
2
2
temperance
2
tempera
36
1
4
3
2

2
elot
4
0
36
1
4
3
2

2
p
4
1
2
temerity
36
1
4
3
2

2

4
6
2
telling
2
tells
2
tellurium
2
telltale
2
teller
2
tell
36
1
4
3
2
r
2

4
2
2
customers
2
customer
36
1
4
3
2
is
2

4
2
2
television
2
televise
36
1
4
3
2
pe
2

4
3
2
teletypewrite
2
teletypesetting
2
teletype
36
1
4
3
2

2
y
4
1
2
telethon
36
1
4
3
2

2

4
2
2
created
2
create
36
1
4
3
2
cop
2

4
2
2
telescopic
2
telescope
36
1
4
3
2

2

4
2
2
teleprompter
2
teleprocessing
36
1
4
3
2

2
o
4
1
2
teleprinter
36
1
4
3
2

2

4
2
2
countries
2
countrify
36
1
4
3
2

2
e
4
2
2
telephony
2
telephonic
36
1
4
3
2
o
2
n
4
1
2
telephotography
36
1
4
3
2
on
2

4
2
2
corporations
2
corporation
36
1
4
3
2
th
2

4
2
2
telepathy
2
telepathic
36
1
4
3
2

2
ahr
4
0
36
1
4
3
2

2
i
4
1
2
corporate
36
1
4
3
2

2

4
2
2
teleost
2
teleology
36
1
4
3
2
h
2

4
2
2
telegraphy
2
telegraph
36
1
4
3
2
ra
2
p
4
1
2
telegram
36
1
4
3
2

2

4
2
2
continuing
2
continuity
36
1
4
3
2
o
2

4
2
2
teleconference
2
telecommunicate
36
1
4
3
2

2

4
3
2
continues
2
continued
2
continue
36
1
4
3
2

2
cgopstv
4
5
2
Telex
2
telemeter
2
telekinesis
2
Telefunken
2
Teledyne
36
1
4
3
2

2
el
4
1
2
Tel
36
1
4
3
2

2

4
2
2
consumers
2
consumer
36
1
4
3
2
t
2

4
2
2
Tektronix
2
tektite
36
1
4
3
2

2

4
2
2
Tehran
2
Teheran
36
1
4
3
2

2
r
4
2
2
consumed
2
consume
36
1
4
3
2

2

4
2
2
construction
2
constructible
36
1
4
3
2

2

4
2
2
teethed
2
teethe
36
1
4
3
2

2
e
4
2
2
teething
2
teeth
36
1
4
3
2

2
h
4
3
2
teetotal
2
teeter
2
teet
36
1
4
3
2

2

4
2
2
computers
2
computer
36
1
4
3
2

2
r
4
1
2
compute
36
1
4
3
2

2

4
3
2
teensy
2
teenage
2
teen
36
1
4
3
2
n
2

4
3
2
companionship
2
companionway
2
companion
36
1
4
3
2

2
nt
4
3
2
teem
2
teeing
2
tee
36
1
4
3
2

2

4
2
2
tedium
2
tedious
36
1
4
3
2
on
2

4
2
2
communications
2
communication
36
1
4
3
2

2
i
4
2
2
Teddy
2
Ted
36
1
4
3
2

2
i
4
1
2
communicate
36
1
4
3
2

2
n
4
1
2
tech
36
1
4
3
2
rat
2

4
2
2
technocratic
2
technocrat
36
1
4
3
2

2
c
4
1
2
technology
36
1
4
3
2

2

4
2
2
coming
2
Cominform
36
1
4
3
2

2

4
2
2
technician
2
technic
36
1
4
3
2

2
c
4
2
2
technique
2
Technion
36
1
4
3
2

2
io
4
1
2
technetium
36
1
4
3
2

2
h
4
2
2
tecum
2
tectonic
36
1
4
3
2

2
ckmrs
4
5
2
teat
2
teapot
2
teal
2
teahouse
2
tea
36
1
4
3
2
en
2

4
2
2
citizenry
2
citizen
36
1
4
3
2
oon
2

4
2
2
teaspoonful
2
teaspoon
36
1
4
3
2

2

4
2
2
teasel
2
tease
36
1
4
3
2

2
ep
4
0
36
1
4
3
2

2

4
3
2
tearful
2
teardrop
2
tear
36
1
4
3
2

2
s
4
3
2
teamwork
2
teammate
2
team
36
1
4
3
2

2

4
2
2
teakwood
2
teakettle
36
1
4
3
2

2
h
4
2
2
teacup
2
teacart
36
1
4
3
2

2
acdehklmnprstx
4
3
2
Teutonic
2
Tegucigalpa
2
Teflon
36
1
4
3
2

2

4
3
2
causes
2
caused
2
cause
36
1
4
3
2
ay
2

4
2
2
taxpaying
2
taxpayer
36
1
4
3
2
nom
2

4
2
2
taxonomy
2
taxonomic
36
1
4
3
2

2

4
4
2
taxiway
2
taxied
2
taxicab
2
taxi
36
1
4
3
2

2

4
2
2
buys
2
buy
36
1
4
3
2

2
iop
4
3
2
taxes
2
taxation
2
tax
36
1
4
3
2

2

4
2
2
tawny
2
tawdry
36
1
4
3
2
ng
2

4
2
2
buildings
2
building
36
1
4
3
2
ern
2

4
2
2
taverna
2
tavern
36
1
4
3
2

2

4
2
2
tautology
2
taut
36
1
4
3
2

2
t
4
4
2
Taurus
2
taunt
2
taught
2
tau
36
1
4
3
2

2

4
2
2
brings
2
bring
36
1
4
3
2
e
2

4
3
2
tattletale
2
tattler
2
tattle
36
1
4
3
2

2
l
4
2
2
tatty
2
tattoo
36
1
4
3
2

2

4
2
2
tater
2
tate
36
1
4
3
2

2
et
4
1
2
tat
36
1
4
3
2

2

4
2
2
better
2
Bette
36
1
4
3
2

2

4
2
2
tasteful
2
taste
36
1
4
3
2

2
e
4
2
2
tasty
2
tasting
36
1
4
3
2

2

4
2
2
benefits
2
benefit
36
1
4
3
2

2

4
2
2
tassel
2
Tass
36
1
4
3
2
e
2

4
2
2
believes
2
believe
36
1
4
3
2

2

4
2
2
taskmaster
2
task
36
1
4
3
2

2
kst
4
1
2
Tasmania
36
1
4
3
2
r
2

4
2
2
Tartary
2
tartar
36
1
4
3
2

2
a
4
1
2
tart
36
1
4
3
2
y
2

4
2
2
Tarrytown
2
tarry
36
1
4
3
2

2

4
2
2
tarpaulin
2
tarpaper
36
1
4
3
2

2
a
4
1
2
tarpon
36
1
4
3
2
ge
2

4
2
2
averages
2
average
36
1
4
3
2
l
2

4
2
2
available
2
avail
36
1
4
3
2
t
2

4
2
2
tarantula
2
tarantara
36
1
4
3
2

2
n
4
1
2
tara
36
1
4
3
2

2
aprt
4
7
2
Tarzan
2
tarnish
2
tariff
2
target
2
tardy
2
Tarbell
2
tar
36
1
4
3
2
on
2

4
2
2
associations
2
association
36
1
4
3
2

2

4
2
2
tappet
2
tappa
36
1
4
3
2

2
i
4
1
2
associate
36
1
4
3
2

2

4
2
2
tapis
2
tapir
36
1
4
3
2

2

4
2
2
asked
2
askew
36
1
4
3
2

2

4
4
2
tapeworm
2
tapestry
2
taper
2
tape
36
1
4
3
2

2
eip
4
2
2
tapa
2
tap
36
1
4
3
2

2

4
2
2
arms
2
Armstrong
36
1
4
3
2

2

4
3
2
Taos
2
Taoist
2
tao
36
1
4
3
2

2

4
2
2
announced
2
announce
36
1
4
3
2

2
l
4
1
2
tantamount
36
1
4
3
2
nc
2
e
4
1
2
announcing
36
1
4
3
2
u
2

4
2
2
Tantalus
2
tantalum
36
1
4
3
2

2
a
4
1
2
tantrum
36
1
4
3
2
nt
2

4
2
2
amounts
2
amount
36
1
4
3
2

2

4
2
2
american
2
Americana
36
1
4
3
2
ay
2

4
2
2
always
2
alway
36
1
4
3
2
t
2

4
2
2
tangential
2
tangent
36
1
4
3
2

2
n
4
1
2
tangerine
36
1
4
3
2

2
e
4
5
2
tangy
2
tango
2
tangle
2
tangible
2
tang
36
1
4
3
2

2

4
3
2
Tananarive
2
Tanaka
2
tanager
36
1
4
3
2

2
agt
4
8
2
Tanzania
2
Tanya
2
tansy
2
tannin
2
tank
2
tanh
2
tandem
2
tan
36
1
4
3
2

2

4
3
2
tampon
2
Tampa
2
tamp
36
1
4
3
2
n
2

4
3
2
additions
2
additional
2
addition
36
1
4
3
2
d
2

4
3
2
addendum
2
addenda
2
addend
36
1
4
3
2

2
a
4
1
2
activities
36
1
4
3
2
n
2

4
2
2
actions
2
action
36
1
4
3
2

2

4
2
2
according
2
accordion
36
1
4
3
2

2

4
2
2
tamarind
2
tamarack
36
1
4
3
2

2
r
4
1
2
tamale
36
1
4
3
2

2
ap
4
4
2
Tammany
2
tame
2
tambourine
2
tam
36
1
4
3
2

2

4
2
2
tallyho
2
tally
36
1
4
3
2

2
y
4
3
2
tallow
2
Tallahassee
2
tall
36
1
4
3
2

2

4
4
2
talky
2
talkie
2
talkative
2
talk
36
1
4
3
2
sman
2

4
2
2
talismanic
2
talisman
36
1
4
3
2

2

4
2
2
talent
2
tale
36
1
4
3
2

2

4
2
2
talcum
2
talc
36
1
4
3
2

2
ceikl
4
3
2
talus
2
talon
2
Talmud
36
1
4
3
2

2

4
2
2
takeover
2
takeoff
36
1
4
3
2

2
e
4
1
2
taking
36
1
4
3
2

2

4
5
2
tailwind
2
tailspin
2
tailor
2
tailgate
2
tail
36
1
4
3
2

2
l
4
3
2
Taiwan
2
Taipei
2
taint
36
1
4
3
2

2

4
2
2
Tahoe
2
Tahiti
36
1
4
3
2

2

4
2
2
tagging
2
tag
36
1
4
3
2

2

4
2
2
taffy
2
taffeta
36
1
4
3
2

2
f
4
1
2
Taft
36
1
4
3
2

2

4
2
2
tadpole
2
tad
36
1
4
3
2

2

4
2
2
tactician
2
tactic
36
1
4
3
2

2
c
4
1
2
tactile
36
1
4
3
2

2
i
4
3
2
tactual
2
tactful
2
tact
36
1
4
3
2

2

4
3
2
tacky
2
tackle
2
tack
36
1
4
3
2
t
2

4
2
2
Tacitus
2
tacit
36
1
4
3
2

2
i
4
1
2
tachometer
36
1
4
3
2

2

4
2
2
tachistoscope
2
tachinid
36
1
4
3
2

2
hikt
4
1
2
Tacoma
36
1
4
3
2
a
2

4
3
2
tabulate
2
tabular
2
tabula
36
1
4
3
2

2
l
4
1
2
tabu
36
1
4
3
2

2
as
4
4
2
tablet
2
tableland
2
tablecloth
2
table
36
1
4
3
2

2
p
4
1
2
tables
36
1
4
3
2
u
2

4
2
2
tableaux
2
tableau
36
1
4
3
2

2
e
4
1
2
tabloid
36
1
4
3
2

2
lu
4
3
2
taboo
2
tabernacle
2
tab
36
1
4
3
2

2
bcdfghiklmnoprstuvwx
4
2
2
Taylor
2
TA
36
1
4
3
2

2
aehiNoruysTVW
4
3
2
TX
2
t's
2
t
36
1
4
3
2

2

4
2
2
systemization
2
systemic
36
1
4
3
2
tem
2
i
4
3
2
systemwide
2
systematic
2
system
36
1
4
3
2
p
2

4
2
2
syrupy
2
syrup
36
1
4
3
2

2

4
2
2
syringe
2
syringa
36
1
4
3
2

2
g
4
1
2
syrinx
36
1
4
3
2

2
n
4
1
2
Syria
36
1
4
3
2

2
iu
4
1
2
Syracuse
36
1
4
3
2

2

4
2
2
synthesis
2
syntheses
36
1
4
3
2
e
2
s
4
1
2
synthetic
36
1
4
3
2

2

4
2
2
syntax
2
syntactic
36
1
4
3
2

2
ah
4
0
36
1
4
3
2

2

4
2
2
synopsis
2
synopses
36
1
4
3
2

2
s
4
1
2
synoptic
36
1
4
3
2
ym
2

4
3
2
synonymy
2
synonymous
2
synonym
36
1
4
3
2

2
np
4
1
2
synod
36
1
4
3
2
s
2

4
2
2
synergistic
2
synergism
36
1
4
3
2
rg
2
i
4
1
2
synergy
36
1
4
3
2
c
2

4
2
2
syndicate
2
syndic
36
1
4
3
2

2
i
4
1
2
syndrome
36
1
4
3
2
ro
2
n
4
1
2
synchrotron
36
1
4
3
2

2

4
3
2
synchrony
2
synchronous
2
synchronism
36
1
4
3
2

2
h
4
1
2
syncopate
36
1
4
3
2

2
p
4
1
2
synagogue
36
1
4
3
2
e
2

4
2
2
synapses
2
synapse
36
1
4
3
2

2
s
4
1
2
synaptic
36
1
4
3
2

2
acdeot
4
1
2
Synge
36
1
4
3
2
om
2

4
2
2
symptomatic
2
symptom
36
1
4
3
2
si
2

4
2
2
symposium
2
symposia
36
1
4
3
2
on
2

4
2
2
symphony
2
symphonic
36
1
4
3
2
th
2

4
2
2
sympathy
2
sympathetic
36
1
4
3
2

2
ahot
4
1
2
symplectic
36
1
4
3
2

2
io
4
0
36
1
4
3
2
l
2

4
2
2
symbolic
2
symbol
36
1
4
3
2
o
2

4
2
2
symbiotic
2
symbiosis
36
1
4
3
2

2
bp
4
1
2
symmetry
36
1
4
3
2
n
2

4
2
2
Sylvania
2
sylvan
36
1
4
3
2

2
a
4
2
2
Sylvia
2
Sylvester
36
1
4
3
2

2
ao
4
0
36
1
4
3
2
gis
2

4
2
2
syllogistic
2
syllogism
36
1
4
3
2
b
2
i
4
2
2
syllabus
2
syllable
36
1
4
3
2

2

4
3
2
syllabify
2
syllabic
2
syllabi
36
1
4
3
2

2
lv
4
1
2
Sylow
36
1
4
3
2
phant
2

4
2
2
sycophantic
2
sycophant
36
1
4
3
2

2
o
4
1
2
sycamore
36
1
4
3
2

2

4
2
2
Sybil
2
sybarite
36
1
4
3
2

2
bclmnrs
4
4
2
syzygy
2
Sykes
2
syenite
2
Sydney
36
1
4
3
2

2

4
2
2
swung
2
swum
36
1
4
3
2

2

4
4
2
swordtail
2
swordplay
2
swordfish
2
sword
36
1
4
3
2

2
d
4
2
2
sworn
2
swore
36
1
4
3
2

2
r
4
2
2
swoop
2
swollen
36
1
4
3
2
er
2

4
2
2
Switzerland
2
Switzer
36
1
4
3
2
h
2
b
4
4
2
switches
2
switchman
2
switchgear
2
switch
36
1
4
3
2

2

4
2
2
switchboard
2
switchblade
36
1
4
3
2

2
cz
4
0
36
1
4
3
2

2

4
2
2
swishy
2
swish
36
1
4
3
2

2
h
4
1
2
swiss
36
1
4
3
2
l
2

4
2
2
swirly
2
swirl
36
1
4
3
2

2

4
3
2
swingy
2
swingable
2
swing
36
1
4
3
2

2
g
4
2
2
swine
2
swindle
36
1
4
3
2

2

4
2
2
swimsuit
2
swim
36
1
4
3
2

2

4
2
2
swigging
2
swig
36
1
4
3
2

2
gmnrst
4
4
2
swizzle
2
swivel
2
swipe
2
swift
36
1
4
3
2

2

4
2
2
swelter
2
swelt
36
1
4
3
2

2
t
4
1
2
swell
36
1
4
3
2

2

4
4
2
sweetish
2
sweetheart
2
sweeten
2
sweet
36
1
4
3
2

2

4
2
2
sweepstake
2
sweep
36
1
4
3
2

2
pt
4
1
2
Sweeney
36
1
4
3
2

2

4
2
2
Sweden
2
Swede
36
1
4
3
2

2
e
4
1
2
Swedish
36
1
4
3
2

2
t
4
1
2
swear
36
1
4
3
2

2

4
5
2
sweaty
2
sweatshirt
2
sweater
2
sweatband
2
sweat
36
1
4
3
2

2
adel
4
3
2
swerve
2
swept
2
Swenson
36
1
4
3
2

2

4
2
2
swathe
2
swath
36
1
4
3
2

2
h
4
2
2
swatch
2
swat
36
1
4
3
2

2

4
3
2
swarthy
2
Swarthout
2
Swarthmore
36
1
4
3
2

2
h
4
1
2
swart
36
1
4
3
2

2
t
4
1
2
swarm
36
1
4
3
2

2

4
2
2
swanky
2
swank
36
1
4
3
2

2
k
4
3
2
Swanson
2
swanlike
2
swan
36
1
4
3
2

2

4
2
2
swampy
2
swamp
36
1
4
3
2

2
p
4
2
2
swami
2
swam
36
1
4
3
2
low
2

4
2
2
swallowtail
2
swallow
36
1
4
3
2

2

4
2
2
swage
2
swag
36
1
4
3
2

2

4
2
2
swabby
2
swab
36
1
4
3
2

2
bglmnrt
4
6
2
Swaziland
2
sway
2
swastika
2
swap
2
swain
2
Swahili
36
1
4
3
2

2
aeiou
4
1
2
SW
36
1
4
3
2
rain
2

4
2
2
suzerainty
2
suzerain
36
1
4
3
2

2
e
4
2
2
Suzuki
2
Suzanne
36
1
4
3
2

2

4
3
2
suture
2
Sutton
2
Sutherland
36
1
4
3
2

2

4
2
2
sustenance
2
sustain
36
1
4
3
2
cio
2

4
2
2
suspicious
2
suspicion
36
1
4
3
2

2
n
4
1
2
suspect
36
1
4
3
2

2

4
3
2
suspensor
2
suspension
2
suspense
36
1
4
3
2

2
s
4
1
2
suspend
36
1
4
3
2

2
ei
4
0
36
1
4
3
2
ept
2

4
2
2
susceptible
2
susceptance
36
1
4
3
2
n
2

4
2
2
Susanne
2
Susan
36
1
4
3
2

2
acpt
4
4
2
Sussex
2
Susie
2
sushi
2
Sus
36
1
4
3
2
v
2

4
3
2
survivor
2
survive
2
survival
36
1
4
3
2

2
y
4
1
2
surveillant
36
1
4
3
2

2

4
3
2
surveys
2
surveyor
2
survey
36
1
4
3
2

2
ei
4
0
36
1
4
3
2

2

4
2
2
surtout
2
surtax
36
1
4
3
2

2

4
2
2
surround
2
surrogate
36
1
4
3
2

2

4
4
2
surrey
2
surreptitious
2
surrender
2
surreal
36
1
4
3
2

2
eo
4
0
36
1
4
3
2

2

4
3
2
surprise
2
surplus
2
surpass
36
1
4
3
2

2

4
2
2
surmount
2
surmise
36
1
4
3
2
ecti
2

4
2
2
surjective
2
surjection
36
1
4
3
2

2

4
3
2
surgery
2
surgeon
2
surge
36
1
4
3
2

2
e
4
1
2
surgical
36
1
4
3
2
c
2

4
2
2
surfactant
2
surface
36
1
4
3
2

2
a
4
2
2
surfeit
2
surf
36
1
4
3
2

2

4
2
2
surety
2
sure
36
1
4
3
2

2

4
2
2
surcharge
2
surcease
36
1
4
3
2

2
cefgjmprtv
4
1
2
surname
36
1
4
3
2
m
2

4
3
2
supremum
2
supreme
2
supremacy
36
1
4
3
2

2

4
2
2
supranational
2
supra
36
1
4
3
2

2
ae
4
0
36
1
4
3
2

2

4
2
2
suppression
2
suppressible
36
1
4
3
2
ess
2
i
4
2
2
suppressor
2
suppress
36
1
4
3
2

2

4
3
2
supposition
2
suppose
2
supposable
36
1
4
3
2

2
sr
4
0
36
1
4
3
2

2
ei
4
2
2
supply
2
supplant
36
1
4
3
2

2

4
2
2
supplementary
2
supple
36
1
4
3
2

2
lor
4
0
36
1
4
3
2

2

4
2
2
supervisory
2
supervene
36
1
4
3
2
itio
2

4
2
2
superstitious
2
superstition
36
1
4
3
2

2
t
4
1
2
supersede
36
1
4
3
2

2

4
2
2
supernovae
2
supernatant
36
1
4
3
2

2

4
2
2
superlunary
2
superlative
36
1
4
3
2

2

4
2
2
superior
2
superintendent
36
1
4
3
2
u
2

4
2
2
superfluous
2
superfluity
36
1
4
3
2

2
l
4
1
2
superficial
36
1
4
3
2

2

4
2
2
superbly
2
superb
36
1
4
3
2
r
2
bfilnsv
4
4
2
superposable
2
supercilious
2
superannuate
2
super
36
1
4
3
2

2
epr
4
2
2
supine
2
sup
36
1
4
3
2

2

4
2
2
suntanning
2
suntanned
36
1
4
3
2
an
2
n
4
1
2
suntan
36
1
4
3
2
n
2

4
2
2
sunshiny
2
sunshine
36
1
4
3
2

2
i
4
1
2
sunshade
36
1
4
3
2

2
h
4
3
2
sunspot
2
sunset
2
sunscreen
36
1
4
3
2
y
2

4
2
2
Sunnyvale
2
sunny
36
1
4
3
2
i
2

4
2
2
sunlit
2
sunlight
36
1
4
3
2

2

4
2
2
sunken
2
sunk
36
1
4
3
2

2

4
2
2
sunglasses
2
sung
36
1
4
3
2

2

4
2
2
sunflower
2
sunfish
36
1
4
3
2

2

4
2
2
sundew
2
sunder
36
1
4
3
2

2
e
4
4
2
sundry
2
sundown
2
sundial
2
Sunday
36
1
4
3
2
rn
2

4
2
2
sunburnt
2
sunburn
36
1
4
3
2

2
u
4
2
2
sunbonnet
2
sunbeam
36
1
4
3
2

2
bdfgklnst
4
3
2
SUNY
2
sunrise
2
sun
36
1
4
3
2
t
2

4
2
2
summitry
2
summit
36
1
4
3
2
r
2

4
3
2
summertime
2
Summers
2
summer
36
1
4
3
2

2
rt
4
1
2
summand
36
1
4
3
2

2

4
2
2
summation
2
summate
36
1
4
3
2

2

4
2
2
summary
2
summarily
36
1
4
3
2

2
aei
4
1
2
summon
36
1
4
3
2
ria
2

4
2
2
Sumerian
2
Sumeria
36
1
4
3
2

2

4
2
2
Sumatra
2
sumac
36
1
4
3
2

2
aem
4
4
2
Sumter
2
sumptuous
2
Sumner
2
sum
36
1
4
3
2
n
2

4
2
2
sultanate
2
sultan
36
1
4
3
2

2
a
4
1
2
sultry
36
1
4
3
2

2

4
3
2
sully
2
Sullivan
2
sullen
36
1
4
3
2

2

4
2
2
sulky
2
sulk
36
1
4
3
2

2
aiu
4
1
2
sulfonamide
36
1
4
3
2
r
2

4
3
2
sulfurous
2
sulfuric
2
sulfur
36
1
4
3
2

2

4
2
2
sulfite
2
sulfide
36
1
4
3
2

2

4
3
2
sulfate
2
sulfanilamide
2
sulfa
36
1
4
3
2

2
fklt
4
1
2
sulphur
36
1
4
3
2

2

4
4
2
suitor
2
suite
2
suitcase
2
suit
36
1
4
3
2
id
2

4
2
2
suicide
2
suicidal
36
1
4
3
2

2
ct
4
0
36
1
4
3
2

2

4
3
2
suggestive
2
suggestion
2
suggestible
36
1
4
3
2
est
2
i
4
1
2
suggest
36
1
4
3
2

2
g
4
1
2
sugar
36
1
4
3
2
age
2

4
2
2
suffragette
2
suffrage
36
1
4
3
2

2

4
2
2
Suffolk
2
suffocate
36
1
4
3
2

2

4
2
2
sufficient
2
suffice
36
1
4
3
2

2
c
4
1
2
suffix
36
1
4
3
2
f
2
ior
4
2
2
suffuse
2
suffer
36
1
4
3
2

2

4
3
2
Suez
2
suey
2
sue
36
1
4
3
2
n
2

4
2
2
Sudanese
2
Sudan
36
1
4
3
2

2
a
4
3
2
suds
2
sudden
2
sud
36
1
4
3
2

2

4
2
2
suckling
2
suck
36
1
4
3
2

2
eu
4
1
2
succinct
36
1
4
3
2

2

4
2
2
succumb
2
succubus
36
1
4
3
2

2
s
4
1
2
succeed
36
1
4
3
2

2

4
2
2
successive
2
succession
36
1
4
3
2
s
2
i
4
3
2
successor
2
successful
2
success
36
1
4
3
2

2
ck
4
3
2
suction
2
sucrose
2
such
36
1
4
3
2
er
2

4
2
2
subvert
2
subversive
36
1
4
3
2
rb
2

4
2
2
suburbia
2
suburb
36
1
4
3
2
a
2

4
2
2
subtrahend
2
subtracter
36
1
4
3
2

2

4
2
2
subtlety
2
subtle
36
1
4
3
2

2
e
4
1
2
subtly
36
1
4
3
2
r
2

4
2
2
subterranean
2
subterfuge
36
1
4
3
2

2
elr
4
0
36
1
4
3
2

2

4
2
2
subsumed
2
subsume
36
1
4
3
2
m
2
e
4
1
2
subsuming
36
1
4
3
2
on
2

4
2
2
substitutionary
2
substitution
36
1
4
3
2

2
i
4
1
2
substitute
36
1
4
3
2
tu
2
t
4
1
2
substituent
36
1
4
3
2
nti
2
a
4
1
2
substantive
36
1
4
3
2

2

4
2
2
substantiate
2
substantial
36
1
4
3
2

2
ai
4
1
2
substrate
36
1
4
3
2
t
2

4
2
2
subsistent
2
subsist
36
1
4
3
2

2

4
2
2
subsidy
2
subsidiary
36
1
4
3
2

2
ds
4
0
36
1
4
3
2

2
itu
4
1
2
subservient
36
1
4
3
2

2

4
3
2
submitting
2
submitted
2
submittal
36
1
4
3
2
t
2
t
4
1
2
submit
36
1
4
3
2

2
i
4
1
2
submersible
36
1
4
3
2
im
2

4
2
2
subliminal
2
sublimate
36
1
4
3
2
ct
2
i
4
2
2
subjects
2
subject
36
1
4
3
2

2
e
4
1
2
subjunctive
36
1
4
3
2

2
jlmstuv
4
3
2
subrogation
2
subpoena
2
sub
36
1
4
3
2

2
bcdefgilmnprstz
4
1
2
suave
36
1
4
3
2

2

4
2
2
Styrofoam
2
styrene
36
1
4
3
2

2

4
3
2
stylites
2
stylish
2
styli
36
1
4
3
2

2
ie
4
1
2
stylus
36
1
4
3
2

2
lr
4
3
2
Styx
2
stymie
2
Stygian
36
1
4
3
2
t
2

4
2
2
Stuttgart
2
stutter
36
1
4
3
2

2

4
4
2
Sturm
2
sturgeon
2
sturdy
2
Sturbridge
36
1
4
3
2

2
f
4
1
2
stupendous
36
1
4
3
2

2

4
2
2
stupefy
2
stupefaction
36
1
4
3
2

2
e
4
2
2
stupor
2
stupid
36
1
4
3
2

2

4
4
2
stunt
2
stunk
2
stung
2
stun
36
1
4
3
2

2

4
3
2
stumpy
2
stumpage
2
stump
36
1
4
3
2

2
p
4
1
2
stumble
36
1
4
3
2
f
2

4
2
2
stuffy
2
stuff
36
1
4
3
2
o
2

4
2
2
studious
2
studio
36
1
4
3
2

2

4
2
2
student
2
Studebaker
36
1
4
3
2

2
ei
4
2
2
study
2
stud
36
1
4
3
2

2

4
2
2
stuck
2
stucco
36
1
4
3
2

2

4
3
2
stubby
2
stubborn
2
stubble
36
1
4
3
2

2
b
4
1
2
stub
36
1
4
3
2

2
bcdfmnprt
4
4
2
Stuyvesant
2
stultify
2
Stuart
2
Stu
36
1
4
3
2

2
t
4
1
2
struck
36
1
4
3
2
ur
2

4
2
2
structure
2
structural
36
1
4
3
2

2
c
4
4
2
strut
2
strung
2
strum
2
struggle
36
1
4
3
2

2

4
2
2
strophe
2
strop
36
1
4
3
2

2

4
3
2
strongroom
2
stronghold
2
strong
36
1
4
3
2

2
g
4
1
2
strontium
36
1
4
3
2

2

4
2
2
Stromberg
2
Strom
36
1
4
3
2

2

4
2
2
stroboscopic
2
strobe
36
1
4
3
2

2
bmnp
4
4
2
strove
2
stroll
2
stroke
2
strode
36
1
4
3
2
e
2

4
2
2
striven
2
strive
36
1
4
3
2

2

4
4
2
stripy
2
striptease
2
stripe
2
strip
36
1
4
3
2
g
2

4
4
2
strings
2
stringy
2
stringent
2
string
36
1
4
3
2
e
2

4
2
2
strikebreak
2
strike
36
1
4
3
2
e
2

4
2
2
strident
2
stride
36
1
4
3
2

2

4
3
2
stricture
2
stricter
2
strict
36
1
4
3
2

2

4
2
2
Strickland
2
stricken
36
1
4
3
2

2
kt
4
0
36
1
4
3
2

2
cdknpv
4
2
2
strife
2
striate
36
1
4
3
2
s
2

4
2
2
stressful
2
stress
36
1
4
3
2
to
2

4
2
2
streptomycin
2
streptococcus
36
1
4
3
2
th
2

4
2
2
strengthen
2
strength
36
1
4
3
2

2
g
4
1
2
strenuous
36
1
4
3
2
t
2

4
3
2
streets
2
streetcar
2
street
36
1
4
3
2

2
m
4
1
2
streak
36
1
4
3
2

2

4
3
2
streamside
2
streamline
2
stream
36
1
4
3
2

2
aenps
4
2
2
strewn
2
stretch
36
1
4
3
2

2
bintw
4
6
2
stray
2
Strauss
2
strap
2
straggle
2
strafe
2
straddle
36
1
4
3
2

2

4
3
2
strawflower
2
strawberry
2
straw
36
1
4
3
2
spher
2

4
2
2
stratospheric
2
stratosphere
36
1
4
3
2

2

4
2
2
strategist
2
strategic
36
1
4
3
2
g
2
i
4
1
2
strategy
36
1
4
3
2

2

4
2
2
stratagem
2
strata
36
1
4
3
2

2
aeo
4
4
2
stratum
2
Stratton
2
stratify
2
Stratford
36
1
4
3
2

2

4
3
2
strangulate
2
strangle
2
strange
36
1
4
3
2

2
g
4
1
2
strand
36
1
4
3
2
ht
2

4
5
2
straightway
2
straightforward
2
straighten
2
straightaway
2
straight
36
1
4
3
2

2
g
4
2
2
strait
2
strain
36
1
4
3
2
ism
2

4
2
2
strabismus
2
strabismic
36
1
4
3
2

2
aeiou
4
1
2
strychnine
36
1
4
3
2

2

4
2
2
stowaway
2
stowage
36
1
4
3
2

2
a
4
1
2
stow
36
1
4
3
2

2

4
3
2
storyteller
2
storyboard
2
story
36
1
4
3
2

2

4
3
2
stormy
2
stormbound
2
storm
36
1
4
3
2

2

4
5
2
Storey
2
storeroom
2
storekeep
2
storehouse
2
store
36
1
4
3
2

2
emy
4
2
2
stork
2
storage
36
1
4
3
2

2

4
7
2
stopwatch
2
stoppage
2
stopover
2
stopgap
2
stopcock
2
stopband
2
stop
36
1
4
3
2

2

4
4
2
stoop
2
stool
2
stooge
2
stood
36
1
4
3
2

2
w
4
3
2
Stonehenge
2
stonecrop
2
stone
36
1
4
3
2

2

4
2
2
stoneware
2
stonewall
36
1
4
3
2

2
a
4
1
2
stonewort
36
1
4
3
2

2
e
4
1
2
stony
36
1
4
3
2

2

4
2
2
stomp
2
stomach
36
1
4
3
2

2

4
2
2
stolen
2
stole
36
1
4
3
2

2
e
4
1
2
stolid
36
1
4
3
2
e
2

4
2
2
Stokes
2
stoke
36
1
4
3
2
c
2

4
2
2
stoichiometry
2
stoic
36
1
4
3
2

2
k
4
1
2
stochastic
36
1
4
3
2
ol
2

4
2
2
Stockholm
2
stockholder
36
1
4
3
2

2
h
4
7
2
stocky
2
Stockton
2
stockroom
2
stockpile
2
stockbroker
2
stockade
2
stock
36
1
4
3
2

2
ciklmnoprw
4
3
2
stove
2
stout
2
stodgy
36
1
4
3
2

2

4
3
2
stirrup
2
Stirling
2
stir
36
1
4
3
2

2

4
3
2
stipulate
2
stipple
2
stipend
36
1
4
3
2

2

4
3
2
stinky
2
stinkpot
2
stink
36
1
4
3
2

2

4
2
2
stingy
2
sting
36
1
4
3
2

2
gk
4
1
2
stint
36
1
4
3
2

2
t
4
1
2
stimulant
36
1
4
3
2

2

4
2
2
stimulatory
2
stimulate
36
1
4
3
2
ul
2
a
4
2
2
stimulus
2
stimuli
36
1
4
3
2

2

4
3
2
stillwater
2
stillbirth
2
still
36
1
4
3
2

2

4
2
2
stiletto
2
stile
36
1
4
3
2

2
el
4
1
2
stilt
36
1
4
3
2
ma
2

4
2
2
stigmata
2
stigma
36
1
4
3
2

2

4
2
2
stiffen
2
stiff
36
1
4
3
2

2
f
4
1
2
stifle
36
1
4
3
2
k
2
l
4
4
2
sticky
2
sticktight
2
stickpin
2
stick
36
1
4
3
2
e
2

4
2
2
stickleback
2
stickle
36
1
4
3
2

2
cfglmnpr
4
1
2
stitch
36
1
4
3
2

2

4
2
2
stewardess
2
steward
36
1
4
3
2
r
2
d
4
1
2
Stewart
36
1
4
3
2

2
a
4
1
2
stew
36
1
4
3
2

2

4
2
2
Stevenson
2
Stevens
36
1
4
3
2

2
s
4
1
2
Steven
36
1
4
3
2
e
2
n
4
2
2
stevedore
2
Steve
36
1
4
3
2

2

4
2
2
Stetson
2
stethoscope
36
1
4
3
2

2

4
5
2
sternum
2
Sterno
2
Sternberg
2
sternal
2
stern
36
1
4
3
2
o
2

4
3
2
stereoscopy
2
stereography
2
stereo
36
1
4
3
2

2
en
4
4
2
steroid
2
sterling
2
sterile
2
steradian
36
1
4
3
2

2

4
2
2
Stephenson
2
Stephens
36
1
4
3
2
n
2
s
4
1
2
Stephen
36
1
4
3
2
n
2

4
2
2
stephanotis
2
Stephanie
36
1
4
3
2

2
ae
4
0
36
1
4
3
2

2
h
4
7
2
stepwise
2
stepson
2
steprelation
2
steppe
2
stepmother
2
stepchild
2
step
36
1
4
3
2
raph
2

4
2
2
stenography
2
stenographer
36
1
4
3
2

2
g
4
1
2
stenotype
36
1
4
3
2

2

4
2
2
stencil
2
stench
36
1
4
3
2

2
co
4
0
36
1
4
3
2
la
2

4
2
2
stellar
2
Stella
36
1
4
3
2
n
2

4
3
2
Steiner
2
Steinberg
2
stein
36
1
4
3
2
e
2

4
3
2
steeplechase
2
steeplebush
2
steeple
36
1
4
3
2

2
l
4
2
2
steepen
2
steep
36
1
4
3
2

2

4
4
2
steely
2
steelmake
2
Steele
2
steel
36
1
4
3
2

2
lp
4
4
2
steeve
2
steer
2
Steen
2
steed
36
1
4
3
2

2
dlmr
4
1
2
steak
36
1
4
3
2

2

4
3
2
Stearns
2
stearic
2
stearate
36
1
4
3
2

2

4
4
2
steaming
2
steamy
2
steamboat
2
steam
36
1
4
3
2
h
2

4
2
2
stealthy
2
stealth
36
1
4
3
2

2
t
4
1
2
steal
36
1
4
3
2

2

4
3
2
steady
2
steadfast
2
stead
36
1
4
3
2

2
aeilnprtvw
4
4
2
Steuben
2
stem
2
Stegosaurus
2
Stefan
36
1
4
3
2

2

4
3
2
stays
2
stayed
2
stay
36
1
4
3
2

2

4
2
2
Staunton
2
staunch
36
1
4
3
2

2
n
4
1
2
Stauffer
36
1
4
3
2

2

4
2
2
statutory
2
statute
36
1
4
3
2

2

4
2
2
statuette
2
statue
36
1
4
3
2

2
et
4
3
2
status
2
stature
2
statuary
36
1
4
3
2
r
2

4
2
2
stationary
2
stationarity
36
1
4
3
2
n
2
a
4
2
2
stationmaster
2
stationery
36
1
4
3
2

2
o
4
2
2
statistician
2
static
36
1
4
3
2

2
rs
4
4
2
stated
2
statewide
2
Staten
2
state
36
1
4
3
2
n
2

4
2
2
statesmanlike
2
statesman
36
1
4
3
2

2
m
4
1
2
states
36
1
4
3
2

2

4
2
2
stateroom
2
stater
36
1
4
3
2

2
eiu
4
2
2
stator
2
Statler
36
1
4
3
2

2

4
2
2
stasis
2
stash
36
1
4
3
2

2

4
2
2
starve
2
starvation
36
1
4
3
2

2

4
6
2
starts
2
starting
2
started
2
startup
2
startle
2
start
36
1
4
3
2

2

4
2
2
starling
2
starlight
36
1
4
3
2

2
i
4
1
2
starlet
36
1
4
3
2

2

4
2
2
Starkey
2
stark
36
1
4
3
2
h
2

4
2
2
starchy
2
starch
36
1
4
3
2

2
ckltv
4
8
2
starship
2
Starr
2
stargaze
2
starfish
2
stare
2
stardom
2
starboard
2
star
36
1
4
3
2
e
2

4
2
2
Stapleton
2
staple
36
1
4
3
2

2

4
2
2
staphylococcus
2
staph
36
1
4
3
2

2
hl
4
0
36
1
4
3
2

2

4
2
2
stannous
2
stannic
36
1
4
3
2

2
a
4
7
2
standstill
2
standpoint
2
standoff
2
Standish
2
standeth
2
standby
2
stand
36
1
4
3
2

2

4
2
2
stanchion
2
stanch
36
1
4
3
2

2
h
4
1
2
stance
36
1
4
3
2

2
cdn
4
7
2
stanza
2
Stanton
2
Stanley
2
stank
2
Stanhope
2
Stanford
2
Stan
36
1
4
3
2

2

4
2
2
stampede
2
stamp
36
1
4
3
2
na
2

4
2
2
staminate
2
stamina
36
1
4
3
2

2
ip
4
3
2
stammer
2
Stamford
2
stamen
36
1
4
3
2

2

4
2
2
stallion
2
stall
36
1
4
3
2

2

4
3
2
Staley
2
stalemate
2
stale
36
1
4
3
2

2
el
4
4
2
stalwart
2
stalk
2
Stalin
2
stalactite
36
1
4
3
2

2

4
2
2
stairwell
2
stairway
36
1
4
3
2

2
w
4
2
2
staircase
2
stair
36
1
4
3
2

2
r
4
2
2
stain
2
staid
36
1
4
3
2
a
2

4
2
2
stagnate
2
stagnant
36
1
4
3
2

2

4
3
2
stagestruck
2
stagecoach
2
stage
36
1
4
3
2

2
en
4
2
2
stagy
2
stag
36
1
4
3
2
f
2

4
2
2
Stafford
2
staff
36
1
4
3
2
i
2

4
2
2
stadium
2
stadia
36
1
4
3
2

2

4
3
2
Stacy
2
stack
2
staccato
36
1
4
3
2

2
l
4
2
2
stabile
2
stab
36
1
4
3
2

2

4
2
2
stablemen
2
stableman
36
1
4
3
2
e
2
m
4
1
2
stable
36
1
4
3
2

2
bcdfgilmnprstuy
4
3
2
stave
2
stake
2
Stahl
36
1
4
3
2

2
aeioruy
4
1
2
St
36
1
4
3
2

2

4
3
2
SSW
2
SST
2
SSE
36
1
4
3
2

2

4
2
2
squirmy
2
squirm
36
1
4
3
2

2

4
2
2
squirehood
2
squire
36
1
4
3
2

2
em
4
2
2
squirt
2
squirrel
36
1
4
3
2

2
r
4
5
2
squishy
2
squint
2
squill
2
squid
2
Squibb
36
1
4
3
2

2

4
2
2
squeeze
2
squeegee
36
1
4
3
2

2
k
4
2
2
squeamish
2
squeal
36
1
4
3
2

2

4
2
2
squeaky
2
squeak
36
1
4
3
2

2
ae
4
1
2
squelch
36
1
4
3
2

2
dlstw
4
4
2
square
2
squander
2
squamous
2
squabble
36
1
4
3
2

2

4
4
2
squawroot
2
squawk
2
squawbush
2
squaw
36
1
4
3
2

2

4
2
2
squatter
2
squatted
36
1
4
3
2

2
e
4
1
2
squatting
36
1
4
3
2

2
t
4
1
2
squat
36
1
4
3
2
h
2

4
3
2
squashy
2
squashberry
2
squash
36
1
4
3
2

2

4
2
2
squall
2
squalid
36
1
4
3
2

2

4
2
2
squadron
2
squad
36
1
4
3
2
u
2
aei
4
0
36
1
4
3
2

2

4
2
2
spyglass
2
spy
36
1
4
3
2

2
z
4
2
2
zigging
2
zig
36
1
4
3
2

2

4
2
2
sputter
2
sputnik
36
1
4
3
2

2

4
5
2
spurt
2
spurn
2
spurious
2
spurge
2
spur
36
1
4
3
2

2

4
2
2
spunk
2
spun
36
1
4
3
2

2

4
2
2
spumoni
2
spume
36
1
4
3
2

2
mnrt
4
1
2
spud
36
1
4
3
2

2

4
3
2
sprung
2
sprue
2
spruce
36
1
4
3
2

2

4
2
2
sprout
2
Sproul
36
1
4
3
2

2
u
4
1
2
sprocket
36
1
4
3
2

2
t
4
5
2
springy
2
Springfield
2
springe
2
springboard
2
spring
36
1
4
3
2

2

4
2
2
springtime
2
springtail
36
1
4
3
2

2
g
4
2
2
sprint
2
sprinkle
36
1
4
3
2

2

4
2
2
sprightly
2
sprig
36
1
4
3
2

2
gn
4
1
2
sprite
36
1
4
3
2

2

4
2
2
spree
2
spread
36
1
4
3
2

2

4
5
2
spray
2
sprawl
2
sprang
2
sprain
2
Sprague
36
1
4
3
2

2
aeiou
4
0
36
1
4
3
2

2

4
2
2
spout
2
spouse
36
1
4
3
2

2

4
3
2
spotty
2
spotlight
2
spot
36
1
4
3
2

2

4
2
2
sportswriter
2
sportswrite
36
1
4
3
2
it
2
e
4
1
2
sportswriting
36
1
4
3
2

2
r
4
1
2
sportswear
36
1
4
3
2

2

4
2
2
sportsmen
2
sportsman
36
1
4
3
2

2
mw
4
0
36
1
4
3
2

2
s
4
2
2
sporty
2
sport
36
1
4
3
2

2
t
4
2
2
spore
2
sporadic
36
1
4
3
2

2

4
2
2
spoonful
2
spoon
36
1
4
3
2

2

4
2
2
spooky
2
spook
36
1
4
3
2

2
kn
4
2
2
spool
2
spoof
36
1
4
3
2
ane
2

4
2
2
spontaneous
2
spontaneity
36
1
4
3
2

2

4
2
2
spongy
2
sponge
36
1
4
3
2

2
gt
4
1
2
sponsor
36
1
4
3
2

2

4
2
2
spokesmen
2
spokesman
36
1
4
3
2

2
m
4
1
2
spokesperson
36
1
4
3
2

2
s
4
2
2
spoken
2
spoke
36
1
4
3
2

2
e
4
1
2
Spokane
36
1
4
3
2
l
2

4
2
2
spoilage
2
spoil
36
1
4
3
2

2
iknortu
4
0
36
1
4
3
2

2

4
2
2
splutter
2
splurge
36
1
4
3
2
tch
2

4
2
2
splotchy
2
splotch
36
1
4
3
2

2

4
2
2
splintery
2
splint
36
1
4
3
2

2
t
4
1
2
spline
36
1
4
3
2

2
n
4
2
2
split
2
splice
36
1
4
3
2

2

4
2
2
splenetic
2
splendid
36
1
4
3
2
n
2

4
2
2
spleenwort
2
spleen
36
1
4
3
2

2
en
4
0
36
1
4
3
2

2
sy
4
1
2
splat
36
1
4
3
2

2

4
2
2
splayed
2
splay
36
1
4
3
2
h
2

4
2
2
splashy
2
splash
36
1
4
3
2

2
aeiou
4
0
36
1
4
3
2

2

4
2
2
spiteful
2
spite
36
1
4
3
2

2
e
4
4
2
spitz
2
spittle
2
spitfire
2
spit
36
1
4
3
2
t
2

4
2
2
spiritual
2
spirit
36
1
4
3
2

2
i
4
3
2
Spiro
2
spire
2
spiral
36
1
4
3
2

2

4
2
2
spinoff
2
spinodal
36
1
4
3
2

2

4
2
2
spinneret
2
spinnaker
36
1
4
3
2

2

4
2
2
spinal
2
spinach
36
1
4
3
2

2
ano
4
5
2
spiny
2
spinster
2
spine
2
spindle
2
spin
36
1
4
3
2

2

4
2
2
spilt
2
spill
36
1
4
3
2

2

4
2
2
spikenard
2
spike
36
1
4
3
2

2
e
4
1
2
spiky
36
1
4
3
2
er
2

4
3
2
spidery
2
spiderwort
2
spider
36
1
4
3
2

2
e
4
2
2
spicy
2
Spica
36
1
4
3
2

2

4
2
2
spicebush
2
spice
36
1
4
3
2

2
cdklnrt
4
2
2
spigot
2
Spiegel
36
1
4
3
2
id
2

4
2
2
spheroidal
2
spheroid
36
1
4
3
2
r
2
o
4
3
2
spherule
2
spheric
2
sphere
36
1
4
3
2

2

4
2
2
sphalerite
2
sphagnum
36
1
4
3
2

2
ae
4
1
2
sphinx
36
1
4
3
2

2

4
2
2
spermatophyte
2
sperm
36
1
4
3
2

2

4
2
2
Zurich
2
zucchini
36
1
4
3
2
ast
2

4
2
2
Zoroastrian
2
Zoroaster
36
1
4
3
2

2
o
4
1
2
Zorn
36
1
4
3
2

2
l
4
2
2
zoom
2
zoo
36
1
4
3
2
b
2

4
2
2
zombie
2
Zomba
36
1
4
3
2
iac
2

4
2
2
zodiacal
2
zodiac
36
1
4
3
2

2
dmor
4
3
2
zounds
2
zone
2
Zoe
36
1
4
3
2

2
noprg
4
3
2
Ziegler
2
Zimmerman
2
zilch
36
1
4
3
2
con
2

4
2
2
zirconium
2
zircon
36
1
4
3
2

2

4
2
2
zippy
2
zip
36
1
4
3
2
n
2

4
2
2
Zionism
2
Zion
36
1
4
3
2

2

4
2
2
zing
2
zinc
36
1
4
3
2

2
iouae
4
4
2
zygote
2
z's
2
zloty
2
z
36
1
4
3
2

2
m
4
1
2
Sperry
36
1
4
3
2
er
2

4
2
2
Spencerian
2
Spencer
36
1
4
3
2

2
cd
4
1
2
spent
36
1
4
3
2
l
2

4
3
2
spellcheck
2
spellbound
2
spell
36
1
4
3
2

2

4
6
2
speedy
2
speedwell
2
speedup
2
speedometer
2
speedboat
2
speed
36
1
4
3
2

2
d
4
1
2
speech
36
1
4
3
2
la
2

4
2
2
speculate
2
specular
36
1
4
3
2
cop
2

4
3
2
spectroscopy
2
spectroscopic
2
spectroscope
36
1
4
3
2
ra
2
p
4
1
2
spectrogram
36
1
4
3
2
h
2

4
2
2
spectrography
2
spectrograph
36
1
4
3
2

2
gs
4
2
2
spectrophotometer
2
spectrometer
36
1
4
3
2

2

4
2
2
spectral
2
spectra
36
1
4
3
2

2
ao
4
1
2
spectrum
36
1
4
3
2

2
c
4
1
2
spectator
36
1
4
3
2

2

4
2
2
spectacular
2
spectacle
36
1
4
3
2

2
ar
4
1
2
Spector
36
1
4
3
2

2

4
2
2
speckle
2
speck
36
1
4
3
2

2
i
4
1
2
specify
36
1
4
3
2

2

4
2
2
species
2
specie
36
1
4
3
2

2
ef
4
3
2
specious
2
specimen
2
special
36
1
4
3
2

2
iktu
4
1
2
spec
36
1
4
3
2

2
kr
4
0
36
1
4
3
2

2

4
3
2
spearmint
2
spearhead
2
spear
36
1
4
3
2

2

4
2
2
speakeasy
2
speak
36
1
4
3
2

2
acelnr
4
2
2
spew
2
sped
36
1
4
3
2

2
cnrsty
4
8
2
spawn
2
spavin
2
Spaulding
2
spalding
2
Spain
2
spaghetti
2
spade
2
spa
36
1
4
3
2

2

4
2
2
spayed
2
spay
36
1
4
3
2

2

4
6
2
spatula
2
spatterdock
2
spatlum
2
spatial
2
spate
2
spat
36
1
4
3
2

2

4
2
2
spastic
2
spasm
36
1
4
3
2
a
2

4
2
2
Spartan
2
Sparta
36
1
4
3
2

2

4
4
2
sparky
2
Sparkman
2
sparkle
2
spark
36
1
4
3
2

2
kt
4
6
2
sparse
2
sparrow
2
sparling
2
sparge
2
spare
2
spar
36
1
4
3
2

2

4
3
2
Spanish
2
spaniel
2
Spaniard
36
1
4
3
2

2
i
4
3
2
spangle
2
spandrel
2
span
36
1
4
3
2

2
s
4
3
2
spacetime
2
spacecraft
2
space
36
1
4
3
2

2
e
4
1
2
spacious
36
1
4
3
2

2
aehiloruy
4
0
36
1
4
3
2

2

4
3
2
soybean
2
soya
2
soy
36
1
4
3
2

2

4
3
2
sown
2
sowbelly
2
sow
36
1
4
3
2
reign
2

4
2
2
sovereignty
2
sovereign
36
1
4
3
2

2
ei
4
1
2
sovkhoz
36
1
4
3
2
st
2

4
2
2
southwestern
2
southwest
36
1
4
3
2

2
e
4
1
2
southward
36
1
4
3
2
n
2

4
2
2
southernmost
2
southern
36
1
4
3
2
st
2

4
2
2
southeastern
2
southeast
36
1
4
3
2

2
ar
4
1
2
Southey
36
1
4
3
2

2
ew
4
5
2
southpaw
2
southland
2
southbound
2
Southampton
2
south
36
1
4
3
2

2
h
4
1
2
soutane
36
1
4
3
2

2
c
4
4
2
sourwood
2
sourdough
2
sourberry
2
sour
36
1
4
3
2
d
2

4
3
2
sounds
2
soundproof
2
sound
36
1
4
3
2

2

4
2
2
soulful
2
soul
36
1
4
3
2
h
2

4
2
2
sought
2
sough
36
1
4
3
2

2
glnrt
4
5
2
souvenir
2
Sousa
2
soup
2
souffle
2
sou
36
1
4
3
2

2

4
3
2
sorted
2
sortie
2
sort
36
1
4
3
2
w
2

4
2
2
sorrowful
2
sorrow
36
1
4
3
2

2
o
4
2
2
sorry
2
sorrel
36
1
4
3
2
s
2

4
2
2
Sorenson
2
Sorensen
36
1
4
3
2

2
n
4
1
2
sore
36
1
4
3
2

2
ert
4
7
2
sorption
2
sorority
2
sorghum
2
sordid
2
sorcery
2
sorb
2
sora
36
1
4
3
2
or
2

4
2
2
sophomoric
2
sophomore
36
1
4
3
2
le
2

4
2
2
Sophocles
2
Sophoclean
36
1
4
3
2

2
cm
4
0
36
1
4
3
2

2
s
4
2
2
Sophie
2
Sophia
36
1
4
3
2

2

4
2
2
sophistry
2
sophisticate
36
1
4
3
2

2
t
4
1
2
sophism
36
1
4
3
2

2
io
4
0
36
1
4
3
2

2
h
4
2
2
soprano
2
sop
36
1
4
3
2
ay
2

4
2
2
soothsayer
2
soothsay
36
1
4
3
2

2
s
4
2
2
soothe
2
sooth
36
1
4
3
2

2
h
4
1
2
soot
36
1
4
3
2

2
t
4
1
2
soon
36
1
4
3
2

2

4
3
2
sonorous
2
sonority
2
Sonora
36
1
4
3
2

2
r
4
2
2
Sonoma
2
sonogram
36
1
4
3
2

2

4
2
2
sonny
2
sonnet
36
1
4
3
2

2

4
2
2
songbook
2
songbag
36
1
4
3
2

2
b
4
2
2
songful
2
song
36
1
4
3
2

2

4
3
2
sonata
2
sonar
2
sonant
36
1
4
3
2

2
agno
4
3
2
Sony
2
sonic
2
son
36
1
4
3
2
e
2

4
2
2
Sommerfeld
2
sommelier
36
1
4
3
2
h
2

4
2
2
somewhere
2
somewhat
36
1
4
3
2

2
i
4
1
2
something
36
1
4
3
2

2

4
3
2
Somerset
2
somersault
2
Somers
36
1
4
3
2

2
s
4
1
2
Somerville
36
1
4
3
2
ne
2

4
2
2
someone'll
2
someone
36
1
4
3
2
ody
2

4
2
2
somebody'll
2
somebody
36
1
4
3
2

2
bortw
4
4
2
someplace
2
somehow
2
someday
2
some
36
1
4
3
2

2

4
2
2
sombre
2
somber
36
1
4
3
2

2
l
4
2
2
somatic
2
soma
36
1
4
3
2

2

4
2
2
Somali
2
somal
36
1
4
3
2

2
abem
4
1
2
somnolent
36
1
4
3
2

2

4
2
2
solvent
2
solve
36
1
4
3
2

2
e
4
1
2
solvate
36
1
4
3
2

2

4
2
2
solution
2
solute
36
1
4
3
2

2
t
4
1
2
soluble
36
1
4
3
2

2

4
3
2
Solon
2
Solomon
2
solo
36
1
4
3
2

2

4
2
2
solitary
2
solitaire
36
1
4
3
2

2
a
4
2
2
solitude
2
soliton
36
1
4
3
2

2
i
4
3
2
solidus
2
solidarity
2
solid
36
1
4
3
2
it
2
o
4
3
2
solicitude
2
solicitation
2
solicit
36
1
4
3
2

2

4
2
2
solicitous
2
solicitor
36
1
4
3
2

2
cdt
4
2
2
solipsism
2
soliloquy
36
1
4
3
2

2

4
4
2
solenoid
2
solemn
2
solecism
2
sole
36
1
4
3
2
er
2

4
2
2
soldiery
2
soldier
36
1
4
3
2

2
i
4
2
2
solder
2
sold
36
1
4
3
2

2

4
2
2
solar
2
solace
36
1
4
3
2

2
adeiouv
4
2
2
solstice
2
Sol
36
1
4
3
2

2

4
3
2
soiree
2
soil
2
soignee
36
1
4
3
2

2

4
2
2
softwood
2
software
36
1
4
3
2

2
w
4
3
2
soften
2
softball
2
soft
36
1
4
3
2

2
t
4
3
2
Sofia
2
soffit
2
sofa
36
1
4
3
2

2

4
4
2
sodium
2
sodden
2
soda
2
sod
36
1
4
3
2
at
2

4
2
2
Socratic
2
Socrates
36
1
4
3
2

2

4
2
2
sockeye
2
socket
36
1
4
3
2

2
e
4
1
2
sock
36
1
4
3
2

2

4
3
2
sociometry
2
sociology
2
socioeconomic
36
1
4
3
2
t
2

4
3
2
society
2
Societe
2
societal
36
1
4
3
2

2

4
2
2
social
2
sociable
36
1
4
3
2

2
aeo
4
0
36
1
4
3
2

2
ikr
4
2
2
soccer
2
Soc
36
1
4
3
2
i
2

4
2
2
sobriquet
2
sobriety
36
1
4
3
2

2
r
4
2
2
sober
2
sob
36
1
4
3
2

2

4
2
2
soapsud
2
soapstone
36
1
4
3
2

2
s
4
2
2
soapy
2
soap
36
1
4
3
2

2
p
4
2
2
soar
2
soak
36
1
4
3
2

2
abcdfilmnopruvwy
4
3
2
sojourn
2
soggy
2
so
36
1
4
3
2

2

4
2
2
Snyder
2
snyaptic
36
1
4
3
2
l
2

4
2
2
snuggly
2
snuggle
36
1
4
3
2

2
g
4
1
2
snug
36
1
4
3
2
f
2

4
2
2
snuffle
2
snuff
36
1
4
3
2

2
fg
4
1
2
snub
36
1
4
3
2

2

4
2
2
snowflake
2
snowfall
36
1
4
3
2

2
f
4
4
2
snowy
2
snowstorm
2
snowball
2
snow
36
1
4
3
2

2

4
3
2
snort
2
snorkel
2
snore
36
1
4
3
2

2

4
2
2
snoopy
2
snoop
36
1
4
3
2

2
p
4
1
2
snook
36
1
4
3
2

2
b
4
1
2
snob
36
1
4
3
2

2

4
2
2
snobbish
2
snobbery
36
1
4
3
2

2
borw
4
2
2
snout
2
snotty
36
1
4
3
2

2

4
2
2
snippy
2
snippet
36
1
4
3
2

2
p
4
2
2
snipe
2
snip
36
1
4
3
2

2

4
2
2
sniffle
2
sniff
36
1
4
3
2

2
f
4
1
2
snifter
36
1
4
3
2

2
fp
4
4
2
snivel
2
snigger
2
Snider
2
snick
36
1
4
3
2

2

4
2
2
sneeze
2
sneer
36
1
4
3
2
k
2

4
2
2
sneaky
2
sneak
36
1
4
3
2

2
ae
4
1
2
snell
36
1
4
3
2

2
gkpr
4
5
2
snazzy
2
snatch
2
snail
2
snafu
2
snack
36
1
4
3
2

2

4
3
2
snarl
2
snark
2
snare
36
1
4
3
2

2

4
2
2
snappy
2
snappish
36
1
4
3
2

2
p
4
4
2
snapshot
2
snapdragon
2
snapback
2
snap
36
1
4
3
2
e
2

4
3
2
snakeroot
2
snakebird
2
snake
36
1
4
3
2

2

4
2
2
snagging
2
snag
36
1
4
3
2

2
aeiouy
4
0
36
1
4
3
2

2

4
2
2
Smythe
2
Smyrna
36
1
4
3
2

2

4
2
2
smutty
2
smut
36
1
4
3
2

2

4
2
2
smuggle
2
smug
36
1
4
3
2
g
2

4
2
2
smudgy
2
smudge
36
1
4
3
2

2
dgt
4
1
2
Smucker
36
1
4
3
2
h
2

4
2
2
smoothbore
2
smooth
36
1
4
3
2

2
t
4
1
2
smooch
36
1
4
3
2

2
s
4
2
2
smokehouse
2
smoke
36
1
4
3
2

2

4
2
2
smokestack
2
smokescreen
36
1
4
3
2

2
e
4
1
2
smoky
36
1
4
3
2

2
ko
4
3
2
smother
2
smolder
2
smog
36
1
4
3
2

2

4
5
2
smithy
2
Smithson
2
Smithfield
2
smithereens
2
smith
36
1
4
3
2

2
h
4
1
2
smitten
36
1
4
3
2

2
t
4
2
2
smirk
2
smile
36
1
4
3
2

2
l
4
1
2
smelt
36
1
4
3
2

2
l
4
1
2
smear
36
1
4
3
2

2
l
4
4
2
smattering
2
smash
2
smart
2
smack
36
1
4
3
2
l
2
e
4
4
2
smalltime
2
smallpox
2
smallish
2
small
36
1
4
3
2

2
aeiouy
4
0
36
1
4
3
2

2

4
3
2
slurry
2
slurp
2
slur
36
1
4
3
2

2

4
3
2
slump
2
slumber
2
slum
36
1
4
3
2
i
2

4
2
2
sluggish
2
slugging
36
1
4
3
2

2
g
4
1
2
slug
36
1
4
3
2

2
gmr
4
3
2
slung
2
sluice
2
sludge
36
1
4
3
2

2

4
2
2
slowdown
2
slow
36
1
4
3
2
n
2

4
2
2
Slovenia
2
sloven
36
1
4
3
2

2
e
4
1
2
Slovakia
36
1
4
3
2

2

4
2
2
slough
2
slouch
36
1
4
3
2

2

4
2
2
slothful
2
sloth
36
1
4
3
2

2
h
4
1
2
slot
36
1
4
3
2

2

4
3
2
sloppy
2
slope
2
slop
36
1
4
3
2
n
2

4
2
2
sloganeer
2
slogan
36
1
4
3
2

2
a
4
2
2
slogging
2
slog
36
1
4
3
2
n
2

4
2
2
Sloane
2
Sloan
36
1
4
3
2

2
agptuvw
4
5
2
slosh
2
sloop
2
sloe
2
Slocum
2
slob
36
1
4
3
2
er
2

4
2
2
slivery
2
sliver
36
1
4
3
2

2

4
2
2
slither
2
slit
36
1
4
3
2

2

4
2
2
slippery
2
slippage
36
1
4
3
2

2
p
4
1
2
slip
36
1
4
3
2
g
2

4
2
2
slingshot
2
sling
36
1
4
3
2

2

4
3
2
slimy
2
slime
2
slim
36
1
4
3
2

2

4
2
2
slide
2
slid
36
1
4
3
2

2

4
2
2
slick
2
slice
36
1
4
3
2

2
cdmnptvg
4
0
36
1
4
3
2
gh
2

4
2
2
sleight
2
sleigh
36
1
4
3
2

2

4
2
2
sleety
2
sleet
36
1
4
3
2

2

4
3
2
sleepy
2
sleepwalk
2
sleep
36
1
4
3
2

2
pt
4
2
2
sleeve
2
sleek
36
1
4
3
2

2
g
4
1
2
sled
36
1
4
3
2
e
2

4
2
2
sledgehammer
2
sledge
36
1
4
3
2

2
dei
4
4
2
slew
2
sleuth
2
slept
2
slender
36
1
4
3
2

2
cnptuv
4
8
2
slay
2
slash
2
slam
2
slake
2
slain
2
slag
2
sladang
2
slab
36
1
4
3
2

2

4
2
2
slavish
2
Slavic
36
1
4
3
2

2

4
2
2
slavery
2
slave
36
1
4
3
2

2
ei
4
2
2
Slavonic
2
Slav
36
1
4
3
2
ghter
2

4
2
2
slaughterhouse
2
slaughter
36
1
4
3
2

2

4
2
2
slater
2
slate
36
1
4
3
2

2
e
4
1
2
slat
36
1
4
3
2

2

4
2
2
slapstick
2
slap
36
1
4
3
2
er
2

4
2
2
slanderous
2
slander
36
1
4
3
2

2
d
4
2
2
slant
2
slang
36
1
4
3
2
k
2

4
2
2
slacken
2
slack
36
1
4
3
2

2
aeiou
4
1
2
sly
36
1
4
3
2
a
2

4
3
2
skyway
2
skywave
2
skyward
36
1
4
3
2

2

4
2
2
skyline
2
skylight
36
1
4
3
2

2
i
4
1
2
skylark
36
1
4
3
2

2
lw
4
6
2
skyscrape
2
skyrocket
2
skyjack
2
skyhook
2
Skye
2
sky
36
1
4
3
2

2
l
4
1
2
skulk
36
1
4
3
2

2

4
3
2
skullduggery
2
skullcap
2
skull
36
1
4
3
2

2
l
4
1
2
skunk
36
1
4
3
2

2

4
2
2
skittle
2
skit
36
1
4
3
2

2

4
2
2
skirt
2
skirmish
36
1
4
3
2

2

4
3
2
Skippy
2
skipjack
2
skip
36
1
4
3
2

2

4
3
2
skinny
2
skindive
2
skin
36
1
4
3
2

2

4
2
2
skimpy
2
skimp
36
1
4
3
2

2
p
4
2
2
skimmer
2
skim
36
1
4
3
2
l
2

4
3
2
skillful
2
skillet
2
skill
36
1
4
3
2

2

4
2
2
skiddy
2
skid
36
1
4
3
2

2
dlmnprt
4
2
2
skiff
2
ski
36
1
4
3
2
ch
2

4
4
2
sketchy
2
sketchpad
2
sketchbook
2
sketch
36
1
4
3
2
et
2

4
2
2
skeleton
2
skeletal
36
1
4
3
2

2
lt
4
3
2
skew
2
skeptic
2
skeet
36
1
4
3
2
t
2
e
4
1
2
skat
36
1
4
3
2

2

4
2
2
skater
2
skate
36
1
4
3
2

2
aeiuy
4
1
2
Skopje
36
1
4
3
2

2
e
4
1
2
sizzle
36
1
4
3
2
en
2

4
2
2
sixteenth
2
sixteen
36
1
4
3
2

2
e
4
3
2
sixty
2
sixtieth
2
sixth
36
1
4
3
2

2
t
4
3
2
sixgun
2
sixfold
2
six
36
1
4
3
2

2
a
4
2
2
situs
2
situ
36
1
4
3
2

2
u
4
2
2
site
2
sit
36
1
4
3
2
ph
2

4
2
2
Sisyphus
2
Sisyphean
36
1
4
3
2

2

4
2
2
Sistine
2
sister
36
1
4
3
2

2
ty
4
3
2
siskin
2
sisal
2
sis
36
1
4
3
2

2

4
2
2
siren
2
sire
36
1
4
3
2

2
e
4
3
2
sirs
2
Sirius
2
sir
36
1
4
3
2
id
2

4
2
2
sinusoidal
2
sinusoid
36
1
4
3
2

2
o
4
1
2
sinus
36
1
4
3
2

2
s
4
1
2
sinuous
36
1
4
3
2

2

4
2
2
sinkhole
2
sink
36
1
4
3
2
st
2

4
2
2
sinistral
2
sinister
36
1
4
3
2

2

4
2
2
singleton
2
singlet
36
1
4
3
2
e
2
t
4
2
2
singlehanded
2
single
36
1
4
3
2

2

4
2
2
Singapore
2
singable
36
1
4
3
2

2
al
4
4
2
singular
2
singsong
2
singe
2
sing
36
1
4
3
2

2

4
2
2
sinewy
2
sinew
36
1
4
3
2

2
w
4
1
2
sine
36
1
4
3
2

2
r
4
1
2
since
36
1
4
3
2

2
e
4
1
2
Sinclair
36
1
4
3
2

2
cegiku
4
5
2
sinter
2
sinh
2
sinful
2
Sinai
2
sin
36
1
4
3
2
ane
2

4
2
2
simultaneous
2
simultaneity
36
1
4
3
2
l
2
t
4
2
2
simulcast
2
simulate
36
1
4
3
2
i
2

4
2
2
simplicity
2
simplicial
36
1
4
3
2

2
cf
4
1
2
simplistic
36
1
4
3
2

2

4
5
2
simplex
2
simpleton
2
simpleminded
2
simplectic
2
simple
36
1
4
3
2

2
ei
4
1
2
simply
36
1
4
3
2

2
l
4
2
2
Simpson
2
simper
36
1
4
3
2
n
2

4
2
2
Simonson
2
Simon
36
1
4
3
2

2

4
2
2
Simmons
2
simmer
36
1
4
3
2
l
2

4
3
2
similitude
2
simile
2
similar
36
1
4
3
2

2
imopu
4
2
2
Sims
2
sima
36
1
4
3
2
er
2

4
5
2
silvery
2
silverware
2
silversmith
2
Silverman
2
silver
36
1
4
3
2

2

4
4
2
silty
2
siltstone
2
siltation
2
silt
36
1
4
3
2

2

4
2
2
silly
2
sill
36
1
4
3
2

2

4
4
2
silky
2
silkworm
2
silken
2
silk
36
1
4
3
2
n
2

4
2
2
silicone
2
silicon
36
1
4
3
2

2

4
2
2
silicide
2
silicic
36
1
4
3
2

2

4
2
2
silicate
2
silica
36
1
4
3
2
c
2
aio
4
1
2
siliceous
36
1
4
3
2

2

4
3
2
Silas
2
silane
2
silage
36
1
4
3
2

2
aikltv
4
3
2
silo
2
silhouette
2
silent
36
1
4
3
2
r
2

4
2
2
Signora
2
Signor
36
1
4
3
2
f
2

4
2
2
signify
2
significant
36
1
4
3
2

2

4
2
2
signature
2
signal
36
1
4
3
2

2
aio
4
4
2
signpost
2
signet
2
signboard
2
sign
36
1
4
3
2

2

4
2
2
Sigmund
2
sigma
36
1
4
3
2

2
t
4
1
2
sigh
36
1
4
3
2
ee
2

4
3
2
sightseer
2
sightseeing
2
sightsee
36
1
4
3
2

2
s
4
1
2
sight
36
1
4
3
2

2
hmn
4
0
36
1
4
3
2

2

4
2
2
sienna
2
Siena
36
1
4
3
2

2
e
4
3
2
Siegmund
2
Sieglinda
2
Siegfried
36
1
4
3
2

2

4
2
2
Siegel
2
siege
36
1
4
3
2

2
gn
4
4
2
sieve
2
siesta
2
sierra
2
Siemens
36
1
4
3
2

2
blmrsw
4
4
2
sidetrack
2
sidecar
2
sidearm
2
side
36
1
4
3
2

2

4
2
2
sidewise
2
sidewinder
36
1
4
3
2

2
l
4
1
2
sideway
36
1
4
3
2

2

4
2
2
sidewall
2
sidewalk
36
1
4
3
2

2
ai
4
0
36
1
4
3
2
ep
2

4
2
2
sidestepping
2
sidestep
36
1
4
3
2

2
t
4
2
2
sideshow
2
sidesaddle
36
1
4
3
2

2

4
2
2
siderite
2
sidereal
36
1
4
3
2

2

4
2
2
sidemen
2
sideman
36
1
4
3
2

2

4
2
2
sideline
2
sidelight
36
1
4
3
2

2
i
4
1
2
sidelong
36
1
4
3
2

2

4
2
2
sideboard
2
sideband
36
1
4
3
2

2
e
4
2
2
Sidney
2
sidle
36
1
4
3
2
e
2

4
2
2
sicklewort
2
sickle
36
1
4
3
2

2
l
4
4
2
sickroom
2
sickish
2
sicken
2
sick
36
1
4
3
2
l
2

4
2
2
Sicily
2
Sicilian
36
1
4
3
2

2
ik
4
1
2
sic
36
1
4
3
2

2

4
2
2
sibling
2
Sibley
36
1
4
3
2

2
l
4
4
2
sibyl
2
sibilant
2
Siberia
2
sib
36
1
4
3
2

2
m
4
2
2
Sian
2
sial
36
1
4
3
2

2

4
2
2
Siamese
2
SIAM
36
1
4
3
2

2
abcdeglmnrstxz
4
5
2
siva
2
sip
2
Sioux
2
Sikorsky
2
sift
36
1
4
3
2

2

4
2
2
Shylock
2
shy
36
1
4
3
2
le
2

4
2
2
shuttlecock
2
shuttle
36
1
4
3
2

2

4
2
2
shutout
2
shutoff
36
1
4
3
2

2
ot
4
2
2
shutdown
2
shut
36
1
4
3
2

2

4
2
2
shunt
2
shun
36
1
4
3
2
fle
2

4
2
2
shuffleboard
2
shuffle
36
1
4
3
2
der
2

4
2
2
shuddery
2
shudder
36
1
4
3
2

2
dfnt
4
3
2
Shulman
2
shuck
2
Shu
36
1
4
3
2
k
2

4
2
2
shrunken
2
shrunk
36
1
4
3
2

2

4
2
2
shrugging
2
shrug
36
1
4
3
2

2

4
2
2
shrubbery
2
shrub
36
1
4
3
2

2
bgn
4
0
36
1
4
3
2

2

4
2
2
shrove
2
shroud
36
1
4
3
2
e
2

4
2
2
shrivel
2
shrive
36
1
4
3
2

2

4
2
2
shrinkage
2
shrink
36
1
4
3
2

2
k
4
1
2
shrine
36
1
4
3
2
l
2

4
2
2
shrilly
2
shrill
36
1
4
3
2

2
lnv
4
4
2
shrimp
2
shrike
2
shrift
2
shriek
36
1
4
3
2

2

4
3
2
shrewish
2
shrewd
2
shrew
36
1
4
3
2

2
w
4
2
2
Shreveport
2
shred
36
1
4
3
2

2

4
2
2
shrapnel
2
shrank
36
1
4
3
2

2
aeiou
4
0
36
1
4
3
2

2

4
2
2
showplace
2
showpiece
36
1
4
3
2

2

4
2
2
showmen
2
showman
36
1
4
3
2

2
mp
4
7
2
showy
2
showroom
2
shown
2
showdown
2
showcase
2
showboat
2
show
36
1
4
3
2
e
2

4
2
2
shovel
2
shove
36
1
4
3
2
d
2

4
3
2
shouldn't
2
shoulder
2
should
36
1
4
3
2

2
l
4
1
2
shout
36
1
4
3
2

2

4
3
2
shotgun
2
shotbush
2
shot
36
1
4
3
2

2

4
2
2
shortstop
2
shortsighted
36
1
4
3
2

2

4
2
2
shortcut
2
shortcoming
36
1
4
3
2

2
cse
4
5
2
shortish
2
shorthand
2
shortfall
2
shortage
2
short
36
1
4
3
2

2

4
2
2
shoreline
2
shore
36
1
4
3
2

2
et
4
0
36
1
4
3
2

2

4
3
2
shopworn
2
shopkeep
2
shop
36
1
4
3
2

2

4
4
2
shoot
2
shook
2
shoofly
2
shoo
36
1
4
3
2

2

4
5
2
shoestring
2
shoemake
2
shoelace
2
shoehorn
2
shoe
36
1
4
3
2

2

4
2
2
shoddy
2
shod
36
1
4
3
2
k
2

4
2
2
Shockley
2
shock
36
1
4
3
2

2
cdeoprtuvw
4
3
2
shone
2
shoji
2
shoal
36
1
4
3
2
r
2

4
2
2
shivery
2
shiver
36
1
4
3
2

2
e
4
1
2
shiv
36
1
4
3
2

2

4
2
2
shirtmake
2
shirt
36
1
4
3
2

2
t
4
3
2
Shirley
2
shirk
2
shire
36
1
4
3
2

2

4
2
2
shipmate
2
shipman
36
1
4
3
2

2
a
4
1
2
shipmen
36
1
4
3
2

2

4
2
2
Shipley
2
shiplap
36
1
4
3
2
ild
2

4
2
2
shipbuilding
2
shipbuild
36
1
4
3
2

2
u
4
1
2
shipboard
36
1
4
3
2

2
blm
4
4
2
shipyard
2
shipwreck
2
shipshape
2
ship
36
1
4
3
2

2

4
6
2
shiny
2
Shinto
2
shingle
2
shine
2
shinbone
2
shin
36
1
4
3
2

2

4
2
2
shimmy
2
shim
36
1
4
3
2

2

4
2
2
Shiloh
2
shill
36
1
4
3
2
t
2

4
2
2
shifty
2
shift
36
1
4
3
2

2
flmnprv
4
4
2
shitepoke
2
shish
2
shield
2
shibboleth
36
1
4
3
2

2

4
2
2
Sherwood
2
Sherwin
36
1
4
3
2

2

4
2
2
sherry
2
Sherrill
36
1
4
3
2

2

4
2
2
sheriff
2
Sheridan
36
1
4
3
2

2
irw
4
4
2
Sherman
2
Sherlock
2
sherbet
2
Sheraton
36
1
4
3
2

2

4
3
2
Sheppard
2
shepherd
2
Shepard
36
1
4
3
2
an
2

4
2
2
shenanigan
2
Shenandoah
36
1
4
3
2

2

4
2
2
Shelton
2
shelter
36
1
4
3
2

2

4
2
2
Shelley
2
shell
36
1
4
3
2

2

4
2
2
she'll
2
she'd
36
1
4
3
2

2
lt
4
4
2
shelve
2
shelf
2
Sheldon
2
Shelby
36
1
4
3
2

2

4
2
2
Sheila
2
sheik
36
1
4
3
2

2

4
2
2
sheepskin
2
sheep
36
1
4
3
2

2
p
4
4
2
sheet
2
sheer
2
sheen
2
Sheehan
36
1
4
3
2

2

4
2
2
Shedir
2
shed
36
1
4
3
2
h
2

4
2
2
sheathe
2
sheath
36
1
4
3
2

2

4
2
2
Shearer
2
shear
36
1
4
3
2

2
rt
4
3
2
sheave
2
sheaf
2
Shea
36
1
4
3
2

2
adeil'npr
4
2
2
Sheffield
2
she
36
1
4
3
2

2
cdfgklmnprtvw
4
4
2
shay
2
Shasta
2
shah
2
shabby
36
1
4
3
2

2

4
3
2
Shawnee
2
shawl
2
shaw
36
1
4
3
2
e
2

4
2
2
shaven
2
shave
36
1
4
3
2
r
2

4
2
2
shatterproof
2
shatter
36
1
4
3
2
t
2
e
4
1
2
Shattuck
36
1
4
3
2

2

4
2
2
sharpen
2
Sharpe
36
1
4
3
2

2
e
4
2
2
sharpshoot
2
sharp
36
1
4
3
2

2

4
4
2
shares
2
shareholder
2
sharecrop
2
share
36
1
4
3
2

2
ep
4
4
2
Sharon
2
shark
2
Shari
2
shard
36
1
4
3
2

2

4
2
2
Shapiro
2
shape
36
1
4
3
2

2

4
2
2
shanty
2
Shantung
36
1
4
3
2

2
t
4
4
2
shan't
2
Shannon
2
shank
2
Shanghai
36
1
4
3
2

2

4
2
2
shameful
2
shameface
36
1
4
3
2

2
f
4
1
2
shame
36
1
4
3
2

2
e
4
4
2
shamrock
2
shampoo
2
shamble
2
sham
36
1
4
3
2

2

4
2
2
shallow
2
shallot
36
1
4
3
2

2
o
4
1
2
shall
36
1
4
3
2

2
l
4
2
2
shalom
2
shale
36
1
4
3
2

2
s
4
4
2
shaken
2
shakedown
2
shakeable
2
shake
36
1
4
3
2

2

4
2
2
Shakespearean
2
Shakespeare
36
1
4
3
2
pear
2
e
4
1
2
Shakespearian
36
1
4
3
2

2
e
4
2
2
shaky
2
shako
36
1
4
3
2

2

4
2
2
shaggy
2
shagging
36
1
4
3
2

2
g
4
2
2
shagbark
2
shag
36
1
4
3
2

2

4
3
2
shaft
2
Shaffer
2
Shafer
36
1
4
3
2
w
2

4
2
2
shadowy
2
shadow
36
1
4
3
2

2
o
4
5
2
shady
2
shadflower
2
shade
2
shadbush
2
shad
36
1
4
3
2
k
2

4
2
2
shackle
2
shack
36
1
4
3
2

2
aeioruy
4
1
2
Shmuel
36
1
4
3
2
ple
2

4
2
2
sextuplet
2
sextuple
36
1
4
3
2

2
u
4
4
2
sexton
2
sextillion
2
sextet
2
Sextans
36
1
4
3
2

2
t
4
3
2
sexy
2
sexual
2
sex
36
1
4
3
2

2

4
2
2
Seward
2
sewage
36
1
4
3
2

2
a
4
3
2
sewn
2
sewerage
2
sew
36
1
4
3
2

2
nr
4
0
36
1
4
3
2
l
2

4
3
2
severalty
2
severalfold
2
several
36
1
4
3
2

2
ae
4
2
2
Severn
2
sever
36
1
4
3
2

2
t
4
2
2
sevenfold
2
seven
36
1
4
3
2
en
2

4
2
2
seventeenth
2
seventeen
36
1
4
3
2

2
e
4
3
2
seventy
2
seventieth
2
seventh
36
1
4
3
2

2
e
4
1
2
Seville
36
1
4
3
2

2
t
4
6
2
setup
2
setscrew
2
Seton
2
Seth
2
setback
2
set
36
1
4
3
2

2

4
2
2
session
2
sesame
36
1
4
3
2

2

4
2
2
servomechanism
2
servo
36
1
4
3
2
e
2
m
4
3
2
serviceberry
2
serviceable
2
service
36
1
4
3
2

2

4
2
2
servicemen
2
serviceman
36
1
4
3
2

2
c
4
3
2
servitor
2
servile
2
serviette
36
1
4
3
2

2
ioe
4
1
2
servant
36
1
4
3
2

2

4
2
2
serpentine
2
serpent
36
1
4
3
2
en
2
t
4
1
2
Serpens
36
1
4
3
2

2

4
2
2
seriatim
2
serial
36
1
4
3
2

2
a
4
4
2
serious
2
serine
2
serif
2
series
36
1
4
3
2
e
2

4
3
2
Sergei
2
sergeant
2
serge
36
1
4
3
2
ipit
2

4
2
2
serendipity
2
serendipitous
36
1
4
3
2
n
2
d
4
2
2
serene
2
serenade
36
1
4
3
2

2
p
4
2
2
seraglio
2
sera
36
1
4
3
2

2

4
2
2
seraphim
2
serape
36
1
4
3
2

2
aegipv
4
5
2
serum
2
serology
2
sermon
2
serf
2
Serbia
36
1
4
3
2

2

4
2
2
sequitur
2
sequin
36
1
4
3
2

2
ns
4
1
2
sequel
36
1
4
3
2
t
2

4
2
2
sequestration
2
sequester
36
1
4
3
2
t
2

4
2
2
sequential
2
sequent
36
1
4
3
2

2
ei
4
1
2
Sequoia
36
1
4
3
2

2
u
4
1
2
seq
36
1
4
3
2

2

4
2
2
sepulchral
2
sepuchral
36
1
4
3
2

2

4
2
2
septum
2
septuagenarian
36
1
4
3
2

2

4
2
2
septillion
2
septic
36
1
4
3
2

2

4
2
2
septennial
2
September
36
1
4
3
2

2

4
2
2
septate
2
septa
36
1
4
3
2

2
aeiu
4
1
2
sept
36
1
4
3
2

2
r
4
1
2
sepal
36
1
4
3
2
a
2

4
2
2
separate
2
separable
36
1
4
3
2

2
atu
4
2
2
Sepoy
2
sepia
36
1
4
3
2

2

4
3
2
sentinel
2
sentiment
2
sentient
36
1
4
3
2
n
2

4
2
2
sentential
2
sentence
36
1
4
3
2

2
ei
4
2
2
sentry
2
sent
36
1
4
3
2

2

4
2
2
sensuous
2
sensual
36
1
4
3
2
r
2

4
2
2
sensory
2
sensor
36
1
4
3
2

2

4
2
2
sensitive
2
sensible
36
1
4
3
2

2
iou
4
2
2
sense
2
sensate
36
1
4
3
2
r
2

4
3
2
senorita
2
Senora
2
senor
36
1
4
3
2

2

4
2
2
senior
2
senile
36
1
4
3
2

2

4
2
2
Senegal
2
Seneca
36
1
4
3
2
t
2

4
2
2
senatorial
2
senate
36
1
4
3
2

2
aeiostd
4
1
2
sen
36
1
4
3
2

2

4
2
2
Semitic
2
Semite
36
1
4
3
2

2
r
4
1
2
seminal
36
1
4
3
2

2

4
3
2
seminary
2
seminarian
2
seminar
36
1
4
3
2

2
a
4
1
2
Seminole
36
1
4
3
2

2
nt
4
2
2
Semiramis
2
semi
36
1
4
3
2

2

4
2
2
semaphore
2
semantic
36
1
4
3
2

2
ai
4
3
2
semper
2
semester
2
semblance
36
1
4
3
2

2

4
4
2
sells
2
selling
2
sellout
2
sell
36
1
4
3
2

2

4
4
2
Selfridge
2
selfish
2
selfadjoint
2
self
36
1
4
3
2

2

4
2
2
selenium
2
selenite
36
1
4
3
2

2

4
2
2
selenate
2
Selena
36
1
4
3
2

2
ai
4
0
36
1
4
3
2
t
2
m
4
3
2
Selectric
2
selector
2
select
36
1
4
3
2

2

4
2
2
selectmen
2
selectman
36
1
4
3
2

2
cn
4
0
36
1
4
3
2

2
efl
4
6
2
Selwyn
2
selves
2
seltzer
2
Selma
2
Selkirk
2
seldom
36
1
4
3
2

2

4
2
2
seizure
2
seize
36
1
4
3
2
raph
2

4
2
2
seismography
2
seismograph
36
1
4
3
2

2
g
4
1
2
seismology
36
1
4
3
2
m
2
o
4
1
2
seismic
36
1
4
3
2

2
sz
4
1
2
Seidel
36
1
4
3
2
ega
2

4
2
2
segregate
2
segregant
36
1
4
3
2
ent
2

4
2
2
segmentation
2
segment
36
1
4
3
2

2
mr
4
2
2
Segundo
2
Segovia
36
1
4
3
2

2

4
2
2
seepage
2
seep
36
1
4
3
2

2

4
4
2
seedy
2
seedling
2
seedbed
2
seed
36
1
4
3
2

2
dpm
4
7
2
seethe
2
seersucker
2
seen
2
seek
2
seeing
2
seeable
2
see
36
1
4
3
2

2
t
4
1
2
seduce
36
1
4
3
2
i
2

4
2
2
seductive
2
seduction
36
1
4
3
2

2
c
4
1
2
sedulous
36
1
4
3
2
io
2

4
2
2
seditious
2
sedition
36
1
4
3
2
ent
2
a
4
1
2
sediment
36
1
4
3
2

2

4
2
2
sedimentation
2
sedimentary
36
1
4
3
2

2
mt
4
0
36
1
4
3
2

2

4
2
2
seder
2
sedentary
36
1
4
3
2

2

4
2
2
sedate
2
sedan
36
1
4
3
2

2
aeiu
4
1
2
sedge
36
1
4
3
2

2
r
4
1
2
secular
36
1
4
3
2

2

4
4
2
sector
2
section
2
sectarian
2
sect
36
1
4
3
2

2

4
2
2
secretive
2
secretion
36
1
4
3
2
a
2

4
2
2
secretariat
2
secretarial
36
1
4
3
2
r
2
i
4
1
2
secretary
36
1
4
3
2

2
ai
4
2
2
secrete
2
secret
36
1
4
3
2
e
2
t
4
1
2
secrecy
36
1
4
3
2
nd
2

4
4
2
seconds
2
secondhand
2
secondary
2
second
36
1
4
3
2
u
2

4
2
2
seclusion
2
seclude
36
1
4
3
2

2

4
2
2
secession
2
secede
36
1
4
3
2

2
elortu
4
2
2
secant
2
sec
36
1
4
3
2

2

4
2
2
seaweed
2
seaward
36
1
4
3
2

2

4
3
2
Seattle
2
seater
2
seat
36
1
4
3
2
n
2

4
2
2
seasonal
2
season
36
1
4
3
2

2
o
4
2
2
seaside
2
seashore
36
1
4
3
2
h
2

4
3
2
searching
2
searchlight
2
search
36
1
4
3
2

2
c
4
1
2
sear
36
1
4
3
2

2

4
2
2
seance
2
Sean
36
1
4
3
2

2

4
5
2
seamy
2
seamstress
2
seamen
2
seaman
2
seam
36
1
4
3
2

2

4
2
2
sealant
2
seal
36
1
4
3
2

2

4
2
2
seagull
2
Seagram
36
1
4
3
2

2

4
2
2
seafood
2
seafare
36
1
4
3
2

2
fglmnrstw
4
6
2
seaquake
2
seaport
2
seahorse
2
seacoast
2
seaboard
2
sea
36
1
4
3
2

2
acdegilmnpqrstvwx
4
4
2
Seymour
2
Seoul
2
Sebastian
2
SE
36
1
4
3
2
h
2

4
2
2
Scythia
2
scythe
36
1
4
3
2

2
t
4
1
2
Scylla
36
1
4
3
2

2

4
2
2
scutum
2
scuttle
36
1
4
3
2

2

4
2
2
scurry
2
scurrilous
36
1
4
3
2

2
r
4
1
2
scurvy
36
1
4
3
2
r
2

4
2
2
sculpture
2
sculptural
36
1
4
3
2

2
u
4
2
2
sculptor
2
sculpt
36
1
4
3
2

2
t
4
1
2
sculpin
36
1
4
3
2

2
p
4
1
2
scull
36
1
4
3
2
f
2

4
2
2
scuffle
2
scuff
36
1
4
3
2

2
flrt
4
3
2
scum
2
scud
2
scuba
36
1
4
3
2

2

4
2
2
scrutiny
2
scrutable
36
1
4
3
2
lo
2

4
2
2
scrupulous
2
scrupulosity
36
1
4
3
2

2
u
4
1
2
scruple
36
1
4
3
2

2
pt
4
3
2
scruffy
2
scrumptious
2
scrub
36
1
4
3
2

2
l
4
3
2
scrounge
2
scrotum
2
scrooge
36
1
4
3
2
r
2

4
2
2
scripture
2
scriptural
36
1
4
3
2

2
u
4
2
2
scription
2
script
36
1
4
3
2

2
t
4
1
2
Scripps
36
1
4
3
2

2

4
2
2
scrimmage
2
scrim
36
1
4
3
2

2

4
3
2
Scribners
2
scribe
2
scribble
36
1
4
3
2

2
bmp
4
1
2
scriven
36
1
4
3
2

2

4
2
2
screwbean
2
screwball
36
1
4
3
2

2
b
4
3
2
screwworm
2
screwdriver
2
screw
36
1
4
3
2

2

4
2
2
screenplay
2
screen
36
1
4
3
2
h
2

4
2
2
screechy
2
screech
36
1
4
3
2

2
cn
4
1
2
screed
36
1
4
3
2

2
ew
4
1
2
scream
36
1
4
3
2

2
mptw
4
3
2
Scranton
2
scraggly
2
scrabble
36
1
4
3
2

2

4
2
2
scrawny
2
scrawl
36
1
4
3
2
ch
2

4
2
2
scratchy
2
scratch
36
1
4
3
2

2

4
3
2
scrape
2
scrapbook
2
scrap
36
1
4
3
2

2

4
2
2
scramble
2
scram
36
1
4
3
2

2
aeiou
4
0
36
1
4
3
2

2

4
2
2
scourge
2
scour
36
1
4
3
2

2
r
4
2
2
scout
2
scoundrel
36
1
4
3
2

2

4
4
2
Scotty
2
Scottsdale
2
Scottish
2
Scott
36
1
4
3
2
m
2

4
2
2
Scotsmen
2
Scotsman
36
1
4
3
2

2
st
4
4
2
Scotland
2
Scotia
2
scotch
2
Scot
36
1
4
3
2
io
2

4
2
2
scorpion
2
Scorpio
36
1
4
3
2

2

4
2
2
scornful
2
scorn
36
1
4
3
2

2

4
3
2
scorecard
2
scoreboard
2
score
36
1
4
3
2

2
enp
4
2
2
scoria
2
scorch
36
1
4
3
2

2

4
3
2
scops
2
scopic
2
scope
36
1
4
3
2

2

4
2
2
scoot
2
scoop
36
1
4
3
2

2
oprtu
4
3
2
scowl
2
scold
2
scoff
36
1
4
3
2
ero
2

4
2
2
sclerotic
2
sclerosis
36
1
4
3
2
i
2

4
2
2
scientist
2
scientific
36
1
4
3
2
n
2
t
4
1
2
science
36
1
4
3
2

2
e
4
6
2
scissor
2
scion
2
scintillate
2
scimitar
2
sciatica
2
Sci
36
1
4
3
2

2

4
2
2
Schwartz
2
Schwab
36
1
4
3
2

2
a
4
1
2
Schweitzer
36
1
4
3
2
l
2

4
2
2
Schuylkill
2
Schuyler
36
1
4
3
2
a
2

4
2
2
Schumann
2
Schumacher
36
1
4
3
2

2

4
2
2
Schulz
2
Schultz
36
1
4
3
2

2
lmy
4
2
2
Schuster
2
Schubert
36
1
4
3
2
oed
2

4
2
2
Schroedinger
2
Schroeder
36
1
4
3
2

2
bgm
4
5
2
schoolwork
2
schoolteacher
2
schoolroom
2
schoolhouse
2
school
36
1
4
3
2
a
2

4
3
2
schoolmate
2
schoolmaster
2
schoolmarm
36
1
4
3
2
irl
2

4
2
2
schoolgirlish
2
schoolgirl
36
1
4
3
2
o
2

4
2
2
schoolboy
2
schoolbook
36
1
4
3
2

2
l
4
1
2
schooner
36
1
4
3
2
a
2

4
2
2
scholastic
2
scholar
36
1
4
3
2

2
lo
4
3
2
Schottky
2
Schofield
2
Schoenberg
36
1
4
3
2

2

4
2
2
schnapps
2
Schnabel
36
1
4
3
2

2
a
4
1
2
Schneider
36
1
4
3
2
i
2

4
2
2
Schmitt
2
Schmidt
36
1
4
3
2

2

4
2
2
Schlitz
2
schlieren
36
1
4
3
2

2
i
4
2
2
Schloss
2
Schlesinger
36
1
4
3
2
hreni
2

4
2
2
schizophrenic
2
schizophrenia
36
1
4
3
2
o
2
p
4
2
2
schizomycetes
2
schizoid
36
1
4
3
2

2

4
2
2
schist
2
schism
36
1
4
3
2

2
sz
4
1
2
Schiller
36
1
4
3
2

2
t
4
1
2
schema
36
1
4
3
2

2

4
2
2
schematic
2
schemata
36
1
4
3
2

2
a
4
1
2
scheme
36
1
4
3
2

2
m
4
4
2
scherzo
2
Schenectady
2
schelling
2
schedule
36
1
4
3
2

2

4
3
2
Schantz
2
Schafer
2
Schaefer
36
1
4
3
2

2
aeilmnoruw
4
0
36
1
4
3
2

2
e
4
3
2
scent
2
scenic
2
scenario
36
1
4
3
2

2

4
2
2
scenery
2
scene
36
1
4
3
2

2
n
4
1
2
sceptic
36
1
4
3
2
er
2

4
2
2
scattergun
2
scatterbrain
36
1
4
3
2

2
t
4
2
2
scathe
2
scat
36
1
4
3
2

2

4
2
2
scarlet
2
Scarlatti
36
1
4
3
2

2

4
2
2
scarface
2
scarf
36
1
4
3
2

2

4
2
2
scarecrow
2
scare
36
1
4
3
2

2
efl
4
7
2
scary
2
scarves
2
Scarsdale
2
scarify
2
scarce
2
Scarborough
2
scar
36
1
4
3
2
la
2

4
2
2
scapular
2
scapula
36
1
4
3
2

2
u
4
1
2
scapegoat
36
1
4
3
2

2

4
2
2
scanty
2
scant
36
1
4
3
2

2

4
2
2
scandium
2
Scandinavia
36
1
4
3
2
l
2

4
2
2
scandalous
2
scandal
36
1
4
3
2

2
ai
4
0
36
1
4
3
2

2
dt
4
1
2
scan
36
1
4
3
2

2

4
2
2
scamp
2
scam
36
1
4
3
2

2

4
2
2
scalar
2
Scala
36
1
4
3
2

2
a
4
4
2
scalp
2
scallop
2
scale
2
scald
36
1
4
3
2

2

4
4
2
scabrous
2
scabious
2
scabbard
2
scab
36
1
4
3
2

2
blmnprt
4
3
2
scavenge
2
scaup
2
scaffold
36
1
4
3
2

2
aehiloruy
4
2
2
SCM
2
SC
36
1
4
3
2

2

4
2
2
Saxony
2
Saxon
36
1
4
3
2

2
n
4
1
2
saxophone
36
1
4
3
2

2
o
4
2
2
saxifrage
2
sax
36
1
4
3
2

2

4
2
2
sawtooth
2
sawtimber
36
1
4
3
2

2

4
2
2
sawfly
2
sawfish
36
1
4
3
2

2
ft
4
5
2
sawyer
2
sawmill
2
sawdust
2
sawbelly
2
saw
36
1
4
3
2

2

4
2
2
Savoyard
2
savoy
36
1
4
3
2

2
y
4
1
2
Savonarola
36
1
4
3
2

2
gn
4
0
36
1
4
3
2

2

4
2
2
savant
2
Savannah
36
1
4
3
2
e
2

4
2
2
savagery
2
savage
36
1
4
3
2

2
aoi
4
2
2
savvy
2
save
36
1
4
3
2
e
2

4
2
2
sauterne
2
saute
36
1
4
3
2

2

4
2
2
Sault
2
Saul
36
1
4
3
2

2

4
2
2
Saudi
2
Saud
36
1
4
3
2

2
e
4
1
2
saucy
36
1
4
3
2

2

4
2
2
saucepan
2
sauce
36
1
4
3
2

2
cdlt
4
3
2
sausage
2
Saunders
2
sauerkraut
36
1
4
3
2

2

4
3
2
saturnine
2
Saturnalia
2
Saturn
36
1
4
3
2

2
t
4
1
2
saturable
36
1
4
3
2
e
2

4
2
2
saturater
2
saturate
36
1
4
3
2
r
2
an
4
1
2
Saturday
36
1
4
3
2
ct
2

4
2
2
satisfactory
2
satisfaction
36
1
4
3
2
f
2
ay
4
1
2
satisfied
36
1
4
3
2

2

4
2
2
satiric
2
satire
36
1
4
3
2

2

4
2
2
satiate
2
satiable
36
1
4
3
2

2
ars
4
2
2
satin
2
satiety
36
1
4
3
2
n
2

4
2
2
satanic
2
satan
36
1
4
3
2

2
aiu
4
3
2
satyr
2
satellite
2
sat
36
1
4
3
2
at
2

4
2
2
Saskatoon
2
Saskatchewan
36
1
4
3
2

2

4
2
2
sashay
2
sash
36
1
4
3
2

2
hk
4
1
2
sassafras
36
1
4
3
2

2

4
2
2
sarsparilla
2
sarsaparilla
36
1
4
3
2

2

4
2
2
sardonic
2
sardine
36
1
4
3
2

2

4
2
2
sarcoma
2
sarcophagus
36
1
4
3
2
s
2

4
2
2
sarcastic
2
sarcasm
36
1
4
3
2

2
ao
4
0
36
1
4
3
2

2

4
6
2
Saratoga
2
Sarasota
2
Saran
2
Sarah
2
Saracen
2
Sara
36
1
4
3
2

2
acds
4
2
2
sari
2
Sargent
36
1
4
3
2

2

4
2
2
sappy
2
sapphire
36
1
4
3
2
en
2

4
2
2
sapient
2
sapiens
36
1
4
3
2

2
ip
4
4
2
sapsucker
2
saponify
2
sapling
2
sap
36
1
4
3
2

2

4
2
2
Santayana
2
Santa
36
1
4
3
2

2
a
4
2
2
Santo
2
Santiago
36
1
4
3
2

2

4
2
2
sanitary
2
sanitarium
36
1
4
3
2
a
2
r
4
1
2
sanitate
36
1
4
3
2

2
t
4
1
2
sanicle
36
1
4
3
2

2

4
2
2
sanguineous
2
sanguine
36
1
4
3
2
in
2
e
4
1
2
sanguinary
36
1
4
3
2

2
u
4
2
2
sangaree
2
sang
36
1
4
3
2

2

4
2
2
sandpiper
2
sandpile
36
1
4
3
2

2
i
4
1
2
sandpaper
36
1
4
3
2
r
2

4
2
2
Sanderson
2
sanderling
36
1
4
3
2

2

4
3
2
Sandburg
2
sandblast
2
sandbag
36
1
4
3
2
l
2

4
2
2
sandalwood
2
sandal
36
1
4
3
2

2
abepw
4
8
2
sandy
2
Sandusky
2
sandstone
2
Sandra
2
sandman
2
Sandia
2
sandhill
2
sand
36
1
4
3
2

2

4
4
2
sanctity
2
sanction
2
sanctimonious
2
sanctify
36
1
4
3
2

2
i
4
1
2
sanctuary
36
1
4
3
2

2

4
2
2
Sancho
2
Sanchez
36
1
4
3
2

2
ht
4
0
36
1
4
3
2
ori
2

4
2
2
sanatorium
2
sanatoria
36
1
4
3
2

2
t
4
1
2
Sana
36
1
4
3
2

2
acdgit
4
7
2
sans
2
sank
2
Sanhedrin
2
Sanford
2
sane
2
Sanborn
2
San
36
1
4
3
2
el
2

4
2
2
Samuelson
2
Samuel
36
1
4
3
2

2

4
2
2
Sampson
2
sample
36
1
4
3
2

2

4
2
2
samovar
2
Samoa
36
1
4
3
2

2
opu
4
6
2
Samson
2
Sammy
2
same
2
samba
2
samarium
2
Sam
36
1
4
3
2

2
gt
4
1
2
Salvador
36
1
4
3
2

2

4
2
2
Salvatore
2
salvation
36
1
4
3
2
e
2

4
2
2
salvageable
2
salvage
36
1
4
3
2

2
a
4
2
2
salvo
2
salve
36
1
4
3
2

2

4
2
2
salutation
2
salutary
36
1
4
3
2

2
a
4
1
2
salute
36
1
4
3
2

2
t
4
1
2
salubrious
36
1
4
3
2

2

4
4
2
salty
2
saltwater
2
saltbush
2
salt
36
1
4
3
2
n
2

4
2
2
saloonkeep
2
saloon
36
1
4
3
2

2
o
4
1
2
salon
36
1
4
3
2
on
2

4
3
2
salmonella
2
salmonberry
2
salmon
36
1
4
3
2

2

4
3
2
sally
2
sallow
2
Salle
36
1
4
3
2
a
2

4
3
2
salivate
2
salivary
2
saliva
36
1
4
3
2

2

4
2
2
Salish
2
Salisbury
36
1
4
3
2

2

4
2
2
saline
2
Salina
36
1
4
3
2

2
nsv
4
1
2
salient
36
1
4
3
2

2

4
2
2
salesmen
2
salesman
36
1
4
3
2

2
m
4
5
2
salesperson
2
saleslady
2
Salesian
2
salesgirl
2
sales
36
1
4
3
2

2
s
4
3
2
Salerno
2
Salem
2
sale
36
1
4
3
2

2

4
2
2
salami
2
salamander
36
1
4
3
2

2
m
4
4
2
salary
2
salad
2
salacious
2
Salaam
36
1
4
3
2

2
aeilmotuv
4
3
2
salsify
2
Salk
2
Sal
36
1
4
3
2

2

4
4
2
sailor
2
sailfish
2
sailboat
2
sail
36
1
4
3
2

2
l
4
3
2
saint
2
Saigon
2
said
36
1
4
3
2
ta
2

4
2
2
Sagittarius
2
sagittal
36
1
4
3
2

2
t
4
1
2
Saginaw
36
1
4
3
2

2

4
2
2
sagebrush
2
sage
36
1
4
3
2
i
2

4
2
2
sagacity
2
sagacious
36
1
4
3
2

2
c
4
1
2
saga
36
1
4
3
2

2
aei
4
4
2
saguaro
2
sago
2
sagging
2
sag
36
1
4
3
2

2

4
5
2
safely
2
safety
2
safekeeping
2
safeguard
2
safe
36
1
4
3
2

2
e
4
2
2
saffron
2
safari
36
1
4
3
2

2

4
2
2
sadist
2
sadism
36
1
4
3
2

2
s
4
1
2
Sadie
36
1
4
3
2
e
2

4
2
2
saddlebag
2
saddle
36
1
4
3
2

2
l
4
1
2
sadden
36
1
4
3
2

2
di
4
2
2
Sadler
2
sad
36
1
4
3
2
eg
2

4
2
2
sacrilegious
2
sacrilege
36
1
4
3
2
ic
2

4
2
2
sacrificial
2
sacrifice
36
1
4
3
2

2
fl
4
0
36
1
4
3
2

2
m
4
1
2
sacral
36
1
4
3
2
ent
2

4
2
2
Sacramento
2
sacrament
36
1
4
3
2

2
ai
4
2
2
sacrosanct
2
sacred
36
1
4
3
2

2

4
2
2
Sachs
2
sachem
36
1
4
3
2

2
hr
4
3
2
sack
2
saccharine
2
sac
36
1
4
3
2
n
2

4
2
2
Sabine
2
Sabina
36
1
4
3
2
at
2

4
2
2
sabbatical
2
sabbath
36
1
4
3
2

2
bi
4
3
2
sabra
2
sabotage
2
sable
36
1
4
3
2

2
bcdfgilmnprstuvwxy
4
4
2
Sao
2
sake
2
Sahara
2
sa
36
1
4
3
2

2
acehIklmnopqStuwy
4
7
2
Szilard
2
svelte
2
s's
2
Sri
2
sforzando
2
SD
2
s
36
1
4
3
2

2

4
2
2
Ryder
2
Rydberg
36
1
4
3
2

2
d
4
2
2
rye
2
Ryan
36
1
4
3
2

2

4
2
2
Rutledge
2
Rutland
36
1
4
3
2

2

4
2
2
Rutherford
2
ruthenium
36
1
4
3
2

2
e
4
2
2
ruthless
2
Ruth
36
1
4
3
2

2
hl
4
5
2
rutty
2
rutile
2
Rutgers
2
rutabaga
2
rut
36
1
4
3
2

2

4
5
2
rusty
2
rustproof
2
rustle
2
rustic
2
rust
36
1
4
3
2

2

4
2
2
russet
2
Russell
36
1
4
3
2

2
e
4
4
2
russula
2
Russo
2
Russia
2
Russ
36
1
4
3
2

2

4
2
2
Rushmore
2
rush
36
1
4
3
2

2
hst
4
2
2
rusk
2
ruse
36
1
4
3
2

2

4
2
2
rupture
2
rupee
36
1
4
3
2

2

4
2
2
runty
2
runt
36
1
4
3
2

2

4
3
2
running
2
Runnymede
2
runneth
36
1
4
3
2

2

4
2
2
Runge
2
rung
36
1
4
3
2

2

4
2
2
runaway
2
runabout
36
1
4
3
2

2
agnt
4
7
2
Runyon
2
runway
2
runoff
2
runic
2
rune
2
rundown
2
run
36
1
4
3
2

2

4
3
2
rumpus
2
rumple
2
rump
36
1
4
3
2

2

4
2
2
rummy
2
rummage
36
1
4
3
2

2
mp
4
6
2
ruminant
2
Rumford
2
rumen
2
rumble
2
Rumania
2
rum
36
1
4
3
2
n
2

4
3
2
ruinous
2
ruination
2
ruin
36
1
4
3
2

2

4
2
2
ruffle
2
ruffian
36
1
4
3
2

2
f
4
2
2
Rufus
2
rufous
36
1
4
3
2

2

4
2
2
rueful
2
rue
36
1
4
3
2

2

4
2
2
Rudyard
2
Rudy
36
1
4
3
2
l
2

4
2
2
Rudolph
2
Rudolf
36
1
4
3
2
ment
2

4
2
2
rudimentary
2
rudiment
36
1
4
3
2

2

4
2
2
ruddy
2
rudder
36
1
4
3
2

2
dioy
4
1
2
rude
36
1
4
3
2

2

4
3
2
Rubin
2
rubidium
2
rubicund
36
1
4
3
2

2

4
2
2
Ruben
2
Rube
36
1
4
3
2

2

4
3
2
rubble
2
rubbish
2
rubbery
36
1
4
3
2

2
bei
4
4
2
ruby
2
rubric
2
rubdown
2
rub
36
1
4
3
2

2
bdefimnpstl
4
4
2
rural
2
rug
2
ruckus
2
Ruanda
36
1
4
3
2
l
2

4
2
2
royalty
2
royal
36
1
4
3
2

2
a
4
2
2
Royce
2
Roy
36
1
4
3
2

2

4
2
2
Rowley
2
Rowland
36
1
4
3
2

2

4
2
2
Rowena
2
Rowe
36
1
4
3
2

2
el
4
3
2
rowdy
2
rowboat
2
row
36
1
4
3
2

2

4
3
2
routine
2
route
2
rout
36
1
4
3
2

2

4
3
2
roustabout
2
Rousseau
2
rouse
36
1
4
3
2

2

4
2
2
roundhouse
2
roundhead
36
1
4
3
2
d
2
h
4
6
2
roundworm
2
roundup
2
roundtable
2
roundoff
2
roundabout
2
round
36
1
4
3
2

2
h
4
1
2
rouge
36
1
4
3
2

2

4
7
2
roughly
2
roughshod
2
roughneck
2
roughish
2
roughen
2
roughcast
2
rough
36
1
4
3
2

2
gnst
4
1
2
roulette
36
1
4
3
2
nd
2

4
2
2
rotunda
2
rotund
36
1
4
3
2

2

4
3
2
rototill
2
rotor
2
rotogravure
36
1
4
3
2

2

4
2
2
Rothschild
2
Roth
36
1
4
3
2

2

4
2
2
rotary
2
Rotarian
36
1
4
3
2

2
r
4
1
2
rotate
36
1
4
3
2

2
ahou
4
4
2
rotten
2
rotenone
2
ROTC
2
rot
36
1
4
3
2

2

4
2
2
rostrum
2
roster
36
1
4
3
2
t
2

4
2
2
rosette
2
Rosetta
36
1
4
3
2

2

4
2
2
Rosenblum
2
Rosenberg
36
1
4
3
2

2
b
4
3
2
Rosenzweig
2
Rosenthal
2
Rosen
36
1
4
3
2
u
2

4
2
2
rosebush
2
rosebud
36
1
4
3
2

2
bnt
4
3
2
rosemary
2
Roseland
2
rose
36
1
4
3
2

2

4
3
2
rosary
2
Rosalie
2
Rosa
36
1
4
3
2

2
aet
4
2
2
rosy
2
Ross
36
1
4
3
2
velt
2

4
2
2
Rooseveltian
2
Roosevelt
36
1
4
3
2

2
e
4
1
2
roost
36
1
4
3
2

2

4
5
2
rooms
2
roomy
2
roommate
2
roomful
2
room
36
1
4
3
2

2

4
3
2
rooky
2
rookie
2
rook
36
1
4
3
2

2

4
2
2
rooftree
2
rooftop
36
1
4
3
2

2
t
4
1
2
roof
36
1
4
3
2

2
fkms
4
2
2
root
2
rood
36
1
4
3
2

2

4
4
2
Ronnie
2
rondo
2
Ronald
2
Ron
36
1
4
3
2

2

4
2
2
Romeo
2
Rome
36
1
4
3
2
n
2

4
5
2
romantic
2
Romano
2
Romania
2
romance
2
Roman
36
1
4
3
2

2
ae
4
2
2
Romulus
2
romp
36
1
4
3
2

2
n
4
1
2
rollick
36
1
4
3
2

2
i
4
2
2
rollback
2
roll
36
1
4
3
2

2
l
4
2
2
role
2
Roland
36
1
4
3
2

2

4
2
2
roister
2
roil
36
1
4
3
2

2

4
2
2
rogue
2
Roger
36
1
4
3
2

2

4
3
2
Roentgen
2
roebuck
2
roe
36
1
4
3
2

2

4
3
2
rodeo
2
rodent
2
rode
36
1
4
3
2

2
e
4
4
2
Rodriguez
2
Rodney
2
Rodgers
2
rod
36
1
4
3
2

2

4
2
2
rocket
2
Rockefeller
36
1
4
3
2

2

4
2
2
rockaway
2
rockabye
36
1
4
3
2

2
ae
4
7
2
rocky
2
Rockwell
2
Rockland
2
Rockies
2
Rockford
2
rockbound
2
rock
36
1
4
3
2

2
k
4
2
2
rococo
2
Rochester
36
1
4
3
2
t
2

4
2
2
robotics
2
robot
36
1
4
3
2
n
2

4
2
2
Robinson
2
robin
36
1
4
3
2
t
2

4
4
2
Robertson
2
Roberto
2
Roberta
2
Robert
36
1
4
3
2

2
r
4
1
2
robe
36
1
4
3
2

2

4
2
2
robbin
2
robbery
36
1
4
3
2

2
beio
4
2
2
robust
2
rob
36
1
4
3
2

2
d
4
4
2
roast
2
roar
2
roam
2
roach
36
1
4
3
2

2

4
2
2
roadster
2
roadside
36
1
4
3
2

2

4
2
2
roadblock
2
roadbed
36
1
4
3
2

2
bs
4
3
2
roadway
2
roadhouse
2
road
36
1
4
3
2

2
abcdegilmnostuwy
4
3
2
Roxbury
2
rove
2
rope
36
1
4
3
2

2

4
5
2
riverside
2
riverine
2
riverfront
2
riverbank
2
river
36
1
4
3
2

2
r
4
2
2
rivet
2
riven
36
1
4
3
2
l
2

4
2
2
rivalry
2
rival
36
1
4
3
2

2
ae
4
2
2
rivulet
2
Riviera
36
1
4
3
2

2

4
5
2
Ritz
2
ritual
2
Ritter
2
rite
2
Ritchie
36
1
4
3
2

2

4
2
2
risky
2
risk
36
1
4
3
2

2

4
3
2
rises
2
risen
2
rise
36
1
4
3
2

2
ek
4
1
2
risible
36
1
4
3
2

2

4
2
2
ripen
2
ripe
36
1
4
3
2

2
e
4
5
2
ripple
2
ripoff
2
Ripley
2
riparian
2
rip
36
1
4
3
2

2

4
2
2
riotous
2
riot
36
1
4
3
2

2
t
4
2
2
Riordan
2
Rio
36
1
4
3
2

2

4
3
2
ringside
2
ringlet
2
ring
36
1
4
3
2

2
g
4
3
2
rinse
2
rink
2
Rinehart
36
1
4
3
2

2

4
3
2
rimy
2
rime
2
rim
36
1
4
3
2

2

4
2
2
rilly
2
rill
36
1
4
3
2

2
l
4
1
2
Riley
36
1
4
3
2
t
2

4
5
2
rightward
2
rightmost
2
rightful
2
righteous
2
right
36
1
4
3
2

2

4
2
2
Riggs
2
rigging
36
1
4
3
2

2
gho
4
4
2
rigid
2
Rigel
2
Riga
2
rig
36
1
4
3
2

2

4
2
2
riflemen
2
rifleman
36
1
4
3
2
e
2
m
4
1
2
rifle
36
1
4
3
2

2
l
4
2
2
rift
2
riffle
36
1
4
3
2
mann
2

4
2
2
Riemannian
2
Riemann
36
1
4
3
2
cul
2

4
2
2
ridiculous
2
ridicule
36
1
4
3
2

2

4
2
2
ridgepole
2
ridge
36
1
4
3
2

2
e
4
1
2
Ridgway
36
1
4
3
2

2

4
3
2
riddle
2
ridden
2
riddance
36
1
4
3
2

2
dgi
4
2
2
ride
2
rid
36
1
4
3
2

2

4
2
2
ricochet
2
Rico
36
1
4
3
2
t
2

4
3
2
rickety
2
Rickettsia
2
rickets
36
1
4
3
2

2
e
4
2
2
rickshaw
2
rick
36
1
4
3
2
rd
2

4
2
2
Richardson
2
Richard
36
1
4
3
2

2
a
4
4
2
Richter
2
Richmond
2
Richfield
2
rich
36
1
4
3
2

2
hko
4
2
2
rice
2
Rica
36
1
4
3
2

2

4
2
2
ribosome
2
ribose
36
1
4
3
2

2
s
4
2
2
ribonucleic
2
riboflavin
36
1
4
3
2

2
o
4
3
2
ribbon
2
ribald
2
rib
36
1
4
3
2

2
bcdefglmnopstv
4
2
2
Riyadh
2
RI
36
1
4
3
2
hm
2

4
2
2
rhythmic
2
rhythm
36
1
4
3
2

2
t
4
1
2
rhyme
36
1
4
3
2

2

4
2
2
rhombic
2
rhombi
36
1
4
3
2
b
2
i
4
1
2
rhombus
36
1
4
3
2

2

4
3
2
rhodonite
2
rhodolite
2
rhododendron
36
1
4
3
2

2

4
2
2
Rhodesia
2
Rhodes
36
1
4
3
2

2
s
4
1
2
Rhode
36
1
4
3
2

2
eo
4
2
2
rhodium
2
Rhoda
36
1
4
3
2

2
dm
4
1
2
rho
36
1
4
3
2

2

4
2
2
rhinoceros
2
rhino
36
1
4
3
2

2

4
2
2
rhinestone
2
Rhine
36
1
4
3
2
n
2
eo
4
0
36
1
4
3
2
ti
2

4
2
2
rheumatism
2
rheumatic
36
1
4
3
2
m
2
a
4
1
2
rheum
36
1
4
3
2
oric
2

4
2
2
rhetorician
2
rhetoric
36
1
4
3
2

2

4
2
2
rheostat
2
rheology
36
1
4
3
2
i
2

4
2
2
rhenium
2
Rhenish
36
1
4
3
2

2
notu
4
2
2
rhesus
2
Rhea
36
1
4
3
2
psod
2

4
2
2
rhapsody
2
rhapsodic
36
1
4
3
2

2
aeioy
4
1
2
rhubarb
36
1
4
3
2

2

4
2
2
Reynolds
2
Reykjavik
36
1
4
3
2

2

4
2
2
revving
2
revved
36
1
4
3
2
tion
2

4
2
2
revolutionary
2
revolution
36
1
4
3
2

2
u
4
2
2
revolve
2
revolt
36
1
4
3
2

2
l
4
2
2
revoke
2
revocable
36
1
4
3
2

2

4
2
2
revive
2
revival
36
1
4
3
2
on
2

4
2
2
revisionary
2
revision
36
1
4
3
2

2

4
2
2
revisal
2
revisable
36
1
4
3
2

2
ai
4
1
2
revise
36
1
4
3
2

2
sve
4
1
2
revile
36
1
4
3
2

2

4
2
2
reversion
2
reversible
36
1
4
3
2

2
i
4
2
2
reverse
2
reversal
36
1
4
3
2

2

4
2
2
reverent
2
reverend
36
1
4
3
2

2
n
4
1
2
revere
36
1
4
3
2

2
es
4
5
2
revery
2
revert
2
reverie
2
reverberate
2
rever
36
1
4
3
2

2

4
2
2
revenue
2
revenge
36
1
4
3
2
t
2

4
2
2
revelatory
2
revelation
36
1
4
3
2

2
a
4
2
2
revelry
2
revel
36
1
4
3
2

2
lnr
4
2
2
revet
2
reveal
36
1
4
3
2

2
eiov
4
2
2
revulsion
2
rev
36
1
4
3
2

2

4
2
2
Reuben
2
Reub
36
1
4
3
2

2
b
4
1
2
Reuters
36
1
4
3
2
ss
2

4
2
2
retrogressive
2
retrogress
36
1
4
3
2
r
2
e
4
1
2
retrograde
36
1
4
3
2

2

4
2
2
retrofitting
2
retrofitted
36
1
4
3
2
it
2
t
4
1
2
retrofit
36
1
4
3
2

2
fg
4
4
2
retrovision
2
retrospect
2
retrorocket
2
retroactive
36
1
4
3
2
v
2

4
2
2
retrieve
2
retrieval
36
1
4
3
2

2
e
4
1
2
retribution
36
1
4
3
2

2
io
4
1
2
retract
36
1
4
3
2
e
2

4
2
2
retiree
2
retire
36
1
4
3
2

2

4
2
2
retinal
2
retina
36
1
4
3
2

2
a
4
1
2
retinue
36
1
4
3
2

2
u
4
1
2
reticent
36
1
4
3
2
l
2

4
2
2
reticulum
2
reticulate
36
1
4
3
2

2
cnr
4
0
36
1
4
3
2
nti
2

4
2
2
retentive
2
retention
36
1
4
3
2

2

4
2
2
retardation
2
retardant
36
1
4
3
2
d
2
a
4
1
2
retard
36
1
4
3
2
iat
2

4
2
2
retaliatory
2
retaliate
36
1
4
3
2

2

4
2
2
retain
2
retail
36
1
4
3
2

2
ilr
4
0
36
1
4
3
2

2
aeiru
4
3
2
retort
2
retch
2
ret
36
1
4
3
2

2

4
2
2
resurrect
2
resurgent
36
1
4
3
2

2

4
2
2
resumption
2
resume
36
1
4
3
2
t
2

4
3
2
results
2
resultant
2
result
36
1
4
3
2

2
lmr
4
1
2
resuscitate
36
1
4
3
2
in
2

4
2
2
restraint
2
restrain
36
1
4
3
2

2
a
4
2
2
restroom
2
restrict
36
1
4
3
2
rati
2

4
2
2
restorative
2
restoration
36
1
4
3
2

2

4
2
2
restive
2
restitution
36
1
4
3
2
ura
2

4
2
2
restaurateur
2
restaurant
36
1
4
3
2

2
aior
4
2
2
restful
2
rest
36
1
4
3
2

2

4
2
2
responsive
2
responsible
36
1
4
3
2

2
i
4
1
2
response
36
1
4
3
2

2

4
2
2
respondent
2
respond
36
1
4
3
2
n
2
ds
4
0
36
1
4
3
2

2
a
4
1
2
respire
36
1
4
3
2
t
2
o
4
1
2
respiration
36
1
4
3
2
r
2

4
2
2
respiratory
2
respirator
36
1
4
3
2

2
r
4
1
2
respite
36
1
4
3
2
ct
2

4
2
2
respectful
2
respect
36
1
4
3
2

2
eio
4
1
2
resplendent
36
1
4
3
2

2

4
2
2
resort
2
resorcinol
36
1
4
3
2
a
2

4
2
2
resonate
2
resonant
36
1
4
3
2

2
u
4
1
2
resolve
36
1
4
3
2
t
2

4
2
2
resolution
2
resolute
36
1
4
3
2

2
lnru
4
0
36
1
4
3
2

2

4
2
2
resistive
2
resistible
36
1
4
3
2
t
2
i
4
3
2
resistor
2
resistant
2
resist
36
1
4
3
2

2

4
2
2
resiny
2
resin
36
1
4
3
2
n
2

4
2
2
resignation
2
resign
36
1
4
3
2

2
eu
4
0
36
1
4
3
2

2

4
2
2
residuary
2
residual
36
1
4
3
2

2
a
4
2
2
residuum
2
residue
36
1
4
3
2

2
n
4
1
2
reside
36
1
4
3
2
t
2

4
2
2
residential
2
resident
36
1
4
3
2

2
dgns
4
1
2
resilient
36
1
4
3
2

2

4
3
2
reservoir
2
reserve
2
reservation
36
1
4
3
2

2
v
4
1
2
reserpine
36
1
4
3
2
t
2

4
2
2
resentful
2
resent
36
1
4
3
2
bl
2

4
3
2
resembling
2
resemble
2
resemblant
36
1
4
3
2

2
mnr
4
1
2
research
36
1
4
3
2

2

4
2
2
rescue
2
rescind
36
1
4
3
2

2
ceioptu
4
0
36
1
4
3
2
it
2

4
2
2
requisition
2
requisite
36
1
4
3
2

2
sr
4
1
2
requited
36
1
4
3
2
u
2
i
4
1
2
request
36
1
4
3
2

2

4
2
2
repute
2
reputation
36
1
4
3
2
si
2

4
2
2
repulsive
2
repulsion
36
1
4
3
2
lic
2

4
2
2
republican
2
republic
36
1
4
3
2

2
blt
4
2
2
repugnant
2
repudiate
36
1
4
3
2
il
2

4
2
2
reptilian
2
reptile
36
1
4
3
2

2

4
2
2
reprise
2
reprisal
36
1
4
3
2

2
s
4
2
2
reprimand
2
reprieve
36
1
4
3
2

2
s
4
1
2
reprehensible
36
1
4
3
2
i
2

4
2
2
repressive
2
repression
36
1
4
3
2

2
se
4
0
36
1
4
3
2

2
ei
4
1
2
reproach
36
1
4
3
2
t
2

4
5
2
reports
2
reporting
2
reported
2
reportorial
2
report
36
1
4
3
2

2
r
4
1
2
repository
36
1
4
3
2
ca
2

4
2
2
replicate
2
replica
36
1
4
3
2

2

4
2
2
replete
2
replenish
36
1
4
3
2

2
ei
4
1
2
replaceable
36
1
4
3
2

2

4
2
2
repetitious
2
repetition
36
1
4
3
2
iti
2
o
4
1
2
repetitive
36
1
4
3
2
to
2

4
2
2
repertory
2
repertoire
36
1
4
3
2
t
2

4
2
2
repentant
2
repent
36
1
4
3
2

2

4
2
2
repellent
2
repelled
36
1
4
3
2

2
e
4
1
2
repelling
36
1
4
3
2

2
l
4
1
2
repel
36
1
4
3
2

2
t
4
1
2
repeal
36
1
4
3
2

2

4
2
2
repeater
2
repeat
36
1
4
3
2

2
alnrt
4
0
36
1
4
3
2

2

4
2
2
repartee
2
reparation
36
1
4
3
2
rm
2

4
2
2
repairmen
2
repairman
36
1
4
3
2

2
ir
4
0
36
1
4
3
2

2
aelortu
4
1
2
rep
36
1
4
3
2

2

4
2
2
rental
2
rent
36
1
4
3
2

2

4
4
2
renown
2
renovate
2
renounce
2
Renoir
36
1
4
3
2

2

4
3
2
renewal
2
renegotiable
2
Rene
36
1
4
3
2

2

4
2
2
rendezvous
2
render
36
1
4
3
2

2
e
4
2
2
rendition
2
rend
36
1
4
3
2

2

4
4
2
Renault
2
renal
2
renaissance
2
Rena
36
1
4
3
2

2
adeot
4
2
2
renunciate
2
Rensselaer
36
1
4
3
2

2

4
2
2
Remus
2
remunerate
36
1
4
3
2
se
2

4
2
2
remorseful
2
remorse
36
1
4
3
2

2
rv
4
2
2
remote
2
remonstrate
36
1
4
3
2

2

4
3
2
remitting
2
remitted
2
remittance
36
1
4
3
2

2
t
4
1
2
remit
36
1
4
3
2
s
2

4
2
2
remission
2
remiss
36
1
4
3
2

2
i
4
1
2
Remington
36
1
4
3
2
sce
2

4
2
2
reminiscent
2
reminisce
36
1
4
3
2

2
nst
4
0
36
1
4
3
2
b
2

4
2
2
remembrance
2
remember
36
1
4
3
2

2
i
4
1
2
remedy
36
1
4
3
2
a
2

4
2
2
remedial
2
remediable
36
1
4
3
2

2
dm
4
0
36
1
4
3
2

2
ni
4
1
2
remark
36
1
4
3
2

2

4
2
2
remand
2
reman
36
1
4
3
2

2
aeiou
4
2
2
remnant
2
Rembrandt
36
1
4
3
2
io
2

4
3
2
religious
2
religiosity
2
religion
36
1
4
3
2

2

4
2
2
relieve
2
relief
36
1
4
3
2

2

4
2
2
relict
2
relic
36
1
4
3
2

2
ceg
4
4
2
relish
2
reliquary
2
relinquish
2
reliant
36
1
4
3
2

2
a
4
1
2
relevant
36
1
4
3
2

2
t
4
1
2
relaxation
36
1
4
3
2

2
aei
4
1
2
reluctant
36
1
4
3
2
i
2

4
2
2
rejoinder
2
rejoice
36
1
4
3
2

2
o
4
1
2
reject
36
1
4
3
2

2

4
5
2
reinstate
2
Reinhold
2
reinforce
2
reindeer
2
rein
36
1
4
3
2
burs
2

4
2
2
reimburse
2
reimbursable
36
1
4
3
2

2
mn
4
4
2
Reilly
2
reign
2
Reid
2
Reich
36
1
4
3
2
ars
2

4
2
2
rehearse
2
rehearsal
36
1
4
3
2

2
e
4
1
2
rehabilitate
36
1
4
3
2

2
a
4
1
2
Regulus
36
1
4
3
2

2
t
4
1
2
regular
36
1
4
3
2

2

4
2
2
regulatory
2
regulate
36
1
4
3
2

2
l
4
1
2
regurgitate
36
1
4
3
2

2

4
3
2
regretting
2
regretted
2
regrettable
36
1
4
3
2

2
t
4
2
2
regretful
2
regret
36
1
4
3
2
s
2
i
4
1
2
regress
36
1
4
3
2

2

4
2
2
regressive
2
regression
36
1
4
3
2
e
2
st
4
0
36
1
4
3
2

2

4
4
2
registration
2
registrar
2
registrant
2
registrable
36
1
4
3
2
r
2
a
4
1
2
registry
36
1
4
3
2

2
t
4
1
2
Regis
36
1
4
3
2
a
2

4
2
2
Reginald
2
Regina
36
1
4
3
2
e
2
n
4
1
2
regime
36
1
4
3
2

2

4
2
2
regimentation
2
regiment
36
1
4
3
2

2
t
4
1
2
regimen
36
1
4
3
2

2
mnso
4
0
36
1
4
3
2

2
l
4
2
2
regatta
2
regard
36
1
4
3
2

2

4
3
2
regalia
2
regale
2
regal
36
1
4
3
2

2
airu
4
1
2
regent
36
1
4
3
2

2

4
2
2
refute
2
refutation
36
1
4
3
2
e
2

4
2
2
refugee
2
refuge
36
1
4
3
2

2
gt
4
1
2
refusal
36
1
4
3
2

2
c
4
1
2
refrain
36
1
4
3
2
t
2
o
4
1
2
refract
36
1
4
3
2

2

4
2
2
refractory
2
refractometer
36
1
4
3
2

2
a
4
1
2
refrigerate
36
1
4
3
2
t
2

4
3
2
reflector
2
reflectance
2
reflect
36
1
4
3
2
e
2
c
4
1
2
reflexive
36
1
4
3
2

2
r
4
1
2
refectory
36
1
4
3
2

2

4
3
2
referring
2
referred
2
referral
36
1
4
3
2

2

4
2
2
referential
2
referent
36
1
4
3
2

2

4
2
2
referendum
2
referenda
36
1
4
3
2

2
dt
4
1
2
reference
36
1
4
3
2

2

4
2
2
refereeing
2
referee
36
1
4
3
2

2
en
4
0
36
1
4
3
2

2
er
4
1
2
refer
36
1
4
3
2

2
elru
4
1
2
reformatory
36
1
4
3
2
e
2

4
2
2
Reeves
2
reeve
36
1
4
3
2

2

4
3
2
reedy
2
reedbuck
2
reed
36
1
4
3
2

2
dv
4
4
2
Reese
2
reel
2
reek
2
reef
36
1
4
3
2

2
e
4
1
2
reducible
36
1
4
3
2

2
c
4
1
2
redundant
36
1
4
3
2

2

4
2
2
Redstone
2
redstart
36
1
4
3
2

2
t
4
1
2
redshank
36
1
4
3
2

2
mf
4
0
36
1
4
3
2

2

4
2
2
reddish
2
redden
36
1
4
3
2

2

4
2
2
redbud
2
redbird
36
1
4
3
2
ct
2

4
2
2
redactor
2
redact
36
1
4
3
2

2
abdesur
4
9
2
redwood
2
redtop
2
redpoll
2
redound
2
redneck
2
Redmond
2
redhead
2
redcoat
2
red
36
1
4
3
2

2

4
2
2
recuse
2
recusant
36
1
4
3
2

2

4
2
2
recurring
2
recurred
36
1
4
3
2

2
r
4
2
2
recursion
2
recur
36
1
4
3
2

2
rs
4
2
2
recuperate
2
recumbent
36
1
4
3
2
r
2

4
2
2
rectory
2
rector
36
1
4
3
2

2

4
2
2
rectify
2
rectifier
36
1
4
3
2

2
f
4
2
2
rectitude
2
rectilinear
36
1
4
3
2
ng
2

4
2
2
rectangular
2
rectangle
36
1
4
3
2

2
aio
4
0
36
1
4
3
2

2

4
2
2
recruit
2
recriminate
36
1
4
3
2

2

4
3
2
reconnaissance
2
recondite
2
reconcile
36
1
4
3
2

2
nr
4
2
2
recovery
2
recompense
36
1
4
3
2

2

4
3
2
recluse
2
recline
2
reclamation
36
1
4
3
2

2

4
2
2
reckon
2
reck
36
1
4
3
2
a
2

4
2
2
recitative
2
recital
36
1
4
3
2

2

4
2
2
reciprocate
2
reciprocal
36
1
4
3
2
oc
2
a
4
1
2
reciprocity
36
1
4
3
2

2
r
4
2
2
recipient
2
recipe
36
1
4
3
2

2
pt
4
1
2
Recife
36
1
4
3
2

2

4
2
2
recessive
2
recession
36
1
4
3
2
s
2
i
4
1
2
recess
36
1
4
3
2

2

4
2
2
receptive
2
reception
36
1
4
3
2
t
2
i
4
2
2
receptor
2
receptacle
36
1
4
3
2

2
v
4
1
2
receipt
36
1
4
3
2

2
ipsn
4
0
36
1
4
3
2

2
eiklortu
4
3
2
recycle
2
recherche
2
recalcitrant
36
1
4
3
2

2

4
3
2
rebutting
2
rebutted
2
rebuttal
36
1
4
3
2

2
t
4
1
2
rebut
36
1
4
3
2

2
t
4
1
2
rebuke
36
1
4
3
2

2

4
2
2
rebellious
2
rebellion
36
1
4
3
2

2
o
4
1
2
rebelling
36
1
4
3
2

2
i
4
1
2
rebelled
36
1
4
3
2

2
l
4
1
2
rebel
36
1
4
3
2

2
l
4
1
2
Rebecca
36
1
4
3
2

2
eu
4
1
2
reb
36
1
4
3
2

2

4
2
2
realty
2
realtor
36
1
4
3
2

2
t
4
4
2
really
2
realm
2
realisable
2
real
36
1
4
3
2

2

4
3
2
ready
2
readout
2
read
36
1
4
3
2

2
th
4
0
36
1
4
3
2

2

4
2
2
reactionary
2
reactant
36
1
4
3
2

2
cdls
4
5
2
reave
2
rear
2
reap
2
ream
2
Reagan
36
1
4
3
2

2
abcdefghijlmnpqstuvy
4
4
2
Rex
2
reward
2
reredos
2
re
36
1
4
3
2
r
2

4
2
2
razorback
2
razor
36
1
4
3
2

2
o
4
1
2
raze
36
1
4
3
2

2

4
4
2
Raytheon
2
Raymond
2
Rayleigh
2
ray
36
1
4
3
2

2

4
4
2
Rawlinson
2
rawhide
2
rawboned
2
raw
36
1
4
3
2

2

4
2
2
ravish
2
ravine
36
1
4
3
2

2

4
2
2
ravenous
2
raven
36
1
4
3
2

2
n
4
2
2
ravel
2
rave
36
1
4
3
2

2
ei
4
1
2
ravage
36
1
4
3
2

2

4
2
2
Raul
2
raucous
36
1
4
3
2
e
2

4
2
2
rattlesnake
2
rattle
36
1
4
3
2

2
l
4
1
2
rattail
36
1
4
3
2

2

4
3
2
rationale
2
ratiocinate
2
ratio
36
1
4
3
2

2
o
4
1
2
ratify
36
1
4
3
2

2

4
3
2
rates
2
rater
2
rate
36
1
4
3
2

2
eit
4
3
2
rather
2
rata
2
rat
36
1
4
3
2

2

4
2
2
Rastus
2
raster
36
1
4
3
2

2

4
2
2
raspberry
2
rasp
36
1
4
3
2

2
pt
4
4
2
Rasmussen
2
rash
2
rascal
2
rasa
36
1
4
3
2

2

4
2
2
rarefy
2
rare
36
1
4
3
2

2
e
4
1
2
Raritan
36
1
4
3
2

2

4
2
2
rapture
2
rapt
36
1
4
3
2

2

4
2
2
rapprochement
2
rapport
36
1
4
3
2

2

4
2
2
rapier
2
rapid
36
1
4
3
2

2
ipt
4
4
2
Raphael
2
rape
2
rapacious
2
rap
36
1
4
3
2

2

4
2
2
ransom
2
ransack
36
1
4
3
2
n
2

4
2
2
Rankine
2
Rankin
36
1
4
3
2

2
i
4
2
2
rankle
2
rank
36
1
4
3
2

2

4
2
2
rangeland
2
range
36
1
4
3
2

2
e
4
3
2
rangy
2
Rangoon
2
rang
36
1
4
3
2

2

4
2
2
random
2
Randolph
36
1
4
3
2

2
o
4
3
2
randy
2
Randall
2
Rand
36
1
4
3
2

2

4
2
2
rancho
2
ranch
36
1
4
3
2

2
h
4
2
2
rancorous
2
rancid
36
1
4
3
2

2
cdgks
4
3
2
rant
2
Ranier
2
ran
36
1
4
3
2

2

4
3
2
rampart
2
rampant
2
rampage
36
1
4
3
2

2
a
4
1
2
ramp
36
1
4
3
2

2

4
2
2
Raman
2
Ramada
36
1
4
3
2

2
ap
4
6
2
Ramsey
2
ramrod
2
Ramo
2
ramify
2
ramble
2
ram
36
1
4
3
2

2

4
4
2
Ralston
2
Ralph
2
rally
2
Raleigh
36
1
4
3
2

2

4
2
2
rakish
2
rake
36
1
4
3
2

2

4
2
2
rajah
2
raj
36
1
4
3
2

2
ei
4
0
36
1
4
3
2

2

4
7
2
rainy
2
rainstorm
2
rainfall
2
raindrop
2
raincoat
2
rainbow
2
rain
36
1
4
3
2

2

4
6
2
railway
2
railroad
2
raillery
2
railhead
2
railbird
2
rail
36
1
4
3
2

2
lns
4
1
2
raid
36
1
4
3
2

2

4
5
2
ragweed
2
ragout
2
ragging
2
rage
2
rag
36
1
4
3
2

2

4
2
2
raffish
2
raffia
36
1
4
3
2

2
i
4
1
2
Rafferty
36
1
4
3
2

2
f
4
2
2
raft
2
Rafael
36
1
4
3
2

2

4
2
2
radius
2
radium
36
1
4
3
2
emi
2

4
2
2
radiochemistry
2
radiochemical
36
1
4
3
2

2
h
4
1
2
radiocarbon
36
1
4
3
2

2

4
2
2
radioastronomy
2
radioactive
36
1
4
3
2

2
ac
4
7
2
radiotherapy
2
radiosonde
2
radiophysics
2
radiometer
2
radiology
2
radiography
2
radio
36
1
4
3
2

2

4
2
2
radices
2
radical
36
1
4
3
2

2
n
4
2
2
radiate
2
radial
36
1
4
3
2

2

4
2
2
radiant
2
radian
36
1
4
3
2

2
acou
4
3
2
radix
2
radish
2
radii
36
1
4
3
2

2
i
4
3
2
radon
2
Radcliffe
2
radar
36
1
4
3
2
t
2

4
3
2
rackety
2
racketeer
2
racket
36
1
4
3
2

2
e
4
1
2
rack
36
1
4
3
2

2

4
2
2
Rachmaninoff
2
Rachel
36
1
4
3
2

2

4
3
2
raceway
2
racetrack
2
race
36
1
4
3
2

2
ehk
4
3
2
racy
2
racial
2
raccoon
36
1
4
3
2

2
bi
4
1
2
rabat
36
1
4
3
2

2

4
3
2
Rabin
2
rabies
2
rabid
36
1
4
3
2

2

4
2
2
rabbit
2
rabbi
36
1
4
3
2

2
i
4
2
2
rabble
2
rabbet
36
1
4
3
2

2
bcdfgijklmnprstuvwyz
4
2
2
Raoul
2
Rae
36
1
4
3
2

2
aehiouy
4
9
2
Rwanda
2
RSVP
2
r's
2
RPM
2
RNA
2
R&D
2
Rd
2
RCA
2
r
36
1
4
3
2

2

4
2
2
quotation
2
quota
36
1
4
3
2

2
ai
4
1
2
quote
36
1
4
3
2

2
t
4
4
2
quorum
2
quonset
2
quod
2
quo
36
1
4
3
2

2

4
2
2
quizzical
2
quizzes
36
1
4
3
2

2
z
4
1
2
quiz
36
1
4
3
2
ot
2

4
2
2
quixotic
2
Quixote
36
1
4
3
2

2

4
4
2
quitting
2
Quito
2
quite
2
quit
36
1
4
3
2

2

4
2
2
quirky
2
quirk
36
1
4
3
2

2
k
4
2
2
quirt
2
Quirinal
36
1
4
3
2

2

4
2
2
quipping
2
quip
36
1
4
3
2

2

4
2
2
quintillion
2
quintic
36
1
4
3
2

2
i
4
3
2
quintus
2
quintet
2
quint
36
1
4
3
2

2
t
4
3
2
Quinn
2
quinine
2
quince
36
1
4
3
2

2

4
2
2
quillwort
2
quill
36
1
4
3
2

2
l
4
1
2
quilt
36
1
4
3
2

2

4
2
2
quietus
2
quiet
36
1
4
3
2

2
t
4
1
2
quiescent
36
1
4
3
2

2

4
3
2
quickstep
2
quicksilver
2
quicksand
36
1
4
3
2
k
2
sl
4
3
2
quickie
2
quicken
2
quick
36
1
4
3
2

2
celnprtxz
4
3
2
quiver
2
quid
2
quibble
36
1
4
3
2
on
2

4
3
2
questions
2
questionnaire
2
question
36
1
4
3
2
t
2
i
4
1
2
quest
36
1
4
3
2

2

4
2
2
query
2
querulous
36
1
4
3
2

2

4
2
2
queer
2
queen
36
1
4
3
2

2
ers
4
7
2
Quezon
2
queue
2
quetzal
2
quench
2
quell
2
Quebec
2
queasy
36
1
4
3
2

2
cdiklnrst
4
6
2
quay
2
quaver
2
quahog
2
quagmire
2
quaff
2
qua
36
1
4
3
2

2

4
2
2
quatrain
2
quaternary
36
1
4
3
2

2

4
2
2
quasiparticle
2
quasi
36
1
4
3
2

2
i
4
2
2
quash
2
quasar
36
1
4
3
2

2

4
2
2
quartzite
2
quartz
36
1
4
3
2

2

4
2
2
quartile
2
quartic
36
1
4
3
2

2

4
2
2
quartermaster
2
quarterback
36
1
4
3
2

2
r
4
1
2
quartet
36
1
4
3
2

2
eiz
4
1
2
quart
36
1
4
3
2

2

4
2
2
quarrymen
2
quarryman
36
1
4
3
2

2
m
4
1
2
quarry
36
1
4
3
2
l
2

4
2
2
quarrelsome
2
quarrel
36
1
4
3
2

2
ey
4
0
36
1
4
3
2

2
rt
4
2
2
quark
2
quarantine
36
1
4
3
2

2

4
3
2
quantities
2
quantity
2
quantitative
36
1
4
3
2

2
t
4
3
2
quantile
2
quantify
2
Quantico
36
1
4
3
2

2
i
4
2
2
quantum
2
quanta
36
1
4
3
2

2
t
4
1
2
quandary
36
1
4
3
2

2
t
4
1
2
qualify
36
1
4
3
2

2

4
2
2
quality
2
qualitative
36
1
4
3
2

2
i
4
1
2
qualm
36
1
4
3
2
e
2

4
2
2
Quakeress
2
quake
36
1
4
3
2

2

4
2
2
quaint
2
quail
36
1
4
3
2
p
2

4
2
2
quadrupole
2
quadruple
36
1
4
3
2

2

4
2
2
quadrillion
2
quadrille
36
1
4
3
2

2
l
4
1
2
quadrilateral
36
1
4
3
2

2

4
2
2
quadriceps
2
quadric
36
1
4
3
2

2
cl
4
2
2
quadrivium
2
quadripartite
36
1
4
3
2

2
nt
4
0
36
1
4
3
2

2

4
2
2
quadrature
2
quadratic
36
1
4
3
2

2
g
4
1
2
quadrant
36
1
4
3
2

2

4
2
2
quadrangular
2
quadrangle
36
1
4
3
2

2
aiu
4
1
2
quadrennial
36
1
4
3
2

2
r
4
1
2
quad
36
1
4
3
2
k
2

4
2
2
quackery
2
quack
36
1
4
3
2

2
aeio
4
0
36
1
4
3
2

2
u
4
4
2
q's
2
QED
2
Qatar
2
q
36
1
4
3
2
gor
2

4
2
2
Pythagorean
2
Pythagoras
36
1
4
3
2
h
2
a
4
1
2
python
36
1
4
3
2
en
2

4
2
2
pyroxenite
2
pyroxene
36
1
4
3
2
ys
2

4
2
2
pyrolysis
2
pyrolyse
36
1
4
3
2

2
lx
4
4
2
pyrotechnic
2
pyrophosphate
2
pyrometer
2
pyroelectric
36
1
4
3
2

2

4
3
2
pyrite
2
pyrimidine
2
pyridine
36
1
4
3
2

2

4
2
2
Pyrex
2
pyre
36
1
4
3
2
id
2

4
2
2
pyramidal
2
pyramid
36
1
4
3
2

2
m
4
1
2
pyracanth
36
1
4
3
2

2
aeio
4
1
2
Pyrrhic
36
1
4
3
2
m
2

4
2
2
pygmy
2
Pygmalion
36
1
4
3
2

2
grt
4
3
2
Pyongyang
2
Pyle
2
pyknotic
36
1
4
3
2

2

4
2
2
putty
2
putt
36
1
4
3
2

2
t
4
4
2
puts
2
Putnam
2
putative
2
put
36
1
4
3
2
y
2

4
2
2
pussycat
2
pussy
36
1
4
3
2

2

4
4
2
pushpin
2
pushout
2
pushbutton
2
push
36
1
4
3
2

2
hs
4
3
2
Pusey
2
Pusan
2
pus
36
1
4
3
2
y
2

4
2
2
purveyor
2
purvey
36
1
4
3
2

2
e
4
1
2
purview
36
1
4
3
2

2

4
3
2
pursuit
2
pursue
2
pursuant
36
1
4
3
2

2
u
4
2
2
purslane
2
purse
36
1
4
3
2

2

4
2
2
purposeful
2
purpose
36
1
4
3
2
s
2
e
4
1
2
purposive
36
1
4
3
2

2
o
4
1
2
purple
36
1
4
3
2

2

4
2
2
purloin
2
purl
36
1
4
3
2
an
2

4
2
2
puritanic
2
Puritan
36
1
4
3
2

2

4
2
2
purine
2
Purina
36
1
4
3
2

2
nt
4
1
2
purify
36
1
4
3
2
t
2
i
4
1
2
purgatory
36
1
4
3
2

2

4
2
2
purgative
2
purgation
36
1
4
3
2

2
a
4
1
2
purge
36
1
4
3
2

2
h
4
1
2
Purcell
36
1
4
3
2
as
2

4
2
2
purchase
2
purchasable
36
1
4
3
2

2
cgilpsv
4
3
2
purr
2
pure
2
Purdue
36
1
4
3
2

2

4
2
2
puppyish
2
puppy
36
1
4
3
2
t
2

4
2
2
puppeteer
2
puppet
36
1
4
3
2

2
ey
4
0
36
1
4
3
2

2

4
2
2
pupate
2
pupal
36
1
4
3
2

2
ap
4
2
2
pupil
2
pup
36
1
4
3
2

2

4
2
2
punky
2
punk
36
1
4
3
2

2

4
3
2
punitive
2
punish
2
Punic
36
1
4
3
2
it
2

4
2
2
punditry
2
pundit
36
1
4
3
2

2

4
2
2
punctuate
2
punctual
36
1
4
3
2
u
2
a
4
1
2
puncture
36
1
4
3
2

2
t
4
1
2
punch
36
1
4
3
2

2
cdik
4
5
2
puny
2
punt
2
punster
2
pungent
2
pun
36
1
4
3
2
in
2

4
2
2
pumpkinseed
2
pumpkin
36
1
4
3
2

2
k
4
1
2
pump
36
1
4
3
2

2
p
4
3
2
pummel
2
pumice
2
puma
36
1
4
3
2

2

4
2
2
pulsate
2
pulsar
36
1
4
3
2

2
a
4
1
2
pulse
36
1
4
3
2

2

4
2
2
pulpit
2
pulp
36
1
4
3
2

2

4
5
2
pullover
2
Pullman
2
pulley
2
pullback
2
pull
36
1
4
3
2

2
lps
4
4
2
pulverable
2
pulmonary
2
Pulitzer
2
Pulaski
36
1
4
3
2

2

4
2
2
Pugh
2
pug
36
1
4
3
2
f
2

4
5
2
puffy
2
puffin
2
puffery
2
puffball
2
puff
36
1
4
3
2

2

4
2
2
Puerto
2
puerile
36
1
4
3
2

2
r
4
1
2
pueblo
36
1
4
3
2

2

4
2
2
puddly
2
puddle
36
1
4
3
2
ng
2

4
2
2
puddingstone
2
pudding
36
1
4
3
2
d
2
il
4
0
36
1
4
3
2

2

4
2
2
puckish
2
puck
36
1
4
3
2

2
k
4
1
2
Puccini
36
1
4
3
2

2
el
4
1
2
pub
36
1
4
3
2

2

4
2
2
publication
2
public
36
1
4
3
2
i
2
c
4
1
2
publish
36
1
4
3
2

2

4
2
2
pubescent
2
puberty
36
1
4
3
2

2
bcdefglmnprst
4
3
2
puzzle
2
puke
2
puissant
36
1
4
3
2
lem
2

4
2
2
Ptolemy
2
Ptolemaic
36
1
4
3
2

2

4
2
2
ptarmigan
2
PTA
36
1
4
3
2

2
Ao
4
1
2
pterodactyl
36
1
4
3
2
h
2
io
4
2
2
psyche
2
psych
36
1
4
3
2
erap
2

4
3
2
psychotherapy
2
psychotherapist
2
psychotherapeutic
36
1
4
3
2

2
h
4
1
2
psychotic
36
1
4
3
2

2

4
3
2
psychosomatic
2
psychosis
2
psychoses
36
1
4
3
2
ysi
2

4
2
2
psychophysiology
2
psychophysic
36
1
4
3
2
th
2

4
2
2
psychopathic
2
psychopath
36
1
4
3
2

2
ah
4
1
2
psychopomp
36
1
4
3
2

2

4
2
2
psychoanalyst
2
psychoanalysis
36
1
4
3
2
aly
2
s
4
1
2
psychoanalytic
36
1
4
3
2

2
n
4
1
2
psychoacoustic
36
1
4
3
2

2
apst
4
4
2
psychometry
2
psychology
2
psychobiology
2
psycho
36
1
4
3
2
tr
2
i
4
1
2
psychiatry
36
1
4
3
2

2

4
2
2
psychiatrist
2
psychiatric
36
1
4
3
2

2
a
4
1
2
psychic
36
1
4
3
2

2
c
4
1
2
psyllium
36
1
4
3
2
l
2

4
2
2
psalter
2
psalm
36
1
4
3
2

2
ay
4
2
2
psi
2
pseudo
36
1
4
3
2
ent
2

4
2
2
prudential
2
prudent
36
1
4
3
2

2
d
4
3
2
Prussia
2
prurient
2
prune
36
1
4
3
2
m
2
a
4
1
2
proximity
36
1
4
3
2

2

4
2
2
proximate
2
proximal
36
1
4
3
2

2
i
4
1
2
proxy
36
1
4
3
2

2

4
3
2
prowl
2
prowess
2
prow
36
1
4
3
2
at
2
i
4
1
2
provocateur
36
1
4
3
2

2

4
2
2
provocative
2
provocation
36
1
4
3
2

2
c
4
2
2
provost
2
provoke
36
1
4
3
2

2

4
2
2
proviso
2
provision
36
1
4
3
2
c
2

4
2
2
provincial
2
province
36
1
4
3
2

2
e
4
1
2
providing
36
1
4
3
2
t
2

4
2
2
providential
2
provident
36
1
4
3
2

2
dns
4
0
36
1
4
3
2

2
nr
4
1
2
prove
36
1
4
3
2
b
2

4
2
2
proverbial
2
proverb
36
1
4
3
2

2

4
2
2
provenance
2
proven
36
1
4
3
2

2
eio
4
0
36
1
4
3
2

2

4
2
2
Proust
2
proud
36
1
4
3
2
i
2

4
2
2
protrusive
2
protrusion
36
1
4
3
2

2
s
4
1
2
protrude
36
1
4
3
2

2
u
4
1
2
protract
36
1
4
3
2
oa
2

4
2
2
protozoan
2
Protozoa
36
1
4
3
2
yp
2

4
2
2
prototypic
2
prototype
36
1
4
3
2
asm
2

4
2
2
protoplasmic
2
protoplasm
36
1
4
3
2

2
l
4
1
2
Protophyta
36
1
4
3
2

2
ptz
4
2
2
proton
2
protocol
36
1
4
3
2

2

4
2
2
protestation
2
protestant
36
1
4
3
2
t
2
a
4
1
2
protest
36
1
4
3
2
ly
2

4
2
2
proteolytic
2
proteolysis
36
1
4
3
2
r
2

4
2
2
protectorate
2
protector
36
1
4
3
2
t
2
o
4
1
2
protect
36
1
4
3
2

2

4
2
2
protease
2
protean
36
1
4
3
2

2
acos
4
2
2
protein
2
protege
36
1
4
3
2

2

4
2
2
protagonist
2
protactinium
36
1
4
3
2

2
aeor
4
2
2
protuberant
2
prothonotary
36
1
4
3
2
tut
2

4
2
2
prostitution
2
prostitute
36
1
4
3
2

2
i
4
3
2
prostrate
2
prosthetic
2
prostate
36
1
4
3
2

2

4
2
2
prosperous
2
prosper
36
1
4
3
2
t
2

4
3
2
prospectus
2
prospector
2
prospect
36
1
4
3
2
e
2
cr
4
0
36
1
4
3
2

2

4
2
2
prosody
2
prosodic
36
1
4
3
2

2
d
4
1
2
prosopopoeia
36
1
4
3
2
ut
2

4
3
2
prosecutor
2
prosecution
2
prosecute
36
1
4
3
2

2
c
4
2
2
Proserpine
2
prose
36
1
4
3
2
i
2

4
2
2
proscription
2
proscribe
36
1
4
3
2

2
r
4
1
2
proscenium
36
1
4
3
2

2
ceopt
4
1
2
prosaic
36
1
4
3
2

2

4
2
2
prorogue
2
prorate
36
1
4
3
2
l
2

4
2
2
propylene
2
propyl
36
1
4
3
2
cepti
2

4
2
2
proprioceptive
2
proprioception
36
1
4
3
2
t
2

4
3
2
propriety
2
proprietor
2
proprietary
36
1
4
3
2
i
2
eo
4
0
36
1
4
3
2

2
ei
4
2
2
proposal
2
propos
36
1
4
3
2
tion
2

4
2
2
proportionate
2
proportion
36
1
4
3
2

2
rs
4
1
2
proponent
36
1
4
3
2
i
2

4
2
2
propitious
2
propitiate
36
1
4
3
2

2
t
4
1
2
propionate
36
1
4
3
2

2

4
2
2
prophetic
2
prophet
36
1
4
3
2
e
2
t
4
2
2
prophesy
2
prophecy
36
1
4
3
2

2
t
4
1
2
proper
36
1
4
3
2

2
l
4
1
2
propel
36
1
4
3
2

2

4
2
2
propeller
2
propelled
36
1
4
3
2

2
e
4
2
2
propelling
2
propellant
36
1
4
3
2

2
lr
4
1
2
propensity
36
1
4
3
2
a
2
n
4
1
2
propagate
36
1
4
3
2
d
2

4
2
2
propagandist
2
propaganda
36
1
4
3
2

2
g
4
1
2
propane
36
1
4
3
2

2
aehiory
4
2
2
propulsion
2
prop
36
1
4
3
2
f
2
r
4
1
2
proof
36
1
4
3
2
e
2

4
2
2
pronounceable
2
pronounce
36
1
4
3
2
un
2
c
4
1
2
pronoun
36
1
4
3
2

2
o
4
4
2
pronunciation
2
pronto
2
prong
2
prone
36
1
4
3
2
t
2

4
2
2
promptitude
2
prompt
36
1
4
3
2
t
2

4
2
2
promotion
2
promote
36
1
4
3
2
u
2

4
2
2
promiscuous
2
promiscuity
36
1
4
3
2

2
c
4
1
2
promise
36
1
4
3
2

2
s
4
1
2
prominent
36
1
4
3
2

2

4
2
2
Prometheus
2
Promethean
36
1
4
3
2
h
2
e
4
1
2
promethium
36
1
4
3
2

2
t
4
1
2
promenade
36
1
4
3
2

2
eiop
4
2
2
promulgate
2
prom
36
1
4
3
2
g
2

4
2
2
prolongate
2
prolong
36
1
4
3
2

2
n
4
1
2
prologue
36
1
4
3
2

2

4
2
2
prolific
2
proliferate
36
1
4
3
2

2
f
4
2
2
prolix
2
proline
36
1
4
3
2

2
io
4
3
2
prolusion
2
proletariat
2
prolate
36
1
4
3
2

2

4
2
2
Prokofieff
2
prokaryote
36
1
4
3
2
ect
2

4
3
2
projector
2
projectile
2
project
36
1
4
3
2

2

4
2
2
prohibitive
2
prohibition
36
1
4
3
2
ibit
2
i
4
2
2
prohibitory
2
prohibit
36
1
4
3
2

2

4
2
2
progressive
2
progression
36
1
4
3
2
ss
2
i
4
1
2
progress
36
1
4
3
2
m
2
m
4
2
2
programs
2
program
36
1
4
3
2

2
r
4
1
2
programmed
36
1
4
3
2

2
ae
4
0
36
1
4
3
2
os
2

4
2
2
prognosticate
2
prognosis
36
1
4
3
2
n
2

4
2
2
progeny
2
progenitor
36
1
4
3
2

2
enr
4
0
36
1
4
3
2

2

4
2
2
profusion
2
profuse
36
1
4
3
2

2
s
4
1
2
profundity
36
1
4
3
2

2
t
4
2
2
profile
2
proficient
36
1
4
3
2
r
2

4
2
2
professorial
2
professor
36
1
4
3
2
ss
2
o
4
2
2
profession
2
profess
36
1
4
3
2

2
eiu
4
5
2
profound
2
profligate
2
proffer
2
profane
2
Prof
36
1
4
3
2
c
2
eit
4
0
36
1
4
3
2
g
2

4
3
2
prodigy
2
prodigious
2
prodigal
36
1
4
3
2

2
iu
4
1
2
prod
36
1
4
3
2

2

4
2
2
proctor
2
Procter
36
1
4
3
2
ste
2

4
2
2
Procrustes
2
procrustean
36
1
4
3
2

2
u
4
2
2
procreate
2
procrastinate
36
1
4
3
2

2

4
2
2
proclamation
2
proclaim
36
1
4
3
2

2
a
4
1
2
proclivity
36
1
4
3
2
s
2
i
4
3
2
processed
2
processor
2
process
36
1
4
3
2
ur
2
e
4
1
2
procedural
36
1
4
3
2

2
ds
4
1
2
proceed
36
1
4
3
2

2
elrt
4
3
2
Procyon
2
procure
2
procaine
36
1
4
3
2
em
2

4
3
2
problems
2
problematic
2
problem
36
1
4
3
2

2
b
4
1
2
probate
36
1
4
3
2

2
al
4
1
2
probe
36
1
4
3
2

2
bcdfghjklmnoprstuvwx
4
1
2
pro
36
1
4
3
2
e
2

4
2
2
prizewinning
2
prize
36
1
4
3
2

2

4
2
2
private
2
privacy
36
1
4
3
2

2
a
4
3
2
privy
2
privilege
2
privet
36
1
4
3
2

2

4
2
2
prismatic
2
prism
36
1
4
3
2

2
m
4
4
2
pristine
2
prissy
2
prison
2
Priscilla
36
1
4
3
2
r
2

4
3
2
priory
2
priori
2
prior
36
1
4
3
2

2

4
3
2
printout
2
printmake
2
print
36
1
4
3
2

2
ei
4
0
36
1
4
3
2
p
2

4
3
2
principle
2
Principia
2
principal
36
1
4
3
2

2

4
3
2
Princeton
2
princess
2
prince
36
1
4
3
2

2
ct
4
0
36
1
4
3
2

2

4
3
2
primed
2
primeval
2
prime
36
1
4
3
2

2

4
5
2
primate
2
primary
2
primal
2
primacy
2
prima
36
1
4
3
2

2
ae
4
4
2
primrose
2
primp
2
primitive
2
prim
36
1
4
3
2

2

4
2
2
priggish
2
prig
36
1
4
3
2
st
2

4
2
2
Priestley
2
priest
36
1
4
3
2

2

4
2
2
prickle
2
prick
36
1
4
3
2

2
ke
4
0
36
1
4
3
2

2
cegmnosvz
4
3
2
Pritchard
2
pride
2
Priam
36
1
4
3
2
nti
2

4
2
2
preventive
2
prevention
36
1
4
3
2

2

4
2
2
prevalent
2
prevail
36
1
4
3
2

2
ae
4
1
2
previous
36
1
4
3
2

2

4
3
2
pretty
2
Pretoria
2
pretentious
36
1
4
3
2
ti
2

4
2
2
presumptive
2
presumption
36
1
4
3
2
m
2
p
4
2
2
presuming
2
presume
36
1
4
3
2

2

4
2
2
Preston
2
presto
36
1
4
3
2

2
g
4
1
2
prestidigitate
36
1
4
3
2

2

4
2
2
prestigious
2
prestige
36
1
4
3
2

2
io
4
0
36
1
4
3
2

2

4
2
2
pressure
2
press
36
1
4
3
2
t
2

4
2
2
presidential
2
president
36
1
4
3
2
de
2
n
4
1
2
preside
36
1
4
3
2

2
n
4
1
2
preservation
36
1
4
3
2
ipti
2

4
2
2
prescriptive
2
prescription
36
1
4
3
2

2
r
4
1
2
Prescott
36
1
4
3
2

2
ceistu
4
1
2
Presbyterian
36
1
4
3
2
dera
2

4
2
2
preponderate
2
preponderant
36
1
4
3
2

2
n
4
1
2
preposterous
36
1
4
3
2
t
2
i
4
1
2
preparatory
36
1
4
3
2

2

4
2
2
preparative
2
preparation
36
1
4
3
2
r
2
a
4
1
2
prepare
36
1
4
3
2

2
ao
4
1
2
prep
36
1
4
3
2

2
e
4
2
2
premium
2
premise
36
1
4
3
2
r
2

4
2
2
premiere
2
premier
36
1
4
3
2

2
i
4
1
2
premonition
36
1
4
3
2

2

4
2
2
prelude
2
preliminary
36
1
4
3
2

2

4
2
2
preferring
2
preferred
36
1
4
3
2
n
2

4
2
2
preferential
2
preference
36
1
4
3
2

2
er
4
1
2
prefer
36
1
4
3
2
t
2

4
2
2
prefecture
2
prefect
36
1
4
3
2

2
cr
4
0
36
1
4
3
2

2

4
2
2
prefatory
2
prefab
36
1
4
3
2

2
ae
4
0
36
1
4
3
2
pt
2
i
4
2
2
preemptor
2
preempt
36
1
4
3
2

2

4
2
2
preemptive
2
preemption
36
1
4
3
2

2
m
4
1
2
preen
36
1
4
3
2

2
at
4
0
36
1
4
3
2

2

4
2
2
predictor
2
predict
36
1
4
3
2

2

4
2
2
predicate
2
predicament
36
1
4
3
2

2
c
4
1
2
predilect
36
1
4
3
2

2
i
4
2
2
predecessor
2
predatory
36
1
4
3
2
ci
2

4
2
2
precocity
2
precocious
36
1
4
3
2

2

4
2
2
precision
2
precise
36
1
4
3
2

2

4
2
2
precipitate
2
precipitable
36
1
4
3
2

2
a
4
1
2
precipitous
36
1
4
3
2
i
2
t
4
1
2
precipice
36
1
4
3
2

2
ps
4
2
2
precious
2
precinct
36
1
4
3
2

2

4
3
2
precess
2
precept
2
precedent
36
1
4
3
2

2

4
2
2
precarious
2
Precambrian
36
1
4
3
2

2
aeio
4
1
2
preclude
36
1
4
3
2
ch
2

4
2
2
preachy
2
preach
36
1
4
3
2

2
acdeflmpstv
4
6
2
prey
2
prexy
2
prerogative
2
Prentice
2
prejudice
2
pregnant
36
1
4
3
2

2

4
2
2
prayerful
2
pray
36
1
4
3
2

2

4
2
2
prank
2
prance
36
1
4
3
2
e
2

4
2
2
praiseworthy
2
praise
36
1
4
3
2

2
s
4
1
2
prairie
36
1
4
3
2
ati
2
s
4
1
2
pragmatic
36
1
4
3
2

2

4
2
2
pragmatist
2
pragmatism
36
1
4
3
2

2
m
4
1
2
Prague
36
1
4
3
2
ti
2
c
4
2
2
practitioner
2
practise
36
1
4
3
2

2
a
4
1
2
practice
36
1
4
3
2

2

4
2
2
practical
2
practicable
36
1
4
3
2

2
cginy
4
6
2
Pravda
2
Pratt
2
praseodymium
2
pram
2
praecox
2
Prado
36
1
4
3
2

2
aeiou
4
2
2
pry
2
PR
36
1
4
3
2

2

4
3
2
powerhouse
2
powerful
2
power
36
1
4
3
2

2
r
4
1
2
Powell
36
1
4
3
2
er
2

4
3
2
powdery
2
powderpuff
2
powder
36
1
4
3
2

2
de
4
1
2
pow
36
1
4
3
2

2

4
2
2
pound
2
pounce
36
1
4
3
2
t
2

4
2
2
poultry
2
poultice
36
1
4
3
2

2
ln
4
4
2
pout
2
pour
2
Poughkeepsie
2
pouch
36
1
4
3
2

2

4
2
2
Potts
2
pottery
36
1
4
3
2

2

4
2
2
potentiometer
2
potential
36
1
4
3
2
nt
2
i
4
2
2
potentate
2
potent
36
1
4
3
2

2

4
2
2
potboil
2
potbelly
36
1
4
3
2
o
2

4
2
2
potatoes
2
potato
36
1
4
3
2

2

4
2
2
potassium
2
potash
36
1
4
3
2

2
st
4
1
2
potable
36
1
4
3
2

2
abet
4
6
2
potpourri
2
Potomac
2
potlatch
2
potion
2
pothole
2
pot
36
1
4
3
2

2

4
2
2
posture
2
postulate
36
1
4
3
2
ocess
2

4
2
2
postprocessor
2
postprocess
36
1
4
3
2

2

4
2
2
postposition
2
postpone
36
1
4
3
2

2
or
4
0
36
1
4
3
2

2

4
2
2
postorder
2
postoperative
36
1
4
3
2

2

4
3
2
postmaster
2
postmark
2
postman
36
1
4
3
2

2
a
4
3
2
postmultiply
2
postmortem
2
postmen
36
1
4
3
2
r
2

4
2
2
posteriori
2
posterior
36
1
4
3
2
ri
2
o
4
1
2
posterity
36
1
4
3
2

2

4
2
2
postcondition
2
postcard
36
1
4
3
2

2

4
2
2
postal
2
postage
36
1
4
3
2

2
acemopu
4
8
2
postwar
2
postscript
2
postlude
2
posthumous
2
postgraduate
2
postfix
2
postdoctoral
2
post
36
1
4
3
2

2
ms
4
1
2
posse
36
1
4
3
2

2

4
2
2
possessive
2
possession
36
1
4
3
2
s
2
i
4
2
2
possessor
2
possess
36
1
4
3
2

2

4
2
2
possemen
2
posseman
36
1
4
3
2

2
ei
4
1
2
possum
36
1
4
3
2

2

4
2
2
positive
2
position
36
1
4
3
2
t
2
i
4
2
2
positron
2
posit
36
1
4
3
2

2

4
4
2
posey
2
poseur
2
Poseidon
2
pose
36
1
4
3
2

2
eist
4
4
2
posy
2
Posner
2
posh
2
posable
36
1
4
3
2

2

4
2
2
Portuguese
2
Portugal
36
1
4
3
2

2
g
4
1
2
portulaca
36
1
4
3
2

2

4
2
2
portrayal
2
portray
36
1
4
3
2
t
2

4
2
2
portraiture
2
portrait
36
1
4
3
2
a
2
iy
4
0
36
1
4
3
2

2

4
2
2
portico
2
Portia
36
1
4
3
2

2

4
2
2
portentous
2
portent
36
1
4
3
2

2
t
4
1
2
portend
36
1
4
3
2

2
n
4
2
2
porterhouse
2
Porte
36
1
4
3
2

2

4
3
2
portable
2
portal
2
portage
36
1
4
3
2

2
aeiru
4
6
2
Portsmouth
2
Porto
2
portmanteau
2
portland
2
portfolio
2
port
36
1
4
3
2

2

4
2
2
porpoise
2
porphyry
36
1
4
3
2

2

4
2
2
porous
2
porosity
36
1
4
3
2
ograph
2

4
2
2
pornography
2
pornographer
36
1
4
3
2

2

4
4
2
porcupine
2
porcine
2
porch
2
porcelain
36
1
4
3
2

2
cnopt
4
3
2
porridge
2
pork
2
pore
36
1
4
3
2
s
2

4
2
2
populist
2
populism
36
1
4
3
2

2
t
4
2
2
popular
2
populace
36
1
4
3
2
l
2
ai
4
1
2
populous
36
1
4
3
2

2

4
2
2
poplin
2
poplar
36
1
4
3
2

2
lu
4
4
2
poppy
2
popish
2
pope
2
pop
36
1
4
3
2

2

4
2
2
Poole
2
pool
36
1
4
3
2

2
l
4
5
2
poor
2
poop
2
pooh
2
poodle
2
pooch
36
1
4
3
2
c
2

4
2
2
pontificate
2
pontific
36
1
4
3
2

2
i
4
1
2
pontiff
36
1
4
3
2

2
f
4
1
2
Pontiac
36
1
4
3
2

2
i
4
1
2
pont
36
1
4
3
2
r
2

4
2
2
ponderous
2
ponder
36
1
4
3
2

2
e
4
1
2
pond
36
1
4
3
2

2
h
4
1
2
Ponce
36
1
4
3
2

2

4
2
2
poncho
2
Ponchartrain
36
1
4
3
2

2
cdt
4
2
2
pony
2
pong
36
1
4
3
2

2

4
3
2
pompous
2
pomposity
2
pompon
36
1
4
3
2

2

4
2
2
pompey
2
Pompeii
36
1
4
3
2

2

4
2
2
pompano
2
pompadour
36
1
4
3
2

2
aeo
4
1
2
pomp
36
1
4
3
2

2
p
4
3
2
Pomona
2
pomegranate
2
pomade
36
1
4
3
2

2

4
3
2
polytypy
2
polytope
2
polytechnic
36
1
4
3
2

2

4
2
2
polyphony
2
Polyphemus
36
1
4
3
2

2
h
4
1
2
polyploidy
36
1
4
3
2
rph
2

4
2
2
polymorphic
2
polymorph
36
1
4
3
2
r
2

4
3
2
polymeric
2
polymerase
2
polymer
36
1
4
3
2

2
eo
4
0
36
1
4
3
2
dr
2
a
4
1
2
polyhedron
36
1
4
3
2

2

4
2
2
polyhedral
2
polyhedra
36
1
4
3
2

2
e
4
1
2
Polyhymnia
36
1
4
3
2
n
2

4
2
2
polygonal
2
polygon
36
1
4
3
2

2
o
4
1
2
polygynous
36
1
4
3
2

2
ghmpt
4
2
2
polysaccharide
2
polynomial
36
1
4
3
2

2

4
2
2
polonium
2
polonaise
36
1
4
3
2

2
n
4
2
2
polopony
2
polo
36
1
4
3
2

2

4
3
2
pollution
2
pollute
2
pollutant
36
1
4
3
2

2
t
4
1
2
Pollux
36
1
4
3
2

2

4
2
2
polloi
2
pollock
36
1
4
3
2

2
ou
4
4
2
pollinate
2
pollen
2
Pollard
2
poll
36
1
4
3
2

2

4
2
2
polkadot
2
polka
36
1
4
3
2

2
a
4
1
2
Polk
36
1
4
3
2
c
2

4
6
2
politics
2
political
2
politico
2
politicking
2
politician
2
politic
36
1
4
3
2

2
i
4
3
2
polity
2
polite
2
Politburo
36
1
4
3
2

2

4
2
2
polish
2
polis
36
1
4
3
2

2

4
2
2
poliomyelitis
2
polio
36
1
4
3
2

2
e
4
2
2
policies
2
policy
36
1
4
3
2

2
m
4
1
2
police
36
1
4
3
2

2

4
2
2
policemen
2
policeman
36
1
4
3
2

2
cost
4
0
36
1
4
3
2

2

4
3
2
polemic
2
polecat
2
pole
36
1
4
3
2
ra
2
p
4
1
2
polarogram
36
1
4
3
2
h
2

4
2
2
polarography
2
polarograph
36
1
4
3
2

2
g
4
2
2
polaron
2
Polaroid
36
1
4
3
2

2

4
2
2
polariscope
2
Polaris
36
1
4
3
2

2
s
4
2
2
polariton
2
polarimeter
36
1
4
3
2

2
io
4
1
2
polar
36
1
4
3
2

2
r
4
1
2
Poland
36
1
4
3
2

2
aeikloy
4
1
2
pol
36
1
4
3
2
e
2

4
2
2
pokerface
2
poke
36
1
4
3
2
n
2

4
2
2
poisonous
2
poison
36
1
4
3
2

2
o
4
2
2
Poisson
2
poise
36
1
4
3
2

2

4
3
2
points
2
pointwise
2
point
36
1
4
3
2

2
t
4
2
2
poinsettia
2
Poincare
36
1
4
3
2

2
ns
4
2
2
poignant
2
poi
36
1
4
3
2

2

4
2
2
pogrom
2
pogo
36
1
4
3
2

2

4
3
2
poetry
2
poetic
2
poet
36
1
4
3
2

2
t
4
3
2
poesy
2
poem
2
Poe
36
1
4
3
2

2

4
2
2
podium
2
podia
36
1
4
3
2

2
i
4
2
2
podge
2
pod
36
1
4
3
2
et
2

4
3
2
pocketful
2
pocketbook
2
pocket
36
1
4
3
2

2
k
4
1
2
Pocono
36
1
4
3
2

2
cdegiklmnoprstuw
4
5
2
Poynting
2
poverty
2
POBox
2
poach
2
Po
36
1
4
3
2

2

4
2
2
pneumonia
2
pneumococcus
36
1
4
3
2
eum
2
o
4
1
2
pneumatic
36
1
4
3
2

2

4
4
2
plywood
2
plyscore
2
Plymouth
2
ply
36
1
4
3
2

2

4
2
2
plutonium
2
pluton
36
1
4
3
2

2
n
4
1
2
Pluto
36
1
4
3
2

2
o
4
1
2
Plutarch
36
1
4
3
2

2

4
2
2
plushy
2
plush
36
1
4
3
2

2
h
4
1
2
plus
36
1
4
3
2

2

4
3
2
plunk
2
plunge
2
plunder
36
1
4
3
2

2

4
2
2
plumbate
2
plumbago
36
1
4
3
2

2
a
4
1
2
plumb
36
1
4
3
2

2
b
4
5
2
plump
2
plummet
2
plume
2
plumage
2
plum
36
1
4
3
2

2

4
2
2
plugging
2
pluggable
36
1
4
3
2

2
g
4
2
2
plugboard
2
plug
36
1
4
3
2
k
2

4
2
2
plucky
2
pluck
36
1
4
3
2

2
cgmnst
4
2
2
plural
2
pluperfect
36
1
4
3
2

2

4
3
2
plowshare
2
plowman
2
plow
36
1
4
3
2

2
w
4
4
2
plover
2
plot
2
plop
2
plod
36
1
4
3
2

2

4
2
2
pliant
2
pliable
36
1
4
3
2

2
a
4
3
2
Pliocene
2
Pliny
2
plight
36
1
4
3
2
ra
2

4
2
2
pleural
2
pleura
36
1
4
3
2

2

4
2
2
plenty
2
plentiful
36
1
4
3
2

2

4
2
2
plenitude
2
plenipotentiary
36
1
4
3
2

2
it
4
2
2
plenum
2
plenary
36
1
4
3
2

2

4
2
2
Pleistocene
2
Pleiades
36
1
4
3
2

2

4
2
2
plebian
2
plebeian
36
1
4
3
2

2
s
4
3
2
pleat
2
plead
2
plea
36
1
4
3
2

2
e
4
2
2
pleasure
2
pleasant
36
1
4
3
2

2
abinu
4
3
2
Plexiglas
2
plethora
2
pledge
36
1
4
3
2
ri
2

4
2
2
playwriting
2
playwright
36
1
4
3
2

2

4
2
2
playboy
2
playback
36
1
4
3
2

2
bwe
4
11
2
playing
2
plays
2
playtime
2
playroom
2
playoff
2
playmate
2
playhouse
2
playground
2
playful
2
playa
2
play
36
1
4
3
2

2

4
2
2
Platonist
2
Platonism
36
1
4
3
2
i
2
s
4
1
2
platonic
36
1
4
3
2

2
n
4
2
2
platoon
2
Plato
36
1
4
3
2
ud
2

4
2
2
platitudinous
2
platitude
36
1
4
3
2

2
t
4
1
2
platinum
36
1
4
3
2

2

4
4
2
platen
2
platelet
2
plateau
2
plate
36
1
4
3
2

2
eio
4
4
2
platypus
2
Platte
2
platform
2
plat
36
1
4
3
2

2

4
2
2
plastisol
2
plastic
36
1
4
3
2

2
i
4
2
2
plastron
2
plaster
36
1
4
3
2

2

4
3
2
plasmon
2
plasma
2
plasm
36
1
4
3
2

2
mt
4
0
36
1
4
3
2

2

4
2
2
plantation
2
plantain
36
1
4
3
2

2
a
4
2
2
plants
2
plant
36
1
4
3
2
con
2

4
2
2
planoconvex
2
planoconcave
36
1
4
3
2

2

4
2
2
plankton
2
plank
36
1
4
3
2

2

4
2
2
planetarium
2
planetaria
36
1
4
3
2
r
2
i
4
1
2
planetary
36
1
4
3
2

2
a
4
3
2
planetoid
2
planetesimal
2
planet
36
1
4
3
2

2
t
4
2
2
planeload
2
plane
36
1
4
3
2

2
ekotn
4
4
2
plans
2
Planck
2
planar
2
plan
36
1
4
3
2
i
2

4
2
2
plaintive
2
plaintiff
36
1
4
3
2

2
t
4
2
2
Plainfield
2
plain
36
1
4
3
2

2
n
4
1
2
plaid
36
1
4
3
2
e
2

4
2
2
plaguey
2
plague
36
1
4
3
2

2
a
4
1
2
plagioclase
36
1
4
3
2
ris
2

4
2
2
plagiarist
2
plagiarism
36
1
4
3
2

2
iu
4
0
36
1
4
3
2

2
ae
4
1
2
placid
36
1
4
3
2
ta
2

4
2
2
placental
2
placenta
36
1
4
3
2

2
n
4
5
2
places
2
placeholder
2
placebo
2
placeable
2
place
36
1
4
3
2
te
2

4
2
2
placater
2
placate
36
1
4
3
2

2
cginsty
4
3
2
plaza
2
plausible
2
plaque
36
1
4
3
2

2
aeiouy
4
1
2
Pl
36
1
4
3
2
z
2

4
2
2
pizzicato
2
pizza
36
1
4
3
2

2

4
2
2
pixy
2
pixel
36
1
4
3
2
ot
2

4
2
2
pivotal
2
pivot
36
1
4
3
2

2

4
3
2
Pittston
2
Pittsfield
2
Pittsburgh
36
1
4
3
2

2
s
4
1
2
Pitt
36
1
4
3
2

2

4
2
2
pitiful
2
pitiable
36
1
4
3
2

2

4
2
2
pithy
2
pith
36
1
4
3
2
h
2

4
4
2
pitchstone
2
pitchfork
2
pitchblende
2
pitch
36
1
4
3
2

2
chit
4
7
2
pity
2
pituitary
2
Pitney
2
pitman
2
pitfall
2
piteous
2
pit
36
1
4
3
2

2

4
2
2
pistole
2
pistol
36
1
4
3
2

2
l
4
1
2
piston
36
1
4
3
2

2
o
4
1
2
pistachio
36
1
4
3
2

2

4
2
2
Pisces
2
Piscataway
36
1
4
3
2

2
ct
4
1
2
piss
36
1
4
3
2

2

4
2
2
pirouette
2
pirogue
36
1
4
3
2

2

4
3
2
pirate
2
Piraeus
2
piracy
36
1
4
3
2

2
ao
4
0
36
1
4
3
2
u
2

4
2
2
pique
2
piquant
36
1
4
3
2

2

4
3
2
pipette
2
pipeline
2
pipe
36
1
4
3
2

2
e
4
2
2
pipsissewa
2
pip
36
1
4
3
2

2

4
2
2
pioneer
2
pion
36
1
4
3
2

2
n
4
2
2
pious
2
Piotr
36
1
4
3
2

2

4
3
2
pinto
2
pintail
2
pint
36
1
4
3
2

2

4
2
2
Pinsky
2
pinscher
36
1
4
3
2
a
2

4
2
2
pinnate
2
pinnacle
36
1
4
3
2

2

4
2
2
pinkish
2
pinkie
36
1
4
3
2

2
i
4
1
2
pink
36
1
4
3
2

2

4
2
2
pinhole
2
pinhead
36
1
4
3
2

2

4
3
2
Pinehurst
2
pineapple
2
pine
36
1
4
3
2

2

4
2
2
pincushion
2
pinch
36
1
4
3
2

2
cehknst
4
9
2
pinxter
2
pinwheel
2
pinpoint
2
pinochle
2
pinion
2
ping
2
pinball
2
pinafore
2
pin
36
1
4
3
2
p
2

4
2
2
pimple
2
pimp
36
1
4
3
2

2

4
2
2
pillow
2
pillory
36
1
4
3
2

2

4
2
2
pillar
2
pillage
36
1
4
3
2

2
ao
4
2
2
Pillsbury
2
pill
36
1
4
3
2
rim
2

4
2
2
pilgrimage
2
pilgrim
36
1
4
3
2
er
2

4
2
2
pilferage
2
pilfer
36
1
4
3
2

2

4
2
2
pilewort
2
pile
36
1
4
3
2

2
efgl
4
2
2
pilot
2
Pilate
36
1
4
3
2
ent
2

4
2
2
pigmentation
2
pigment
36
1
4
3
2

2

4
2
2
piggish
2
pigging
36
1
4
3
2

2
i
4
1
2
piggy
36
1
4
3
2
on
2

4
4
2
pigeonhole
2
pigeonfoot
2
pigeonberry
2
pigeon
36
1
4
3
2

2
egm
4
5
2
pigtail
2
pigskin
2
pigroot
2
pigpen
2
pig
36
1
4
3
2

2

4
2
2
piety
2
pietism
36
1
4
3
2

2

4
4
2
Pierson
2
Pierre
2
pierce
2
pier
36
1
4
3
2
e
2

4
3
2
piecewise
2
piecemeal
2
piece
36
1
4
3
2

2
crt
4
3
2
piezoelectric
2
Piedmont
2
pie
36
1
4
3
2

2

4
2
2
pidgin
2
piddle
36
1
4
3
2
re
2

4
2
2
picturesque
2
picture
36
1
4
3
2

2
u
4
1
2
pictorial
36
1
4
3
2

2

4
3
2
picosecond
2
picojoule
2
picofarad
36
1
4
3
2

2

4
2
2
picnicker
2
picnicked
36
1
4
3
2

2
e
4
1
2
picnicking
36
1
4
3
2
ic
2
k
4
1
2
picnic
36
1
4
3
2

2

4
2
2
Pickett
2
picket
36
1
4
3
2

2

4
2
2
Pickering
2
pickerel
36
1
4
3
2

2
rt
4
0
36
1
4
3
2

2
e
4
8
2
picky
2
pickup
2
pickoff
2
Pickman
2
pickle
2
Pickford
2
pickaxe
2
pick
36
1
4
3
2

2

4
2
2
piccolo
2
Piccadilly
36
1
4
3
2

2

4
3
2
picayune
2
Picasso
2
pica
36
1
4
3
2

2
acknot
4
0
36
1
4
3
2

2
i
4
1
2
piano
36
1
4
3
2
s
2

4
2
2
pianist
2
pianissimo
36
1
4
3
2

2
n
4
1
2
piazza
36
1
4
3
2

2
acdeglmnopqrstvxz
4
3
2
Pius
2
pike
2
pi
36
1
4
3
2
herap
2

4
2
2
physiotherapy
2
physiotherapist
36
1
4
3
2

2
t
4
3
2
physiology
2
physiognomy
2
physiochemical
36
1
4
3
2

2

4
2
2
physician
2
physic
36
1
4
3
2
i
2
co
4
2
2
physique
2
Physik
36
1
4
3
2

2

4
3
2
phylogeny
2
Phyllis
2
phyla
36
1
4
3
2

2
ls
4
2
2
phytoplankton
2
phycomycetes
36
1
4
3
2
ase
2

4
3
2
phraseology
2
phrasemake
2
phrase
36
1
4
3
2
y
2

4
2
2
photolytic
2
photolysis
36
1
4
3
2

2

4
2
2
photography
2
photogenic
36
1
4
3
2
o
2
gl
4
3
2
photon
2
photometry
2
photo
36
1
4
3
2
sce
2

4
2
2
phosphorescent
2
phosphoresce
36
1
4
3
2
r
2
e
4
4
2
phosphorylate
2
phosphorus
2
phosphoric
2
phosphor
36
1
4
3
2

2

4
2
2
phosphine
2
phosphide
36
1
4
3
2
h
2
io
4
1
2
phosphate
36
1
4
3
2

2
p
4
1
2
phosgene
36
1
4
3
2

2

4
3
2
phonon
2
phonology
2
phonograph
36
1
4
3
2

2

4
2
2
phonemic
2
phoneme
36
1
4
3
2

2
m
4
2
2
phonetic
2
phone
36
1
4
3
2

2
eo
4
3
2
phony
2
phonic
2
phon
36
1
4
3
2
i
2

4
2
2
phoenix
2
Phoenicia
36
1
4
3
2

2
n
4
1
2
phoebe
36
1
4
3
2

2
enst
4
1
2
phobic
36
1
4
3
2
o
2

4
2
2
phlox
2
phloem
36
1
4
3
2
oph
2

4
3
2
philosophy
2
philosophic
2
philosoph
36
1
4
3
2

2
s
4
2
2
philology
2
philodendron
36
1
4
3
2

2

4
2
2
Philippine
2
Philip
36
1
4
3
2

2
p
4
1
2
Philistine
36
1
4
3
2
throp
2

4
3
2
philanthropy
2
philanthropic
2
philanthrope
36
1
4
3
2

2
n
4
1
2
Philadelphia
36
1
4
3
2

2
aio
4
3
2
Phillip
2
philharmonic
2
Phil
36
1
4
3
2

2
l
4
2
2
Phipps
2
phi
36
1
4
3
2
l
2

4
2
2
phenylalanine
2
phenyl
36
1
4
3
2

2
lm
4
1
2
phenotype
36
1
4
3
2

2

4
2
2
phenomenon
2
phenomenology
36
1
4
3
2

2

4
2
2
phenomenal
2
phenomena
36
1
4
3
2
en
2
ao
4
0
36
1
4
3
2

2

4
2
2
phenolic
2
phenol
36
1
4
3
2

2
oy
4
0
36
1
4
3
2

2
n
4
2
2
Phelps
2
pheasant
36
1
4
3
2

2
glnr
4
1
2
phase
36
1
4
3
2

2

4
2
2
pharmacopoeia
2
pharmacology
36
1
4
3
2
mac
2
o
4
3
2
pharmacy
2
pharmacist
2
pharmaceutic
36
1
4
3
2
t
2

4
2
2
phantom
2
phantasy
36
1
4
3
2

2

4
2
2
phalanx
2
phalanger
36
1
4
3
2
a
2
n
4
1
2
phalarope
36
1
4
3
2

2

4
2
2
phagocyte
2
phage
36
1
4
3
2

2
aeilory
4
2
2
phthalate
2
PhD
36
1
4
3
2

2

4
2
2
Pfizer
2
pfennig
36
1
4
3
2

2

4
3
2
pewter
2
pewee
2
pew
36
1
4
3
2

2

4
2
2
petunia
2
petulant
36
1
4
3
2

2

4
2
2
petty
2
petticoat
36
1
4
3
2

2

4
3
2
petrology
2
petroleum
2
petrol
36
1
4
3
2

2
l
4
2
2
petroglyph
2
petrochemical
36
1
4
3
2

2

4
2
2
petrify
2
petri
36
1
4
3
2

2
io
4
1
2
petrel
36
1
4
3
2
t
2

4
3
2
petition
2
petite
2
petit
36
1
4
3
2
s
2

4
3
2
Peterson
2
Petersen
2
Petersburg
36
1
4
3
2

2
r
4
1
2
Pete
36
1
4
3
2

2
eirtu
4
3
2
pets
2
petal
2
pet
36
1
4
3
2
ent
2

4
2
2
pestilential
2
pestilent
36
1
4
3
2

2
l
4
1
2
pesticide
36
1
4
3
2

2
i
4
3
2
pestle
2
peste
2
pest
36
1
4
3
2
im
2
i
4
2
2
pessimum
2
pessimal
36
1
4
3
2
s
2

4
2
2
pessimist
2
pessimism
36
1
4
3
2

2
st
4
0
36
1
4
3
2

2

4
2
2
perversion
2
perverse
36
1
4
3
2
r
2
s
4
1
2
pervert
36
1
4
3
2

2
s
4
1
2
pervade
36
1
4
3
2
i
2

4
2
2
pervasive
2
pervasion
36
1
4
3
2

2
ae
4
0
36
1
4
3
2

2

4
2
2
peruse
2
perusal
36
1
4
3
2

2
s
4
2
2
Peruvian
2
Peru
36
1
4
3
2
rb
2

4
2
2
perturbate
2
perturb
36
1
4
3
2
n
2

4
2
2
pertinent
2
pertinacious
36
1
4
3
2

2
iu
4
3
2
Perth
2
pertain
2
pert
36
1
4
3
2
i
2

4
2
2
persuasive
2
persuasion
36
1
4
3
2
a
2
s
4
1
2
persuade
36
1
4
3
2

2

4
2
2
perspire
2
perspiration
36
1
4
3
2

2
u
4
1
2
perspicacious
36
1
4
3
2

2

4
2
2
perspicuous
2
perspicuity
36
1
4
3
2

2
cr
4
0
36
1
4
3
2

2
i
4
1
2
perspective
36
1
4
3
2

2
l
4
2
2
personage
2
persona
36
1
4
3
2
n
2
a
4
3
2
personnel
2
personify
2
person
36
1
4
3
2
t
2

4
2
2
persistent
2
persist
36
1
4
3
2

2
s
4
3
2
persimmon
2
persiflage
2
Persia
36
1
4
3
2

2
cv
4
1
2
Perseus
36
1
4
3
2
er
2

4
2
2
persevere
2
perseverant
36
1
4
3
2
ut
2

4
3
2
persecutory
2
persecution
2
persecute
36
1
4
3
2

2
eiopu
4
1
2
Pershing
36
1
4
3
2

2
t
4
1
2
perpendicular
36
1
4
3
2

2

4
2
2
perpetuate
2
perpetual
36
1
4
3
2

2
a
4
1
2
perpetuity
36
1
4
3
2

2
u
4
1
2
perpetrate
36
1
4
3
2

2
e
4
1
2
perplex
36
1
4
3
2
t
2

4
2
2
permute
2
permutation
36
1
4
3
2

2

4
2
2
permitting
2
permitted
36
1
4
3
2

2
t
4
1
2
permit
36
1
4
3
2
si
2

4
3
2
permissive
2
permission
2
permissible
36
1
4
3
2

2
st
4
1
2
Permian
36
1
4
3
2
a
2

4
2
2
permeate
2
permeable
36
1
4
3
2

2

4
2
2
permanent
2
permalloy
36
1
4
3
2

2
aeiu
4
0
36
1
4
3
2

2

4
3
2
perky
2
Perkins
2
perk
36
1
4
3
2
ur
2

4
2
2
perjury
2
perjure
36
1
4
3
2

2

4
2
2
perish
2
periscope
36
1
4
3
2
r
2

4
2
2
periphery
2
peripheral
36
1
4
3
2

2
e
4
1
2
periphrastic
36
1
4
3
2

2
h
4
1
2
peripatetic
36
1
4
3
2
d
2

4
2
2
periodic
2
period
36
1
4
3
2

2

4
3
2
perilous
2
Perilla
2
peril
36
1
4
3
2
le
2

4
2
2
Pericles
2
Periclean
36
1
4
3
2

2
clops
4
5
2
periwinkle
2
peritectic
2
perimeter
2
perihelion
2
peridotite
36
1
4
3
2
e
2

4
2
2
perfumery
2
perfume
36
1
4
3
2

2
m
4
2
2
perfusion
2
perfunctory
36
1
4
3
2

2
a
4
1
2
perform
36
1
4
3
2
r
2
m
4
2
2
perforce
2
perforate
36
1
4
3
2
d
2

4
2
2
perfidy
2
perfidious
36
1
4
3
2
ct
2

4
2
2
perfectible
2
perfect
36
1
4
3
2

2
eiou
4
0
36
1
4
3
2

2

4
4
2
perestroika
2
Perez
2
perennial
2
peremptory
36
1
4
3
2
ssi
2

4
2
2
percussive
2
percussion
36
1
4
3
2

2

4
3
2
perchlorate
2
perchance
2
perch
36
1
4
3
2

2
np
4
1
2
perceive
36
1
4
3
2

2

4
3
2
perceptive
2
perception
2
perceptible
36
1
4
3
2
t
2
i
4
2
2
perceptual
2
percept
36
1
4
3
2
t
2

4
3
2
percentile
2
percentage
2
percent
36
1
4
3
2

2
ehu
4
3
2
Percy
2
percolate
2
Percival
36
1
4
3
2

2
cefijkmpstuv
4
9
2
Perry
2
perquisite
2
peroxide
2
pernicious
2
Perle
2
perhaps
2
Pergamon
2
perdition
2
per
36
1
4
3
2
i
2

4
2
2
PepsiCo
2
Pepsi
36
1
4
3
2
r
2

4
4
2
peppery
2
pepperoni
2
peppermint
2
peppergrass
36
1
4
3
2

2
e
4
1
2
peppy
36
1
4
3
2

2
ps
4
2
2
peptide
2
pep
36
1
4
3
2

2

4
3
2
Peoria
2
people
2
peony
36
1
4
3
2

2

4
2
2
penury
2
penurious
36
1
4
3
2

2
r
4
2
2
penumbra
2
penultimate
36
1
4
3
2
cost
2

4
2
2
pentecostal
2
Pentecost
36
1
4
3
2

2
o
4
1
2
pentagram
36
1
4
3
2
n
2

4
2
2
pentagonal
2
pentagon
36
1
4
3
2

2
g
4
1
2
pentane
36
1
4
3
2

2
ae
4
2
2
penthouse
2
pent
36
1
4
3
2

2

4
2
2
pensive
2
pension
36
1
4
3
2

2
i
4
1
2
Pensacola
36
1
4
3
2

2

4
2
2
pennyroyal
2
penny
36
1
4
3
2

2

4
2
2
pennant
2
penna
36
1
4
3
2

2
ay
4
2
2
Pennsylvania
2
Penn
36
1
4
3
2

2

4
2
2
penmen
2
penman
36
1
4
3
2
a
2

4
2
2
penitentiary
2
penitential
36
1
4
3
2
ent
2
i
4
1
2
penitent
36
1
4
3
2

2
t
4
3
2
penis
2
peninsula
2
penicillin
36
1
4
3
2
ra
2

4
2
2
penetrate
2
penetrable
36
1
4
3
2

2
t
4
1
2
Penelope
36
1
4
3
2

2

4
3
2
pendulum
2
pendant
2
pend
36
1
4
3
2

2

4
3
2
pencil
2
penchant
2
pence
36
1
4
3
2

2

4
2
2
penalty
2
penal
36
1
4
3
2

2
l
4
2
2
penates
2
penance
36
1
4
3
2

2
acdeimnstu
4
4
2
Penrose
2
Penh
2
penguin
2
pen
36
1
4
3
2

2

4
2
2
pemmican
2
Pembroke
36
1
4
3
2
i
2

4
2
2
pelvis
2
pelvic
36
1
4
3
2

2

4
2
2
peltry
2
pelt
36
1
4
3
2

2

4
2
2
pellet
2
pellagra
36
1
4
3
2

2
ltv
4
2
2
pelican
2
Pelham
36
1
4
3
2

2

4
2
2
Peggy
2
pegging
36
1
4
3
2

2
g
4
3
2
pegboard
2
Pegasus
2
peg
36
1
4
3
2

2

4
3
2
peepy
2
peephole
2
peep
36
1
4
3
2

2
p
4
4
2
peer
2
peel
2
peek
2
pee
36
1
4
3
2
tric
2

4
2
2
pediatrician
2
pediatric
36
1
4
3
2

2
a
4
2
2
pediment
2
pedigree
36
1
4
3
2
st
2

4
2
2
pedestrian
2
pedestal
36
1
4
3
2

2
gn
4
1
2
pedal
36
1
4
3
2
t
2

4
3
2
pedantry
2
pedantic
2
pedant
36
1
4
3
2
og
2

4
3
2
pedagogy
2
pedagogue
2
pedagogic
36
1
4
3
2

2
aei
4
2
2
Pedro
2
peddle
36
1
4
3
2

2

4
2
2
peculiar
2
peculate
36
1
4
3
2

2
l
4
1
2
pecuniary
36
1
4
3
2
oral
2

4
2
2
pectoralis
2
pectoral
36
1
4
3
2

2
tu
4
4
2
Pecos
2
peck
2
peccary
2
pecan
36
1
4
3
2

2
cklrs
4
5
2
peat
2
peanut
2
peafowl
2
Peabody
2
pea
36
1
4
3
2

2

4
2
2
Pease
2
peasant
36
1
4
3
2

2

4
3
2
pearlstone
2
pearlite
2
pearl
36
1
4
3
2

2
l
4
3
2
Pearson
2
Pearce
2
pear
36
1
4
3
2

2

4
2
2
Peale
2
peal
36
1
4
3
2

2

4
2
2
peaky
2
peak
36
1
4
3
2

2

4
2
2
Peachtree
2
peach
36
1
4
3
2

2

4
5
2
peacetime
2
peacemake
2
peaceful
2
peaceable
2
peace
36
1
4
3
2

2
eh
4
1
2
peacock
36
1
4
3
2

2
acdeglmnoprstw
4
4
2
Peugeot
2
Peking
2
pejorative
2
pebble
36
1
4
3
2

2

4
7
2
payroll
2
payoff
2
Payne
2
paymaster
2
payday
2
paycheck
2
pay
36
1
4
3
2

2

4
2
2
pawnshop
2
pawn
36
1
4
3
2

2
n
4
2
2
Pawtucket
2
paw
36
1
4
3
2

2

4
4
2
Pavlov
2
pavilion
2
pave
2
pavanne
36
1
4
3
2
ch
2

4
2
2
paunchy
2
paunch
36
1
4
3
2

2

4
2
2
Paulson
2
Paulsen
36
1
4
3
2

2

4
2
2
Pauline
2
Pauli
36
1
4
3
2

2
is
4
5
2
Paulus
2
Paulo
2
Paulette
2
Paula
2
Paul
36
1
4
3
2

2
ln
4
3
2
pause
2
pauper
2
paucity
36
1
4
3
2
r
2

4
2
2
Patterson
2
pattern
36
1
4
3
2

2
e
4
3
2
patty
2
Patton
2
Patti
36
1
4
3
2

2

4
3
2
patroness
2
patronage
2
patron
36
1
4
3
2

2
lm
4
1
2
patrol
36
1
4
3
2

2

4
2
2
patrolmen
2
patrolman
36
1
4
3
2

2

4
2
2
patrolling
2
patrolled
36
1
4
3
2

2
ln
4
0
36
1
4
3
2

2
acmo
4
1
2
patristic
36
1
4
3
2
t
2

4
2
2
patriotic
2
patriot
36
1
4
3
2
on
2

4
2
2
patrimony
2
patrimonial
36
1
4
3
2
a
2

4
2
2
patrician
2
Patricia
36
1
4
3
2

2
i
4
2
2
Patrick
2
Patrice
36
1
4
3
2
rch
2

4
3
2
patriarchy
2
patriarchal
2
patriarch
36
1
4
3
2

2
io
4
0
36
1
4
3
2

2

4
3
2
patio
2
patina
2
patient
36
1
4
3
2
en
2

4
3
2
pathogenic
2
pathogenesis
2
pathogen
36
1
4
3
2

2
g
4
2
2
pathos
2
pathology
36
1
4
3
2

2
o
4
3
2
pathway
2
pathetic
2
path
36
1
4
3
2

2

4
2
2
paternoster
2
paternal
36
1
4
3
2

2
n
4
2
2
Paterson
2
pater
36
1
4
3
2
t
2

4
2
2
patentee
2
patent
36
1
4
3
2

2
nr
4
1
2
pate
36
1
4
3
2
h
2

4
3
2
patchy
2
patchwork
2
patch
36
1
4
3
2

2
cehirt
4
3
2
Patsy
2
Patagonia
2
pat
36
1
4
3
2
r
2

4
2
2
pastoral
2
pastor
36
1
4
3
2

2

4
2
2
pastime
2
pastiche
36
1
4
3
2

2

4
2
2
Pasteur
2
pasteup
36
1
4
3
2

2
u
4
3
2
pastel
2
pasteboard
2
paste
36
1
4
3
2

2
eiou
4
3
2
pasty
2
pastry
2
past
36
1
4
3
2

2

4
2
2
passive
2
passivate
36
1
4
3
2
n
2

4
2
2
passionate
2
passion
36
1
4
3
2

2
ov
4
1
2
passing
36
1
4
3
2

2

4
4
2
passed
2
passerby
2
passenger
2
passe
36
1
4
3
2
e
2

4
2
2
passageway
2
passage
36
1
4
3
2

2
g
4
1
2
Passaic
36
1
4
3
2

2
aei
4
5
2
password
2
passport
2
Passover
2
passband
2
pass
36
1
4
3
2

2

4
2
2
paschal
2
Pascal
36
1
4
3
2

2
cst
4
3
2
Paso
2
pasha
2
Pasadena
36
1
4
3
2
la
2
r
4
1
2
particulate
36
1
4
3
2
p
2
a
4
1
2
participle
36
1
4
3
2

2

4
2
2
participate
2
participant
36
1
4
3
2

2
iu
4
1
2
particle
36
1
4
3
2

2
c
4
3
2
partition
2
partisan
2
partial
36
1
4
3
2

2
i
4
8
2
parts
2
party
2
partridge
2
partook
2
partner
2
Parthenon
2
partake
2
part
36
1
4
3
2
n
2

4
2
2
parsonage
2
parson
36
1
4
3
2
on
2

4
2
2
parsimony
2
parsimonious
36
1
4
3
2

2
m
4
1
2
Parsifal
36
1
4
3
2

2
ioe
4
2
2
parsnip
2
parsley
36
1
4
3
2

2

4
4
2
parry
2
parrot
2
Parrish
2
Parr
36
1
4
3
2
e
2

4
2
2
parolee
2
parole
36
1
4
3
2

2
l
4
2
2
parody
2
parochial
36
1
4
3
2
r
2

4
2
2
parliamentary
2
parliamentarian
36
1
4
3
2
ament
2
a
4
1
2
parliament
36
1
4
3
2

2

4
2
2
parlay
2
parlance
36
1
4
3
2

2
ai
4
1
2
parley
36
1
4
3
2

2

4
2
2
parkish
2
Parkinson
36
1
4
3
2

2
i
4
4
2
parkway
2
parkland
2
Parke
2
park
36
1
4
3
2

2

4
2
2
parishioner
2
parish
36
1
4
3
2

2
h
4
2
2
Parisian
2
Paris
36
1
4
3
2

2
s
4
2
2
parimutuel
2
pariah
36
1
4
3
2

2

4
2
2
parenthesis
2
parentheses
36
1
4
3
2
e
2
s
4
1
2
parenthetic
36
1
4
3
2

2

4
2
2
parental
2
parentage
36
1
4
3
2
t
2
ah
4
1
2
parent
36
1
4
3
2

2
n
4
3
2
Pareto
2
paregoric
2
pare
36
1
4
3
2

2

4
2
2
parch
2
parcel
36
1
4
3
2
t
2

4
2
2
parasitic
2
parasite
36
1
4
3
2

2
i
4
2
2
parasympathetic
2
parasol
36
1
4
3
2

2

4
2
2
paraphrase
2
paraphernalia
36
1
4
3
2

2
h
4
2
2
parapsychology
2
parapet
36
1
4
3
2

2
a
4
1
2
paranoid
36
1
4
3
2

2

4
2
2
paranoiac
2
paranoia
36
1
4
3
2
o
2
i
4
1
2
paranormal
36
1
4
3
2
gnet
2

4
2
2
paramagnetic
2
paramagnet
36
1
4
3
2

2
a
4
4
2
Paramus
2
paramount
2
paramilitary
2
parameter
36
1
4
3
2
l
2

4
2
2
parallelepiped
2
parallel
36
1
4
3
2

2
e
4
1
2
parallax
36
1
4
3
2

2
l
4
2
2
paralysis
2
paralinguistic
36
1
4
3
2
n
2

4
2
2
paragonite
2
paragon
36
1
4
3
2

2
o
4
2
2
Paraguay
2
paragraph
36
1
4
3
2
x
2

4
2
2
paradoxic
2
paradox
36
1
4
3
2
m
2

4
2
2
paradigmatic
2
paradigm
36
1
4
3
2

2
g
4
1
2
paradise
36
1
4
3
2

2
io
4
1
2
parade
36
1
4
3
2
ol
2
o
4
2
2
parabolic
2
parabola
36
1
4
3
2
id
2

4
2
2
paraboloidal
2
paraboloid
36
1
4
3
2

2
bdglmnps
4
5
2
paraxial
2
paratroop
2
parakeet
2
paraffin
2
parachute
36
1
4
3
2

2
aceiklorst
4
5
2
parvenu
2
parquet
2
pardon
2
parboil
2
par
36
1
4
3
2
r
2

4
2
2
papyrus
2
papyri
36
1
4
3
2

2

4
2
2
pappy
2
Pappas
36
1
4
3
2

2

4
2
2
paperwork
2
paperweight
36
1
4
3
2
r
2
w
4
4
2
papers
2
papery
2
paperback
2
paper
36
1
4
3
2

2

4
3
2
papaw
2
papal
2
papa
36
1
4
3
2

2
aepy
4
5
2
Papua
2
paprika
2
papoose
2
papillary
2
pap
36
1
4
3
2
mim
2

4
2
2
pantomimic
2
pantomime
36
1
4
3
2
s
2

4
2
2
pantheist
2
pantheism
36
1
4
3
2
e
2
i
4
2
2
panther
2
pantheon
36
1
4
3
2

2
ho
4
3
2
panty
2
pantry
2
pant
36
1
4
3
2
am
2

4
2
2
panoramic
2
panorama
36
1
4
3
2

2
r
4
1
2
panoply
36
1
4
3
2

2

4
2
2
panicky
2
panicked
36
1
4
3
2
c
2
k
4
2
2
panicle
2
panic
36
1
4
3
2

2

4
2
2
panel
2
pane
36
1
4
3
2

2

4
2
2
pandemonium
2
pandemic
36
1
4
3
2

2
m
4
1
2
pander
36
1
4
3
2

2

4
2
2
Pandanus
2
panda
36
1
4
3
2

2
ae
4
1
2
Pandora
36
1
4
3
2
ea
2

4
2
2
pancreatic
2
pancreas
36
1
4
3
2

2
r
4
2
2
Pancho
2
pancake
36
1
4
3
2

2

4
2
2
panama
2
panacea
36
1
4
3
2

2
acdeiot
4
5
2
pansy
2
panjandrum
2
panhandle
2
pang
2
pan
36
1
4
3
2

2

4
3
2
pamphlet
2
pamper
2
pampa
36
1
4
3
2

2
p
4
2
2
Pamela
2
Pam
36
1
4
3
2

2

4
2
2
Palomar
2
Palo
36
1
4
3
2

2

4
5
2
Palmyra
2
Palmolive
2
palmetto
2
palmate
2
palm
36
1
4
3
2

2

4
2
2
pallid
2
palliate
36
1
4
3
2

2

4
2
2
Palladian
2
palladia
36
1
4
3
2
di
2
a
4
1
2
palladium
36
1
4
3
2

2
ai
4
2
2
pallet
2
pall
36
1
4
3
2
drom
2

4
2
2
palindromic
2
palindrome
36
1
4
3
2

2
n
4
1
2
palisade
36
1
4
3
2

2

4
2
2
Paleozoic
2
Paleolithic
36
1
4
3
2

2
o
4
4
2
palette
2
Palestine
2
Palermo
2
pale
36
1
4
3
2
z
2

4
2
2
palazzo
2
palazzi
36
1
4
3
2

2

4
2
2
Palatine
2
palate
36
1
4
3
2

2
tz
4
1
2
palace
36
1
4
3
2

2
aeilmo
4
4
2
palsy
2
palpable
2
palfrey
2
pal
36
1
4
3
2
istan
2

4
2
2
Pakistani
2
Pakistan
36
1
4
3
2

2

4
2
2
pairwise
2
pair
36
1
4
3
2

2

4
2
2
paintbrush
2
paint
36
1
4
3
2

2
t
4
4
2
painstaking
2
painful
2
Paine
2
pain
36
1
4
3
2

2
nr
4
3
2
paisley
2
pail
2
paid
36
1
4
3
2
nt
2

4
2
2
pageantry
2
pageant
36
1
4
3
2

2
a
4
1
2
page
36
1
4
3
2

2
e
4
3
2
pagoda
2
paginate
2
pagan
36
1
4
3
2

2

4
3
2
paddy
2
paddock
2
paddle
36
1
4
3
2

2
d
4
3
2
padre
2
padlock
2
pad
36
1
4
3
2

2

4
2
2
Packard
2
package
36
1
4
3
2

2
a
4
2
2
packet
2
pack
36
1
4
3
2

2
s
4
1
2
pacific
36
1
4
3
2

2

4
2
2
pacifist
2
pacifism
36
1
4
3
2
f
2
i
4
1
2
pacify
36
1
4
3
2

2

4
3
2
pacesetting
2
pacemake
2
pace
36
1
4
3
2

2
eik
4
1
2
pact
36
1
4
3
2

2

4
2
2
Pabst
2
Pablo
36
1
4
3
2

2
bcdgiklmnprstuvwy
4
5
2
Paz
2
pax
2
Paoli
2
paean
2
pa
36
1
4
3
2

2
aefhilnorstuy
4
8
2
pc
2
PVC
2
p's
2
ppm
2
PM
2
PDP
2
PBS
2
p
36
1
4
3
2

2

4
2
2
ozone
2
Ozark
36
1
4
3
2
gen
2

4
2
2
oxygenate
2
oxygen
36
1
4
3
2

2

4
2
2
oxidate
2
oxidant
36
1
4
3
2
d
2
a
4
1
2
oxide
36
1
4
3
2

2

4
2
2
oxeye
2
oxen
36
1
4
3
2
l
2

4
2
2
oxalic
2
oxalate
36
1
4
3
2

2
aeiy
4
5
2
Oxnard
2
Oxonian
2
Oxford
2
oxcart
2
ox
36
1
4
3
2

2

4
2
2
owly
2
owl
36
1
4
3
2

2

4
2
2
Owens
2
owe
36
1
4
3
2

2
eln
4
1
2
ow
36
1
4
3
2

2

4
2
2
oviform
2
Ovid
36
1
4
3
2

2

4
2
2
overture
2
overt
36
1
4
3
2

2
t
4
2
2
overview
2
over
36
1
4
3
2

2

4
2
2
ovenbird
2
oven
36
1
4
3
2

2
nr
4
0
36
1
4
3
2

2

4
4
2
ovate
2
ovary
2
oval
2
ova
36
1
4
3
2

2
aei
4
0
36
1
4
3
2

2

4
2
2
ouzo
2
ouzel
36
1
4
3
2
a
2

4
2
2
outlawry
2
outlandish
36
1
4
3
2

2
l
4
5
2
output
2
outside
2
outrageous
2
outermost
2
out
36
1
4
3
2

2
s
4
1
2
our
36
1
4
3
2
ht
2

4
2
2
oughtn't
2
ought
36
1
4
3
2

2
grtz
4
5
2
ouvre
2
oust
2
ounce
2
ouch
2
Ouagadougou
36
1
4
3
2

2

4
2
2
Ottoman
2
Otto
36
1
4
3
2

2
o
4
3
2
otter
2
Ottawa
2
Ott
36
1
4
3
2

2

4
2
2
Otis
2
otiose
36
1
4
3
2
e
2
r
4
1
2
Othello
36
1
4
3
2

2

4
2
2
otherworld
2
otherwise
36
1
4
3
2

2
w
4
2
2
others
2
other
36
1
4
3
2

2
hit
4
0
36
1
4
3
2

2
c
4
1
2
Ostrander
36
1
4
3
2

2

4
2
2
ostracod
2
ostracism
36
1
4
3
2

2
a
4
1
2
ostrich
36
1
4
3
2

2
no
4
0
36
1
4
3
2
th
2

4
3
2
osteopathy
2
osteopathic
2
osteopath
36
1
4
3
2

2
a
4
1
2
osteoporosis
36
1
4
3
2

2
p
4
1
2
osteology
36
1
4
3
2

2

4
2
2
ostentatious
2
ostensible
36
1
4
3
2

2
er
4
0
36
1
4
3
2

2

4
2
2
ossify
2
osseous
36
1
4
3
2

2

4
2
2
osmotic
2
osmosis
36
1
4
3
2

2
o
4
1
2
osmium
36
1
4
3
2

2

4
2
2
Osiris
2
osier
36
1
4
3
2

2

4
3
2
O'Sullivan
2
O'Shea
2
o's
36
1
4
3
2
t
2

4
2
2
oscillatory
2
oscillate
36
1
4
3
2
ll
2
a
4
1
2
oscilloscope
36
1
4
3
2

2
i
4
1
2
Oscar
36
1
4
3
2
orn
2

4
2
2
Osborne
2
Osborn
36
1
4
3
2

2
bcimst
4
6
2
Oswald
2
osprey
2
Oslo
2
Oshkosh
2
Osgood
2
Osaka
36
1
4
3
2
ell
2

4
2
2
Orwellian
2
Orwell
36
1
4
3
2

2

4
2
2
orthophosphate
2
orthopedic
36
1
4
3
2

2

4
2
2
orthography
2
orthogonal
36
1
4
3
2

2

4
2
2
orthodoxy
2
orthodox
36
1
4
3
2
ti
2

4
2
2
orthodontist
2
orthodontic
36
1
4
3
2
o
2
nx
4
0
36
1
4
3
2

2
dgp
4
3
2
orthorhombic
2
orthonormal
2
orthoclase
36
1
4
3
2

2
o
4
2
2
orthicon
2
orthant
36
1
4
3
2

2
h
4
1
2
Ortega
36
1
4
3
2
n
2

4
2
2
orphanage
2
orphan
36
1
4
3
2
h
2
a
4
2
2
Orphic
2
Orpheus
36
1
4
3
2

2

4
2
2
Orono
2
orography
36
1
4
3
2

2
m
4
1
2
ornate
36
1
4
3
2
ent
2

4
2
2
ornamentation
2
ornament
36
1
4
3
2

2
a
4
1
2
ornery
36
1
4
3
2

2

4
2
2
Orleans
2
Orlando
36
1
4
3
2

2

4
2
2
Orion
2
oriole
36
1
4
3
2

2

4
2
2
Orinoco
2
Orin
36
1
4
3
2

2

4
2
2
originate
2
original
36
1
4
3
2
in
2
a
4
1
2
origin
36
1
4
3
2
nt
2

4
3
2
oriented
2
oriental
2
orient
36
1
4
3
2

2
egno
4
1
2
orifice
36
1
4
3
2

2
n
4
1
2
orgasm
36
1
4
3
2

2
i
4
3
2
organometallic
2
organdy
2
organ
36
1
4
3
2

2
z
4
2
2
organismic
2
organic
36
1
4
3
2

2
a
4
2
2
orgy
2
orgiastic
36
1
4
3
2
te
2

4
2
2
Orestes
2
Oresteia
36
1
4
3
2

2

4
2
2
Oregon
2
oregano
36
1
4
3
2

2
gs
4
1
2
ore
36
1
4
3
2
na
2

4
4
2
ordinate
2
ordinary
2
ordinance
2
ordinal
36
1
4
3
2

2
r
4
1
2
ordeal
36
1
4
3
2

2
ei
4
2
2
ordnance
2
ordain
36
1
4
3
2

2

4
2
2
orchis
2
orchid
36
1
4
3
2
stra
2

4
3
2
orchestrate
2
orchestral
2
orchestra
36
1
4
3
2
h
2
ei
4
1
2
orchard
36
1
4
3
2
t
2

4
2
2
orbital
2
orbit
36
1
4
3
2

2
i
4
1
2
orb
36
1
4
3
2

2

4
2
2
oratorio
2
oratoric
36
1
4
3
2
r
2
i
4
1
2
oratory
36
1
4
3
2

2
o
4
1
2
orate
36
1
4
3
2

2

4
2
2
orangeroot
2
orange
36
1
4
3
2
g
2
e
4
1
2
orangutan
36
1
4
3
2

2
nt
4
2
2
oral
2
oracle
36
1
4
3
2

2
abcdegilnoptw
4
4
2
Orville
2
Orr
2
Orkney
2
or
36
1
4
3
2

2

4
2
2
opus
2
opulent
36
1
4
3
2
etr
2

4
2
2
optometry
2
optometrist
36
1
4
3
2

2
m
4
2
2
optoisolate
2
optoacoustic
36
1
4
3
2
s
2

4
2
2
optimist
2
optimism
36
1
4
3
2

2

4
2
2
optimal
2
optima
36
1
4
3
2

2
ai
4
1
2
optimum
36
1
4
3
2

2
mo
4
1
2
optic
36
1
4
3
2
alm
2

4
2
2
opthalmology
2
opthalmic
36
1
4
3
2

2
hio
4
1
2
opt
36
1
4
3
2
ss
2
i
4
2
2
oppressor
2
oppress
36
1
4
3
2

2

4
2
2
oppressive
2
oppression
36
1
4
3
2

2
e
4
1
2
opprobrium
36
1
4
3
2
t
2

4
2
2
opposition
2
opposite
36
1
4
3
2

2
i
4
2
2
oppose
2
opposable
36
1
4
3
2

2
s
4
2
2
opportune
2
opponent
36
1
4
3
2

2
or
4
1
2
Oppenheimer
36
1
4
3
2
ion
2

4
2
2
opinionate
2
opinion
36
1
4
3
2

2
n
4
2
2
opium
2
opiate
36
1
4
3
2

2
nt
4
2
2
operable
2
opera
36
1
4
3
2

2
ei
4
0
36
1
4
3
2

2

4
2
2
operant
2
operand
36
1
4
3
2

2
a
4
2
2
operon
2
operetta
36
1
4
3
2

2
rn
4
2
2
Opel
2
OPEC
36
1
4
3
2

2
l
4
2
2
opaque
2
opacity
36
1
4
3
2

2

4
2
2
opalescent
2
opal
36
1
4
3
2

2
aeiptu
4
2
2
opossum
2
Ophiucus
36
1
4
3
2

2

4
3
2
ooze
2
oodles
2
oocyte
36
1
4
3
2

2

4
3
2
ontology
2
ontogeny
2
onto
36
1
4
3
2

2
o
4
1
2
Ontario
36
1
4
3
2

2

4
2
2
onslaught
2
onset
36
1
4
3
2
ush
2

4
2
2
onrushing
2
onrush
36
1
4
3
2
atopoei
2

4
2
2
onomatopoeic
2
onomatopoeia
36
1
4
3
2

2
m
4
1
2
Onondaga
36
1
4
3
2
ok
2

4
2
2
onlooking
2
onlooker
36
1
4
3
2

2
o
4
2
2
online
2
only
36
1
4
3
2

2

4
6
2
oneupmanship
2
onetime
2
oneself
2
onerous
2
Oneida
2
one
36
1
4
3
2

2

4
2
2
oncoming
2
oncology
36
1
4
3
2

2
o
4
1
2
once
36
1
4
3
2

2
celorst
4
7
2
onboard
2
onyx
2
onward
2
onus
2
onion
2
ongoing
2
on
36
1
4
3
2

2

4
2
2
omnipresent
2
omnipotent
36
1
4
3
2
i
2
p
4
2
2
omniscient
2
omnibus
36
1
4
3
2

2

4
2
2
omitting
2
omitted
36
1
4
3
2

2
t
4
1
2
omit
36
1
4
3
2

2
t
4
3
2
omission
2
ominous
2
omicron
36
1
4
3
2

2

4
3
2
omen
2
omelet
2
omega
36
1
4
3
2
uds
2

4
2
2
ombudsperson
2
ombudsman
36
1
4
3
2

2

4
2
2
Oman
2
Omaha
36
1
4
3
2

2
abein
4
0
36
1
4
3
2
mpi
2

4
2
2
Olympic
2
Olympia
36
1
4
3
2

2

4
2
2
Olson
2
Olsen
36
1
4
3
2

2

4
2
2
olivine
2
Olivia
36
1
4
3
2

2

4
2
2
Olivetti
2
olive
36
1
4
3
2

2
ei
4
0
36
1
4
3
2

2
ao
4
0
36
1
4
3
2

2

4
2
2
oligopoly
2
oligoclase
36
1
4
3
2
rch
2

4
2
2
oligarchy
2
oligarchic
36
1
4
3
2

2
gv
4
1
2
Olin
36
1
4
3
2

2

4
3
2
oleomargarine
2
olefin
2
oleander
36
1
4
3
2

2

4
2
2
oldster
2
Oldsmobile
36
1
4
3
2
n
2

4
2
2
Oldenburg
2
olden
36
1
4
3
2

2
es
4
2
2
oldy
2
old
36
1
4
3
2

2

4
2
2
Olav
2
Olaf
36
1
4
3
2

2
adeisy
4
2
2
Olga
2
olfactory
36
1
4
3
2

2

4
4
2
Oklahoma
2
Okinawa
2
okay
2
OK
36
1
4
3
2

2
m
4
4
2
oily
2
oilseed
2
oilcloth
2
oil
36
1
4
3
2

2

4
2
2
oilmen
2
oilman
36
1
4
3
2

2
l
4
1
2
oint
36
1
4
3
2

2

4
3
2
ohmmeter
2
ohmic
2
ohm
36
1
4
3
2

2
m
4
2
2
Ohio
2
oh
36
1
4
3
2
e
2

4
2
2
ogress
2
ogre
36
1
4
3
2

2
r
4
2
2
ogle
2
Ogden
36
1
4
3
2
n
2

4
2
2
oftentimes
2
often
36
1
4
3
2

2
e
4
1
2
oft
36
1
4
3
2
o
2

4
2
2
offshore
2
offshoot
36
1
4
3
2
t
2

4
2
2
offsetting
2
offset
36
1
4
3
2

2
eh
4
3
2
offstage
2
offspring
2
offsaddle
36
1
4
3
2

2

4
2
2
officious
2
officio
36
1
4
3
2

2
l
4
1
2
officiate
36
1
4
3
2

2

4
3
2
officials
2
officialdom
2
official
36
1
4
3
2

2
ao
4
0
36
1
4
3
2

2

4
4
2
offices
2
officemate
2
officeholder
2
office
36
1
4
3
2
c
2
ei
4
0
36
1
4
3
2

2

4
5
2
offers
2
offering
2
offered
2
offertory
2
offer
36
1
4
3
2

2

4
3
2
offensive
2
offend
2
Offenbach
36
1
4
3
2

2
nr
4
0
36
1
4
3
2

2
eis
4
5
2
offload
2
offhand
2
offbeat
2
offal
2
off
36
1
4
3
2

2
ft
4
1
2
of
36
1
4
3
2
ip
2

4
2
2
Oedipus
2
Oedipal
36
1
4
3
2

2
d
4
1
2
oersted
36
1
4
3
2
sse
2

4
2
2
Odyssey
2
Odysseus
36
1
4
3
2

2

4
2
2
odorous
2
odometer
36
1
4
3
2

2

4
3
2
O'Dwyer
2
O'Donnell
2
O'Dell
36
1
4
3
2

2

4
3
2
odium
2
odious
2
Odin
36
1
4
3
2

2

4
2
2
Odessa
2
ode
36
1
4
3
2

2
eioy
4
1
2
odd
36
1
4
3
2

2

4
4
2
octoroon
2
octopus
2
octogenarian
2
October
36
1
4
3
2
l
2

4
2
2
octillion
2
octile
36
1
4
3
2

2

4
2
2
octet
2
octennial
36
1
4
3
2

2

4
2
2
Octavia
2
octave
36
1
4
3
2

2

4
2
2
octant
2
octane
36
1
4
3
2

2

4
2
2
octahedral
2
octahedra
36
1
4
3
2
edr
2
a
4
1
2
octahedron
36
1
4
3
2
on
2

4
2
2
octagonal
2
octagon
36
1
4
3
2

2
ghnv
4
1
2
octal
36
1
4
3
2

2
aeio
4
1
2
Oct
36
1
4
3
2
nn
2

4
2
2
O'Connor
2
O'Connell
36
1
4
3
2

2
o
4
1
2
o'clock
36
1
4
3
2

2
CDS
4
5
2
O'Neill
2
O'Leary
2
O'Hare
2
o'er
2
O'Brien
36
1
4
3
2
n
2
i
4
3
2
oceanside
2
oceanography
2
ocean
36
1
4
3
2

2

4
2
2
oceanic
2
Oceania
36
1
4
3
2

2
a
4
1
2
ocelot
36
1
4
3
2

2

4
2
2
occurrent
2
occurred
36
1
4
3
2

2
e
4
1
2
occurring
36
1
4
3
2

2
r
4
1
2
occur
36
1
4
3
2

2

4
2
2
occupation
2
occupant
36
1
4
3
2

2
a
4
1
2
occupy
36
1
4
3
2
t
2

4
2
2
occultate
2
occult
36
1
4
3
2

2
lpr
4
0
36
1
4
3
2
i
2

4
2
2
occlusive
2
occlusion
36
1
4
3
2
u
2
s
4
1
2
occlude
36
1
4
3
2
ent
2

4
2
2
occidental
2
occident
36
1
4
3
2

2
d
4
1
2
occipital
36
1
4
3
2

2
ilu
4
1
2
occasion
36
1
4
3
2

2
cet
4
2
2
ocular
2
ocarina
36
1
4
3
2

2
o
4
1
2
obviate
36
1
4
3
2

2
i
4
1
2
obverse
36
1
4
3
2
u
2

4
2
2
obtrusive
2
obtrude
36
1
4
3
2

2
r
4
1
2
obtain
36
1
4
3
2
u
2

4
2
2
obstruent
2
obstruct
36
1
4
3
2
na
2

4
2
2
obstinate
2
obstinacy
36
1
4
3
2

2
ir
4
2
2
obstetric
2
obstacle
36
1
4
3
2
le
2

4
2
2
obsolete
2
obsolescent
36
1
4
3
2

2

4
2
2
obsessive
2
obsession
36
1
4
3
2
s
2
i
4
1
2
obsess
36
1
4
3
2

2
t
4
1
2
observant
36
1
4
3
2

2

4
2
2
observatory
2
observation
36
1
4
3
2
v
2
a
4
1
2
observe
36
1
4
3
2
u
2

4
2
2
obsequy
2
obsequious
36
1
4
3
2

2
qrs
4
0
36
1
4
3
2

2

4
2
2
obscure
2
obscene
36
1
4
3
2

2
ceot
4
1
2
obsidian
36
1
4
3
2

2

4
2
2
oboist
2
oboe
36
1
4
3
2
io
2

4
2
2
oblivious
2
oblivion
36
1
4
3
2

2
a
4
1
2
oblige
36
1
4
3
2
t
2

4
2
2
obligatory
2
obligate
36
1
4
3
2

2
gv
4
2
2
obliterate
2
oblique
36
1
4
3
2

2
i
4
2
2
oblong
2
oblate
36
1
4
3
2
t
2

4
5
2
object's
2
objects
2
objector
2
objectify
2
object
36
1
4
3
2
e
2
c
4
1
2
objet
36
1
4
3
2
uscat
2

4
2
2
obfuscatory
2
obfuscate
36
1
4
3
2

2

4
6
2
obey
2
obese
2
Oberlin
2
obelisk
2
obeisant
2
obedient
36
1
4
3
2
ura
2

4
2
2
obdurate
2
obduracy
36
1
4
3
2

2
defjlostv
4
2
2
obnoxious
2
obituary
36
1
4
3
2

2

4
3
2
oatmeal
2
oath
2
oat
36
1
4
3
2

2

4
2
2
oasis
2
oases
36
1
4
3
2

2

4
2
2
Oakley
2
Oakland
36
1
4
3
2

2
l
4
3
2
oakwood
2
oaken
2
oak
36
1
4
3
2

2
kst
4
2
2
oar
2
oaf
36
1
4
3
2

2
abc'defghiklmnoprstuvwxz
4
2
2
oyster
2
o
36
1
4
3
2
mania
2

4
2
2
nymphomaniac
2
nymphomania
36
1
4
3
2
ph
2
o
4
1
2
nymph
36
1
4
3
2

2
m
4
5
2
NYU
2
Nyquist
2
nylon
2
NYC
2
NY
36
1
4
3
2

2

4
2
2
nutritious
2
nutrition
36
1
4
3
2
i
2
o
4
1
2
nutritive
36
1
4
3
2
i
2
t
4
2
2
nutrient
2
nutria
36
1
4
3
2

2
r
4
6
2
nutshell
2
nutmeg
2
nuthatch
2
nutcrack
2
nutate
2
nut
36
1
4
3
2
e
2

4
2
2
nursery
2
nurse
36
1
4
3
2

2
s
4
1
2
nurture
36
1
4
3
2
mati
2

4
2
2
numismatist
2
numismatic
36
1
4
3
2

2
s
4
1
2
numinous
36
1
4
3
2

2

4
2
2
numerous
2
numerology
36
1
4
3
2

2

4
2
2
Numerische
2
numeric
36
1
4
3
2

2

4
3
2
numerate
2
numeral
2
numerable
36
1
4
3
2
r
2
aio
4
0
36
1
4
3
2

2
eib
4
0
36
1
4
3
2
l
2

4
3
2
Nullstellensatz
2
nullify
2
null
36
1
4
3
2

2

4
2
2
nugget
2
nugatory
36
1
4
3
2

2

4
2
2
nudge
2
nude
36
1
4
3
2

2
aio
4
1
2
nucleus
36
1
4
3
2

2

4
2
2
nucleolus
2
nucleoli
36
1
4
3
2

2
l
4
1
2
nucleotide
36
1
4
3
2

2

4
2
2
nucleic
2
nuclei
36
1
4
3
2

2

4
3
2
nucleate
2
nuclear
2
nucleant
36
1
4
3
2
l
2
e
4
1
2
nuclide
36
1
4
3
2
i
2

4
2
2
nubile
2
Nubia
36
1
4
3
2

2
bcdglmrt
4
6
2
nuzzle
2
nuptial
2
nun
2
nuisance
2
nuance
2
nu
36
1
4
3
2

2

4
4
2
nowise
2
nowhere
2
nowaday
2
now
36
1
4
3
2

2

4
2
2
Novosibirsk
2
novo
36
1
4
3
2

2

4
2
2
novitiate
2
novice
36
1
4
3
2

2

4
2
2
novelty
2
novel
36
1
4
3
2

2
l
4
1
2
November
36
1
4
3
2

2

4
2
2
Novak
2
nova
36
1
4
3
2

2
aeio
4
1
2
Nov
36
1
4
3
2

2

4
4
2
nouveau
2
nourish
2
noun
2
Nouakchott
36
1
4
3
2
i
2

4
2
2
notorious
2
notoriety
36
1
4
3
2

2
r
4
1
2
notocord
36
1
4
3
2
e
2

4
2
2
noticeable
2
notice
36
1
4
3
2

2
cf
4
1
2
notion
36
1
4
3
2

2

4
6
2
notepad
2
notes
2
noted
2
noteworthy
2
notebook
2
note
36
1
4
3
2

2

4
2
2
notate
2
notary
36
1
4
3
2

2
aeio
4
6
2
notwithstanding
2
Nottingham
2
Notre
2
nothing
2
notch
2
not
36
1
4
3
2

2

4
2
2
Nostrand
2
Nostradamus
36
1
4
3
2

2
a
4
1
2
nostril
36
1
4
3
2
lgi
2

4
2
2
nostalgic
2
nostalgia
36
1
4
3
2

2
ar
4
0
36
1
4
3
2

2
b
4
1
2
nose
36
1
4
3
2

2

4
2
2
nosebleed
2
nosebag
36
1
4
3
2

2
et
4
0
36
1
4
3
2

2

4
2
2
Norway
2
Norwalk
36
1
4
3
2

2
a
4
2
2
Norwich
2
Norwegian
36
1
4
3
2

2
erw
4
5
2
Northumberland
2
northland
2
northbound
2
Northampton
2
north
36
1
4
3
2
st
2

4
2
2
northwestern
2
northwest
36
1
4
3
2

2
e
4
1
2
northward
36
1
4
3
2

2

4
2
2
Northrup
2
Northrop
36
1
4
3
2

2

4
2
2
northernmost
2
northern
36
1
4
3
2

2
n
4
1
2
northerly
36
1
4
3
2
st
2

4
2
2
northeastern
2
northeast
36
1
4
3
2

2
ar
4
0
36
1
4
3
2

2
h
4
1
2
Norton
36
1
4
3
2

2

4
2
2
Normandy
2
Norman
36
1
4
3
2

2

4
3
2
normally
2
normalcy
2
normal
36
1
4
3
2

2
ln
4
2
2
normative
2
Norma
36
1
4
3
2

2
a
4
1
2
norm
36
1
4
3
2

2

4
2
2
Nordstrom
2
Nordhoff
36
1
4
3
2

2
dmtw
4
5
2
Norris
2
Norfolk
2
Noreen
2
Nora
2
nor
36
1
4
3
2

2

4
2
2
noontime
2
noon
36
1
4
3
2

2
n
4
3
2
noose
2
nook
2
noodle
36
1
4
3
2

2

4
2
2
nonetheless
2
none
36
1
4
3
2

2

4
2
2
nonchalant
2
nonce
36
1
4
3
2

2
ce
4
5
2
non-recursive
2
nonsensic
2
nonogenarian
2
nondescript
2
non
36
1
4
3
2
gra
2

4
2
2
nomograph
2
nomogram
36
1
4
3
2

2

4
2
2
nominate
2
nominal
36
1
4
3
2
n
2
a
4
1
2
nominee
36
1
4
3
2
d
2

4
2
2
nomadic
2
nomad
36
1
4
3
2

2
aio
4
1
2
nomenclature
36
1
4
3
2

2

4
3
2
nolo
2
Noll
2
Nolan
36
1
4
3
2

2

4
2
2
noisemake
2
noise
36
1
4
3
2
s
2
e
4
1
2
noisy
36
1
4
3
2

2

4
2
2
Noetherian
2
Noel
36
1
4
3
2
l
2

4
2
2
nodule
2
nodular
36
1
4
3
2

2
u
4
3
2
node
2
nodal
2
nod
36
1
4
3
2
turn
2

4
2
2
nocturne
2
nocturnal
36
1
4
3
2
dy
2

4
2
2
nobody'd
2
nobody
36
1
4
3
2

2

4
2
2
noblemen
2
nobleman
36
1
4
3
2
e
2
m
4
2
2
noblesse
2
noble
36
1
4
3
2
l
2

4
2
2
nobelium
2
Nobel
36
1
4
3
2

2
elo
4
1
2
nob
36
1
4
3
2

2

4
2
2
Noah
2
NOAA
36
1
4
3
2

2
abcdeilmnorstuvw
4
3
2
nozzle
2
noxious
2
no
36
1
4
3
2

2

4
2
2
NNW
2
NNE
36
1
4
3
2

2
e
4
1
2
nitroglycerine
36
1
4
3
2
n
2

4
2
2
nitrogenous
2
nitrogen
36
1
4
3
2

2
g
4
1
2
nitrous
36
1
4
3
2

2

4
3
2
nitrite
2
nitride
2
nitric
36
1
4
3
2

2
io
4
1
2
nitrate
36
1
4
3
2

2
r
4
3
2
nitty
2
nitpick
2
nit
36
1
4
3
2

2

4
2
2
Nippon
2
nipple
36
1
4
3
2

2
p
4
1
2
nip
36
1
4
3
2
b
2

4
2
2
niobium
2
Niobe
36
1
4
3
2
en
2

4
2
2
nineteenth
2
nineteen
36
1
4
3
2

2
e
4
2
2
ninety
2
ninetieth
36
1
4
3
2

2
t
4
4
2
Nineveh
2
ninefold
2
ninebark
2
nine
36
1
4
3
2

2
e
4
2
2
ninth
2
Nina
36
1
4
3
2

2

4
2
2
nimbus
2
nimble
36
1
4
3
2

2
b
4
1
2
NIMH
36
1
4
3
2

2

4
3
2
nilpotent
2
Nile
2
nil
36
1
4
3
2

2

4
2
2
Nikolai
2
Nikko
36
1
4
3
2
lis
2

4
2
2
nihilist
2
nihilism
36
1
4
3
2

2
i
4
1
2
NIH
36
1
4
3
2
ar
2

4
2
2
nightmarish
2
nightmare
36
1
4
3
2

2

4
2
2
nightclub
2
nightcap
36
1
4
3
2

2
cm
4
8
2
nighttime
2
nightshirt
2
nightingale
2
nighthawk
2
nightgown
2
nightfall
2
nightdress
2
night
36
1
4
3
2

2
t
4
1
2
nigh
36
1
4
3
2

2

4
3
2
niggle
2
nigger
2
niggardly
36
1
4
3
2
r
2

4
2
2
Nigeria
2
Niger
36
1
4
3
2

2
egh
4
0
36
1
4
3
2
s
2

4
2
2
Nielson
2
Nielsen
36
1
4
3
2

2
l
4
2
2
Nietzsche
2
niece
36
1
4
3
2
in
2

4
2
2
nicotine
2
nicotinamide
36
1
4
3
2

2
t
4
2
2
Nicosia
2
Nicodemus
36
1
4
3
2

2

4
3
2
nickname
2
nickel
2
nick
36
1
4
3
2

2

4
2
2
Nicholson
2
Nichols
36
1
4
3
2
l
2
s
4
2
2
Nicholls
2
Nicholas
36
1
4
3
2

2
o
4
2
2
nichrome
2
niche
36
1
4
3
2

2

4
2
2
nicety
2
nice
36
1
4
3
2

2
ehko
4
1
2
Nicaragua
36
1
4
3
2

2

4
3
2
Nibelung
2
nibble
2
nib
36
1
4
3
2

2

4
3
2
Niamey
2
Niagara
2
niacin
36
1
4
3
2

2
abceghklmnopt
4
2
2
Nixon
2
nirvana
36
1
4
3
2
n
2

4
2
2
Newtonian
2
newton
36
1
4
3
2

2
o
4
2
2
newts
2
newt
36
1
4
3
2

2

4
2
2
newspapermen
2
newspaperman
36
1
4
3
2
aper
2
m
4
1
2
newspaper
36
1
4
3
2

2

4
2
2
newsmen
2
newsman
36
1
4
3
2

2
mp
4
7
2
Newsweek
2
newsstand
2
newsreel
2
newsletter
2
newscast
2
newsboy
2
news
36
1
4
3
2

2

4
2
2
newlywed
2
newline
36
1
4
3
2
ound
2

4
2
2
Newfoundland
2
newfound
36
1
4
3
2

2
l
4
1
2
newest
36
1
4
3
2

2

4
2
2
newcomer
2
Newcastle
36
1
4
3
2
o
2

4
2
2
newborn
2
Newbold
36
1
4
3
2

2
bceflst
4
4
2
Newport
2
Newman
2
Newark
2
new
36
1
4
3
2

2
r
4
1
2
neve
36
1
4
3
2

2

4
2
2
Nevada
2
Neva
36
1
4
3
2

2
ae
4
1
2
Nevins
36
1
4
3
2

2

4
3
2
neutron
2
neutrino
2
neutral
36
1
4
3
2

2
r
4
1
2
neuter
36
1
4
3
2

2

4
2
2
neurosis
2
neuroses
36
1
4
3
2

2

4
3
2
neuropsychiatric
2
neurophysiology
2
neuropathology
36
1
4
3
2

2

4
2
2
neuronal
2
neuron
36
1
4
3
2
n
2
a
4
1
2
neuroanotomy
36
1
4
3
2
tom
2

4
2
2
neuroanatomy
2
neuroanatomic
36
1
4
3
2

2
anps
4
3
2
neurotic
2
neuromuscular
2
neurology
36
1
4
3
2

2
l
4
1
2
neurasthenic
36
1
4
3
2

2

4
2
2
neuralgia
2
neural
36
1
4
3
2

2
ao
4
1
2
neuritis
36
1
4
3
2

2
rt
4
1
2
Neumann
36
1
4
3
2
le
2

4
2
2
nettlesome
2
nettle
36
1
4
3
2
er
2

4
3
2
netherworld
2
Netherlands
2
nether
36
1
4
3
2

2
ht
4
2
2
network
2
net
36
1
4
3
2

2

4
4
2
nested
2
Nestor
2
nestle
2
nest
36
1
4
3
2

2
t
4
1
2
Ness
36
1
4
3
2

2

4
2
2
nervous
2
nerve
36
1
4
3
2

2
v
4
2
2
Nero
2
nereid
36
1
4
3
2
un
2

4
2
2
neptunium
2
Neptune
36
1
4
3
2

2
t
4
3
2
nephew
2
nepenthe
2
Nepal
36
1
4
3
2

2

4
2
2
neoprene
2
neophyte
36
1
4
3
2
t
2

4
2
2
neonate
2
neonatal
36
1
4
3
2

2
a
4
1
2
neon
36
1
4
3
2

2

4
2
2
neologism
2
neolithic
36
1
4
3
2

2
lnp
4
2
2
neodymium
2
neoclassic
36
1
4
3
2

2

4
2
2
Nelson
2
Nelsen
36
1
4
3
2

2

4
2
2
Nellie
2
Nell
36
1
4
3
2

2
ls
4
0
36
1
4
3
2

2

4
2
2
neither
2
Neil
36
1
4
3
2
o
2

4
3
2
Negroid
2
Negroes
2
Negro
36
1
4
3
2
tia
2

4
2
2
negotiate
2
negotiable
36
1
4
3
2

2

4
2
2
negligent
2
negligee
36
1
4
3
2
g
2
e
4
1
2
negligible
36
1
4
3
2

2
i
4
1
2
neglect
36
1
4
3
2

2
lor
4
1
2
negate
36
1
4
3
2
e
2

4
2
2
needlepoint
2
needle
36
1
4
3
2

2
l
4
8
2
needs
2
needing
2
needed
2
needy
2
needn't
2
needham
2
needful
2
need
36
1
4
3
2

2
d
4
1
2
nee
36
1
4
3
2
ar
2

4
4
2
nectary
2
nectarine
2
nectareous
2
nectar
36
1
4
3
2
an
2
c
4
1
2
necromantic
36
1
4
3
2

2

4
2
2
necromancy
2
necromancer
36
1
4
3
2
o
2
m
4
3
2
necrotic
2
necrosis
2
necropsy
36
1
4
3
2

2

4
2
2
neckline
2
necklace
36
1
4
3
2

2
l
4
2
2
necktie
2
neck
36
1
4
3
2
ss
2
i
4
1
2
necessary
36
1
4
3
2
t
2

4
2
2
necessity
2
necessitate
36
1
4
3
2

2
ekrt
4
0
36
1
4
3
2

2

4
3
2
nebular
2
nebulae
2
nebula
36
1
4
3
2
l
2
a
4
1
2
nebulous
36
1
4
3
2

2
u
4
1
2
Nebraska
36
1
4
3
2

2
e
4
2
2
neath
2
neat
36
1
4
3
2

2

4
5
2
nearing
2
nearly
2
nearsighted
2
nearby
2
near
36
1
4
3
2

2
rt
4
3
2
Neapolitan
2
Neanderthal
2
Neal
36
1
4
3
2

2
abcegiloprstuvw
4
6
2
next
2
nemesis
2
Nehru
2
Neff
2
Ned
2
ne
36
1
4
3
2

2

4
2
2
Ndjamena
2
ND
36
1
4
3
2

2

4
4
2
NCR
2
NCO
2
NCAA
2
NC
36
1
4
3
2

2

4
2
2
NBS
2
NBC
36
1
4
3
2

2

4
2
2
Nazism
2
Nazi
36
1
4
3
2
re
2

4
2
2
Nazareth
2
Nazarene
36
1
4
3
2

2
ai
4
0
36
1
4
3
2
ga
2

4
2
2
navigate
2
navigable
36
1
4
3
2

2

4
2
2
navel
2
nave
36
1
4
3
2

2

4
2
2
naval
2
Navajo
36
1
4
3
2

2
aei
4
1
2
navy
36
1
4
3
2
i
2

4
2
2
nautilus
2
nautical
36
1
4
3
2

2

4
2
2
nauseate
2
nausea
36
1
4
3
2
e
2
a
4
1
2
nauseum
36
1
4
3
2

2
st
4
1
2
naughty
36
1
4
3
2
r
2

4
3
2
naturopath
2
nature
2
natural
36
1
4
3
2
n
2

4
4
2
nations
2
national
2
nationwide
2
nation
36
1
4
3
2

2
o
4
1
2
native
36
1
4
3
2
an
2

4
2
2
Nathaniel
2
Nathan
36
1
4
3
2
l
2

4
2
2
Natalie
2
natal
36
1
4
3
2

2
ahiu
4
5
2
natty
2
NATO
2
Natchez
2
Nate
2
Nat
36
1
4
3
2

2

4
2
2
nasty
2
nasturtium
36
1
4
3
2

2

4
3
2
Nashville
2
Nashua
2
Nash
36
1
4
3
2

2

4
2
2
nasal
2
NASA
36
1
4
3
2

2
Aht
4
2
2
Nassau
2
nascent
36
1
4
3
2

2

4
2
2
narrate
2
Narragansett
36
1
4
3
2

2
a
4
1
2
narrow
36
1
4
3
2

2

4
2
2
narcotic
2
narcosis
36
1
4
3
2
ss
2

4
2
2
narcissus
2
narcissist
36
1
4
3
2

2
io
4
0
36
1
4
3
2

2
cr
4
2
2
nary
2
Narbonne
36
1
4
3
2
leon
2

4
2
2
Napoleonic
2
Napoleon
36
1
4
3
2

2
o
4
3
2
Naples
2
napkin
2
nap
36
1
4
3
2

2

4
6
2
Nantucket
2
nanosecond
2
Nanking
2
Nanette
2
Nancy
2
Nan
36
1
4
3
2

2
e
4
1
2
naming
36
1
4
3
2

2

4
2
2
naked
2
Nakayama
36
1
4
3
2
e
2

4
2
2
naivete
2
naive
36
1
4
3
2

2

4
2
2
Nairobi
2
Nair
36
1
4
3
2

2
rv
4
2
2
nail
2
naiad
36
1
4
3
2

2

4
5
2
Nagy
2
Nagoya
2
nagging
2
Nagasaki
2
nag
36
1
4
3
2
i
2

4
2
2
nadir
2
Nadine
36
1
4
3
2

2

4
2
2
Nabisco
2
nab
36
1
4
3
2

2
bdgikmnprstuvz
4
3
2
nay
2
Naomi
2
NAACP
36
1
4
3
2

2
aBCdeiNOuY
4
11
2
NW
2
NV
2
NTIS
2
NSF
2
n's
2
NRC
2
NM
2
NJ
2
NH
2
Nguyen
2
n
36
1
4
3
2
h
2

4
3
2
mythology
2
mythic
2
myth
36
1
4
3
2

2

4
3
2
mystique
2
mystify
2
mystic
36
1
4
3
2
r
2

4
2
2
mystery
2
mysterious
36
1
4
3
2

2
ei
4
0
36
1
4
3
2

2
t
4
1
2
myself
36
1
4
3
2

2

4
5
2
myrtle
2
myrrh
2
Myron
2
myriad
2
Myra
36
1
4
3
2
i
2

4
2
2
myopic
2
myopia
36
1
4
3
2
ardi
2

4
2
2
myocardium
2
myocardial
36
1
4
3
2

2
cp
4
3
2
myosin
2
myoglobin
2
myofibril
36
1
4
3
2

2

4
2
2
Mynheer
2
mynah
36
1
4
3
2

2

4
3
2
myeloid
2
myeline
2
myel
36
1
4
3
2

2
l
4
1
2
Myers
36
1
4
3
2

2

4
2
2
mycology
2
mycobacteria
36
1
4
3
2
nae
2

4
2
2
Mycenaean
2
Mycenae
36
1
4
3
2

2
eo
4
0
36
1
4
3
2

2
cenorst
4
2
2
mylar
2
my
36
1
4
3
2

2

4
3
2
muzzle
2
Muzo
2
Muzak
36
1
4
3
2

2

4
2
2
mutuel
2
mutual
36
1
4
3
2

2

4
3
2
mutton
2
mutter
2
mutt
36
1
4
3
2

2

4
2
2
mutiny
2
mutineer
36
1
4
3
2

2
n
4
1
2
mutilate
36
1
4
3
2

2
nt
4
1
2
mutagen
36
1
4
3
2

2

4
2
2
mutatis
2
mutate
36
1
4
3
2

2

4
2
2
mutant
2
mutandis
36
1
4
3
2

2
aitu
4
1
2
mute
36
1
4
3
2
h
2

4
2
2
mustachio
2
mustache
36
1
4
3
2

2
c
4
2
2
mustard
2
mustang
36
1
4
3
2

2
a
4
3
2
musty
2
mustn't
2
must
36
1
4
3
2
i
2

4
2
2
muslin
2
muslim
36
1
4
3
2
x
2

4
2
2
muskoxen
2
muskox
36
1
4
3
2

2

4
3
2
musket
2
muskellunge
2
Muskegon
36
1
4
3
2

2
eo
4
3
2
muskrat
2
muskmelon
2
musk
36
1
4
3
2
c
2

4
4
2
musicology
2
musician
2
musicale
2
music
36
1
4
3
2

2

4
3
2
mushy
2
mushroom
2
mush
36
1
4
3
2

2

4
2
2
museum
2
muse
36
1
4
3
2

2
ou
4
2
2
muscle
2
Muscat
36
1
4
3
2
la
2

4
2
2
musculature
2
muscular
36
1
4
3
2
v
2

4
2
2
Muscovy
2
Muscovite
36
1
4
3
2

2
cehiklt
4
1
2
mussel
36
1
4
3
2

2

4
2
2
murre
2
Murray
36
1
4
3
2

2

4
2
2
murky
2
murk
36
1
4
3
2

2

4
2
2
Muriel
2
muriatic
36
1
4
3
2
er
2

4
2
2
murderous
2
murder
36
1
4
3
2

2
dikr
4
3
2
Murphy
2
murmur
2
mural
36
1
4
3
2
n
2

4
2
2
Muong
2
muon
36
1
4
3
2

2

4
2
2
municipal
2
Munich
36
1
4
3
2

2
c
4
2
2
munition
2
munificent
36
1
4
3
2

2

4
2
2
Muncie
2
munch
36
1
4
3
2

2
ci
4
3
2
Munson
2
mung
2
mundane
36
1
4
3
2

2

4
4
2
mummy
2
Mumford
2
mumble
2
mum
36
1
4
3
2
ud
2

4
2
2
multitudinous
2
multitude
36
1
4
3
2

2
t
4
1
2
multiplicand
36
1
4
3
2
i
2

4
2
2
multiplicative
2
multiplication
36
1
4
3
2
c
2
a
4
1
2
multiplicity
36
1
4
3
2

2
x
4
2
2
multiplet
2
multiple
36
1
4
3
2

2

4
2
2
multiplexor
2
multiplex
36
1
4
3
2
l
2
ei
4
0
36
1
4
3
2
i
2
pt
4
4
2
multi-purpose
2
multinomial
2
multifarious
2
multi
36
1
4
3
2
a
2

4
2
2
mulligatawny
2
mulligan
36
1
4
3
2

2
g
4
1
2
mullion
36
1
4
3
2

2

4
2
2
Mullen
2
mullein
36
1
4
3
2

2
ei
4
2
2
mullah
2
mull
36
1
4
3
2

2

4
2
2
mulct
2
mulch
36
1
4
3
2

2
clt
4
4
2
mulish
2
mule
2
mulberry
2
mulatto
36
1
4
3
2

2

4
2
2
muggy
2
mugging
36
1
4
3
2

2
g
4
2
2
mugho
2
mug
36
1
4
3
2
f
2

4
3
2
muffle
2
muffin
2
muff
36
1
4
3
2

2

4
2
2
muezzin
2
Mueller
36
1
4
3
2
e
2

4
2
2
muddlehead
2
muddle
36
1
4
3
2

2
l
4
2
2
muddy
2
Mudd
36
1
4
3
2

2
d
4
3
2
mudsling
2
mudguard
2
mud
36
1
4
3
2

2

4
5
2
mucus
2
mucosa
2
muck
2
mucilage
2
much
36
1
4
3
2

2
cdefglmnorstz
4
3
2
Mukden
2
Muir
2
mu
36
1
4
3
2

2
s
4
2
2
mr.
2
Mr
36
1
4
3
2

2
ei
4
0
36
1
4
3
2

2

4
3
2
mouthpiece
2
mouthful
2
mouth
36
1
4
3
2

2
h
4
1
2
Mouton
36
1
4
3
2

2

4
3
2
mousy
2
moustache
2
mouse
36
1
4
3
2
n
2

4
2
2
mournful
2
mourn
36
1
4
3
2
in
2

4
4
2
mountainside
2
mountainous
2
mountaineer
2
mountain
36
1
4
3
2

2
a
4
1
2
mount
36
1
4
3
2

2
t
4
1
2
mound
36
1
4
3
2

2

4
2
2
Moulton
2
mould
36
1
4
3
2

2
lnrst
4
0
36
1
4
3
2

2

4
2
2
motto
2
mottle
36
1
4
3
2
r
2

4
3
2
Motorola
2
motorcycle
2
motor
36
1
4
3
2

2

4
2
2
motive
2
motivate
36
1
4
3
2

2
v
4
2
2
motion
2
motif
36
1
4
3
2
r
2

4
3
2
mothers
2
motherland
2
mother
36
1
4
3
2

2
e
4
1
2
moth
36
1
4
3
2

2

4
2
2
motet
2
motel
36
1
4
3
2

2
ehiot
4
2
2
motley
2
mot
36
1
4
3
2

2

4
2
2
mossy
2
moss
36
1
4
3
2
u
2

4
2
2
mosquito
2
mosque
36
1
4
3
2

2

4
2
2
Moses
2
Moser
36
1
4
3
2

2
eqs
4
4
2
most
2
Moslem
2
Moscow
2
mosaic
36
1
4
3
2

2

4
3
2
mortise
2
mortify
2
mortician
36
1
4
3
2

2

4
2
2
mortgagee
2
mortgage
36
1
4
3
2
ag
2
e
4
1
2
mortgagor
36
1
4
3
2

2

4
2
2
mortar
2
mortal
36
1
4
3
2

2
agi
4
3
2
Morton
2
mortem
2
mort
36
1
4
3
2
e
2

4
2
2
morsel
2
Morse
36
1
4
3
2

2
s
4
1
2
Morrill
36
1
4
3
2

2

4
4
2
Morristown
2
Morrissey
2
Morrison
2
morris
36
1
4
3
2

2
i
4
1
2
morrow
36
1
4
3
2

2

4
2
2
morphophonemic
2
morphology
36
1
4
3
2

2

4
2
2
morphism
2
morphine
36
1
4
3
2
m
2

4
2
2
morphemic
2
morpheme
36
1
4
3
2
h
2
eio
4
0
36
1
4
3
2
c
2

4
2
2
Morocco
2
Moroccan
36
1
4
3
2

2
c
4
2
2
morose
2
moron
36
1
4
3
2

2

4
2
2
moribund
2
Moriarty
36
1
4
3
2

2

4
3
2
morgue
2
morgen
2
Morgan
36
1
4
3
2

2

4
2
2
Moreland
2
morel
36
1
4
3
2

2
l
4
3
2
Moresby
2
moreover
2
more
36
1
4
3
2

2
l
4
5
2
Moravia
2
moratorium
2
morass
2
Moran
2
moraine
36
1
4
3
2

2

4
2
2
morale
2
moral
36
1
4
3
2

2
aegioprst
4
4
2
morn
2
Mormon
2
Morley
2
morbid
36
1
4
3
2

2

4
3
2
Moorish
2
Moore
2
moor
36
1
4
3
2
i
2

4
2
2
moonlit
2
moonlight
36
1
4
3
2

2
l
4
2
2
Mooney
2
moon
36
1
4
3
2

2

4
2
2
moody
2
mood
36
1
4
3
2

2
dnr
4
3
2
moot
2
moose
2
moo
36
1
4
3
2

2

4
2
2
Montreal
2
Montrachet
36
1
4
3
2

2

4
2
2
Montevideo
2
Monteverdi
36
1
4
3
2

2
v
4
3
2
Monterey
2
Montenegrin
2
monte
36
1
4
3
2

2

4
2
2
Montague
2
montage
36
1
4
3
2

2
g
4
1
2
Montana
36
1
4
3
2

2
aerh
4
7
2
Monty
2
Montpelier
2
Montmartre
2
Monticello
2
Montgomery
2
Montclair
2
Mont
36
1
4
3
2
o
2

4
2
2
monstrous
2
monstrosity
36
1
4
3
2

2
r
4
1
2
monster
36
1
4
3
2

2
t
4
3
2
monsoon
2
monsieur
2
Monsanto
36
1
4
3
2
o
2

4
2
2
Monrovia
2
Monroe
36
1
4
3
2

2

4
2
2
monotreme
2
monotonous
36
1
4
3
2
r
2

4
2
2
monomeric
2
monomer
36
1
4
3
2

2
e
4
1
2
monomial
36
1
4
3
2
g
2

4
2
2
monologue
2
monologist
36
1
4
3
2

2
o
4
1
2
monolith
36
1
4
3
2
am
2

4
2
2
monogamy
2
monogamous
36
1
4
3
2

2

4
3
2
monocular
2
monochromator
2
Monoceros
36
1
4
3
2

2
cglmt
4
3
2
monoxide
2
monopoly
2
Monongahela
36
1
4
3
2
y
2

4
2
2
monkeyflower
2
monkey
36
1
4
3
2

2
e
4
2
2
monkish
2
monk
36
1
4
3
2
or
2

4
3
2
monitoring
2
monitory
2
monitor
36
1
4
3
2

2

4
2
2
Monica
2
monic
36
1
4
3
2

2
ct
4
1
2
monies
36
1
4
3
2
o
2

4
2
2
mongoose
2
Mongolia
36
1
4
3
2

2

4
3
2
moneywort
2
moneymake
2
money
36
1
4
3
2
ar
2

4
2
2
monetary
2
monetarism
36
1
4
3
2

2
ty
4
1
2
monel
36
1
4
3
2

2
drs
4
3
2
monaural
2
Monaco
2
Mona
36
1
4
3
2

2

4
2
2
monastic
2
monastery
36
1
4
3
2

2
t
4
1
2
Monash
36
1
4
3
2
ch
2

4
3
2
monarchy
2
monarchic
2
monarch
36
1
4
3
2

2

4
2
2
monadic
2
monad
36
1
4
3
2

2
aegikorst
4
3
2
monument
2
Monmouth
2
Monday
36
1
4
3
2
nt
2
a
4
4
2
moments
2
momentum
2
momentous
2
moment
36
1
4
3
2

2

4
2
2
momentary
2
momenta
36
1
4
3
2

2
e
4
1
2
mommy
36
1
4
3
2
n
2

4
2
2
molybdenum
2
molybdenite
36
1
4
3
2
bd
2
e
4
1
2
molybdate
36
1
4
3
2

2

4
2
2
molten
2
molt
36
1
4
3
2

2

4
2
2
mollycoddle
2
Molly
36
1
4
3
2

2

4
2
2
mollify
2
Mollie
36
1
4
3
2

2
iy
4
2
2
mollusk
2
Moll
36
1
4
3
2

2

4
2
2
Moline
2
Moliere
36
1
4
3
2
ul
2

4
2
2
molecule
2
molecular
36
1
4
3
2

2
c
4
3
2
molest
2
molehill
2
mole
36
1
4
3
2

2

4
3
2
moldboard
2
Moldavia
2
mold
36
1
4
3
2

2

4
3
2
molasses
2
molar
2
molal
36
1
4
3
2

2
adeilty
4
2
2
Moluccas
2
Moloch
36
1
4
3
2

2

4
3
2
moisture
2
moisten
2
moist
36
1
4
3
2

2
t
4
1
2
Moiseyev
36
1
4
3
2

2
s
4
3
2
moire
2
Moines
2
moiety
36
1
4
3
2

2

4
2
2
Mohawk
2
Mohammedan
36
1
4
3
2

2
a
4
1
2
Mohr
36
1
4
3
2

2

4
2
2
Moen
2
Moe
36
1
4
3
2

2

4
2
2
modulate
2
modular
36
1
4
3
2
l
2
a
4
4
2
modulus
2
modulo
2
moduli
2
module
36
1
4
3
2

2
f
4
2
2
modish
2
modicum
36
1
4
3
2
t
2

4
3
2
modesty
2
Modesto
2
modest
36
1
4
3
2

2

4
2
2
modern
2
moderate
36
1
4
3
2

2
rs
4
3
2
modem
2
model
2
mode
36
1
4
3
2

2
eiu
4
1
2
modal
36
1
4
3
2
r
2

4
2
2
mockery
2
mockernut
36
1
4
3
2

2
e
4
3
2
mockup
2
mockingbird
2
mock
36
1
4
3
2

2
k
4
1
2
moccasin
36
1
4
3
2
l
2

4
3
2
mobility
2
mobile
2
Mobil
36
1
4
3
2

2
i
4
3
2
mobster
2
mobcap
2
mob
36
1
4
3
2

2

4
2
2
moat
2
moan
36
1
4
3
2

2
abcdehilmnorstuv
4
6
2
Mozart
2
Moyer
2
mow
2
mop
2
Mogadiscio
2
MO
36
1
4
3
2

2

4
2
2
mnemonic
2
MN
36
1
4
3
2

2

4
3
2
mixup
2
mixture
2
mix
36
1
4
3
2

2

4
2
2
mitten
2
mitt
36
1
4
3
2

2

4
2
2
mitre
2
mitral
36
1
4
3
2

2

4
2
2
mitosis
2
mitochondria
36
1
4
3
2

2

4
2
2
miterwort
2
mite
36
1
4
3
2

2
eort
4
3
2
mitigate
2
Mitchell
2
MIT
36
1
4
3
2

2

4
5
2
mistaken
2
misty
2
mistress
2
mistletoe
2
mist
36
1
4
3
2
u
2

4
2
2
Missouri
2
Missoula
36
1
4
3
2
sippi
2

4
2
2
Mississippian
2
Mississippi
36
1
4
3
2
n
2

4
2
2
missionary
2
mission
36
1
4
3
2

2
os
4
3
2
missing
2
missive
2
missile
36
1
4
3
2

2
iop
4
4
2
missed
2
Missy
2
misshapen
2
miss
36
1
4
3
2
gyn
2

4
2
2
misogyny
2
misogynist
36
1
4
3
2
r
2

4
2
2
misery
2
miser
36
1
4
3
2

2
l
4
1
2
miscegenation
36
1
4
3
2
lan
2

4
2
2
miscellany
2
miscellaneous
36
1
4
3
2

2
e
4
3
2
miscreant
2
mischievous
2
miscible
36
1
4
3
2
nthrop
2

4
2
2
misanthropic
2
misanthrope
36
1
4
3
2

2
aceost
4
2
2
mislaid
2
misnomer
36
1
4
3
2

2
c
4
3
2
Miranda
2
mirage
2
Mira
36
1
4
3
2

2

4
2
2
miraculous
2
miracle
36
1
4
3
2

2
a
4
5
2
mirth
2
mirror
2
Miriam
2
Mirfak
2
mire
36
1
4
3
2

2
m
4
1
2
minute
36
1
4
3
2

2

4
2
2
minutemen
2
minuteman
36
1
4
3
2

2
e
4
1
2
minutiae
36
1
4
3
2

2

4
2
2
minuscule
2
minus
36
1
4
3
2

2

4
2
2
minuet
2
minuend
36
1
4
3
2

2
est
4
0
36
1
4
3
2
rel
2

4
2
2
minstrelsy
2
minstrel
36
1
4
3
2

2

4
2
2
Minsky
2
Minsk
36
1
4
3
2

2
kt
4
0
36
1
4
3
2

2

4
4
2
minot
2
Minos
2
minor
2
Minoan
36
1
4
3
2

2

4
2
2
Minnesota
2
Minneapolis
36
1
4
3
2

2
e
4
2
2
minnow
2
Minnie
36
1
4
3
2
t
2

4
2
2
ministry
2
ministerial
36
1
4
3
2

2

4
3
2
minimax
2
minimal
2
minima
36
1
4
3
2

2
a
4
2
2
minimum
2
minim
36
1
4
3
2

2
ms
4
4
2
minion
2
minicomputer
2
miniature
2
mini
36
1
4
3
2

2

4
2
2
minesweeper
2
minestrone
36
1
4
3
2
l
2

4
2
2
mineralogy
2
mineral
36
1
4
3
2

2
a
4
1
2
Minerva
36
1
4
3
2

2
rs
4
2
2
minefield
2
mine
36
1
4
3
2

2

4
3
2
mindful
2
Mindanao
2
mind
36
1
4
3
2
e
2

4
2
2
mincemeat
2
mince
36
1
4
3
2

2
cdeinosu
4
5
2
mint
2
mink
2
mingle
2
minaret
2
min
36
1
4
3
2

2

4
2
2
mimicking
2
mimicked
36
1
4
3
2

2
k
4
1
2
mimic
36
1
4
3
2

2
c
4
1
2
Mimi
36
1
4
3
2

2

4
3
2
mimetic
2
mimesis
2
mimeograph
36
1
4
3
2

2
ei
4
0
36
1
4
3
2
n
2

4
2
2
Miltonic
2
Milton
36
1
4
3
2

2
o
4
1
2
milt
36
1
4
3
2
n
2

4
4
2
millions
2
millionth
2
millionaire
2
million
36
1
4
3
2

2
o
4
4
2
millipede
2
millinery
2
Millikan
2
Millie
36
1
4
3
2

2
n
4
2
2
millenia
2
millenarian
36
1
4
3
2
i
2

4
2
2
millennium
2
millennia
36
1
4
3
2

2
n
4
1
2
millet
36
1
4
3
2

2
ei
4
3
2
millstone
2
Millard
2
mill
36
1
4
3
2

2

4
3
2
milky
2
milkweed
2
milk
36
1
4
3
2
a
2

4
2
2
militiamen
2
militia
36
1
4
3
2

2
r
4
2
2
militate
2
militant
36
1
4
3
2
s
2

4
2
2
militarist
2
militarism
36
1
4
3
2

2
i
4
1
2
military
36
1
4
3
2

2
ai
4
0
36
1
4
3
2

2
t
4
1
2
milieu
36
1
4
3
2

2

4
2
2
milestone
2
Miles
36
1
4
3
2

2
s
4
2
2
mileage
2
mile
36
1
4
3
2

2

4
3
2
Mildred
2
mildew
2
mild
36
1
4
3
2

2

4
2
2
Milan
2
mila
36
1
4
3
2

2
adeiklt
4
3
2
Milwaukee
2
milord
2
milch
36
1
4
3
2

2

4
2
2
migratory
2
migrate
36
1
4
3
2
a
2
t
4
1
2
migrant
36
1
4
3
2
t
2

4
3
2
mighty
2
mightn't
2
might
36
1
4
3
2

2
hr
4
3
2
Miguel
2
mignon
2
mig
36
1
4
3
2

2

4
3
2
midwives
2
midwinter
2
midwife
36
1
4
3
2
t
2

4
2
2
Midwestern
2
Midwest
36
1
4
3
2

2
s
4
1
2
midweek
36
1
4
3
2

2
ei
4
1
2
midway
36
1
4
3
2

2

4
2
2
midstream
2
midst
36
1
4
3
2
ipm
2

4
2
2
midshipmen
2
midshipman
36
1
4
3
2

2
ht
4
3
2
midspan
2
midsection
2
midscale
36
1
4
3
2
e
2

4
2
2
midget
2
midge
36
1
4
3
2
o
2

4
2
2
Middletown
2
Middleton
36
1
4
3
2

2

4
2
2
middlemen
2
middleman
36
1
4
3
2
e
2
mt
4
4
2
middleweight
2
Middlesex
2
Middlebury
2
middle
36
1
4
3
2

2
l
4
1
2
midday
36
1
4
3
2

2
dgsw
4
9
2
midterm
2
midrange
2
midpoint
2
midnight
2
midmorn
2
midland
2
midband
2
Midas
2
mid
36
1
4
3
2

2

4
2
2
Micronesia
2
micron
36
1
4
3
2
o
2
n
4
5
2
microscopy
2
micrography
2
microcosm
2
microbial
2
micro
36
1
4
3
2

2

4
2
2
Mickey
2
Mickelson
36
1
4
3
2

2
e
4
1
2
Micky
36
1
4
3
2
l
2

4
5
2
Michelson
2
Michelin
2
Michele
2
Michelangelo
2
Michel
36
1
4
3
2
el
2

4
2
2
Michaelangelo
2
Michael
36
1
4
3
2

2
ae
4
1
2
michigan
36
1
4
3
2

2
hkr
4
2
2
mice
2
mica
36
1
4
3
2
ma
2

4
2
2
miasmal
2
miasma
36
1
4
3
2

2
s
4
1
2
Miami
36
1
4
3
2

2
acdglmnrstx
4
6
2
Mizar
2
Miocene
2
mike
2
miff
2
mien
2
mi
36
1
4
3
2
ic
2

4
2
2
Mexico
2
Mexican
36
1
4
3
2
le
2

4
2
2
mettlesome
2
mettle
36
1
4
3
2
oli
2

4
2
2
metropolitan
2
metropolis
36
1
4
3
2

2
p
4
2
2
metronome
2
metro
36
1
4
3
2

2
o
4
1
2
metric
36
1
4
3
2

2

4
2
2
metier
2
meticulous
36
1
4
3
2
l
2

4
2
2
methylene
2
methyl
36
1
4
3
2

2

4
2
2
Methuselah
2
Methuen
36
1
4
3
2
d
2

4
4
2
methods
2
methodology
2
methodic
2
method
36
1
4
3
2

2
n
4
1
2
methacrylate
36
1
4
3
2

2

4
2
2
methanol
2
methane
36
1
4
3
2

2
aouy
4
1
2
methionine
36
1
4
3
2

2

4
2
2
meteoritic
2
meteorite
36
1
4
3
2

2
t
4
1
2
meteoric
36
1
4
3
2
r
2
i
4
2
2
meteorology
2
meteor
36
1
4
3
2

2
o
4
2
2
meter
2
mete
36
1
4
3
2
hor
2

4
2
2
metaphoric
2
metaphor
36
1
4
3
2
s
2

4
2
2
metamorphosis
2
metamorphose
36
1
4
3
2

2

4
2
2
metamorphism
2
metamorphic
36
1
4
3
2
orph
2
io
4
0
36
1
4
3
2

2

4
2
2
metallurgist
2
metallurgic
36
1
4
3
2
rg
2
i
4
1
2
metallurgy
36
1
4
3
2

2

4
2
2
metalloid
2
metallography
36
1
4
3
2

2

4
2
2
metalliferous
2
metallic
36
1
4
3
2

2
iou
4
0
36
1
4
3
2

2
l
4
2
2
metalwork
2
metal
36
1
4
3
2
ol
2
i
4
1
2
metabole
36
1
4
3
2

2

4
3
2
metabolite
2
metabolism
2
metabolic
36
1
4
3
2

2
blmp
4
0
36
1
4
3
2

2
aehirt
4
3
2
Metzler
2
Metcalf
2
met
36
1
4
3
2

2

4
2
2
messieurs
2
Messiah
36
1
4
3
2

2
ia
4
4
2
messy
2
Messrs
2
messenger
2
mess
36
1
4
3
2

2

4
4
2
Mesozoic
2
Mesopotamia
2
meson
2
mesoderm
36
1
4
3
2
al
2

4
2
2
mescaline
2
mescal
36
1
4
3
2

2
cos
4
5
2
mesquite
2
mesmeric
2
mesh
2
mesenteric
2
mesa
36
1
4
3
2

2

4
2
2
merrymake
2
merry
36
1
4
3
2

2
m
4
3
2
Merritt
2
Merrill
2
Merriam
36
1
4
3
2

2

4
2
2
merriment
2
Merrimack
36
1
4
3
2

2
iy
4
0
36
1
4
3
2

2

4
2
2
merlin
2
Merle
36
1
4
3
2

2

4
2
2
meritorious
2
merit
36
1
4
3
2
i
2

4
2
2
meridional
2
meridian
36
1
4
3
2

2
dt
4
1
2
meringue
36
1
4
3
2

2

4
2
2
merge
2
merganser
36
1
4
3
2

2

4
4
2
merely
2
meretricious
2
Meredith
2
mere
36
1
4
3
2

2
aehu
4
3
2
mercy
2
Merck
2
merciful
36
1
4
3
2

2

4
2
2
mercuric
2
mercurial
36
1
4
3
2
r
2
i
4
1
2
mercury
36
1
4
3
2
an
2

4
2
2
merchant
2
merchandise
36
1
4
3
2

2

4
3
2
mercer
2
mercenary
2
Mercedes
36
1
4
3
2

2

4
2
2
Mercator
2
mercantile
36
1
4
3
2

2
cegilr
4
2
2
Mervin
2
mermaid
36
1
4
3
2

2
i
4
2
2
mentor
2
mental
36
1
4
3
2
ra
2

4
2
2
mensuration
2
mensurable
36
1
4
3
2

2
u
4
1
2
menstruate
36
1
4
3
2

2

4
3
2
meniscus
2
meningitis
2
menial
36
1
4
3
2
l
2

4
3
2
Mendelssohn
2
mendelevium
2
Mendel
36
1
4
3
2
ci
2

4
2
2
mendacity
2
mendacious
36
1
4
3
2

2
ae
4
1
2
mend
36
1
4
3
2

2

4
3
2
menarche
2
menagerie
2
menace
36
1
4
3
2

2
adist
4
8
2
Menzies
2
menu
2
Mennonite
2
Menlo
2
menhaden
2
menfolk
2
Menelaus
2
men
36
1
4
3
2

2
bn
4
0
36
1
4
3
2
d
2

4
2
2
memorandum
2
memoranda
36
1
4
3
2

2

4
2
2
memorable
2
memorabilia
36
1
4
3
2

2
a
4
2
2
memory
2
memorial
36
1
4
3
2

2
r
4
2
2
memoir
2
memo
36
1
4
3
2

2
e
4
1
2
membrane
36
1
4
3
2

2
bo
4
2
2
Memphis
2
memento
36
1
4
3
2
i
2

4
2
2
Melvin
2
Melville
36
1
4
3
2

2
ir
4
1
2
melody
36
1
4
3
2
ama
2

4
2
2
melodramatic
2
melodrama
36
1
4
3
2

2

4
2
2
melodious
2
melodic
36
1
4
3
2

2
d
4
1
2
melon
36
1
4
3
2
o
2

4
2
2
mellow
2
Mellon
36
1
4
3
2

2

4
3
2
Melissa
2
meliorate
2
Melinda
36
1
4
3
2

2

4
2
2
melanin
2
Melanie
36
1
4
3
2

2
i
4
4
2
melanoma
2
melange
2
Melanesia
2
melancholy
36
1
4
3
2

2
n
4
1
2
melamine
36
1
4
3
2

2
ailov
4
7
2
melt
2
Melpomene
2
melee
2
meld
2
Melcher
2
Melbourne
2
Mel
36
1
4
3
2

2

4
3
2
Meistersinger
2
meiosis
2
Meier
36
1
4
3
2

2

4
2
2
megaword
2
megawatt
36
1
4
3
2
omania
2

4
2
2
megalomaniac
2
megalomania
36
1
4
3
2

2

4
2
2
megabyte
2
megabit
36
1
4
3
2

2
blw
4
3
2
megavolt
2
megaton
2
megahertz
36
1
4
3
2

2
a
4
2
2
megohm
2
Meg
36
1
4
3
2

2
i
4
2
2
meets
2
meet
36
1
4
3
2

2
t
4
1
2
meek
36
1
4
3
2

2

4
2
2
medley
2
medlar
36
1
4
3
2

2

4
2
2
Mediterranean
2
meditate
36
1
4
3
2
cr
2

4
2
2
mediocrity
2
mediocre
36
1
4
3
2

2

4
2
2
medicine
2
medicinal
36
1
4
3
2

2
n
4
1
2
Medici
36
1
4
3
2

2
ia
4
2
2
medico
2
medic
36
1
4
3
2

2

4
4
2
mediate
2
median
2
medial
2
media
36
1
4
3
2

2
acot
4
1
2
medium
36
1
4
3
2
l
2

4
2
2
medallion
2
medal
36
1
4
3
2

2
ail
4
4
2
Medusa
2
Medford
2
Medea
2
meddle
36
1
4
3
2

2

4
2
2
mechanist
2
mechanism
36
1
4
3
2
ani
2
s
4
1
2
mechanic
36
1
4
3
2

2
h
4
2
2
mecum
2
Mecca
36
1
4
3
2

2

4
2
2
meaty
2
meat
36
1
4
3
2

2

4
2
2
measure
2
measle
36
1
4
3
2

2

4
2
2
meantime
2
meant
36
1
4
3
2

2
t
4
5
2
means
2
meanwhile
2
meaningful
2
meander
2
mean
36
1
4
3
2

2

4
3
2
mealy
2
mealtime
2
meal
36
1
4
3
2

2
o
4
1
2
mead
36
1
4
3
2
w
2

4
3
2
meadowsweet
2
meadowland
2
meadow
36
1
4
3
2

2
dlnst
4
1
2
meager
36
1
4
3
2

2
acdegilmnrstx
4
6
2
mezzo
2
Meyer
2
mew
2
Mephistopheles
2
Mekong
2
me
36
1
4
3
2

2

4
2
2
McNaughton
2
McNally
36
1
4
3
2

2
a
4
2
2
McNulty
2
McNeil
36
1
4
3
2

2

4
3
2
McMullen
2
McMillan
2
McMahon
36
1
4
3
2

2

4
2
2
McLeod
2
McLean
36
1
4
3
2

2
e
4
1
2
McLaughlin
36
1
4
3
2
n
2

4
2
2
McKinney
2
McKinley
36
1
4
3
2

2

4
2
2
McKenzie
2
McKenna
36
1
4
3
2

2
n
4
3
2
McKesson
2
McKeon
2
McKee
36
1
4
3
2

2
ei
4
2
2
McKnight
2
McKay
36
1
4
3
2
nt
2

4
2
2
McIntyre
2
McIntosh
36
1
4
3
2

2

4
2
2
McGraw
2
McGrath
36
1
4
3
2

2
a
4
1
2
McGregor
36
1
4
3
2

2

4
2
2
McGowan
2
McGovern
36
1
4
3
2

2

4
2
2
McGinnis
2
McGill
36
1
4
3
2

2
ior
4
2
2
McGuire
2
McGee
36
1
4
3
2
a
2

4
2
2
McFarland
2
McFadden
36
1
4
3
2

2

4
2
2
McDonnell
2
McDonald
36
1
4
3
2

2
n
4
2
2
McDowell
2
McDougall
36
1
4
3
2

2
o
4
2
2
McDermott
2
McDaniel
36
1
4
3
2
nel
2

4
2
2
McConnell
2
McConnel
36
1
4
3
2

2
n
4
2
2
McCoy
2
McCormick
36
1
4
3
2

2

4
2
2
McCluskey
2
McClure
36
1
4
3
2

2
u
4
2
2
McClellan
2
McClain
36
1
4
3
2

2
lr
4
3
2
McCauley
2
McCann
2
McCabe
36
1
4
3
2
t
2

4
2
2
McCarty
2
McCarthy
36
1
4
3
2
l
2

4
2
2
McCallum
2
McCall
36
1
4
3
2

2
alo
4
2
2
McCullough
2
McCracken
36
1
4
3
2

2

4
2
2
McAllister
2
McAdams
36
1
4
3
2

2
ACDFGIKLMN
4
4
2
McPherson
2
McHugh
2
McElroy
2
McBride
36
1
4
3
2
A
2

4
2
2
Mbabane
2
MBA
36
1
4
3
2

2

4
3
2
mazurka
2
maze
2
Mazda
36
1
4
3
2

2

4
2
2
mayoral
2
mayor
36
1
4
3
2

2
r
4
2
2
mayonnaise
2
Mayo
36
1
4
3
2

2

4
2
2
Mayflower
2
Mayfair
36
1
4
3
2

2

4
2
2
mayapple
2
Maya
36
1
4
3
2

2
afo
4
6
2
mayst
2
Maynard
2
mayhem
2
Mayer
2
maybe
2
may
36
1
4
3
2
ell
2

4
2
2
Maxwellian
2
maxwell
36
1
4
3
2

2
a
4
3
2
maximum
2
Maximilian
2
maxim
36
1
4
3
2

2

4
2
2
maximal
2
maxima
36
1
4
3
2

2
m
4
1
2
Maxine
36
1
4
3
2

2
iw
4
1
2
max
36
1
4
3
2

2

4
3
2
Mawr
2
mawkish
2
maw
36
1
4
3
2

2

4
2
2
Mavis
2
maverick
36
1
4
3
2

2

4
2
2
Mauritius
2
Mauritania
36
1
4
3
2

2

4
2
2
Mauricio
2
Maurice
36
1
4
3
2

2
ct
4
1
2
Maurine
36
1
4
3
2

2
i
4
1
2
Maureen
36
1
4
3
2

2
r
4
4
2
mauve
2
mausoleum
2
maul
2
maudlin
36
1
4
3
2
r
2

4
2
2
mature
2
maturate
36
1
4
3
2

2
e
4
4
2
Mattson
2
mattress
2
mattock
2
Matthew
36
1
4
3
2

2

4
2
2
Matsumoto
2
Matson
36
1
4
3
2

2

4
2
2
matron
2
matroid
36
1
4
3
2

2
acm
4
1
2
matrix
36
1
4
3
2
on
2

4
2
2
matrimony
2
matrimonial
36
1
4
3
2

2

4
2
2
matriculate
2
matrices
36
1
4
3
2
rch
2

4
2
2
matriarchal
2
matriarch
36
1
4
3
2

2
io
4
0
36
1
4
3
2

2

4
3
2
matins
2
matinee
2
matinal
36
1
4
3
2

2
n
4
2
2
Matisse
2
Matilda
36
1
4
3
2

2

4
2
2
Mathieu
2
Mathias
36
1
4
3
2
s
2

4
2
2
Mathewson
2
Mathews
36
1
4
3
2
ati
2
c
4
1
2
Mathematik
36
1
4
3
2

2

4
2
2
mathematician
2
mathematic
36
1
4
3
2

2
mw
4
0
36
1
4
3
2

2
ei
4
1
2
math
36
1
4
3
2

2

4
2
2
maternity
2
maternal
36
1
4
3
2

2

4
2
2
materiel
2
material
36
1
4
3
2

2
in
4
1
2
mater
36
1
4
3
2

2
r
4
2
2
Mateo
2
mate
36
1
4
3
2
h
2

4
4
2
matching
2
matchmake
2
matchbook
2
match
36
1
4
3
2

2
cehirstu
4
1
2
mat
36
1
4
3
2

2

4
2
2
mastiff
2
mastic
36
1
4
3
2
r
2

4
6
2
masters
2
mastery
2
masterpiece
2
mastermind
2
masterful
2
master
36
1
4
3
2

2
ei
4
3
2
masturbate
2
mastodon
2
mast
36
1
4
3
2

2

4
2
2
massive
2
massif
36
1
4
3
2

2

4
2
2
Massey
2
masseur
36
1
4
3
2

2

4
2
2
massacre
2
Massachusetts
36
1
4
3
2

2
c
4
1
2
massage
36
1
4
3
2

2
aei
4
1
2
mass
36
1
4
3
2
ue
2

4
2
2
masquerade
2
masque
36
1
4
3
2

2

4
2
2
Masonite
2
Masonic
36
1
4
3
2

2
i
4
2
2
masonry
2
mason
36
1
4
3
2
his
2

4
2
2
masochist
2
masochism
36
1
4
3
2

2
cn
4
0
36
1
4
3
2
r
2

4
2
2
Maseru
2
maser
36
1
4
3
2

2

4
2
2
masculine
2
mascara
36
1
4
3
2

2
ceoqst
4
2
2
mask
2
mash
36
1
4
3
2

2

4
2
2
Maryland
2
Mary
36
1
4
3
2
l
2

4
2
2
marvelous
2
marvel
36
1
4
3
2

2
e
4
1
2
Marvin
36
1
4
3
2

2

4
2
2
martyrdom
2
martyr
36
1
4
3
2

2
r
4
1
2
Marty
36
1
4
3
2

2

4
2
2
Martinique
2
martini
36
1
4
3
2

2
i
4
4
2
Martinson
2
martingale
2
Martinez
2
martin
36
1
4
3
2

2

4
2
2
Martian
2
martial
36
1
4
3
2

2
an
4
0
36
1
4
3
2
n
2

4
2
2
martensite
2
marten
36
1
4
3
2

2
eiy
4
2
2
Martha
2
mart
36
1
4
3
2

2

4
2
2
Marshall
2
marshal
36
1
4
3
2

2
l
4
1
2
Marsha
36
1
4
3
2

2
a
4
3
2
marshmallow
2
marshland
2
marsh
36
1
4
3
2

2
h
4
2
2
marsupial
2
Marseilles
36
1
4
3
2
w
2

4
2
2
marrowbone
2
marrow
36
1
4
3
2

2
a
4
2
2
Marriott
2
Marrietta
36
1
4
3
2
ge
2

4
2
2
marriageable
2
marriage
36
1
4
3
2

2
io
4
1
2
marry
36
1
4
3
2

2

4
4
2
Marquette
2
marquess
2
marquee
2
marque
36
1
4
3
2
u
2
e
4
1
2
marquis
36
1
4
3
2

2

4
2
2
marmot
2
marmalade
36
1
4
3
2
oro
2

4
2
2
Marlborough
2
Marlboro
36
1
4
3
2

2
b
4
3
2
Marlowe
2
marlin
2
Marlene
36
1
4
3
2
m
2

4
2
2
marksmen
2
marksman
36
1
4
3
2
v
2

4
2
2
Markovian
2
Markov
36
1
4
3
2
t
2
e
4
5
2
markets
2
marketing
2
marketwise
2
marketplace
2
market
36
1
4
3
2

2
eos
4
2
2
Markham
2
mark
36
1
4
3
2
or
2

4
3
2
Marjory
2
Marjorie
2
marjoram
36
1
4
3
2

2

4
2
2
maritime
2
marital
36
1
4
3
2

2

4
2
2
marionette
2
Marion
36
1
4
3
2

2
n
4
1
2
Mario
36
1
4
3
2

2

4
3
2
marinate
2
marinade
2
marina
36
1
4
3
2

2
a
4
3
2
Marino
2
marine
2
Marin
36
1
4
3
2

2

4
2
2
Marietta
2
Marie
36
1
4
3
2

2

4
2
2
Marianne
2
maria
36
1
4
3
2

2
aenot
4
4
2
marimba
2
Marilyn
2
marijuana
2
marigold
36
1
4
3
2
l
2

4
2
2
marginalia
2
marginal
36
1
4
3
2
n
2
a
4
1
2
margin
36
1
4
3
2
r
2

4
2
2
margarine
2
Margaret
36
1
4
3
2

2
ai
4
3
2
Marguerite
2
Margo
2
Margery
36
1
4
3
2

2

4
2
2
Marcello
2
Marcel
36
1
4
3
2

2
l
4
1
2
Marceau
36
1
4
3
2

2
e
4
6
2
Marcy
2
Marcus
2
Marco
2
Marcia
2
march
2
Marc
36
1
4
3
2

2

4
2
2
maraud
2
marathon
36
1
4
3
2

2
acgijklmqrstvy
4
6
2
Marx
2
maroon
2
mare
2
Mardi
2
marble
2
mar
36
1
4
3
2

2

4
2
2
maple
2
map
36
1
4
3
2

2

4
2
2
Maori
2
Mao
36
1
4
3
2

2

4
2
2
manumitted
2
manumit
36
1
4
3
2
i
2
t
4
1
2
manumission
36
1
4
3
2

2
m
4
5
2
manuscript
2
manure
2
manufacture
2
Manuel
2
manual
36
1
4
3
2
e
2

4
2
2
mantlepiece
2
mantle
36
1
4
3
2

2

4
2
2
mantissa
2
mantis
36
1
4
3
2

2
s
4
1
2
mantic
36
1
4
3
2

2
il
4
2
2
mantrap
2
mantel
36
1
4
3
2

2

4
2
2
manservant
2
manse
36
1
4
3
2

2
e
4
3
2
manslaughter
2
mansion
2
Mansfield
36
1
4
3
2

2

4
2
2
manor
2
manometer
36
1
4
3
2

2
e
4
2
2
manna
2
Mann
36
1
4
3
2
ula
2

4
2
2
manipulate
2
manipulable
36
1
4
3
2
st
2

4
2
2
manifestation
2
manifest
36
1
4
3
2

2
e
4
1
2
manifold
36
1
4
3
2

2
c
4
1
2
mania
36
1
4
3
2

2

4
2
2
maniacal
2
maniac
36
1
4
3
2

2
afp
4
4
2
Manitoba
2
Manila
2
manikin
2
manic
36
1
4
3
2

2

4
2
2
manhole
2
Manhattan
36
1
4
3
2

2

4
2
2
mangel
2
mange
36
1
4
3
2

2
e
4
2
2
mangle
2
manganese
36
1
4
3
2

2

4
2
2
maneuver
2
mane
36
1
4
3
2

2

4
3
2
mandrill
2
mandrel
2
mandrake
36
1
4
3
2

2
t
4
2
2
mandarin
2
mandamus
36
1
4
3
2

2

4
2
2
mandatory
2
mandate
36
1
4
3
2

2
ar
4
0
36
1
4
3
2

2
r
4
5
2
manages
2
management
2
managed
2
manageable
2
manage
36
1
4
3
2

2
e
4
2
2
managing
2
Managua
36
1
4
3
2

2
g
4
3
2
manatee
2
Manama
2
mana
36
1
4
3
2

2
adeghinostu
4
9
2
manzanita
2
many
2
Manville
2
manpower
2
Manley
2
mankind
2
Manfred
2
Manchester
2
man
36
1
4
3
2

2
l
4
1
2
mamma
36
1
4
3
2

2

4
2
2
mammalian
2
mammal
36
1
4
3
2

2
a
4
1
2
mammoth
36
1
4
3
2

2
m
4
1
2
mambo
36
1
4
3
2

2

4
2
2
maltose
2
Malton
36
1
4
3
2

2
o
4
4
2
maltreat
2
Maltese
2
Malta
2
malt
36
1
4
3
2

2

4
2
2
malpractice
2
malposed
36
1
4
3
2
e
2

4
2
2
Maloney
2
Malone
36
1
4
3
2

2
n
4
1
2
malocclusion
36
1
4
3
2

2

4
2
2
malnutrition
2
malnourished
36
1
4
3
2

2

4
2
2
mallow
2
Mallory
36
1
4
3
2

2

4
2
2
mallet
2
malleable
36
1
4
3
2

2
eo
4
2
2
mallard
2
mall
36
1
4
3
2
n
2

4
2
2
malignant
2
malign
36
1
4
3
2

2

4
2
2
malicious
2
malice
36
1
4
3
2

2
cg
4
1
2
Mali
36
1
4
3
2
rm
2

4
2
2
malformed
2
malformation
36
1
4
3
2

2
o
4
2
2
malfunction
2
malfeasant
36
1
4
3
2

2

4
3
2
malevolent
2
maledict
2
male
36
1
4
3
2

2

4
2
2
Maldive
2
maldistribute
36
1
4
3
2

2
i
4
1
2
Malden
36
1
4
3
2

2

4
2
2
malcontent
2
malconduct
36
1
4
3
2
o
2
n
4
1
2
Malcolm
36
1
4
3
2

2
dry
4
5
2
Malawi
2
malaprop
2
malaise
2
Malagasy
2
Malabar
36
1
4
3
2

2

4
2
2
Malaysia
2
Malay
36
1
4
3
2
ia
2

4
2
2
malarial
2
malaria
36
1
4
3
2
pt
2

4
2
2
maladaptive
2
maladapt
36
1
4
3
2

2
a
4
3
2
malady
2
maladroit
2
maladjust
36
1
4
3
2

2
acdefilnopt
4
1
2
Malraux
36
1
4
3
2

2
e
4
1
2
making
36
1
4
3
2
st
2

4
2
2
majesty
2
majestic
36
1
4
3
2

2
e
4
1
2
major
36
1
4
3
2

2

4
2
2
maintenance
2
maintain
36
1
4
3
2
t
2

4
2
2
mainstream
2
mainstay
36
1
4
3
2

2

4
3
2
mainly
2
mainline
2
mainland
36
1
4
3
2

2
lst
4
2
2
Maine
2
main
36
1
4
3
2

2

4
2
2
mailmen
2
mailman
36
1
4
3
2

2
m
4
3
2
mailing
2
mailbox
2
mail
36
1
4
3
2

2
e
4
2
2
maidservant
2
maid
36
1
4
3
2
n
2

4
2
2
maidenhair
2
maiden
36
1
4
3
2

2
dln
4
3
2
maitre
2
maim
2
Maier
36
1
4
3
2

2

4
2
2
Mahoney
2
mahogany
36
1
4
3
2
yan
2

4
2
2
Mahayanist
2
Mahayana
36
1
4
3
2

2
ao
4
0
36
1
4
3
2

2

4
2
2
Magnuson
2
magnum
36
1
4
3
2

2

4
2
2
magnify
2
magnificent
36
1
4
3
2

2
f
4
1
2
magnitude
36
1
4
3
2

2

4
2
2
magnetite
2
magnetic
36
1
4
3
2

2
i
4
3
2
magnetron
2
magneto
2
magnet
36
1
4
3
2
i
2

4
3
2
magnesium
2
magnesite
2
magnesia
36
1
4
3
2

2
st
4
0
36
1
4
3
2

2
n
4
2
2
magnate
2
magna
36
1
4
3
2
im
2

4
2
2
magnanimous
2
magnanimity
36
1
4
3
2

2
aeiu
4
1
2
magnolia
36
1
4
3
2
t
2

4
2
2
magistrate
2
magisterial
36
1
4
3
2

2

4
2
2
magician
2
magic
36
1
4
3
2

2
cs
4
1
2
magi
36
1
4
3
2
t
2

4
2
2
maggoty
2
maggot
36
1
4
3
2

2
o
4
1
2
Maggie
36
1
4
3
2

2
gin
4
7
2
Magruder
2
magpie
2
Magog
2
magma
2
magenta
2
Magdalene
2
magazine
36
1
4
3
2

2

4
3
2
maestro
2
Maelstrom
2
Mae
36
1
4
3
2

2

4
2
2
madstone
2
Madsen
36
1
4
3
2

2

4
2
2
madrigal
2
Madrid
36
1
4
3
2

2
i
4
1
2
Madras
36
1
4
3
2

2

4
2
2
madmen
2
madman
36
1
4
3
2

2

4
2
2
Madeline
2
Madeleine
36
1
4
3
2

2
l
4
2
2
Madeira
2
made
36
1
4
3
2

2

4
2
2
Maddox
2
madden
36
1
4
3
2

2

4
2
2
Madame
2
madam
36
1
4
3
2

2
m
4
1
2
Madagascar
36
1
4
3
2

2
ademrs
4
5
2
Madonna
2
Madison
2
madhouse
2
madcap
2
mad
36
1
4
3
2

2

4
2
2
macrostructure
2
macroscopic
36
1
4
3
2
olecul
2

4
2
2
macromolecule
2
macromolecular
36
1
4
3
2
o
2
ms
4
2
2
macrophage
2
macro
36
1
4
3
2

2

4
2
2
Mackinaw
2
Mackinac
36
1
4
3
2
n
2
a
4
1
2
mackintosh
36
1
4
3
2

2

4
3
2
Mackey
2
mackerel
2
MacKenzie
36
1
4
3
2

2
ei
4
1
2
mack
36
1
4
3
2

2

4
2
2
machinery
2
machine
36
1
4
3
2

2
e
4
1
2
machination
36
1
4
3
2

2
n
4
2
2
machismo
2
Machiavelli
36
1
4
3
2

2
i
4
2
2
macho
2
Mach
36
1
4
3
2
on
2

4
2
2
Macedonia
2
Macedon
36
1
4
3
2

2
d
4
1
2
mace
36
1
4
3
2
o
2

4
2
2
MacDougall
2
MacDonald
36
1
4
3
2

2

4
4
2
Macassar
2
MacArthur
2
macaque
2
macabre
36
1
4
3
2

2
aDehKr
4
6
2
Macon
2
MacMillan
2
macintosh
2
MacGregor
2
Macbeth
2
Mac
36
1
4
3
2

2
cdeghijklmnoprstuvwxyz
4
2
2
Mabel
2
ma
36
1
4
3
2

2
abceinoruys
4
5
2
Mt
2
m's
2
MPH
2
MD
2
m
36
1
4
3
2

2

4
2
2
lysergic
2
Lysenko
36
1
4
3
2

2
e
4
1
2
lysine
36
1
4
3
2

2

4
2
2
lyric
2
Lyra
36
1
4
3
2
h
2

4
2
2
Lynchburg
2
lynch
36
1
4
3
2

2
c
4
2
2
lynx
2
Lynn
36
1
4
3
2

2

4
2
2
lymphoma
2
lymphocyte
36
1
4
3
2
h
2
o
4
1
2
lymph
36
1
4
3
2

2
p
4
1
2
Lyman
36
1
4
3
2

2
mnrs
4
7
2
Lyon
2
Lyle
2
Lykes
2
lying
2
lye
2
Lydia
2
lycopodium
36
1
4
3
2

2
a
4
1
2
luxurious
36
1
4
3
2

2

4
2
2
luxuriate
2
luxuriant
36
1
4
3
2
r
2
i
4
1
2
luxury
36
1
4
3
2

2

4
2
2
Luxembourg
2
luxe
36
1
4
3
2

2
eu
4
1
2
lux
36
1
4
3
2
er
2

4
2
2
Lutheran
2
Luther
36
1
4
3
2

2

4
2
2
lutetium
2
lute
36
1
4
3
2

2
eh
4
2
2
Lutz
2
lutanist
36
1
4
3
2

2

4
4
2
lusty
2
lustrous
2
lustful
2
lust
36
1
4
3
2

2
t
4
3
2
lush
2
luscious
2
Lusaka
36
1
4
3
2

2

4
5
2
lurk
2
lurid
2
lure
2
lurch
2
Lura
36
1
4
3
2

2

4
2
2
lunge
2
lung
36
1
4
3
2

2

4
3
2
Lundquist
2
Lundberg
2
Lund
36
1
4
3
2
h
2

4
4
2
lunchtime
2
lunchroom
2
luncheon
2
lunch
36
1
4
3
2

2
rt
4
1
2
lunacy
36
1
4
3
2

2

4
2
2
lunatic
2
lunate
36
1
4
3
2

2

4
2
2
lunary
2
lunar
36
1
4
3
2

2
acdg
4
0
36
1
4
3
2

2

4
4
2
lumpy
2
Lumpur
2
lumpish
2
lump
36
1
4
3
2

2

4
2
2
luminous
2
luminosity
36
1
4
3
2

2

4
2
2
luminary
2
luminance
36
1
4
3
2
n
2
ao
4
1
2
luminescent
36
1
4
3
2

2
e
4
1
2
lumbar
36
1
4
3
2

2

4
2
2
lumbermen
2
lumberman
36
1
4
3
2
r
2
m
4
1
2
lumber
36
1
4
3
2

2
bip
4
2
2
lummox
2
lumen
36
1
4
3
2

2

4
2
2
lullaby
2
lull
36
1
4
3
2

2
l
4
1
2
lulu
36
1
4
3
2
e
2

4
3
2
lukewarm
2
lukemia
2
luke
36
1
4
3
2

2

4
2
2
lugging
2
luggage
36
1
4
3
2

2

4
2
2
luger
2
luge
36
1
4
3
2

2
eg
4
1
2
lug
36
1
4
3
2
t
2

4
2
2
Luftwaffe
2
Lufthansa
36
1
4
3
2

2

4
3
2
Ludwig
2
Ludlow
2
ludicrous
36
1
4
3
2
i
2

4
2
2
Lucretius
2
Lucretia
36
1
4
3
2

2
t
4
1
2
lucre
36
1
4
3
2

2
e
4
1
2
lucrative
36
1
4
3
2

2

4
2
2
lucky
2
luck
36
1
4
3
2

2

4
2
2
Lucian
2
Lucia
36
1
4
3
2

2
a
4
4
2
Lucius
2
Lucille
2
Lucifer
2
lucid
36
1
4
3
2

2
ikr
4
3
2
lucy
2
Lucerne
2
Lucas
36
1
4
3
2

2
r
4
2
2
Lubell
2
Lubbock
36
1
4
3
2

2

4
2
2
lubricity
2
lubricious
36
1
4
3
2

2

4
2
2
lubricate
2
lubricant
36
1
4
3
2
ic
2
ai
4
0
36
1
4
3
2

2
bcdfgklmnrstx
4
3
2
Luzon
2
lupine
2
Luis
36
1
4
3
2

2

4
3
2
L'vov
2
l's
2
l'oeil
36
1
4
3
2
l
2

4
2
2
loyalty
2
loyal
36
1
4
3
2

2
a
4
1
2
loy
36
1
4
3
2

2

4
3
2
lower
2
Lowell
2
Lowe
36
1
4
3
2

2
e
4
5
2
Lowry
2
lowland
2
lowdown
2
lowboy
2
low
36
1
4
3
2

2

4
2
2
Loveland
2
Lovelace
36
1
4
3
2

2
a
4
1
2
lovelorn
36
1
4
3
2
e
2
l
4
3
2
loves
2
lovebird
2
love
36
1
4
3
2

2

4
2
2
Louvre
2
louver
36
1
4
3
2

2

4
2
2
lousewort
2
louse
36
1
4
3
2

2
e
4
1
2
lousy
36
1
4
3
2

2

4
2
2
Lounsbury
2
lounge
36
1
4
3
2
s
2

4
5
2
Louisville
2
Louisiana
2
Louise
2
Louisa
2
Louis
36
1
4
3
2
peak
2

4
2
2
loudspeaking
2
loudspeaker
36
1
4
3
2

2
s
4
1
2
loud
36
1
4
3
2

2
dinsv
4
2
2
Lourdes
2
Lou
36
1
4
3
2

2

4
2
2
lottery
2
Lotte
36
1
4
3
2

2
e
4
1
2
Lottie
36
1
4
3
2

2
t
4
4
2
lots
2
lotus
2
lotion
2
lot
36
1
4
3
2

2

4
2
2
lossy
2
loss
36
1
4
3
2

2
s
4
3
2
lost
2
lose
2
losable
36
1
4
3
2

2

4
2
2
Lorenz
2
Loren
36
1
4
3
2

2
n
4
2
2
Lorelei
2
lore
36
1
4
3
2

2

4
2
2
lordosis
2
lord
36
1
4
3
2

2
de
4
2
2
Lorraine
2
Lorinda
36
1
4
3
2
i
2

4
2
2
loquacity
2
loquacious
36
1
4
3
2
ua
2
c
4
1
2
loquat
36
1
4
3
2

2

4
2
2
lopsided
2
lopseed
36
1
4
3
2

2

4
2
2
Lopez
2
lope
36
1
4
3
2

2
es
4
1
2
lop
36
1
4
3
2
e
2

4
4
2
loosestrife
2
loosen
2
looseleaf
2
loose
36
1
4
3
2

2

4
2
2
loophole
2
loop
36
1
4
3
2

2

4
2
2
Loomis
2
loom
36
1
4
3
2

2

4
6
2
looks
2
looking
2
looked
2
lookup
2
lookout
2
look
36
1
4
3
2

2
kmps
4
2
2
loot
2
loon
36
1
4
3
2
ud
2

4
2
2
longitudinal
2
longitude
36
1
4
3
2

2
t
4
1
2
longish
36
1
4
3
2

2

4
2
2
longhorn
2
longhand
36
1
4
3
2

2
hie
4
6
2
longue
2
longtime
2
longstanding
2
longleg
2
Longfellow
2
long
36
1
4
3
2

2

4
2
2
lonesome
2
lone
36
1
4
3
2

2
eg
4
1
2
London
36
1
4
3
2

2
a
4
1
2
Lomb
36
1
4
3
2
rd
2

4
2
2
Lombardy
2
Lombard
36
1
4
3
2

2
b
4
1
2
Lome
36
1
4
3
2

2

4
3
2
lolly
2
lollipop
2
loll
36
1
4
3
2

2
l
4
1
2
Lola
36
1
4
3
2

2

4
2
2
loincloth
2
loin
36
1
4
3
2

2
n
4
3
2
loiter
2
Lois
2
Loire
36
1
4
3
2

2

4
2
2
logician
2
logic
36
1
4
3
2

2
c
4
1
2
logistic
36
1
4
3
2

2

4
2
2
logging
2
loggerhead
36
1
4
3
2
ithm
2

4
2
2
logarithmic
2
logarithm
36
1
4
3
2

2
r
4
1
2
Logan
36
1
4
3
2

2
agi
4
4
2
logout
2
logjam
2
loge
2
log
36
1
4
3
2
t
2

4
2
2
lofty
2
loft
36
1
4
3
2

2

4
2
2
loess
2
Loeb
36
1
4
3
2
e
2

4
2
2
lodgepole
2
lodge
36
1
4
3
2

2
g
4
2
2
Lodowick
2
lodestone
36
1
4
3
2

2

4
2
2
locust
2
locus
36
1
4
3
2

2
s
4
1
2
locutor
36
1
4
3
2
ot
2
io
4
1
2
locomote
36
1
4
3
2
r
2

4
2
2
locomotory
2
locomotor
36
1
4
3
2

2

4
2
2
locomotive
2
locomotion
36
1
4
3
2

2
m
4
1
2
locoweed
36
1
4
3
2

2

4
2
2
Lockheed
2
Lockhart
36
1
4
3
2

2
h
4
8
2
Lockwood
2
lockup
2
locksmith
2
lockout
2
locknut
2
Lockian
2
Locke
2
lock
36
1
4
3
2

2
lt
4
0
36
1
4
3
2

2

4
2
2
locale
2
local
36
1
4
3
2

2
akou
4
1
2
loci
36
1
4
3
2
l
2

4
2
2
lobule
2
lobular
36
1
4
3
2

2

4
2
2
lobster
2
lobscouse
36
1
4
3
2

2
su
4
6
2
lobo
2
loblolly
2
lobe
2
lobby
2
lobar
2
lob
36
1
4
3
2
h
2

4
3
2
loathsome
2
loathe
2
loath
36
1
4
3
2

2

4
2
2
loamy
2
loam
36
1
4
3
2

2
mt
4
4
2
loaves
2
loan
2
loaf
2
load
36
1
4
3
2

2
abcdefgilmnopqrstuvwy
4
3
2
lozenge
2
Loki
2
lo
36
1
4
3
2

2

4
3
2
Lizzie
2
lizard
2
Liz
36
1
4
3
2

2
n
4
1
2
livid
36
1
4
3
2

2
r
4
4
2
liveth
2
livestock
2
liven
2
live
36
1
4
3
2

2

4
2
2
Liverpudlian
2
Liverpool
36
1
4
3
2

2
p
4
3
2
livery
2
liverwort
2
Livermore
36
1
4
3
2

2
ei
4
1
2
livre
36
1
4
3
2
rg
2

4
2
2
liturgy
2
liturgic
36
1
4
3
2

2

4
2
2
littoral
2
Litton
36
1
4
3
2
e
2

4
3
2
Littleton
2
littleneck
2
little
36
1
4
3
2

2
lo
4
1
2
litterbug
36
1
4
3
2

2

4
2
2
litigate
2
litigant
36
1
4
3
2
g
2
a
4
1
2
litigious
36
1
4
3
2
pher
2

4
2
2
lithospheric
2
lithosphere
36
1
4
3
2
raph
2

4
2
2
lithography
2
lithograph
36
1
4
3
2

2
gs
4
1
2
lithology
36
1
4
3
2

2

4
2
2
lithium
2
lithic
36
1
4
3
2

2
io
4
2
2
Lithuania
2
lithe
36
1
4
3
2

2

4
2
2
literature
2
literate
36
1
4
3
2
ra
2
t
4
3
2
literary
2
literal
2
literacy
36
1
4
3
2

2
ehitu
4
3
2
litmus
2
litany
2
lit
36
1
4
3
2

2
e
4
2
2
lists
2
list
36
1
4
3
2

2
t
4
6
2
Lissajous
2
lisp
2
lisle
2
Lise
2
Lisbon
2
Lisa
36
1
4
3
2
d
2

4
2
2
liquidate
2
liquid
36
1
4
3
2

2
f
4
1
2
liqueur
36
1
4
3
2

2

4
2
2
liquefy
2
liquefaction
36
1
4
3
2
u
2
ei
4
1
2
liquor
36
1
4
3
2

2

4
2
2
Lipscomb
2
Lipschitz
36
1
4
3
2

2
c
4
1
2
lipstick
36
1
4
3
2

2
s
4
4
2
Lipton
2
Lippincott
2
lipid
2
lip
36
1
4
3
2

2

4
2
2
lioness
2
Lionel
36
1
4
3
2
n
2
e
4
1
2
lion
36
1
4
3
2

2

4
2
2
Linotype
2
linoleum
36
1
4
3
2

2

4
2
2
linkage
2
link
36
1
4
3
2

2

4
2
2
lingual
2
lingua
36
1
4
3
2

2
a
4
1
2
linguist
36
1
4
3
2
r
2

4
2
2
lingerie
2
linger
36
1
4
3
2

2
eu
4
1
2
lingo
36
1
4
3
2

2

4
2
2
linemen
2
lineman
36
1
4
3
2

2

4
3
2
linear
2
lineal
2
lineage
36
1
4
3
2

2
am
4
6
2
lines
2
lineup
2
lineprinter
2
linen
2
linebacker
2
line
36
1
4
3
2

2

4
3
2
Lindstrom
2
Lindsey
2
Lindsay
36
1
4
3
2
erg
2

4
2
2
Lindbergh
2
Lindberg
36
1
4
3
2

2
bs
4
5
2
Lindquist
2
Lindholm
2
linden
2
Linda
2
Lind
36
1
4
3
2

2
degko
4
6
2
Linus
2
lint
2
linseed
2
liniment
2
Lincoln
2
Lin
36
1
4
3
2

2

4
4
2
limpkin
2
limpid
2
limpet
2
limp
36
1
4
3
2
t
2

4
5
2
limits
2
limiting
2
limited
2
limitate
2
limit
36
1
4
3
2

2

4
4
2
limestone
2
Limerick
2
limelight
2
lime
36
1
4
3
2

2

4
3
2
limbo
2
limbic
2
limb
36
1
4
3
2

2
beip
4
3
2
limousine
2
Lima
2
lim
36
1
4
3
2

2

4
2
2
Lilliputian
2
Lillian
36
1
4
3
2

2
i
4
1
2
Lilly
36
1
4
3
2

2

4
2
2
lilac
2
Lila
36
1
4
3
2

2
al
4
3
2
lily
2
lilt
2
Lilian
36
1
4
3
2
e
2

4
4
2
likely
2
likewise
2
liken
2
like
36
1
4
3
2

2

4
2
2
lignum
2
lignite
36
1
4
3
2

2

4
2
2
lighthouse
2
lighthearted
36
1
4
3
2
t
2
h
4
6
2
lightweight
2
lightproof
2
lightning
2
lightface
2
lighten
2
light
36
1
4
3
2
et
2

4
2
2
Liggett
2
Ligget
36
1
4
3
2

2

4
3
2
ligature
2
ligand
2
ligament
36
1
4
3
2

2
aghn
4
0
36
1
4
3
2

2
bs
4
4
2
lifetime
2
lifelong
2
lifeguard
2
life
36
1
4
3
2

2

4
2
2
lifestyle
2
lifespan
36
1
4
3
2

2

4
2
2
lifeboat
2
lifeblood
36
1
4
3
2

2
e
4
2
2
lift
2
LIFO
36
1
4
3
2

2

4
2
2
lieutenant
2
lieu
36
1
4
3
2

2
u
4
3
2
lien
2
Liechtenstein
2
lie
36
1
4
3
2

2
n
4
1
2
lice
36
1
4
3
2

2

4
3
2
licensor
2
licensee
2
licensable
36
1
4
3
2

2
s
4
1
2
licentious
36
1
4
3
2

2
e
4
3
2
licorice
2
lick
2
lichen
36
1
4
3
2
t
2

4
2
2
libretto
2
librettist
36
1
4
3
2

2
t
4
1
2
Libreville
36
1
4
3
2

2
r
4
1
2
librate
36
1
4
3
2

2

4
2
2
library
2
librarian
36
1
4
3
2

2
ae
4
0
36
1
4
3
2
d
2

4
2
2
libido
2
libidinous
36
1
4
3
2

2

4
3
2
liberty
2
libertine
2
libertarian
36
1
4
3
2

2

4
2
2
liberate
2
liberal
36
1
4
3
2

2
at
4
1
2
Liberia
36
1
4
3
2

2

4
2
2
libelous
2
libel
36
1
4
3
2

2
lr
4
0
36
1
4
3
2

2
eir
4
2
2
Libya
2
libation
36
1
4
3
2

2

4
3
2
liar
2
liaison
2
liable
36
1
4
3
2

2
abcefgklmnopqstvz
4
1
2
lid
36
1
4
3
2

2
o
4
1
2
lexical
36
1
4
3
2

2

4
2
2
lexicon
2
lexicography
36
1
4
3
2
i
2
c
4
1
2
Lexington
36
1
4
3
2

2

4
3
2
lewis
2
lewd
2
lew
36
1
4
3
2

2

4
4
2
levity
2
Levitt
2
Leviticus
2
levitate
36
1
4
3
2

2

4
2
2
Levine
2
Levin
36
1
4
3
2

2
nt
4
2
2
Levis
2
Levi
36
1
4
3
2

2

4
2
2
leverage
2
lever
36
1
4
3
2

2
r
4
2
2
level
2
levee
36
1
4
3
2

2
ei
4
3
2
levy
2
levulose
2
Lev
36
1
4
3
2

2

4
2
2
leukemia
2
leucine
36
1
4
3
2
r
2
m
4
1
2
letterhead
36
1
4
3
2

2

4
2
2
lettermen
2
letterman
36
1
4
3
2

2
e
4
2
2
letting
2
lettuce
36
1
4
3
2

2

4
2
2
lethargy
2
lethal
36
1
4
3
2

2
a
4
1
2
Lethe
36
1
4
3
2

2
ht
4
3
2
lets
2
Letitia
2
let
36
1
4
3
2

2

4
2
2
Lester
2
lest
36
1
4
3
2

2

4
2
2
lessor
2
lesson
36
1
4
3
2

2

4
2
2
lessen
2
lessee
36
1
4
3
2

2
eo
4
1
2
less
36
1
4
3
2

2
st
4
4
2
Lesotho
2
Leslie
2
lesion
2
Lesbian
36
1
4
3
2

2

4
3
2
leprosy
2
lepidolite
2
leper
36
1
4
3
2

2

4
2
2
Leopold
2
leopard
36
1
4
3
2

2

4
2
2
leonine
2
Leonid
36
1
4
3
2
d
2

4
2
2
Leonardo
2
Leonard
36
1
4
3
2

2
r
4
1
2
Leona
36
1
4
3
2

2
ai
4
2
2
Leone
2
Leon
36
1
4
3
2

2
np
4
1
2
Leo
36
1
4
3
2

2

4
2
2
lentil
2
lenticular
36
1
4
3
2

2
i
4
2
2
Lenten
2
lent
36
1
4
3
2

2

4
2
2
Lenny
2
Lennox
36
1
4
3
2

2

4
2
2
Leningrad
2
Lenin
36
1
4
3
2

2
n
4
1
2
lenient
36
1
4
3
2
th
2

4
4
2
lengthy
2
lengthwise
2
lengthen
2
length
36
1
4
3
2

2
gint
4
5
2
lens
2
Lenore
2
lend
2
Lena
2
Len
36
1
4
3
2
n
2

4
2
2
lemonade
2
lemon
36
1
4
3
2

2

4
2
2
lemming
2
lemma
36
1
4
3
2

2
mo
4
1
2
Lemuel
36
1
4
3
2
moti
2

4
2
2
leitmotiv
2
leitmotif
36
1
4
3
2
h
2

4
2
2
Leighton
2
Leigh
36
1
4
3
2

2
gt
4
2
2
leisure
2
Leila
36
1
4
3
2

2

4
2
2
Lehman
2
Lehigh
36
1
4
3
2
m
2

4
2
2
leguminous
2
legume
36
1
4
3
2
ima
2

4
2
2
legitimate
2
legitimacy
36
1
4
3
2
lat
2

4
2
2
legislature
2
legislate
36
1
4
3
2

2
st
4
2
2
legion
2
legible
36
1
4
3
2

2

4
2
2
leggy
2
legging
36
1
4
3
2
d
2

4
3
2
Legendre
2
legendary
2
legend
36
1
4
3
2

2
n
4
1
2
legerdemain
36
1
4
3
2

2

4
2
2
legatee
2
legate
36
1
4
3
2

2
e
4
1
2
legato
36
1
4
3
2

2
t
4
2
2
legal
2
legacy
36
1
4
3
2

2
aegiu
4
2
2
leghorn
2
leg
36
1
4
3
2
t
2

4
5
2
lefty
2
leftward
2
leftover
2
leftmost
2
left
36
1
4
3
2
a
2

4
2
2
leeway
2
leeward
36
1
4
3
2

2

4
2
2
leery
2
leer
36
1
4
3
2

2
rw
4
5
2
Leeuwenhoek
2
leek
2
Leeds
2
leech
2
lee
36
1
4
3
2

2

4
2
2
ledge
2
led
36
1
4
3
2

2

4
2
2
lecture
2
lectionary
36
1
4
3
2
er
2

4
2
2
lechery
2
lecher
36
1
4
3
2

2
ht
4
0
36
1
4
3
2

2

4
2
2
Lebesgue
2
lebensraum
36
1
4
3
2
n
2

4
2
2
Lebanon
2
Lebanese
36
1
4
3
2

2
ae
4
0
36
1
4
3
2

2
cdfknprstv
4
2
2
league
2
lea
36
1
4
3
2

2

4
2
2
Leavenworth
2
leaven
36
1
4
3
2
e
2
n
4
2
2
leaves
2
leave
36
1
4
3
2
her
2

4
5
2
leathery
2
leatherwork
2
leatherneck
2
leatherback
2
leather
36
1
4
3
2

2

4
2
2
leasehold
2
lease
36
1
4
3
2

2
e
4
2
2
least
2
leash
36
1
4
3
2

2

4
2
2
learn
2
Lear
36
1
4
3
2

2

4
3
2
leapt
2
leapfrog
2
leap
36
1
4
3
2

2

4
2
2
Leander
2
lean
36
1
4
3
2

2

4
3
2
leaky
2
leakage
2
leak
36
1
4
3
2

2

4
3
2
leafy
2
leaflet
2
leaf
36
1
4
3
2

2
m
4
1
2
leads
36
1
4
3
2

2
r
4
2
2
leadeth
2
leaden
36
1
4
3
2

2
es
4
2
2
leading
2
lead
36
1
4
3
2
h
2

4
2
2
leachate
2
leach
36
1
4
3
2

2
abcdefghimnopstuvwx
4
3
2
Leyden
2
Leroy
2
Leland
36
1
4
3
2

2

4
2
2
lazybones
2
lazy
36
1
4
3
2

2
y
4
2
2
laze
2
Lazarus
36
1
4
3
2

2

4
2
2
layout
2
layoff
36
1
4
3
2

2

4
2
2
laymen
2
layman
36
1
4
3
2

2
mo
4
4
2
layup
2
Layton
2
layette
2
lay
36
1
4
3
2

2

4
2
2
laxative
2
lax
36
1
4
3
2

2

4
2
2
lawsuit
2
Lawson
36
1
4
3
2
enc
2

4
2
2
lawrencium
2
Lawrence
36
1
4
3
2

2

4
2
2
lawman
2
lawmake
36
1
4
3
2

2
a
4
1
2
lawmen
36
1
4
3
2
iv
2

4
2
2
lawgiving
2
lawgiver
36
1
4
3
2
reak
2

4
2
2
lawbreaking
2
lawbreaker
36
1
4
3
2

2
bgmrs
4
4
2
lawyer
2
lawn
2
lawful
2
law
36
1
4
3
2

2

4
3
2
lavatory
2
lavabo
2
lava
36
1
4
3
2

2
a
4
3
2
Lavoisier
2
lavish
2
lavender
36
1
4
3
2

2

4
2
2
Laurentian
2
Laurent
36
1
4
3
2

2
t
4
1
2
Lauren
36
1
4
3
2

2
n
4
2
2
laurel
2
laureate
36
1
4
3
2

2
e
4
2
2
Laurie
2
laura
36
1
4
3
2

2

4
2
2
laundry
2
launder
36
1
4
3
2

2
d
4
1
2
launch
36
1
4
3
2
h
2

4
4
2
laughter
2
Laughlin
2
laughingstock
2
laugh
36
1
4
3
2

2
a
4
2
2
Lauderdale
2
laud
36
1
4
3
2

2

4
2
2
laudatory
2
laudanum
36
1
4
3
2

2
dgnr
4
2
2
Lausanne
2
Laue
36
1
4
3
2

2

4
2
2
lattice
2
latter
36
1
4
3
2
na
2

4
2
2
latitudinary
2
latitudinal
36
1
4
3
2
ud
2
i
4
1
2
latitude
36
1
4
3
2

2

4
2
2
Latinate
2
Latin
36
1
4
3
2

2
nt
4
0
36
1
4
3
2

2

4
3
2
Lathrop
2
lathe
2
lath
36
1
4
3
2

2

4
3
2
Lateran
2
lateral
2
latera
36
1
4
3
2

2
a
4
2
2
laterite
2
later
36
1
4
3
2

2
r
4
4
2
latest
2
latex
2
latent
2
late
36
1
4
3
2

2
ehit
4
4
2
Latvia
2
latus
2
Latrobe
2
latch
36
1
4
3
2

2

4
2
2
lasso
2
lass
36
1
4
3
2

2

4
2
2
lascivious
2
lascar
36
1
4
3
2

2
cs
4
4
2
Laszlo
2
last
2
lash
2
lase
36
1
4
3
2
e
2

4
2
2
larynges
2
laryngeal
36
1
4
3
2
n
2
g
4
1
2
larynx
36
1
4
3
2
a
2

4
3
2
larval
2
larvae
2
larva
36
1
4
3
2

2

4
3
2
Larson
2
Larsen
2
Lars
36
1
4
3
2

2

4
3
2
larkspur
2
Larkin
2
lark
36
1
4
3
2
e
2
s
4
3
2
larger
2
largemouth
2
large
36
1
4
3
2

2

4
2
2
Lares
2
Laredo
36
1
4
3
2

2

4
2
2
larch
2
larceny
36
1
4
3
2

2
cegksvy
4
4
2
Larry
2
lariat
2
lard
2
Laramie
36
1
4
3
2
l
2

4
2
2
lapelled
2
lapel
36
1
4
3
2

2
e
4
5
2
lapse
2
lappet
2
Laplace
2
lapidary
2
lap
36
1
4
3
2

2

4
4
2
Laotian
2
Laos
2
Laocoon
2
Lao
36
1
4
3
2
an
2

4
2
2
lanthanum
2
lanthanide
36
1
4
3
2

2
h
4
1
2
lantern
36
1
4
3
2

2

4
2
2
lanky
2
Lanka
36
1
4
3
2

2

4
2
2
languish
2
languid
36
1
4
3
2

2
i
4
1
2
language
36
1
4
3
2

2
u
4
4
2
Langmuir
2
Langley
2
Lange
2
Lang
36
1
4
3
2

2

4
2
2
landslide
2
landscape
36
1
4
3
2

2
s
4
8
2
landowner
2
landmark
2
landlord
2
Landis
2
landhold
2
landfill
2
landau
2
land
36
1
4
3
2
s
2

4
2
2
Lancaster
2
Lancashire
36
1
4
3
2

2
a
4
1
2
lance
36
1
4
3
2

2
cdgkt
4
3
2
Lansing
2
lane
2
Lana
36
1
4
3
2

2

4
5
2
lamprey
2
lampoon
2
lamplight
2
lampblack
2
lamp
36
1
4
3
2
na
2

4
2
2
laminate
2
laminar
36
1
4
3
2
t
2

4
2
2
lamentation
2
lament
36
1
4
3
2

2
n
4
2
2
lamellar
2
lame
36
1
4
3
2

2
d
4
2
2
lambert
2
lamb
36
1
4
3
2
r
2

4
2
2
Lamarck
2
Lamar
36
1
4
3
2

2
abeip
4
1
2
lam
36
1
4
3
2
e
2

4
3
2
lakeside
2
Lakehurst
2
lake
36
1
4
3
2

2

4
2
2
Laidlaw
2
laid
36
1
4
3
2

2
d
4
4
2
laity
2
laissez
2
lair
2
lain
36
1
4
3
2
ang
2

4
2
2
Lagrangian
2
Lagrange
36
1
4
3
2

2

4
2
2
Lagos
2
lagoon
36
1
4
3
2

2
or
4
4
2
Laguerre
2
lagging
2
lager
2
lag
36
1
4
3
2

2

4
2
2
ladyfern
2
lady
36
1
4
3
2

2
y
4
3
2
ladle
2
laden
2
lad
36
1
4
3
2
a
2

4
2
2
lacunae
2
lacuna
36
1
4
3
2

2
n
4
1
2
lacustrine
36
1
4
3
2

2

4
2
2
lactose
2
lactate
36
1
4
3
2

2

4
3
2
lackey
2
lackadaisic
2
lack
36
1
4
3
2

2

4
2
2
Lacerta
2
lacerate
36
1
4
3
2

2
r
4
2
2
lacewing
2
lace
36
1
4
3
2

2
ektu
4
6
2
lacy
2
lacrosse
2
lacquer
2
laconic
2
Lachesis
2
lac
36
1
4
3
2
ador
2

4
2
2
labradorite
2
Labrador
36
1
4
3
2

2

4
3
2
laborious
2
laboratory
2
labor
36
1
4
3
2

2
r
4
1
2
labour
36
1
4
3
2

2

4
2
2
lability
2
labile
36
1
4
3
2

2

4
2
2
labial
2
labia
36
1
4
3
2

2
al
4
0
36
1
4
3
2

2
ior
4
4
2
labyrinth
2
label
2
Laban
2
lab
36
1
4
3
2

2
bcdgikmnoprstuvwxyz
4
3
2
Lahore
2
Lafayette
2
la
36
1
4
3
2

2
aeio'uy
4
5
2
LCD
2
LTV
2
LSI
2
Lloyd
2
l
36
1
4
3
2

2

4
3
2
Kyoto
2
Kyle
2
KY
36
1
4
3
2

2

4
2
2
Kurt
2
Kurd
36
1
4
3
2

2

4
2
2
kudzu
2
kudo
36
1
4
3
2

2
dr
4
5
2
Kuwait
2
kumquat
2
kulak
2
Kuhn
2
Ku
36
1
4
3
2

2

4
3
2
Kruse
2
Kruger
2
Krueger
36
1
4
3
2

2

4
2
2
Kristin
2
Krishna
36
1
4
3
2

2
s
4
1
2
Krieger
36
1
4
3
2

2

4
3
2
Kresge
2
Kremlin
2
Krebs
36
1
4
3
2

2
ku
4
2
2
Kramer
2
kraft
36
1
4
3
2

2

4
2
2
kraut
2
Krause
36
1
4
3
2

2

4
2
2
Krakow
2
Krakatoa
36
1
4
3
2

2
aeiu
4
2
2
krypton
2
Kronecker
36
1
4
3
2
l
2

4
2
2
Kowalski
2
Kowalewski
36
1
4
3
2

2
a
4
1
2
Kowloon
36
1
4
3
2

2

4
2
2
Korea
2
Koran
36
1
4
3
2

2

4
2
2
Konrad
2
Kong
36
1
4
3
2

2

4
2
2
kolkhoz
2
kola
36
1
4
3
2
nig
2

4
2
2
Koenigsberg
2
Koenig
36
1
4
3
2

2

4
2
2
kodak
2
Kodachrome
36
1
4
3
2

2
a
4
1
2
Kodiak
36
1
4
3
2
h
2

4
2
2
Kochab
2
Koch
36
1
4
3
2

2
cdelnrw
4
8
2
Kovacs
2
kosher
2
Koppers
2
kombu
2
koinonia
2
kohlrabi
2
Kobayashi
2
koala
36
1
4
3
2
s
2

4
2
2
Knutson
2
Knutsen
36
1
4
3
2
s
2

4
2
2
Knudson
2
Knudsen
36
1
4
3
2
kle
2

4
2
2
knuckleball
2
knuckle
36
1
4
3
2

2
cdt
4
1
2
knurl
36
1
4
3
2

2

4
2
2
Knoxville
2
Knox
36
1
4
3
2

2
d
4
1
2
Knowles
36
1
4
3
2
ge
2

4
2
2
knowledgeable
2
knowledge
36
1
4
3
2

2
e
4
1
2
Knowlton
36
1
4
3
2

2
l
4
5
2
knows
2
known
2
knowhow
2
knoweth
2
know
36
1
4
3
2

2

4
2
2
knotty
2
Knott
36
1
4
3
2

2
t
4
1
2
knot
36
1
4
3
2
k
2

4
3
2
knockout
2
knockdown
2
knock
36
1
4
3
2

2

4
2
2
knobby
2
knob
36
1
4
3
2

2
bctwx
4
1
2
knoll
36
1
4
3
2
ht
2

4
2
2
Knightsbridge
2
knight
36
1
4
3
2
k
2

4
2
2
Knickerbocker
2
knick
36
1
4
3
2

2
cg
4
3
2
knives
2
knit
2
knife
36
1
4
3
2

2

4
3
2
kneel
2
kneecap
2
knee
36
1
4
3
2

2
e
4
3
2
knew
2
knelt
2
knead
36
1
4
3
2

2
p
4
2
2
Knauer
2
knack
36
1
4
3
2

2

4
2
2
knapsack
2
Knapp
36
1
4
3
2

2
aeiou
4
0
36
1
4
3
2

2

4
2
2
Klein
2
kleenex
36
1
4
3
2

2

4
3
2
klaxon
2
Klaus
2
Klan
36
1
4
3
2

2
ae
4
3
2
klystron
2
Klux
2
Kline
36
1
4
3
2

2

4
2
2
kiwi
2
Kiwanis
36
1
4
3
2

2

4
2
2
kivu
2
kiva
36
1
4
3
2
n
2

4
2
2
kittenish
2
kitten
36
1
4
3
2

2
e
4
2
2
kitty
2
kittle
36
1
4
3
2
hen
2

4
2
2
kitchenette
2
kitchen
36
1
4
3
2

2
ct
4
3
2
kite
2
Kitakyushu
2
kit
36
1
4
3
2

2

4
3
2
Kirkpatrick
2
Kirkland
2
kirk
36
1
4
3
2
h
2

4
2
2
Kirchoff
2
Kirchner
36
1
4
3
2

2
ck
4
2
2
Kirov
2
Kirby
36
1
4
3
2

2

4
2
2
Kiowa
2
kiosk
36
1
4
3
2

2

4
2
2
kinky
2
kink
36
1
4
3
2

2

4
3
2
Kingston
2
Kingsley
2
Kingsbury
36
1
4
3
2

2
s
4
6
2
kingpin
2
kinglet
2
kingfisher
2
kingdom
2
kingbird
2
king
36
1
4
3
2

2

4
2
2
kinesthesis
2
kinesic
36
1
4
3
2

2
s
4
2
2
kinetic
2
kinematic
36
1
4
3
2

2

4
4
2
kindred
2
kindle
2
kindergarten
2
kind
36
1
4
3
2

2
degk
4
3
2
Kinshasha
2
Kinney
2
kin
36
1
4
3
2

2

4
2
2
Kimberly
2
Kimball
36
1
4
3
2

2
b
4
2
2
kimono
2
Kim
36
1
4
3
2

2

4
3
2
killjoy
2
killdeer
2
kill
36
1
4
3
2

2
l
4
2
2
kilohm
2
Kilgore
36
1
4
3
2

2

4
3
2
Kiewit
2
Kiev
2
Kieffer
36
1
4
3
2
p
2
p
4
1
2
kidnap
36
1
4
3
2

2

4
2
2
kidnapping
2
kidnapped
36
1
4
3
2

2
a
4
1
2
kidney
36
1
4
3
2

2

4
2
2
kiddie
2
Kidde
36
1
4
3
2

2
dn
4
1
2
kid
36
1
4
3
2
k
2

4
3
2
kickoff
2
kickback
2
kick
36
1
4
3
2

2

4
2
2
kibitz
2
kibbutzim
36
1
4
3
2

2
bcdelmnortvw
4
4
2
kiss
2
Kipling
2
Kikuyu
2
Kigali
36
1
4
3
2

2

4
3
2
Khartoum
2
khan
2
khaki
36
1
4
3
2

2
a
4
2
2
Khrushchev
2
Khmer
36
1
4
3
2
s
2

4
2
2
Keynesian
2
Keynes
36
1
4
3
2

2
e
4
1
2
keynote
36
1
4
3
2

2
nswb
4
4
2
keypunch
2
keyhole
2
Keyes
2
key
36
1
4
3
2

2

4
2
2
kettle
2
Kettering
36
1
4
3
2

2

4
2
2
ketosis
2
ketone
36
1
4
3
2
h
2

4
2
2
ketchup
2
ketch
36
1
4
3
2

2
cot
4
0
36
1
4
3
2

2

4
2
2
kestrel
2
Kessler
36
1
4
3
2

2

4
2
2
kerry
2
Kerr
36
1
4
3
2

2

4
3
2
Kernighan
2
kernel
2
kern
36
1
4
3
2

2
nr
4
4
2
kerygma
2
kerosene
2
Kermit
2
kerchief
36
1
4
3
2

2

4
2
2
kept
2
Kepler
36
1
4
3
2

2

4
2
2
Kenyon
2
Kenya
36
1
4
3
2

2

4
3
2
Kentucky
2
Kenton
2
Kent
36
1
4
3
2

2

4
5
2
Kenney
2
Kenneth
2
kennel
2
Kennedy
2
Kennecott
36
1
4
3
2

2
e
4
1
2
Kennan
36
1
4
3
2

2
nty
4
4
2
Kensington
2
keno
2
Kendall
2
ken
36
1
4
3
2

2
e
4
2
2
kelly
2
Kellogg
36
1
4
3
2

2

4
2
2
Kelley
2
Keller
36
1
4
3
2

2
l
4
3
2
Kelvin
2
Kelsey
2
kelp
36
1
4
3
2

2

4
2
2
Keenan
2
keen
36
1
4
3
2

2

4
2
2
keelson
2
keel
36
1
4
3
2

2
lnp
4
1
2
keeshond
36
1
4
3
2
t
2

4
2
2
Keats
2
Keaton
36
1
4
3
2

2
aelnprsty
4
5
2
Kevin
2
Kemp
2
Keith
2
keg
2
keddah
36
1
4
3
2

2

4
2
2
kayo
2
Kay
36
1
4
3
2
f
2

4
2
2
Kaufman
2
Kauffman
36
1
4
3
2

2

4
4
2
Kathy
2
Kathleen
2
Katherine
2
Katharine
36
1
4
3
2

2
h
4
5
2
Katz
2
Katowice
2
Katmandu
2
Katie
2
Kate
36
1
4
3
2

2

4
3
2
karate
2
Karamazov
2
Karachi
36
1
4
3
2

2
a
4
6
2
karyatid
2
Karp
2
Karol
2
karma
2
Karl
2
Karen
36
1
4
3
2

2

4
3
2
kappa
2
kapok
2
Kaplan
36
1
4
3
2
lin
2

4
2
2
kaolinite
2
kaolin
36
1
4
3
2

2

4
5
2
Kant
2
Kansas
2
Kankakee
2
kangaroo
2
Kane
36
1
4
3
2

2

4
3
2
Kampala
2
kamikaze
2
Kamchatka
36
1
4
3
2

2

4
2
2
Kalmuk
2
kalmia
36
1
4
3
2
d
2

4
2
2
kaleidoscope
2
kaleidescope
36
1
4
3
2

2
i
4
1
2
kale
36
1
4
3
2

2
em
4
1
2
Kalamazoo
36
1
4
3
2
ka
2

4
2
2
Kafkaesque
2
Kafka
36
1
4
3
2
u
2

4
2
2
Kabul
2
Kabuki
36
1
4
3
2

2
bflmnoprtuy
4
7
2
kazoo
2
kava
2
Kaskaskia
2
Kajar
2
kaiser
2
Kahn
2
Kaddish
36
1
4
3
2

2
aehilnoruy
4
4
2
kwashiorkor
2
KS
2
k's
2
k
36
1
4
3
2
tapos
2

4
2
2
juxtaposition
2
juxtapose
36
1
4
3
2

2

4
3
2
Jutish
2
jute
2
jut
36
1
4
3
2

2

4
2
2
Justinian
2
Justine
36
1
4
3
2

2

4
2
2
justiciable
2
justice
36
1
4
3
2

2
cn
4
1
2
justify
36
1
4
3
2
t
2
i
4
1
2
just
36
1
4
3
2
rudent
2

4
2
2
jurisprudential
2
jurisprudent
36
1
4
3
2

2
p
4
1
2
jurisdiction
36
1
4
3
2

2
s
4
1
2
juridic
36
1
4
3
2

2

4
2
2
Jurassic
2
Jura
36
1
4
3
2

2
ai
4
3
2
jury
2
juror
2
jure
36
1
4
3
2

2

4
2
2
junketeer
2
junkerdom
36
1
4
3
2

2
e
4
2
2
junky
2
junk
36
1
4
3
2

2

4
2
2
juniper
2
junior
36
1
4
3
2

2

4
2
2
Juneau
2
June
36
1
4
3
2

2
t
4
1
2
junco
36
1
4
3
2

2

4
3
2
juncture
2
junctor
2
junction
36
1
4
3
2

2
ceik
4
3
2
junta
2
Juno
2
jungle
36
1
4
3
2

2

4
2
2
jumpy
2
jump
36
1
4
3
2

2

4
2
2
jumbo
2
jumble
36
1
4
3
2

2
bp
4
0
36
1
4
3
2

2

4
2
2
Juliet
2
Julie
36
1
4
3
2

2
e
4
3
2
Julius
2
Julio
2
Julia
36
1
4
3
2

2

4
2
2
Jules
2
julep
36
1
4
3
2

2
ei
4
1
2
July
36
1
4
3
2
e
2

4
2
2
Jukes
2
juke
36
1
4
3
2
u
2

4
2
2
jujube
2
juju
36
1
4
3
2
c
2

4
2
2
juicy
2
juice
36
1
4
3
2

2

4
2
2
juggle
2
jugging
36
1
4
3
2

2
g
4
3
2
Jugoslavia
2
jugate
2
jug
36
1
4
3
2

2
ai
4
0
36
1
4
3
2

2

4
2
2
judiciary
2
judicial
36
1
4
3
2

2
a
4
1
2
judicious
36
1
4
3
2

2
t
4
1
2
judicable
36
1
4
3
2

2

4
2
2
judicature
2
judicatory
36
1
4
3
2

2
c
4
1
2
Judith
36
1
4
3
2

2

4
2
2
Judas
2
Judaism
36
1
4
3
2

2
ai
4
6
2
Judy
2
Judson
2
judo
2
judge
2
Jude
2
Judd
36
1
4
3
2
ila
2

4
2
2
jubilate
2
jubilant
36
1
4
3
2
n
2

4
2
2
Juanita
2
Juan
36
1
4
3
2

2
abdgijklmnrstx
4
2
2
juvenile
2
Jupiter
36
1
4
3
2

2

4
6
2
joystick
2
joyride
2
joyous
2
joyful
2
Joyce
2
joy
36
1
4
3
2
l
2

4
2
2
jowly
2
jowl
36
1
4
3
2
a
2

4
2
2
Jovian
2
jovial
36
1
4
3
2

2
i
4
2
2
Jove
2
Jovanovich
36
1
4
3
2

2

4
2
2
journeymen
2
journeyman
36
1
4
3
2
y
2
m
4
1
2
journey
36
1
4
3
2
l
2

4
2
2
journalese
2
journal
36
1
4
3
2
n
2
ae
4
0
36
1
4
3
2

2
r
4
3
2
joust
2
jounce
2
joule
36
1
4
3
2

2
p
4
2
2
Josef
2
Jose
36
1
4
3
2
h
2

4
4
2
Josephus
2
Josephson
2
Josephine
2
Joseph
36
1
4
3
2

2
e
4
4
2
jostle
2
joss
2
Josiah
2
Joshua
36
1
4
3
2
s
2

4
2
2
Jorgenson
2
Jorgensen
36
1
4
3
2
e
2
n
4
1
2
Jorge
36
1
4
3
2

2
g
4
1
2
Jordan
36
1
4
3
2

2

4
2
2
Jonathan
2
Jonas
36
1
4
3
2

2
a
4
3
2
jonquil
2
Jones
2
Jon
36
1
4
3
2

2

4
2
2
jolly
2
Jolla
36
1
4
3
2

2
l
4
2
2
jolt
2
Joliet
36
1
4
3
2
n
2

4
2
2
joint
2
join
36
1
4
3
2
o
2

4
2
2
Johnstown
2
Johnston
36
1
4
3
2

2
t
4
2
2
Johnson
2
Johnsen
36
1
4
3
2

2
s
4
2
2
Johnny
2
John
36
1
4
3
2
n
2
ns
4
0
36
1
4
3
2

2

4
2
2
Johanson
2
Johansen
36
1
4
3
2

2
e
4
1
2
Johann
36
1
4
3
2
s
2

4
2
2
Johannesburg
2
Johannes
36
1
4
3
2

2
an
4
0
36
1
4
3
2

2

4
2
2
joggle
2
jogging
36
1
4
3
2

2
g
4
1
2
jog
36
1
4
3
2

2

4
3
2
joey
2
Joel
2
Joe
36
1
4
3
2

2

4
2
2
jocund
2
jocular
36
1
4
3
2

2

4
3
2
jockstrap
2
jockey
2
jock
36
1
4
3
2

2
ku
4
1
2
jocose
36
1
4
3
2

2

4
3
2
jobs
2
jobholder
2
job
36
1
4
3
2

2
n
4
1
2
Joan
36
1
4
3
2

2

4
2
2
Joanne
2
Joanna
36
1
4
3
2

2
n
4
1
2
Joaquin
36
1
4
3
2

2
abceghilnrsuvwy
4
3
2
jot
2
joke
2
Jo
36
1
4
3
2
ter
2

4
3
2
jittery
2
jitterbug
2
jitter
36
1
4
3
2

2

4
2
2
jinx
2
jingle
36
1
4
3
2

2

4
2
2
jimmy
2
Jimmie
36
1
4
3
2

2
m
4
2
2
Jimenez
2
Jim
36
1
4
3
2

2

4
2
2
jilt
2
Jill
36
1
4
3
2

2

4
2
2
jiggle
2
jigging
36
1
4
3
2

2
g
4
2
2
jigsaw
2
jig
36
1
4
3
2

2
glmnt
4
3
2
jive
2
jiffy
2
jibe
36
1
4
3
2

2

4
3
2
jewelry
2
Jewell
2
jewel
36
1
4
3
2

2
l
4
1
2
Jewett
36
1
4
3
2

2
e
4
2
2
Jewish
2
Jew
36
1
4
3
2

2

4
3
2
jettison
2
jetliner
2
jet
36
1
4
3
2

2

4
2
2
Jesus
2
Jesuit
36
1
4
3
2

2
i
4
2
2
Jesse
2
jess
36
1
4
3
2

2

4
2
2
Jessie
2
Jessica
36
1
4
3
2

2
su
4
1
2
jest
36
1
4
3
2

2

4
2
2
Jerome
2
Jeroboam
36
1
4
3
2

2

4
2
2
jerky
2
jerk
36
1
4
3
2

2
m
4
1
2
Jeres
36
1
4
3
2

2

4
2
2
Jeremy
2
Jeremiah
36
1
4
3
2

2
eko
4
4
2
Jerusalem
2
jersey
2
jerry
2
Jericho
36
1
4
3
2
pard
2

4
2
2
jeopardy
2
jeopard
36
1
4
3
2

2

4
3
2
Jennings
2
Jennifer
2
Jennie
36
1
4
3
2

2
i
4
1
2
jenny
36
1
4
3
2

2
n
4
2
2
Jensen
2
Jenkins
36
1
4
3
2
ly
2

4
2
2
jellyfish
2
jelly
36
1
4
3
2
un
2

4
2
2
jejunum
2
jejune
36
1
4
3
2
f
2

4
3
2
Jeffrey
2
Jefferson
2
Jeff
36
1
4
3
2

2
ln
4
0
36
1
4
3
2

2

4
2
2
Jeannie
2
jean
36
1
4
3
2
ous
2

4
2
2
jealousy
2
jealous
36
1
4
3
2

2
afjlnorstw
4
3
2
Jehovah
2
jeep
2
Jed
36
1
4
3
2
z
2

4
2
2
jazzy
2
jazz
36
1
4
3
2

2

4
2
2
jawbone
2
jaw
36
1
4
3
2

2

4
2
2
javelin
2
Java
36
1
4
3
2
n
2

4
2
2
jaunty
2
jaundice
36
1
4
3
2

2

4
2
2
jasper
2
Jason
36
1
4
3
2

2

4
3
2
Jarvin
2
jargon
2
jar
36
1
4
3
2
an
2

4
2
2
Japanese
2
Japan
36
1
4
3
2

2

4
2
2
Janus
2
January
36
1
4
3
2
or
2

4
2
2
janitorial
2
janitor
36
1
4
3
2

2
t
4
2
2
janissary
2
Janice
36
1
4
3
2

2

4
3
2
Janet
2
Janeiro
2
Jane
36
1
4
3
2

2
eiu
4
4
2
Jansenist
2
Janos
2
jangle
2
Jan
36
1
4
3
2
s
2

4
2
2
Jamestown
2
James
36
1
4
3
2

2
e
4
3
2
jamboree
2
Jamaica
2
jam
36
1
4
3
2

2

4
2
2
jake
2
Jakarta
36
1
4
3
2

2

4
2
2
Jaime
2
jail
36
1
4
3
2

2

4
3
2
jaguar
2
jagging
2
jag
36
1
4
3
2
ue
2

4
2
2
Jacques
2
Jacqueline
36
1
4
3
2

2

4
2
2
Jacobson
2
Jacobsen
36
1
4
3
2

2

4
3
2
Jacobite
2
Jacobian
2
Jacobi
36
1
4
3
2
b
2
is
4
3
2
Jacobus
2
Jacobean
2
Jacob
36
1
4
3
2

2
as
4
9
2
Jacky
2
jackpot
2
Jackman
2
jackknife
2
Jackie
2
jacket
2
jackdaw
2
jackboot
2
jack
36
1
4
3
2
on
2

4
2
2
Jacksonville
2
Jackson
36
1
4
3
2

2

4
2
2
jackass
2
jackanapes
36
1
4
3
2

2
koq
4
1
2
JACM
36
1
4
3
2

2

4
2
2
Jablonsky
2
jab
36
1
4
3
2

2
bcgikmnprsuvwz
4
4
2
jay
2
jalopy
2
Jaeger
2
jade
36
1
4
3
2

2
aeiou
4
3
2
j's
2
Jr
2
j
36
1
4
3
2
n
2

4
2
2
Ivanhoe
2
Ivan
36
1
4
3
2

2
a
4
4
2
ivy
2
ivory
2
Iverson
2
iv
36
1
4
3
2

2

4
3
2
it's
2
it'll
2
it'd
36
1
4
3
2
nera
2

4
2
2
itinerary
2
itinerant
36
1
4
3
2

2

4
2
2
iterate
2
item
36
1
4
3
2

2

4
2
2
italic
2
Italian
36
1
4
3
2
l
2
i
4
1
2
Italy
36
1
4
3
2

2
aei's
4
6
2
ITT
2
IT&T
2
Ito
2
Ithaca
2
itch
2
it
36
1
4
3
2

2

4
2
2
Istvan
2
Istanbul
36
1
4
3
2
u
2
e
4
1
2
issuant
36
1
4
3
2

2

4
2
2
Israelite
2
Israeli
36
1
4
3
2
ael
2
i
4
1
2
Israel
36
1
4
3
2

2

4
3
2
isotropy
2
isotope
2
isotherm
36
1
4
3
2
rph
2

4
2
2
isomorphic
2
isomorph
36
1
4
3
2

2
o
4
1
2
isomer
36
1
4
3
2

2

4
2
2
Isolde
2
isolate
36
1
4
3
2

2
h
4
1
2
isocline
36
1
4
3
2
ron
2

4
2
2
isochronous
2
isochronal
36
1
4
3
2

2
clmt
4
1
2
isopleth
36
1
4
3
2

2
m
4
1
2
island
36
1
4
3
2

2

4
3
2
Islamic
2
Islamabad
2
Islam
36
1
4
3
2

2
a
4
1
2
isle
36
1
4
3
2
g
2

4
2
2
isinglass
2
Ising
36
1
4
3
2

2
n
4
1
2
Isis
36
1
4
3
2
el
2

4
2
2
Isabella
2
Isabel
36
1
4
3
2
c
2

4
2
2
Isaacson
2
Isaac
36
1
4
3
2

2
ab
4
2
2
Isaiah
2
Isadore
36
1
4
3
2

2
ailorst
4
4
2
isn't
2
Isfahan
2
isentropic
2
is
36
1
4
3
2
in
2

4
3
2
Irving
2
Irvine
2
Irvin
36
1
4
3
2
a
2
t
4
2
2
irritant
2
irritable
36
1
4
3
2

2
t
4
1
2
irrigate
36
1
4
3
2
r
2

4
2
2
irreversible
2
irreverent
36
1
4
3
2

2
e
4
1
2
irrevocable
36
1
4
3
2

2

4
2
2
irresponsible
2
irrespective
36
1
4
3
2
t
2

4
2
2
irresolution
2
irresolute
36
1
4
3
2
l
2
u
4
1
2
irresolvable
36
1
4
3
2

2
op
4
1
2
irresistible
36
1
4
3
2

2

4
2
2
irreproducible
2
irreproachable
36
1
4
3
2

2
o
4
1
2
irrepressible
36
1
4
3
2

2
r
4
2
2
irreplaceable
2
irreparable
36
1
4
3
2

2

4
2
2
irremovable
2
irremediable
36
1
4
3
2

2
n
4
1
2
irredeemable
36
1
4
3
2
tis
2

4
2
2
irredentist
2
irredentism
36
1
4
3
2

2
e
4
1
2
irreducible
36
1
4
3
2

2
o
4
1
2
irreclaimable
36
1
4
3
2

2

4
2
2
irrecoverable
2
irreconcilable
36
1
4
3
2

2
cdmpsv
4
4
2
irretrievable
2
irrelevant
2
irregular
2
irrefutable
36
1
4
3
2

2

4
3
2
Irrawaddy
2
irrational
2
irradiate
36
1
4
3
2

2
aei
4
1
2
irruption
36
1
4
3
2

2
s
4
4
2
irony
2
ironwood
2
ironic
2
iron
36
1
4
3
2

2

4
2
2
ironstone
2
ironside
36
1
4
3
2

2
n
4
1
2
Iroquois
36
1
4
3
2

2

4
2
2
irksome
2
irk
36
1
4
3
2

2

4
2
2
Irishmen
2
Irishman
36
1
4
3
2

2
m
4
1
2
Irish
36
1
4
3
2

2
h
4
1
2
iris
36
1
4
3
2

2
s
4
1
2
iridium
36
1
4
3
2

2

4
3
2
Irene
2
Ireland
2
ire
36
1
4
3
2

2

4
4
2
irate
2
Iraq
2
Iran
2
Ira
36
1
4
3
2

2
aeikorv
4
4
2
Irwin
2
IRS
2
Irma
2
IR
36
1
4
3
2

2

4
2
2
ipso
2
ipsilateral
36
1
4
3
2

2
s
4
1
2
ipecac
36
1
4
3
2
spher
2

4
2
2
ionospheric
2
ionosphere
36
1
4
3
2

2
o
4
2
2
ionic
2
ion
36
1
4
3
2

2

4
2
2
iodine
2
iodinate
36
1
4
3
2

2
n
4
1
2
iodide
36
1
4
3
2

2
i
4
1
2
iodate
36
1
4
3
2

2
dn
4
3
2
Iowa
2
iota
2
Io
36
1
4
3
2

2
t
4
1
2
involuntary
36
1
4
3
2

2

4
3
2
involutorial
2
involution
2
involute
36
1
4
3
2

2
uv
4
0
36
1
4
3
2

2
l
4
3
2
invoke
2
invoice
2
invocate
36
1
4
3
2

2

4
2
2
invitee
2
invite
36
1
4
3
2

2
e
4
1
2
invitation
36
1
4
3
2
la
2

4
2
2
inviolate
2
inviolable
36
1
4
3
2

2
ot
4
5
2
invisible
2
invincible
2
invigorate
2
invidious
2
inviable
36
1
4
3
2
gat
2

4
2
2
investigatory
2
investigate
36
1
4
3
2
t
2
io
4
2
2
investment
2
invest
36
1
4
3
2

2

4
3
2
invertible
2
invertebrate
2
invert
36
1
4
3
2

2

4
2
2
inversion
2
inverse
36
1
4
3
2

2
st
4
1
2
Inverness
36
1
4
3
2
r
2

4
2
2
inventory
2
inventor
36
1
4
3
2

2

4
2
2
inventive
2
invention
36
1
4
3
2
t
2
io
4
1
2
invent
36
1
4
3
2
g
2

4
2
2
inveigle
2
inveigh
36
1
4
3
2

2
inrs
4
2
2
inveterate
2
invective
36
1
4
3
2

2
lrs
4
1
2
invade
36
1
4
3
2
i
2

4
2
2
invasive
2
invasion
36
1
4
3
2
ia
2

4
2
2
invariant
2
invariable
36
1
4
3
2
d
2

4
2
2
invalidate
2
invalid
36
1
4
3
2

2
i
4
1
2
invaluable
36
1
4
3
2

2
aeio
4
1
2
invulnerable
36
1
4
3
2

2

4
2
2
inure
2
inundate
36
1
4
3
2

2

4
2
2
intuitive
2
intuition
36
1
4
3
2
it
2
i
4
1
2
intuitable
36
1
4
3
2
i
2

4
2
2
intrusive
2
intrusion
36
1
4
3
2

2
s
4
1
2
intrude
36
1
4
3
2
er
2

4
2
2
introvert
2
introversion
36
1
4
3
2
uc
2
te
4
1
2
introducing
36
1
4
3
2

2

4
2
2
introductory
2
introduction
36
1
4
3
2

2
dv
4
3
2
introspect
2
introject
2
introit
36
1
4
3
2
a
2

4
2
2
intricate
2
intricacy
36
1
4
3
2

2
c
4
2
2
intrinsic
2
intrigue
36
1
4
3
2

2
n
4
1
2
intractable
36
1
4
3
2
si
2

4
2
2
intransitive
2
intransigent
36
1
4
3
2

2
aiou
4
1
2
intrepid
36
1
4
3
2
ica
2

4
2
2
intoxicate
2
intoxicant
36
1
4
3
2

2

4
2
2
intone
2
intonate
36
1
4
3
2
era
2

4
2
2
intolerant
2
intolerable
36
1
4
3
2

2
lnx
4
1
2
into
36
1
4
3
2

2
t
4
2
2
intimal
2
intimacy
36
1
4
3
2
e
2

4
2
2
intimater
2
intimate
36
1
4
3
2
m
2
a
4
1
2
intimidate
36
1
4
3
2
t
2

4
2
2
intestine
2
intestate
36
1
4
3
2
n
2

4
3
2
intervention
2
intervenor
2
intervene
36
1
4
3
2

2
e
4
2
2
interviewee
2
interval
36
1
4
3
2
i
2

4
2
2
interstitial
2
interstice
36
1
4
3
2

2
te
4
1
2
intersperse
36
1
4
3
2

2

4
2
2
interruption
2
interruptible
36
1
4
3
2
pt
2
i
4
1
2
interrupt
36
1
4
3
2
gat
2

4
2
2
interrogatory
2
interrogate
36
1
4
3
2

2
ou
4
1
2
interregnum
36
1
4
3
2
et
2

4
4
2
interpreter
2
interpretive
2
interpretation
2
interpret
36
1
4
3
2
l
2
a
4
1
2
Interpol
36
1
4
3
2
t
2

4
2
2
interpolatory
2
interpolate
36
1
4
3
2

2
or
4
0
36
1
4
3
2

2
a
4
2
2
internescine
2
intern
36
1
4
3
2
t
2

4
2
2
intermittent
2
intermit
36
1
4
3
2

2
i
4
1
2
intermediary
36
1
4
3
2

2

4
2
2
interior
2
interim
36
1
4
3
2

2

4
2
2
interference
2
interfere
36
1
4
3
2

2
e
4
1
2
interface
36
1
4
3
2
pt
2

4
3
2
interceptor
2
interception
2
intercept
36
1
4
3
2

2
e
4
3
2
interchangeably
2
intercom
2
intercalate
36
1
4
3
2

2
cfimnprsve
4
4
2
interlude
2
interject
2
interdict
2
inter
36
1
4
3
2

2

4
2
2
intention
2
intent
36
1
4
3
2

2

4
2
2
intensive
2
intensify
36
1
4
3
2

2
i
4
1
2
intense
36
1
4
3
2

2

4
3
2
intended
2
intendant
2
intend
36
1
4
3
2

2
dst
4
0
36
1
4
3
2
pera
2

4
2
2
intemperate
2
intemperance
36
1
4
3
2
nt
2

4
2
2
intelligentsia
2
intelligent
36
1
4
3
2
g
2
e
4
1
2
intelligible
36
1
4
3
2
ct
2

4
2
2
intellectual
2
intellect
36
1
4
3
2
l
2
ei
4
0
36
1
4
3
2

2
r
4
2
2
integument
2
integer
36
1
4
3
2

2

4
4
2
integrate
2
integrand
2
integral
2
integrable
36
1
4
3
2

2
a
4
1
2
integrity
36
1
4
3
2

2
glmnrs
4
0
36
1
4
3
2

2

4
3
2
intangible
2
intake
2
intact
36
1
4
3
2

2
aeioru
4
0
36
1
4
3
2

2

4
5
2
insurrect
2
insurmountable
2
insurgent
2
insure
2
insurance
36
1
4
3
2

2

4
2
2
insuppressible
2
insupportable
36
1
4
3
2

2
p
4
1
2
insuperable
36
1
4
3
2

2

4
2
2
insulate
2
insular
36
1
4
3
2

2
a
4
2
2
insult
2
insulin
36
1
4
3
2
f
2

4
2
2
insufficient
2
insufferable
36
1
4
3
2

2

4
2
2
insubstantial
2
insubordinate
36
1
4
3
2

2
bflpr
4
0
36
1
4
3
2
ent
2

4
2
2
instrumentation
2
instrument
36
1
4
3
2
t
2

4
2
2
instructor
2
instruct
36
1
4
3
2
u
2
cm
4
0
36
1
4
3
2
ut
2

4
2
2
institution
2
institute
36
1
4
3
2
ct
2

4
2
2
instinctual
2
instinct
36
1
4
3
2
l
2

4
2
2
instillation
2
instill
36
1
4
3
2

2
lnt
4
1
2
instigate
36
1
4
3
2

2

4
2
2
instep
2
instead
36
1
4
3
2

2
ln
4
1
2
instable
36
1
4
3
2

2
t
4
1
2
instance
36
1
4
3
2
l
2

4
3
2
installed
2
installation
2
install
36
1
4
3
2

2
aeir
4
0
36
1
4
3
2
r
2

4
2
2
inspire
2
inspiration
36
1
4
3
2
ct
2

4
2
2
inspector
2
inspect
36
1
4
3
2

2
ei
4
0
36
1
4
3
2
nia
2

4
2
2
insomniac
2
insomnia
36
1
4
3
2

2

4
2
2
insolvent
2
insolvable
36
1
4
3
2

2
v
4
2
2
insoluble
2
insolent
36
1
4
3
2

2
lm
4
2
2
insouciant
2
insofar
36
1
4
3
2
t
2

4
3
2
insisting
2
insistent
2
insist
36
1
4
3
2

2

4
2
2
insinuate
2
insincere
36
1
4
3
2
i
2

4
2
2
insignificant
2
insignia
36
1
4
3
2
t
2

4
2
2
insightful
2
insight
36
1
4
3
2

2
hn
4
0
36
1
4
3
2

2

4
2
2
insidious
2
inside
36
1
4
3
2

2
dgns
4
1
2
insipid
36
1
4
3
2
si
2

4
2
2
insensitive
2
insensible
36
1
4
3
2

2
t
4
1
2
insecure
36
1
4
3
2

2

4
2
2
insecticide
2
insect
36
1
4
3
2

2
cnr
4
3
2
inset
2
inseparable
2
inseminate
36
1
4
3
2

2

4
2
2
inscription
2
inscribe
36
1
4
3
2
r
2
i
4
1
2
inscrutable
36
1
4
3
2

2

4
2
2
insatiable
2
insane
36
1
4
3
2

2
aceioptu
4
1
2
inshore
36
1
4
3
2

2

4
2
2
inquisitive
2
inquisition
36
1
4
3
2
it
2
i
4
1
2
inquisitor
36
1
4
3
2

2

4
2
2
inquiry
2
inquire
36
1
4
3
2

2
rs
4
0
36
1
4
3
2
u
2
i
4
1
2
inquest
36
1
4
3
2
ut
2

4
2
2
inputting
2
input
36
1
4
3
2

2

4
2
2
inorganic
2
inordinate
36
1
4
3
2
ra
2

4
2
2
inoperative
2
inoperable
36
1
4
3
2

2
e
4
1
2
inopportune
36
1
4
3
2

2
pr
4
1
2
inoculate
36
1
4
3
2

2

4
2
2
innumerable
2
innuendo
36
1
4
3
2

2

4
2
2
innocuous
2
innocent
36
1
4
3
2

2
c
4
1
2
innovate
36
1
4
3
2

2

4
2
2
innate
2
innards
36
1
4
3
2

2
aou
4
3
2
innkeeper
2
innermost
2
inn
36
1
4
3
2
a
2

4
2
2
inmate
2
Inman
36
1
4
3
2

2

4
3
2
inlay
2
inland
2
inlaid
36
1
4
3
2

2
a
4
1
2
inlet
36
1
4
3
2

2

4
2
2
inkling
2
ink
36
1
4
3
2

2

4
3
2
injury
2
injurious
2
injure
36
1
4
3
2

2

4
2
2
injunct
2
Injun
36
1
4
3
2

2
nr
4
2
2
injustice
2
injudicious
36
1
4
3
2

2
u
4
1
2
inject
36
1
4
3
2
ia
2
l
4
1
2
initiate
36
1
4
3
2
uit
2

4
2
2
iniquity
2
iniquitous
36
1
4
3
2
i
2

4
2
2
inimitable
2
inimical
36
1
4
3
2

2
mqt
4
0
36
1
4
3
2
man
2

4
2
2
inhumane
2
inhuman
36
1
4
3
2
ogene
2

4
2
2
inhomogeneous
2
inhomogeneity
36
1
4
3
2

2
m
4
2
2
inhospitable
2
inholding
36
1
4
3
2
r
2

4
2
2
inhibitory
2
inhibitor
36
1
4
3
2
bit
2
o
4
2
2
inhibition
2
inhibit
36
1
4
3
2
t
2

4
4
2
inherited
2
inheritor
2
inheritance
2
inherit
36
1
4
3
2

2

4
2
2
inherent
2
inhere
36
1
4
3
2
r
2
ei
4
0
36
1
4
3
2

2
bl
4
1
2
inharmonious
36
1
4
3
2

2

4
2
2
inhale
2
inhalation
36
1
4
3
2
it
2
a
4
1
2
inhabit
36
1
4
3
2

2

4
2
2
inhabitation
2
inhabitant
36
1
4
3
2

2
aeiou
4
0
36
1
4
3
2

2
t
4
1
2
Ingram
36
1
4
3
2

2

4
2
2
ingratitude
2
ingratiate
36
1
4
3
2

2
i
4
1
2
ingrate
36
1
4
3
2

2
a
4
2
2
ingrown
2
ingredient
36
1
4
3
2

2

4
2
2
ingestion
2
ingestible
36
1
4
3
2
t
2
i
4
1
2
ingest
36
1
4
3
2

2
u
4
1
2
ingenious
36
1
4
3
2

2

4
2
2
ingenuous
2
ingenuity
36
1
4
3
2

2
ns
4
1
2
Ingersoll
36
1
4
3
2

2
er
4
3
2
ingot
2
inglorious
2
ingather
36
1
4
3
2

2

4
2
2
infusion
2
infusible
36
1
4
3
2

2
i
4
1
2
infuse
36
1
4
3
2

2
s
4
1
2
infuriate
36
1
4
3
2

2

4
4
2
infrastructure
2
infrared
2
infract
2
infra
36
1
4
3
2

2
a
4
2
2
infringe
2
infrequent
36
1
4
3
2
i
2

4
3
2
informative
2
information
2
Informatica
36
1
4
3
2

2
t
4
2
2
informant
2
informal
36
1
4
3
2
rm
2
a
4
1
2
inform
36
1
4
3
2
n
2
t
4
2
2
influenza
2
influence
36
1
4
3
2

2

4
2
2
influential
2
influent
36
1
4
3
2

2
e
4
1
2
influx
36
1
4
3
2

2

4
2
2
inflexible
2
inflect
36
1
4
3
2

2
mt
4
0
36
1
4
3
2

2

4
2
2
inflater
2
inflate
36
1
4
3
2

2
ei
4
0
36
1
4
3
2

2
m
4
1
2
inflame
36
1
4
3
2

2

4
2
2
inflammatory
2
inflammation
36
1
4
3
2
a
2
t
4
1
2
inflammable
36
1
4
3
2

2
aeu
4
2
2
inflow
2
inflict
36
1
4
3
2
m
2

4
2
2
infirmary
2
infirm
36
1
4
3
2

2

4
2
2
infinitum
2
infinitude
36
1
4
3
2

2

4
2
2
infinitesimal
2
infinite
36
1
4
3
2
it
2
eu
4
2
2
infinity
2
infinitive
36
1
4
3
2

2

4
2
2
infimum
2
infima
36
1
4
3
2

2
mnr
4
5
2
infix
2
infiltrate
2
infighting
2
infield
2
infidel
36
1
4
3
2
t
2

4
2
2
infestation
2
infest
36
1
4
3
2

2

4
2
2
inferring
2
inferred
36
1
4
3
2

2

4
2
2
inferno
2
infernal
36
1
4
3
2
n
2

4
2
2
inferential
2
inference
36
1
4
3
2

2
enr
4
3
2
infertile
2
inferior
2
infer
36
1
4
3
2
icit
2

4
2
2
infelicity
2
infelicitous
36
1
4
3
2
t
2

4
2
2
infectious
2
infect
36
1
4
3
2

2
clrs
4
1
2
infeasible
36
1
4
3
2

2
mn
4
3
2
infatuate
2
infarct
2
infallible
36
1
4
3
2

2

4
2
2
infantrymen
2
infantryman
36
1
4
3
2
y
2
m
4
1
2
infantry
36
1
4
3
2
t
2
r
4
2
2
infantile
2
infant
36
1
4
3
2

2

4
2
2
infamy
2
infamous
36
1
4
3
2

2
aeiloru
4
0
36
1
4
3
2

2

4
2
2
inextricable
2
inextinguishable
36
1
4
3
2
c
2

4
2
2
inexplicit
2
inexplicable
36
1
4
3
2

2
i
4
1
2
inexplainable
36
1
4
3
2

2
r
4
2
2
inexpensive
2
inexpedient
36
1
4
3
2

2

4
2
2
inexpert
2
inexperience
36
1
4
3
2

2
el
4
2
2
inexpressible
2
inexpiable
36
1
4
3
2

2
pt
4
4
2
inexorable
2
inexhaustible
2
inexcusable
2
inexact
36
1
4
3
2

2

4
2
2
inestimable
2
inescapable
36
1
4
3
2
a
2

4
2
2
inertial
2
inertia
36
1
4
3
2

2
i
4
2
2
inertance
2
inert
36
1
4
3
2

2
t
4
1
2
ineradicable
36
1
4
3
2

2

4
2
2
inequity
2
inequitable
36
1
4
3
2

2
t
4
1
2
inequivalent
36
1
4
3
2
u
2
i
4
1
2
inequality
36
1
4
3
2

2

4
4
2
ineluctable
2
ineligible
2
inelegant
2
inelastic
36
1
4
3
2
c
2

4
2
2
inefficient
2
inefficacy
36
1
4
3
2
ct
2

4
2
2
ineffectual
2
ineffective
36
1
4
3
2
f
2
ei
4
1
2
ineffable
36
1
4
3
2

2
flqrsx
4
3
2
inevitable
2
inept
2
ineducable
36
1
4
3
2

2

4
3
2
industries
2
industrious
2
industrial
36
1
4
3
2
tr
2
i
4
1
2
industry
36
1
4
3
2
ge
2

4
2
2
indulgent
2
indulge
36
1
4
3
2

2

4
4
2
inductor
2
inductee
2
inductance
2
induct
36
1
4
3
2

2
t
4
2
2
inducible
2
induce
36
1
4
3
2

2
cls
4
1
2
indubitable
36
1
4
3
2

2

4
2
2
indoctrinate
2
Indochina
36
1
4
3
2

2
c
4
6
2
indorse
2
indoor
2
Indonesia
2
indomitable
2
indolent
2
Indoeuropean
36
1
4
3
2
ua
2
l
4
1
2
individuate
36
1
4
3
2
i
2
d
4
1
2
indivisible
36
1
4
3
2
in
2

4
2
2
indistinguishable
2
indistinct
36
1
4
3
2
s
2

4
2
2
indisposition
2
indispose
36
1
4
3
2

2
o
4
2
2
indisputable
2
indispensable
36
1
4
3
2

2
r
4
2
2
indiscoverable
2
indiscernible
36
1
4
3
2

2

4
2
2
indiscretion
2
indiscreet
36
1
4
3
2

2
e
4
1
2
indiscriminate
36
1
4
3
2

2
cpt
4
1
2
indissoluble
36
1
4
3
2

2

4
2
2
indirect
2
Indira
36
1
4
3
2

2

4
2
2
indignation
2
indignant
36
1
4
3
2

2
a
4
1
2
indignity
36
1
4
3
2

2
ns
4
0
36
1
4
3
2
ti
2

4
2
2
indigestion
2
indigestible
36
1
4
3
2

2

4
3
2
indigent
2
indigenous
2
indigene
36
1
4
3
2

2
en
4
1
2
indigo
36
1
4
3
2

2

4
2
2
indicate
2
indicant
36
1
4
3
2

2
a
4
2
2
indict
2
indices
36
1
4
3
2

2
n
4
1
2
India
36
1
4
3
2
a
2

4
2
2
Indianapolis
2
Indiana
36
1
4
3
2

2
acgrsv
4
3
2
indium
2
indifferent
2
Indies
36
1
4
3
2

2
cflnst
4
5
2
index
2
independent
2
indemnity
2
indeed
2
indebted
36
1
4
3
2
ermina
2

4
3
2
indeterminate
2
indeterminacy
2
indeterminable
36
1
4
3
2

2

4
2
2
indestructible
2
indescribable
36
1
4
3
2
t
2

4
3
2
indenture
2
indentation
2
indent
36
1
4
3
2
i
2

4
2
2
indelicate
2
indelible
36
1
4
3
2
n
2

4
2
2
indefinite
2
indefinable
36
1
4
3
2

2
i
4
2
2
indefensible
2
indefatigable
36
1
4
3
2
i
2

4
2
2
indecisive
2
indecision
36
1
4
3
2

2
s
4
1
2
indecipherable
36
1
4
3
2

2
i
4
2
2
indecomposable
2
indecent
36
1
4
3
2

2
eiou
4
2
2
indy
2
indwell
36
1
4
3
2

2

4
2
2
incurrer
2
incurred
36
1
4
3
2

2
e
4
1
2
incurring
36
1
4
3
2

2
r
4
2
2
incursion
2
incur
36
1
4
3
2

2

4
2
2
inculpable
2
inculcate
36
1
4
3
2

2

4
3
2
incubus
2
incubi
2
incubate
36
1
4
3
2

2
blr
4
1
2
incumbent
36
1
4
3
2

2
ad
4
1
2
increment
36
1
4
3
2
l
2

4
2
2
incredulous
2
incredulity
36
1
4
3
2

2
u
4
1
2
incredible
36
1
4
3
2
s
2
e
4
2
2
increasing
2
increasable
36
1
4
3
2

2
e
4
1
2
incriminate
36
1
4
3
2

2

4
3
2
incorruptible
2
incorrigible
2
incorrect
36
1
4
3
2
ora
2

4
2
2
incorporate
2
incorporable
36
1
4
3
2

2
pr
4
0
36
1
4
3
2
e
2

4
2
2
inconvertible
2
inconvenient
36
1
4
3
2
o
2

4
2
2
incontrovertible
2
incontrollable
36
1
4
3
2

2
r
4
1
2
incontestable
36
1
4
3
2
era
2

4
2
2
inconsiderate
2
inconsiderable
36
1
4
3
2

2
d
4
1
2
inconsistent
36
1
4
3
2

2
i
4
4
2
inconstant
2
inconspicuous
2
inconsolable
2
inconsequential
36
1
4
3
2
ru
2

4
2
2
incongruous
2
incongruity
36
1
4
3
2

2

4
2
2
inconclusive
2
inconceivable
36
1
4
3
2

2
cgstv
4
1
2
incondensable
36
1
4
3
2
ensi
2

4
2
2
incomprehension
2
incomprehensible
36
1
4
3
2
e
2
h
4
1
2
incompressible
36
1
4
3
2
et
2

4
2
2
incompletion
2
incomplete
36
1
4
3
2

2

4
2
2
incompatible
2
incomparable
36
1
4
3
2

2
alr
4
2
2
incomputable
2
incompetent
36
1
4
3
2

2

4
2
2
incommutable
2
incommunicable
36
1
4
3
2
nsura
2

4
2
2
incommensurate
2
incommensurable
36
1
4
3
2

2
eu
4
0
36
1
4
3
2

2
mp
4
2
2
income
2
incombustible
36
1
4
3
2

2
mnr
4
1
2
incoherent
36
1
4
3
2
i
2

4
2
2
inclusive
2
inclusion
36
1
4
3
2

2
sd
4
0
36
1
4
3
2
n
2

4
2
2
incline
2
inclination
36
1
4
3
2

2
iu
4
2
2
inclose
2
inclement
36
1
4
3
2

2

4
2
2
incisive
2
incise
36
1
4
3
2
ent
2
a
4
1
2
incident
36
1
4
3
2

2
ds
4
3
2
incite
2
incipient
2
incinerate
36
1
4
3
2

2

4
2
2
incestuous
2
incest
36
1
4
3
2

2
t
4
1
2
incessant
36
1
4
3
2
t
2

4
2
2
inceptor
2
inception
36
1
4
3
2

2

4
3
2
incentive
2
incense
2
incendiary
36
1
4
3
2

2
nps
4
0
36
1
4
3
2

2

4
2
2
incarnate
2
incarcerate
36
1
4
3
2
it
2

4
2
2
incapacity
2
incapacitate
36
1
4
3
2
a
2
c
4
1
2
incapable
36
1
4
3
2

2

4
2
2
incantation
2
incant
36
1
4
3
2

2
t
4
1
2
incandescent
36
1
4
3
2

2
npr
4
3
2
incautious
2
incalculable
2
Inca
36
1
4
3
2

2
aeiloru
4
2
2
inch
2
Inc
36
1
4
3
2
e
2

4
2
2
inbreed
2
inbred
36
1
4
3
2

2

4
2
2
inborn
2
inboard
36
1
4
3
2

2
or
4
0
36
1
4
3
2
ura
2

4
2
2
inaugurate
2
inaugural
36
1
4
3
2

2
g
4
2
2
inauspicious
2
inaudible
36
1
4
3
2
tenti
2

4
2
2
inattentive
2
inattention
36
1
4
3
2

2

4
2
2
inaptitude
2
inapt
36
1
4
3
2

2
r
4
2
2
inapplicable
2
inappeasable
36
1
4
3
2

2

4
2
2
inappropriate
2
inapproachable
36
1
4
3
2

2
o
4
1
2
inappreciable
36
1
4
3
2

2
pt
4
0
36
1
4
3
2

2

4
2
2
inanimate
2
inane
36
1
4
3
2

2

4
2
2
inalterable
2
inalienable
36
1
4
3
2

2

4
2
2
inadvisable
2
inadvertent
36
1
4
3
2
qua
2

4
2
2
inadequate
2
inadequacy
36
1
4
3
2

2
ev
4
1
2
inadmissible
36
1
4
3
2

2

4
2
2
inactive
2
inactivate
36
1
4
3
2
i
2
v
4
1
2
inaction
36
1
4
3
2

2
u
4
1
2
inaccessible
36
1
4
3
2
ra
2

4
2
2
inaccurate
2
inaccuracy
36
1
4
3
2

2
ct
4
0
36
1
4
3
2

2
cdlnptu
4
3
2
inasmuch
2
inarticulate
2
inability
36
1
4
3
2

2
abcdefghijklmnopqstuv
4
3
2
inward
2
inroad
2
in
36
1
4
3
2

2

4
2
2
impute
2
imputation
36
1
4
3
2
s
2

4
2
2
impulsive
2
impulse
36
1
4
3
2

2
lt
4
4
2
impure
2
impunity
2
impugn
2
impudent
36
1
4
3
2

2

4
2
2
improvise
2
improvisate
36
1
4
3
2

2
s
4
1
2
improvident
36
1
4
3
2

2
i
4
1
2
improve
36
1
4
3
2

2
e
4
1
2
impropriety
36
1
4
3
2

2
pv
4
2
2
impromptu
2
improbable
36
1
4
3
2

2

4
3
2
imprison
2
imprint
2
imprimatur
36
1
4
3
2

2

4
3
2
impressive
2
impression
2
impressible
36
1
4
3
2

2
i
4
2
2
impressed
2
impress
36
1
4
3
2

2
s
4
1
2
impresario
36
1
4
3
2
na
2

4
2
2
impregnate
2
impregnable
36
1
4
3
2

2

4
2
2
imprecise
2
imprecate
36
1
4
3
2

2
cgs
4
0
36
1
4
3
2
ctica
2

4
2
2
impractical
2
impracticable
36
1
4
3
2

2
aeio
4
1
2
imprudent
36
1
4
3
2

2

4
2
2
imposture
2
impost
36
1
4
3
2

2
t
4
3
2
impossible
2
imposition
2
impose
36
1
4
3
2
n
2

4
2
2
importune
2
importunate
36
1
4
3
2

2

4
2
2
importation
2
important
36
1
4
3
2
t
2
au
4
1
2
import
36
1
4
3
2
it
2

4
2
2
impolitic
2
impolite
36
1
4
3
2

2
lrs
4
4
2
impoverish
2
impound
2
impotent
2
imponderable
36
1
4
3
2

2

4
2
2
implicate
2
implicant
36
1
4
3
2

2
c
4
1
2
implied
36
1
4
3
2
ment
2

4
5
2
implementing
2
implementor
2
implementer
2
implementation
2
implement
36
1
4
3
2

2
n
4
2
2
implausible
2
implacable
36
1
4
3
2
t
2

4
2
2
implantation
2
implant
36
1
4
3
2

2
aei
4
1
2
implore
36
1
4
3
2

2

4
4
2
impish
2
impious
2
impinge
2
impiety
36
1
4
3
2
u
2

4
2
2
impetus
2
impetuous
36
1
4
3
2

2

4
2
2
imperturbable
2
impertinent
36
1
4
3
2
ona
2

4
2
2
impersonate
2
impersonal
36
1
4
3
2

2

4
2
2
impermissible
2
impermeable
36
1
4
3
2

2

4
4
2
imperishable
2
imperious
2
imperil
2
imperial
36
1
4
3
2
e
2

4
2
2
imperceptible
2
imperceivable
36
1
4
3
2

2
cimst
4
3
2
impervious
2
imperfect
2
imperate
36
1
4
3
2

2

4
2
2
impenetrable
2
impend
36
1
4
3
2

2

4
2
2
impeller
2
impelled
36
1
4
3
2

2
e
4
1
2
impelling
36
1
4
3
2

2
l
4
1
2
impel
36
1
4
3
2

2

4
3
2
impediment
2
impede
2
impedance
36
1
4
3
2

2
dlnrt
4
2
2
impeccable
2
impeach
36
1
4
3
2

2

4
2
2
impassive
2
impassion
36
1
4
3
2
s
2
i
4
2
2
impasse
2
impassable
36
1
4
3
2
t
2

4
3
2
impartial
2
impartation
2
impart
36
1
4
3
2

2

4
2
2
impalpable
2
impale
36
1
4
3
2

2
lrsi
4
2
2
impatient
2
impact
36
1
4
3
2

2
aeiloru
4
1
2
imp
36
1
4
3
2

2

4
2
2
immunoelectrophoresis
2
immune
36
1
4
3
2

2
n
4
1
2
immutable
36
1
4
3
2

2

4
2
2
immortal
2
immoral
36
1
4
3
2
t
2

4
2
2
immodesty
2
immodest
36
1
4
3
2
e
2
s
4
1
2
immoderate
36
1
4
3
2
il
2

4
2
2
immobility
2
immobile
36
1
4
3
2

2
bdr
4
1
2
immovable
36
1
4
3
2
ra
2

4
2
2
immigrate
2
immigrant
36
1
4
3
2

2
g
4
2
2
imminent
2
immiscible
36
1
4
3
2
s
2

4
2
2
immersion
2
immerse
36
1
4
3
2
ia
2

4
2
2
immediate
2
immediacy
36
1
4
3
2

2
dr
4
3
2
immense
2
immemorial
2
immeasurable
36
1
4
3
2

2
t
4
2
2
immanent
2
immaculate
36
1
4
3
2

2

4
2
2
immature
2
immaterial
36
1
4
3
2

2
aeiou
4
0
36
1
4
3
2
ta
2

4
2
2
imitate
2
imitable
36
1
4
3
2

2

4
3
2
imbrue
2
imbroglio
2
Imbrium
36
1
4
3
2

2
r
4
4
2
imbue
2
imbibe
2
imbecile
2
imbalance
36
1
4
3
2
g
2
ei
4
0
36
1
4
3
2

2

4
2
2
imaginate
2
imaginary
36
1
4
3
2
n
2
a
4
1
2
imagine
36
1
4
3
2

2

4
3
2
imagery
2
imagen
2
image
36
1
4
3
2

2
abimp
4
0
36
1
4
3
2
r
2

4
2
2
illustrious
2
illustrate
36
1
4
3
2

2
o
4
1
2
illusive
36
1
4
3
2
n
2

4
2
2
illusionary
2
illusion
36
1
4
3
2

2
it
4
1
2
illusory
36
1
4
3
2

2
i
4
1
2
illume
36
1
4
3
2
n
2

4
2
2
illumine
2
illuminate
36
1
4
3
2

2
ms
4
0
36
1
4
3
2
era
2

4
2
2
illiterate
2
illiteracy
36
1
4
3
2

2
t
4
3
2
Illinois
2
illimitable
2
illicit
36
1
4
3
2
ima
2

4
2
2
illegitimate
2
illegitimacy
36
1
4
3
2

2
t
4
1
2
illegible
36
1
4
3
2
g
2
i
4
1
2
illegal
36
1
4
3
2

2
eiu
4
2
2
illogic
2
ill
36
1
4
3
2

2

4
5
2
I've
2
i's
2
I'm
2
I'll
2
I'd
36
1
4
3
2
a
2

4
2
2
Iliad
2
iliac
36
1
4
3
2

2
il
4
4
2
Ilyushin
2
Ilona
2
ileum
2
IL
36
1
4
3
2

2

4
2
2
iii
2
ii
36
1
4
3
2

2

4
2
2
ignorant
2
ignoramus
36
1
4
3
2

2
a
4
1
2
ignore
36
1
4
3
2

2
r
4
2
2
ignominious
2
ignoble
36
1
4
3
2
t
2

4
2
2
ignition
2
ignite
36
1
4
3
2

2
io
4
1
2
igneous
36
1
4
3
2

2
n
4
2
2
Igor
2
igloo
36
1
4
3
2

2

4
3
2
Ifni
2
iffy
2
if
36
1
4
3
2
ll
2

4
2
2
idyllic
2
idyll
36
1
4
3
2
l
2

4
2
2
idolatry
2
idol
36
1
4
3
2

2

4
2
2
idiotic
2
idiot
36
1
4
3
2
yncra
2

4
2
2
idiosyncratic
2
idiosyncrasy
36
1
4
3
2

2

4
2
2
idiomatic
2
idiom
36
1
4
3
2
o
2
mst
4
1
2
idiocy
36
1
4
3
2
l
2

4
2
2
ideology
2
ideolect
36
1
4
3
2
ti
2

4
3
2
identity
2
identify
2
identical
36
1
4
3
2

2

4
4
2
ideas
2
ideate
2
ideal
2
idea
36
1
4
3
2

2
ano
4
1
2
idempotent
36
1
4
3
2

2

4
2
2
Idaho
2
Ida
36
1
4
3
2

2
aeioy
4
2
2
idle
2
ID
36
1
4
3
2

2

4
2
2
icosahedral
2
icosahedra
36
1
4
3
2
ahedr
2
a
4
1
2
icosahedron
36
1
4
3
2

2
o
4
1
2
icon
36
1
4
3
2
clas
2

4
2
2
iconoclast
2
iconoclasm
36
1
4
3
2

2
ns
4
0
36
1
4
3
2
and
2

4
2
2
Icelandic
2
iceland
36
1
4
3
2

2

4
2
2
icebox
2
iceberg
36
1
4
3
2

2
bl
4
1
2
ice
36
1
4
3
2

2
eo
4
6
2
icy
2
icky
2
icicle
2
ichneumon
2
ICC
2
Icarus
36
1
4
3
2

2

4
2
2
ibis
2
ibid
36
1
4
3
2

2

4
2
2
ibex
2
Iberia
36
1
4
3
2

2
ei
4
2
2
Ibn
2
IBM
36
1
4
3
2

2

4
3
2
Ian
2
iambic
2
IA
36
1
4
3
2

2
abCdfgil'mnoprstv
4
6
2
Izvestia
2
ix
2
IQ
2
Ike
2
IEEE
2
i
36
1
4
3
2

2

4
2
2
hysteric
2
hysteria
36
1
4
3
2

2

4
2
2
hysteresis
2
hysterectomy
36
1
4
3
2
ter
2
ei
4
1
2
hysteron
36
1
4
3
2

2

4
2
2
hypothesis
2
hypotheses
36
1
4
3
2

2
s
4
1
2
hypothetic
36
1
4
3
2
lam
2

4
2
2
hypothalamus
2
hypothalamic
36
1
4
3
2

2
ae
4
1
2
hypothyroid
36
1
4
3
2

2
h
4
1
2
hypotenuse
36
1
4
3
2

2

4
2
2
hypocritic
2
hypocrite
36
1
4
3
2
i
2
t
4
1
2
hypocrisy
36
1
4
3
2
lor
2

4
2
2
hypochlorous
2
hypochlorite
36
1
4
3
2

2
hr
4
1
2
hypocycloid
36
1
4
3
2

2
ct
4
3
2
hypophyseal
2
hypodermic
2
hypoactive
36
1
4
3
2
o
2

4
2
2
hypnotic
2
hypnosis
36
1
4
3
2
en
2

4
2
2
hyphenate
2
hyphen
36
1
4
3
2
r
2
b
4
1
2
hypertensive
36
1
4
3
2
ol
2
o
4
2
2
hyperbolic
2
hyperbola
36
1
4
3
2
id
2

4
2
2
hyperboloidal
2
hyperboloid
36
1
4
3
2

2
ehno
4
0
36
1
4
3
2

2

4
2
2
hymnal
2
hymn
36
1
4
3
2

2
n
4
2
2
hymen
2
Hyman
36
1
4
3
2
o
2

4
2
2
hygroscopic
2
hygrometer
36
1
4
3
2

2
r
4
1
2
hygiene
36
1
4
3
2

2

4
2
2
hydroxylate
2
hydroxyl
36
1
4
3
2

2
l
4
1
2
hydroxy
36
1
4
3
2

2
y
4
1
2
hydroxide
36
1
4
3
2

2

4
2
2
hydrostatic
2
hydrosphere
36
1
4
3
2
bi
2

4
2
2
hydrophobic
2
hydrophobia
36
1
4
3
2
h
2
o
4
1
2
hydrophilic
36
1
4
3
2

2

4
2
2
hydrolysis
2
hydrology
36
1
4
3
2
en
2

4
2
2
hydrogenate
2
hydrogen
36
1
4
3
2
ori
2

4
2
2
hydrochloride
2
hydrochloric
36
1
4
3
2

2
l
4
1
2
hydrochemistry
36
1
4
3
2

2
h
4
1
2
hydrocarbon
36
1
4
3
2

2
cglpsx
4
8
2
hydrous
2
hydrothermal
2
hydronium
2
hydrometer
2
hydrofluoric
2
hydroelectric
2
hydrodynamic
2
hydro
36
1
4
3
2

2
n
4
3
2
hydraulic
2
hydrate
2
hydra
36
1
4
3
2

2

4
2
2
hydrant
2
hydrangea
36
1
4
3
2

2
ao
4
1
2
hydride
36
1
4
3
2

2
r
4
1
2
Hyde
36
1
4
3
2

2

4
4
2
Hyannis
2
hyaline
2
Hyades
2
hyacinth
36
1
4
3
2

2
adgmps
4
3
2
hying
2
hyena
2
hybrid
36
1
4
3
2

2

4
2
2
Huxtable
2
Huxley
36
1
4
3
2
s
2

4
2
2
Hutchinson
2
Hutchins
36
1
4
3
2

2
n
4
1
2
Hutchison
36
1
4
3
2
h
2
i
4
1
2
hutch
36
1
4
3
2

2
c
4
1
2
hut
36
1
4
3
2

2

4
2
2
Huston
2
hustle
36
1
4
3
2
and
2
m
4
2
2
husbandry
2
husband
36
1
4
3
2

2

4
2
2
husbandmen
2
husbandman
36
1
4
3
2

2
bt
4
2
2
husky
2
hush
36
1
4
3
2

2

4
3
2
hurty
2
hurtle
2
hurt
36
1
4
3
2

2

4
2
2
hurray
2
hurrah
36
1
4
3
2

2
a
4
2
2
hurry
2
hurricane
36
1
4
3
2

2

4
2
2
hurley
2
hurl
36
1
4
3
2

2

4
2
2
hurdle
2
Hurd
36
1
4
3
2

2
dlrt
4
3
2
Hurwitz
2
Hurst
2
Huron
36
1
4
3
2

2

4
4
2
Huntsville
2
Huntley
2
Huntington
2
hunt
36
1
4
3
2
r
2

4
2
2
Hungary
2
Hungarian
36
1
4
3
2

2
a
4
2
2
hungry
2
hung
36
1
4
3
2
red
2

4
3
2
hundredth
2
hundredfold
2
hundred
36
1
4
3
2

2
dgt
4
3
2
hunk
2
hunch
2
Hun
36
1
4
3
2

2

4
4
2
humpty
2
Humphrey
2
humpback
2
hump
36
1
4
3
2

2

4
3
2
hummock
2
hummingbird
2
Hummel
36
1
4
3
2
i
2

4
2
2
humility
2
humiliate
36
1
4
3
2

2
i
4
1
2
humid
36
1
4
3
2

2

4
2
2
humidistat
2
humidify
36
1
4
3
2

2
dl
4
0
36
1
4
3
2

2

4
2
2
Humboldt
2
humble
36
1
4
3
2
n
2

4
3
2
humanitarian
2
humane
2
human
36
1
4
3
2

2
abimp
4
4
2
humus
2
humorous
2
humerus
2
hum
36
1
4
3
2

2

4
2
2
hull
2
hulk
36
1
4
3
2

2

4
2
2
Hughes
2
Hugh
36
1
4
3
2
in
2

4
2
2
Huggins
2
hugging
36
1
4
3
2

2
gh
4
3
2
Hugo
2
huge
2
hug
36
1
4
3
2
f
2

4
2
2
Huffman
2
huff
36
1
4
3
2

2

4
2
2
Hudson
2
huddle
36
1
4
3
2
k
2

4
3
2
huckster
2
huckleberry
2
huck
36
1
4
3
2

2
be
4
2
2
hubris
2
hub
36
1
4
3
2
r
2

4
2
2
Hubert
2
Huber
36
1
4
3
2

2

4
4
2
hubby
2
hubbub
2
Hubbell
2
Hubbard
36
1
4
3
2

2
bcdfglmnrstx
4
3
2
huzzah
2
huh
2
hue
36
1
4
3
2
en
2

4
2
2
hoydenish
2
hoyden
36
1
4
3
2

2
d
4
2
2
Hoyt
2
hoy
36
1
4
3
2
o
2

4
2
2
howsomever
2
howsoever
36
1
4
3
2

2

4
3
2
however
2
Howell
2
Howe
36
1
4
3
2

2
es
4
4
2
howl
2
howdy
2
Howard
2
how
36
1
4
3
2
e
2

4
3
2
hover
2
hovel
2
hove
36
1
4
3
2

2
bw
4
5
2
houses
2
housekeep
2
household
2
housefly
2
house
36
1
4
3
2

2

4
2
2
housewives
2
housewife
36
1
4
3
2

2
i
4
1
2
housework
36
1
4
3
2

2

4
2
2
housebroken
2
housebreak
36
1
4
3
2

2
r
4
1
2
houseboat
36
1
4
3
2

2
e
4
1
2
Houston
36
1
4
3
2

2

4
3
2
hours
2
hourglass
2
hour
36
1
4
3
2
h
2

4
2
2
Houghton
2
hough
36
1
4
3
2

2

4
2
2
Houdini
2
Houdaille
36
1
4
3
2

2
dgrs
4
1
2
hound
36
1
4
3
2

2

4
2
2
hothouse
2
hothead
36
1
4
3
2
l
2

4
2
2
hotelman
2
hotel
36
1
4
3
2

2

4
2
2
hotbox
2
hotbed
36
1
4
3
2

2
beh
4
2
2
hotrod
2
hot
36
1
4
3
2

2

4
2
2
hostess
2
hostelry
36
1
4
3
2

2
e
4
4
2
hostler
2
hostile
2
hostage
2
host
36
1
4
3
2
a
2

4
2
2
hospital
2
hospitable
36
1
4
3
2
i
2
t
4
1
2
hospice
36
1
4
3
2

2
pt
4
2
2
hosiery
2
hose
36
1
4
3
2

2

4
2
2
Horton
2
horticulture
36
1
4
3
2
om
2

4
2
2
horsewomen
2
horsewoman
36
1
4
3
2

2

4
2
2
horsepower
2
horseplay
36
1
4
3
2

2

4
2
2
horsemen
2
horseman
36
1
4
3
2
l
2

4
2
2
horsefly
2
horseflesh
36
1
4
3
2
e
2
fmpw
4
6
2
horsetail
2
horseshoe
2
horsehair
2
horsedom
2
horseback
2
horse
36
1
4
3
2

2

4
3
2
horrify
2
horrid
2
horrible
36
1
4
3
2

2
i
4
2
2
horror
2
horrendous
36
1
4
3
2

2

4
3
2
Horowitz
2
horoscope
2
horology
36
1
4
3
2

2

4
2
2
Hornblower
2
hornblende
36
1
4
3
2

2
l
4
1
2
hornbeam
36
1
4
3
2

2
b
4
6
2
horny
2
hornwort
2
horntail
2
hornmouth
2
hornet
2
horn
36
1
4
3
2
zon
2
t
4
1
2
horizon
36
1
4
3
2

2

4
2
2
Horatio
2
Horace
36
1
4
3
2

2
ainorst
4
4
2
Horus
2
hormone
2
horehound
2
horde
36
1
4
3
2
ins
2

4
2
2
Hopkinsian
2
Hopkins
36
1
4
3
2

2

4
2
2
hopeful
2
hope
36
1
4
3
2

2
ek
4
3
2
hopscotch
2
hopple
2
hop
36
1
4
3
2
e
2

4
2
2
hooves
2
Hoover
36
1
4
3
2

2

4
2
2
Hoosier
2
hoosegow
36
1
4
3
2

2

4
2
2
hoopla
2
hoop
36
1
4
3
2

2

4
3
2
hookworm
2
hookup
2
hook
36
1
4
3
2

2

4
2
2
hoofmark
2
hoof
36
1
4
3
2

2

4
2
2
hoodlum
2
hood
36
1
4
3
2

2
dfkpsv
4
3
2
hoot
2
hooligan
2
hooch
36
1
4
3
2
r
2
i
4
1
2
honorary
36
1
4
3
2

2

4
2
2
honoraria
2
honorarium
36
1
4
3
2

2
a
4
2
2
honorific
2
honoree
36
1
4
3
2

2
r
4
1
2
Honolulu
36
1
4
3
2

2

4
7
2
Honeywell
2
honeysuckle
2
honeymoon
2
honeydew
2
honeycomb
2
honeybee
2
honey
36
1
4
3
2
t
2

4
2
2
honesty
2
honest
36
1
4
3
2

2
sy
4
1
2
hone
36
1
4
3
2

2

4
3
2
Honduras
2
hondo
2
Honda
36
1
4
3
2

2
deo
4
3
2
Honshu
2
honk
2
hong
36
1
4
3
2
orphi
2

4
2
2
homomorphism
2
homomorphic
36
1
4
3
2
og
2

4
3
2
homology
2
homologue
2
homologous
36
1
4
3
2

2

4
2
2
homogeneous
2
homogeneity
36
1
4
3
2
en
2
e
4
1
2
homogenate
36
1
4
3
2

2
glm
4
6
2
homozygous
2
homotopy
2
homosexual
2
homophobia
2
homonym
2
homo
36
1
4
3
2
id
2

4
2
2
homicide
2
homicidal
36
1
4
3
2

2
c
4
1
2
homily
36
1
4
3
2

2

4
2
2
homework
2
homeward
36
1
4
3
2

2

4
2
2
homestead
2
homesick
36
1
4
3
2
orph
2

4
2
2
homeomorphic
2
homeomorph
36
1
4
3
2

2
m
4
2
2
homeowner
2
homeopath
36
1
4
3
2
a
2

4
2
2
homemake
2
homemade
36
1
4
3
2
ild
2

4
2
2
homebuilding
2
homebuilder
36
1
4
3
2

2
u
4
1
2
homebound
36
1
4
3
2

2
bmosw
4
4
2
Homeric
2
homeland
2
homecoming
2
home
36
1
4
3
2

2
eio
4
3
2
homunculus
2
homage
2
Hom
36
1
4
3
2

2

4
2
2
holystone
2
Holyoke
36
1
4
3
2

2

4
2
2
holster
2
Holstein
36
1
4
3
2
t
2
e
4
1
2
Holst
36
1
4
3
2
ra
2

4
2
2
holography
2
hologram
36
1
4
3
2

2

4
2
2
Holocene
2
holocaust
36
1
4
3
2

2
cg
4
0
36
1
4
3
2

2

4
5
2
holmium
2
Holmes
2
Holmdel
2
Holman
2
Holm
36
1
4
3
2

2

4
3
2
Hollywood
2
hollyhock
2
holly
36
1
4
3
2
w
2

4
3
2
hollowware
2
Holloway
2
hollow
36
1
4
3
2

2

4
2
2
Hollister
2
Hollingsworth
36
1
4
3
2
r
2

4
2
2
Hollerith
2
holler
36
1
4
3
2
nd
2

4
2
2
Hollandaise
2
Holland
36
1
4
3
2

2
aeioy
4
0
36
1
4
3
2

2

4
2
2
holeable
2
hole
36
1
4
3
2

2

4
6
2
holds
2
holding
2
holdup
2
holdover
2
holden
2
hold
36
1
4
3
2

2
delmosy
4
4
2
holt
2
holiday
2
Holcomb
2
Holbrook
36
1
4
3
2

2

4
3
2
hogging
2
hogan
2
hog
36
1
4
3
2
f
2

4
2
2
Hoffman
2
Hoff
36
1
4
3
2

2

4
3
2
Hodges
2
hodgepodge
2
hodge
36
1
4
3
2
g
2
e
4
1
2
Hodgkin
36
1
4
3
2

2

4
2
2
hockey
2
hock
36
1
4
3
2

2
k
4
1
2
hoc
36
1
4
3
2

2

4
2
2
Hoboken
2
hobo
36
1
4
3
2

2

4
2
2
hobbyhorse
2
hobby
36
1
4
3
2

2
y
4
3
2
Hobbs
2
hobble
2
Hobbes
36
1
4
3
2

2
bo
4
2
2
Hobart
2
hob
36
1
4
3
2

2

4
4
2
hoarse
2
hoarfrost
2
hoard
2
hoar
36
1
4
3
2

2

4
3
2
hoagy
2
Hoagland
2
hoagie
36
1
4
3
2

2
gr
4
0
36
1
4
3
2

2
abcdfglmnoprstuvwy
4
4
2
Hokan
2
hoi
2
hoe
2
ho
36
1
4
3
2
er
2

4
2
2
hitherto
2
hither
36
1
4
3
2
h
2

4
2
2
Hitchcock
2
hitch
36
1
4
3
2

2
ch
4
3
2
Hitler
2
Hitachi
2
hit
36
1
4
3
2

2

4
3
2
historiography
2
historic
2
historian
36
1
4
3
2

2
i
4
1
2
history
36
1
4
3
2
hemi
2

4
2
2
histochemistry
2
histochemic
36
1
4
3
2

2
cr
4
2
2
histology
2
histogram
36
1
4
3
2

2
o
4
3
2
histrionic
2
histidine
2
histamine
36
1
4
3
2

2
t
4
3
2
hiss
2
Hispanic
2
his
36
1
4
3
2

2

4
2
2
hirsute
2
Hirsch
36
1
4
3
2
shi
2

4
2
2
Hiroshima
2
Hiroshi
36
1
4
3
2

2

4
2
2
hireling
2
hire
36
1
4
3
2

2
eos
4
1
2
Hiram
36
1
4
3
2

2
c
4
3
2
hippopotamus
2
hippodrome
2
hippo
36
1
4
3
2
rat
2

4
2
2
Hippocratic
2
Hippocrates
36
1
4
3
2

2
o
4
1
2
hippy
36
1
4
3
2

2
p
4
2
2
hipster
2
hip
36
1
4
3
2

2

4
2
2
hinterland
2
hint
36
1
4
3
2

2

4
6
2
hinder
2
Hindu
2
hindsight
2
hindrance
2
hindmost
2
hind
36
1
4
3
2

2
dt
4
3
2
Hinman
2
hinge
2
Hines
36
1
4
3
2

2

4
3
2
himself
2
Himalaya
2
him
36
1
4
3
2

2

4
2
2
Hilton
2
hilt
36
1
4
3
2

2

4
2
2
hillmen
2
hillman
36
1
4
3
2

2
m
4
8
2
hilly
2
hilltop
2
hillside
2
hillock
2
Hillel
2
Hillcrest
2
hillbilly
2
hill
36
1
4
3
2
ri
2

4
2
2
hilarity
2
hilarious
36
1
4
3
2

2
alt
4
3
2
hilum
2
Hildebrand
2
Hilbert
36
1
4
3
2

2

4
2
2
highwaymen
2
highwayman
36
1
4
3
2
ay
2
m
4
1
2
highway
36
1
4
3
2

2

4
3
2
highly
2
highlight
2
highland
36
1
4
3
2

2

4
2
2
highboy
2
highball
36
1
4
3
2

2
blw
4
7
2
high-level
2
higher
2
hightail
2
highroad
2
highhanded
2
highfalutin
2
high
36
1
4
3
2

2
h
4
1
2
Higgins
36
1
4
3
2

2

4
2
2
Hieronymus
2
hieroglyphic
36
1
4
3
2

2
r
4
1
2
hieratic
36
1
4
3
2
ch
2

4
3
2
hierarchy
2
hierarchic
2
hierarchal
36
1
4
3
2
r
2
ao
4
0
36
1
4
3
2
u
2

4
2
2
hideout
2
hideous
36
1
4
3
2

2
o
4
2
2
hideaway
2
hide
36
1
4
3
2

2
e
4
3
2
hidden
2
hidalgo
2
hid
36
1
4
3
2
k
2

4
4
2
hickory
2
Hickman
2
Hickey
2
hick
36
1
4
3
2
rn
2

4
2
2
Hibernia
2
hibernate
36
1
4
3
2

2
e
4
2
2
Hibbard
2
hibachi
36
1
4
3
2

2

4
2
2
hiatus
2
Hiatt
36
1
4
3
2

2
t
4
1
2
Hiawatha
36
1
4
3
2

2
abcdeglmnprst
4
5
2
hive
2
hike
2
hijack
2
hifalutin
2
hi
36
1
4
3
2

2

4
2
2
heyday
2
hey
36
1
4
3
2
on
2

4
2
2
hexagonal
2
hexagon
36
1
4
3
2

2
g
4
5
2
hexane
2
hexameter
2
hexafluoride
2
hexadecimal
2
hexachloride
36
1
4
3
2

2
a
4
1
2
hex
36
1
4
3
2

2

4
5
2
hewn
2
Hewlett
2
Hewitt
2
Hewett
2
hew
36
1
4
3
2
e
2

4
2
2
Heuser
2
Heusen
36
1
4
3
2

2
s
4
2
2
heuristic
2
Heublein
36
1
4
3
2

2

4
2
2
Hetty
2
Hettie
36
1
4
3
2
ro
2
gs
4
3
2
heterozygous
2
heterodyne
2
heterocyclic
36
1
4
3
2

2

4
2
2
heterostructure
2
heterosexual
36
1
4
3
2
ne
2

4
2
2
heterogeneous
2
heterogeneity
36
1
4
3
2

2
e
4
1
2
heterogamous
36
1
4
3
2

2
et
4
1
2
Hetman
36
1
4
3
2

2

4
3
2
Hessian
2
Hesse
2
Hess
36
1
4
3
2
ta
2
t
4
1
2
hesitant
36
1
4
3
2
e
2

4
2
2
hesitater
2
hesitate
36
1
4
3
2

2
is
4
2
2
Hester
2
Hesperus
36
1
4
3
2
z
2

4
2
2
Hertzog
2
hertz
36
1
4
3
2
e
2

4
2
2
Hershey
2
Hershel
36
1
4
3
2

2
h
4
3
2
herself
2
Herschel
2
hers
36
1
4
3
2

2

4
2
2
herringbone
2
Herr
36
1
4
3
2
e
2

4
2
2
herpetology
2
herpes
36
1
4
3
2

2

4
2
2
heroine
2
heroin
36
1
4
3
2

2
n
4
2
2
heroism
2
heroic
36
1
4
3
2

2
i
4
4
2
heron
2
heroes
2
Herodotus
2
hero
36
1
4
3
2
t
2

4
2
2
hermitian
2
Hermite
36
1
4
3
2

2

4
3
2
hermetic
2
Hermes
2
hermeneutic
36
1
4
3
2
n
2

4
2
2
Hermann
2
Herman
36
1
4
3
2

2
aei
4
1
2
Hermosa
36
1
4
3
2
ta
2

4
2
2
heritage
2
heritable
36
1
4
3
2
n
2

4
2
2
hereunto
2
hereunder
36
1
4
3
2

2

4
2
2
heretofore
2
hereto
36
1
4
3
2

2
o
4
1
2
heretic
36
1
4
3
2

2

4
2
2
hereinafter
2
hereinabove
36
1
4
3
2
n
2
a
4
2
2
hereinbelow
2
herein
36
1
4
3
2
it
2

4
2
2
heredity
2
hereditary
36
1
4
3
2

2

4
2
2
hereafter
2
hereabout
36
1
4
3
2

2
aditu
4
6
2
herewith
2
heresy
2
hereof
2
Hereford
2
hereby
2
here
36
1
4
3
2

2

4
2
2
herdsman
2
herd
36
1
4
3
2
ule
2

4
2
2
Hercules
2
Herculean
36
1
4
3
2

2

4
2
2
Herbert
2
herb
36
1
4
3
2

2

4
3
2
herald
2
Heraclitus
2
Hera
36
1
4
3
2

2
abcdeimoprst
4
3
2
Hernandez
2
Herkimer
2
her
36
1
4
3
2
ti
2

4
2
2
hepatitis
2
hepatica
36
1
4
3
2

2
a
4
2
2
heptane
2
Hepburn
36
1
4
3
2

2

4
2
2
Henrietta
2
Henri
36
1
4
3
2

2
i
4
1
2
henry
36
1
4
3
2
ick
2

4
2
2
Hendrickson
2
Hendrick
36
1
4
3
2

2
r
4
1
2
Henderson
36
1
4
3
2
m
2

4
2
2
henchmen
2
henchman
36
1
4
3
2

2

4
2
2
henceforth
2
hence
36
1
4
3
2

2
eh
4
0
36
1
4
3
2

2
cdr
4
5
2
henpeck
2
Henley
2
henequen
2
henbane
2
hen
36
1
4
3
2

2

4
2
2
Hempstead
2
hemp
36
1
4
3
2
rh
2

4
2
2
hemorrhoid
2
hemorrhage
36
1
4
3
2

2
r
4
3
2
hemosiderin
2
hemolytic
2
hemoglobin
36
1
4
3
2
pher
2

4
2
2
hemispheric
2
hemisphere
36
1
4
3
2

2
s
4
1
2
Hemingway
36
1
4
3
2

2
iop
4
3
2
hemlock
2
hematite
2
hem
36
1
4
3
2

2

4
4
2
helps
2
helpmate
2
helpful
2
help
36
1
4
3
2
m
2

4
2
2
helmsmen
2
helmsman
36
1
4
3
2

2
s
4
4
2
Helmut
2
Helmholtz
2
helmet
2
helm
36
1
4
3
2

2

4
2
2
Hellenic
2
hellebore
36
1
4
3
2

2
e
4
6
2
hello
2
hellish
2
hellgrammite
2
hellfire
2
hellbender
2
hell
36
1
4
3
2

2

4
2
2
he'll
2
he'd
36
1
4
3
2

2

4
2
2
heliotrope
2
heliocentric
36
1
4
3
2

2

4
2
2
helicopter
2
helical
36
1
4
3
2

2
co
4
2
2
helix
2
helium
36
1
4
3
2
n
2

4
3
2
Helene
2
Helena
2
Helen
36
1
4
3
2

2
eilmp
4
4
2
Helvetica
2
Helsinki
2
Helga
2
held
36
1
4
3
2

2

4
3
2
heirarchy
2
heiress
2
heir
36
1
4
3
2

2

4
3
2
Heinz
2
Heinrich
2
Heine
36
1
4
3
2

2

4
2
2
heighten
2
height
36
1
4
3
2
h
2
t
4
1
2
heigh
36
1
4
3
2

2
gnr
4
2
2
Heisenberg
2
Heidelberg
36
1
4
3
2
e
2

4
2
2
hegemony
2
Hegelian
36
1
4
3
2
t
2

4
2
2
hefty
2
heft
36
1
4
3
2

2

4
2
2
heel
2
heed
36
1
4
3
2
nis
2

4
2
2
hedonist
2
hedonism
36
1
4
3
2
e
2

4
2
2
hedgehog
2
hedge
36
1
4
3
2

2
go
4
0
36
1
4
3
2

2

4
2
2
hector
2
hectic
36
1
4
3
2

2

4
3
2
Heckman
2
heckle
2
heck
36
1
4
3
2
t
2

4
2
2
hecatomb
2
Hecate
36
1
4
3
2

2
akt
4
1
2
Hecuba
36
1
4
3
2

2

4
2
2
Hebrew
2
Hebraic
36
1
4
3
2

2

4
2
2
hebephrenic
2
Hebe
36
1
4
3
2

2
er
4
0
36
1
4
3
2

2

4
2
2
heavyweight
2
heavy
36
1
4
3
2

2
n
4
1
2
heave
36
1
4
3
2

2

4
2
2
heavenward
2
heaven
36
1
4
3
2

2
ey
4
0
36
1
4
3
2
n
2

4
2
2
heathenish
2
heathen
36
1
4
3
2

2
e
4
2
2
Heathkit
2
heath
36
1
4
3
2

2
h
4
2
2
heater
2
heat
36
1
4
3
2

2

4
2
2
heartbreak
2
heartbeat
36
1
4
3
2

2
b
4
5
2
hearty
2
hearth
2
heartfelt
2
hearten
2
heart
36
1
4
3
2

2

4
3
2
Hearst
2
hearse
2
hearsay
36
1
4
3
2

2
st
4
3
2
hearken
2
heard
2
hear
36
1
4
3
2
h
2

4
3
2
healthy
2
healthful
2
health
36
1
4
3
2

2
t
4
3
2
Healy
2
Healey
2
heal
36
1
4
3
2

2
lsw
4
10
2
header
2
heady
2
headroom
2
headquarter
2
headphone
2
headmaster
2
headdress
2
headboard
2
headache
2
head
36
1
4
3
2

2

4
3
2
headway
2
headwater
2
headwall
36
1
4
3
2

2
a
4
1
2
headwind
36
1
4
3
2

2

4
3
2
headstrong
2
headstone
2
headstand
36
1
4
3
2

2

4
2
2
headsmen
2
headsman
36
1
4
3
2

2
mt
4
1
2
headset
36
1
4
3
2

2
n
4
1
2
headlight
36
1
4
3
2

2
i
4
1
2
headland
36
1
4
3
2

2
dlrtv
4
1
2
heap
36
1
4
3
2

2
abcdefgil'mnprstuwxy
4
1
2
he
36
1
4
3
2

2

4
2
2
hazelnut
2
hazel
36
1
4
3
2

2
l
4
1
2
haze
36
1
4
3
2
rd
2

4
2
2
hazardous
2
hazard
36
1
4
3
2

2
ae
4
1
2
hazy
36
1
4
3
2

2

4
2
2
Haydn
2
Hayden
36
1
4
3
2

2
d
4
6
2
hayward
2
haystack
2
Haynes
2
hayfield
2
Hayes
2
hay
36
1
4
3
2
horn
2

4
2
2
Hawthorne
2
hawthorn
36
1
4
3
2

2

4
2
2
Hawkins
2
hawk
36
1
4
3
2
ii
2

4
2
2
Hawaiian
2
Hawaii
36
1
4
3
2

2
akt
4
2
2
Hawley
2
haw
36
1
4
3
2

2

4
2
2
haven't
2
haven
36
1
4
3
2

2
n
4
1
2
have
36
1
4
3
2

2
ei
4
2
2
havoc
2
Havana
36
1
4
3
2

2

4
2
2
haunt
2
haunch
36
1
4
3
2

2

4
2
2
haulage
2
haul
36
1
4
3
2

2

4
2
2
haughty
2
Haugen
36
1
4
3
2

2
gln
4
1
2
Hausdorff
36
1
4
3
2
e
2

4
2
2
Hattiesburg
2
Hattie
36
1
4
3
2

2
i
4
1
2
Hatteras
36
1
4
3
2

2

4
2
2
Hathaway
2
hath
36
1
4
3
2

2

4
3
2
hater
2
hateful
2
hate
36
1
4
3
2
h
2

4
3
2
hatchway
2
hatchet
2
hatch
36
1
4
3
2

2
ceht
4
3
2
hatred
2
Hatfield
2
hat
36
1
4
3
2

2

4
2
2
hasten
2
haste
36
1
4
3
2

2
e
4
3
2
hasty
2
Hastings
2
hast
36
1
4
3
2

2

4
2
2
hashish
2
hash
36
1
4
3
2

2
ht
4
4
2
hassle
2
hasp
2
hasn't
2
has
36
1
4
3
2
t
2

4
2
2
harvestman
2
harvest
36
1
4
3
2

2
s
4
1
2
Harvey
36
1
4
3
2

2
e
4
1
2
Harvard
36
1
4
3
2

2

4
4
2
Hartman
2
Hartley
2
Hartford
2
hart
36
1
4
3
2
h
2

4
2
2
harshen
2
harsh
36
1
4
3
2

2
s
4
3
2
Harrington
2
Harriman
2
Harriet
36
1
4
3
2

2

4
3
2
Harrison
2
Harrisburg
2
Harris
36
1
4
3
2

2
i
4
2
2
harry
2
harrow
36
1
4
3
2

2

4
4
2
Harpy
2
harpsichord
2
harpoon
2
harp
36
1
4
3
2

2

4
2
2
harmonica
2
harmonic
36
1
4
3
2

2
c
4
1
2
harmonious
36
1
4
3
2
n
2
i
4
2
2
harmony
2
Harmon
36
1
4
3
2

2
o
4
2
2
harmful
2
harm
36
1
4
3
2

2

4
2
2
Harley
2
Harlem
36
1
4
3
2

2
e
4
1
2
Harlan
36
1
4
3
2

2

4
3
2
harem
2
harelip
2
hare
36
1
4
3
2

2

4
2
2
hardworking
2
hardwood
36
1
4
3
2

2
o
4
1
2
hardware
36
1
4
3
2

2

4
2
2
hardtop
2
hardtack
36
1
4
3
2

2

4
2
2
hardboiled
2
hardboard
36
1
4
3
2

2
o
4
1
2
hardbake
36
1
4
3
2

2
btwe
4
6
2
hardy
2
hardscrabble
2
Hardin
2
hardhat
2
hardcopy
2
hard
36
1
4
3
2
in
2

4
2
2
harbinger
2
Harbin
36
1
4
3
2

2

4
2
2
harass
2
harangue
36
1
4
3
2

2
abdelmprstv
4
4
2
Harold
2
harness
2
hark
2
Harcourt
36
1
4
3
2
n
2

4
3
2
happened
2
happenstance
2
happen
36
1
4
3
2

2
e
4
1
2
happy
36
1
4
3
2
d
2

4
2
2
haploidy
2
haploid
36
1
4
3
2
o
2
i
4
1
2
haplology
36
1
4
3
2

2
lp
4
3
2
Hapsburg
2
haphazard
2
hap
36
1
4
3
2

2

4
2
2
Hanson
2
hansom
36
1
4
3
2

2

4
2
2
Hansen
2
Hansel
36
1
4
3
2

2
eo
4
1
2
Hans
36
1
4
3
2
er
2

4
2
2
Hanoverian
2
Hanover
36
1
4
3
2

2
v
4
1
2
Hanoi
36
1
4
3
2

2

4
2
2
Hannah
2
Hanna
36
1
4
3
2

2
a
4
1
2
Hannibal
36
1
4
3
2

2

4
2
2
Hanlon
2
Hanley
36
1
4
3
2

2

4
2
2
Hankel
2
hank
36
1
4
3
2

2

4
2
2
hangover
2
hangout
36
1
4
3
2

2

4
2
2
hangmen
2
hangman
36
1
4
3
2

2

4
2
2
hangar
2
hangable
36
1
4
3
2

2
amo
4
1
2
hang
36
1
4
3
2

2

4
2
2
handymen
2
handyman
36
1
4
3
2

2
m
4
1
2
handy
36
1
4
3
2
it
2

4
2
2
handwritten
2
handwrite
36
1
4
3
2

2
r
4
1
2
handwaving
36
1
4
3
2

2

4
6
2
handstand
2
handspike
2
handsome
2
handshake
2
handset
2
hands
36
1
4
3
2
a
2

4
2
2
handmaiden
2
handmade
36
1
4
3
2

2

4
3
2
handlebar
2
handleable
2
handle
36
1
4
3
2

2
e
4
1
2
handline
36
1
4
3
2

2
ar
4
0
36
1
4
3
2
m
2

4
2
2
handicraftsmen
2
handicraftsman
36
1
4
3
2
aft
2
s
4
1
2
handicraft
36
1
4
3
2
p
2
p
4
1
2
handicap
36
1
4
3
2

2

4
2
2
handicapper
2
handicapped
36
1
4
3
2

2
e
4
1
2
handicapping
36
1
4
3
2

2
c
4
1
2
handiwork
36
1
4
3
2

2

4
2
2
handcuff
2
handclasp
36
1
4
3
2

2

4
2
2
handbook
2
handbag
36
1
4
3
2

2
bcilmswy
4
7
2
handout
2
handkerchief
2
handhold
2
handgun
2
handful
2
Handel
2
hand
36
1
4
3
2

2
dgklnos
4
5
2
Hanukkah
2
Hanford
2
Haney
2
Hancock
2
Han
36
1
4
3
2

2

4
3
2
Hampton
2
Hampshire
2
hamper
36
1
4
3
2

2

4
2
2
Hammond
2
hammock
36
1
4
3
2

2
o
4
1
2
hammerhead
36
1
4
3
2

2

4
2
2
Hamlin
2
hamlet
36
1
4
3
2
urg
2

4
2
2
hamburger
2
Hamburg
36
1
4
3
2

2
blmp
4
4
2
hamster
2
Hamilton
2
Hamal
2
ham
36
1
4
3
2

2

4
2
2
Halverson
2
halve
36
1
4
3
2

2
e
4
1
2
halvah
36
1
4
3
2

2

4
2
2
Halstead
2
Halsey
36
1
4
3
2

2

4
3
2
halogen
2
halocarbon
2
halo
36
1
4
3
2
w
2

4
2
2
Halloween
2
hallow
36
1
4
3
2

2

4
2
2
Halley
2
hallelujah
36
1
4
3
2

2
eo
4
4
2
hallway
2
hallucinate
2
hallmark
2
hall
36
1
4
3
2

2

4
4
2
halite
2
Halifax
2
halide
2
halibut
36
1
4
3
2

2

4
4
2
halfway
2
halfhearted
2
halfback
2
half
36
1
4
3
2

2

4
2
2
Haley
2
hale
36
1
4
3
2

2
efilosv
4
5
2
halt
2
Halpern
2
halma
2
halcyon
2
Hal
36
1
4
3
2
i
2

4
2
2
Haitian
2
Haiti
36
1
4
3
2

2

4
5
2
hairy
2
hairpin
2
hairdo
2
haircut
2
hair
36
1
4
3
2
to
2

4
2
2
hailstorm
2
hailstone
36
1
4
3
2

2
s
4
1
2
hail
36
1
4
3
2

2
lrt
4
3
2
Haines
2
haiku
2
Haifa
36
1
4
3
2

2

4
2
2
haggle
2
haggard
36
1
4
3
2

2

4
2
2
Hager
2
Hagen
36
1
4
3
2

2
eg
4
2
2
Hague
2
Hagstrom
36
1
4
3
2

2

4
2
2
hadron
2
Hadrian
36
1
4
3
2

2

4
2
2
haddock
2
Haddad
36
1
4
3
2

2
dr
4
5
2
hadn't
2
Hadley
2
Hades
2
Hadamard
2
had
36
1
4
3
2

2

4
7
2
hacksaw
2
hackney
2
hackmatack
2
hackle
2
Hackett
2
hackberry
2
hack
36
1
4
3
2

2
k
4
1
2
hacienda
36
1
4
3
2
a
2

4
2
2
habituate
2
habitual
36
1
4
3
2

2

4
2
2
habitation
2
habitat
36
1
4
3
2

2
t
4
1
2
habitant
36
1
4
3
2

2
au
4
1
2
habit
36
1
4
3
2

2
t
4
1
2
Habib
36
1
4
3
2

2
r
4
1
2
habeas
36
1
4
3
2

2

4
2
2
Haberman
2
haberdashery
36
1
4
3
2

2
ei
4
0
36
1
4
3
2

2

4
2
2
Haas
2
Haag
36
1
4
3
2

2
abcdgilmnprstuvwyz
4
3
2
Hahn
2
hafnium
2
ha
36
1
4
3
2

2
aeiouy
4
3
2
h's
2
Hrothgar
2
h
36
1
4
3
2

2

4
3
2
gyroscope
2
gyrocompass
2
gyro
36
1
4
3
2

2
o
4
2
2
gyrfalcon
2
gyrate
36
1
4
3
2

2

4
3
2
gypsy
2
gypsum
2
gypsite
36
1
4
3
2

2
s
4
1
2
gyp
36
1
4
3
2

2
n
4
1
2
gym
36
1
4
3
2
s
2
t
4
1
2
gymnasium
36
1
4
3
2

2

4
2
2
gymnastic
2
gymnast
36
1
4
3
2

2
a
4
1
2
gymnosperm
36
1
4
3
2

2
mpr
4
0
36
1
4
3
2

2

4
2
2
Gwyn
2
Gwen
36
1
4
3
2

2

4
2
2
Guyana
2
guy
36
1
4
3
2

2

4
5
2
guttural
2
gutsy
2
Guthrie
2
Gutenberg
2
gut
36
1
4
3
2

2

4
3
2
Gustavus
2
Gustave
2
Gustav
36
1
4
3
2

2
v
4
1
2
Gustafson
36
1
4
3
2

2
a
4
3
2
gusty
2
gusto
2
gust
36
1
4
3
2

2
t
4
3
2
gusset
2
gush
2
Gus
36
1
4
3
2

2

4
3
2
guru
2
Gurkha
2
gurgle
36
1
4
3
2

2

4
2
2
gunsling
2
gunshot
36
1
4
3
2

2

4
2
2
gunpowder
2
gunplay
36
1
4
3
2

2

4
2
2
gunny
2
gunnery
36
1
4
3
2

2

4
2
2
gunmen
2
gunman
36
1
4
3
2

2

4
2
2
gunky
2
gunk
36
1
4
3
2

2

4
2
2
gunfire
2
gunfight
36
1
4
3
2

2
i
4
1
2
gunflint
36
1
4
3
2

2
fkmnps
4
3
2
Gunther
2
Gunderson
2
gun
36
1
4
3
2

2

4
6
2
gumshoe
2
gumption
2
gummy
2
gumdrop
2
gumbo
2
gum
36
1
4
3
2

2

4
5
2
gully
2
gullible
2
gullet
2
Gullah
2
gull
36
1
4
3
2

2
l
4
3
2
gulp
2
gulf
2
gules
36
1
4
3
2

2

4
2
2
guilty
2
guilt
36
1
4
3
2

2

4
2
2
guillotine
2
guillemot
36
1
4
3
2

2

4
3
2
guildsman
2
guildhall
2
guild
36
1
4
3
2

2
dlt
4
2
2
Guilford
2
guile
36
1
4
3
2

2

4
4
2
guidepost
2
guideline
2
guidebook
2
guide
36
1
4
3
2

2
e
4
1
2
guidance
36
1
4
3
2

2
dl
4
5
2
guitar
2
guise
2
guinea
2
guignol
2
Guiana
36
1
4
3
2

2

4
2
2
guesswork
2
guess
36
1
4
3
2

2
s
4
1
2
guest
36
1
4
3
2

2

4
3
2
guerrilla
2
guernsey
2
guerdon
36
1
4
3
2

2
rs
4
2
2
Guenther
2
Guelph
36
1
4
3
2
a
2

4
2
2
guardian
2
Guardia
36
1
4
3
2

2
i
4
2
2
guardhouse
2
guard
36
1
4
3
2
nt
2
e
4
1
2
guaranty
36
1
4
3
2
e
2

4
2
2
guaranteeing
2
guarantee
36
1
4
3
2

2
ad
4
0
36
1
4
3
2

2

4
2
2
guanine
2
guanidine
36
1
4
3
2

2
i
4
1
2
guano
36
1
4
3
2

2
nr
4
2
2
Guatemala
2
Guam
36
1
4
3
2

2
aeilmnrsty
4
5
2
guzzle
2
Guggenheim
2
guffaw
2
gubernatorial
2
GU
36
1
4
3
2

2

4
2
2
Grumman
2
grumble
36
1
4
3
2

2

4
2
2
grubby
2
grub
36
1
4
3
2

2
bm
4
4
2
grunt
2
gruff
2
gruesome
2
grudge
36
1
4
3
2

2

4
2
2
grownup
2
grown
36
1
4
3
2

2
n
4
4
2
growing
2
growth
2
growl
2
grow
36
1
4
3
2
e
2

4
3
2
Grover
2
grovel
2
grove
36
1
4
3
2

2

4
3
2
groups
2
groupoid
2
group
36
1
4
3
2
d
2
s
4
2
2
groundwork
2
ground
36
1
4
3
2

2

4
2
2
groundskeep
2
groundsel
36
1
4
3
2

2
np
4
1
2
grout
36
1
4
3
2

2

4
2
2
Groton
2
grotesque
36
1
4
3
2

2

4
3
2
Grossman
2
Grosset
2
gross
36
1
4
3
2

2
s
4
2
2
Grosvenor
2
grosbeak
36
1
4
3
2

2

4
2
2
groove
2
groom
36
1
4
3
2
er
2

4
2
2
grocery
2
grocer
36
1
4
3
2

2

4
2
2
groat
2
groan
36
1
4
3
2

2
acostuvw
4
4
2
grope
2
grommet
2
groin
2
groggy
36
1
4
3
2
zl
2

4
2
2
grizzly
2
grizzle
36
1
4
3
2

2

4
2
2
gritty
2
grit
36
1
4
3
2

2

4
2
2
gristmill
2
grist
36
1
4
3
2

2
t
4
2
2
Griswold
2
grisly
36
1
4
3
2

2

4
3
2
grippe
2
gripe
2
grip
36
1
4
3
2

2

4
2
2
grindstone
2
grind
36
1
4
3
2

2
d
4
1
2
grin
36
1
4
3
2

2

4
2
2
Grimes
2
grime
36
1
4
3
2

2

4
2
2
Grimaldi
2
grimace
36
1
4
3
2

2
ae
4
2
2
Grimm
2
grim
36
1
4
3
2
l
2

4
3
2
grillwork
2
grille
2
grill
36
1
4
3
2
fi
2

4
2
2
Griffith
2
griffin
36
1
4
3
2

2

4
3
2
grievous
2
grieve
2
grievance
36
1
4
3
2

2
v
4
1
2
grief
36
1
4
3
2

2

4
3
2
gridiron
2
griddle
2
grid
36
1
4
3
2

2
deflmnpstz
4
0
36
1
4
3
2

2

4
3
2
greylag
2
greyhound
2
grey
36
1
4
3
2

2

4
2
2
Gretchen
2
Greta
36
1
4
3
2

2

4
3
2
Grenoble
2
Grendel
2
grenade
36
1
4
3
2

2

4
4
2
Gregory
2
Gregg
2
gregarious
2
Greg
36
1
4
3
2

2

4
3
2
greenwood
2
Greenwich
2
greenware
36
1
4
3
2

2

4
2
2
greensward
2
Greensboro
36
1
4
3
2

2

4
2
2
greenery
2
Greene
36
1
4
3
2

2

4
2
2
Greenberg
2
Greenbelt
36
1
4
3
2

2
e
4
2
2
Greenbriar
2
Greenblatt
36
1
4
3
2

2
besw
4
6
2
Greenland
2
greenish
2
greenhouse
2
greengrocer
2
Greenfield
2
green
36
1
4
3
2

2

4
2
2
greedy
2
greed
36
1
4
3
2

2
dn
4
4
2
greet
2
Greer
2
Greek
2
Greece
36
1
4
3
2

2
st
4
0
36
1
4
3
2

2

4
3
2
greater
2
greatcoat
2
great
36
1
4
3
2

2

4
2
2
greasy
2
grease
36
1
4
3
2

2
aegnty
4
5
2
grew
2
Gresham
2
gremlin
2
Grecian
2
grebe
36
1
4
3
2

2
cdfimnpstvyz
4
2
2
graham
2
grab
36
1
4
3
2

2

4
4
2
graywacke
2
Grayson
2
graybeard
2
gray
36
1
4
3
2

2

4
2
2
gravitate
2
gravid
36
1
4
3
2

2
s
4
4
2
graveyard
2
graven
2
gravel
2
grave
36
1
4
3
2

2

4
2
2
gravestone
2
Graves
36
1
4
3
2

2
ei
4
1
2
gravy
36
1
4
3
2
it
2

4
2
2
gratuity
2
gratuitous
36
1
4
3
2

2

4
3
2
gratitude
2
gratis
2
gratify
36
1
4
3
2

2

4
3
2
grater
2
grateful
2
grate
36
1
4
3
2

2
eiu
4
1
2
grata
36
1
4
3
2

2

4
3
2
grassy
2
grassland
2
grass
36
1
4
3
2

2
s
4
1
2
grasp
36
1
4
3
2

2

4
2
2
graphite
2
graphic
36
1
4
3
2

2
i
4
2
2
grapheme
2
graph
36
1
4
3
2

2

4
3
2
grapevine
2
grapefruit
2
grape
36
1
4
3
2

2
eh
4
1
2
grapple
36
1
4
3
2

2

4
2
2
granulate
2
granular
36
1
4
3
2
l
2
a
4
1
2
granule
36
1
4
3
2

2

4
3
2
grantor
2
grantee
2
grant
36
1
4
3
2
t
2

4
2
2
granitic
2
granite
36
1
4
3
2

2

4
2
2
grandstand
2
grandson
36
1
4
3
2
a
2

4
2
2
grandparent
2
grandpa
36
1
4
3
2

2

4
2
2
grandniece
2
grandnephew
36
1
4
3
2

2

4
2
2
grandmother
2
grandma
36
1
4
3
2

2

4
2
2
grandiose
2
grandiloquent
36
1
4
3
2
hild
2

4
2
2
grandchildren
2
grandchild
36
1
4
3
2

2
cimnps
4
4
2
grandfather
2
grandeur
2
granddaughter
2
grand
36
1
4
3
2

2
ditu
4
4
2
Granville
2
granola
2
granny
2
granary
36
1
4
3
2

2

4
2
2
grammarian
2
grammar
36
1
4
3
2
ma
2
r
4
1
2
grammatic
36
1
4
3
2

2

4
2
2
grainy
2
grain
36
1
4
3
2

2
n
4
1
2
grail
36
1
4
3
2

2

4
2
2
graft
2
Graff
36
1
4
3
2
a
2

4
2
2
graduate
2
gradual
36
1
4
3
2

2
u
4
5
2
Grady
2
gradient
2
grade
2
gradate
2
grad
36
1
4
3
2

2

4
2
2
graceful
2
grace
36
1
4
3
2

2
e
4
2
2
grackle
2
gracious
36
1
4
3
2

2
aeiou
4
1
2
gryphon
36
1
4
3
2
ern
2

4
5
2
government
2
governor
2
governess
2
governance
2
govern
36
1
4
3
2

2

4
2
2
gourmet
2
gourd
36
1
4
3
2

2
r
4
5
2
gout
2
Gould
2
gouge
2
Gouda
2
Goucher
36
1
4
3
2

2

4
2
2
Gottfried
2
gotten
36
1
4
3
2

2

4
2
2
Gothic
2
Gotham
36
1
4
3
2

2
ht
4
1
2
got
36
1
4
3
2

2

4
2
2
gossip
2
gossamer
36
1
4
3
2

2

4
2
2
goshawk
2
gosh
36
1
4
3
2

2
hs
4
2
2
gospel
2
gosling
36
1
4
3
2

2

4
2
2
gorgeous
2
gorge
36
1
4
3
2

2
e
4
1
2
gorgon
36
1
4
3
2

2

4
2
2
Goren
2
gore
36
1
4
3
2

2

4
2
2
Gordon
2
Gordian
36
1
4
3
2

2
deg
4
7
2
gorbachev
2
gory
2
Gorton
2
gorse
2
Gorky
2
gorilla
2
Gorham
36
1
4
3
2

2

4
2
2
gopher
2
GOP
36
1
4
3
2
e
2

4
2
2
gooseberry
2
goose
36
1
4
3
2

2

4
2
2
goofy
2
goof
36
1
4
3
2

2

4
2
2
Goodyear
2
goody
36
1
4
3
2
i
2

4
2
2
Goodwin
2
goodwill
36
1
4
3
2

2
wy
4
5
2
Goodrich
2
Goodman
2
Goode
2
goodbye
2
good
36
1
4
3
2

2
dfs
4
1
2
goober
36
1
4
3
2
ale
2

4
2
2
Gonzalez
2
Gonzales
36
1
4
3
2

2
z
4
3
2
gong
2
gone
2
gondola
36
1
4
3
2

2
efs
4
4
2
Goldwater
2
Goldman
2
Goldberg
2
gold
36
1
4
3
2

2

4
2
2
Goldstine
2
Goldstein
36
1
4
3
2

2
t
4
1
2
goldsmith
36
1
4
3
2
i
2

4
2
2
goldfish
2
goldfinch
36
1
4
3
2
n
2

4
4
2
goldenseal
2
goldenrod
2
goldeneye
2
golden
36
1
4
3
2

2
d
4
4
2
golly
2
Goliath
2
golf
2
Goleta
36
1
4
3
2

2

4
4
2
gogo
2
Gogh
2
goggle
2
gog
36
1
4
3
2

2

4
2
2
Goethe
2
goes
36
1
4
3
2
i
2

4
2
2
godwit
2
Godwin
36
1
4
3
2

2

4
2
2
godson
2
godsend
36
1
4
3
2

2

4
2
2
Godfrey
2
godfather
36
1
4
3
2

2

4
2
2
goddess
2
Goddard
36
1
4
3
2

2
dfsw
4
5
2
godparent
2
godmother
2
godkin
2
godhead
2
god
36
1
4
3
2
le
2

4
2
2
gobbledygook
2
gobble
36
1
4
3
2

2
b
4
2
2
goblet
2
gob
36
1
4
3
2

2

4
4
2
goat
2
goal
2
goad
2
Goa
36
1
4
3
2

2
abdeglnoprstuv
4
4
2
going
2
gown
2
Goff
2
go
36
1
4
3
2

2
o
4
1
2
gnome
36
1
4
3
2
n
2

4
2
2
gnomonic
2
gnomon
36
1
4
3
2

2
m
4
1
2
gnostic
36
1
4
3
2

2

4
4
2
gnaw
2
gnat
2
gnash
2
gnarl
36
1
4
3
2

2
ao
4
3
2
gnu
2
GNP
2
gneiss
36
1
4
3
2

2

4
2
2
GMT
2
GM
36
1
4
3
2

2
eo
4
1
2
glycine
36
1
4
3
2

2

4
2
2
glycol
2
glycogen
36
1
4
3
2
r
2
i
4
1
2
glycerol
36
1
4
3
2

2
n
4
1
2
glyceride
36
1
4
3
2

2

4
3
2
glycerine
2
glycerinate
2
glycerin
36
1
4
3
2

2
c
4
1
2
glyph
36
1
4
3
2

2

4
2
2
glutamic
2
glutamine
36
1
4
3
2
m
2
i
4
1
2
glutamate
36
1
4
3
2

2
a
4
3
2
glutton
2
glutinous
2
glut
36
1
4
3
2

2

4
2
2
gluey
2
glue
36
1
4
3
2

2
et
4
2
2
glum
2
glucose
36
1
4
3
2
t
2

4
2
2
glottis
2
glottal
36
1
4
3
2
s
2

4
4
2
glossy
2
glossolalia
2
glossary
2
gloss
36
1
4
3
2

2
a
4
2
2
glorious
2
glorify
36
1
4
3
2

2

4
2
2
Gloriana
2
Gloria
36
1
4
3
2

2
i
4
1
2
glory
36
1
4
3
2
m
2

4
2
2
gloomy
2
gloom
36
1
4
3
2

2

4
2
2
glomerular
2
glom
36
1
4
3
2
l
2

4
3
2
globulin
2
globule
2
globular
36
1
4
3
2

2
u
4
3
2
globe
2
global
2
glob
36
1
4
3
2

2
bmorst
4
4
2
glow
2
glove
2
Gloucester
2
gloat
36
1
4
3
2

2

4
2
2
glitter
2
glitch
36
1
4
3
2

2

4
2
2
glisten
2
glissade
36
1
4
3
2

2

4
2
2
glimpse
2
glimmer
36
1
4
3
2

2

4
2
2
glide
2
Glidden
36
1
4
3
2

2
dmst
4
2
2
glint
2
glib
36
1
4
3
2
a
2

4
2
2
Glendale
2
Glenda
36
1
4
3
2

2
d
4
2
2
Glenn
2
glen
36
1
4
3
2

2

4
2
2
gleeful
2
glee
36
1
4
3
2

2

4
3
2
Gleason
2
glean
2
gleam
36
1
4
3
2

2
aen
4
0
36
1
4
3
2

2
cdmnsu
4
2
2
glaze
2
glare
36
1
4
3
2
co
2

4
2
2
glaucous
2
glaucoma
36
1
4
3
2

2

4
2
2
glasswort
2
glassware
36
1
4
3
2

2
w
4
3
2
glassy
2
glassine
2
glass
36
1
4
3
2

2
s
4
3
2
glasnost
2
Glaswegian
2
Glasgow
36
1
4
3
2

2

4
2
2
glandular
2
gland
36
1
4
3
2

2
d
4
2
2
glans
2
glance
36
1
4
3
2

2

4
2
2
glamorous
2
glamor
36
1
4
3
2
o
2
r
4
1
2
glamour
36
1
4
3
2

2

4
2
2
gladiolus
2
gladiator
36
1
4
3
2

2

4
2
2
gladdy
2
gladden
36
1
4
3
2

2
di
4
4
2
Gladys
2
Gladstone
2
glade
2
glad
36
1
4
3
2
i
2
a
4
2
2
glacis
2
glacier
36
1
4
3
2

2

4
2
2
glaciate
2
glacial
36
1
4
3
2

2
aeiouy
4
0
36
1
4
3
2

2
e
4
1
2
giving
36
1
4
3
2

2

4
2
2
Giuseppe
2
Giuliano
36
1
4
3
2

2

4
2
2
girlish
2
girlie
36
1
4
3
2

2
i
4
1
2
girl
36
1
4
3
2

2

4
2
2
girdle
2
gird
36
1
4
3
2

2
dl
4
2
2
girth
2
giraffe
36
1
4
3
2

2

4
2
2
Ginsburg
2
Ginsberg
36
1
4
3
2

2
b
4
1
2
ginseng
36
1
4
3
2

2

4
3
2
gingko
2
gingham
2
ginger
36
1
4
3
2

2
gs
4
6
2
Gino
2
Ginn
2
ginmill
2
ginkgo
2
Gina
2
gin
36
1
4
3
2

2

4
2
2
Gimbel
2
gimbal
36
1
4
3
2

2
b
4
1
2
gimpy
36
1
4
3
2

2

4
2
2
Gillette
2
Gillespie
36
1
4
3
2

2
e
4
2
2
Gilligan
2
gill
36
1
4
3
2

2

4
2
2
Giles
2
Gilead
36
1
4
3
2
ert
2

4
2
2
Gilbertson
2
gilbert
36
1
4
3
2

2
bel
4
6
2
gilt
2
Gilmore
2
gild
2
Gilchrist
2
gila
2
Gil
36
1
4
3
2

2

4
2
2
giggle
2
gigging
36
1
4
3
2

2

4
5
2
gigawatt
2
gigavolt
2
gigantic
2
gigahertz
2
gigacycle
36
1
4
3
2

2
ag
4
1
2
gig
36
1
4
3
2

2

4
2
2
gift
2
Gifford
36
1
4
3
2

2

4
2
2
giddy
2
giddap
36
1
4
3
2

2
d
4
1
2
Gideon
36
1
4
3
2

2
eo
4
2
2
gibby
2
Gibbs
36
1
4
3
2

2

4
2
2
gibbous
2
gibbon
36
1
4
3
2

2

4
2
2
gibbet
2
gibberish
36
1
4
3
2

2
b
4
4
2
Gibson
2
Gibraltar
2
giblet
2
gibe
36
1
4
3
2

2
n
4
1
2
Giacomo
36
1
4
3
2
t
2

4
2
2
giantess
2
giant
36
1
4
3
2

2
abdfglmnruv
4
2
2
gist
2
Giovanni
36
1
4
3
2
l
2

4
2
2
ghoulish
2
ghoul
36
1
4
3
2

2
u
4
1
2
ghost
36
1
4
3
2

2

4
3
2
ghetto
2
gherkin
2
Ghent
36
1
4
3
2

2

4
2
2
ghastly
2
Ghana
36
1
4
3
2

2
aeo
4
0
36
1
4
3
2

2
y
4
1
2
getting
36
1
4
3
2

2
t
4
3
2
gets
2
getaway
2
get
36
1
4
3
2

2

4
2
2
Gestapo
2
gestalt
36
1
4
3
2
t
2
a
4
2
2
gesture
2
gesticulate
36
1
4
3
2

2

4
2
2
gerundive
2
gerundial
36
1
4
3
2
nd
2
i
4
1
2
gerund
36
1
4
3
2
a
2

4
2
2
germinate
2
germinal
36
1
4
3
2
id
2

4
2
2
germicide
2
germicidal
36
1
4
3
2

2
cn
4
0
36
1
4
3
2

2

4
2
2
germanium
2
Germanic
36
1
4
3
2
n
2
i
4
4
2
Germany
2
Germantown
2
germane
2
German
36
1
4
3
2

2
ai
4
1
2
germ
36
1
4
3
2
ard
2

4
2
2
Gerhardt
2
Gerhard
36
1
4
3
2

2

4
2
2
gerbil
2
Gerber
36
1
4
3
2

2
l
4
2
2
Gerard
2
geranium
36
1
4
3
2
d
2

4
2
2
Geraldine
2
Gerald
36
1
4
3
2

2
abhmu
4
4
2
Gertrude
2
Gershwin
2
Gerry
2
geriatric
36
1
4
3
2

2

4
2
2
Georgetown
2
George
36
1
4
3
2
g
2
e
4
1
2
Georgia
36
1
4
3
2
ysic
2

4
2
2
geophysics
2
geophysical
36
1
4
3
2

2
h
4
1
2
geopolitic
36
1
4
3
2
et
2

4
2
2
geometrician
2
geometer
36
1
4
3
2
raph
2

4
2
2
geography
2
geographer
36
1
4
3
2

2
s
4
1
2
geodetic
36
1
4
3
2

2

4
2
2
geodesy
2
geodesic
36
1
4
3
2

2
e
4
1
2
geoduck
36
1
4
3
2

2
h
4
1
2
geocentric
36
1
4
3
2
mi
2

4
2
2
geochemistry
2
geochemical
36
1
4
3
2

2
e
4
1
2
geochronology
36
1
4
3
2

2
cdgmpr
4
2
2
geology
2
Geoffrey
36
1
4
3
2

2

4
2
2
genus
2
genuine
36
1
4
3
2

2

4
2
2
gentlemen
2
gentleman
36
1
4
3
2
e
2
m
4
1
2
gentle
36
1
4
3
2

2

4
2
2
gentility
2
gentile
36
1
4
3
2

2
l
4
1
2
gentian
36
1
4
3
2

2
il
4
3
2
gentry
2
genteel
2
gent
36
1
4
3
2

2

4
2
2
genotype
2
Genoa
36
1
4
3
2

2

4
2
2
genitive
2
genital
36
1
4
3
2

2
t
4
4
2
genius
2
genii
2
genie
2
genial
36
1
4
3
2

2

4
2
2
Genevieve
2
Geneva
36
1
4
3
2

2

4
2
2
genesis
2
Genesco
36
1
4
3
2

2

4
2
2
generous
2
generosity
36
1
4
3
2

2
lt
4
1
2
genera
36
1
4
3
2

2
ao
4
1
2
generic
36
1
4
3
2

2
rsv
4
3
2
genetic
2
genealogy
2
gene
36
1
4
3
2

2
eiotu
4
2
2
genre
2
gender
36
1
4
3
2
n
2

4
2
2
Gemini
2
geminate
36
1
4
3
2

2
i
4
3
2
gemstone
2
Gemma
2
gem
36
1
4
3
2
in
2

4
3
2
gelatinous
2
gelatine
2
gelatin
36
1
4
3
2

2
t
4
1
2
gelable
36
1
4
3
2

2
a
4
2
2
geld
2
gel
36
1
4
3
2

2

4
2
2
Geigy
2
Geiger
36
1
4
3
2

2
g
4
1
2
geisha
36
1
4
3
2

2

4
2
2
geese
2
gee
36
1
4
3
2

2
eilmnorst
4
5
2
geyser
2
Gegenschein
2
gecko
2
gear
2
GE
36
1
4
3
2
e
2

4
3
2
gazette
2
gazelle
2
gaze
36
1
4
3
2

2

4
2
2
Gaylord
2
gay
36
1
4
3
2
k
2

4
2
2
gawky
2
gawk
36
1
4
3
2

2

4
2
2
gavel
2
gave
36
1
4
3
2

2
e
4
2
2
gavotte
2
Gavin
36
1
4
3
2
s
2

4
2
2
Gaussian
2
gauss
36
1
4
3
2
t
2

4
2
2
gauntlet
2
gaunt
36
1
4
3
2

2

4
3
2
Gaulle
2
gauleiter
2
Gaul
36
1
4
3
2

2

4
2
2
gaugeable
2
gauge
36
1
4
3
2

2
e
4
1
2
Gauguin
36
1
4
3
2
he
2

4
2
2
gaucherie
2
gauche
36
1
4
3
2

2
cglns
4
3
2
gauze
2
gaur
2
gaudy
36
1
4
3
2

2

4
3
2
gateway
2
Gates
2
gate
36
1
4
3
2

2
e
4
3
2
gator
2
Gatlinburg
2
gather
36
1
4
3
2
om
2

4
2
2
gastronomy
2
gastronome
36
1
4
3
2
o
2
n
4
1
2
gastrointestinal
36
1
4
3
2

2
r
4
1
2
Gaston
36
1
4
3
2

2

4
2
2
Gaspee
2
gasp
36
1
4
3
2

2
pt
4
9
2
gassy
2
gasoline
2
gaslight
2
gasket
2
gasify
2
gash
2
gaseous
2
Gascony
2
gas
36
1
4
3
2

2

4
2
2
Garth
2
garter
36
1
4
3
2
son
2

4
2
2
Garrisonian
2
garrison
36
1
4
3
2

2
i
4
3
2
Garry
2
garrulous
2
Garrett
36
1
4
3
2
e
2

4
2
2
garnet
2
garner
36
1
4
3
2

2

4
2
2
garlic
2
garland
36
1
4
3
2

2

4
2
2
garish
2
Garibaldi
36
1
4
3
2

2

4
2
2
gargle
2
gargantuan
36
1
4
3
2
n
2

4
2
2
gardenia
2
garden
36
1
4
3
2

2
e
4
1
2
Gardner
36
1
4
3
2

2

4
3
2
garble
2
garbage
2
garb
36
1
4
3
2

2
bdgilnrt
4
6
2
Gary
2
Garvey
2
Garfield
2
Garcia
2
garage
2
gar
36
1
4
3
2

2

4
2
2
gape
2
gap
36
1
4
3
2

2

4
2
2
gantry
2
gantlet
36
1
4
3
2
et
2

4
2
2
Gannett
2
gannet
36
1
4
3
2

2

4
2
2
ganglion
2
gangling
36
1
4
3
2

2
i
4
1
2
gangland
36
1
4
3
2

2
l
4
5
2
gangway
2
gangster
2
gangplank
2
Ganges
2
gang
36
1
4
3
2

2
gnt
4
2
2
Ganymede
2
gander
36
1
4
3
2

2

4
3
2
games
2
gamecock
2
game
36
1
4
3
2

2

4
2
2
gambit
2
Gambia
36
1
4
3
2

2
i
4
2
2
gambol
2
gamble
36
1
4
3
2

2
be
4
4
2
gamut
2
gamma
2
gamin
2
gam
36
1
4
3
2
n
2
i
4
1
2
galvanometer
36
1
4
3
2

2

4
2
2
galvanism
2
galvanic
36
1
4
3
2

2
a
4
1
2
Galveston
36
1
4
3
2

2

4
2
2
gallus
2
Gallup
36
1
4
3
2

2

4
2
2
gallows
2
Galloway
36
1
4
3
2

2

4
2
2
gallonage
2
gallon
36
1
4
3
2

2
nw
4
1
2
gallop
36
1
4
3
2

2

4
3
2
gallivant
2
gallium
2
gallinule
36
1
4
3
2

2

4
2
2
galley
2
gallery
36
1
4
3
2
t
2

4
2
2
gallantry
2
gallant
36
1
4
3
2

2
n
4
1
2
Gallagher
36
1
4
3
2

2
aeiou
4
3
2
gallstone
2
gallberry
2
gall
36
1
4
3
2

2

4
3
2
galenite
2
galena
2
Galen
36
1
4
3
2

2
n
4
1
2
gale
36
1
4
3
2

2

4
2
2
Galatia
2
Galatea
36
1
4
3
2
t
2

4
2
2
galactose
2
galactic
36
1
4
3
2

2
ct
4
3
2
galaxy
2
Galapagos
2
gala
36
1
4
3
2

2
aelv
4
6
2
Galway
2
Galt
2
Galois
2
Galilee
2
Galbreath
2
gal
36
1
4
3
2

2

4
2
2
Gaithersburg
2
gait
36
1
4
3
2
s
2

4
2
2
Gainesville
2
Gaines
36
1
4
3
2

2
e
4
2
2
gainful
2
gain
36
1
4
3
2

2

4
2
2
gaillardia
2
Gail
36
1
4
3
2

2
lnt
4
1
2
gaiety
36
1
4
3
2

2

4
2
2
gaggle
2
gagging
36
1
4
3
2

2
g
4
3
2
gagwriter
2
gage
2
gag
36
1
4
3
2
f
2

4
2
2
gaffe
2
gaff
36
1
4
3
2
et
2

4
2
2
gadgetry
2
gadget
36
1
4
3
2

2
g
4
4
2
gadwall
2
gadolinium
2
gadfly
2
gad
36
1
4
3
2
iel
2

4
2
2
Gabrielle
2
Gabriel
36
1
4
3
2

2

4
2
2
gabbro
2
gabble
36
1
4
3
2

2
br
4
5
2
Gabon
2
gable
2
Gaberones
2
gabardine
2
gab
36
1
4
3
2

2
bdfgilmnprstuvwyz
4
3
2
GAO
2
Gaelic
2
GA
36
1
4
3
2

2
aehilMnoruwy
4
4
2
GSA
2
g's
2
GPO
2
g
36
1
4
3
2
z
2

4
2
2
fuzzy
2
fuzz
36
1
4
3
2

2

4
2
2
future
2
futile
36
1
4
3
2

2

4
2
2
fussy
2
fuss
36
1
4
3
2

2

4
4
2
fusion
2
fusillade
2
fusiform
2
fusible
36
1
4
3
2

2

4
2
2
fuselage
2
fuse
36
1
4
3
2

2
eis
4
1
2
fusty
36
1
4
3
2
e
2
r
4
1
2
furthest
36
1
4
3
2

2
m
4
1
2
further
36
1
4
3
2
o
2

4
2
2
furthermost
2
furthermore
36
1
4
3
2

2
h
4
1
2
furtive
36
1
4
3
2

2

4
3
2
furry
2
furrow
2
furrier
36
1
4
3
2

2

4
2
2
furniture
2
furnish
36
1
4
3
2

2
i
4
1
2
furnace
36
1
4
3
2

2

4
2
2
furlough
2
furlong
36
1
4
3
2

2
o
4
1
2
furl
36
1
4
3
2

2
lnrt
4
6
2
furze
2
fury
2
Furman
2
furious
2
furbish
2
fur
36
1
4
3
2

2

4
2
2
funny
2
funnel
36
1
4
3
2

2

4
3
2
fungicide
2
fungible
2
fungi
36
1
4
3
2

2
i
4
3
2
fungus
2
fungoid
2
fungal
36
1
4
3
2
r
2

4
2
2
funereal
2
funeral
36
1
4
3
2

2

4
3
2
funds
2
fundamental
2
fund
36
1
4
3
2
r
2

4
2
2
functorial
2
functor
36
1
4
3
2
on
2
a
4
2
2
functions
2
function
36
1
4
3
2
t
2
io
4
0
36
1
4
3
2

2
cdegn
4
2
2
funk
2
fun
36
1
4
3
2
ga
2

4
2
2
fumigate
2
fumigant
36
1
4
3
2

2
i
4
3
2
fume
2
fumble
2
fum
36
1
4
3
2

2

4
4
2
fully
2
Fullerton
2
fullback
2
full
36
1
4
3
2

2
l
4
5
2
Fulton
2
fulsome
2
fulminate
2
fulfill
2
fulcrum
36
1
4
3
2
i
2

4
2
2
Fujitsu
2
Fuji
36
1
4
3
2

2

4
3
2
fugue
2
fugitive
2
fugal
36
1
4
3
2

2
hk
4
0
36
1
4
3
2

2
cgjlmnrstz
4
2
2
fuel
2
fudge
36
1
4
3
2

2

4
2
2
FTC
2
Ft
36
1
4
3
2

2

4
2
2
Frye
2
fry
36
1
4
3
2
ate
2

4
2
2
frustrater
2
frustrate
36
1
4
3
2
t
2
r
4
1
2
frustum
36
1
4
3
2
t
2

4
3
2
fruition
2
fruitful
2
fruit
36
1
4
3
2

2
is
4
3
2
frugal
2
Fruehauf
2
fructose
36
1
4
3
2
e
2

4
2
2
frozen
2
froze
36
1
4
3
2

2

4
2
2
frowzy
2
frown
36
1
4
3
2
h
2

4
2
2
frothy
2
froth
36
1
4
3
2
it
2

4
2
2
frostbitten
2
frostbite
36
1
4
3
2
t
2
b
4
2
2
frosty
2
frost
36
1
4
3
2
m
2

4
2
2
frontiersmen
2
frontiersman
36
1
4
3
2
er
2
s
4
1
2
frontier
36
1
4
3
2

2

4
2
2
frontal
2
frontage
36
1
4
3
2
t
2
ai
4
1
2
front
36
1
4
3
2

2
nstwz
4
5
2
from
2
frolic
2
frog
2
frock
2
fro
36
1
4
3
2
ol
2

4
2
2
frivolous
2
frivolity
36
1
4
3
2

2

4
3
2
Fritz
2
fritter
2
fritillary
36
1
4
3
2
l
2

4
2
2
frilly
2
frill
36
1
4
3
2
d
2

4
2
2
Frigidaire
2
frigid
36
1
4
3
2
t
2

4
3
2
frightful
2
frighten
2
fright
36
1
4
3
2

2
hi
4
2
2
Frigga
2
frigate
36
1
4
3
2

2

4
2
2
Friedrich
2
Friedman
36
1
4
3
2

2
dn
4
1
2
frieze
36
1
4
3
2

2

4
3
2
friction
2
Frick
2
fricative
36
1
4
3
2

2

4
2
2
friar
2
friable
36
1
4
3
2

2
acegltvsd
4
2
2
frizzle
2
fringe
36
1
4
3
2

2

4
2
2
Freya
2
Frey
36
1
4
3
2
d
2

4
2
2
Freudian
2
Freud
36
1
4
3
2

2

4
2
2
Fresno
2
Fresnel
36
1
4
3
2

2

4
2
2
freshmen
2
freshman
36
1
4
3
2

2
m
4
3
2
freshwater
2
freshen
2
fresh
36
1
4
3
2
o
2

4
2
2
frescoes
2
fresco
36
1
4
3
2

2
chn
4
0
36
1
4
3
2
h
2
m
4
1
2
French
36
1
4
3
2

2

4
2
2
Frenchmen
2
Frenchman
36
1
4
3
2

2
c
4
2
2
frenzy
2
frenetic
36
1
4
3
2

2

4
2
2
freewheel
2
freeway
36
1
4
3
2

2

4
2
2
Freetown
2
freethink
36
1
4
3
2

2

4
2
2
freemen
2
freeman
36
1
4
3
2

2

4
2
2
freehold
2
freehand
36
1
4
3
2

2

4
2
2
freedmen
2
Freedman
36
1
4
3
2

2
m
4
1
2
freedom
36
1
4
3
2

2
dhmtw
4
6
2
freeze
2
freestone
2
Freeport
2
freeing
2
freeboot
2
free
36
1
4
3
2

2

4
2
2
Fredericksburg
2
Frederick
36
1
4
3
2
ric
2
k
4
2
2
Fredericton
2
Frederic
36
1
4
3
2

2

4
2
2
Freddy
2
Freddie
36
1
4
3
2

2
de
4
3
2
Fredrickson
2
Fredholm
2
Fred
36
1
4
3
2
k
2

4
2
2
freakish
2
freak
36
1
4
3
2

2
adensuy
4
5
2
fret
2
frequent
2
freon
2
freight
2
freckle
36
1
4
3
2

2
cgimntuz
4
2
2
fray
2
Fraser
36
1
4
3
2

2

4
2
2
frazzle
2
Frazier
36
1
4
3
2

2

4
2
2
fraudulent
2
fraud
36
1
4
3
2

2
d
4
2
2
fraught
2
Frau
36
1
4
3
2
ern
2

4
2
2
fraternity
2
fraternal
36
1
4
3
2
rt
2

4
2
2
frankfurter
2
Frankfurt
36
1
4
3
2

2
u
4
1
2
Frankfort
36
1
4
3
2

2
f
4
3
2
franklin
2
Frankel
2
frank
36
1
4
3
2

2

4
2
2
Francoise
2
franco
36
1
4
3
2

2

4
2
2
Francisco
2
Franciscan
36
1
4
3
2

2
c
4
1
2
Francis
36
1
4
3
2

2
s
4
2
2
francium
2
Francine
36
1
4
3
2

2

4
2
2
Frances
2
France
36
1
4
3
2

2
eio
4
3
2
franchise
2
franca
2
franc
36
1
4
3
2

2
ck
4
4
2
Franz
2
frantic
2
frangipani
2
Fran
36
1
4
3
2

2

4
2
2
framework
2
frame
36
1
4
3
2

2
e
4
1
2
frambesia
36
1
4
3
2
l
2

4
2
2
frailty
2
frail
36
1
4
3
2

2

4
2
2
fragmentation
2
fragmentary
36
1
4
3
2
ent
2
a
4
1
2
fragment
36
1
4
3
2

2
m
4
2
2
fragrant
2
fragile
36
1
4
3
2
t
2
i
4
1
2
fracture
36
1
4
3
2
o
2
n
4
1
2
fractious
36
1
4
3
2

2

4
2
2
fractionate
2
fraction
36
1
4
3
2

2
aeiouy
4
0
36
1
4
3
2

2

4
2
2
foxhound
2
foxhole
36
1
4
3
2

2
o
4
1
2
Foxhall
36
1
4
3
2

2
h
4
4
2
foxy
2
foxtail
2
foxglove
2
fox
36
1
4
3
2
en
2

4
2
2
fourteenth
2
fourteen
36
1
4
3
2

2
e
4
1
2
fourth
36
1
4
3
2

2

4
2
2
foursquare
2
foursome
36
1
4
3
2

2
st
4
3
2
Fourier
2
fourfold
2
four
36
1
4
3
2
in
2

4
2
2
fountainhead
2
fountain
36
1
4
3
2

2
a
4
1
2
fount
36
1
4
3
2

2

4
4
2
foundry
2
foundling
2
foundation
2
found
36
1
4
3
2

2
dt
4
0
36
1
4
3
2

2

4
2
2
foulmouth
2
foul
36
1
4
3
2

2
lnr
4
1
2
fought
36
1
4
3
2
er
2

4
2
2
fosterite
2
foster
36
1
4
3
2

2
i
4
1
2
Foss
36
1
4
3
2
l
2

4
2
2
fossiliferous
2
fossil
36
1
4
3
2

2
st
4
0
36
1
4
3
2

2

4
2
2
fortune
2
fortunate
36
1
4
3
2

2
n
4
1
2
fortuitous
36
1
4
3
2

2

4
2
2
fortress
2
fortran
36
1
4
3
2

2

4
5
2
fortitude
2
fortiori
2
fortin
2
fortify
2
fortieth
36
1
4
3
2

2

4
4
2
forthwith
2
forthright
2
forthcome
2
forth
36
1
4
3
2

2

4
2
2
Fortescue
2
forte
36
1
4
3
2

2
ehiru
4
3
2
forty
2
fortnight
2
fort
36
1
4
3
2
ke
2

4
2
2
forsaken
2
forsake
36
1
4
3
2

2
a
4
3
2
Forsythe
2
forswear
2
forsook
36
1
4
3
2
la
2

4
4
2
formulate
2
formulaic
2
formulae
2
formula
36
1
4
3
2

2

4
2
2
Formica
2
formic
36
1
4
3
2

2
c
4
1
2
formidable
36
1
4
3
2

2

4
2
2
formatting
2
formatted
36
1
4
3
2

2
t
4
2
2
formate
2
format
36
1
4
3
2

2

4
2
2
formaldehyde
2
formal
36
1
4
3
2

2
lt
4
1
2
formant
36
1
4
3
2

2
aiue
4
3
2
forms
2
Formosa
2
form
36
1
4
3
2

2

4
2
2
forklift
2
fork
36
1
4
3
2
t
2

4
2
2
forgotten
2
forgot
36
1
4
3
2
ve
2

4
2
2
forgiven
2
forgive
36
1
4
3
2

2

4
2
2
forgetting
2
forgettable
36
1
4
3
2

2
t
4
2
2
forgetful
2
forget
36
1
4
3
2

2
t
4
2
2
forgery
2
forge
36
1
4
3
2

2
eio
4
1
2
forgave
36
1
4
3
2
t
2

4
2
2
forfeiture
2
forfeit
36
1
4
3
2
e
2
i
4
1
2
forfend
36
1
4
3
2
t
2

4
2
2
forestry
2
forest
36
1
4
3
2

2
s
4
4
2
forever
2
forensic
2
foreign
2
fore
36
1
4
3
2

2

4
2
2
Fordham
2
ford
36
1
4
3
2

2

4
3
2
forces
2
forceful
2
force
36
1
4
3
2

2
e
4
1
2
forcible
36
1
4
3
2
r
2

4
2
2
forborne
2
forbore
36
1
4
3
2

2

4
2
2
forbidding
2
forbidden
36
1
4
3
2
d
2
d
4
1
2
forbid
36
1
4
3
2
r
2

4
2
2
forbearance
2
forbear
36
1
4
3
2

2
a
4
1
2
Forbes
36
1
4
3
2

2
eio
4
1
2
forbade
36
1
4
3
2

2

4
2
2
foray
2
forage
36
1
4
3
2

2
abcdefgkmst
4
4
2
forward
2
forum
2
forlorn
2
for
36
1
4
3
2

2

4
2
2
foppish
2
fop
36
1
4
3
2

2

4
2
2
footwork
2
footwear
36
1
4
3
2
t
2

4
2
2
footstool
2
footstep
36
1
4
3
2

2

4
2
2
footpath
2
footpad
36
1
4
3
2

2
a
4
1
2
footprint
36
1
4
3
2

2

4
2
2
footmen
2
footman
36
1
4
3
2

2

4
2
2
footbridge
2
football
36
1
4
3
2

2
bmpswe
4
5
2
footnote
2
foothill
2
footfall
2
footage
2
foot
36
1
4
3
2

2

4
5
2
fooled
2
foolproof
2
foolish
2
foolhardy
2
fool
36
1
4
3
2

2

4
2
2
foodstuff
2
food
36
1
4
3
2

2
dlt
4
0
36
1
4
3
2
ine
2

4
2
2
Fontainebleau
2
Fontaine
36
1
4
3
2

2
a
4
1
2
font
36
1
4
3
2

2

4
2
2
fondle
2
fond
36
1
4
3
2

2
dt
4
0
36
1
4
3
2
w
2
e
4
2
2
following
2
follow
36
1
4
3
2
c
2

4
2
2
follicular
2
follicle
36
1
4
3
2

2
io
4
1
2
folly
36
1
4
3
2

2

4
2
2
folksy
2
folksong
36
1
4
3
2

2
s
4
2
2
folklore
2
folk
36
1
4
3
2

2

4
2
2
foliate
2
foliage
36
1
4
3
2

2
a
4
1
2
folio
36
1
4
3
2

2

4
2
2
foldout
2
fold
36
1
4
3
2

2
dikl
4
1
2
Foley
36
1
4
3
2

2

4
3
2
foist
2
foil
2
foible
36
1
4
3
2

2

4
2
2
foggy
2
fogging
36
1
4
3
2

2
g
4
3
2
fogy
2
Fogarty
2
fog
36
1
4
3
2
s
2

4
2
2
focussed
2
focus
36
1
4
3
2

2
u
4
2
2
foci
2
focal
36
1
4
3
2

2
m
4
1
2
foal
36
1
4
3
2

2

4
3
2
foamy
2
foamflower
2
foam
36
1
4
3
2

2
acgilnoprsux
4
7
2
foyer
2
fowl
2
fovea
2
Fomalhaut
2
foe
2
fodder
2
fob
36
1
4
3
2

2

4
2
2
FMC
2
FM
36
1
4
3
2

2

4
5
2
flyway
2
Flynn
2
flyer
2
flycatcher
2
fly
36
1
4
3
2

2

4
2
2
flutter
2
flute
36
1
4
3
2

2

4
2
2
fluster
2
flush
36
1
4
3
2

2

4
2
2
fluoride
2
fluoridate
36
1
4
3
2

2
d
4
2
2
fluorite
2
fluorine
36
1
4
3
2
sce
2

4
3
2
fluorescent
2
fluorescein
2
fluoresce
36
1
4
3
2
r
2
ei
4
2
2
fluorspar
2
fluorocarbon
36
1
4
3
2
f
2

4
2
2
fluffy
2
fluff
36
1
4
3
2

2

4
2
2
fluent
2
flue
36
1
4
3
2

2
efost
4
8
2
flux
2
flurry
2
flung
2
fluke
2
fluid
2
fluctuate
2
flub
2
flu
36
1
4
3
2
r
2

4
2
2
flowery
2
flowerpot
36
1
4
3
2

2
e
4
3
2
flown
2
flowchart
2
flow
36
1
4
3
2

2

4
3
2
floury
2
flourish
2
flour
36
1
4
3
2

2

4
2
2
flounder
2
flounce
36
1
4
3
2

2
nr
4
1
2
flout
36
1
4
3
2

2

4
2
2
flotilla
2
flotation
36
1
4
3
2

2

4
3
2
Floridian
2
Florida
2
florid
36
1
4
3
2

2
d
4
3
2
florist
2
florin
2
florican
36
1
4
3
2
n
2

4
2
2
Florentine
2
Florence
36
1
4
3
2

2

4
2
2
floral
2
flora
36
1
4
3
2

2
aei
4
0
36
1
4
3
2

2

4
2
2
floppy
2
flop
36
1
4
3
2

2

4
2
2
floorboard
2
floor
36
1
4
3
2

2
l
4
2
2
floodgate
2
flood
36
1
4
3
2
i
2

4
2
2
floodlit
2
floodlight
36
1
4
3
2

2
dr
4
0
36
1
4
3
2

2

4
2
2
flogging
2
flog
36
1
4
3
2

2

4
3
2
flock
2
flocculate
2
floc
36
1
4
3
2

2
cgoprtuw
4
4
2
Floyd
2
floe
2
float
2
Flo
36
1
4
3
2
tio
2

4
2
2
flirtatious
2
flirtation
36
1
4
3
2
t
2
a
4
1
2
flirt
36
1
4
3
2

2

4
3
2
flippant
2
flipflop
2
flip
36
1
4
3
2

2

4
3
2
flinty
2
flintlock
2
flint
36
1
4
3
2

2
t
4
2
2
fling
2
flinch
36
1
4
3
2

2
nprc
4
3
2
flit
2
flimsy
2
flight
36
1
4
3
2
r
2

4
2
2
flexure
2
flexural
36
1
4
3
2

2
u
4
2
2
flexible
2
flex
36
1
4
3
2
ch
2

4
2
2
Fletcher
2
fletch
36
1
4
3
2
h
2

4
2
2
fleshy
2
flesh
36
1
4
3
2
i
2

4
2
2
flemish
2
Fleming
36
1
4
3
2

2

4
4
2
fleet
2
fleeing
2
fleece
2
flee
36
1
4
3
2

2

4
2
2
fledgling
2
fledge
36
1
4
3
2

2
g
4
1
2
fled
36
1
4
3
2

2

4
3
2
fleawort
2
fleabane
2
flea
36
1
4
3
2

2
ademstx
4
2
2
flew
2
fleck
36
1
4
3
2

2

4
3
2
flaxseed
2
flaxen
2
flax
36
1
4
3
2

2

4
2
2
flautist
2
flaunt
36
1
4
3
2

2

4
2
2
flatus
2
flatulent
36
1
4
3
2
e
2

4
2
2
flattery
2
flatten
36
1
4
3
2

2
tu
4
6
2
flatworm
2
flatland
2
flatiron
2
flathead
2
flatbed
2
flat
36
1
4
3
2

2

4
4
2
flashy
2
flashlight
2
flashback
2
flash
36
1
4
3
2

2
h
4
1
2
flask
36
1
4
3
2

2

4
5
2
flannel
2
flank
2
flange
2
Flanders
2
Flanagan
36
1
4
3
2

2

4
5
2
flammable
2
flamingo
2
flame
2
flamboyant
2
flam
36
1
4
3
2

2

4
3
2
flaky
2
flake
2
flak
36
1
4
3
2

2

4
2
2
flair
2
flail
36
1
4
3
2
t
2

4
2
2
flagstone
2
Flagstaff
36
1
4
3
2

2

4
2
2
flageolet
2
flagellate
36
1
4
3
2

2
es
4
5
2
flagrant
2
flagpole
2
Flagler
2
flagging
2
flag
36
1
4
3
2

2
gikmnstux
4
5
2
flaw
2
flare
2
flap
2
flack
2
flabbergast
36
1
4
3
2

2
aeiouy
4
1
2
FL
36
1
4
3
2

2

4
2
2
fizzle
2
Fizeau
36
1
4
3
2

2

4
4
2
fixed
2
fixture
2
fixate
2
fix
36
1
4
3
2
e
2

4
2
2
fivefold
2
five
36
1
4
3
2

2

4
3
2
Fitzroy
2
Fitzpatrick
2
Fitzgerald
36
1
4
3
2
h
2

4
2
2
Fitchburg
2
Fitch
36
1
4
3
2

2
cz
4
2
2
fitful
2
fit
36
1
4
3
2

2

4
2
2
fisticuff
2
fist
36
1
4
3
2

2

4
2
2
fission
2
fissile
36
1
4
3
2

2
i
4
1
2
fissure
36
1
4
3
2

2

4
2
2
Fiske
2
Fisk
36
1
4
3
2

2

4
2
2
fishermen
2
fisherman
36
1
4
3
2
r
2
m
4
1
2
fishery
36
1
4
3
2

2
e
4
4
2
fishy
2
fishpond
2
fishmonger
2
fish
36
1
4
3
2

2
h
4
1
2
fiscal
36
1
4
3
2

2

4
2
2
Fischer
2
Fischbein
36
1
4
3
2

2
chkst
4
0
36
1
4
3
2
t
2

4
2
2
firsthand
2
first
36
1
4
3
2

2

4
3
2
firms
2
firmware
2
firm
36
1
4
3
2

2

4
2
2
firework
2
firewood
36
1
4
3
2

2
o
4
1
2
firewall
36
1
4
3
2

2

4
2
2
Firestone
2
fireside
36
1
4
3
2

2

4
3
2
fireproof
2
firepower
2
fireplace
36
1
4
3
2

2

4
2
2
firemen
2
fireman
36
1
4
3
2

2

4
3
2
firebug
2
firebreak
2
fireboat
36
1
4
3
2

2
bmpsw
4
6
2
firelight
2
firehouse
2
firefly
2
firecracker
2
firearm
2
fire
36
1
4
3
2

2
ems
4
1
2
fir
36
1
4
3
2

2

4
4
2
finny
2
Finnish
2
Finnegan
2
Finn
36
1
4
3
2

2

4
2
2
Finley
2
Finland
36
1
4
3
2

2
s
4
3
2
finite
2
finicky
2
finial
36
1
4
3
2
er
2

4
4
2
fingertip
2
fingerprint
2
fingernail
2
finger
36
1
4
3
2
s
2

4
2
2
finessing
2
finesse
36
1
4
3
2

2
s
4
2
2
finery
2
fine
36
1
4
3
2

2

4
2
2
financier
2
financial
36
1
4
3
2
c
2
i
4
1
2
finance
36
1
4
3
2

2

4
3
2
finally
2
finale
2
final
36
1
4
3
2

2
ln
4
0
36
1
4
3
2

2
aegilnd
4
3
2
fink
2
finch
2
fin
36
1
4
3
2

2

4
2
2
filthy
2
filth
36
1
4
3
2

2
h
4
2
2
filtrate
2
filter
36
1
4
3
2

2

4
5
2
filmy
2
filmstrip
2
filmmake
2
filmdom
2
film
36
1
4
3
2

2
e
4
3
2
filly
2
fillip
2
fill
36
1
4
3
2

2

4
4
2
Filipino
2
filigree
2
filibuster
2
filial
36
1
4
3
2

2

4
2
2
filet
2
file
36
1
4
3
2
ment
2

4
2
2
filamentary
2
filament
36
1
4
3
2

2
aeilmt
4
2
2
filch
2
filbert
36
1
4
3
2

2

4
2
2
figurate
2
figural
36
1
4
3
2
r
2
ae
4
1
2
figurine
36
1
4
3
2

2
u
4
3
2
fight
2
figaro
2
fig
36
1
4
3
2
en
2

4
2
2
fifteenth
2
fifteen
36
1
4
3
2

2
e
4
3
2
fifty
2
fiftieth
2
fifth
36
1
4
3
2

2
t
4
2
2
FIFO
2
fife
36
1
4
3
2

2

4
2
2
fiery
2
fierce
36
1
4
3
2
d
2

4
2
2
fiendish
2
fiend
36
1
4
3
2
d
2
s
4
2
2
fieldwork
2
field
36
1
4
3
2

2

4
2
2
fiefdom
2
fief
36
1
4
3
2

2
flnr
4
1
2
fiesta
36
1
4
3
2

2

4
2
2
fidelity
2
fide
36
1
4
3
2
l
2
e
4
1
2
fiddling
36
1
4
3
2

2
de
4
2
2
fiducial
2
fidget
36
1
4
3
2
i
2

4
3
2
fictive
2
fictitious
2
fiction
36
1
4
3
2

2
t
4
2
2
fickle
2
fiche
36
1
4
3
2

2

4
2
2
fibrous
2
fibrosis
36
1
4
3
2

2
o
4
2
2
fibrin
2
fibration
36
1
4
3
2
r
2

4
2
2
Fiberglas
2
fiberboard
36
1
4
3
2

2
er
4
2
2
Fibonacci
2
fib
36
1
4
3
2

2
n
4
2
2
fiat
2
fiasco
36
1
4
3
2
ce
2

4
2
2
fiancee
2
fiance
36
1
4
3
2

2
abcdeFglnrstvxz
4
0
36
1
4
3
2
er
2

4
2
2
feverish
2
fever
36
1
4
3
2

2

4
2
2
feudatory
2
feudal
36
1
4
3
2
d
2
a
4
1
2
feud
36
1
4
3
2

2

4
2
2
fettle
2
fetter
36
1
4
3
2

2

4
2
2
fetish
2
fetid
36
1
4
3
2

2
it
4
4
2
fetus
2
fete
2
fetch
2
fetal
36
1
4
3
2
v
2

4
2
2
festive
2
festival
36
1
4
3
2

2
i
4
1
2
fest
36
1
4
3
2

2
t
4
1
2
fescue
36
1
4
3
2

2

4
2
2
ferrule
2
ferruginous
36
1
4
3
2
agnet
2

4
2
2
ferromagnetic
2
ferromagnet
36
1
4
3
2

2
m
4
2
2
ferrous
2
ferroelectric
36
1
4
3
2

2

4
3
2
ferrite
2
ferris
2
ferric
36
1
4
3
2

2

4
3
2
ferret
2
Ferrer
2
Ferreira
36
1
4
3
2

2
eiou
4
1
2
ferry
36
1
4
3
2
ci
2

4
2
2
ferocity
2
ferocious
36
1
4
3
2

2

4
3
2
fernery
2
Fernando
2
fern
36
1
4
3
2

2

4
3
2
fermium
2
fermion
2
Fermi
36
1
4
3
2
nt
2

4
2
2
fermentation
2
ferment
36
1
4
3
2

2
ei
4
1
2
Fermat
36
1
4
3
2

2
mnor
4
5
2
fervent
2
fertile
2
Ferguson
2
Ferdinand
2
Ferber
36
1
4
3
2
e
2

4
2
2
fencepost
2
fence
36
1
4
3
2

2
c
4
4
2
fenugreek
2
Fenton
2
fennel
2
fend
36
1
4
3
2

2

4
2
2
feminist
2
feminism
36
1
4
3
2
ni
2
s
4
1
2
feminine
36
1
4
3
2

2
i
4
2
2
femur
2
female
36
1
4
3
2
n
2

4
3
2
felony
2
felonious
2
felon
36
1
4
3
2

2

4
2
2
fellow
2
fell
36
1
4
3
2

2
i
4
1
2
Felice
36
1
4
3
2

2

4
2
2
felicity
2
felicitous
36
1
4
3
2

2
t
4
1
2
Felicia
36
1
4
3
2

2
c
4
2
2
Felix
2
feline
36
1
4
3
2

2

4
2
2
feldspar
2
Feldman
36
1
4
3
2

2
dilo
4
2
2
felt
2
felsite
36
1
4
3
2

2

4
2
2
feint
2
feign
36
1
4
3
2

2

4
2
2
feedback
2
feed
36
1
4
3
2

2
dl
4
4
2
feet
2
Feeney
2
feeble
2
fee
36
1
4
3
2
ra
2

4
2
2
federate
2
federal
36
1
4
3
2

2
e
4
2
2
Fedora
2
fed
36
1
4
3
2

2

4
2
2
February
2
febrile
36
1
4
3
2

2
r
4
1
2
Feb
36
1
4
3
2
d
2

4
2
2
featherbedding
2
featherbed
36
1
4
3
2

2
e
4
1
2
featherbrain
36
1
4
3
2
er
2
b
4
4
2
feathery
2
featherweight
2
feathertop
2
feather
36
1
4
3
2

2
h
4
2
2
feature
2
feat
36
1
4
3
2

2

4
2
2
feast
2
feasible
36
1
4
3
2

2

4
3
2
fearsome
2
fearful
2
fear
36
1
4
3
2

2
rst
4
1
2
fealty
36
1
4
3
2

2
abdeilmnrstuv
4
3
2
few
2
fecund
2
Fe
36
1
4
3
2
tte
2

4
2
2
Fayetteville
2
Fayette
36
1
4
3
2

2
e
4
1
2
fay
36
1
4
3
2
t
2

4
3
2
Faustus
2
Faustian
2
Faust
36
1
4
3
2

2

4
2
2
fauna
2
faun
36
1
4
3
2

2

4
2
2
faulty
2
fault
36
1
4
3
2

2
t
4
1
2
Faulkner
36
1
4
3
2

2
lns
4
1
2
faucet
36
1
4
3
2

2

4
2
2
fatty
2
fatten
36
1
4
3
2

2

4
2
2
Fatima
2
fatigue
36
1
4
3
2

2

4
2
2
fathom
2
father
36
1
4
3
2

2

4
2
2
fateful
2
fate
36
1
4
3
2

2
ehit
4
3
2
fatuous
2
fatal
2
fat
36
1
4
3
2

2
e
4
2
2
fastidious
2
fast
36
1
4
3
2
i
2
cs
4
1
2
fascinate
36
1
4
3
2

2

4
2
2
fascist
2
fascism
36
1
4
3
2

2

4
2
2
fasciculate
2
fascicle
36
1
4
3
2

2
ct
4
1
2
fashion
36
1
4
3
2
he
2

4
2
2
farthest
2
farther
36
1
4
3
2

2

4
4
2
farmland
2
Farmington
2
farmhouse
2
farm
36
1
4
3
2

2

4
2
2
farewell
2
fare
36
1
4
3
2

2

4
2
2
farcical
2
farce
36
1
4
3
2
d
2

4
2
2
Faraday
2
farad
36
1
4
3
2

2
acemt
4
11
2
farsighted
2
Farrell
2
faro
2
Farnsworth
2
Farley
2
Farkas
2
farina
2
Fargo
2
farfetched
2
Farber
2
far
36
1
4
3
2
s
2
i
4
2
2
fantasy
2
fantastic
36
1
4
3
2

2

4
2
2
fantasist
2
fantasia
36
1
4
3
2

2
a
4
1
2
fantod
36
1
4
3
2

2

4
2
2
fangled
2
fang
36
1
4
3
2

2

4
2
2
fanfold
2
fanfare
36
1
4
3
2

2

4
2
2
fancy
2
fanciful
36
1
4
3
2

2
cfgt
4
4
2
fanout
2
Fanny
2
fanatic
2
fan
36
1
4
3
2

2
i
4
1
2
family
36
1
4
3
2

2
a
4
1
2
familism
36
1
4
3
2

2

4
2
2
familiar
2
familial
36
1
4
3
2

2
l
4
2
2
famish
2
famine
36
1
4
3
2

2
i
4
2
2
famous
2
fame
36
1
4
3
2

2

4
3
2
Falstaff
2
falsify
2
false
36
1
4
3
2

2

4
3
2
fallow
2
fallout
2
falloff
36
1
4
3
2
c
2

4
2
2
fallacy
2
fallacious
36
1
4
3
2

2
ao
4
3
2
fallible
2
fallen
2
fall
36
1
4
3
2
on
2

4
2
2
falconry
2
falcon
36
1
4
3
2

2
cls
4
2
2
falter
2
Falmouth
36
1
4
3
2
h
2

4
2
2
faithful
2
faith
36
1
4
3
2

2

4
2
2
Fairfield
2
Fairfax
36
1
4
3
2

2
f
4
7
2
fairly
2
fairy
2
fairway
2
Fairport
2
fairgoer
2
Fairchild
2
fair
36
1
4
3
2

2

4
2
2
faint
2
fain
36
1
4
3
2

2
sei
4
2
2
failure
2
fail
36
1
4
3
2

2

4
3
2
failsoft
2
failsafe
2
fails
36
1
4
3
2

2
lnrt
4
0
36
1
4
3
2

2

4
2
2
Fahrenheit
2
Fahey
36
1
4
3
2

2

4
2
2
fadeout
2
fade
36
1
4
3
2

2
e
4
1
2
fad
36
1
4
3
2

2

4
3
2
factory
2
factorial
2
factor
36
1
4
3
2

2
r
4
1
2
facto
36
1
4
3
2

2
o
4
3
2
factual
2
factious
2
fact
36
1
4
3
2

2

4
2
2
facilitate
2
facile
36
1
4
3
2

2
l
4
1
2
facial
36
1
4
3
2

2

4
2
2
facetious
2
facet
36
1
4
3
2

2
t
4
3
2
faces
2
faceplate
2
face
36
1
4
3
2

2
eit
4
3
2
faculty
2
facsimile
2
facade
36
1
4
3
2
ic
2

4
2
2
fabricate
2
fabric
36
1
4
3
2

2
r
4
4
2
fabulous
2
fable
2
Fabian
2
Faber
36
1
4
3
2

2
bcdhilmnrstuyk
4
6
2
faze
2
fawn
2
fag
2
Fafnir
2
faery
2
FAA
36
1
4
3
2

2
aeilMorTu
4
7
2
fjord
2
f's
2
FPC
2
FDA
2
FCC
2
FBI
2
f
36
1
4
3
2

2

4
2
2
Ezra
2
Ezekiel
36
1
4
3
2

2

4
3
2
eyelid
2
eyelet
2
eyelash
36
1
4
3
2

2

4
2
2
eyebrow
2
eyebright
36
1
4
3
2

2
r
4
1
2
eyeball
36
1
4
3
2
e
2
bls
4
5
2
eyewitness
2
eyepiece
2
eyeglass
2
eyeful
2
eye
36
1
4
3
2

2

4
2
2
exultation
2
exultant
36
1
4
3
2
t
2
a
4
1
2
exult
36
1
4
3
2

2

4
2
2
exude
2
exudate
36
1
4
3
2

2
dl
4
1
2
exuberant
36
1
4
3
2
i
2

4
2
2
extrusive
2
extrusion
36
1
4
3
2

2
s
4
1
2
extrude
36
1
4
3
2
ver
2

4
2
2
extrovert
2
extroversion
36
1
4
3
2
a
2

4
2
2
extricate
2
extricable
36
1
4
3
2

2
c
4
1
2
extrinsic
36
1
4
3
2

2

4
2
2
extremal
2
extrema
36
1
4
3
2
m
2
ae
4
1
2
extremum
36
1
4
3
2

2
cdv
4
7
2
extraterrestrial
2
extrapolate
2
extraordinary
2
extraneous
2
extramarital
2
extralegal
2
extra
36
1
4
3
2
agan
2

4
2
2
extravaganza
2
extravagant
36
1
4
3
2
it
2

4
2
2
extradition
2
extradite
36
1
4
3
2

2

4
2
2
extractor
2
extract
36
1
4
3
2

2
t
4
1
2
extracellular
36
1
4
3
2

2
aeiou
4
0
36
1
4
3
2

2
l
4
1
2
extol
36
1
4
3
2

2

4
2
2
extoller
2
extolled
36
1
4
3
2

2
e
4
1
2
extolling
36
1
4
3
2

2
l
4
1
2
extort
36
1
4
3
2

2

4
2
2
extinguish
2
extinct
36
1
4
3
2

2
n
4
1
2
extirpate
36
1
4
3
2

2

4
3
2
external
2
exterminate
2
exterior
36
1
4
3
2

2

4
3
2
extensive
2
extension
2
extensible
36
1
4
3
2

2
i
4
1
2
extensor
36
1
4
3
2

2

4
2
2
extendible
2
extend
36
1
4
3
2

2
ds
4
2
2
extenuate
2
extent
36
1
4
3
2
por
2

4
2
2
extempore
2
extemporaneous
36
1
4
3
2

2
mnr
4
0
36
1
4
3
2

2
eior
4
1
2
extant
36
1
4
3
2

2

4
3
2
expurgate
2
expunge
2
expulsion
36
1
4
3
2
ss
2
i
4
2
2
expressway
2
express
36
1
4
3
2

2

4
3
2
expressive
2
expression
2
expressible
36
1
4
3
2

2
e
4
1
2
expropriate
36
1
4
3
2
r
2

4
2
2
expository
2
expositor
36
1
4
3
2
t
2
o
4
2
2
exposition
2
exposit
36
1
4
3
2

2
i
4
2
2
exposure
2
expose
36
1
4
3
2
t
2

4
2
2
exportation
2
export
36
1
4
3
2
ent
2
i
4
1
2
exponent
36
1
4
3
2
a
2

4
2
2
exponentiate
2
exponential
36
1
4
3
2

2
nrs
4
1
2
expound
36
1
4
3
2
i
2

4
2
2
explosive
2
explosion
36
1
4
3
2
t
2

4
2
2
exploratory
2
exploration
36
1
4
3
2

2
a
4
1
2
explore
36
1
4
3
2
t
2

4
2
2
exploitation
2
exploit
36
1
4
3
2

2
irs
4
1
2
explode
36
1
4
3
2

2

4
2
2
explicate
2
explicable
36
1
4
3
2
c
2
a
4
1
2
explicit
36
1
4
3
2

2
n
4
1
2
explain
36
1
4
3
2
at
2

4
2
2
explanatory
2
explanation
36
1
4
3
2

2
aio
4
1
2
expletive
36
1
4
3
2

2

4
2
2
expire
2
expiration
36
1
4
3
2

2

4
2
2
expiate
2
expiable
36
1
4
3
2

2
ar
4
0
36
1
4
3
2

2

4
2
2
expertise
2
expert
36
1
4
3
2

2
em
4
0
36
1
4
3
2
ent
2

4
2
2
experimentation
2
experiment
36
1
4
3
2
n
2
c
4
1
2
experiential
36
1
4
3
2

2
it
4
0
36
1
4
3
2

2

4
2
2
expensive
2
expense
36
1
4
3
2

2

4
2
2
expenditure
2
expend
36
1
4
3
2

2
ds
4
0
36
1
4
3
2

2

4
3
2
expelling
2
expelled
2
expellable
36
1
4
3
2

2
l
4
1
2
expel
36
1
4
3
2
o
2

4
2
2
expeditious
2
expedition
36
1
4
3
2

2
i
4
1
2
expedite
36
1
4
3
2
i
2
t
4
1
2
expedient
36
1
4
3
2
t
2
ao
4
3
2
expecting
2
expected
2
expect
36
1
4
3
2
ra
2

4
2
2
expectorate
2
expectorant
36
1
4
3
2

2

4
2
2
expectation
2
expectant
36
1
4
3
2

2
cdlnr
4
0
36
1
4
3
2

2
n
4
1
2
expatiate
36
1
4
3
2

2
s
4
1
2
expand
36
1
4
3
2

2

4
3
2
expansive
2
expansion
2
expansible
36
1
4
3
2

2
i
4
1
2
expanse
36
1
4
3
2

2
aeiloru
4
0
36
1
4
3
2
c
2

4
2
2
exotica
2
exotic
36
1
4
3
2

2
i
4
1
2
exothermic
36
1
4
3
2
is
2

4
3
2
exorcist
2
exorcism
2
exorcise
36
1
4
3
2

2
c
4
1
2
exorbitant
36
1
4
3
2
m
2

4
2
2
exogamy
2
exogamous
36
1
4
3
2

2
a
4
1
2
exogenous
36
1
4
3
2

2
grt
4
3
2
exoskeleton
2
exonerate
2
exodus
36
1
4
3
2
n
2
t
4
1
2
existence
36
1
4
3
2
t
2
e
4
1
2
exist
36
1
4
3
2

2
s
4
3
2
exit
2
exile
2
exigent
36
1
4
3
2
m
2

4
2
2
exhume
2
exhumation
36
1
4
3
2
rt
2

4
2
2
exhortation
2
exhort
36
1
4
3
2
it
2

4
3
2
exhibitor
2
exhibition
2
exhibit
36
1
4
3
2

2
b
4
1
2
exhilarate
36
1
4
3
2

2
u
4
1
2
exhale
36
1
4
3
2

2

4
3
2
exhaustive
2
exhaustion
2
exhaustible
36
1
4
3
2
st
2
i
4
1
2
exhaust
36
1
4
3
2

2
aiou
4
0
36
1
4
3
2
is
2

4
2
2
exercise
2
exercisable
36
1
4
3
2

2
c
4
1
2
exert
36
1
4
3
2

2

4
2
2
exemption
2
exempt
36
1
4
3
2

2
a
4
1
2
exemplify
36
1
4
3
2
r
2

4
2
2
exemplary
2
exemplar
36
1
4
3
2
p
2
lt
4
0
36
1
4
3
2
e
2

4
2
2
exegete
2
exegesis
36
1
4
3
2

2
ru
4
0
36
1
4
3
2

2
v
4
1
2
execution
36
1
4
3
2
t
2
i
4
3
2
executrix
2
executor
2
execute
36
1
4
3
2
a
2

4
2
2
execrate
2
execrable
36
1
4
3
2

2
cgmr
4
1
2
Exeter
36
1
4
3
2

2

4
2
2
excuse
2
excusable
36
1
4
3
2
s
2

4
2
2
excursus
2
excursion
36
1
4
3
2
pat
2

4
2
2
exculpatory
2
exculpate
36
1
4
3
2

2
lrs
4
0
36
1
4
3
2

2
t
4
1
2
excrescent
36
1
4
3
2

2

4
3
2
excretory
2
excretion
2
excrete
36
1
4
3
2

2
e
4
1
2
excruciate
36
1
4
3
2

2

4
2
2
excoriate
2
excommunicate
36
1
4
3
2
n
2

4
2
2
exclusionary
2
exclusion
36
1
4
3
2
i
2
o
4
1
2
exclusive
36
1
4
3
2

2
s
4
1
2
exclude
36
1
4
3
2

2
m
4
1
2
exclaim
36
1
4
3
2
at
2

4
2
2
exclamatory
2
exclamation
36
1
4
3
2

2
au
4
0
36
1
4
3
2
t
2

4
2
2
excitatory
2
excitation
36
1
4
3
2

2
a
4
2
2
exciton
2
excite
36
1
4
3
2

2

4
3
2
excision
2
excise
2
excisable
36
1
4
3
2

2
st
4
0
36
1
4
3
2
nge
2

4
2
2
exchangeable
2
exchange
36
1
4
3
2

2
a
4
1
2
exchequer
36
1
4
3
2
s
2

4
2
2
excessive
2
excess
36
1
4
3
2
t
2

4
2
2
exception
2
except
36
1
4
3
2

2

4
2
2
excellent
2
excelled
36
1
4
3
2

2
e
4
1
2
excelling
36
1
4
3
2

2
l
4
2
2
excelsior
2
excel
36
1
4
3
2

2
lps
4
2
2
excerpt
2
exceed
36
1
4
3
2

2
ehiloru
4
1
2
excavate
36
1
4
3
2

2
clms
4
1
2
exaggerate
36
1
4
3
2
perate
2

4
2
2
exasperater
2
exasperate
36
1
4
3
2
n
2

4
2
2
examine
2
examination
36
1
4
3
2

2
ip
4
1
2
exam
36
1
4
3
2
t
2

4
2
2
exaltation
2
exalt
36
1
4
3
2

2

4
2
2
exact
2
exacerbate
36
1
4
3
2

2
acehioptu
4
2
2
Exxon
2
exquisite
36
1
4
3
2
tion
2

4
2
2
evolutionary
2
evolution
36
1
4
3
2

2
u
4
1
2
evolve
36
1
4
3
2
a
2

4
2
2
evocate
2
evocable
36
1
4
3
2

2
cl
4
1
2
evoke
36
1
4
3
2

2

4
2
2
evildoer
2
evil
36
1
4
3
2
ent
2

4
2
2
evidential
2
evident
36
1
4
3
2

2
dl
4
2
2
evince
2
evict
36
1
4
3
2

2

4
7
2
everywhere
2
everything
2
everyone
2
everyman
2
everyday
2
everybody
2
every
36
1
4
3
2

2

4
2
2
evergreen
2
Everglades
36
1
4
3
2

2

4
2
2
Everett
2
Eveready
36
1
4
3
2

2
egy
4
3
2
everlasting
2
Everhart
2
ever
36
1
4
3
2
a
2

4
2
2
eventuate
2
eventual
36
1
4
3
2

2
u
4
3
2
eventide
2
eventful
2
event
36
1
4
3
2

2
t
4
3
2
evensong
2
evenhanded
2
even
36
1
4
3
2

2
nr
4
2
2
Evelyn
2
eve
36
1
4
3
2

2
lns
4
4
2
evaporate
2
evade
2
evacuate
2
Eva
36
1
4
3
2
i
2

4
2
2
evasive
2
evasion
36
1
4
3
2

2

4
3
2
Evansville
2
Evanston
2
Evans
36
1
4
3
2
el
2

4
2
2
evangelic
2
evangel
36
1
4
3
2

2
gs
4
1
2
evanescent
36
1
4
3
2
ua
2
t
4
1
2
evaluable
36
1
4
3
2

2
aeio
4
1
2
evzone
36
1
4
3
2

2

4
2
2
Euterpe
2
eutectic
36
1
4
3
2

2
e
4
1
2
euthanasia
36
1
4
3
2

2
a
4
1
2
Europe
36
1
4
3
2
p
2
e
4
2
2
europium
2
Europa
36
1
4
3
2

2

4
2
2
Euripides
2
Euridyce
36
1
4
3
2

2
io
4
3
2
Eurydice
2
eureka
2
Eurasia
36
1
4
3
2

2

4
2
2
euphoric
2
euphoria
36
1
4
3
2
r
2
i
4
1
2
euphorbia
36
1
4
3
2
mis
2

4
2
2
euphemist
2
euphemism
36
1
4
3
2
h
2
eo
4
1
2
Euphrates
36
1
4
3
2
r
2

4
2
2
Eulerian
2
Euler
36
1
4
3
2

2
e
4
1
2
eulogy
36
1
4
3
2

2

4
2
2
eugenic
2
Eugenia
36
1
4
3
2
en
2
i
4
1
2
Eugene
36
1
4
3
2

2
l
4
3
2
eucre
2
Eucharist
2
eucalyptus
36
1
4
3
2
id
2

4
2
2
Euclidean
2
Euclid
36
1
4
3
2

2
cglprt
4
3
2
Eunice
2
Eumenides
2
eukaryote
36
1
4
3
2

2

4
2
2
etiquette
2
etiology
36
1
4
3
2
l
2

4
2
2
ethylene
2
ethyl
36
1
4
3
2

2

4
2
2
ethos
2
ethology
36
1
4
3
2

2

4
2
2
ethnology
2
ethnography
36
1
4
3
2

2
o
4
1
2
ethnic
36
1
4
3
2

2

4
2
2
Ethiopia
2
ethic
36
1
4
3
2

2

4
2
2
ethereal
2
ether
36
1
4
3
2

2
r
4
1
2
Ethel
36
1
4
3
2
n
2

4
3
2
ethanol
2
ethane
2
Ethan
36
1
4
3
2

2
aeinoy
4
0
36
1
4
3
2
rn
2

4
2
2
eternity
2
eternal
36
1
4
3
2

2

4
2
2
etch
2
etc
36
1
4
3
2

2
cehi
4
5
2
etymology
2
etude
2
Etruscan
2
eta
2
et
36
1
4
3
2
ar
2

4
2
2
estuary
2
estuarine
36
1
4
3
2

2

4
2
2
estoppal
2
estop
36
1
4
3
2

2
p
4
1
2
Estonia
36
1
4
3
2
ma
2

4
2
2
estimate
2
estimable
36
1
4
3
2

2

4
4
2
Estes
2
ester
2
Estella
2
esteem
36
1
4
3
2

2
bt
4
0
36
1
4
3
2

2
aeiou
4
3
2
estrange
2
Esther
2
EST
36
1
4
3
2

2

4
3
2
essential
2
essence
2
Essen
36
1
4
3
2

2
n
4
1
2
Essex
36
1
4
3
2

2
e
4
1
2
essay
36
1
4
3
2
s
2

4
2
2
espouse
2
espousal
36
1
4
3
2

2
u
4
1
2
Esposito
36
1
4
3
2

2
oe
4
3
2
esprit
2
esplanade
2
espionage
36
1
4
3
2

2

4
2
2
esoteric
2
esophagi
36
1
4
3
2

2
ahr
4
2
2
escutcheon
2
escort
36
1
4
3
2

2

4
2
2
escrow
2
escritoire
36
1
4
3
2
e
2

4
3
2
eschew
2
Escherichia
2
escheat
36
1
4
3
2

2
p
4
2
2
escalate
2
escadrille
36
1
4
3
2

2

4
2
2
escapee
2
escape
36
1
4
3
2

2
e
4
1
2
escapade
36
1
4
3
2

2
copst
4
3
2
esquire
2
Esmark
2
Eskimo
36
1
4
3
2

2

4
2
2
e's
2
e'er
36
1
4
3
2
t
2

4
2
2
eruption
2
erupt
36
1
4
3
2
it
2

4
2
2
erudition
2
erudite
36
1
4
3
2

2
dp
4
0
36
1
4
3
2

2

4
2
2
Erskine
2
ersatz
36
1
4
3
2

2

4
3
2
error
2
erroneous
2
Errol
36
1
4
3
2

2

4
3
2
erratum
2
erratic
2
errata
36
1
4
3
2

2
t
4
1
2
errand
36
1
4
3
2

2

4
2
2
errantry
2
errant
36
1
4
3
2

2
nt
4
0
36
1
4
3
2

2
ao
4
1
2
err
36
1
4
3
2
ic
2

4
2
2
erotica
2
erotic
36
1
4
3
2

2

4
3
2
erosive
2
erosion
2
erosible
36
1
4
3
2

2
i
4
1
2
Eros
36
1
4
3
2

2

4
2
2
erodible
2
erode
36
1
4
3
2

2
dst
4
0
36
1
4
3
2
st
2

4
2
2
Ernestine
2
Ernest
36
1
4
3
2

2
e
4
2
2
Ernst
2
Ernie
36
1
4
3
2

2

4
4
2
Ericsson
2
Erickson
2
Erich
2
Eric
36
1
4
3
2

2
c
4
2
2
Erik
2
Erie
36
1
4
3
2

2

4
3
2
ergodic
2
ergative
2
erg
36
1
4
3
2

2

4
2
2
erect
2
ere
36
1
4
3
2

2
dst
4
1
2
era
36
1
4
3
2
o
2

4
2
2
Eratosthenes
2
Erato
36
1
4
3
2

2

4
5
2
erasure
2
Erastus
2
Erasmus
2
erase
2
erasable
36
1
4
3
2
ica
2

4
2
2
eradicate
2
eradicable
36
1
4
3
2

2
aeginorsu
4
5
2
Erwin
2
Ervin
2
Erlenmeyer
2
ERDA
2
erbium
36
1
4
3
2

2

4
2
2
equivocal
2
equivalent
36
1
4
3
2

2

4
2
2
equitation
2
equitable
36
1
4
3
2

2
a
4
1
2
equity
36
1
4
3
2

2

4
2
2
equipping
2
equipped
36
1
4
3
2

2

4
2
2
equipotent
2
equipoise
36
1
4
3
2

2
op
4
2
2
equipment
2
equip
36
1
4
3
2

2

4
2
2
equinox
2
equinoctial
36
1
4
3
2

2
o
4
1
2
equine
36
1
4
3
2

2

4
2
2
equilibrium
2
equilibria
36
1
4
3
2
br
2
i
4
1
2
equilibrate
36
1
4
3
2

2
i
4
1
2
equilateral
36
1
4
3
2

2
lnptv
4
1
2
equidistant
36
1
4
3
2

2
t
4
3
2
equanimity
2
equal
2
equable
36
1
4
3
2

2

4
2
2
equatorial
2
equate
36
1
4
3
2
u
2
ai
4
1
2
equestrian
36
1
4
3
2

2

4
3
2
Epstein
2
Epsom
2
epsilon
36
1
4
3
2
h
2

4
2
2
epochal
2
epoch
36
1
4
3
2

2
c
4
1
2
epoxy
36
1
4
3
2
i
2

4
2
2
epithelium
2
epithelial
36
1
4
3
2
e
2
l
4
1
2
epithet
36
1
4
3
2

2
x
4
1
2
epitaph
36
1
4
3
2

2

4
2
2
epitaxy
2
epitaxial
36
1
4
3
2

2
ah
4
1
2
epitome
36
1
4
3
2

2

4
3
2
epistolatory
2
epistle
2
epistemology
36
1
4
3
2
d
2

4
2
2
episodic
2
episode
36
1
4
3
2
opa
2
l
4
1
2
episcopate
36
1
4
3
2

2

4
2
2
Episcopalian
2
episcopal
36
1
4
3
2

2
cot
4
0
36
1
4
3
2
s
2

4
2
2
epiphysis
2
epiphyseal
36
1
4
3
2
h
2
y
4
1
2
Epiphany
36
1
4
3
2

2

4
2
2
epilogue
2
epileptic
36
1
4
3
2

2

4
2
2
epigrammatic
2
epigram
36
1
4
3
2
a
2
m
4
1
2
epigraph
36
1
4
3
2

2
r
4
1
2
epigenetic
36
1
4
3
2
mi
2

4
2
2
epidermis
2
epidermic
36
1
4
3
2
i
2

4
2
2
epidemiology
2
epidemic
36
1
4
3
2
e
2
mr
4
0
36
1
4
3
2

2
uy
4
1
2
epic
36
1
4
3
2
cl
2

4
2
2
epicyclic
2
epicycle
36
1
4
3
2
re
2

4
2
2
Epicurean
2
epicure
36
1
4
3
2

2
cdglpst
4
1
2
epimorphism
36
1
4
3
2

2
ms
4
0
36
1
4
3
2

2

4
2
2
Ephesus
2
Ephesian
36
1
4
3
2
er
2
i
4
1
2
ephemeral
36
1
4
3
2

2

4
2
2
ephemeris
2
ephemerides
36
1
4
3
2

2
e
4
1
2
Ephraim
36
1
4
3
2

2

4
2
2
epaulet
2
EPA
36
1
4
3
2

2
Ahios
4
0
36
1
4
3
2

2

4
3
2
eosine
2
eohippus
2
Eocene
36
1
4
3
2
ym
2

4
3
2
enzymology
2
enzyme
2
enzymatic
36
1
4
3
2

2

4
3
2
environ
2
envious
2
enviable
36
1
4
3
2
lop
2

4
2
2
envelope
2
envelop
36
1
4
3
2

2
ei
4
2
2
envy
2
envoy
36
1
4
3
2
cia
2

4
2
2
enunciate
2
enunciable
36
1
4
3
2
era
2

4
2
2
enumerate
2
enumerable
36
1
4
3
2

2
mn
4
0
36
1
4
3
2
preneur
2

4
2
2
entrepreneurial
2
entrepreneur
36
1
4
3
2
n
2

4
2
2
entrant
2
entranceway
36
1
4
3
2

2
ae
4
2
2
entry
2
entropy
36
1
4
3
2

2

4
2
2
entourage
2
entomology
36
1
4
3
2
e
2

4
2
2
entirety
2
entire
36
1
4
3
2

2
r
4
2
2
entity
2
entice
36
1
4
3
2

2

4
2
2
enthusiastic
2
enthusiast
36
1
4
3
2
sias
2
t
4
1
2
enthusiasm
36
1
4
3
2

2
u
4
1
2
enthalpy
36
1
4
3
2

2
r
4
1
2
entendre
36
1
4
3
2

2

4
3
2
entertain
2
enterprise
2
enter
36
1
4
3
2

2
ehior
4
0
36
1
4
3
2

2

4
3
2
enstatite
2
ensemble
2
ensconce
36
1
4
3
2

2

4
2
2
enrollee
2
Enrico
36
1
4
3
2
uir
2

4
2
2
enquiry
2
enquire
36
1
4
3
2
m
2

4
2
2
enormous
2
enormity
36
1
4
3
2

2
r
4
4
2
enough
2
Enos
2
enol
2
Enoch
36
1
4
3
2
ma
2

4
2
2
enigmatic
2
enigma
36
1
4
3
2

2
g
4
1
2
Enid
36
1
4
3
2

2

4
2
2
Englishmen
2
Englishman
36
1
4
3
2
sh
2
m
4
1
2
English
36
1
4
3
2

2

4
2
2
Englewood
2
Engle
36
1
4
3
2
nd
2

4
2
2
Englander
2
England
36
1
4
3
2

2
aei
4
0
36
1
4
3
2
ne
2

4
2
2
engineer
2
engine
36
1
4
3
2

2
il
4
3
2
Engel
2
engage
2
Eng
36
1
4
3
2
rc
2

4
2
2
enforcible
2
enforceable
36
1
4
3
2

2
o
4
1
2
enfant
36
1
4
3
2

2

4
2
2
energy
2
energetic
36
1
4
3
2

2
g
4
1
2
enervate
36
1
4
3
2

2
r
4
1
2
enemy
36
1
4
3
2
he
2

4
2
2
endothermic
2
endothelial
36
1
4
3
2
m
2

4
2
2
endogamy
2
endogamous
36
1
4
3
2

2
a
4
1
2
endogenous
36
1
4
3
2

2
gt
4
5
2
endow
2
endosperm
2
endorse
2
endomorphism
2
endoderm
36
1
4
3
2

2
o
4
5
2
endure
2
endpoint
2
Endicott
2
endgame
2
end
36
1
4
3
2
mb
2

4
2
2
encumbrance
2
encumber
36
1
4
3
2

2

4
2
2
encryption
2
encroach
36
1
4
3
2
i
2

4
2
2
encomium
2
encomia
36
1
4
3
2

2
m
4
1
2
encore
36
1
4
3
2

2
oru
4
5
2
encyclopedic
2
enclave
2
enchantress
2
encephalitis
2
encapsulate
36
1
4
3
2

2
cdefgioqrstuvz
4
6
2
enmity
2
enlargeable
2
enjoinder
2
enhance
2
enamel
2
en
36
1
4
3
2
i
2

4
2
2
emulsion
2
emulsify
36
1
4
3
2
l
2
s
4
1
2
emulate
36
1
4
3
2

2

4
2
2
empower
2
emporium
36
1
4
3
2
y
2
e
4
1
2
employ
36
1
4
3
2

2
o
4
1
2
emplace
36
1
4
3
2
r
2

4
2
2
empiric
2
empire
36
1
4
3
2
sema
2

4
2
2
emphysematous
2
emphysema
36
1
4
3
2

2
s
4
1
2
emphatic
36
1
4
3
2

2

4
2
2
emphasis
2
emphases
36
1
4
3
2

2
ay
4
0
36
1
4
3
2

2
hilo
4
5
2
empyrean
2
empty
2
empress
2
emperor
2
empathy
36
1
4
3
2

2

4
3
2
emotion
2
Emory
2
emolument
36
1
4
3
2

2

4
2
2
Emmanuel
2
emma
36
1
4
3
2

2
a
4
1
2
Emmett
36
1
4
3
2

2

4
2
2
emitter
2
emitted
36
1
4
3
2

2
e
4
2
2
emitting
2
emittance
36
1
4
3
2

2
t
4
1
2
emit
36
1
4
3
2

2

4
2
2
emissivity
2
emission
36
1
4
3
2
s
2
i
4
1
2
emissary
36
1
4
3
2

2

4
4
2
Emily
2
Emilio
2
Emile
2
Emil
36
1
4
3
2
ra
2

4
2
2
emigrate
2
emigrant
36
1
4
3
2

2
glst
4
2
2
emirate
2
eminent
36
1
4
3
2
t
2

4
2
2
emeritus
2
emeriti
36
1
4
3
2
e
2

4
2
2
emergent
2
emerge
36
1
4
3
2

2
gi
4
3
2
Emery
2
Emerson
2
emerald
36
1
4
3
2

2
r
4
1
2
emendable
36
1
4
3
2
o
2

4
3
2
embryonic
2
embryology
2
embryo
36
1
4
3
2
er
2

4
2
2
embroidery
2
embroider
36
1
4
3
2
i
2
d
4
1
2
embroil
36
1
4
3
2
ce
2

4
2
2
embraceable
2
embrace
36
1
4
3
2

2
aoy
4
1
2
embrittle
36
1
4
3
2

2

4
2
2
embody
2
embodiment
36
1
4
3
2

2
d
4
4
2
embower
2
embouchure
2
emboss
2
embolden
36
1
4
3
2
em
2

4
2
2
emblematic
2
emblem
36
1
4
3
2

2
d
4
1
2
embed
36
1
4
3
2

2

4
2
2
embedder
2
embedded
36
1
4
3
2

2
e
4
2
2
embedding
2
embeddable
36
1
4
3
2

2
d
4
3
2
embezzle
2
ember
2
embellish
36
1
4
3
2

2
r
4
4
2
embattle
2
embassy
2
embank
2
embalm
36
1
4
3
2
o
2

4
2
2
embargoes
2
embargo
36
1
4
3
2

2
g
4
3
2
embarrass
2
embark
2
embarcadero
36
1
4
3
2

2
aelor
4
0
36
1
4
3
2

2

4
3
2
Emanuel
2
emancipate
2
emanate
36
1
4
3
2

2
nc
4
1
2
emasculate
36
1
4
3
2

2
abeimopu
4
2
2
emcee
2
em
36
1
4
3
2

2

4
2
2
elysian
2
Elysee
36
1
4
3
2

2
s
4
1
2
Ely
36
1
4
3
2

2

4
2
2
elution
2
elute
36
1
4
3
2

2
t
4
4
2
elusive
2
elude
2
elucidate
2
eluate
36
1
4
3
2

2

4
2
2
Elsinore
2
Elsie
36
1
4
3
2

2

4
3
2
elsewhere
2
Elsevier
2
else
36
1
4
3
2

2
ei
4
0
36
1
4
3
2

2

4
4
2
eloquent
2
elope
2
elongate
2
Eloise
36
1
4
3
2

2

4
5
2
Elmsford
2
Elmira
2
Elmhurst
2
Elmer
2
elm
36
1
4
3
2

2

4
2
2
Ellison
2
Ellis
36
1
4
3
2

2
o
4
2
2
ellipsis
2
ellipse
36
1
4
3
2
d
2

4
2
2
ellipsoidal
2
ellipsoid
36
1
4
3
2

2
i
4
1
2
ellipsometer
36
1
4
3
2

2
s
4
1
2
elliptic
36
1
4
3
2
t
2

4
2
2
Elliott
2
Elliot
36
1
4
3
2

2
ops
4
0
36
1
4
3
2

2
i
4
5
2
Ellwood
2
Ellsworth
2
Ellen
2
Ella
2
ell
36
1
4
3
2

2

4
2
2
Elkhart
2
elk
36
1
4
3
2
abeth
2

4
2
2
Elizabethan
2
Elizabeth
36
1
4
3
2

2

4
3
2
elision
2
Elisha
2
Elisabeth
36
1
4
3
2

2
szm
4
8
2
elite
2
Eliot
2
Elinor
2
Elijah
2
eligible
2
elide
2
elicit
2
Eli
36
1
4
3
2
n
2

4
2
2
eleventh
2
eleven
36
1
4
3
2

2
e
4
1
2
elevate
36
1
4
3
2
hant
2

4
2
2
elephantine
2
elephant
36
1
4
3
2
ent
2

4
2
2
elementary
2
element
36
1
4
3
2

2

4
3
2
elegy
2
elegiac
2
elegant
36
1
4
3
2
hor
2

4
2
2
electrophorus
2
electrophoresis
36
1
4
3
2

2
i
4
1
2
electron
36
1
4
3
2

2

4
2
2
electrolytic
2
electrolyte
36
1
4
3
2
y
2
t
4
1
2
electrolysis
36
1
4
3
2
h
2

4
2
2
electroencephalography
2
electroencephalograph
36
1
4
3
2
ncephalogra
2
p
4
1
2
electroencephalogram
36
1
4
3
2
ardiogra
2

4
2
2
electrocardiograph
2
electrocardiogram
36
1
4
3
2

2
celnp
4
2
2
electrode
2
electro
36
1
4
3
2

2

4
2
2
electrician
2
electric
36
1
4
3
2

2
c
4
1
2
electrify
36
1
4
3
2

2

4
2
2
electret
2
electress
36
1
4
3
2

2
eio
4
1
2
Electra
36
1
4
3
2

2

4
2
2
electorate
2
electoral
36
1
4
3
2
r
2
a
4
1
2
elector
36
1
4
3
2
t
2
or
4
1
2
elect
36
1
4
3
2

2

4
2
2
Eleazar
2
Eleanor
36
1
4
3
2

2
acgmpv
4
1
2
Elena
36
1
4
3
2

2

4
2
2
eldest
2
elder
36
1
4
3
2

2
e
4
1
2
Eldon
36
1
4
3
2

2

4
2
2
elbow
2
Elba
36
1
4
3
2
t
2

4
2
2
elastomer
2
elastic
36
1
4
3
2

2
s
4
5
2
elate
2
elapse
2
elan
2
Elaine
2
elaborate
36
1
4
3
2

2
abdeiklmosuy
4
5
2
elves
2
Elton
2
Elgin
2
elfin
2
el
36
1
4
3
2

2

4
3
2
Ektachrome
2
Ekstrom
2
eke
36
1
4
3
2
ct
2

4
2
2
ejector
2
eject
36
1
4
3
2

2
e
4
1
2
ejaculate
36
1
4
3
2

2

4
2
2
Eisner
2
Eisenhower
36
1
4
3
2

2

4
2
2
einsteinium
2
Einsteinian
36
1
4
3
2
stein
2
i
4
1
2
Einstein
36
1
4
3
2
en
2

4
2
2
eighteenth
2
eighteen
36
1
4
3
2
t
2
e
4
5
2
eighty
2
eightieth
2
eighth
2
eightfold
2
eight
36
1
4
3
2
n
2
sv
4
1
2
eigenfunction
36
1
4
3
2

2

4
2
2
eigenvector
2
eigenvalue
36
1
4
3
2

2

4
2
2
eigenstate
2
eigenspace
36
1
4
3
2

2
eh
4
0
36
1
4
3
2
e
2

4
2
2
eidetic
2
eider
36
1
4
3
2

2
dgns
4
3
2
either
2
Eire
2
Eileen
36
1
4
3
2

2

4
2
2
Ehrlich
2
eh
36
1
4
3
2
pt
2

4
2
2
Egyptian
2
Egypt
36
1
4
3
2
e
2

4
3
2
egret
2
egress
2
egregious
36
1
4
3
2
is
2

4
2
2
egotist
2
egotism
36
1
4
3
2

2
t
4
2
2
egocentric
2
ego
36
1
4
3
2

2

4
4
2
eggshell
2
eggplant
2
egghead
2
egg
36
1
4
3
2

2

4
2
2
Egan
2
egalitarian
36
1
4
3
2

2
agory
4
0
36
1
4
3
2

2
aeilo
4
1
2
effusive
36
1
4
3
2
i
2

4
2
2
effluvium
2
effluvia
36
1
4
3
2

2
v
4
1
2
effluent
36
1
4
3
2
resce
2

4
2
2
efflorescent
2
effloresce
36
1
4
3
2

2
ou
4
0
36
1
4
3
2

2
a
4
1
2
efficient
36
1
4
3
2
c
2

4
2
2
efficacy
2
efficacious
36
1
4
3
2

2
c
4
1
2
Effie
36
1
4
3
2
t
2
u
4
3
2
effects
2
effective
2
effect
36
1
4
3
2
a
2

4
2
2
effectuate
2
effectual
36
1
4
3
2

2
c
4
3
2
effete
2
efferent
2
effeminate
36
1
4
3
2
ce
2

4
2
2
effaceable
2
efface
36
1
4
3
2

2
f
4
1
2
eft
36
1
4
3
2
i
2

4
2
2
eerily
2
eerie
36
1
4
3
2

2

4
2
2
eelgrass
2
eel
36
1
4
3
2

2
lr
4
1
2
EEOC
36
1
4
3
2
n
2

4
2
2
Edwina
2
Edwin
36
1
4
3
2
rd
2
i
4
1
2
Edward
36
1
4
3
2

2

4
2
2
Edwardine
2
Edwardian
36
1
4
3
2

2
ai
4
0
36
1
4
3
2
a
2
t
4
1
2
educable
36
1
4
3
2

2
c
4
1
2
Eduardo
36
1
4
3
2
n
2
d
4
1
2
Edmonton
36
1
4
3
2
s
2

4
2
2
Edmondson
2
Edmonds
36
1
4
3
2

2
o
4
1
2
Edmund
36
1
4
3
2
r
2

4
3
2
editors
2
editorial
2
editor
36
1
4
3
2

2
o
4
3
2
edition
2
Edith
2
edit
36
1
4
3
2

2

4
2
2
edify
2
edifice
36
1
4
3
2

2
ft
4
4
2
Edison
2
Edinburgh
2
edict
2
edible
36
1
4
3
2

2

4
3
2
edgewise
2
Edgerton
2
edge
36
1
4
3
2

2
e
4
3
2
edgy
2
edging
2
Edgar
36
1
4
3
2

2

4
3
2
Eden
2
edematous
2
edelweiss
36
1
4
3
2

2

4
2
2
eddy
2
Eddie
36
1
4
3
2

2
degimuw
4
3
2
EDT
2
Edna
2
Ed
36
1
4
3
2
eni
2

4
2
2
ecumenist
2
ecumenic
36
1
4
3
2

2
m
4
1
2
Ecuador
36
1
4
3
2
o
2

4
2
2
ectopic
2
ectoderm
36
1
4
3
2
ta
2

4
2
2
ecstatic
2
ecstasy
36
1
4
3
2

2
c
4
1
2
economist
36
1
4
3
2
tric
2

4
2
2
Econometrica
2
econometric
36
1
4
3
2
om
2
ei
4
1
2
economy
36
1
4
3
2

2

4
2
2
ecology
2
Ecole
36
1
4
3
2

2
ln
4
1
2
ecosystem
36
1
4
3
2
p
2

4
2
2
ecliptic
2
eclipse
36
1
4
3
2

2
i
4
3
2
eclogue
2
eclectic
2
eclat
36
1
4
3
2

2

4
2
2
echoes
2
echo
36
1
4
3
2

2

4
2
2
echinoderm
2
echidna
36
1
4
3
2

2
io
4
1
2
echelon
36
1
4
3
2

2
l
4
1
2
eccentric
36
1
4
3
2
es
2

4
2
2
ecclesiastic
2
Eccles
36
1
4
3
2

2
chlostu
4
0
36
1
4
3
2

2

4
4
2
ebullient
2
ebony
2
Eben
2
ebb
36
1
4
3
2
drop
2

4
2
2
eavesdropping
2
eavesdrop
36
1
4
3
2
e
2
s
4
1
2
eave
36
1
4
3
2

2

4
2
2
eater
2
eaten
36
1
4
3
2

2
e
4
2
2
Eaton
2
eat
36
1
4
3
2

2

4
2
2
easygoing
2
easy
36
1
4
3
2

2

4
2
2
Eastwood
2
eastward
36
1
4
3
2
rn
2

4
2
2
easternmost
2
eastern
36
1
4
3
2

2
ew
4
4
2
Eastman
2
Eastland
2
eastbound
2
east
36
1
4
3
2

2

4
2
2
easel
2
ease
36
1
4
3
2

2
etyi
4
0
36
1
4
3
2
v
2

4
2
2
earthmoving
2
earthmover
36
1
4
3
2

2
o
4
1
2
earthmen
36
1
4
3
2
n
2

4
2
2
earthenware
2
earthen
36
1
4
3
2
h
2
em
4
4
2
earthy
2
earthworm
2
earthquake
2
earth
36
1
4
3
2

2
i
4
2
2
earnest
2
earn
36
1
4
3
2

2
ntl
4
7
2
earwig
2
earsplitting
2
earring
2
earphone
2
earmark
2
eardrum
2
ear
36
1
4
3
2

2
e
4
2
2
eagle
2
Eagan
36
1
4
3
2

2
grstv
4
1
2
each
36
1
4
3
2

2
abcdefghijklmnopqr'stuvxyz
4
2
2
ewe
2
e
36
1
4
3
2

2

4
3
2
dysprosium
2
dysplasia
2
dyspeptic
36
1
4
3
2

2
p
4
2
2
dystrophy
2
dysentery
36
1
4
3
2

2
ms
4
0
36
1
4
3
2
t
2

4
3
2
dynasty
2
dynastic
2
dynast
36
1
4
3
2

2
i
4
1
2
dynamo
36
1
4
3
2

2

4
3
2
dynamite
2
dynamism
2
dynamic
36
1
4
3
2

2
a
4
1
2
dyne
36
1
4
3
2

2

4
2
2
dyeing
2
dye
36
1
4
3
2
d
2

4
2
2
dyadic
2
dyad
36
1
4
3
2

2
aens
4
3
2
Dylan
2
Dyke
2
dying
36
1
4
3
2

2

4
2
2
dwindle
2
Dwight
36
1
4
3
2
l
2

4
2
2
dwelt
2
dwell
36
1
4
3
2
r
2

4
2
2
dwarves
2
dwarf
36
1
4
3
2

2
aei
4
1
2
Dwyer
36
1
4
3
2

2

4
2
2
dutiful
2
dutiable
36
1
4
3
2
h
2
m
4
2
2
dutchess
2
Dutch
36
1
4
3
2

2

4
2
2
Dutchmen
2
Dutchman
36
1
4
3
2

2
ci
4
2
2
duty
2
Dutton
36
1
4
3
2

2

4
3
2
dusty
2
dustbin
2
dust
36
1
4
3
2

2

4
2
2
dusky
2
dusk
36
1
4
3
2
nb
2

4
2
2
Dusenbury
2
Dusenberg
36
1
4
3
2

2
ekt
4
1
2
Dusseldorf
36
1
4
3
2

2

4
2
2
Durkin
2
Durkee
36
1
4
3
2

2

4
2
2
duress
2
Durer
36
1
4
3
2

2
n
4
2
2
duration
2
durable
36
1
4
3
2

2

4
2
2
Durango
2
durance
36
1
4
3
2

2
aek
4
4
2
Durward
2
Durrell
2
during
2
Durham
36
1
4
3
2

2

4
2
2
duplicate
2
duplicable
36
1
4
3
2
c
2
a
4
1
2
duplicity
36
1
4
3
2

2
i
4
1
2
duplex
36
1
4
3
2

2
l
4
2
2
DuPont
2
dupe
36
1
4
3
2
pol
2

4
2
2
duopoly
2
duopolist
36
1
4
3
2

2

4
2
2
Dunlop
2
Dunlap
36
1
4
3
2

2

4
2
2
Dunkirk
2
dunk
36
1
4
3
2

2

4
2
2
dungeon
2
dung
36
1
4
3
2

2

4
2
2
Dunedin
2
dune
36
1
4
3
2

2

4
2
2
dunce
2
Duncan
36
1
4
3
2

2
cegkl
4
4
2
Dunn
2
Dunham
2
Dunbar
2
dun
36
1
4
3
2

2

4
4
2
dumped
2
dumpy
2
Dumpty
2
dump
36
1
4
3
2

2

4
2
2
dumbbell
2
dumb
36
1
4
3
2

2
bp
4
2
2
dummy
2
Duma
36
1
4
3
2

2

4
2
2
dully
2
dull
36
1
4
3
2

2
l
4
4
2
duly
2
Duluth
2
dulse
2
dulcet
36
1
4
3
2

2

4
3
2
dugout
2
Dugan
2
dug
36
1
4
3
2
f
2

4
3
2
Duffy
2
duffel
2
duff
36
1
4
3
2

2

4
4
2
dues
2
duet
2
duel
2
due
36
1
4
3
2

2

4
2
2
Dudley
2
dud
36
1
4
3
2

2

4
3
2
ductwork
2
ductile
2
duct
36
1
4
3
2

2

4
2
2
duckling
2
duck
36
1
4
3
2

2
kt
4
2
2
duchess
2
ducat
36
1
4
3
2

2

4
2
2
dubitable
2
dubious
36
1
4
3
2

2
i
4
3
2
Dublin
2
Dubhe
2
dub
36
1
4
3
2

2

4
2
2
Duane
2
dual
36
1
4
3
2

2
abcdefglmnoprst
4
3
2
Duquesne
2
duke
2
du
36
1
4
3
2

2

4
3
2
Dryden
2
dryad
2
dry
36
1
4
3
2
k
2

4
3
2
drunken
2
drunkard
2
drunk
36
1
4
3
2

2

4
4
2
Drummond
2
drumlin
2
drumhead
2
drum
36
1
4
3
2

2

4
3
2
drugstore
2
drugging
2
drug
36
1
4
3
2
ge
2

4
2
2
drudgery
2
drudge
36
1
4
3
2

2
dgmn
4
3
2
Drury
2
druid
2
drub
36
1
4
3
2

2

4
2
2
drowsy
2
drowse
36
1
4
3
2

2
s
4
1
2
drown
36
1
4
3
2

2

4
2
2
dross
2
drosophila
36
1
4
3
2

2

4
4
2
dropout
2
droplet
2
drophead
2
drop
36
1
4
3
2

2

4
2
2
droopy
2
droop
36
1
4
3
2

2
p
4
1
2
drool
36
1
4
3
2

2
opsw
4
5
2
drove
2
drought
2
drone
2
dromedary
2
droll
36
1
4
3
2
zl
2

4
2
2
drizzly
2
drizzle
36
1
4
3
2

2
e
4
1
2
driving
36
1
4
3
2

2

4
2
2
drippy
2
drip
36
1
4
3
2

2

4
2
2
dribble
2
drib
36
1
4
3
2

2
bpvz
4
4
2
Driscoll
2
drink
2
drill
2
drift
36
1
4
3
2
s
2

4
3
2
dressy
2
dressmake
2
dress
36
1
4
3
2

2
dm
4
1
2
dreary
36
1
4
3
2

2

4
4
2
dreamy
2
dreamt
2
dreamboat
2
dream
36
1
4
3
2

2

4
3
2
dreadnought
2
dreadful
2
dread
36
1
4
3
2

2
as
4
6
2
Dreyfuss
2
Drexel
2
drew
2
drench
2
dreg
2
dredge
36
1
4
3
2

2

4
2
2
drawbridge
2
drawback
36
1
4
3
2

2
b
4
3
2
drawn
2
drawl
2
draw
36
1
4
3
2
e
2

4
2
2
drapery
2
drape
36
1
4
3
2

2

4
2
2
dramatist
2
dramatic
36
1
4
3
2

2
i
4
1
2
dramaturgy
36
1
4
3
2

2
t
4
1
2
drama
36
1
4
3
2

2
a
4
1
2
dram
36
1
4
3
2
n
2

4
2
2
drainage
2
drain
36
1
4
3
2

2

4
3
2
dragonhead
2
dragonfly
2
dragon
36
1
4
3
2

2
n
4
1
2
dragoon
36
1
4
3
2

2
o
4
3
2
dragnet
2
dragging
2
drag
36
1
4
3
2

2

4
2
2
draftsmen
2
draftsman
36
1
4
3
2

2
m
4
1
2
draftsperson
36
1
4
3
2
t
2
s
4
3
2
drafty
2
draftee
2
draft
36
1
4
3
2

2
fgimpw
4
5
2
drastic
2
drank
2
drake
2
Draco
2
drab
36
1
4
3
2

2
aeiouy
4
1
2
Dr
36
1
4
3
2
e
2
n
4
1
2
doze
36
1
4
3
2

2

4
2
2
downwind
2
downward
36
1
4
3
2

2

4
2
2
downtrodden
2
downtrend
36
1
4
3
2

2
r
4
2
2
downturn
2
downtown
36
1
4
3
2

2

4
2
2
downstream
2
downstairs
36
1
4
3
2

2
t
4
3
2
downspout
2
downslope
2
downside
36
1
4
3
2

2

4
2
2
downpour
2
downplay
36
1
4
3
2

2
pstw
4
9
2
downright
2
downhill
2
downgrade
2
downfall
2
Downey
2
downdraft
2
downcast
2
downbeat
2
down
36
1
4
3
2

2
n
4
6
2
dowry
2
Dowling
2
dowitcher
2
dowel
2
dowager
2
Dow
36
1
4
3
2
e
2

4
3
2
dovetail
2
dovekie
2
dove
36
1
4
3
2
as
2

4
2
2
Douglass
2
Douglas
36
1
4
3
2

2

4
3
2
doughnut
2
Dougherty
2
dough
36
1
4
3
2

2
hl
4
1
2
Doug
36
1
4
3
2

2
lt
4
0
36
1
4
3
2

2

4
2
2
doubtful
2
doubt
36
1
4
3
2

2
e
4
1
2
doubloon
36
1
4
3
2

2
t
4
3
2
doubleheader
2
Doubleday
2
double
36
1
4
3
2

2

4
2
2
doubleton
2
doublet
36
1
4
3
2

2
bg
4
3
2
douse
2
dour
2
douce
36
1
4
3
2

2

4
2
2
dote
2
dot
36
1
4
3
2

2

4
5
2
Dostoevsky
2
dossier
2
dosimeter
2
dose
2
dosage
36
1
4
3
2
th
2

4
2
2
Dorothy
2
Dorothea
36
1
4
3
2

2

4
2
2
dormitory
2
dormant
36
1
4
3
2

2

4
3
2
Doris
2
Doric
2
Doria
36
1
4
3
2

2

4
2
2
Dorchester
2
Dorcas
36
1
4
3
2

2

4
2
2
Dorado
2
Dora
36
1
4
3
2

2
acimo
4
3
2
Dortmund
2
Dorset
2
Doreen
36
1
4
3
2

2

4
3
2
Doppler
2
dope
2
dopant
36
1
4
3
2

2

4
2
2
doormen
2
doorman
36
1
4
3
2
ep
2

4
2
2
doorkeeper
2
doorkeep
36
1
4
3
2

2
e
4
1
2
doorknob
36
1
4
3
2

2
kms
4
3
2
doorway
2
doorbell
2
door
36
1
4
3
2

2

4
2
2
doomsday
2
doom
36
1
4
3
2

2

4
2
2
Doolittle
2
Dooley
36
1
4
3
2

2
lmr
4
1
2
doodle
36
1
4
3
2

2

4
2
2
Donovan
2
donor
36
1
4
3
2

2

4
2
2
Donner
2
Donnelly
36
1
4
3
2

2
e
4
2
2
donnybrook
2
Donna
36
1
4
3
2

2

4
2
2
Doneck
2
done
36
1
4
3
2
d
2

4
2
2
Donaldson
2
Donald
36
1
4
3
2

2
l
4
2
2
donate
2
Donahue
36
1
4
3
2

2
aeno
4
3
2
don't
2
donkey
2
don
36
1
4
3
2

2

4
3
2
Dominick
2
Dominican
2
Dominic
36
1
4
3
2

2
c
4
2
2
Dominique
2
dominion
36
1
4
3
2

2

4
2
2
dominate
2
dominant
36
1
4
3
2

2
ai
4
3
2
domino
2
Domingo
2
domineer
36
1
4
3
2

2
n
4
1
2
domicile
36
1
4
3
2

2

4
2
2
domestic
2
Domesday
36
1
4
3
2

2
s
4
2
2
Domenico
2
dome
36
1
4
3
2

2
ei
4
1
2
domain
36
1
4
3
2

2

4
2
2
doltish
2
dolt
36
1
4
3
2
it
2

4
2
2
dolomitic
2
dolomite
36
1
4
3
2

2
m
4
1
2
Dolores
36
1
4
3
2

2
a
4
3
2
dolly
2
dollop
2
doll
36
1
4
3
2

2

4
2
2
doleful
2
dole
36
1
4
3
2

2
elot
4
4
2
dolphin
2
doldrum
2
dolce
2
Dolan
36
1
4
3
2

2

4
2
2
dogtrot
2
dogtooth
36
1
4
3
2
i
2

4
2
2
dogmatism
2
dogmatic
36
1
4
3
2
a
2
t
4
1
2
dogma
36
1
4
3
2

2

4
2
2
doggone
2
dogging
36
1
4
3
2

2

4
2
2
dogberry
2
dogbane
36
1
4
3
2

2
bgmt
4
6
2
dogwood
2
dogleg
2
doghouse
2
dogfish
2
Doge
2
dog
36
1
4
3
2

2
s
4
1
2
doe
36
1
4
3
2

2

4
2
2
dodecahedral
2
dodecahedra
36
1
4
3
2
cahedr
2
a
4
1
2
dodecahedron
36
1
4
3
2

2
e
4
5
2
Dodson
2
dodo
2
dodge
2
Dodd
2
DOD
36
1
4
3
2

2

4
2
2
documentation
2
documentary
36
1
4
3
2
ment
2
a
4
1
2
document
36
1
4
3
2

2

4
2
2
doctrinal
2
doctrinaire
36
1
4
3
2
in
2
a
4
1
2
doctrine
36
1
4
3
2
r
2
a
4
1
2
doctor
36
1
4
3
2

2

4
2
2
doctorate
2
doctoral
36
1
4
3
2

2
or
4
0
36
1
4
3
2

2

4
4
2
dockyard
2
dockside
2
docket
2
dock
36
1
4
3
2

2
ktu
4
1
2
docile
36
1
4
3
2

2

4
2
2
Dobbs
2
Dobbin
36
1
4
3
2

2
b
4
2
2
dobson
2
doberman
36
1
4
3
2

2
bcdeglmnoprstuvwz
4
5
2
doing
2
Doyle
2
Doherty
2
doff
2
do
36
1
4
3
2

2

4
2
2
Dnieper
2
DNA
36
1
4
3
2
e
2

4
2
2
dixieland
2
Dixie
36
1
4
3
2

2
i
4
1
2
Dixon
36
1
4
3
2
rce
2

4
2
2
divorcee
2
divorce
36
1
4
3
2

2

4
3
2
divisive
2
division
2
divisible
36
1
4
3
2

2
i
4
1
2
divisor
36
1
4
3
2

2

4
2
2
divine
2
divination
36
1
4
3
2
e
2

4
2
2
dividend
2
divide
36
1
4
3
2

2
dns
4
0
36
1
4
3
2
t
2

4
2
2
divestiture
2
divest
36
1
4
3
2
n
2

4
2
2
diversionary
2
diversion
36
1
4
3
2

2
o
4
1
2
diversify
36
1
4
3
2

2
i
4
1
2
diverse
36
1
4
3
2
e
2

4
2
2
divergent
2
diverge
36
1
4
3
2

2
gs
4
1
2
divert
36
1
4
3
2

2
rs
4
1
2
dive
36
1
4
3
2

2

4
3
2
divan
2
divalent
2
diva
36
1
4
3
2

2
aeio
4
1
2
divulge
36
1
4
3
2

2

4
2
2
ditty
2
ditto
36
1
4
3
2

2
t
4
2
2
dither
2
ditch
36
1
4
3
2
rb
2

4
2
2
disturbance
2
disturb
36
1
4
3
2
ut
2
i
4
1
2
distributor
36
1
4
3
2

2

4
2
2
distributive
2
distribution
36
1
4
3
2

2
b
4
1
2
district
36
1
4
3
2

2
i
4
1
2
distraught
36
1
4
3
2

2

4
2
2
distinguish
2
distinct
36
1
4
3
2
l
2

4
2
2
distillery
2
distillate
36
1
4
3
2

2
ln
4
0
36
1
4
3
2

2

4
3
2
distant
2
distal
2
distaff
36
1
4
3
2

2
airu
4
1
2
distort
36
1
4
3
2

2

4
2
2
dissipate
2
dissident
36
1
4
3
2

2
m
4
2
2
dissertation
2
dissension
36
1
4
3
2

2

4
2
2
disseminate
2
dissemble
36
1
4
3
2

2
ei
4
2
2
dissuade
2
dissociate
36
1
4
3
2

2

4
2
2
disruptive
2
disruption
36
1
4
3
2
upt
2
i
4
1
2
disrupt
36
1
4
3
2
ui
2

4
2
2
disquisition
2
disquietude
36
1
4
3
2
t
2

4
2
2
dispute
2
disputant
36
1
4
3
2
sa
2

4
2
2
disposal
2
disposable
36
1
4
3
2

2

4
3
2
dispersive
2
dispersion
2
dispersible
36
1
4
3
2
s
2
i
4
2
2
disperse
2
dispersal
36
1
4
3
2

2

4
3
2
dispensate
2
dispensary
2
dispensable
36
1
4
3
2
s
2
a
4
1
2
dispense
36
1
4
3
2

2
l
4
1
2
dispel
36
1
4
3
2

2

4
2
2
dispelling
2
dispelled
36
1
4
3
2

2
lnr
4
0
36
1
4
3
2
ra
2

4
2
2
disparate
2
disparage
36
1
4
3
2

2
aeou
4
1
2
display
36
1
4
3
2
ey
2

4
2
2
Disneyland
2
Disney
36
1
4
3
2

2

4
2
2
dismissal
2
dismal
36
1
4
3
2
a
2

4
2
2
dishwater
2
dishwasher
36
1
4
3
2

2
w
4
2
2
dishevel
2
dish
36
1
4
3
2

2

4
2
2
disgustful
2
disgruntle
36
1
4
3
2
ain
2

4
2
2
disdainful
2
disdain
36
1
4
3
2

2

4
3
2
discussion
2
discussant
2
discuss
36
1
4
3
2
s
2
s
4
1
2
discus
36
1
4
3
2

2

4
2
2
discriminatory
2
discriminate
36
1
4
3
2
mina
2
t
4
2
2
discriminant
2
discriminable
36
1
4
3
2

2
t
4
2
2
discrepant
2
discreet
36
1
4
3
2
on
2

4
2
2
discretionary
2
discretion
36
1
4
3
2

2
i
4
1
2
discrete
36
1
4
3
2

2
ei
4
0
36
1
4
3
2

2

4
4
2
discovery
2
discordant
2
discomfit
2
discoid
36
1
4
3
2
n
2

4
2
2
discipline
2
disciplinary
36
1
4
3
2
pl
2
i
4
1
2
disciple
36
1
4
3
2
rn
2

4
2
2
discernible
2
discern
36
1
4
3
2

2
eioru
4
2
2
discarded
2
disc
36
1
4
3
2

2

4
5
2
disappears
2
disagree
2
disastrous
2
disambiguate
2
disaccharide
36
1
4
3
2

2
acdghmnpqrst
4
7
2
disyllable
2
disulfide
2
disk
2
disjunct
2
disembowel
2
disburse
2
Dis
36
1
4
3
2

2

4
2
2
dirty
2
dirt
36
1
4
3
2
i
2

4
2
2
directrix
2
directrices
36
1
4
3
2
r
2

4
3
2
directory
2
directorate
2
director
36
1
4
3
2
t
2
or
4
3
2
directed
2
directly
2
direct
36
1
4
3
2

2
c
4
1
2
dire
36
1
4
3
2

2
et
4
3
2
Dirichlet
2
dirge
2
Dirac
36
1
4
3
2

2

4
2
2
diplomatic
2
diplomat
36
1
4
3
2
a
2
t
4
2
2
diplomacy
2
diploma
36
1
4
3
2
d
2

4
2
2
diploidy
2
diploid
36
1
4
3
2
o
2
im
4
0
36
1
4
3
2
th
2

4
2
2
diphthong
2
diphtheria
36
1
4
3
2

2
hl
4
2
2
dipole
2
dip
36
1
4
3
2

2

4
2
2
diorite
2
diorama
36
1
4
3
2

2

4
2
2
diopter
2
Diophantine
36
1
4
3
2
ys
2

4
2
2
Dionysus
2
Dionysian
36
1
4
3
2
es
2

4
2
2
diocese
2
diocesan
36
1
4
3
2

2
cnpr
4
2
2
dioxide
2
diode
36
1
4
3
2
er
2

4
2
2
dinnerware
2
dinnertime
36
1
4
3
2

2

4
4
2
dingy
2
dingo
2
dinghy
2
ding
36
1
4
3
2

2
gn
4
5
2
dint
2
dinosaur
2
dine
2
Dinah
2
din
36
1
4
3
2
ti
2

4
2
2
diminutive
2
diminution
36
1
4
3
2
n
2
u
4
1
2
diminish
36
1
4
3
2

2

4
3
2
dimethyl
2
dimension
2
dime
36
1
4
3
2

2
ei
4
2
2
dimple
2
dim
36
1
4
3
2

2

4
2
2
dilution
2
dilute
36
1
4
3
2

2
t
4
1
2
diluent
36
1
4
3
2

2

4
2
2
Dillon
2
dill
36
1
4
3
2

2

4
2
2
dilettante
2
dilemma
36
1
4
3
2

2
t
4
1
2
dilapidate
36
1
4
3
2

2

4
3
2
dilatory
2
dilate
2
dilatation
36
1
4
3
2

2
aelu
4
2
2
dilogarithm
2
diligent
36
1
4
3
2
ss
2

4
2
2
digression
2
digress
36
1
4
3
2

2
e
4
1
2
digram
36
1
4
3
2

2

4
2
2
dignity
2
dignitary
36
1
4
3
2
i
2
t
4
1
2
dignify
36
1
4
3
2
l
2

4
2
2
digitalis
2
digital
36
1
4
3
2
t
2
a
4
1
2
digit
36
1
4
3
2

2

4
3
2
digestive
2
digestion
2
digestible
36
1
4
3
2
st
2
i
4
1
2
digest
36
1
4
3
2

2
einr
4
2
2
digging
2
dig
36
1
4
3
2

2
eiru
4
0
36
1
4
3
2

2

4
3
2
diffusive
2
diffusion
2
diffusible
36
1
4
3
2
s
2
i
4
1
2
diffuse
36
1
4
3
2
act
2

4
2
2
diffractometer
2
diffract
36
1
4
3
2
ult
2

4
2
2
difficulty
2
difficult
36
1
4
3
2

2
c
4
1
2
diffident
36
1
4
3
2

2
or
4
0
36
1
4
3
2
a
2

4
3
2
differentiate
2
differential
2
differentiable
36
1
4
3
2
nt
2
i
4
2
2
differently
2
different
36
1
4
3
2

2
e
4
1
2
differ
36
1
4
3
2
morphi
2

4
2
2
diffeomorphism
2
diffeomorphic
36
1
4
3
2

2
f
4
1
2
difluoride
36
1
4
3
2

2

4
8
2
Dietz
2
diety
2
Dietrich
2
dietician
2
diethylstilbestrol
2
dietetic
2
dietary
2
diet
36
1
4
3
2

2

4
2
2
dielectric
2
dieldrin
36
1
4
3
2

2
lt
4
6
2
diesel
2
diem
2
diehard
2
Diego
2
Diebold
2
die
36
1
4
3
2

2

4
5
2
Dido
2
didn't
2
diddle
2
didactic
2
did
36
1
4
3
2
on
2

4
2
2
dictionary
2
diction
36
1
4
3
2

2
t
4
1
2
dicta
36
1
4
3
2

2

4
2
2
dictatorial
2
dictate
36
1
4
3
2

2
ai
4
1
2
dictum
36
1
4
3
2

2

4
3
2
dickey
2
Dickerson
2
dickens
36
1
4
3
2

2
e
4
4
2
Dickson
2
Dickinson
2
dickcissel
2
dick
36
1
4
3
2

2

4
2
2
dichotomy
2
dichondra
36
1
4
3
2

2
o
4
1
2
dichloride
36
1
4
3
2

2
hkt
4
2
2
dicotyledon
2
dice
36
1
4
3
2

2
bcglmnpt
4
2
2
diary
2
diadem
36
1
4
3
2

2

4
3
2
diatomic
2
diatomaceous
2
diatom
36
1
4
3
2

2
m
4
1
2
diatonic
36
1
4
3
2
e
2

4
2
2
diathesis
2
diathermy
36
1
4
3
2

2
ho
4
0
36
1
4
3
2

2

4
2
2
diaphragm
2
diaphanous
36
1
4
3
2

2
h
4
2
2
diapason
2
diaper
36
1
4
3
2

2

4
3
2
Dianne
2
Diane
2
Diana
36
1
4
3
2
gneti
2

4
2
2
diamagnetism
2
diamagnetic
36
1
4
3
2

2
a
4
2
2
diamond
2
diameter
36
1
4
3
2
ct
2

4
2
2
dialectic
2
dialect
36
1
4
3
2

2
e
4
4
2
dialysis
2
dialup
2
dialogue
2
dial
36
1
4
3
2
am
2

4
2
2
diagrammatic
2
diagram
36
1
4
3
2
os
2
t
4
3
2
diagnosis
2
diagnose
2
diagnosable
36
1
4
3
2
ic
2

4
2
2
diagnostician
2
diagnostic
36
1
4
3
2

2
nr
4
1
2
diagonal
36
1
4
3
2

2

4
2
2
diacritic
2
diachronic
36
1
4
3
2

2
e
4
2
2
diabolic
2
diabase
36
1
4
3
2
t
2

4
2
2
diabetic
2
diabetes
36
1
4
3
2

2
acdefglmnoprstvx
4
4
2
dizzy
2
diurnal
2
dihedral
2
dibble
36
1
4
3
2
a
2

4
2
2
dharma
2
Dhabi
36
1
4
3
2
o
2

4
2
2
dextrous
2
dextrose
36
1
4
3
2
r
2

4
2
2
dexterity
2
dexter
36
1
4
3
2
t
2
er
4
0
36
1
4
3
2

2

4
6
2
dewy
2
Dewitt
2
Dewey
2
dewdrop
2
dewar
2
dew
36
1
4
3
2

2

4
2
2
devout
2
devour
36
1
4
3
2

2

4
2
2
devotee
2
devote
36
1
4
3
2

2
e
4
1
2
devotion
36
1
4
3
2

2

4
2
2
Devonshire
2
Devon
36
1
4
3
2

2
ntu
4
2
2
devolve
2
devoid
36
1
4
3
2
e
2

4
2
2
devisee
2
devise
36
1
4
3
2

2

4
2
2
devilish
2
devil
36
1
4
3
2

2

4
2
2
deviate
2
deviant
36
1
4
3
2

2
als
4
2
2
devious
2
device
36
1
4
3
2

2
ioe
4
1
2
devastate
36
1
4
3
2
er
2

4
2
2
deuterium
2
deuterate
36
1
4
3
2

2
t
4
2
2
deus
2
deuce
36
1
4
3
2
ct
2

4
2
2
detractor
2
detract
36
1
4
3
2

2
a
4
2
2
Detroit
2
detriment
36
1
4
3
2
a
2

4
2
2
detonate
2
detonable
36
1
4
3
2

2
n
4
2
2
detoxify
2
detour
36
1
4
3
2
t
2

4
2
2
detestation
2
detest
36
1
4
3
2

2

4
2
2
deterrent
2
deterred
36
1
4
3
2

2
e
4
1
2
deterring
36
1
4
3
2

2

4
2
2
determinate
2
determinant
36
1
4
3
2
in
2
a
4
1
2
determine
36
1
4
3
2

2
mr
4
3
2
deteriorate
2
detergent
2
deter
36
1
4
3
2
t
2

4
3
2
detention
2
detente
2
detent
36
1
4
3
2
t
2

4
2
2
detector
2
detect
36
1
4
3
2

2
cnrs
4
0
36
1
4
3
2

2
i
4
1
2
detach
36
1
4
3
2

2

4
4
2
d's
2
d'oeuvre
2
d'etat
2
d'art
36
1
4
3
2

2

4
2
2
detain
2
detail
36
1
4
3
2

2
aeor
4
0
36
1
4
3
2

2

4
2
2
desultory
2
desuetude
36
1
4
3
2
ct
2

4
2
2
destructor
2
destruct
36
1
4
3
2

2
u
4
1
2
destroy
36
1
4
3
2

2
n
4
1
2
destitute
36
1
4
3
2

2

4
3
2
destiny
2
destine
2
destinate
36
1
4
3
2

2
ir
4
0
36
1
4
3
2

2

4
2
2
dessicate
2
dessert
36
1
4
3
2

2

4
2
2
despotic
2
despot
36
1
4
3
2
d
2

4
2
2
despondent
2
despond
36
1
4
3
2

2
nt
4
1
2
despoil
36
1
4
3
2

2

4
3
2
despite
2
despise
2
despicable
36
1
4
3
2
ra
2

4
2
2
desperate
2
desperado
36
1
4
3
2

2
eio
4
1
2
despair
36
1
4
3
2
ate
2

4
2
2
desolater
2
desolate
36
1
4
3
2

2
l
4
1
2
desorption
36
1
4
3
2

2

4
2
2
desirous
2
desire
36
1
4
3
2
n
2

4
4
2
designs
2
designed
2
designate
2
design
36
1
4
3
2
erat
2

4
2
2
desideratum
2
desiderata
36
1
4
3
2

2
dgr
4
1
2
desist
36
1
4
3
2

2

4
2
2
deserve
2
desert
36
1
4
3
2
rate
2

4
2
2
desecrater
2
desecrate
36
1
4
3
2

2
cr
4
1
2
desegregate
36
1
4
3
2

2

4
2
2
descriptive
2
description
36
1
4
3
2
t
2
i
4
1
2
descriptor
36
1
4
3
2
i
2
pb
4
0
36
1
4
3
2

2

4
3
2
descendent
2
descendant
2
descend
36
1
4
3
2
n
2
d
4
1
2
descent
36
1
4
3
2

2

4
2
2
Descartes
2
descant
36
1
4
3
2

2
aer
4
0
36
1
4
3
2

2
ceiopstu
4
3
2
Desmond
2
desk
2
Des
36
1
4
3
2
i
2

4
2
2
derriere
2
derrick
36
1
4
3
2
gat
2

4
2
2
derogatory
2
derogate
36
1
4
3
2

2

4
2
2
derive
2
derivate
36
1
4
3
2
i
2

4
2
2
derisive
2
derision
36
1
4
3
2

2
sv
4
1
2
deride
36
1
4
3
2

2

4
4
2
derelict
2
Derek
2
deregulate
2
dereference
36
1
4
3
2
y
2

4
2
2
Derbyshire
2
derby
36
1
4
3
2

2

4
3
2
derate
2
derange
2
derail
36
1
4
3
2

2
abeior
4
1
2
dervish
36
1
4
3
2
t
2

4
3
2
deputy
2
depute
2
deputation
36
1
4
3
2
v
2

4
2
2
deprive
2
deprivation
36
1
4
3
2

2

4
3
2
depressive
2
depression
2
depressible
36
1
4
3
2
s
2
i
4
3
2
depressor
2
depressant
2
depress
36
1
4
3
2

2
ai
4
0
36
1
4
3
2
a
2

4
2
2
depreciate
2
depreciable
36
1
4
3
2
t
2

4
2
2
deprecatory
2
deprecate
36
1
4
3
2

2
cs
4
0
36
1
4
3
2

2
ei
4
1
2
deprave
36
1
4
3
2
r
2

4
2
2
depository
2
depositor
36
1
4
3
2
t
2
o
4
3
2
deposition
2
depositary
2
deposit
36
1
4
3
2

2
i
4
1
2
depose
36
1
4
3
2
t
2

4
3
2
deportee
2
deportation
2
deport
36
1
4
3
2

2
rs
4
1
2
depot
36
1
4
3
2

2

4
2
2
deploy
2
deplore
36
1
4
3
2
t
2

4
2
2
depletion
2
deplete
36
1
4
3
2

2
eo
4
0
36
1
4
3
2
nd
2

4
2
2
dependent
2
depend
36
1
4
3
2
rt
2
m
4
2
2
departure
2
depart
36
1
4
3
2

2
aeloru
4
2
2
depth
2
depict
36
1
4
3
2
yribo
2

4
2
2
deoxyribose
2
deoxyribonucleic
36
1
4
3
2

2
x
4
1
2
deodorant
36
1
4
3
2

2

4
2
2
denude
2
denudation
36
1
4
3
2

2
d
4
2
2
denunciate
2
denumerable
36
1
4
3
2

2

4
5
2
denture
2
Denton
2
dentistry
2
dental
2
dent
36
1
4
3
2

2

4
2
2
densitometer
2
dense
36
1
4
3
2

2

4
2
2
denounce
2
denouement
36
1
4
3
2
ti
2

4
2
2
denotative
2
denotation
36
1
4
3
2

2
a
4
1
2
denote
36
1
4
3
2

2
tu
4
1
2
denominate
36
1
4
3
2

2

4
2
2
Denny
2
Dennis
36
1
4
3
2

2

4
2
2
denial
2
deniable
36
1
4
3
2

2
a
4
3
2
denied
2
denizen
2
denigrate
36
1
4
3
2
b
2

4
2
2
Denebola
2
Deneb
36
1
4
3
2
rit
2

4
2
2
dendritic
2
dendrite
36
1
4
3
2

2
deinostu
4
5
2
deny
2
Denver
2
Denmark
2
denature
2
den
36
1
4
3
2

2

4
2
2
demurrer
2
demurred
36
1
4
3
2

2
e
4
1
2
demurring
36
1
4
3
2

2
r
4
2
2
demure
2
demur
36
1
4
3
2

2
r
4
1
2
demultiplex
36
1
4
3
2
tra
2

4
2
2
demonstrate
2
demonstrable
36
1
4
3
2

2

4
2
2
demonic
2
demoniac
36
1
4
3
2

2
is
4
1
2
demon
36
1
4
3
2
i
2

4
2
2
demolition
2
demolish
36
1
4
3
2
ra
2
t
4
1
2
democracy
36
1
4
3
2

2

4
2
2
democratic
2
democrat
36
1
4
3
2

2
cln
4
4
2
demountable
2
demote
2
demography
2
demodulate
36
1
4
3
2

2

4
2
2
demitting
2
demitted
36
1
4
3
2

2
t
4
1
2
demit
36
1
4
3
2

2

4
2
2
demise
2
demiscible
36
1
4
3
2

2
st
4
2
2
demijohn
2
demigod
36
1
4
3
2
t
2

4
2
2
dementia
2
demented
36
1
4
3
2

2
n
4
2
2
demerit
2
demean
36
1
4
3
2

2
grn
4
0
36
1
4
3
2

2

4
2
2
demark
2
demarcate
36
1
4
3
2

2

4
2
2
demagogue
2
demagnify
36
1
4
3
2

2
aeiou
4
2
2
demystify
2
Dempsey
36
1
4
3
2
i
2

4
2
2
delusive
2
delusion
36
1
4
3
2

2
s
4
3
2
deluxe
2
deluge
2
delude
36
1
4
3
2

2

4
2
2
deltoid
2
delta
36
1
4
3
2

2

4
3
2
Delphinus
2
delphinium
2
delphine
36
1
4
3
2
hi
2
n
4
2
2
Delphic
2
Delphi
36
1
4
3
2

2

4
2
2
Della
2
dell
36
1
4
3
2
er
2

4
3
2
delivery
2
deliverance
2
deliver
36
1
4
3
2
i
2

4
2
2
delirium
2
delirious
36
1
4
3
2
uesce
2

4
2
2
deliquescent
2
deliquesce
36
1
4
3
2
a
2

4
2
2
delineate
2
delineament
36
1
4
3
2

2
e
4
1
2
delinquent
36
1
4
3
2
it
2

4
2
2
delimitation
2
delimit
36
1
4
3
2
ht
2

4
2
2
delightful
2
delight
36
1
4
3
2

2
t
4
1
2
delicacy
36
1
4
3
2
e
2

4
2
2
delicatessen
2
delicate
36
1
4
3
2

2
a
4
2
2
delicti
2
delicious
36
1
4
3
2

2
cgmnqrvb
4
2
2
Delilah
2
Delia
36
1
4
3
2

2

4
3
2
deleted
2
deleterious
2
delete
36
1
4
3
2

2
e
4
1
2
deletion
36
1
4
3
2
a
2

4
2
2
delegate
2
delegable
36
1
4
3
2
ta
2

4
2
2
delectate
2
delectable
36
1
4
3
2

2
cgt
4
0
36
1
4
3
2

2

4
2
2
Delano
2
Delaney
36
1
4
3
2

2
n
4
2
2
delay
2
Delaware
36
1
4
3
2

2
aeilptu
4
6
2
delve
2
delouse
2
Delmarva
2
Delhi
2
Delft
2
Del
36
1
4
3
2

2

4
2
2
deject
2
deja
36
1
4
3
2

2

4
3
2
deity
2
deign
2
deify
36
1
4
3
2

2

4
2
2
dehydrate
2
dehumidify
36
1
4
3
2
m
2

4
2
2
degumming
2
degum
36
1
4
3
2

2

4
2
2
degree
2
degrease
36
1
4
3
2
d
2

4
2
2
degrade
2
degradation
36
1
4
3
2

2
ae
4
0
36
1
4
3
2
nera
2

4
2
2
degenerate
2
degeneracy
36
1
4
3
2
s
2

4
2
2
degassing
2
degas
36
1
4
3
2

2
aeru
4
0
36
1
4
3
2

2

4
2
2
defray
2
defraud
36
1
4
3
2

2
a
4
1
2
defrost
36
1
4
3
2

2

4
2
2
deformation
2
deform
36
1
4
3
2
st
2

4
2
2
deforestation
2
deforest
36
1
4
3
2

2
em
4
0
36
1
4
3
2

2
r
4
1
2
defocus
36
1
4
3
2
ct
2

4
2
2
deflector
2
deflect
36
1
4
3
2
te
2

4
2
2
deflater
2
deflate
36
1
4
3
2

2
ae
4
0
36
1
4
3
2

2

4
2
2
definitive
2
definition
36
1
4
3
2
t
2
ie
4
0
36
1
4
3
2

2
ie
4
0
36
1
4
3
2
i
2

4
2
2
deficit
2
deficient
36
1
4
3
2

2
cn
4
1
2
defiant
36
1
4
3
2

2

4
3
2
deferring
2
deferred
2
deferrable
36
1
4
3
2

2
r
4
2
2
deferent
2
defer
36
1
4
3
2

2
i
4
1
2
defense
36
1
4
3
2

2

4
2
2
defendant
2
defend
36
1
4
3
2

2
ds
4
0
36
1
4
3
2

2

4
2
2
defector
2
defect
36
1
4
3
2

2
t
4
1
2
defecate
36
1
4
3
2

2
cnr
4
1
2
defeat
36
1
4
3
2

2
u
4
1
2
deface
36
1
4
3
2

2
aeilor
4
3
2
defy
2
defunct
2
deft
36
1
4
3
2

2

4
2
2
deerstalker
2
deerskin
36
1
4
3
2

2
s
4
2
2
Deere
2
deer
36
1
4
3
2

2

4
2
2
deepen
2
deep
36
1
4
3
2

2
pr
4
3
2
deem
2
deed
2
Dee
36
1
4
3
2

2

4
2
2
deductible
2
deduct
36
1
4
3
2
c
2
t
4
2
2
deducible
2
deduce
36
1
4
3
2

2
u
4
1
2
dedicate
36
1
4
3
2
t
2

4
2
2
decryption
2
decrypt
36
1
4
3
2

2
p
4
1
2
decry
36
1
4
3
2

2
e
4
2
2
decrement
2
decrease
36
1
4
3
2

2

4
2
2
decreeing
2
decree
36
1
4
3
2

2
ey
4
0
36
1
4
3
2

2

4
5
2
decorum
2
decorticate
2
decorous
2
decorate
2
decor
36
1
4
3
2
ol
2

4
2
2
deconvolve
2
deconvolution
36
1
4
3
2
rol
2
l
4
1
2
decontrol
36
1
4
3
2

2

4
2
2
decontrolling
2
decontrolled
36
1
4
3
2

2
tv
4
0
36
1
4
3
2
ess
2

4
2
2
decompression
2
decompress
36
1
4
3
2
s
2

4
3
2
decomposition
2
decompose
2
decomposable
36
1
4
3
2
p
2
or
4
1
2
decompile
36
1
4
3
2

2

4
2
2
decollimate
2
decolletage
36
1
4
3
2

2
l
4
1
2
decolonize
36
1
4
3
2

2
lmnr
4
2
2
decouple
2
decode
36
1
4
3
2

2

4
2
2
decline
2
declination
36
1
4
3
2

2
n
4
1
2
declivity
36
1
4
3
2

2
mr
4
2
2
declassify
2
declaim
36
1
4
3
2
t
2
io
4
0
36
1
4
3
2
r
2

4
2
2
declaratory
2
declarator
36
1
4
3
2

2

4
2
2
declarative
2
declaration
36
1
4
3
2

2
a
4
1
2
declare
36
1
4
3
2
at
2

4
2
2
declamatory
2
declamation
36
1
4
3
2

2
ai
4
0
36
1
4
3
2
i
2
o
4
1
2
decisive
36
1
4
3
2
a
2

4
2
2
decimate
2
decimal
36
1
4
3
2

2
e
4
2
2
deciding
2
deciduous
36
1
4
3
2

2
dms
4
3
2
decipher
2
decile
2
decibel
36
1
4
3
2
ti
2

4
2
2
deceptive
2
deception
36
1
4
3
2

2

4
2
2
decent
2
decennial
36
1
4
3
2

2

4
2
2
deceitful
2
deceit
36
1
4
3
2

2
t
4
1
2
deceive
36
1
4
3
2

2
inp
4
5
2
decertify
2
December
2
decelerate
2
decedent
2
decease
36
1
4
3
2

2

4
2
2
Decatur
2
decathlon
36
1
4
3
2
e
2

4
2
2
decadent
2
decade
36
1
4
3
2

2
dt
4
3
2
decay
2
decant
2
decal
36
1
4
3
2

2
aeilor
4
3
2
deck
2
Decca
2
Dec
36
1
4
3
2

2

4
2
2
debutante
2
debut
36
1
4
3
2

2
g
4
1
2
debug
36
1
4
3
2

2

4
2
2
debugger
2
debugged
36
1
4
3
2

2
e
4
1
2
debugging
36
1
4
3
2

2
gt
4
2
2
Debussy
2
debunk
36
1
4
3
2

2

4
2
2
debtor
2
debt
36
1
4
3
2

2

4
2
2
debris
2
debrief
36
1
4
3
2

2
i
4
1
2
Debra
36
1
4
3
2

2

4
2
2
Deborah
2
debonair
36
1
4
3
2
it
2

4
2
2
debility
2
debilitate
36
1
4
3
2

2
l
4
1
2
debit
36
1
4
3
2

2

4
2
2
Debby
2
Debbie
36
1
4
3
2

2
rtu
4
2
2
debase
2
debacle
36
1
4
3
2
ch
2

4
2
2
debauchery
2
debauch
36
1
4
3
2
e
2

4
2
2
debater
2
debate
36
1
4
3
2

2

4
2
2
debarring
2
debar
36
1
4
3
2

2
abiortu
4
1
2
debenture
36
1
4
3
2
h
2

4
3
2
deathward
2
deathbed
2
death
36
1
4
3
2

2

4
4
2
dearth
2
dearie
2
Dearborn
2
dear
36
1
4
3
2

2

4
3
2
Deanna
2
Deane
2
dean
36
1
4
3
2

2

4
4
2
deals
2
dealt
2
deallocate
2
deal
36
1
4
3
2

2

4
2
2
deafen
2
deaf
36
1
4
3
2

2

4
2
2
deadlock
2
deadline
36
1
4
3
2

2
l
4
4
2
deadwood
2
deadhead
2
deaden
2
dead
36
1
4
3
2

2
o
4
1
2
deactivate
36
1
4
3
2
n
2

4
2
2
deaconess
2
deacon
36
1
4
3
2

2
cdflnrt
4
0
36
1
4
3
2

2
abcdefghijlmnoprstuvwx
4
2
2
dey
2
De
36
1
4
3
2

2

4
2
2
dazzle
2
daze
36
1
4
3
2
n
2

4
2
2
Daytona
2
Dayton
36
1
4
3
2

2
o
4
1
2
daytime
36
1
4
3
2

2

4
2
2
daybreak
2
daybed
36
1
4
3
2

2
bt
4
4
2
days
2
daylight
2
daydream
2
day
36
1
4
3
2

2

4
2
2
Dawson
2
dawn
36
1
4
3
2

2

4
2
2
Davison
2
Davis
36
1
4
3
2

2

4
2
2
Davidson
2
David
36
1
4
3
2

2
ds
4
2
2
davit
2
Davies
36
1
4
3
2

2

4
2
2
davenport
2
Dave
36
1
4
3
2

2
ei
4
1
2
Davy
36
1
4
3
2
hin
2

4
2
2
dauphine
2
dauphin
36
1
4
3
2
h
2

4
2
2
daughter
2
Daugherty
36
1
4
3
2

2
gp
4
2
2
daunt
2
daub
36
1
4
3
2

2

4
4
2
dates
2
dater
2
dateline
2
date
36
1
4
3
2

2

4
2
2
database
2
data
36
1
4
3
2

2
ae
4
2
2
datum
2
Datsun
36
1
4
3
2

2

4
2
2
dashboard
2
dash
36
1
4
3
2

2
h
4
1
2
dastard
36
1
4
3
2
in
2

4
2
2
Darwinian
2
Darwin
36
1
4
3
2

2

4
2
2
Dartmouth
2
dart
36
1
4
3
2

2

4
2
2
Darry
2
Darrell
36
1
4
3
2

2

4
2
2
darling
2
Darlene
36
1
4
3
2

2

4
3
2
darkle
2
darken
2
dark
36
1
4
3
2

2
klrtw
4
5
2
DARPA
2
darn
2
Darius
2
dare
2
Dar
36
1
4
3
2

2

4
2
2
dapple
2
dapper
36
1
4
3
2

2
p
4
1
2
Daphne
36
1
4
3
2
b
2

4
2
2
Danubian
2
Danube
36
1
4
3
2
l
2

4
2
2
Danielson
2
Daniel
36
1
4
3
2

2
e
4
1
2
Danish
36
1
4
3
2
r
2

4
2
2
dangerous
2
danger
36
1
4
3
2

2
e
4
2
2
dangle
2
dang
36
1
4
3
2

2

4
2
2
dandy
2
dandelion
36
1
4
3
2

2
dgiu
4
9
2
Danzig
2
Dante
2
Danny
2
dank
2
Dane
2
dance
2
Danbury
2
Dana
2
Dan
36
1
4
3
2

2

4
2
2
dampen
2
damp
36
1
4
3
2

2

4
2
2
damnation
2
damn
36
1
4
3
2

2

4
2
2
damask
2
Damascus
36
1
4
3
2

2
s
4
1
2
damage
36
1
4
3
2

2
anp
4
4
2
damsel
2
Damon
2
dame
2
dam
36
1
4
3
2

2

4
2
2
dally
2
Dallas
36
1
4
3
2

2

4
2
2
Daley
2
dale
36
1
4
3
2

2
el
4
4
2
Dalzell
2
Daly
2
Dalton
2
Dalhousie
36
1
4
3
2

2

4
2
2
Dakota
2
Dakar
36
1
4
3
2

2

4
2
2
daisy
2
dais
36
1
4
3
2

2

4
2
2
dairymen
2
dairyman
36
1
4
3
2
y
2
m
4
2
2
Dairylea
2
dairy
36
1
4
3
2

2
rs
4
3
2
dainty
2
Daimler
2
Dailey
36
1
4
3
2

2

4
2
2
dahlia
2
Dahl
36
1
4
3
2

2
l
4
1
2
Dahomey
36
1
4
3
2
f
2

4
2
2
daffy
2
daffodil
36
1
4
3
2

2

4
4
2
Dade
2
daddy
2
Dada
2
dad
36
1
4
3
2
yl
2

4
2
2
dactylic
2
dactyl
36
1
4
3
2

2
t
4
2
2
dachshund
2
Dacca
36
1
4
3
2

2

4
2
2
dabble
2
dab
36
1
4
3
2

2
bcdfhiklmnprstuvwyz
4
2
2
dagger
2
Daedalus
36
1
4
3
2

2
ae'hinoruwy
4
3
2
Djakarta
2
DC
2
d
36
1
4
3
2
h
2

4
2
2
Czechoslovakia
2
Czech
36
1
4
3
2

2
c
4
1
2
Czerniak
36
1
4
3
2
r
2

4
2
2
czarina
2
czar
36
1
4
3
2

2
ae
4
1
2
CZ
36
1
4
3
2
o
2

4
4
2
cytosine
2
cytoplasm
2
cytolysis
2
cytochemistry
36
1
4
3
2
t
2

4
2
2
cysteine
2
cyst
36
1
4
3
2
l
2

4
2
2
Cyrillic
2
Cyril
36
1
4
3
2

2
i
4
1
2
Cyrus
36
1
4
3
2

2

4
2
2
Cypriot
2
Cyprian
36
1
4
3
2
r
2
i
4
2
2
Cyprus
2
cypress
36
1
4
3
2

2
i
4
1
2
Cynthia
36
1
4
3
2
ind
2

4
2
2
cylindric
2
cylinder
36
1
4
3
2

2

4
2
2
cyclotron
2
cyclotomic
36
1
4
3
2

2

4
2
2
Cyclops
2
cyclopean
36
1
4
3
2

2
pt
4
2
2
cyclorama
2
cyclone
36
1
4
3
2

2

4
2
2
cyclist
2
cyclic
36
1
4
3
2

2
io
4
2
2
cycle
2
Cyclades
36
1
4
3
2

2
l
4
1
2
cycad
36
1
4
3
2
n
2
ai
4
0
36
1
4
3
2

2

4
2
2
cyanide
2
cyanic
36
1
4
3
2

2

4
2
2
cyanate
2
Cyanamid
36
1
4
3
2

2
aclnprst
4
2
2
Cygnus
2
cybernetic
36
1
4
3
2
e
2

4
2
2
cuttlefish
2
cuttlebone
36
1
4
3
2

2
l
4
1
2
cutthroat
36
1
4
3
2

2

4
3
2
cutover
2
cutout
2
cutoff
36
1
4
3
2

2

4
2
2
cutlet
2
cutler
36
1
4
3
2

2
e
4
1
2
cutlass
36
1
4
3
2

2
lot
4
6
2
cutworm
2
cutset
2
cute
2
cutback
2
cutaneous
2
cut
36
1
4
3
2

2
e
4
3
2
customhouse
2
customary
2
custom
36
1
4
3
2

2
i
4
1
2
custody
36
1
4
3
2
a
2

4
2
2
custodian
2
custodial
36
1
4
3
2

2
dm
4
0
36
1
4
3
2

2
o
4
1
2
Custer
36
1
4
3
2

2
i
4
1
2
Cushman
36
1
4
3
2

2

4
2
2
cushion
2
Cushing
36
1
4
3
2

2
ht
4
1
2
cusp
36
1
4
3
2

2

4
2
2
curvature
2
curvaceous
36
1
4
3
2

2
a
4
2
2
curvilinear
2
curve
36
1
4
3
2
i
2

4
2
2
curtain
2
curtail
36
1
4
3
2

2
a
4
3
2
curtsey
2
Curtis
2
curt
36
1
4
3
2
r
2

4
2
2
cursory
2
cursor
36
1
4
3
2

2
o
4
2
2
cursive
2
curse
36
1
4
3
2

2

4
2
2
curricular
2
curricula
36
1
4
3
2
cul
2
a
4
1
2
curriculum
36
1
4
3
2
n
2

4
2
2
currant
2
Curran
36
1
4
3
2

2
aie
4
1
2
curry
36
1
4
3
2

2

4
3
2
curlicue
2
curlew
2
curl
36
1
4
3
2

2

4
3
2
curious
2
curiosity
2
curio
36
1
4
3
2

2
o
4
3
2
curium
2
curie
2
curia
36
1
4
3
2

2

4
2
2
curdle
2
curd
36
1
4
3
2

2

4
2
2
curbside
2
curb
36
1
4
3
2

2
bdilrstve
4
3
2
curfew
2
curate
2
cur
36
1
4
3
2

2

4
2
2
cuprous
2
cupric
36
1
4
3
2
d
2

4
2
2
cupidity
2
Cupid
36
1
4
3
2

2
ir
4
3
2
cupful
2
cupboard
2
cup
36
1
4
3
2
ing
2

4
2
2
Cunningham
2
cunning
36
1
4
3
2

2
n
4
2
2
CUNY
2
Cunard
36
1
4
3
2
l
2

4
2
2
cumulus
2
cumulate
36
1
4
3
2
in
2

4
2
2
Cummins
2
Cummings
36
1
4
3
2
er
2

4
2
2
cumbersome
2
Cumberland
36
1
4
3
2

2
bmu
4
1
2
cumin
36
1
4
3
2
er
2

4
2
2
culvert
2
Culver
36
1
4
3
2
r
2

4
2
2
culture
2
cultural
36
1
4
3
2
va
2

4
2
2
cultivate
2
cultivable
36
1
4
3
2

2
iu
4
1
2
cult
36
1
4
3
2

2

4
2
2
culpable
2
culpa
36
1
4
3
2

2
a
4
1
2
culprit
36
1
4
3
2

2
ptv
4
4
2
culminate
2
cull
2
culinary
2
Culbertson
36
1
4
3
2
f
2

4
2
2
cufflink
2
cuff
36
1
4
3
2
l
2

4
2
2
cuddly
2
cuddle
36
1
4
3
2

2
d
4
2
2
cudgel
2
cud
36
1
4
3
2

2

4
2
2
cucumber
2
cuckoo
36
1
4
3
2

2

4
5
2
cubic
2
cube
2
cubbyhole
2
Cuba
2
cub
36
1
4
3
2

2
bcdflmnprst
4
2
2
cuisine
2
cue
36
1
4
3
2
graph
2

4
2
2
crystallography
2
crystallographer
36
1
4
3
2

2

4
2
2
crystallite
2
crystalline
36
1
4
3
2

2
io
4
0
36
1
4
3
2
tal
2
l
4
1
2
crystal
36
1
4
3
2
h
2

4
2
2
cryptography
2
cryptographer
36
1
4
3
2
gra
2
p
4
1
2
cryptogram
36
1
4
3
2

2

4
2
2
cryptanalyst
2
cryptanalysis
36
1
4
3
2
naly
2
s
4
1
2
cryptanalytic
36
1
4
3
2
t
2
ao
4
2
2
cryptic
2
crypt
36
1
4
3
2

2

4
2
2
cryostat
2
cryogenic
36
1
4
3
2

2
ops
4
1
2
cry
36
1
4
3
2

2

4
4
2
crust
2
Crusoe
2
crush
2
crusade
36
1
4
3
2

2

4
2
2
crumple
2
crump
36
1
4
3
2

2

4
2
2
crumble
2
crumb
36
1
4
3
2

2
bp
4
1
2
crummy
36
1
4
3
2

2

4
2
2
cruise
2
Cruickshank
36
1
4
3
2
l
2

4
2
2
cruelty
2
cruel
36
1
4
3
2

2

4
3
2
crude
2
cruddy
2
crud
36
1
4
3
2
i
2
f
4
2
2
crucible
2
crucial
36
1
4
3
2
x
2

4
2
2
crucifixion
2
crucifix
36
1
4
3
2

2
i
4
1
2
crucify
36
1
4
3
2

2
cdeims
4
5
2
Cruz
2
crux
2
crutch
2
crupper
2
crunch
36
1
4
3
2

2

4
2
2
crowberry
2
crowbait
36
1
4
3
2

2
b
4
5
2
crown
2
Crowley
2
crowfoot
2
crowd
2
crow
36
1
4
3
2

2

4
2
2
croupier
2
crouch
36
1
4
3
2
ch
2

4
2
2
crotchety
2
crotch
36
1
4
3
2

2

4
2
2
crossway
2
crosswalk
36
1
4
3
2

2
a
4
2
2
crosswort
2
crosswise
36
1
4
3
2

2

4
2
2
crossbill
2
crossbar
36
1
4
3
2

2
bw
4
9
2
crosstalk
2
crossroad
2
crosspoint
2
crossover
2
crosslink
2
crosshatch
2
crosscut
2
crossarm
2
cross
36
1
4
3
2

2
s
4
1
2
Crosby
36
1
4
3
2

2

4
2
2
croon
2
crook
36
1
4
3
2

2

4
2
2
crony
2
crone
36
1
4
3
2
well
2

4
2
2
Cromwellian
2
Cromwell
36
1
4
3
2
dil
2

4
2
2
crocodilian
2
crocodile
36
1
4
3
2

2

4
2
2
Crockett
2
crockery
36
1
4
3
2

2
e
4
1
2
crock
36
1
4
3
2

2
ko
4
2
2
crocus
2
crochet
36
1
4
3
2

2

4
2
2
Croatia
2
croak
36
1
4
3
2

2
acmnostuw
4
4
2
croydon
2
crop
2
Croix
2
croft
36
1
4
3
2

2
c
4
1
2
critique
36
1
4
3
2
ri
2

4
2
2
criterion
2
criteria
36
1
4
3
2

2
ei
4
1
2
critter
36
1
4
3
2

2

4
2
2
crisscross
2
criss
36
1
4
3
2

2

4
2
2
Crispin
2
crisp
36
1
4
3
2

2
ps
4
2
2
crisis
2
crises
36
1
4
3
2

2

4
2
2
crinkle
2
cringe
36
1
4
3
2

2

4
2
2
Crimea
2
crime
36
1
4
3
2

2
e
4
3
2
crimson
2
crimp
2
criminal
36
1
4
3
2

2
mnst
4
3
2
cripple
2
cricket
2
crib
36
1
4
3
2

2

4
2
2
crewmen
2
crewman
36
1
4
3
2

2
m
4
3
2
crewel
2
crewcut
2
crew
36
1
4
3
2
n
2

4
2
2
cretinous
2
cretin
36
1
4
3
2

2

4
2
2
Cretan
2
Cretaceous
36
1
4
3
2

2
ai
4
1
2
Crete
36
1
4
3
2

2

4
3
2
Crestview
2
crestfallen
2
crest
36
1
4
3
2
en
2

4
2
2
crescent
2
crescendo
36
1
4
3
2

2
ct
4
1
2
cress
36
1
4
3
2

2

4
2
2
crept
2
crepe
36
1
4
3
2

2

4
3
2
creosote
2
Creon
2
Creole
36
1
4
3
2
at
2

4
2
2
crematory
2
cremate
36
1
4
3
2

2

4
2
2
creepy
2
creep
36
1
4
3
2

2

4
2
2
creekside
2
creek
36
1
4
3
2

2

4
2
2
creedal
2
creed
36
1
4
3
2

2
dkp
4
0
36
1
4
3
2
l
2

4
2
2
credulous
2
credulity
36
1
4
3
2

2

4
2
2
creditor
2
credit
36
1
4
3
2

2
t
4
1
2
credible
36
1
4
3
2
n
2
t
4
1
2
credenza
36
1
4
3
2

2

4
2
2
credential
2
credent
36
1
4
3
2

2
eiu
4
1
2
credo
36
1
4
3
2

2
kmt
4
1
2
crease
36
1
4
3
2

2
ei
4
1
2
creature
36
1
4
3
2

2

4
3
2
creamy
2
creamery
2
cream
36
1
4
3
2

2

4
2
2
creaky
2
creak
36
1
4
3
2

2
ademopstw
4
2
2
crevice
2
creche
36
1
4
3
2

2
bcfgmnpstvwyz
4
2
2
Craig
2
cradle
36
1
4
3
2

2

4
2
2
crazy
2
craze
36
1
4
3
2

2

4
2
2
crayon
2
crayfish
36
1
4
3
2

2

4
2
2
crawlspace
2
crawl
36
1
4
3
2

2
l
4
2
2
Crawford
2
craw
36
1
4
3
2

2

4
2
2
craven
2
crave
36
1
4
3
2

2
e
4
1
2
cravat
36
1
4
3
2
e
2

4
2
2
crater
2
crate
36
1
4
3
2

2

4
2
2
crass
2
crash
36
1
4
3
2

2

4
2
2
crappie
2
crap
36
1
4
3
2

2

4
4
2
cranky
2
crankshaft
2
crankcase
2
crank
36
1
4
3
2

2

4
2
2
cranium
2
crania
36
1
4
3
2

2
ik
4
6
2
Cranston
2
cranny
2
Cranford
2
crane
2
Crandall
2
cranberry
36
1
4
3
2

2

4
3
2
cramp
2
Cramer
2
cram
36
1
4
3
2

2

4
2
2
craggy
2
crag
36
1
4
3
2
e
2

4
2
2
craftsperson
2
craftspeople
36
1
4
3
2

2

4
2
2
craftsmen
2
craftsman
36
1
4
3
2

2
mp
4
0
36
1
4
3
2
t
2
s
4
2
2
crafty
2
craft
36
1
4
3
2
k
2

4
3
2
crackpot
2
crackle
2
crack
36
1
4
3
2

2

4
2
2
crabapple
2
crab
36
1
4
3
2

2
aeiouy
4
1
2
CRT
36
1
4
3
2

2

4
2
2
cpu
2
CPA
36
1
4
3
2

2

4
2
2
cozy
2
cozen
36
1
4
3
2

2

4
3
2
coypu
2
coyote
2
coy
36
1
4
3
2

2

4
2
2
coxcomb
2
cox
36
1
4
3
2

2

4
3
2
cowpox
2
cowpony
2
cowpoke
36
1
4
3
2

2
o
4
2
2
cowpunch
2
cowpea
36
1
4
3
2

2

4
2
2
cowmen
2
cowman
36
1
4
3
2

2

4
2
2
cowlick
2
cowl
36
1
4
3
2

2

4
3
2
cowhide
2
cowherd
2
cowhand
36
1
4
3
2

2

4
3
2
cowboy
2
cowbird
2
cowbell
36
1
4
3
2
d
2

4
2
2
cowardice
2
coward
36
1
4
3
2

2
r
4
1
2
Cowan
36
1
4
3
2

2
abhlmp
4
4
2
cowslip
2
cowry
2
coworker
2
cow
36
1
4
3
2

2

4
2
2
covetous
2
covet
36
1
4
3
2

2

4
2
2
coverall
2
coverage
36
1
4
3
2

2
a
4
5
2
covering
2
covered
2
covert
2
coverlet
2
cover
36
1
4
3
2

2

4
3
2
Coventry
2
covenant
2
coven
36
1
4
3
2

2
nrt
4
1
2
cove
36
1
4
3
2

2
r
4
1
2
covalent
36
1
4
3
2
a
2

4
2
2
covariate
2
covariant
36
1
4
3
2

2
i
4
1
2
covary
36
1
4
3
2

2
ae
4
0
36
1
4
3
2

2

4
2
2
cousin
2
couscous
36
1
4
3
2

2

4
2
2
courtesy
2
courtesan
36
1
4
3
2

2
s
4
1
2
courteous
36
1
4
3
2

2
e
4
6
2
courtyard
2
courtroom
2
Courtney
2
courtier
2
courthouse
2
court
36
1
4
3
2
ge
2

4
2
2
courageous
2
courage
36
1
4
3
2

2
at
4
2
2
course
2
courier
36
1
4
3
2

2

4
4
2
coupon
2
couple
2
coupe
2
coup
36
1
4
3
2

2

4
2
2
countywide
2
county
36
1
4
3
2

2

4
2
2
countrymen
2
countryman
36
1
4
3
2

2
m
4
3
2
countrywide
2
countryside
2
country
36
1
4
3
2

2
yi
4
0
36
1
4
3
2

2

4
2
2
countersunk
2
countersink
36
1
4
3
2
o
2

4
2
2
counterproposal
2
counterproductive
36
1
4
3
2
i
2

4
2
2
counterpoise
2
counterpoint
36
1
4
3
2

2
or
4
1
2
counterpart
36
1
4
3
2

2

4
2
2
countermen
2
counterman
36
1
4
3
2

2

4
2
2
counterflow
2
counterfeit
36
1
4
3
2

2

4
3
2
counterattack
2
counterargument
2
counteract
36
1
4
3
2

2
afmps
4
5
2
countervail
2
counterintuitive
2
counterexample
2
counterclockwise
2
counterbalance
36
1
4
3
2

2
r
4
1
2
countenance
36
1
4
3
2

2
ery
4
3
2
counting
2
countdown
2
count
36
1
4
3
2
el
2

4
2
2
counselor
2
counsel
36
1
4
3
2
il
2
mw
4
1
2
council
36
1
4
3
2
om
2

4
2
2
councilwomen
2
councilwoman
36
1
4
3
2

2

4
2
2
councilmen
2
councilman
36
1
4
3
2

2
cst
4
0
36
1
4
3
2

2

4
2
2
couldn't
2
could
36
1
4
3
2

2
d
4
2
2
Coulter
2
coulomb
36
1
4
3
2

2

4
2
2
cough
2
cougar
36
1
4
3
2

2
glnprs
4
2
2
couturier
2
couch
36
1
4
3
2
n
2

4
5
2
cottony
2
cottonwood
2
cottonseed
2
cottonmouth
2
cotton
36
1
4
3
2

2

4
2
2
cottage
2
cotta
36
1
4
3
2

2
ao
4
2
2
cotty
2
Cottrell
36
1
4
3
2

2
t
4
6
2
cotyledon
2
cotoneaster
2
cotman
2
cotillion
2
cotangent
2
cot
36
1
4
3
2

2

4
5
2
costs
2
costume
2
Costello
2
Costa
2
cost
36
1
4
3
2

2

4
3
2
cosmos
2
cosmopolitan
2
cosmology
36
1
4
3
2

2
o
4
2
2
cosmic
2
cosmetic
36
1
4
3
2

2

4
2
2
coset
2
cosec
36
1
4
3
2

2
emt
4
7
2
cosy
2
Cossack
2
cosponsor
2
cosine
2
cosh
2
Cosgrove
2
cos
36
1
4
3
2

2

4
3
2
Corvus
2
corvette
2
Corvallis
36
1
4
3
2

2

4
2
2
coruscate
2
corundum
36
1
4
3
2

2

4
2
2
cortex
2
cortege
36
1
4
3
2

2
e
4
2
2
Cortland
2
cortical
36
1
4
3
2

2

4
2
2
corruption
2
corruptible
36
1
4
3
2
t
2
i
4
1
2
corrupt
36
1
4
3
2

2
p
4
1
2
corrugate
36
1
4
3
2
i
2

4
2
2
corrosive
2
corrosion
36
1
4
3
2

2

4
2
2
corrodible
2
corrode
36
1
4
3
2
or
2

4
2
2
corroboree
2
corroborate
36
1
4
3
2

2
bds
4
0
36
1
4
3
2
nd
2

4
2
2
corrigendum
2
corrigenda
36
1
4
3
2

2
e
4
1
2
corrigible
36
1
4
3
2

2
g
4
1
2
corridor
36
1
4
3
2
pond
2

4
2
2
correspondent
2
correspond
36
1
4
3
2
t
2

4
2
2
corrector
2
correct
36
1
4
3
2

2
cs
4
1
2
correlate
36
1
4
3
2
l
2

4
2
2
corralled
2
corral
36
1
4
3
2

2
aeiou
4
0
36
1
4
3
2

2

4
2
2
corpuscular
2
corpus
36
1
4
3
2

2
s
4
1
2
corpulent
36
1
4
3
2

2

4
2
2
corpsmen
2
corpsman
36
1
4
3
2

2
m
4
2
2
corpse
2
corps
36
1
4
3
2

2
t
4
2
2
corporal
2
corpora
36
1
4
3
2
r
2
a
4
1
2
corporeal
36
1
4
3
2

2
osu
4
1
2
Corp
36
1
4
3
2

2

4
2
2
coronet
2
coroner
36
1
4
3
2

2

4
4
2
coronate
2
coronary
2
Coronado
2
corona
36
1
4
3
2

2
ae
4
0
36
1
4
3
2

2
n
4
2
2
coroutine
2
corollary
36
1
4
3
2

2

4
2
2
cornflower
2
cornfield
36
1
4
3
2

2

4
2
2
Cornelius
2
Cornelia
36
1
4
3
2

2
i
4
1
2
Cornell
36
1
4
3
2

2
lr
4
2
2
cornet
2
cornea
36
1
4
3
2

2
ef
4
8
2
corny
2
Cornwall
2
cornucopia
2
cornstarch
2
cornmeal
2
cornish
2
cornbread
2
corn
36
1
4
3
2

2

4
2
2
corkscrew
2
cork
36
1
4
3
2
th
2

4
2
2
Corinthian
2
Corinth
36
1
4
3
2

2
n
4
2
2
Coriolanus
2
coriander
36
1
4
3
2

2

4
2
2
Corey
2
core
36
1
4
3
2

2

4
2
2
cordite
2
cordial
36
1
4
3
2

2
i
4
4
2
corduroy
2
cordon
2
cordage
2
cord
36
1
4
3
2
e
2

4
2
2
Corbett
2
corbel
36
1
4
3
2
l
2

4
3
2
coralline
2
coralberry
2
coral
36
1
4
3
2

2
abdeiknoprtuv
4
3
2
corsage
2
cormorant
2
Corcoran
36
1
4
3
2
u
2

4
2
2
coquina
2
coquette
36
1
4
3
2

2

4
4
2
copywriter
2
copyright
2
copybook
2
copy
36
1
4
3
2

2

4
3
2
coproduct
2
coprinus
2
copra
36
1
4
3
2
er
2

4
4
2
coppery
2
copperhead
2
Copperfield
2
copperas
36
1
4
3
2
nic
2

4
2
2
Copernicus
2
Copernican
36
1
4
3
2

2
r
4
3
2
Copenhagen
2
Copeland
2
cope
36
1
4
3
2

2
epry
4
5
2
copter
2
copolymer
2
coplanar
2
copious
2
cop
36
1
4
3
2

2

4
3
2
coorespondence
2
Coors
2
coordinate
36
1
4
3
2

2

4
2
2
cooperate
2
coop
36
1
4
3
2

2

4
5
2
Coolidge
2
coolheaded
2
Cooley
2
coolant
2
cool
36
1
4
3
2

2

4
2
2
cookery
2
Cooke
36
1
4
3
2

2
e
4
4
2
cooky
2
cookie
2
cookbook
2
cook
36
1
4
3
2

2
klpr
4
3
2
coot
2
coon
2
coo
36
1
4
3
2

2

4
2
2
convulsive
2
convulsion
36
1
4
3
2
ls
2
i
4
1
2
convulse
36
1
4
3
2
t
2

4
2
2
convolution
2
convolute
36
1
4
3
2

2
u
4
1
2
convolve
36
1
4
3
2

2
l
4
3
2
convoy
2
convoke
2
convocate
36
1
4
3
2

2

4
3
2
convivial
2
convince
2
convict
36
1
4
3
2

2

4
3
2
conveyor
2
conveyance
2
convey
36
1
4
3
2

2

4
2
2
convertible
2
convert
36
1
4
3
2

2

4
2
2
conversation
2
conversant
36
1
4
3
2

2
a
4
2
2
conversion
2
converse
36
1
4
3
2
e
2

4
2
2
convergent
2
converge
36
1
4
3
2

2
gst
4
0
36
1
4
3
2

2

4
2
2
convention
2
convent
36
1
4
3
2

2
ti
4
1
2
convene
36
1
4
3
2

2
nry
4
2
2
convex
2
convect
36
1
4
3
2

2
l
4
1
2
Convair
36
1
4
3
2
esce
2

4
2
2
convalescent
2
convalesce
36
1
4
3
2

2
aeiou
4
0
36
1
4
3
2

2

4
2
2
contusion
2
contumacy
36
1
4
3
2

2

4
2
2
controversy
2
controversial
36
1
4
3
2
er
2
s
4
1
2
controvertible
36
1
4
3
2

2
l
4
1
2
control
36
1
4
3
2

2

4
2
2
controller
2
controlled
36
1
4
3
2

2
e
4
2
2
controlling
2
controllable
36
1
4
3
2

2
lv
4
0
36
1
4
3
2

2

4
2
2
contrive
2
contrivance
36
1
4
3
2

2

4
2
2
contrition
2
contrite
36
1
4
3
2
ut
2
o
4
2
2
contribution
2
contribute
36
1
4
3
2
r
2

4
2
2
contributory
2
contributor
36
1
4
3
2

2
btv
4
0
36
1
4
3
2

2
bcdlrv
4
2
2
contrast
2
contraption
36
1
4
3
2
n
2

4
2
2
contravention
2
contravene
36
1
4
3
2

2
e
4
1
2
contravariant
36
1
4
3
2

2

4
2
2
contrary
2
contrariety
36
1
4
3
2

2

4
2
2
contralto
2
contralateral
36
1
4
3
2
tin
2

4
2
2
contradistinguish
2
contradistinct
36
1
4
3
2
t
2

4
2
2
contradictory
2
contradict
36
1
4
3
2
i
2
cs
4
0
36
1
4
3
2

2

4
4
2
contracts
2
contractual
2
contractor
2
contract
36
1
4
3
2
pti
2

4
2
2
contraceptive
2
contraception
36
1
4
3
2

2
et
4
0
36
1
4
3
2
a
2

4
2
2
contrabass
2
contraband
36
1
4
3
2

2
aio
4
1
2
contretemps
36
1
4
3
2

2

4
2
2
contour
2
contort
36
1
4
3
2

2

4
2
2
continuous
2
continuo
36
1
4
3
2

2

4
4
2
continuation
2
continuant
2
continual
2
continua
36
1
4
3
2

2
aoei
4
1
2
continuum
36
1
4
3
2
nt
2

4
2
2
continental
2
continent
36
1
4
3
2

2
eu
4
1
2
contingent
36
1
4
3
2
u
2

4
2
2
contiguous
2
contiguity
36
1
4
3
2

2
gn
4
0
36
1
4
3
2
t
2

4
2
2
contextual
2
context
36
1
4
3
2
t
2

4
2
2
contestant
2
contest
36
1
4
3
2
o
2

4
2
2
contentious
2
contention
36
1
4
3
2

2
i
4
2
2
contents
2
content
36
1
4
3
2

2
t
4
1
2
contend
36
1
4
3
2
p
2
ot
4
1
2
contemplate
36
1
4
3
2

2

4
3
2
contemptuous
2
contemptible
2
contempt
36
1
4
3
2
ra
2

4
2
2
contemporary
2
contemporaneous
36
1
4
3
2

2
mnsx
4
0
36
1
4
3
2

2
gmi
4
1
2
contact
36
1
4
3
2
ina
2

4
2
2
contaminate
2
contaminant
36
1
4
3
2
io
2

4
2
2
contagious
2
contagion
36
1
4
3
2

2
aeioru
4
0
36
1
4
3
2
ti
2

4
2
2
consumptive
2
consumption
36
1
4
3
2

2
pe
4
3
2
consumable
2
consuming
2
consummate
36
1
4
3
2

2
at
4
1
2
consul
36
1
4
3
2
i
2

4
2
2
consultative
2
consultation
36
1
4
3
2

2
t
4
1
2
consultant
36
1
4
3
2

2
a
4
1
2
consult
36
1
4
3
2

2

4
2
2
consulate
2
consular
36
1
4
3
2

2
lm
4
0
36
1
4
3
2
t
2
i
4
2
2
constructor
2
construct
36
1
4
3
2

2
c
4
1
2
construe
36
1
4
3
2
ct
2

4
2
2
constrictor
2
constrict
36
1
4
3
2
in
2

4
2
2
constraint
2
constrain
36
1
4
3
2

2
aiu
4
0
36
1
4
3
2

2

4
2
2
constitutive
2
constitution
36
1
4
3
2

2
i
4
1
2
constitute
36
1
4
3
2
tu
2
t
4
1
2
constituent
36
1
4
3
2

2

4
2
2
consternate
2
constellate
36
1
4
3
2
nt
2
i
4
1
2
constant
36
1
4
3
2
n
2

4
2
2
Constantinople
2
Constantine
36
1
4
3
2

2
aeir
4
0
36
1
4
3
2

2
t
4
1
2
conspiracy
36
1
4
3
2
or
2

4
2
2
conspiratorial
2
conspirator
36
1
4
3
2

2
a
4
1
2
conspire
36
1
4
3
2
i
2
r
4
1
2
conspicuous
36
1
4
3
2
t
2

4
2
2
consortium
2
consort
36
1
4
3
2
ant
2

4
2
2
consonantal
2
consonant
36
1
4
3
2

2

4
3
2
consolidate
2
console
2
consolation
36
1
4
3
2

2
lnr
4
0
36
1
4
3
2
t
2

4
2
2
consistent
2
consist
36
1
4
3
2
n
2

4
3
2
consignor
2
consignee
2
consign
36
1
4
3
2
er
2

4
4
2
considering
2
considered
2
considerate
2
consider
36
1
4
3
2

2
dgs
4
0
36
1
4
3
2
t
2
io
4
0
36
1
4
3
2
r
2

4
2
2
conservatory
2
conservator
36
1
4
3
2

2

4
3
2
conservative
2
conservatism
2
conservation
36
1
4
3
2
v
2
a
4
1
2
conserve
36
1
4
3
2
uent
2

4
2
2
consequential
2
consequent
36
1
4
3
2

2

4
2
2
consent
2
consensus
36
1
4
3
2

2

4
2
2
consecutive
2
consecrate
36
1
4
3
2

2
cnqr
4
0
36
1
4
3
2
ipt
2

4
2
2
conscription
2
conscript
36
1
4
3
2

2
eo
4
0
36
1
4
3
2

2

4
2
2
conscious
2
conscionable
36
1
4
3
2
n
2

4
2
2
conscientious
2
conscience
36
1
4
3
2

2
ir
4
0
36
1
4
3
2
nguine
2

4
2
2
consanguineous
2
consanguine
36
1
4
3
2

2
aceioptu
4
0
36
1
4
3
2
a
2

4
2
2
Conrail
2
Conrad
36
1
4
3
2

2
r
4
1
2
conquest
36
1
4
3
2

2

4
2
2
conqueror
2
conquer
36
1
4
3
2
u
2
e
4
1
2
conquistador
36
1
4
3
2
ti
2

4
2
2
connotative
2
connotation
36
1
4
3
2

2
a
4
1
2
connote
36
1
4
3
2

2
t
4
2
2
Connors
2
connoisseur
36
1
4
3
2

2

4
2
2
connive
2
connivance
36
1
4
3
2

2
v
4
1
2
Connie
36
1
4
3
2
t
2
i
4
2
2
connector
2
connect
36
1
4
3
2

2
c
4
1
2
Conner
36
1
4
3
2

2
eio
4
3
2
connubial
2
Connally
2
conn
36
1
4
3
2
ct
2

4
2
2
conjuncture
2
conjunct
36
1
4
3
2
a
2

4
3
2
conjugate
2
conjugacy
2
conjugal
36
1
4
3
2

2
gn
4
1
2
conjure
36
1
4
3
2
in
2

4
2
2
conjoint
2
conjoin
36
1
4
3
2
ctur
2

4
2
2
conjecture
2
conjectural
36
1
4
3
2

2
eou
4
0
36
1
4
3
2
er
2

4
2
2
coniferous
2
conifer
36
1
4
3
2

2
f
4
1
2
conic
36
1
4
3
2
om
2

4
2
2
congresswomen
2
congresswoman
36
1
4
3
2

2

4
2
2
congressmen
2
congressman
36
1
4
3
2
s
2
mw
4
2
2
congressional
2
congress
36
1
4
3
2

2
s
4
1
2
congregate
36
1
4
3
2
tulat
2

4
2
2
congratulatory
2
congratulate
36
1
4
3
2

2
ae
4
1
2
congruent
36
1
4
3
2

2

4
2
2
Congolese
2
Congo
36
1
4
3
2

2
ns
4
1
2
congeal
36
1
4
3
2

2

4
2
2
congestive
2
congestion
36
1
4
3
2
t
2
i
4
1
2
congest
36
1
4
3
2

2

4
2
2
congenital
2
congenial
36
1
4
3
2

2
i
4
1
2
congener
36
1
4
3
2

2
eor
4
1
2
conglomerate
36
1
4
3
2

2

4
2
2
confusion
2
confuse
36
1
4
3
2
i
2

4
2
2
Confucius
2
Confucian
36
1
4
3
2

2
cs
4
1
2
confute
36
1
4
3
2
nt
2

4
2
2
confrontation
2
confront
36
1
4
3
2

2
o
4
1
2
confrere
36
1
4
3
2

2

4
3
2
conformation
2
conformance
2
conformal
36
1
4
3
2
m
2
a
4
1
2
conform
36
1
4
3
2

2
r
4
2
2
confound
2
confocal
36
1
4
3
2

2

4
3
2
confluent
2
conflict
2
conflagrate
36
1
4
3
2

2

4
2
2
confiscatory
2
confiscate
36
1
4
3
2
ca
2
t
4
1
2
confiscable
36
1
4
3
2
t
2

4
2
2
confirmatory
2
confirmation
36
1
4
3
2
m
2
a
4
1
2
confirm
36
1
4
3
2
ur
2

4
2
2
configure
2
configuration
36
1
4
3
2

2
ae
4
0
36
1
4
3
2
t
2

4
2
2
confidential
2
confident
36
1
4
3
2

2
n
4
1
2
confide
36
1
4
3
2
nt
2

4
2
2
confidante
2
confidant
36
1
4
3
2

2
dgrs
4
1
2
confine
36
1
4
3
2
s
2

4
3
2
confessor
2
confession
2
confess
36
1
4
3
2

2

4
3
2
conferring
2
conferred
2
conferrable
36
1
4
3
2

2

4
2
2
conference
2
conferee
36
1
4
3
2

2
er
4
1
2
confer
36
1
4
3
2
era
2

4
2
2
confederate
2
confederacy
36
1
4
3
2
t
2

4
2
2
confectionery
2
confect
36
1
4
3
2

2
cdrs
4
0
36
1
4
3
2

2
eiloru
4
1
2
confabulate
36
1
4
3
2

2

4
4
2
coney
2
Conestoga
2
coneflower
2
cone
36
1
4
3
2

2
t
4
2
2
conducive
2
conduce
36
1
4
3
2

2

4
3
2
conductor
2
conductance
2
conduct
36
1
4
3
2

2
c
4
1
2
conduit
36
1
4
3
2

2

4
2
2
condone
2
condolence
36
1
4
3
2

2

4
2
2
condition
2
condiment
36
1
4
3
2

2
mns
4
0
36
1
4
3
2
cen
2

4
2
2
condescension
2
condescend
36
1
4
3
2
s
2

4
3
2
condensible
2
condense
2
condensate
36
1
4
3
2
n
2
a
4
1
2
condemn
36
1
4
3
2
t
2

4
2
2
condemnatory
2
condemnate
36
1
4
3
2

2
eiou
4
0
36
1
4
3
2

2

4
2
2
concurrent
2
concurred
36
1
4
3
2

2
e
4
1
2
concurring
36
1
4
3
2

2
r
4
1
2
concur
36
1
4
3
2

2
r
4
2
2
concussion
2
concubine
36
1
4
3
2
et
2

4
2
2
concretion
2
concrete
36
1
4
3
2
d
2

4
2
2
concordant
2
concord
36
1
4
3
2

2
r
4
3
2
concourse
2
concomitant
2
concoct
36
1
4
3
2
i
2

4
2
2
conclusive
2
conclusion
36
1
4
3
2

2
s
4
1
2
conclude
36
1
4
3
2

2
u
4
1
2
conclave
36
1
4
3
2

2

4
2
2
concision
2
concise
36
1
4
3
2
iat
2

4
2
2
conciliatory
2
conciliate
36
1
4
3
2

2
ls
4
1
2
concierge
36
1
4
3
2
sion
2

4
2
2
concessionaire
2
concession
36
1
4
3
2

2

4
2
2
concertina
2
concerti
36
1
4
3
2

2
i
4
3
2
concerto
2
concertmaster
2
concert
36
1
4
3
2

2
t
4
1
2
concern
36
1
4
3
2
t
2

4
3
2
conceptual
2
conception
2
concept
36
1
4
3
2
tr
2

4
2
2
concentric
2
concentrate
36
1
4
3
2

2

4
2
2
conceive
2
conceit
36
1
4
3
2

2
inprs
4
2
2
concede
2
conceal
36
1
4
3
2

2

4
2
2
concave
2
concatenate
36
1
4
3
2

2
aeiloru
4
1
2
conch
36
1
4
3
2

2

4
2
2
Conant
2
Conakry
36
1
4
3
2

2
acdefgijnqrstv
4
6
2
cony
2
Conway
2
conundrum
2
Conley
2
Conklin
2
con
36
1
4
3
2

2
ea
4
0
36
1
4
3
2
s
2
i
4
1
2
compulsory
36
1
4
3
2

2

4
2
2
compulsive
2
compulsion
36
1
4
3
2

2
lt
4
0
36
1
4
3
2

2

4
2
2
comptroller
2
Compton
36
1
4
3
2

2
hs
4
0
36
1
4
3
2

2

4
3
2
compressive
2
compression
2
compressible
36
1
4
3
2
s
2
i
4
2
2
compressor
2
compress
36
1
4
3
2
en
2
s
4
1
2
comprehend
36
1
4
3
2
i
2

4
3
2
comprehensive
2
comprehension
2
comprehensible
36
1
4
3
2

2
e
4
2
2
compromise
2
comprise
36
1
4
3
2
t
2

4
3
2
compositor
2
composition
2
composite
36
1
4
3
2

2
i
4
3
2
composure
2
compost
2
compose
36
1
4
3
2
ent
2

4
2
2
componentry
2
component
36
1
4
3
2

2
ns
4
3
2
compound
2
compote
2
comport
36
1
4
3
2
ent
2

4
2
2
complimentary
2
compliment
36
1
4
3
2

2

4
2
2
complicity
2
complicate
36
1
4
3
2

2
cm
4
2
2
compline
2
compliant
36
1
4
3
2

2

4
2
2
complexion
2
complex
36
1
4
3
2

2
e
4
1
2
completion
36
1
4
3
2
ent
2
a
4
1
2
complement
36
1
4
3
2

2

4
2
2
complementary
2
complementarity
36
1
4
3
2

2
r
4
1
2
complementation
36
1
4
3
2

2
mtx
4
0
36
1
4
3
2

2
i
4
1
2
complacent
36
1
4
3
2

2

4
3
2
complaint
2
complainant
2
complain
36
1
4
3
2

2
n
4
1
2
complaisant
36
1
4
3
2

2
aei
4
1
2
comply
36
1
4
3
2
l
2

4
2
2
compile
2
compilation
36
1
4
3
2

2

4
2
2
competitive
2
competition
36
1
4
3
2
t
2
i
4
1
2
competitor
36
1
4
3
2

2

4
2
2
competent
2
compete
36
1
4
3
2

2
ei
4
0
36
1
4
3
2

2

4
2
2
compensatory
2
compensate
36
1
4
3
2
a
2
t
4
1
2
compensable
36
1
4
3
2
i
2

4
2
2
compendium
2
compendia
36
1
4
3
2

2
ds
4
0
36
1
4
3
2

2
l
4
1
2
compel
36
1
4
3
2

2

4
3
2
compelling
2
compelled
2
compellable
36
1
4
3
2

2
lnt
4
0
36
1
4
3
2

2
cnrst
4
1
2
Compagnie
36
1
4
3
2

2

4
2
2
compatriot
2
compatible
36
1
4
3
2
on
2

4
2
2
compassionate
2
compassion
36
1
4
3
2
s
2
i
4
1
2
compass
36
1
4
3
2
t
2

4
2
2
comparator
2
comparative
36
1
4
3
2

2
a
4
3
2
compartment
2
comparison
2
compare
36
1
4
3
2

2
o
4
1
2
companies
36
1
4
3
2

2
i
4
1
2
company
36
1
4
3
2
t
2

4
2
2
compactify
2
compact
36
1
4
3
2

2
aeilortu
4
0
36
1
4
3
2

2

4
2
2
commute
2
commutate
36
1
4
3
2

2
i
4
2
2
commune
2
communal
36
1
4
3
2
a
2
t
4
2
2
communicant
2
communicable
36
1
4
3
2

2
c
4
3
2
community
2
communique
2
communion
36
1
4
3
2

2
nt
4
0
36
1
4
3
2
eal
2

4
2
2
commonwealth
2
commonweal
36
1
4
3
2

2
w
4
3
2
commonplace
2
commonality
2
common
36
1
4
3
2

2
i
4
1
2
commodore
36
1
4
3
2

2

4
2
2
commodity
2
commodious
36
1
4
3
2

2
dn
4
1
2
commotion
36
1
4
3
2
om
2

4
2
2
committeewomen
2
committeewoman
36
1
4
3
2

2

4
2
2
committeemen
2
committeeman
36
1
4
3
2

2
mw
4
2
2
committees
2
committee
36
1
4
3
2

2
e
4
1
2
committed
36
1
4
3
2

2

4
2
2
committal
2
committable
36
1
4
3
2

2
ae
4
1
2
committing
36
1
4
3
2

2
t
4
1
2
commit
36
1
4
3
2
r
2

4
2
2
commissary
2
commissariat
36
1
4
3
2

2
a
4
1
2
commission
36
1
4
3
2

2
s
4
1
2
commiserate
36
1
4
3
2

2
st
4
1
2
commingle
36
1
4
3
2
c
2

4
2
2
commercial
2
commerce
36
1
4
3
2

2

4
2
2
commentator
2
commentary
36
1
4
3
2

2
a
4
1
2
comment
36
1
4
3
2
ura
2

4
2
2
commensurate
2
commensurable
36
1
4
3
2

2
a
4
1
2
commend
36
1
4
3
2
t
2

4
2
2
commendatory
2
commendation
36
1
4
3
2

2
dst
4
0
36
1
4
3
2

2
nr
4
1
2
commemorate
36
1
4
3
2

2
n
4
1
2
comma
36
1
4
3
2
d
2

4
4
2
commando
2
commandeer
2
commandant
2
command
36
1
4
3
2

2
aeiou
4
0
36
1
4
3
2

2
n
4
1
2
comic
36
1
4
3
2

2

4
3
2
cometh
2
cometary
2
comet
36
1
4
3
2

2

4
2
2
--
2
-
36
1
4
3
2

2

4
2
2
comedy
2
comedian
36
1
4
3
2

2
dt
4
2
2
comeback
2
come
36
1
4
3
2
sti
2

4
2
2
combustion
2
combustible
36
1
4
3
2
t
2
o
4
1
2
combinate
36
1
4
3
2
ri
2

4
2
2
combinatoric
2
combinatorial
36
1
4
3
2
n
2
a
4
1
2
combine
36
1
4
3
2
t
2

4
3
2
combatted
2
combatant
2
combat
36
1
4
3
2

2
aiu
4
1
2
comb
36
1
4
3
2

2

4
3
2
comatose
2
Comanche
2
coma
36
1
4
3
2

2
abeimp
4
2
2
comrade
2
comfort
36
1
4
3
2

2

4
2
2
columnar
2
column
36
1
4
3
2

2
i
4
1
2
Columbus
36
1
4
3
2

2

4
2
2
columbine
2
Columbia
36
1
4
3
2
m
2
bn
4
0
36
1
4
3
2

2

4
3
2
coltsfoot
2
coltish
2
colt
36
1
4
3
2
s
2

4
4
2
colossus
2
colossi
2
Colosseum
2
colossal
36
1
4
3
2

2
t
4
1
2
Colorado
36
1
4
3
2

2

4
2
2
coloratura
2
colorate
36
1
4
3
2

2
a
4
3
2
colors
2
colorimeter
2
color
36
1
4
3
2

2

4
2
2
colonist
2
colonial
36
1
4
3
2

2
i
4
4
2
colony
2
colonnade
2
colonel
2
colon
36
1
4
3
2
b
2

4
2
2
Colombo
2
Colombia
36
1
4
3
2

2
mnrs
4
1
2
Cologne
36
1
4
3
2

2

4
2
2
collusion
2
collude
36
1
4
3
2

2
a
4
1
2
colloquium
36
1
4
3
2

2

4
2
2
colloquial
2
colloquia
36
1
4
3
2

2
i
4
1
2
colloquy
36
1
4
3
2

2
u
4
1
2
Colloq
36
1
4
3
2

2
q
4
2
2
colloidal
2
collocation
36
1
4
3
2

2

4
2
2
Collins
2
collinear
36
1
4
3
2

2

4
2
2
Collier
2
collie
36
1
4
3
2

2
en
4
3
2
collision
2
collimate
2
collide
36
1
4
3
2
a
2

4
2
2
collegiate
2
collegian
36
1
4
3
2

2
i
4
1
2
college
36
1
4
3
2
t
2

4
3
2
collector
2
collectible
2
collect
36
1
4
3
2

2
cg
4
2
2
collet
2
colleague
36
1
4
3
2

2
gprt
4
1
2
collaborate
36
1
4
3
2
e
2

4
2
2
collateral
2
collate
36
1
4
3
2

2

4
3
2
collard
2
collarbone
2
collar
36
1
4
3
2
s
2

4
2
2
collapsible
2
collapse
36
1
4
3
2
e
2

4
2
2
collagen
2
collage
36
1
4
3
2

2
aeiou
4
0
36
1
4
3
2

2

4
3
2
coliseum
2
coliform
2
colicky
36
1
4
3
2

2

4
5
2
coleus
2
Colette
2
Coleridge
2
Coleman
2
Cole
36
1
4
3
2

2

4
3
2
colatitude
2
colander
2
cola
36
1
4
3
2

2
aeilotu
4
5
2
colza
2
Colgate
2
cold
2
Colby
2
col
36
1
4
3
2
t
2

4
2
2
coincidental
2
coincident
36
1
4
3
2
ide
2
n
4
1
2
coincide
36
1
4
3
2

2
c
4
2
2
coinage
2
coin
36
1
4
3
2

2
n
4
2
2
coil
2
coiffure
36
1
4
3
2

2

4
3
2
cohosh
2
cohort
2
cohomology
36
1
4
3
2

2
rs
4
1
2
Cohen
36
1
4
3
2
i
2

4
2
2
cohesive
2
cohesion
36
1
4
3
2
e
2

4
2
2
coherent
2
cohere
36
1
4
3
2

2
eo
4
1
2
Cohn
36
1
4
3
2
a
2

4
2
2
cognizant
2
cognizable
36
1
4
3
2
i
2

4
2
2
cognitive
2
cognition
36
1
4
3
2

2
tz
4
0
36
1
4
3
2

2

4
2
2
cognate
2
cognac
36
1
4
3
2

2
ai
4
0
36
1
4
3
2

2
n
4
3
2
cogitate
2
cogent
2
cog
36
1
4
3
2

2

4
3
2
coffeepot
2
coffeecup
2
coffee
36
1
4
3
2

2
e
4
2
2
Coffey
2
coffer
36
1
4
3
2

2
e
4
2
2
Coffman
2
coffin
36
1
4
3
2

2
f
4
1
2
cofactor
36
1
4
3
2
st
2

4
2
2
coexistent
2
coexist
36
1
4
3
2

2
i
4
1
2
coextensive
36
1
4
3
2

2

4
3
2
coercive
2
coercion
2
coercible
36
1
4
3
2
c
2
i
4
1
2
coerce
36
1
4
3
2

2

4
3
2
coeducation
2
coeditor
2
coed
36
1
4
3
2

2
drx
4
2
2
coequal
2
coefficient
36
1
4
3
2

2

4
2
2
codon
2
codomain
36
1
4
3
2

2

4
2
2
codify
2
codicil
36
1
4
3
2

2

4
5
2
codeword
2
codetermine
2
codeposit
2
codebreak
2
code
36
1
4
3
2

2

4
2
2
coddle
2
Coddington
36
1
4
3
2

2
deio
4
5
2
Cody
2
codpiece
2
codfish
2
coda
2
cod
36
1
4
3
2

2

4
4
2
cocoon
2
coconut
2
cocoa
2
coco
36
1
4
3
2
e
2

4
3
2
cockleshell
2
cocklebur
2
cockle
36
1
4
3
2

2
l
4
9
2
cocky
2
cocktail
2
cocksure
2
cockroach
2
cockpit
2
cockeye
2
cockcrow
2
cockatoo
2
cock
36
1
4
3
2
an
2

4
2
2
Cochrane
2
Cochran
36
1
4
3
2

2
r
4
2
2
cochlea
2
cochineal
36
1
4
3
2

2

4
2
2
cocaine
2
coca
36
1
4
3
2

2
ahko
4
1
2
coccidiosis
36
1
4
3
2
e
2

4
2
2
cobblestone
2
cobble
36
1
4
3
2

2
l
4
1
2
Cobb
36
1
4
3
2

2
b
4
4
2
cobweb
2
cobra
2
Cobol
2
cobalt
36
1
4
3
2

2

4
2
2
coaxial
2
coax
36
1
4
3
2

2

4
3
2
coattail
2
Coates
2
coat
36
1
4
3
2
t
2

4
3
2
coastline
2
coastal
2
coast
36
1
4
3
2
se
2

4
2
2
coarsen
2
coarse
36
1
4
3
2
sce
2

4
2
2
coalescent
2
coalesce
36
1
4
3
2

2
e
4
2
2
coalition
2
coal
36
1
4
3
2
ula
2

4
2
2
coagulate
2
coagulable
36
1
4
3
2
h
2
m
4
2
2
coachwork
2
coach
36
1
4
3
2

2

4
2
2
coachmen
2
coachman
36
1
4
3
2

2
cglrstx
4
2
2
coauthor
2
coadjutor
36
1
4
3
2

2
abcdefghilmnopqrstuvwxyz
4
2
2
coke
2
CO
36
1
4
3
2

2

4
2
2
Clytemnestra
2
Clyde
36
1
4
3
2

2

4
2
2
clutter
2
clutch
36
1
4
3
2

2

4
2
2
clumsy
2
clump
36
1
4
3
2

2

4
3
2
clubroom
2
clubhouse
2
club
36
1
4
3
2

2
bmt
4
5
2
cluster
2
clung
2
Cluj
2
clue
2
cluck
36
1
4
3
2

2

4
3
2
cloudy
2
cloudburst
2
cloud
36
1
4
3
2

2
d
4
1
2
clout
36
1
4
3
2

2

4
2
2
clothesmen
2
clothesman
36
1
4
3
2

2
m
4
3
2
clothesline
2
clotheshorse
2
clothesbrush
36
1
4
3
2

2
s
4
1
2
clothe
36
1
4
3
2

2
e
4
4
2
Clotho
2
clothier
2
clothbound
2
cloth
36
1
4
3
2

2
h
4
2
2
cloture
2
clot
36
1
4
3
2

2

4
5
2
closed
2
closes
2
closeup
2
closet
2
close
36
1
4
3
2

2
e
4
2
2
closing
2
closure
36
1
4
3
2

2

4
2
2
clonic
2
clone
36
1
4
3
2

2

4
2
2
clogging
2
clog
36
1
4
3
2

2

4
2
2
cloddish
2
clod
36
1
4
3
2

2

4
3
2
clockwork
2
clockwise
2
clockwatcher
36
1
4
3
2
k
2
w
4
1
2
clock
36
1
4
3
2
k
2

4
2
2
cloakroom
2
cloak
36
1
4
3
2

2
acdgnstu
4
6
2
cloy
2
clown
2
clove
2
clomp
2
cloister
2
clobber
36
1
4
3
2

2
b
4
1
2
clip
36
1
4
3
2

2

4
2
2
Clinton
2
Clint
36
1
4
3
2
c
2

4
2
2
clinician
2
clinic
36
1
4
3
2

2

4
2
2
clinging
2
cling
36
1
4
3
2

2
git
4
2
2
clink
2
clinch
36
1
4
3
2

2
t
4
2
2
climax
2
climactic
36
1
4
3
2

2

4
3
2
climatology
2
climatic
2
climate
36
1
4
3
2

2
a
4
2
2
clime
2
climb
36
1
4
3
2

2

4
3
2
Clifford
2
cliffhang
2
cliff
36
1
4
3
2

2
f
4
1
2
Clifton
36
1
4
3
2
nt
2

4
2
2
clientele
2
client
36
1
4
3
2

2

4
2
2
click
2
cliche
36
1
4
3
2

2
cefmnp
4
4
2
Clive
2
clitoris
2
clique
2
Clio
36
1
4
3
2
e
2

4
2
2
clever
2
Cleveland
36
1
4
3
2
y
2
m
4
1
2
clergy
36
1
4
3
2

2

4
2
2
clergymen
2
clergyman
36
1
4
3
2

2
g
4
2
2
clerk
2
cleric
36
1
4
3
2

2

4
2
2
Clemson
2
clement
36
1
4
3
2

2
nrv
4
1
2
cleat
36
1
4
3
2

2

4
2
2
cleave
2
cleavage
36
1
4
3
2

2

4
4
2
Clearwater
2
clearheaded
2
clearance
2
clear
36
1
4
3
2

2

4
3
2
cleanup
2
cleanse
2
clean
36
1
4
3
2

2
amrv
4
2
2
clench
2
cleft
36
1
4
3
2

2
dimnprstuy
4
1
2
claw
36
1
4
3
2

2

4
2
2
Clayton
2
clay
36
1
4
3
2
rophobi
2

4
2
2
claustrophobic
2
claustrophobia
36
1
4
3
2

2

4
2
2
Clausen
2
clause
36
1
4
3
2

2
et
4
2
2
Clausius
2
Claus
36
1
4
3
2

2
i
4
1
2
Claude
36
1
4
3
2

2

4
2
2
Claudio
2
Claudia
36
1
4
3
2

2
ds
4
0
36
1
4
3
2
ter
2

4
2
2
clattery
2
clatter
36
1
4
3
2

2

4
2
2
classify
2
classificatory
36
1
4
3
2

2
f
4
1
2
classic
36
1
4
3
2

2
i
4
4
2
classy
2
classroom
2
classmate
2
class
36
1
4
3
2

2
s
4
2
2
clasp
2
clash
36
1
4
3
2

2

4
2
2
Clarke
2
Clark
36
1
4
3
2

2

4
3
2
clarity
2
clarinet
2
clarify
36
1
4
3
2

2

4
2
2
Clarendon
2
Clarence
36
1
4
3
2

2
n
4
3
2
claret
2
Claremont
2
Clare
36
1
4
3
2

2
eik
4
1
2
Clara
36
1
4
3
2

2

4
3
2
Clapeyron
2
clapboard
2
clap
36
1
4
3
2

2

4
5
2
clannish
2
clank
2
clang
2
clandestine
2
clan
36
1
4
3
2

2

4
5
2
clamshell
2
clamp
2
clammy
2
clamber
2
clam
36
1
4
3
2

2

4
2
2
clairvoyant
2
Claire
36
1
4
3
2

2

4
2
2
claimant
2
claim
36
1
4
3
2

2
mr
4
0
36
1
4
3
2

2

4
2
2
cladophora
2
clad
36
1
4
3
2

2
aeiouy
4
0
36
1
4
3
2

2

4
2
2
civilian
2
civil
36
1
4
3
2

2
l
4
1
2
civic
36
1
4
3
2

2
i
4
1
2
civet
36
1
4
3
2

2

4
3
2
citywide
2
cityscape
2
city
36
1
4
3
2

2

4
2
2
citron
2
Citroen
36
1
4
3
2

2
o
4
3
2
citrus
2
citric
2
citrate
36
1
4
3
2

2
z
4
1
2
cities
36
1
4
3
2

2

4
2
2
citation
2
citadel
36
1
4
3
2

2
airy
4
2
2
cite
2
cit
36
1
4
3
2
ent
2

4
3
2
circumvented
2
circumvention
2
circumvent
36
1
4
3
2
an
2
c
4
1
2
circumstantial
36
1
4
3
2

2

4
2
2
circumsphere
2
circumspect
36
1
4
3
2
ri
2

4
2
2
circumscription
2
circumscribe
36
1
4
3
2

2
cpt
4
0
36
1
4
3
2
ren
2

4
2
2
circumferential
2
circumference
36
1
4
3
2

2
e
4
1
2
circumflex
36
1
4
3
2
i
2
s
4
1
2
circumcircle
36
1
4
3
2

2

4
2
2
circumcision
2
circumcise
36
1
4
3
2

2
cfsv
4
2
2
circumpolar
2
circumlocution
36
1
4
3
2

2

4
2
2
circulatory
2
circulate
36
1
4
3
2
a
2
t
4
2
2
circular
2
circulant
36
1
4
3
2
t
2

4
3
2
circuitry
2
circuitous
2
circuit
36
1
4
3
2

2
ilm
4
1
2
circus
36
1
4
3
2
e
2

4
2
2
circlet
2
circle
36
1
4
3
2
c
2
lu
4
2
2
Circe
2
circa
36
1
4
3
2
a
2

4
2
2
cinnamon
2
cinnabar
36
1
4
3
2
a
2

4
2
2
cinematic
2
cinema
36
1
4
3
2

2
m
4
1
2
Cinerama
36
1
4
3
2
r
2

4
2
2
Cinderella
2
cinder
36
1
4
3
2

2
e
4
1
2
Cindy
36
1
4
3
2

2

4
2
2
Cincinnati
2
cinch
36
1
4
3
2

2
cden
4
1
2
cinquefoil
36
1
4
3
2
ia
2

4
2
2
ciliate
2
cilia
36
1
4
3
2
ar
2

4
2
2
cigarette
2
cigar
36
1
4
3
2
ro
2

4
2
2
Ciceronian
2
Cicero
36
1
4
3
2

2
e
4
1
2
cicada
36
1
4
3
2

2
cglnrtv
4
4
2
cistern
2
cipher
2
cider
2
CIA
36
1
4
3
2

2

4
2
2
chutney
2
chute
36
1
4
3
2
h
2
gimw
4
2
2
churchyard
2
church
36
1
4
3
2
om
2

4
2
2
churchwomen
2
churchwoman
36
1
4
3
2

2

4
2
2
churchmen
2
churchman
36
1
4
3
2
ll
2

4
2
2
Churchillian
2
Churchill
36
1
4
3
2
o
2

4
2
2
churchgoing
2
churchgoer
36
1
4
3
2

2
c
4
1
2
churn
36
1
4
3
2

2

4
2
2
chunky
2
chunk
36
1
4
3
2

2
k
4
1
2
Chungking
36
1
4
3
2

2

4
3
2
chump
2
chummy
2
chum
36
1
4
3
2

2

4
2
2
chugging
2
chug
36
1
4
3
2
k
2

4
3
2
chuckwalla
2
chuckle
2
chuck
36
1
4
3
2

2

4
2
2
chubby
2
chub
36
1
4
3
2

2
bcgmnrt
4
1
2
chuff
36
1
4
3
2
s
2

4
3
2
chrysolite
2
Chrysler
2
chrysanthemum
36
1
4
3
2
raph
2

4
2
2
chronography
2
chronograph
36
1
4
3
2

2
g
4
1
2
chronology
36
1
4
3
2
c
2

4
2
2
chronicle
2
chronic
36
1
4
3
2

2
io
4
0
36
1
4
3
2

2
ai
4
2
2
chromosphere
2
chrome
36
1
4
3
2

2

4
2
2
chromium
2
chromic
36
1
4
3
2
t
2
io
4
1
2
chromate
36
1
4
3
2
h
2

4
2
2
chromatography
2
chromatograph
36
1
4
3
2
gra
2
p
4
1
2
chromatogram
36
1
4
3
2

2

4
2
2
chromatin
2
chromatic
36
1
4
3
2

2
mn
4
0
36
1
4
3
2
s
2
t
4
1
2
Chris
36
1
4
3
2
h
2

4
2
2
Christopher
2
Christoph
36
1
4
3
2

2
p
4
1
2
Christoffel
36
1
4
3
2

2

4
2
2
Christine
2
Christina
36
1
4
3
2
n
2

4
3
2
Christianson
2
Christiana
2
Christian
36
1
4
3
2

2
an
4
1
2
Christie
36
1
4
3
2

2

4
2
2
Christenson
2
Christensen
36
1
4
3
2
n
2
s
4
2
2
Christendom
2
christen
36
1
4
3
2

2
eio
4
3
2
Christy
2
Christmas
2
Christ
36
1
4
3
2

2
ioy
4
0
36
1
4
3
2

2

4
2
2
chowder
2
chow
36
1
4
3
2
e
2

4
2
2
chosen
2
chose
36
1
4
3
2
graph
2

4
2
2
choreography
2
choreograph
36
1
4
3
2

2
o
4
1
2
chore
36
1
4
3
2

2

4
2
2
chordate
2
chordata
36
1
4
3
2

2
t
4
1
2
chordal
36
1
4
3
2

2
a
4
1
2
chord
36
1
4
3
2
l
2

4
2
2
chorale
2
choral
36
1
4
3
2

2
ade
4
3
2
chorus
2
chortle
2
chorine
36
1
4
3
2

2

4
3
2
choppy
2
Chopin
2
chop
36
1
4
3
2
s
2

4
2
2
choosy
2
choose
36
1
4
3
2

2

4
2
2
Chomsky
2
chomp
36
1
4
3
2

2

4
2
2
cholesterol
2
cholera
36
1
4
3
2

2
e
4
1
2
cholinesterase
36
1
4
3
2
e
2

4
2
2
chokeberry
2
choke
36
1
4
3
2

2

4
2
2
choirmaster
2
choir
36
1
4
3
2

2
r
4
1
2
choice
36
1
4
3
2

2

4
3
2
Choctaw
2
chocolate
2
chock
36
1
4
3
2

2
ciklmoprsw
4
1
2
Chou
36
1
4
3
2
a
2

4
2
2
chloroplatinate
2
chloroplast
36
1
4
3
2

2
l
4
1
2
chlorophyll
36
1
4
3
2

2
p
4
1
2
chloroform
36
1
4
3
2

2

4
2
2
chlorine
2
chloride
36
1
4
3
2
or
2
io
4
2
2
chlordane
2
chlorate
36
1
4
3
2
lr
2

4
2
2
chivalry
2
chivalrous
36
1
4
3
2

2
a
4
1
2
chive
36
1
4
3
2

2

4
2
2
chiton
2
chit
36
1
4
3
2

2

4
2
2
Chisholm
2
chisel
36
1
4
3
2

2
p
4
1
2
chiropractor
36
1
4
3
2

2

4
4
2
Chippendale
2
chipmunk
2
chipboard
2
chip
36
1
4
3
2

2

4
2
2
Chinese
2
chine
36
1
4
3
2
h
2

4
2
2
chinchilla
2
chinch
36
1
4
3
2

2

4
2
2
Chinamen
2
Chinaman
36
1
4
3
2

2
m
4
2
2
Chinatown
2
china
36
1
4
3
2

2
ace
4
4
2
chinquapin
2
Chinook
2
chink
2
chin
36
1
4
3
2

2
r
4
1
2
chime
36
1
4
3
2

2

4
2
2
chimeric
2
chimera
36
1
4
3
2

2
e
4
3
2
chimpanzee
2
chimney
2
Chimique
36
1
4
3
2

2

4
2
2
chilly
2
chill
36
1
4
3
2

2

4
4
2
children
2
childish
2
childbirth
2
child
36
1
4
3
2

2
dl
4
3
2
chili
2
Chile
2
chilblain
36
1
4
3
2

2

4
2
2
chignon
2
chigger
36
1
4
3
2
f
2

4
3
2
chieftain
2
chiefdom
2
chief
36
1
4
3
2

2

4
4
2
chickweed
2
chicken
2
chickadee
2
chick
36
1
4
3
2

2

4
2
2
Chicano
2
chicanery
36
1
4
3
2
o
2

4
2
2
Chicagoan
2
Chicago
36
1
4
3
2

2
gn
4
0
36
1
4
3
2

2
ak
4
2
2
chicory
2
chic
36
1
4
3
2
n
2

4
2
2
chianti
2
Chiang
36
1
4
3
2

2
aceglmnprstv
4
3
2
chiffon
2
chide
2
chi
36
1
4
3
2
o
2

4
2
2
chevron
2
Chevrolet
36
1
4
3
2

2
r
4
2
2
chevy
2
chevalier
36
1
4
3
2
r
2

4
2
2
Chesterton
2
Chester
36
1
4
3
2

2
e
4
2
2
chestnut
2
chest
36
1
4
3
2

2
t
4
3
2
chess
2
Cheshire
2
Chesapeake
36
1
4
3
2
b
2

4
2
2
cherubim
2
cherub
36
1
4
3
2

2
u
4
5
2
Cheryl
2
chert
2
cherry
2
Cherokee
2
cherish
36
1
4
3
2

2

4
3
2
chenille
2
Cheney
2
Chen
36
1
4
3
2

2
s
4
1
2
chemic
36
1
4
3
2

2

4
2
2
chemistry
2
chemist
36
1
4
3
2
r
2

4
2
2
chemisorption
2
chemisorb
36
1
4
3
2

2
ot
4
1
2
chemise
36
1
4
3
2

2
i
4
1
2
chemotherapy
36
1
4
3
2

2
c
4
1
2
cheese
36
1
4
3
2

2

4
2
2
cheesecloth
2
cheesecake
36
1
4
3
2

2
e
4
1
2
cheesy
36
1
4
3
2

2

4
4
2
cheery
2
cheerleader
2
cheerful
2
cheer
36
1
4
3
2

2

4
3
2
cheeky
2
cheekbone
2
cheek
36
1
4
3
2

2
krs
4
1
2
cheetah
36
1
4
3
2

2

4
2
2
checksumming
2
checksummed
36
1
4
3
2
um
2
m
4
1
2
checksum
36
1
4
3
2
rb
2

4
2
2
checkerboard
2
checkerberry
36
1
4
3
2
k
2
es
4
6
2
checkup
2
checkpoint
2
checkout
2
checklist
2
checkbook
2
check
36
1
4
3
2

2
t
4
1
2
cheap
36
1
4
3
2

2

4
2
2
cheater
2
cheat
36
1
4
3
2

2
acemnrsv
4
4
2
Cheyenne
2
chew
2
chelate
2
chef
36
1
4
3
2

2
dfilmnoprstu
4
3
2
chaw
2
chagrin
2
Chablis
36
1
4
3
2

2

4
4
2
Chautauqua
2
Chauncey
2
chauffeur
2
Chaucer
36
1
4
3
2

2

4
3
2
chatty
2
chattel
2
Chattanooga
36
1
4
3
2
au
2

4
2
2
chateaux
2
chateau
36
1
4
3
2

2
et
4
2
2
Chatham
2
chat
36
1
4
3
2

2

4
2
2
chastity
2
chastise
36
1
4
3
2

2
i
4
1
2
chaste
36
1
4
3
2

2
t
4
3
2
chassis
2
chasm
2
chase
36
1
4
3
2

2

4
2
2
chartreuse
2
Chartres
36
1
4
3
2

2
e
4
1
2
chartroom
36
1
4
3
2

2
r
4
2
2
Charta
2
chart
36
1
4
3
2
tte
2

4
2
2
Charlottesville
2
Charlotte
36
1
4
3
2

2
s
4
2
2
Charley
2
Charlemagne
36
1
4
3
2

2

4
2
2
Charleston
2
Charles
36
1
4
3
2

2
eo
4
1
2
Charlie
36
1
4
3
2

2

4
2
2
charity
2
charitable
36
1
4
3
2
ma
2

4
2
2
charismatic
2
charisma
36
1
4
3
2

2
st
4
1
2
chariot
36
1
4
3
2
e
2

4
3
2
charges
2
chargeable
2
charge
36
1
4
3
2
cter
2

4
2
2
characteristic
2
character
36
1
4
3
2

2
agilt
4
6
2
Charybdis
2
Charon
2
charm
2
chard
2
charcoal
2
char
36
1
4
3
2

2

4
2
2
Chaplin
2
chaplain
36
1
4
3
2
on
2

4
2
2
chaperone
2
chaperon
36
1
4
3
2

2
r
4
1
2
chapel
36
1
4
3
2

2
el
4
4
2
chapter
2
Chapman
2
chaparral
2
chap
36
1
4
3
2

2

4
3
2
chaotic
2
chaos
2
Chao
36
1
4
3
2

2

4
4
2
chantry
2
Chantilly
2
chantey
2
chant
36
1
4
3
2

2

4
5
2
changes
2
changed
2
changeover
2
changeable
2
change
36
1
4
3
2

2
e
4
2
2
changing
2
Chang
36
1
4
3
2

2

4
2
2
chandler
2
chandelier
36
1
4
3
2

2
e
4
1
2
chancy
36
1
4
3
2

2
l
4
3
2
chances
2
chancery
2
chance
36
1
4
3
2

2

4
2
2
chancellor
2
chancel
36
1
4
3
2

2
cdgt
4
2
2
chanson
2
channel
36
1
4
3
2

2

4
2
2
Champaign
2
champagne
36
1
4
3
2

2
a
4
3
2
Champlain
2
champion
2
champ
36
1
4
3
2

2

4
2
2
chamomile
2
chamois
36
1
4
3
2
er
2

4
3
2
chambermaid
2
chamberlain
2
chamber
36
1
4
3
2

2
bop
4
2
2
chamfer
2
chameleon
36
1
4
3
2

2

4
3
2
chalky
2
chalkline
2
chalk
36
1
4
3
2

2

4
2
2
chalcocite
2
chalcedony
36
1
4
3
2

2
ck
4
3
2
Chalmers
2
challenge
2
chalice
36
1
4
3
2
om
2

4
2
2
chairwomen
2
chairwoman
36
1
4
3
2

2

4
2
2
chairmen
2
chairman
36
1
4
3
2

2
mw
4
3
2
chairperson
2
chairlady
2
chair
36
1
4
3
2

2
r
4
2
2
chaise
2
chain
36
1
4
3
2

2

4
2
2
chaff
2
chafe
36
1
4
3
2

2

4
2
2
Chadwick
2
Chad
36
1
4
3
2

2
aeiloru
4
0
36
1
4
3
2

2

4
2
2
Cetus
2
cetera
36
1
4
3
2

2

4
3
2
Cessna
2
cession
2
cessation
36
1
4
3
2

2
s
4
2
2
cesium
2
Cesare
36
1
4
3
2

2

4
2
2
cervix
2
Cervantes
36
1
4
3
2

2

4
2
2
certify
2
certificate
36
1
4
3
2

2
f
4
2
2
certitude
2
certiorari
36
1
4
3
2
in
2

4
2
2
certainty
2
certain
36
1
4
3
2

2
ai
4
0
36
1
4
3
2

2

4
2
2
cerium
2
cerise
36
1
4
3
2

2

4
2
2
ceremonious
2
ceremonial
36
1
4
3
2
on
2
i
4
1
2
ceremony
36
1
4
3
2
a
2

4
2
2
cerebrate
2
cerebral
36
1
4
3
2

2
r
4
1
2
cerebellum
36
1
4
3
2

2
bm
4
3
2
cereus
2
Ceres
2
cereal
36
1
4
3
2
mi
2

4
2
2
ceramium
2
ceramic
36
1
4
3
2

2
aeitv
4
3
2
cerulean
2
CERN
2
Cerberus
36
1
4
3
2

2

4
2
2
century
2
centum
36
1
4
3
2

2

4
2
2
centrifugate
2
centrifugal
36
1
4
3
2
ug
2
a
4
1
2
centrifuge
36
1
4
3
2

2
f
4
2
2
centrist
2
centric
36
1
4
3
2

2
ie
4
2
2
centroid
2
central
36
1
4
3
2

2

4
2
2
centipede
2
centigrade
36
1
4
3
2

2

4
3
2
centerpiece
2
centerline
2
center
36
1
4
3
2

2

4
2
2
centennial
2
centenary
36
1
4
3
2

2
nr
4
0
36
1
4
3
2

2
eiru
4
2
2
centaur
2
cent
36
1
4
3
2

2

4
2
2
census
2
censure
36
1
4
3
2
r
2

4
2
2
censorial
2
censor
36
1
4
3
2

2
ou
4
0
36
1
4
3
2

2
st
4
1
2
Cenozoic
36
1
4
3
2
e
2

4
2
2
cemetery
2
cement
36
1
4
3
2

2

4
2
2
cellulose
2
celluloid
36
1
4
3
2
l
2
o
4
1
2
cellular
36
1
4
3
2

2
u
4
3
2
cellophane
2
cellar
2
cell
36
1
4
3
2
t
2

4
2
2
celestial
2
celesta
36
1
4
3
2

2

4
2
2
celery
2
celerity
36
1
4
3
2

2
r
4
1
2
Celebes
36
1
4
3
2

2

4
2
2
celebrate
2
celebrant
36
1
4
3
2

2
a
4
1
2
celebrity
36
1
4
3
2

2
brs
4
0
36
1
4
3
2
n
2

4
2
2
Celanese
2
celandine
36
1
4
3
2

2
ael
4
3
2
Celtic
2
Celsius
2
Celia
36
1
4
3
2

2

4
4
2
Cedric
2
cedilla
2
cede
2
cedar
36
1
4
3
2
l
2

4
2
2
Cecilia
2
Cecil
36
1
4
3
2

2
i
4
1
2
Cecropia
36
1
4
3
2

2
cdlmnrst
4
5
2
Cezanne
2
Ceylon
2
Cepheus
2
ceil
2
cease
36
1
4
3
2

2

4
3
2
Cayuga
2
Cayley
2
cayenne
36
1
4
3
2

2

4
2
2
cavilling
2
cavil
36
1
4
3
2

2
l
4
2
2
Caviness
2
caviar
36
1
4
3
2
n
2

4
2
2
cavernous
2
cavern
36
1
4
3
2

2

4
2
2
cavemen
2
caveman
36
1
4
3
2

2
mr
4
3
2
Cavendish
2
caveat
2
cave
36
1
4
3
2
l
2

4
3
2
cavalry
2
cavalier
2
cavalcade
36
1
4
3
2

2
aei
4
1
2
cavort
36
1
4
3
2

2

4
2
2
cautionary
2
caution
36
1
4
3
2
io
2
n
4
1
2
cautious
36
1
4
3
2

2

4
2
2
causate
2
causal
36
1
4
3
2

2
ae
4
2
2
causing
2
caustic
36
1
4
3
2

2

4
2
2
caulk
2
cauliflower
36
1
4
3
2

2
a
4
2
2
caucus
2
Cauchy
36
1
4
3
2
s
2

4
2
2
Caucasus
2
Caucasian
36
1
4
3
2

2
clst
4
1
2
caught
36
1
4
3
2

2

4
2
2
cattlemen
2
cattleman
36
1
4
3
2
e
2
m
4
1
2
cattle
36
1
4
3
2

2
l
4
1
2
cattail
36
1
4
3
2

2

4
2
2
catsup
2
Catskill
36
1
4
3
2
on
2

4
2
2
cationic
2
cation
36
1
4
3
2

2

4
2
2
cathodic
2
cathode
36
1
4
3
2

2
d
4
1
2
catholic
36
1
4
3
2

2

4
2
2
Catherwood
2
Catherine
36
1
4
3
2

2
r
4
2
2
catheter
2
cathedral
36
1
4
3
2

2
eo
4
2
2
Cathy
2
catharsis
36
1
4
3
2

2

4
2
2
caterpillar
2
cater
36
1
4
3
2
or
2

4
2
2
category
2
categoric
36
1
4
3
2

2
gr
4
2
2
catenate
2
catechism
36
1
4
3
2
h
2

4
4
2
catchy
2
catchword
2
catchup
2
catch
36
1
4
3
2
oni
2

4
2
2
catatonic
2
catatonia
36
1
4
3
2
troph
2

4
2
2
catastrophic
2
catastrophe
36
1
4
3
2

2

4
2
2
catalyst
2
catalysis
36
1
4
3
2

2
s
4
1
2
catalytic
36
1
4
3
2

2
y
4
3
2
catalpa
2
catalogue
2
Catalina
36
1
4
3
2

2
lst
4
4
2
catawba
2
cataract
2
catapult
2
cataclysmic
36
1
4
3
2

2
acehist
4
5
2
catnip
2
catkin
2
catfish
2
catbird
2
cat
36
1
4
3
2
al
2

4
2
2
casualty
2
casual
36
1
4
3
2

2

4
2
2
Castillo
2
castigate
36
1
4
3
2

2

4
2
2
casteth
2
caste
36
1
4
3
2

2
ei
4
5
2
Castro
2
castor
2
castle
2
castanet
2
cast
36
1
4
3
2

2

4
2
2
Cassius
2
Cassiopeia
36
1
4
3
2

2

4
2
2
cassette
2
casserole
36
1
4
3
2

2
ei
4
2
2
cassock
2
Cassandra
36
1
4
3
2

2

4
2
2
casket
2
cask
36
1
4
3
2

2

4
4
2
cashmere
2
cashier
2
cashew
2
cash
36
1
4
3
2

2

4
5
2
Casey
2
casework
2
casein
2
casebook
2
case
36
1
4
3
2
a
2

4
2
2
cascara
2
cascade
36
1
4
3
2

2
cehkstu
4
3
2
casino
2
casbah
2
Casanova
36
1
4
3
2
e
2

4
2
2
carven
2
carve
36
1
4
3
2
raph
2

4
2
2
cartography
2
cartographer
36
1
4
3
2

2
g
4
2
2
cartoon
2
carton
36
1
4
3
2
lag
2

4
2
2
cartilaginous
2
cartilage
36
1
4
3
2

2

4
3
2
Cartesian
2
cartel
2
carte
36
1
4
3
2

2
eio
4
4
2
cartwheel
2
cartridge
2
Carthage
2
cart
36
1
4
3
2

2

4
2
2
carryover
2
carry
36
1
4
3
2

2

4
2
2
carrot
2
Carroll
36
1
4
3
2

2

4
3
2
carrion
2
Carrie
2
carriage
36
1
4
3
2

2

4
2
2
Carrara
2
carrageen
36
1
4
3
2

2
aioy
4
3
2
Carruthers
2
carrel
2
Carr
36
1
4
3
2
t
2

4
2
2
carpentry
2
carpenter
36
1
4
3
2

2
n
4
1
2
carpet
36
1
4
3
2

2
e
4
3
2
carport
2
Carpathia
2
carp
36
1
4
3
2
n
2

4
4
2
Carolinian
2
Carolingian
2
Caroline
2
Carolina
36
1
4
3
2

2
i
4
2
2
Carolyn
2
carol
36
1
4
3
2

2
l
4
2
2
carouse
2
carob
36
1
4
3
2

2

4
3
2
carney
2
Carnegie
2
carne
36
1
4
3
2

2

4
3
2
carnation
2
carnal
2
carnage
36
1
4
3
2

2
ae
4
1
2
carnival
36
1
4
3
2

2

4
2
2
carmine
2
Carmichael
36
1
4
3
2

2

4
2
2
Carmen
2
Carmela
36
1
4
3
2

2
ei
4
0
36
1
4
3
2

2

4
2
2
carload
2
Carlo
36
1
4
3
2

2

4
2
2
Carlisle
2
Carlin
36
1
4
3
2

2
io
4
6
2
Carlyle
2
Carlton
2
Carlson
2
Carleton
2
Carla
2
Carl
36
1
4
3
2

2

4
3
2
caribou
2
Caribbean
2
Carib
36
1
4
3
2

2
b
4
1
2
caricature
36
1
4
3
2

2

4
2
2
cargoes
2
cargo
36
1
4
3
2

2
o
4
1
2
Cargill
36
1
4
3
2

2

4
2
2
caretaker
2
caret
36
1
4
3
2

2
u
4
1
2
carefree
36
1
4
3
2

2

4
2
2
career
2
careen
36
1
4
3
2

2
eft
4
4
2
Carey
2
careworn
2
caress
2
care
36
1
4
3
2

2

4
3
2
cardiovascular
2
cardiology
2
cardiod
36
1
4
3
2

2
o
4
3
2
cardinal
2
Cardiff
2
cardiac
36
1
4
3
2

2
i
4
3
2
cardboard
2
cardamom
2
card
36
1
4
3
2
en
2

4
2
2
carcinogenic
2
carcinogen
36
1
4
3
2
no
2
g
4
1
2
carcinoma
36
1
4
3
2

2
i
4
1
2
carcass
36
1
4
3
2

2

4
2
2
carburetor
2
carbuncle
36
1
4
3
2
y
2

4
2
2
carboxylic
2
carboxy
36
1
4
3
2

2

4
2
2
carbonium
2
carbonic
36
1
4
3
2

2

4
2
2
carbonate
2
carbonaceous
36
1
4
3
2

2
ai
4
4
2
carbonyl
2
Carbone
2
Carbondale
2
carbon
36
1
4
3
2

2
nx
4
4
2
carboy
2
carborundum
2
Carboloy
2
carbohydrate
36
1
4
3
2

2

4
2
2
carbine
2
carbide
36
1
4
3
2

2
iou
4
0
36
1
4
3
2

2

4
5
2
caraway
2
caravan
2
caramel
2
Caracas
2
carabao
36
1
4
3
2

2
abcdegilmnoprtv
4
3
2
Caruso
2
Carson
2
car
36
1
4
3
2

2

4
2
2
captive
2
captivate
36
1
4
3
2

2

4
2
2
captious
2
caption
36
1
4
3
2

2
ov
4
0
36
1
4
3
2
in
2

4
2
2
captaincy
2
captain
36
1
4
3
2

2
ai
4
2
2
capture
2
captor
36
1
4
3
2

2

4
2
2
capstone
2
capstan
36
1
4
3
2

2
t
4
2
2
capsule
2
capsize
36
1
4
3
2
ic
2

4
3
2
Capricorn
2
capricious
2
caprice
36
1
4
3
2
l
2

4
2
2
Capitoline
2
capitol
36
1
4
3
2

2

4
2
2
capital
2
capita
36
1
4
3
2

2
ao
4
1
2
capitulate
36
1
4
3
2

2
t
4
2
2
Capistrano
2
capillary
36
1
4
3
2

2

4
4
2
Capetown
2
caper
2
capella
2
cape
36
1
4
3
2

2

4
2
2
capacitate
2
capacitance
36
1
4
3
2

2
a
4
3
2
capacity
2
capacitor
2
capacitive
36
1
4
3
2
ci
2
t
4
1
2
capacious
36
1
4
3
2

2
aeirst
4
4
2
capybara
2
Caputo
2
capo
2
cap
36
1
4
3
2
as
2

4
3
2
canvass
2
canvasback
2
canvas
36
1
4
3
2

2

4
2
2
Cantonese
2
canton
36
1
4
3
2

2
n
4
2
2
cantor
2
canto
36
1
4
3
2

2

4
2
2
cantilever
2
canticle
36
1
4
3
2

2

4
2
2
canterelle
2
Canterbury
36
1
4
3
2

2
r
4
1
2
canteen
36
1
4
3
2

2

4
2
2
cantaloupe
2
Cantabrigian
36
1
4
3
2

2
aeio
4
2
2
cantle
2
cant
36
1
4
3
2

2

4
2
2
canonic
2
canon
36
1
4
3
2

2
n
4
3
2
canopy
2
Canoga
2
canoe
36
1
4
3
2

2

4
2
2
cannonball
2
cannon
36
1
4
3
2

2
n
4
1
2
cannot
36
1
4
3
2

2

4
2
2
cannister
2
cannibal
36
1
4
3
2

2

4
2
2
cannery
2
cannel
36
1
4
3
2

2

4
2
2
cannabis
2
canna
36
1
4
3
2

2
aeio
4
1
2
canny
36
1
4
3
2
er
2

4
2
2
cankerworm
2
canker
36
1
4
3
2

2

4
2
2
canister
2
Canis
36
1
4
3
2

2
s
4
1
2
canine
36
1
4
3
2
e
2

4
4
2
candlewick
2
candlestick
2
candlelight
2
candle
36
1
4
3
2

2

4
2
2
candidate
2
candidacy
36
1
4
3
2
d
2
a
4
2
2
Candide
2
candid
36
1
4
3
2
la
2

4
2
2
candelabra
2
candela
36
1
4
3
2

2
eil
4
1
2
candy
36
1
4
3
2

2

4
2
2
cancerous
2
cancer
36
1
4
3
2

2
l
4
1
2
cancel
36
1
4
3
2

2

4
3
2
cancelling
2
cancelled
2
cancellate
36
1
4
3
2
e
2
lr
4
0
36
1
4
3
2

2

4
2
2
Canadian
2
Canada
36
1
4
3
2

2
d
4
4
2
Canaveral
2
canary
2
canal
2
Canaan
36
1
4
3
2

2
acdiknotv
4
6
2
canyon
2
can't
2
Canfield
2
cane
2
Canberra
2
can
36
1
4
3
2

2

4
2
2
campanile
2
campaign
36
1
4
3
2

2
a
4
7
2
campus
2
campsite
2
campion
2
campground
2
campfire
2
Campbell
2
camp
36
1
4
3
2
l
2

4
2
2
Camille
2
camilla
36
1
4
3
2

2
l
4
1
2
Camino
36
1
4
3
2

2

4
2
2
Cameroun
2
Cameron
36
1
4
3
2

2
m
4
1
2
camera
36
1
4
3
2

2

4
2
2
cameramen
2
cameraman
36
1
4
3
2

2
ao
4
0
36
1
4
3
2

2

4
2
2
Camelot
2
camelopard
36
1
4
3
2

2
o
4
3
2
camellia
2
camelback
2
camel
36
1
4
3
2

2
lr
4
2
2
cameo
2
came
36
1
4
3
2
i
2

4
3
2
Cambridge
2
cambric
2
Cambrian
36
1
4
3
2

2
r
4
2
2
Cambodia
2
camber
36
1
4
3
2

2
beip
4
4
2
camouflage
2
Camden
2
camaraderie
2
cam
36
1
4
3
2

2

4
2
2
Calvert
2
calve
36
1
4
3
2

2
e
4
2
2
Calvin
2
Calvary
36
1
4
3
2

2

4
2
2
calumny
2
calumniate
36
1
4
3
2
m
2
n
4
1
2
Calumet
36
1
4
3
2
ri
2

4
3
2
calorimeter
2
calorie
2
caloric
36
1
4
3
2
raph
2

4
2
2
calligraphy
2
calligraph
36
1
4
3
2

2
g
4
3
2
calling
2
Callisto
2
calliope
36
1
4
3
2

2

4
4
2
callable
2
Callahan
2
Callaghan
2
calla
36
1
4
3
2

2
ai
4
5
2
calls
2
called
2
callus
2
callous
2
call
36
1
4
3
2

2

4
2
2
caliphate
2
caliph
36
1
4
3
2

2
h
4
1
2
caliper
36
1
4
3
2
orni
2

4
2
2
californium
2
California
36
1
4
3
2

2
r
4
1
2
caliber
36
1
4
3
2

2

4
2
2
calibre
2
calibrate
36
1
4
3
2

2
bfp
4
2
2
calisthenic
2
calico
36
1
4
3
2

2

4
2
2
calfskin
2
calf
36
1
4
3
2
d
2

4
2
2
calendrical
2
calendar
36
1
4
3
2

2
n
4
1
2
Caleb
36
1
4
3
2
r
2

4
2
2
caldera
2
Calder
36
1
4
3
2

2
e
4
1
2
Caldwell
36
1
4
3
2

2
a
4
2
2
calculus
2
calculi
36
1
4
3
2

2

4
2
2
calculate
2
calculable
36
1
4
3
2

2
l
4
1
2
Calcutta
36
1
4
3
2

2

4
3
2
calcium
2
calcite
2
calcify
36
1
4
3
2

2
iu
4
1
2
calcareous
36
1
4
3
2
t
2

4
2
2
calamity
2
calamitous
36
1
4
3
2

2
i
4
1
2
calamus
36
1
4
3
2

2
m
4
1
2
Calais
36
1
4
3
2

2
acdefilouv
4
6
2
calypso
2
calm
2
Calkins
2
Calhoun
2
Calgary
2
Cal
36
1
4
3
2

2

4
2
2
Cairo
2
cairn
36
1
4
3
2

2

4
2
2
Caine
2
Cain
36
1
4
3
2

2
nr
4
1
2
caiman
36
1
4
3
2

2

4
2
2
cahoot
2
Cahill
36
1
4
3
2
e
2

4
2
2
cagey
2
cage
36
1
4
3
2
e
2

4
2
2
cafeteria
2
cafe
36
1
4
3
2

2

4
2
2
cadenza
2
cadent
36
1
4
3
2

2
n
4
1
2
cadet
36
1
4
3
2

2

4
2
2
caddy
2
caddis
36
1
4
3
2
ver
2

4
2
2
cadaverous
2
cadaver
36
1
4
3
2

2
ade
4
4
2
Cady
2
cadre
2
cadmium
2
Cadillac
36
1
4
3
2

2

4
2
2
cactus
2
cacti
36
1
4
3
2
phon
2

4
2
2
cacophony
2
cacophonist
36
1
4
3
2

2

4
2
2
cache
2
cachalot
36
1
4
3
2

2
hot
4
3
2
CACM
2
cackle
2
cacao
36
1
4
3
2
t
2

4
3
2
cabinetry
2
cabinetmake
2
cabinet
36
1
4
3
2
n
2
e
4
1
2
cabin
36
1
4
3
2

2

4
3
2
cabaret
2
cabana
2
cabal
36
1
4
3
2

2
ai
4
5
2
Cabot
2
cable
2
cabdriver
2
cabbage
2
cab
36
1
4
3
2

2
bcdfghilmnprstuvy
4
5
2
caw
2
cake
2
cajole
2
Caesar
2
CA
36
1
4
3
2

2
aehilOpruyz
4
7
2
CT
2
csnet
2
c's
2
cf
2
CDC
2
CBS
2
c
36
1
4
3
2
anti
2

4
2
2
Byzantium
2
Byzantine
36
1
4
3
2

2

4
2
2
byword
2
byway
36
1
4
3
2

2

4
2
2
Byronic
2
Byron
36
1
4
3
2

2
n
4
1
2
byroad
36
1
4
3
2

2
o
4
2
2
Byrne
2
Byrd
36
1
4
3
2

2

4
2
2
bypath
2
bypass
36
1
4
3
2

2
a
4
1
2
byproduct
36
1
4
3
2

2

4
2
2
byline
2
bylaw
36
1
4
3
2

2
lprwz
4
5
2
byte
2
bystander
2
bygone
2
bye
2
by
36
1
4
3
2
z
2

4
5
2
buzzy
2
buzzword
2
buzzing
2
Buzzard
2
buzz
36
1
4
3
2

2

4
2
2
Buxton
2
Buxtehude
36
1
4
3
2

2
t
4
1
2
buxom
36
1
4
3
2

2

4
2
2
butyric
2
butyrate
36
1
4
3
2

2
r
4
1
2
butyl
36
1
4
3
2

2

4
2
2
Buttrick
2
buttress
36
1
4
3
2

2

4
3
2
buttonweed
2
buttonhole
2
button
36
1
4
3
2

2
n
4
1
2
buttock
36
1
4
3
2

2

4
3
2
butterfly
2
Butterfield
2
butterfat
36
1
4
3
2

2
f
4
5
2
buttery
2
butternut
2
buttermilk
2
buttercup
2
butterball
36
1
4
3
2

2
r
4
1
2
butte
36
1
4
3
2

2
eor
4
1
2
butt
36
1
4
3
2

2

4
2
2
buteo
2
butene
36
1
4
3
2
h
2

4
2
2
butchery
2
butch
36
1
4
3
2

2

4
2
2
butane
2
butadiene
36
1
4
3
2

2
acety
4
2
2
butler
2
but
36
1
4
3
2

2

4
3
2
bustle
2
bustard
2
bust
36
1
4
3
2

2

4
2
2
businessmen
2
businessman
36
1
4
3
2
ness
2
m
4
2
2
businesses
2
business
36
1
4
3
2

2

4
6
2
bushy
2
bushwhack
2
Bushnell
2
bushmaster
2
bushel
2
bush
36
1
4
3
2

2
hit
4
5
2
busy
2
buss
2
Busch
2
busboy
2
bus
36
1
4
3
2

2

4
3
2
Burtt
2
Burton
2
Burt
36
1
4
3
2

2

4
2
2
bursty
2
burst
36
1
4
3
2

2
t
4
1
2
bursitis
36
1
4
3
2

2

4
3
2
burrow
2
Burroughs
2
burro
36
1
4
3
2

2
o
4
1
2
Burr
36
1
4
3
2

2

4
7
2
burnt
2
Burnside
2
burnout
2
burnish
2
Burnham
2
Burnett
2
burn
36
1
4
3
2

2

4
2
2
Burmese
2
Burma
36
1
4
3
2

2

4
2
2
burley
2
burlesque
36
1
4
3
2

2
e
4
4
2
burly
2
Burlington
2
burlap
2
burl
36
1
4
3
2
nd
2

4
2
2
Burgundy
2
Burgundian
36
1
4
3
2
ar
2

4
3
2
burglary
2
burglarproof
2
burglar
36
1
4
3
2

2

4
2
2
burgess
2
burgeon
36
1
4
3
2

2
elu
4
2
2
burgher
2
burg
36
1
4
3
2

2

4
2
2
burette
2
buret
36
1
4
3
2
u
2
c
4
1
2
bureau
36
1
4
3
2

2

4
2
2
bureaucratic
2
bureaucrat
36
1
4
3
2
ra
2
t
4
1
2
bureaucracy
36
1
4
3
2

2
at
4
0
36
1
4
3
2
n
2

4
2
2
burdensome
2
burden
36
1
4
3
2

2
e
4
1
2
burdock
36
1
4
3
2

2
deglmnrst
4
7
2
bury
2
Burundi
2
burp
2
Burke
2
burial
2
Burch
2
burbank
36
1
4
3
2
y
2

4
2
2
buoyant
2
buoy
36
1
4
3
2

2

4
2
2
bunkmate
2
bunk
36
1
4
3
2

2

4
2
2
bungle
2
bungalow
36
1
4
3
2

2

4
4
2
bundy
2
Bundoora
2
bundle
2
Bundestag
36
1
4
3
2

2
dgk
4
6
2
Bunyan
2
bunt
2
Bunsen
2
bunny
2
bunch
2
bun
36
1
4
3
2

2

4
2
2
bumptious
2
bump
36
1
4
3
2
le
2

4
2
2
bumblebee
2
bumble
36
1
4
3
2

2
bp
4
1
2
bum
36
1
4
3
2

2

4
2
2
bullyboy
2
bully
36
1
4
3
2

2

4
2
2
bullhide
2
bullhead
36
1
4
3
2

2

4
2
2
bullfrog
2
bullfinch
36
1
4
3
2
t
2

4
2
2
bulletin
2
bullet
36
1
4
3
2
o
2

4
2
2
bulldoze
2
bulldog
36
1
4
3
2

2
defhy
4
5
2
bullwhack
2
bullseye
2
bullock
2
bullish
2
bull
36
1
4
3
2

2

4
3
2
bulky
2
bulkhead
2
bulk
36
1
4
3
2

2

4
2
2
bulge
2
Bulgaria
36
1
4
3
2

2

4
2
2
bulblet
2
bulb
36
1
4
3
2

2
bgkl
4
2
2
bulwark
2
bulrush
36
1
4
3
2

2

4
3
2
built-in
2
builtin
2
built
36
1
4
3
2

2
i
4
2
2
buildup
2
build
36
1
4
3
2

2
dt
4
0
36
1
4
3
2

2
l
4
1
2
Buick
36
1
4
3
2

2

4
2
2
buggy
2
bugging
36
1
4
3
2

2
g
4
4
2
bugle
2
bugeyed
2
bugaboo
2
bug
36
1
4
3
2
f
2
e
4
4
2
buffoon
2
bufflehead
2
buffalo
2
buff
36
1
4
3
2
n
2

4
2
2
Buenos
2
Buena
36
1
4
3
2

2

4
2
2
budgetary
2
budget
36
1
4
3
2
e
2
t
4
1
2
budge
36
1
4
3
2
s
2

4
2
2
Buddhist
2
Buddhism
36
1
4
3
2

2
i
4
1
2
Buddha
36
1
4
3
2

2
h
4
2
2
buddy
2
Budd
36
1
4
3
2

2
dg
4
3
2
Budweiser
2
Budapest
2
bud
36
1
4
3
2

2

4
2
2
buckskin
2
buckshot
36
1
4
3
2
e
2

4
2
2
Buckley
2
buckle
36
1
4
3
2

2

4
2
2
bucketfull
2
bucket
36
1
4
3
2

2
t
4
1
2
buckeye
36
1
4
3
2

2
els
4
7
2
buckwheat
2
buckthorn
2
Bucknell
2
buckhorn
2
buckboard
2
buckaroo
2
buck
36
1
4
3
2

2
a
4
2
2
Buchwald
2
Buchenwald
36
1
4
3
2

2

4
2
2
Bucharest
2
Buchanan
36
1
4
3
2

2
hk
4
1
2
bucolic
36
1
4
3
2

2

4
2
2
bubble
2
bub
36
1
4
3
2

2
bcdefgilmnorstxzy
4
1
2
Bujumbura
36
1
4
3
2
hyt
2

4
2
2
bryophyte
2
bryophyta
36
1
4
3
2

2
p
4
1
2
bryozoa
36
1
4
3
2
n
2

4
2
2
Bryant
2
Bryan
36
1
4
3
2

2
ao
4
2
2
Bryn
2
Bryce
36
1
4
3
2

2

4
2
2
brute
2
brutal
36
1
4
3
2

2

4
4
2
brushy
2
brushwork
2
brushfire
2
brush
36
1
4
3
2

2
h
4
2
2
Brussels
2
brusque
36
1
4
3
2

2

4
6
2
brunt
2
Brunswick
2
Bruno
2
Brunhilde
2
brunette
2
brunch
36
1
4
3
2

2

4
2
2
bruit
2
bruise
36
1
4
3
2

2
e
4
1
2
Bruckner
36
1
4
3
2

2

4
2
2
brucellosis
2
Bruce
36
1
4
3
2

2
cinst
4
2
2
Brumidi
2
Bruegel
36
1
4
3
2

2

4
3
2
brownish
2
brownie
2
Brownian
36
1
4
3
2

2

4
2
2
Brownell
2
Browne
36
1
4
3
2

2
ei
4
1
2
brown
36
1
4
3
2

2
n
4
3
2
browse
2
browbeaten
2
brow
36
1
4
3
2

2

4
2
2
brouhaha
2
brought
36
1
4
3
2

2

4
2
2
brother
2
brothel
36
1
4
3
2
h
2
e
4
1
2
broth
36
1
4
3
2

2

4
2
2
broomcorn
2
broom
36
1
4
3
2

2

4
2
2
Brooklyn
2
Brookline
36
1
4
3
2

2
l
4
4
2
brookside
2
Brookhaven
2
Brooke
2
brook
36
1
4
3
2

2

4
2
2
broody
2
brood
36
1
4
3
2

2
dkm
4
0
36
1
4
3
2

2

4
2
2
bronzy
2
bronze
36
1
4
3
2

2
h
4
1
2
bronco
36
1
4
3
2

2
i
4
1
2
bronchus
36
1
4
3
2

2
o
4
3
2
bronchitis
2
bronchial
2
bronchi
36
1
4
3
2
l
2

4
2
2
bronchiole
2
bronchiolar
36
1
4
3
2

2
cz
4
2
2
Bronx
2
Brontosaurus
36
1
4
3
2

2

4
2
2
bromine
2
bromide
36
1
4
3
2

2
i
4
2
2
Bromley
2
Bromfield
36
1
4
3
2
e
2

4
3
2
brokerage
2
broken
2
broke
36
1
4
3
2

2

4
2
2
brockle
2
Brock
36
1
4
3
2

2
k
4
3
2
brochure
2
broccoli
2
brocade
36
1
4
3
2

2
d
4
1
2
broach
36
1
4
3
2

2

4
6
2
Broadway
2
broadside
2
broadloom
2
broaden
2
broadcast
2
broad
36
1
4
3
2

2
ackmnotuw
4
2
2
broil
2
Broglie
36
1
4
3
2

2

4
3
2
brittle
2
Britten
2
Brittany
36
1
4
3
2

2
n
4
1
2
Britain
36
1
4
3
2
nic
2

4
2
2
Britannica
2
Britannic
36
1
4
3
2

2
at
4
3
2
Briton
2
British
2
britches
36
1
4
3
2

2

4
2
2
Bristol
2
bristle
36
1
4
3
2

2
t
4
2
2
brisk
2
Brisbane
36
1
4
3
2

2

4
2
2
brinkmanship
2
brink
36
1
4
3
2

2

4
2
2
brindle
2
Brindisi
36
1
4
3
2

2
dkg
4
2
2
briny
2
brine
36
1
4
3
2

2

4
3
2
brimstone
2
brimful
2
brim
36
1
4
3
2
l
2

4
2
2
Brillouin
2
brilliant
36
1
4
3
2

2

4
3
2
Brighton
2
brighten
2
bright
36
1
4
3
2

2
t
4
1
2
Brigham
36
1
4
3
2

2

4
2
2
brigadier
2
brigade
36
1
4
3
2

2
d
4
1
2
brigantine
36
1
4
3
2

2
ah
4
2
2
Briggs
2
brig
36
1
4
3
2
f
2

4
2
2
briefcase
2
brief
36
1
4
3
2

2

4
2
2
bridgework
2
Bridgewater
36
1
4
3
2

2

4
2
2
Bridgetown
2
Bridget
36
1
4
3
2
e
2
tw
4
4
2
Bridgeport
2
bridgehead
2
bridgeable
2
bridge
36
1
4
3
2

2

4
3
2
bridesmaid
2
bridegroom
2
bride
36
1
4
3
2

2
eg
4
2
2
bridle
2
bridal
36
1
4
3
2
ay
2

4
2
2
bricklaying
2
bricklayer
36
1
4
3
2

2
l
4
2
2
brickbat
2
brick
36
1
4
3
2

2
k
4
1
2
Brice
36
1
4
3
2
e
2

4
2
2
bribery
2
bribe
36
1
4
3
2

2

4
2
2
briar
2
Brian
36
1
4
3
2

2
abcdeglmnst
4
0
36
1
4
3
2

2

4
3
2
Brewster
2
brewery
2
brew
36
1
4
3
2

2

4
2
2
brevet
2
breve
36
1
4
3
2

2
e
4
1
2
brevity
36
1
4
3
2

2

4
3
2
Brett
2
Breton
2
brethren
36
1
4
3
2

2

4
2
2
Brenner
2
Brennan
36
1
4
3
2
a
2

4
2
2
Brendan
2
Brenda
36
1
4
3
2

2
dn
4
1
2
Brent
36
1
4
3
2

2

4
2
2
bremsstrahlung
2
Bremen
36
1
4
3
2

2

4
2
2
breezy
2
breeze
36
1
4
3
2

2
z
4
2
2
breed
2
breech
36
1
4
3
2

2
dkst
4
2
2
bream
2
breach
36
1
4
3
2
h
2

4
4
2
breathy
2
breathtaking
2
breathe
2
breath
36
1
4
3
2
t
2

4
3
2
breastwork
2
breastplate
2
breast
36
1
4
3
2

2

4
2
2
breakaway
2
breakage
36
1
4
3
2

2
a
4
8
2
breakwater
2
breakup
2
breakthrough
2
breakpoint
2
breakoff
2
breakfast
2
breakdown
2
break
36
1
4
3
2

2

4
5
2
breadth
2
breadroot
2
breadfruit
2
breadboard
2
bread
36
1
4
3
2

2
aemntvw
4
3
2
Brest
2
bred
2
breccia
36
1
4
3
2

2
cdghiknsvz
4
6
2
bray
2
brawl
2
Braun
2
bratwurst
2
bramble
2
brae
36
1
4
3
2

2

4
2
2
Brazilian
2
Brazil
36
1
4
3
2

2
l
4
1
2
brazier
36
1
4
3
2

2
i
4
2
2
Brazzaville
2
brazen
36
1
4
3
2

2

4
2
2
bravery
2
brave
36
1
4
3
2

2
e
4
3
2
bravura
2
bravo
2
bravado
36
1
4
3
2

2

4
3
2
brassy
2
brassiere
2
brass
36
1
4
3
2

2
s
4
2
2
Brasilia
2
brash
36
1
4
3
2

2

4
2
2
brandywine
2
brandy
36
1
4
3
2

2

4
2
2
Brandenburg
2
Brandeis
36
1
4
3
2

2
ey
4
4
2
Brandt
2
Brandon
2
brandish
2
brand
36
1
4
3
2

2
dc
4
3
2
brant
2
Braniff
2
bran
36
1
4
3
2
e
2

4
2
2
brakeman
2
brake
36
1
4
3
2

2

4
5
2
brainy
2
brainwash
2
brainstorm
2
Brainard
2
brain
36
1
4
3
2

2
n
4
2
2
Braille
2
braid
36
1
4
3
2

2

4
2
2
Brahmsian
2
Brahms
36
1
4
3
2
m
2
s
4
1
2
Brahmaputra
36
1
4
3
2

2

4
2
2
bragging
2
Bragg
36
1
4
3
2

2
g
4
1
2
brag
36
1
4
3
2

2

4
6
2
Brady
2
Bradshaw
2
Bradley
2
Bradford
2
Bradbury
2
brad
36
1
4
3
2

2
ek
4
1
2
bract
36
1
4
3
2

2

4
2
2
bracket
2
bracken
36
1
4
3
2

2
e
4
1
2
brackish
36
1
4
3
2

2

4
2
2
bracelet
2
brace
36
1
4
3
2

2
aeiouy
4
0
36
1
4
3
2

2

4
2
2
Boylston
2
Boyle
36
1
4
3
2

2

4
2
2
boycott
2
Boyce
36
1
4
3
2

2
cl
4
4
2
boyish
2
Boyd
2
boyar
2
boy
36
1
4
3
2

2

4
4
2
boxy
2
boxwood
2
boxcar
2
box
36
1
4
3
2

2

4
2
2
bowmen
2
bowman
36
1
4
3
2

2

4
2
2
bowline
2
bowl
36
1
4
3
2

2

4
2
2
Bowen
2
bowel
36
1
4
3
2

2

4
2
2
Bowdoin
2
Bowditch
36
1
4
3
2

2
delm
4
4
2
bowstring
2
bowie
2
bowfin
2
bow
36
1
4
3
2

2

4
2
2
boutique
2
bout
36
1
4
3
2
eois
2

4
2
2
bourgeoisie
2
bourgeois
36
1
4
3
2

2

4
2
2
bourbon
2
Bourbaki
36
1
4
3
2

2
bg
4
1
2
bourn
36
1
4
3
2

2

4
2
2
boundary
2
bound
36
1
4
3
2

2

4
2
2
bouncy
2
bounce
36
1
4
3
2

2
cd
4
1
2
bounty
36
1
4
3
2

2

4
2
2
boulevard
2
boulder
36
1
4
3
2
h
2

4
2
2
bought
2
bough
36
1
4
3
2

2
glnrt
4
4
2
boustrophedon
2
bouquet
2
bouffant
2
Boucher
36
1
4
3
2
li
2

4
2
2
botulism
2
botulin
36
1
4
3
2
m
2

4
2
2
bottommost
2
bottom
36
1
4
3
2
e
2

4
2
2
bottleneck
2
bottle
36
1
4
3
2

2
lo
4
0
36
1
4
3
2

2

4
2
2
bothersome
2
both
36
1
4
3
2
n
2
i
4
1
2
botany
36
1
4
3
2

2

4
2
2
botanist
2
botanic
36
1
4
3
2

2
ahtu
4
3
2
Botswana
2
botfly
2
botch
36
1
4
3
2

2

4
2
2
bosonic
2
boson
36
1
4
3
2

2
n
4
1
2
bosom
36
1
4
3
2

2
o
4
5
2
Boswell
2
Boston
2
boss
2
Bose
2
Bosch
36
1
4
3
2
o
2

4
2
2
borrow
2
Borroughs
36
1
4
3
2

2

4
3
2
borough
2
borosilicate
2
boron
36
1
4
3
2

2

4
2
2
Borneo
2
borne
36
1
4
3
2

2
e
4
1
2
born
36
1
4
3
2

2

4
2
2
Boris
2
boric
36
1
4
3
2

2

4
2
2
Boreas
2
Borealis
36
1
4
3
2

2
a
4
2
2
boredom
2
bore
36
1
4
3
2

2

4
2
2
borderline
2
borderland
36
1
4
3
2

2
l
4
1
2
border
36
1
4
3
2
e
2
r
4
3
2
Borden
2
bordello
2
Bordeaux
36
1
4
3
2

2

4
2
2
borax
2
borate
36
1
4
3
2

2
adeinor
4
1
2
Borg
36
1
4
3
2
trap
2

4
2
2
bootstrapping
2
bootstrap
36
1
4
3
2

2

4
2
2
bootlegging
2
bootlegger
36
1
4
3
2
eg
2
g
4
1
2
bootleg
36
1
4
3
2

2
ls
4
4
2
booty
2
booth
2
Bootes
2
boot
36
1
4
3
2

2

4
2
2
boorish
2
boor
36
1
4
3
2

2

4
2
2
Boone
2
boon
36
1
4
3
2

2

4
2
2
boomerang
2
boom
36
1
4
3
2
el
2

4
2
2
bookshelves
2
bookshelf
36
1
4
3
2

2
h
4
2
2
bookstore
2
bookseller
36
1
4
3
2

2

4
2
2
bookish
2
bookie
36
1
4
3
2

2
is
4
8
2
booky
2
bookplate
2
booklet
2
bookkeep
2
bookend
2
bookcase
2
bookbind
2
book
36
1
4
3
2

2
kmnrt
4
6
2
booze
2
boost
2
boolean
2
boogie
2
booby
2
boo
36
1
4
3
2

2

4
2
2
Bonneville
2
bonnet
36
1
4
3
2

2
e
4
2
2
Bonnie
2
Bonn
36
1
4
3
2

2

4
2
2
bonito
2
Boniface
36
1
4
3
2

2

4
2
2
bongo
2
bong
36
1
4
3
2
m
2

4
2
2
bondsmen
2
bondsman
36
1
4
3
2

2
s
4
2
2
bondage
2
bond
36
1
4
3
2

2

4
4
2
Bonaventure
2
Bonaparte
2
bonanza
2
bona
36
1
4
3
2

2
adginu
4
5
2
bonze
2
bony
2
bonfire
2
bone
2
bon
36
1
4
3
2
t
2

4
2
2
bombastic
2
bombast
36
1
4
3
2

2
s
4
2
2
Bombay
2
bombard
36
1
4
3
2
b
2
a
4
2
2
bombproof
2
bomb
36
1
4
3
2

2

4
3
2
Boltzmann
2
Bolton
2
bolt
36
1
4
3
2

2
e
4
1
2
Bolshoi
36
1
4
3
2
vi
2
s
4
1
2
Bolshevik
36
1
4
3
2

2

4
2
2
Bolshevist
2
Bolshevism
36
1
4
3
2

2
h
4
1
2
bolster
36
1
4
3
2

2

4
3
2
bolometer
2
Bologna
2
bolo
36
1
4
3
2
v
2

4
2
2
Bolivia
2
bolivar
36
1
4
3
2

2

4
2
2
boletus
2
bole
36
1
4
3
2

2

4
2
2
boldface
2
bold
36
1
4
3
2

2
deiost
4
0
36
1
4
3
2

2

4
3
2
boisterous
2
Boise
2
Bois
36
1
4
3
2

2
s
4
1
2
boil
36
1
4
3
2

2

4
2
2
Bohr
2
Bohemia
36
1
4
3
2

2

4
3
2
boggy
2
boggle
2
bogging
36
1
4
3
2
y
2

4
2
2
bogeymen
2
bogey
36
1
4
3
2

2
eg
4
4
2
bogy
2
bogus
2
Bogota
2
bog
36
1
4
3
2

2

4
2
2
Boeotia
2
Boeing
36
1
4
3
2
uild
2

4
2
2
bodybuilding
2
bodybuilder
36
1
4
3
2

2
b
4
2
2
bodyguard
2
body
36
1
4
3
2

2
y
4
4
2
Bodleian
2
bodice
2
bodhisattva
2
bode
36
1
4
3
2

2

4
2
2
bock
2
Boca
36
1
4
3
2

2

4
2
2
bobbin
2
Bobbie
36
1
4
3
2

2
i
4
2
2
bobby
2
bobble
36
1
4
3
2

2
b
4
3
2
bobolink
2
bobcat
2
bob
36
1
4
3
2

2
rst
4
1
2
boa
36
1
4
3
2

2

4
2
2
boatmen
2
boatman
36
1
4
3
2

2
m
4
5
2
boatyard
2
boatswain
2
boatload
2
boathouse
2
boat
36
1
4
3
2
t
2

4
3
2
boasts
2
boastful
2
boast
36
1
4
3
2

2

4
2
2
boardinghouse
2
board
36
1
4
3
2

2
d
4
1
2
boar
36
1
4
3
2

2
abcdeghilmnorstuwxy
4
2
2
bovine
2
bop
36
1
4
3
2
er
2

4
2
2
blustery
2
bluster
36
1
4
3
2

2
t
4
1
2
blush
36
1
4
3
2

2

4
3
2
blurt
2
blurry
2
blur
36
1
4
3
2

2

4
2
2
blunt
2
blunder
36
1
4
3
2

2

4
2
2
Blumenthal
2
Blum
36
1
4
3
2

2

4
2
2
bluegrass
2
bluegill
36
1
4
3
2

2

4
2
2
bluebook
2
bluebonnet
36
1
4
3
2

2

4
2
2
bluebird
2
bluebill
36
1
4
3
2

2
io
4
3
2
bluebush
2
blueberry
2
blueback
36
1
4
3
2

2
bg
4
6
2
bluet
2
bluestocking
2
blueprint
2
bluejacket
2
bluefish
2
blue
36
1
4
3
2

2
emnrs
4
5
2
blutwurst
2
bluish
2
bluff
2
bludgeon
2
blubber
36
1
4
3
2

2

4
4
2
blowup
2
blown
2
blowfish
2
blow
36
1
4
3
2

2

4
2
2
blotch
2
blot
36
1
4
3
2

2

4
3
2
Bloomington
2
Bloomfield
2
bloom
36
1
4
3
2

2
s
4
6
2
bloody
2
bloodroot
2
bloodline
2
bloodhound
2
bloodbath
2
blood
36
1
4
3
2

2

4
3
2
bloodstream
2
bloodstone
2
bloodstain
36
1
4
3
2

2

4
2
2
bloodshot
2
bloodshed
36
1
4
3
2

2
ht
4
0
36
1
4
3
2

2
dm
4
1
2
bloop
36
1
4
3
2
d
2

4
2
2
blonde
2
blond
36
1
4
3
2

2

4
2
2
Blomquist
2
Blomberg
36
1
4
3
2

2

4
2
2
blockage
2
blockade
36
1
4
3
2

2
a
4
3
2
blocky
2
blockhouse
2
block
36
1
4
3
2

2
k
4
2
2
Bloch
2
bloc
36
1
4
3
2

2
cmnotw
4
5
2
blouse
2
blossom
2
bloke
2
blob
2
bloat
36
1
4
3
2

2

4
2
2
blitz
2
blithe
36
1
4
3
2

2

4
2
2
blissful
2
bliss
36
1
4
3
2

2
s
4
1
2
blister
36
1
4
3
2

2

4
2
2
blindfold
2
blind
36
1
4
3
2

2
d
4
2
2
Blinn
2
blink
36
1
4
3
2

2
nst
4
4
2
blizzard
2
blip
2
blimp
2
blight
36
1
4
3
2

2
s
4
1
2
blest
36
1
4
3
2

2

4
2
2
Blenheim
2
blend
36
1
4
3
2

2

4
2
2
Bleeker
2
bleed
36
1
4
3
2

2

4
4
2
bleat
2
bleary
2
bleak
2
bleach
36
1
4
3
2

2
aens
4
3
2
blew
2
blemish
2
bled
36
1
4
3
2

2
cdimnstz
4
3
2
blare
2
Blake
2
blab
36
1
4
3
2

2

4
2
2
blazon
2
blaze
36
1
4
3
2

2

4
4
2
Blatz
2
blather
2
blatant
2
blat
36
1
4
3
2

2

4
2
2
blastula
2
blast
36
1
4
3
2
hem
2

4
3
2
blasphemy
2
blasphemous
2
blaspheme
36
1
4
3
2

2
pt
4
0
36
1
4
3
2

2

4
2
2
blanket
2
blank
36
1
4
3
2

2

4
2
2
blandish
2
bland
36
1
4
3
2

2
h
4
1
2
blanc
36
1
4
3
2

2

4
3
2
Blanche
2
Blanchard
2
blanch
36
1
4
3
2

2
cdk
4
0
36
1
4
3
2
e
2

4
2
2
blameworthy
2
blame
36
1
4
3
2

2

4
2
2
Blair
2
Blaine
36
1
4
3
2
er
2

4
3
2
bladderwort
2
bladdernut
2
bladder
36
1
4
3
2

2
d
4
1
2
blade
36
1
4
3
2

2

4
2
2
Blackstone
2
blacksmith
36
1
4
3
2
a
2

4
2
2
Blackman
2
blackmail
36
1
4
3
2

2

4
2
2
blackbody
2
blackboard
36
1
4
3
2

2
o
4
4
2
Blackburn
2
blackbird
2
blackberry
2
blackball
36
1
4
3
2
k
2
bms
4
7
2
blackness
2
Blackwell
2
blackout
2
blackjack
2
Blackfeet
2
blacken
2
black
36
1
4
3
2

2
aeiou
4
2
2
Blythe
2
Blvd
36
1
4
3
2

2

4
3
2
Bizet
2
bizarre
2
biz
36
1
4
3
2

2

4
2
2
bivariate
2
bivalve
36
1
4
3
2

2
a
4
1
2
bivouac
36
1
4
3
2
m
2

4
2
2
bituminous
2
bitumen
36
1
4
3
2

2

4
2
2
bitternut
2
bittern
36
1
4
3
2

2
n
4
2
2
bittersweet
2
bitterroot
36
1
4
3
2

2
r
4
1
2
bitten
36
1
4
3
2

2
e
4
1
2
bitt
36
1
4
3
2

2
tu
4
6
2
bits
2
bitwise
2
bitnet
2
bite
2
bitch
2
bit
36
1
4
3
2
a
2

4
2
2
bistate
2
bistable
36
1
4
3
2
r
2

4
2
2
Bismark
2
Bismarck
36
1
4
3
2

2
a
4
1
2
bismuth
36
1
4
3
2
op
2

4
2
2
bishopric
2
bishop
36
1
4
3
2

2

4
2
2
bisexual
2
bisect
36
1
4
3
2

2
ehmt
4
4
2
Bissau
2
bisque
2
bison
2
biscuit
36
1
4
3
2
h
2

4
4
2
birthright
2
birthplace
2
birthday
2
birth
36
1
4
3
2

2

4
5
2
birdwatch
2
birdseed
2
birdie
2
birdbath
2
bird
36
1
4
3
2

2
dt
4
5
2
Birmingham
2
Birgit
2
birefringent
2
birch
2
biracial
36
1
4
3
2
rti
2

4
2
2
bipartite
2
bipartisan
36
1
4
3
2

2
a
4
2
2
bipolar
2
biplane
36
1
4
3
2

2

4
2
2
biotite
2
biotic
36
1
4
3
2

2
i
4
1
2
biota
36
1
4
3
2
etr
2

4
2
2
biometry
2
Biometrika
36
1
4
3
2

2
mt
4
4
2
biopsy
2
biology
2
biography
2
biochemic
36
1
4
3
2

2

4
2
2
binomial
2
binocular
36
1
4
3
2
am
2

4
2
2
Binghamton
2
Bingham
36
1
4
3
2

2
h
4
3
2
bingle
2
binge
2
bing
36
1
4
3
2

2

4
5
2
bindings
2
bindweed
2
bindle
2
bindery
2
bind
36
1
4
3
2

2

4
2
2
binaural
2
binary
36
1
4
3
2

2
adgo
4
3
2
binuclear
2
Bini
2
bin
36
1
4
3
2

2

4
3
2
bimonthly
2
bimolecular
2
bimodal
36
1
4
3
2
talli
2

4
2
2
bimetallism
2
bimetallic
36
1
4
3
2

2
eo
4
1
2
Bimini
36
1
4
3
2
n
2

4
3
2
billions
2
billionth
2
billion
36
1
4
3
2

2
o
4
3
2
Billiken
2
Billie
2
billiard
36
1
4
3
2

2
i
4
5
2
billy
2
billow
2
billet
2
billboard
2
bill
36
1
4
3
2
n
2

4
2
2
bilingual
2
bilinear
36
1
4
3
2

2

4
3
2
bilayer
2
bilateral
2
bilabial
36
1
4
3
2

2
ail
4
5
2
Biltmore
2
bilk
2
bilharziasis
2
bilge
2
bile
36
1
4
3
2
cti
2

4
2
2
bijective
2
bijection
36
1
4
3
2

2
e
4
1
2
bijouterie
36
1
4
3
2
t
2

4
2
2
bigotry
2
bigot
36
1
4
3
2

2
o
4
3
2
Biggs
2
Bigelow
2
big
36
1
4
3
2

2

4
2
2
bifurcate
2
bifocal
36
1
4
3
2
i
2

4
2
2
biennium
2
biennial
36
1
4
3
2
n
2
n
4
1
2
bien
36
1
4
3
2

2

4
2
2
bidirectional
2
bidiagonal
36
1
4
3
2

2

4
2
2
biddy
2
bidden
36
1
4
3
2

2
di
4
2
2
bide
2
bid
36
1
4
3
2
n
2

4
2
2
biconnected
2
biconcave
36
1
4
3
2

2

4
2
2
bicarbonate
2
bicameral
36
1
4
3
2

2
ao
4
4
2
bicycle
2
bicker
2
bichromate
2
bicep
36
1
4
3
2

2

4
2
2
bibliophile
2
bibliography
36
1
4
3
2

2
o
4
1
2
biblical
36
1
4
3
2

2
i
4
1
2
Bible
36
1
4
3
2

2
l
4
2
2
bibb
2
bib
36
1
4
3
2

2

4
4
2
biaxial
2
bias
2
bianco
2
Bialystok
36
1
4
3
2

2
abcdefgjlmnoprstvz
4
2
2
bikini
2
biharmonic
36
1
4
3
2

2

4
2
2
Bhutan
2
bhoy
36
1
4
3
2

2

4
2
2
beyond
2
bey
36
1
4
3
2

2

4
2
2
bewitch
2
bewilder
36
1
4
3
2

2

4
2
2
beware
2
bewail
36
1
4
3
2

2
ai
4
1
2
bewhisker
36
1
4
3
2

2
r
4
1
2
bevel
36
1
4
3
2

2

4
2
2
Beverly
2
beverage
36
1
4
3
2

2
e
4
1
2
bevy
36
1
4
3
2

2

4
2
2
betwixt
2
between
36
1
4
3
2

2
e
4
2
2
Betty
2
bettor
36
1
4
3
2

2

4
2
2
Betsy
2
Betsey
36
1
4
3
2
th
2

4
2
2
betrothal
2
betroth
36
1
4
3
2
y
2

4
2
2
betrayal
2
betray
36
1
4
3
2

2
ao
4
0
36
1
4
3
2

2

4
2
2
betony
2
betoken
36
1
4
3
2

2

4
2
2
Bethesda
2
bethel
36
1
4
3
2

2
e
4
3
2
bethought
2
Bethlehem
2
beth
36
1
4
3
2
l
2

4
2
2
Betelgeuse
2
betel
36
1
4
3
2

2

4
2
2
betatron
2
beta
36
1
4
3
2

2
aehorstw
4
2
2
betide
2
bet
36
1
4
3
2
ell
2

4
2
2
bestselling
2
bestseller
36
1
4
3
2
w
2

4
2
2
bestowal
2
bestow
36
1
4
3
2

2

4
2
2
bestirring
2
bestir
36
1
4
3
2

2
r
4
1
2
bestial
36
1
4
3
2

2
ios
4
2
2
bestubble
2
best
36
1
4
3
2

2

4
2
2
Bessemer
2
Bessel
36
1
4
3
2

2
e
4
2
2
Bessie
2
Bess
36
1
4
3
2

2

4
2
2
bespectacled
2
bespeak
36
1
4
3
2

2
e
4
1
2
bespoke
36
1
4
3
2

2

4
2
2
besiege
2
beside
36
1
4
3
2

2
t
4
1
2
beseech
36
1
4
3
2

2

4
2
2
besetting
2
beset
36
1
4
3
2

2
eipst
4
2
2
besotted
2
besmirch
36
1
4
3
2
l
2

4
2
2
beryllium
2
beryl
36
1
4
3
2
a
2

4
2
2
Bertrand
2
Bertram
36
1
4
3
2

2

4
2
2
Bertha
2
berth
36
1
4
3
2

2
hr
4
2
2
Bertie
2
Bert
36
1
4
3
2

2

4
2
2
berry
2
Berra
36
1
4
3
2

2

4
2
2
Berniece
2
Bernie
36
1
4
3
2

2
e
4
2
2
Bernini
2
Bernice
36
1
4
3
2

2

4
2
2
Bernet
2
berne
36
1
4
3
2
d
2

4
3
2
Bernardo
2
Bernardino
2
Bernard
36
1
4
3
2

2
r
4
1
2
Bernadine
36
1
4
3
2

2
aei
4
4
2
Bernstein
2
Bernoulli
2
Bernhard
2
Bern
36
1
4
3
2

2

4
2
2
Bermuda
2
Berman
36
1
4
3
2
i
2

4
3
2
Berlitz
2
Berlioz
2
Berlin
36
1
4
3
2
l
2

4
2
2
berkelium
2
Berkeley
36
1
4
3
2

2
e
4
2
2
Berkshire
2
Berkowitz
36
1
4
3
2
b
2

4
2
2
beriberi
2
beribbon
36
1
4
3
2

2

4
2
2
Bergstrom
2
Bergson
36
1
4
3
2

2

4
2
2
Berglund
2
Bergland
36
1
4
3
2

2
ls
4
4
2
Bergman
2
Bergen
2
bergamot
2
berg
36
1
4
3
2

2

4
2
2
bereave
2
Berea
36
1
4
3
2

2
a
4
4
2
beret
2
Berenices
2
bereft
2
Beresford
36
1
4
3
2

2
egiklmnrty
4
3
2
Berwick
2
berserk
2
berate
36
1
4
3
2
ue
2

4
2
2
bequest
2
bequeath
36
1
4
3
2

2

4
2
2
Beowulf
2
Beograd
36
1
4
3
2

2

4
2
2
benzene
2
Benzedrine
36
1
4
3
2

2
e
4
1
2
Benz
36
1
4
3
2

2

4
2
2
benthic
2
Bentham
36
1
4
3
2

2
h
4
3
2
Benton
2
Bentley
2
bent
36
1
4
3
2

2

4
3
2
Benny
2
Bennington
2
Bennett
36
1
4
3
2
g
2

4
2
2
benign
2
benight
36
1
4
3
2
al
2

4
2
2
Bengali
2
Bengal
36
1
4
3
2

2
ei
4
0
36
1
4
3
2
a
2

4
2
2
beneficiary
2
beneficial
36
1
4
3
2

2

4
2
2
beneficent
2
benefice
36
1
4
3
2

2
ct
4
0
36
1
4
3
2

2
i
4
1
2
benefactor
36
1
4
3
2
t
2
i
4
1
2
Benedict
36
1
4
3
2

2

4
2
2
benediction
2
Benedictine
36
1
4
3
2
i
2
c
4
1
2
Benedikt
36
1
4
3
2

2
df
4
3
2
benevolent
2
Benelux
2
beneath
36
1
4
3
2

2

4
2
2
Bendix
2
bend
36
1
4
3
2
h
2

4
2
2
benchmark
2
bench
36
1
4
3
2

2
cdegintz
4
3
2
Benson
2
Benjamin
2
Ben
36
1
4
3
2

2

4
3
2
beman
2
bemadden
2
BEMA
36
1
4
3
2

2
A
4
2
2
bemuse
2
bemoan
36
1
4
3
2

2

4
2
2
belvidere
2
belvedere
36
1
4
3
2

2

4
2
2
Beltsville
2
belt
36
1
4
3
2

2
n
4
3
2
below
2
belove
2
Beloit
36
1
4
3
2

2

4
3
2
bellyfull
2
bellyache
2
belly
36
1
4
3
2

2

4
2
2
bellmen
2
bellman
36
1
4
3
2

2

4
2
2
Bellini
2
Bellingham
36
1
4
3
2

2
n
4
2
2
belligerent
2
bellicose
36
1
4
3
2

2

4
4
2
Bellatrix
2
Bellamy
2
belladonna
2
Bella
36
1
4
3
2

2
aimy
4
8
2
bellwether
2
bellum
2
bellow
2
bellhop
2
bellflower
2
belle
2
bellboy
2
bell
36
1
4
3
2

2
v
4
2
2
belief
2
belie
36
1
4
3
2

2
e
4
1
2
belittle
36
1
4
3
2

2

4
2
2
Belgium
2
Belgian
36
1
4
3
2

2
i
4
1
2
Belgrade
36
1
4
3
2

2

4
2
2
belfry
2
Belfast
36
1
4
3
2

2

4
2
2
belate
2
Bela
36
1
4
3
2

2
afgilotv
4
5
2
belying
2
Belshazzar
2
Belmont
2
belch
2
bel
36
1
4
3
2

2

4
4
2
Beirut
2
being
2
beige
2
Beijing
36
1
4
3
2

2

4
2
2
beheld
2
behead
36
1
4
3
2

2
v
4
1
2
behalf
36
1
4
3
2

2
ie
4
0
36
1
4
3
2

2
ae
4
2
2
behold
2
behind
36
1
4
3
2

2

4
2
2
begun
2
beguile
36
1
4
3
2

2

4
2
2
begotten
2
begonia
36
1
4
3
2

2

4
2
2
beginning
2
beginner
36
1
4
3
2
n
2
n
4
1
2
begin
36
1
4
3
2
r
2

4
2
2
beggary
2
beggar
36
1
4
3
2

2
a
4
1
2
begging
36
1
4
3
2
t
2

4
2
2
begetting
2
beget
36
1
4
3
2

2
egiou
4
3
2
begrudge
2
began
2
beg
36
1
4
3
2
e
2

4
2
2
beforehand
2
before
36
1
4
3
2

2

4
2
2
befogging
2
befog
36
1
4
3
2

2
gr
4
1
2
befoul
36
1
4
3
2
t
2

4
2
2
befitting
2
befit
36
1
4
3
2
ll
2

4
2
2
befallen
2
befall
36
1
4
3
2

2
aio
4
2
2
befuddle
2
befell
36
1
4
3
2

2

4
3
2
beetle
2
Beethoven
2
beet
36
1
4
3
2

2

4
3
2
beefy
2
beefsteak
2
beef
36
1
4
3
2
h
2

4
3
2
beechwood
2
Beecham
2
beech
36
1
4
3
2

2

4
2
2
beebread
2
Beebe
36
1
4
3
2

2
bcft
4
5
2
beer
2
beep
2
been
2
beehive
2
bee
36
1
4
3
2
r
2

4
2
2
bedspring
2
bedspread
36
1
4
3
2

2
p
4
2
2
bedstraw
2
bedside
36
1
4
3
2

2

4
2
2
bedroom
2
bedrock
36
1
4
3
2

2
o
4
2
2
bedridden
2
bedraggle
36
1
4
3
2

2

4
2
2
bedimming
2
bedimmed
36
1
4
3
2
m
2
m
4
1
2
bedim
36
1
4
3
2

2

4
2
2
Bedford
2
bedfast
36
1
4
3
2

2
firs
4
6
2
bedtime
2
bedpost
2
bedlam
2
bedbug
2
bedazzle
2
bed
36
1
4
3
2

2

4
5
2
Becky
2
beckon
2
Beckman
2
becket
2
beck
36
1
4
3
2

2

4
3
2
because
2
became
2
becalm
36
1
4
3
2

2
ak
4
2
2
become
2
Bechtel
36
1
4
3
2
f
2

4
2
2
beautify
2
beautiful
36
1
4
3
2

2
i
4
2
2
beauty
2
beauteous
36
1
4
3
2

2
t
4
5
2
beaux
2
Beauregard
2
Beaumont
2
Beaujolais
2
beau
36
1
4
3
2

2

4
2
2
beatify
2
beatific
36
1
4
3
2

2
f
4
1
2
beatitude
36
1
4
3
2

2

4
2
2
beater
2
beaten
36
1
4
3
2

2
ei
4
3
2
Beatrice
2
beatnik
2
beat
36
1
4
3
2
t
2

4
2
2
beastie
2
beast
36
1
4
3
2

2

4
2
2
Beardsley
2
beard
36
1
4
3
2

2
d
4
3
2
bearish
2
bearberry
2
bear
36
1
4
3
2

2

4
3
2
beady
2
beadle
2
bead
36
1
4
3
2

2
h
4
1
2
beacon
36
1
4
3
2

2

4
2
2
beachhead
2
beach
36
1
4
3
2

2
cdrstu
4
4
2
beaver
2
bean
2
beam
2
beak
36
1
4
3
2

2
acdefghilmnoqrstvwy
4
4
2
bezel
2
beplaster
2
bebop
2
be
36
1
4
3
2

2

4
2
2
Bayonne
2
bayonet
36
1
4
3
2

2
n
4
1
2
bayou
36
1
4
3
2

2
o
4
7
2
Bayreuth
2
Bayport
2
Baylor
2
Bayesian
2
Bayda
2
bayberry
2
bay
36
1
4
3
2

2

4
2
2
bawdy
2
bawd
36
1
4
3
2

2
d
4
1
2
bawl
36
1
4
3
2

2

4
2
2
Baudelaire
2
baud
36
1
4
3
2

2
d
4
5
2
bauxite
2
Bausch
2
Bauhaus
2
Bauer
2
bauble
36
1
4
3
2

2

4
2
2
battlefront
2
battlefield
36
1
4
3
2
e
2
f
4
2
2
battleground
2
battle
36
1
4
3
2

2

4
3
2
battery
2
batten
2
Battelle
36
1
4
3
2

2
el
4
2
2
battalion
2
batt
36
1
4
3
2

2

4
2
2
Bator
2
baton
36
1
4
3
2
o
2

4
2
2
bathroom
2
bathrobe
36
1
4
3
2

2
r
4
5
2
Bathurst
2
bathtub
2
bathos
2
bathe
2
bath
36
1
4
3
2

2

4
4
2
bater
2
Bateman
2
bateau
2
bate
36
1
4
3
2
h
2

4
2
2
Batchelder
2
batch
36
1
4
3
2

2
cehot
4
4
2
batwing
2
batik
2
Batavia
2
bat
36
1
4
3
2

2

4
3
2
bastion
2
baste
2
bastard
36
1
4
3
2

2

4
2
2
bassinet
2
bassi
36
1
4
3
2

2
i
4
4
2
basswood
2
basso
2
Bassett
2
bass
36
1
4
3
2
t
2

4
2
2
basketball
2
basket
36
1
4
3
2

2
e
4
1
2
bask
36
1
4
3
2

2

4
3
2
basilisk
2
basilar
2
basil
36
1
4
3
2

2
lc
4
3
2
basis
2
basin
2
basidiomycetes
36
1
4
3
2

2

4
3
2
bashful
2
bashaw
2
bash
36
1
4
3
2

2

4
2
2
basepoint
2
baseplate
36
1
4
3
2

2

4
2
2
basemen
2
baseman
36
1
4
3
2

2

4
2
2
baseline
2
Basel
36
1
4
3
2

2

4
2
2
baseband
2
baseball
36
1
4
3
2

2
a
4
1
2
baseboard
36
1
4
3
2

2
blmp
4
2
2
based
2
base
36
1
4
3
2
l
2

4
2
2
basalt
2
basal
36
1
4
3
2

2
aehikst
4
1
2
basophilic
36
1
4
3
2

2

4
2
2
Barton
2
Bartok
36
1
4
3
2

2

4
2
2
Bartholomew
2
Barth
36
1
4
3
2

2
n
4
1
2
barter
36
1
4
3
2
d
2

4
2
2
bartender
2
bartend
36
1
4
3
2

2
eho
4
1
2
Bartlett
36
1
4
3
2

2

4
2
2
Barrymore
2
Barry
36
1
4
3
2

2

4
3
2
Barrington
2
barrier
2
barricade
36
1
4
3
2
t
2

4
2
2
barrette
2
Barrett
36
1
4
3
2

2
t
4
3
2
barren
2
barrel
2
barre
36
1
4
3
2

2

4
2
2
barracuda
2
barrack
36
1
4
3
2

2
c
4
1
2
barrage
36
1
4
3
2

2
aeiy
4
2
2
barrow
2
Barr
36
1
4
3
2

2

4
2
2
baronet
2
baroness
36
1
4
3
2

2
e
4
3
2
barony
2
baronial
2
baron
36
1
4
3
2

2
n
4
2
2
baroque
2
barometer
36
1
4
3
2

2

4
2
2
Barnett
2
Barnet
36
1
4
3
2

2
t
4
2
2
Barney
2
Barnes
36
1
4
3
2

2

4
3
2
Barnard
2
barnacle
2
Barnabas
36
1
4
3
2

2
ae
4
4
2
barnyard
2
barnstorm
2
Barnhard
2
barn
36
1
4
3
2

2

4
2
2
Barlow
2
barley
36
1
4
3
2

2

4
2
2
barkeep
2
bark
36
1
4
3
2

2

4
2
2
barium
2
baritone
36
1
4
3
2

2

4
2
2
barge
2
bargain
36
1
4
3
2

2

4
2
2
barefoot
2
barefaced
36
1
4
3
2

2
f
4
1
2
bare
36
1
4
3
2

2

4
2
2
Barclay
2
Barcelona
36
1
4
3
2
t
2

4
2
2
barbiturate
2
barbital
36
1
4
3
2

2

4
2
2
barberry
2
barber
36
1
4
3
2

2
r
4
2
2
barbell
2
barbecue
36
1
4
3
2

2

4
3
2
barbarism
2
barbaric
2
barbarian
36
1
4
3
2

2
i
4
2
2
barbarous
2
Barbara
36
1
4
3
2

2
r
4
1
2
Barbados
36
1
4
3
2

2
aei
4
3
2
barbudo
2
Barbour
2
barb
36
1
4
3
2

2
bcegiklnort
4
5
2
barycentric
2
Barstow
2
barfly
2
bard
2
bar
36
1
4
3
2

2

4
2
2
baptistery
2
Baptiste
36
1
4
3
2

2
e
4
1
2
Baptist
36
1
4
3
2

2

4
2
2
baptismal
2
baptism
36
1
4
3
2
tis
2
mt
4
0
36
1
4
3
2

2

4
2
2
Bantus
2
Bantu
36
1
4
3
2

2
u
4
2
2
banter
2
bantam
36
1
4
3
2
upt
2

4
2
2
bankruptcy
2
bankrupt
36
1
4
3
2

2
r
4
2
2
banks
2
bank
36
1
4
3
2
s
2

4
2
2
banister
2
banish
36
1
4
3
2

2

4
2
2
bangle
2
Bangladesh
36
1
4
3
2

2
l
4
4
2
Bangui
2
Bangor
2
bangkok
2
bang
36
1
4
3
2

2

4
3
2
baneful
2
baneberry
2
bane
36
1
4
3
2

2

4
2
2
bandwidth
2
bandwagon
36
1
4
3
2
t
2

4
2
2
bandstop
2
bandstand
36
1
4
3
2

2
sw
4
6
2
bandy
2
bandpass
2
bandit
2
bandgap
2
bandage
2
band
36
1
4
3
2

2

4
3
2
banana
2
banal
2
Banach
36
1
4
3
2

2
adegikt
4
5
2
banshee
2
banquet
2
banjo
2
Banbury
2
ban
36
1
4
3
2

2

4
3
2
bamboo
2
Bambi
2
Bamberger
36
1
4
3
2

2
b
4
2
2
Bamako
2
bam
36
1
4
3
2
ore
2

4
2
2
Baltimorean
2
Baltimore
36
1
4
3
2
i
2
m
4
1
2
Baltic
36
1
4
3
2
a
2

4
2
2
balsam
2
balsa
36
1
4
3
2

2

4
2
2
balmy
2
balm
36
1
4
3
2

2

4
2
2
ballot
2
balloon
36
1
4
3
2

2

4
2
2
balletomane
2
ballet
36
1
4
3
2

2
t
4
1
2
ballerina
36
1
4
3
2

2

4
3
2
ballast
2
Ballard
2
ballad
36
1
4
3
2

2
aeo
4
4
2
ballyhoo
2
ballroom
2
ballfield
2
ball
36
1
4
3
2

2

4
3
2
balky
2
Balkan
2
balk
36
1
4
3
2

2

4
2
2
Balinese
2
Bali
36
1
4
3
2

2

4
3
2
baleful
2
baleen
2
bale
36
1
4
3
2

2

4
4
2
baldy
2
Baldwin
2
baldpate
2
bald
36
1
4
3
2

2
deiklmst
4
6
2
Balzac
2
balustrade
2
Balfour
2
balcony
2
Balboa
2
balance
36
1
4
3
2

2
r
4
2
2
Bakelite
2
bake
36
1
4
3
2

2

4
2
2
bakery
2
Bakersfield
36
1
4
3
2

2
e
4
3
2
Baku
2
baklava
2
Bakhtiari
36
1
4
3
2

2

4
3
2
bailiff
2
Bailey
2
bail
36
1
4
3
2

2
l
4
3
2
bait
2
Baird
2
bainite
36
1
4
3
2

2

4
3
2
Bahrein
2
Bahama
2
bah
36
1
4
3
2

2

4
3
2
baggy
2
bagging
2
baggage
36
1
4
3
2

2
g
4
5
2
bagpipe
2
Bagley
2
Baghdad
2
bagatelle
2
bag
36
1
4
3
2
f
2

4
2
2
baffle
2
Baffin
36
1
4
3
2

2

4
2
2
Baden
2
bade
36
1
4
3
2

2
e
4
5
2
badminton
2
badland
2
badinage
2
badge
2
bad
36
1
4
3
2

2

4
2
2
bacterial
2
bacteria
36
1
4
3
2
eri
2
a
4
1
2
bacterium
36
1
4
3
2

2
r
4
1
2
backwater
36
1
4
3
2

2
a
4
1
2
backwood
36
1
4
3
2

2

4
3
2
backstop
2
backstitch
2
backstage
36
1
4
3
2

2
t
4
2
2
backspace
2
backside
36
1
4
3
2
a
2

4
2
2
backplate
2
backplane
36
1
4
3
2

2
l
4
1
2
backpack
36
1
4
3
2

2

4
2
2
backlog
2
backlash
36
1
4
3
2
o
2

4
2
2
backbone
2
backboard
36
1
4
3
2

2
blpsw
4
9
2
backyard
2
backup
2
backtrack
2
backorder
2
backhand
2
background
2
backfill
2
backdrop
2
back
36
1
4
3
2
ll
2

4
2
2
bacillus
2
bacilli
36
1
4
3
2

2

4
2
2
bachelor
2
Bach
36
1
4
3
2

2
a
4
1
2
Bacchus
36
1
4
3
2

2

4
2
2
baccarat
2
baccalaureate
36
1
4
3
2

2
chikt
4
1
2
bacon
36
1
4
3
2

2
bey
4
2
2
baboon
2
Babcock
36
1
4
3
2
t
2

4
2
2
babysitting
2
babysit
36
1
4
3
2

2
i
4
1
2
babysat
36
1
4
3
2

2
s
4
2
2
Babylon
2
baby
36
1
4
3
2

2

4
2
2
Babel
2
babe
36
1
4
3
2

2

4
2
2
babble
2
babbitt
36
1
4
3
2

2
bcdfghiklmnprstuwy
4
3
2
bazaar
2
Baxter
2
Bavaria
36
1
4
3
2

2
aehiloruy
4
6
2
BTL
2
BSTJ
2
b's
2
BP
2
BMW
2
b
36
1
4
3
2
ec
2

4
2
2
Aztecan
2
Aztec
36
1
4
3
2
muth
2

4
2
2
azimuthal
2
azimuth
36
1
4
3
2

2
it
4
4
2
azure
2
Azerbaijan
2
azalea
2
AZ
36
1
4
3
2

2

4
2
2
Ayers
2
aye
36
1
4
3
2

2
e
4
1
2
Aylesbury
36
1
4
3
2

2

4
2
2
axon
2
axolotl
36
1
4
3
2

2

4
2
2
axisymmetric
2
axis
36
1
4
3
2

2

4
2
2
axiomatic
2
axiom
36
1
4
3
2

2
m
4
1
2
axiology
36
1
4
3
2

2
os
4
1
2
axial
36
1
4
3
2

2
io
4
3
2
axle
2
axe
2
ax
36
1
4
3
2

2

4
2
2
awesome
2
awe
36
1
4
3
2

2
kr
4
3
2
away
2
awash
2
await
36
1
4
3
2

2

4
2
2
aware
2
award
36
1
4
3
2
e
2

4
2
2
awaken
2
awake
36
1
4
3
2

2
ae
4
7
2
awry
2
awoke
2
awn
2
awl
2
awkward
2
awhile
2
awful
36
1
4
3
2
d
2

4
2
2
avoidance
2
avoid
36
1
4
3
2

2
a
4
1
2
avocet
36
1
4
3
2

2

4
2
2
avocate
2
avocado
36
1
4
3
2

2
ci
4
3
2
avow
2
Avon
2
Avogadro
36
1
4
3
2

2
t
4
1
2
aviary
36
1
4
3
2

2

4
2
2
aviatrix
2
aviate
36
1
4
3
2

2
a
4
4
2
Aviv
2
Avis
2
avionic
2
avid
36
1
4
3
2

2

4
2
2
aversion
2
averse
36
1
4
3
2

2

4
2
2
averring
2
averred
36
1
4
3
2

2
rsa
4
3
2
Avery
2
avert
2
aver
36
1
4
3
2

2

4
3
2
avenue
2
Aventine
2
avenge
36
1
4
3
2

2
nr
4
2
2
Avesta
2
Ave
36
1
4
3
2

2
ri
4
1
2
avalanche
36
1
4
3
2
ic
2

4
2
2
avaricious
2
avarice
36
1
4
3
2

2
aeio
4
0
36
1
4
3
2
mn
2

4
2
2
autumnal
2
autumn
36
1
4
3
2
om
2

4
3
2
autonomy
2
autonomous
2
autonomic
36
1
4
3
2

2

4
3
2
automotive
2
automorphism
2
automobile
36
1
4
3
2
t
2
i
4
4
2
automaton
2
automate
2
automata
2
automat
36
1
4
3
2

2
ao
4
0
36
1
4
3
2

2

4
2
2
autocratic
2
autocrat
36
1
4
3
2
a
2
t
4
1
2
autocracy
36
1
4
3
2

2

4
2
2
autocorrelate
2
autocollimate
36
1
4
3
2

2
or
4
1
2
autoclave
36
1
4
3
2

2
cmn
4
6
2
autotransformer
2
autosuggestible
2
autopsy
2
autograph
2
autobiography
2
auto
36
1
4
3
2
s
2

4
2
2
autistic
2
autism
36
1
4
3
2

2
eo
4
0
36
1
4
3
2
ta
2

4
2
2
authoritative
2
authoritarian
36
1
4
3
2
r
2
i
4
1
2
author
36
1
4
3
2
ntic
2

4
2
2
authenticate
2
authentic
36
1
4
3
2

2
hiou
4
0
36
1
4
3
2
li
2

4
3
2
australite
2
Australis
2
Australia
36
1
4
3
2

2
a
4
1
2
Austria
36
1
4
3
2

2

4
2
2
austere
2
austenite
36
1
4
3
2

2
er
4
1
2
Austin
36
1
4
3
2
ic
2

4
2
2
auspicious
2
auspices
36
1
4
3
2

2
pt
4
1
2
Auschwitz
36
1
4
3
2

2

4
2
2
aurora
2
aurochs
36
1
4
3
2

2

4
2
2
Auriga
2
auric
36
1
4
3
2

2

4
2
2
aureomycin
2
Aurelius
36
1
4
3
2

2

4
2
2
aural
2
aura
36
1
4
3
2

2
aeio
4
0
36
1
4
3
2
t
2

4
2
2
auntie
2
aunt
36
1
4
3
2
t
2

4
4
2
Augustus
2
Augustine
2
Augusta
2
august
36
1
4
3
2

2
s
4
1
2
augur
36
1
4
3
2
ent
2

4
2
2
augmentation
2
augment
36
1
4
3
2

2

4
2
2
auger
2
Augean
36
1
4
3
2

2
emu
4
2
2
augite
2
Aug
36
1
4
3
2
r
2

4
3
2
auditory
2
auditorium
2
auditor
36
1
4
3
2

2
o
4
2
2
audition
2
audit
36
1
4
3
2

2

4
3
2
audiovisual
2
audiotape
2
audio
36
1
4
3
2

2
ot
4
2
2
audience
2
audible
36
1
4
3
2
ci
2

4
2
2
audacity
2
audacious
36
1
4
3
2

2
ai
4
2
2
Audubon
2
Audrey
36
1
4
3
2
ion
2

4
2
2
auctioneer
2
auction
36
1
4
3
2

2
t
4
1
2
Auckland
36
1
4
3
2

2

4
3
2
auburn
2
Aubrey
2
Auberge
36
1
4
3
2

2
bcdgnrst
4
3
2
auxiliary
2
auk
2
Auerbach
36
1
4
3
2

2

4
2
2
Atwood
2
Atwater
36
1
4
3
2
ut
2
i
4
1
2
attribute
36
1
4
3
2

2

4
2
2
attributive
2
attribution
36
1
4
3
2

2
b
4
1
2
attrition
36
1
4
3
2

2
i
4
1
2
attract
36
1
4
3
2

2

4
2
2
Attica
2
attic
36
1
4
3
2

2
c
4
2
2
attitude
2
attire
36
1
4
3
2
t
2

4
2
2
attestation
2
attest
36
1
4
3
2
i
2

4
2
2
attentive
2
attention
36
1
4
3
2

2

4
3
2
attendee
2
attendant
2
attend
36
1
4
3
2

2
dt
4
1
2
attenuate
36
1
4
3
2

2
ns
4
1
2
attempt
36
1
4
3
2

2
ci
4
0
36
1
4
3
2
n
2

4
2
2
attainder
2
attain
36
1
4
3
2

2
h
4
1
2
attack
36
1
4
3
2

2

4
2
2
attache
2
attach
36
1
4
3
2

2
aeir
4
2
2
attune
2
attorney
36
1
4
3
2

2

4
2
2
atrophy
2
atrophic
36
1
4
3
2

2
h
4
1
2
Atropos
36
1
4
3
2
i
2

4
2
2
atrocity
2
atrocious
36
1
4
3
2

2
cp
4
0
36
1
4
3
2

2
o
4
1
2
Atreus
36
1
4
3
2

2

4
2
2
atone
2
atonal
36
1
4
3
2

2

4
2
2
atomic
2
atom
36
1
4
3
2

2
mn
4
1
2
atop
36
1
4
3
2
ospher
2

4
2
2
atmospheric
2
atmosphere
36
1
4
3
2
t
2
i
4
2
2
atlantes
2
Atlanta
36
1
4
3
2

2

4
2
2
Atlantica
2
atlantic
36
1
4
3
2

2
c
4
1
2
Atlantis
36
1
4
3
2
a
2
n
4
1
2
atlas
36
1
4
3
2
ins
2

4
2
2
Atkinson
2
Atkins
36
1
4
3
2
et
2

4
2
2
athletic
2
athlete
36
1
4
3
2

2

4
3
2
Athens
2
Athenian
2
Athena
36
1
4
3
2
s
2

4
2
2
atheist
2
atheism
36
1
4
3
2

2
in
4
0
36
1
4
3
2

2
el
4
2
2
athwart
2
Athabascan
36
1
4
3
2
is
2

4
2
2
atavistic
2
atavism
36
1
4
3
2

2
v
4
1
2
Atalanta
36
1
4
3
2

2
ahklmortw
4
5
2
atypic
2
AT&T
2
ate
2
Atchison
2
at
36
1
4
3
2
chron
2

4
2
2
asynchrony
2
asynchronous
36
1
4
3
2
tot
2

4
2
2
asymptotic
2
asymptote
36
1
4
3
2

2
p
4
1
2
asymmetry
36
1
4
3
2

2
mn
4
1
2
asylum
36
1
4
3
2
n
2

4
2
2
asunder
2
Asuncion
36
1
4
3
2
hysic
2

4
2
2
astrophysics
2
astrophysical
36
1
4
3
2

2
ao
4
0
36
1
4
3
2
m
2

4
3
2
astronomy
2
astronomic
2
astronomer
36
1
4
3
2
ut
2

4
2
2
astronautic
2
astronaut
36
1
4
3
2

2
np
4
0
36
1
4
3
2

2

4
2
2
astringent
2
astride
36
1
4
3
2

2

4
3
2
astray
2
astral
2
astraddle
36
1
4
3
2

2
aio
4
0
36
1
4
3
2

2

4
2
2
Astoria
2
Astor
36
1
4
3
2

2
r
4
2
2
astound
2
astonish
36
1
4
3
2
gmat
2

4
2
2
astigmatic
2
astigmat
36
1
4
3
2
id
2

4
2
2
asteroidal
2
asteroid
36
1
4
3
2

2

4
2
2
asterisk
2
asteria
36
1
4
3
2
r
2
io
4
2
2
astern
2
aster
36
1
4
3
2

2

4
2
2
astatine
2
Astarte
36
1
4
3
2

2
aeior
4
3
2
astute
2
ASTM
2
asthma
36
1
4
3
2
ri
2

4
2
2
Assyriology
2
Assyria
36
1
4
3
2

2

4
2
2
assure
2
assurance
36
1
4
3
2

2

4
2
2
assumption
2
assume
36
1
4
3
2

2
mr
4
1
2
assuage
36
1
4
3
2
ia
2
t
4
1
2
associable
36
1
4
3
2

2
c
4
2
2
assort
2
assonant
36
1
4
3
2
t
2

4
2
2
assistant
2
assist
36
1
4
3
2
ila
2

4
2
2
Assimilate
2
assimilable
36
1
4
3
2
n
2

4
4
2
assigning
2
assignee
2
assignation
2
assign
36
1
4
3
2
u
2

4
2
2
assiduous
2
assiduity
36
1
4
3
2

2
dgms
4
0
36
1
4
3
2
s
2

4
2
2
assessor
2
assess
36
1
4
3
2
bl
2

4
2
2
assemble
2
assemblage
36
1
4
3
2

2
ms
4
3
2
asset
2
assert
2
assent
36
1
4
3
2
sin
2

4
2
2
assassinate
2
assassin
36
1
4
3
2

2
l
4
1
2
assai
36
1
4
3
2

2

4
2
2
assailant
2
assail
36
1
4
3
2

2
is
4
3
2
assay
2
assault
2
Assam
36
1
4
3
2

2
aeiouy
4
1
2
ass
36
1
4
3
2

2

4
2
2
aspirate
2
aspirant
36
1
4
3
2

2
a
4
2
2
aspirin
2
aspire
36
1
4
3
2

2
r
4
1
2
aspidistra
36
1
4
3
2

2

4
3
2
asphyxiate
2
aspheric
2
asphalt
36
1
4
3
2

2

4
2
2
aspersion
2
asperity
36
1
4
3
2

2
r
4
2
2
aspen
2
aspect
36
1
4
3
2
r
2
a
4
1
2
aspartic
36
1
4
3
2
g
2

4
2
2
asparagus
2
asparagine
36
1
4
3
2

2
aehi
4
1
2
asplenium
36
1
4
3
2

2
e
4
3
2
asking
2
askance
2
ask
36
1
4
3
2

2

4
2
2
Asiatic
2
Asia
36
1
4
3
2

2
a
4
3
2
asinine
2
Asilomar
2
aside
36
1
4
3
2

2

4
3
2
Ashmolean
2
ashmen
2
ashman
36
1
4
3
2

2

4
2
2
Ashley
2
Ashland
36
1
4
3
2

2

4
3
2
Asheville
2
Asher
2
ashen
36
1
4
3
2

2
elm
4
5
2
ashy
2
ashtray
2
ashore
2
ashame
2
ash
36
1
4
3
2
i
2

4
2
2
ascription
2
ascribe
36
1
4
3
2

2
n
4
2
2
ascetic
2
ascertain
36
1
4
3
2

2
d
4
2
2
ascent
2
ascension
36
1
4
3
2

2

4
2
2
ascendant
2
ascend
36
1
4
3
2

2
er
4
2
2
ASCII
2
ascomycetes
36
1
4
3
2

2
chikpstuy
4
5
2
asocial
2
asleep
2
aseptic
2
asbestos
2
as
36
1
4
3
2

2

4
2
2
arum
2
Aruba
36
1
4
3
2

2

4
2
2
artistry
2
artisan
36
1
4
3
2
c
2
e
4
1
2
artificial
36
1
4
3
2

2
i
4
1
2
artifact
36
1
4
3
2

2
u
4
2
2
article
2
artichoke
36
1
4
3
2
lat
2

4
2
2
articulatory
2
articulate
36
1
4
3
2

2
cfs
4
2
2
artillery
2
Artie
36
1
4
3
2

2

4
2
2
Arthur
2
arthritis
36
1
4
3
2

2
o
4
1
2
arterial
36
1
4
3
2

2

4
2
2
arteriolosclerosis
2
arteriole
36
1
4
3
2

2
l
4
1
2
arteriosclerosis
36
1
4
3
2

2
i
4
1
2
artery
36
1
4
3
2
is
2

4
2
2
artemisia
2
Artemis
36
1
4
3
2

2
mr
4
0
36
1
4
3
2

2
ehi
4
5
2
arty
2
artwork
2
Arturo
2
artful
2
art
36
1
4
3
2
n
2
ai
4
0
36
1
4
3
2

2

4
2
2
arsenide
2
arsenic
36
1
4
3
2

2

4
2
2
arsenate
2
arsenal
36
1
4
3
2

2
e
4
2
2
arson
2
arsine
36
1
4
3
2

2

4
3
2
arrowroot
2
arrowhead
2
arrow
36
1
4
3
2
a
2

4
2
2
arrogate
2
arrogant
36
1
4
3
2

2
gw
4
1
2
arroyo
36
1
4
3
2
v
2

4
2
2
arrive
2
arrival
36
1
4
3
2

2

4
2
2
arrest
2
arrear
36
1
4
3
2

2
n
4
4
2
array
2
arraign
2
Arragon
2
arrack
36
1
4
3
2
ge
2

4
2
2
arrangeable
2
arrange
36
1
4
3
2

2
aeio
4
1
2
Arrhenius
36
1
4
3
2

2

4
2
2
arpeggio
2
ARPA
36
1
4
3
2

2

4
2
2
arouse
2
arousal
36
1
4
3
2

2
s
4
1
2
around
36
1
4
3
2
a
2

4
2
2
aromatic
2
aroma
36
1
4
3
2

2
mu
4
1
2
arose
36
1
4
3
2

2

4
3
2
Armour
2
Armonk
2
armoire
36
1
4
3
2

2

4
2
2
armistice
2
armillaria
36
1
4
3
2

2

4
2
2
Armco
2
armchair
36
1
4
3
2

2

4
2
2
armature
2
Armata
36
1
4
3
2

2

4
2
2
armadillo
2
armada
36
1
4
3
2

2
dt
4
2
2
armament
2
Armageddon
36
1
4
3
2

2
acios
4
7
2
army
2
armpit
2
armload
2
armhole
2
armful
2
Armenia
2
arm
36
1
4
3
2
n
2

4
2
2
Arlene
2
Arlen
36
1
4
3
2

2
e
4
1
2
Arlington
36
1
4
3
2
nsa
2

4
2
2
Arkansas
2
Arkansan
36
1
4
3
2

2
a
4
1
2
ark
36
1
4
3
2
l
2

4
2
2
Aristotelian
2
Aristotelean
36
1
4
3
2

2
e
4
1
2
Aristotle
36
1
4
3
2
ra
2
t
4
1
2
aristocracy
36
1
4
3
2

2

4
2
2
aristocratic
2
aristocrat
36
1
4
3
2
o
2
ct
4
0
36
1
4
3
2

2

4
2
2
arisen
2
arise
36
1
4
3
2

2
et
4
0
36
1
4
3
2

2

4
2
2
Arianism
2
Ariadne
36
1
4
3
2

2
as
4
4
2
Arizona
2
arithmetic
2
Aries
2
arid
36
1
4
3
2
ti
2

4
2
2
argumentative
2
argumentation
36
1
4
3
2
ent
2
a
4
1
2
argument
36
1
4
3
2

2
m
4
2
2
Argus
2
argue
36
1
4
3
2

2

4
3
2
Argonne
2
Argonaut
2
argon
36
1
4
3
2

2
n
4
2
2
argot
2
argo
36
1
4
3
2

2

4
3
2
Argive
2
arginine
2
argillaceous
36
1
4
3
2

2
iou
4
1
2
Argentina
36
1
4
3
2

2

4
2
2
arenaceous
2
arena
36
1
4
3
2

2
a
4
1
2
aren't
36
1
4
3
2

2

4
2
2
areawide
2
areaway
36
1
4
3
2

2
w
4
1
2
area
36
1
4
3
2

2
an
4
3
2
Ares
2
Arequipa
2
are
36
1
4
3
2
n
2

4
2
2
ardent
2
Arden
36
1
4
3
2

2
e
4
1
2
arduous
36
1
4
3
2
n
2

4
2
2
arctangent
2
arctan
36
1
4
3
2

2
a
4
2
2
Arcturus
2
arctic
36
1
4
3
2
in
2

4
2
2
arcsine
2
arcsin
36
1
4
3
2

2

4
2
2
archive
2
archival
36
1
4
3
2
r
2

4
2
2
architecture
2
architectural
36
1
4
3
2
ect
2
u
4
2
2
architectonic
2
architect
36
1
4
3
2

2
tv
4
3
2
archipelago
2
Archimedes
2
Archibald
36
1
4
3
2
yp
2

4
2
2
archetypical
2
archetype
36
1
4
3
2

2
t
4
2
2
archery
2
archenemy
36
1
4
3
2

2

4
2
2
archaism
2
archaic
36
1
4
3
2

2
i
4
2
2
archangel
2
archae
36
1
4
3
2

2
aei
4
4
2
archfool
2
archdiocese
2
archbishop
2
arch
36
1
4
3
2
os
2

4
2
2
arccosine
2
arccos
36
1
4
3
2

2

4
2
2
arcane
2
arcana
36
1
4
3
2

2

4
2
2
Arcadia
2
arcade
36
1
4
3
2

2
dn
4
0
36
1
4
3
2

2
achst
4
3
2
arclength
2
arcing
2
arc
36
1
4
3
2
re
2

4
2
2
arboretum
2
arboreal
36
1
4
3
2
t
2
r
4
1
2
arbiter
36
1
4
3
2
a
2

4
3
2
arbitrate
2
arbitrary
2
arbitrage
36
1
4
3
2

2
io
4
1
2
arbutus
36
1
4
3
2
hn
2

4
2
2
arachnid
2
Arachne
36
1
4
3
2

2
i
4
3
2
Araby
2
arabesque
2
Arab
36
1
4
3
2

2

4
2
2
Arabic
2
Arabia
36
1
4
3
2

2
bc
4
0
36
1
4
3
2

2
abcdegiklmoprstu
4
4
2
aryl
2
Arnold
2
arhat
2
AR
36
1
4
3
2

2

4
2
2
Aquinas
2
Aquila
36
1
4
3
2

2

4
2
2
aqueous
2
aqueduct
36
1
4
3
2

2
r
4
2
2
aquatic
2
aqua
36
1
4
3
2
iu
2

4
2
2
Aquarius
2
aquarium
36
1
4
3
2
u
2
aei
4
0
36
1
4
3
2

2

4
2
2
aptitude
2
apt
36
1
4
3
2

2

4
2
2
apropos
2
apron
36
1
4
3
2

2

4
2
2
April
2
apricot
36
1
4
3
2

2
io
4
0
36
1
4
3
2
ima
2

4
3
2
approximate
2
approximant
2
approximable
36
1
4
3
2

2

4
2
2
approve
2
approval
36
1
4
3
2
ria
2

4
2
2
appropriate
2
appropriable
36
1
4
3
2

2
pvx
4
2
2
approbation
2
approach
36
1
4
3
2
i
2

4
2
2
apprehensive
2
apprehension
36
1
4
3
2
en
2
s
4
1
2
apprehend
36
1
4
3
2
ia
2

4
2
2
appreciate
2
appreciable
36
1
4
3
2

2
ch
4
1
2
apprentice
36
1
4
3
2
is
2

4
2
2
appraise
2
appraisal
36
1
4
3
2

2
aeo
4
1
2
apprise
36
1
4
3
2
it
2

4
2
2
apposition
2
apposite
36
1
4
3
2
nt
2
e
4
1
2
appoint
36
1
4
3
2

2

4
2
2
appointee
2
appointe
36
1
4
3
2

2
is
4
1
2
apport
36
1
4
3
2
a
2
t
4
2
2
applicant
2
applicable
36
1
4
3
2

2
c
4
2
2
applique
2
appliance
36
1
4
3
2

2

4
4
2
Appleton
2
applejack
2
Appleby
2
apple
36
1
4
3
2
u
2

4
2
2
applause
2
applaud
36
1
4
3
2

2
aei
4
1
2
apply
36
1
4
3
2

2

4
2
2
appendix
2
appendices
36
1
4
3
2
d
2
i
4
2
2
appendage
2
append
36
1
4
3
2
la
2

4
2
2
appellate
2
appellant
36
1
4
3
2

2
rs
4
1
2
appeal
36
1
4
3
2

2

4
2
2
appease
2
appeasable
36
1
4
3
2

2

4
2
2
appearance
2
appear
36
1
4
3
2

2
aln
4
2
2
appetite
2
appertain
36
1
4
3
2

2
lr
4
1
2
appanage
36
1
4
3
2

2

4
2
2
apparent
2
apparel
36
1
4
3
2

2
e
4
2
2
apparition
2
apparatus
36
1
4
3
2

2

4
2
2
appall
2
Appalachia
36
1
4
3
2

2
aelor
4
1
2
Appian
36
1
4
3
2
he
2

4
3
2
apotheosis
2
apothegm
2
apothecary
36
1
4
3
2
t
2

4
4
2
apostrophe
2
apostolic
2
apostle
2
apostate
36
1
4
3
2
g
2

4
3
2
apology
2
apologia
2
apologetic
36
1
4
3
2
o
2

4
2
2
Apollonian
2
Apollo
36
1
4
3
2

2
lo
4
0
36
1
4
3
2

2
ar
4
0
36
1
4
3
2
ypha
2

4
2
2
apocryphal
2
Apocrypha
36
1
4
3
2
lyp
2

4
2
2
apocalyptic
2
apocalypse
36
1
4
3
2

2
clst
4
1
2
apogee
36
1
4
3
2

2

4
2
2
apiece
2
apices
36
1
4
3
2
si
2

4
2
2
aphasic
2
aphasia
36
1
4
3
2

2
a
4
4
2
Aphrodite
2
aphorism
2
aphid
2
aphelion
36
1
4
3
2

2

4
2
2
aperture
2
aperiodic
36
1
4
3
2

2
r
4
2
2
apex
2
ape
36
1
4
3
2

2
rt
4
1
2
apache
36
1
4
3
2

2

4
2
2
apathy
2
apathetic
36
1
4
3
2

2
h
4
1
2
apatite
36
1
4
3
2
t
2

4
2
2
apartheid
2
apart
36
1
4
3
2

2
aehioprt
4
2
2
apse
2
aplomb
36
1
4
3
2

2

4
2
2
A&P
2
A&M
36
1
4
3
2

2

4
2
2
anywhere
2
anyway
36
1
4
3
2
ody
2

4
2
2
anybody'd
2
anybody
36
1
4
3
2

2
bw
4
5
2
anything
2
anyplace
2
anyone
2
anyhow
2
any
36
1
4
3
2
i
2

4
2
2
anxious
2
anxiety
36
1
4
3
2

2

4
2
2
antonym
2
Antony
36
1
4
3
2

2
y
4
2
2
Antonio
2
Anton
36
1
4
3
2
ne
2

4
2
2
Antoinette
2
Antoine
36
1
4
3
2

2
in
4
0
36
1
4
3
2
emit
2

4
2
2
antisemitic
2
antisemite
36
1
4
3
2

2
r
4
1
2
antiquated
36
1
4
3
2

2

4
2
2
antiquary
2
antiquarian
36
1
4
3
2
u
2
a
4
2
2
antiquity
2
antique
36
1
4
3
2

2

4
2
2
antipathy
2
antipasto
36
1
4
3
2

2
a
4
3
2
antipode
2
antiphonal
2
antiperspirant
36
1
4
3
2

2

4
2
2
antigorite
2
Antigone
36
1
4
3
2

2
o
4
1
2
antigen
36
1
4
3
2
pat
2

4
2
2
anticipatory
2
anticipate
36
1
4
3
2

2
i
4
1
2
antic
36
1
4
3
2

2
cgpqs
4
5
2
antithetic
2
Antioch
2
antimony
2
Antietam
2
anti
36
1
4
3
2
po
2

4
3
2
anthropomorphic
2
anthropology
2
anthropogenic
36
1
4
3
2
c
2

4
2
2
anthracnose
2
anthracite
36
1
4
3
2

2
ao
4
0
36
1
4
3
2

2

4
2
2
Anthony
2
anthology
36
1
4
3
2

2

4
2
2
anther
2
anthem
36
1
4
3
2

2
eor
4
0
36
1
4
3
2
na
2

4
2
2
antennae
2
antenna
36
1
4
3
2

2
n
4
7
2
anterior
2
antelope
2
antedate
2
antecedent
2
antebellum
2
anteater
2
ante
36
1
4
3
2
tic
2

4
2
2
Antarctica
2
antarctic
36
1
4
3
2

2
c
4
1
2
Antares
36
1
4
3
2
onis
2

4
2
2
antagonist
2
antagonism
36
1
4
3
2

2
gr
4
2
2
Antaeus
2
antacid
36
1
4
3
2

2
aehio
4
3
2
Antwerp
2
antler
2
ant
36
1
4
3
2
lm
2

4
2
2
Anselmo
2
Anselm
36
1
4
3
2

2
e
4
2
2
answer
2
ANSI
36
1
4
3
2

2

4
2
2
anorthite
2
anorthic
36
1
4
3
2
h
2
i
4
1
2
anorthosite
36
1
4
3
2

2
t
4
1
2
anorexia
36
1
4
3
2
ym
2

4
2
2
anonymous
2
anonymity
36
1
4
3
2
l
2

4
2
2
anomaly
2
anomalous
36
1
4
3
2

2
a
4
1
2
anomie
36
1
4
3
2

2

4
2
2
anodic
2
anode
36
1
4
3
2

2
dmnr
4
1
2
another
36
1
4
3
2

2

4
2
2
annulling
2
annulled
36
1
4
3
2

2
l
4
4
2
annulus
2
annuli
2
annular
2
annul
36
1
4
3
2

2
l
4
4
2
annunciate
2
annum
2
annuity
2
annual
36
1
4
3
2

2

4
2
2
annoyance
2
annoy
36
1
4
3
2

2
yu
4
1
2
annotate
36
1
4
3
2

2

4
3
2
anniversary
2
annihilate
2
Annie
36
1
4
3
2

2

4
4
2
annex
2
Annette
2
anneal
2
Anne
36
1
4
3
2

2

4
2
2
Annalen
2
Annale
36
1
4
3
2

2
e
4
1
2
annal
36
1
4
3
2

2
l
4
2
2
Annapolis
2
Anna
36
1
4
3
2

2
aeiou
4
1
2
Ann
36
1
4
3
2

2

4
2
2
ankle
2
Ankara
36
1
4
3
2
trop
2

4
2
2
anisotropy
2
anisotropic
36
1
4
3
2

2

4
2
2
aniseikonic
2
anise
36
1
4
3
2

2
eo
4
0
36
1
4
3
2
n
2

4
2
2
anionic
2
anion
36
1
4
3
2

2
d
4
2
2
animate
2
animal
36
1
4
3
2
ver
2

4
2
2
animadvert
2
animadversion
36
1
4
3
2

2
a
4
2
2
animosity
2
animism
36
1
4
3
2

2
mos
4
3
2
Anita
2
aniline
2
ani
36
1
4
3
2

2

4
2
2
anhydrite
2
anhydride
36
1
4
3
2
dr
2
i
4
1
2
anhydrous
36
1
4
3
2

2
y
4
2
2
Anheuser
2
anharmonic
36
1
4
3
2

2

4
3
2
Angus
2
angular
2
anguish
36
1
4
3
2
t
2

4
2
2
angstrom
2
angst
36
1
4
3
2

2

4
2
2
Angora
2
Angola
36
1
4
3
2

2

4
2
2
Anglophobia
2
Anglo
36
1
4
3
2

2

4
2
2
angling
2
Anglican
36
1
4
3
2

2

4
2
2
Angles
2
angle
36
1
4
3
2

2
eio
4
0
36
1
4
3
2

2

4
2
2
angiosperm
2
Angie
36
1
4
3
2

2
l
4
1
2
anger
36
1
4
3
2

2
i
4
5
2
Angelo
2
angelfish
2
Angeles
2
Angela
2
angel
36
1
4
3
2

2

4
2
2
Angeline
2
Angelina
36
1
4
3
2

2

4
2
2
Angelica
2
angelic
36
1
4
3
2

2
cn
4
0
36
1
4
3
2

2
eilosu
4
1
2
angry
36
1
4
3
2
dot
2

4
2
2
anecdote
2
anecdotal
36
1
4
3
2

2
c
4
3
2
anew
2
anent
2
anemone
36
1
4
3
2
m
2

4
2
2
Andromeda
2
Andromache
36
1
4
3
2

2

4
4
2
Andrew
2
Andrei
2
Andrea
2
Andre
36
1
4
3
2

2
eo
4
0
36
1
4
3
2

2

4
2
2
Andover
2
Andorra
36
1
4
3
2

2

4
2
2
andesite
2
andesine
36
1
4
3
2

2
i
4
1
2
Andes
36
1
4
3
2
s
2

4
2
2
Anderson
2
Andersen
36
1
4
3
2

2
rs
4
1
2
Andean
36
1
4
3
2

2
eor
4
2
2
Andy
2
and
36
1
4
3
2

2

4
2
2
ancillary
2
ancient
36
1
4
3
2

2

4
3
2
anchorite
2
anchorage
2
anchor
36
1
4
3
2
o
2
r
4
1
2
anchovy
36
1
4
3
2
st
2
ro
4
0
36
1
4
3
2

2

4
2
2
ancestry
2
ancestral
36
1
4
3
2

2
ehi
4
0
36
1
4
3
2

2

4
2
2
anatomy
2
anatomic
36
1
4
3
2

2
m
4
1
2
Anatole
36
1
4
3
2

2
o
4
1
2
anathema
36
1
4
3
2
mo
2

4
2
2
anastomotic
2
anastomosis
36
1
4
3
2
gmat
2

4
2
2
anastigmatic
2
anastigmat
36
1
4
3
2
t
2
io
4
1
2
Anastasia
36
1
4
3
2
ch
2

4
3
2
anarchy
2
anarchic
2
anarch
36
1
4
3
2

2

4
3
2
analyst
2
analysis
2
analyses
36
1
4
3
2

2
s
4
2
2
analyze
2
analytic
36
1
4
3
2
g
2

4
3
2
analogy
2
analogue
2
analogous
36
1
4
3
2

2
oy
4
2
2
analgesic
2
analeptic
36
1
4
3
2

2

4
2
2
anagram
2
anaglyph
36
1
4
3
2
ronis
2

4
2
2
anachronistic
2
anachronism
36
1
4
3
2

2
h
4
1
2
anaconda
36
1
4
3
2

2

4
2
2
Anabel
2
Anabaptist
36
1
4
3
2

2
bcglrst
4
5
2
anaplasmosis
2
anamorphic
2
Anaheim
2
anaerobic
2
ana
36
1
4
3
2

2
acdeghiknostxy
4
3
2
anvil
2
anus
2
an
36
1
4
3
2

2

4
2
2
amygdaloid
2
amy
36
1
4
3
2

2

4
2
2
amuse
2
amulet
36
1
4
3
2

2

4
2
2
amplitude
2
amplify
36
1
4
3
2

2
i
4
2
2
amply
2
ample
36
1
4
3
2

2
io
4
0
36
1
4
3
2
l
2

4
2
2
amphibology
2
amphibole
36
1
4
3
2

2

4
2
2
amphibious
2
amphibian
36
1
4
3
2

2
b
4
1
2
amphioxis
36
1
4
3
2

2
i
4
1
2
amphetamine
36
1
4
3
2

2

4
3
2
ampersand
2
ampere
2
amperage
36
1
4
3
2

2
r
4
1
2
Ampex
36
1
4
3
2

2
ehl
4
2
2
amputate
2
amp
36
1
4
3
2

2

4
3
2
amort
2
amorphous
2
amoral
36
1
4
3
2
g
2

4
2
2
amongst
2
among
36
1
4
3
2
ba
2

4
2
2
amoebae
2
amoeba
36
1
4
3
2

2
enru
4
3
2
Amos
2
amok
2
Amoco
36
1
4
3
2

2

4
2
2
ammoniac
2
ammonia
36
1
4
3
2
i
2
a
4
1
2
ammonium
36
1
4
3
2

2
n
4
1
2
ammo
36
1
4
3
2

2

4
2
2
ammeter
2
Ammerman
36
1
4
3
2

2
eo
4
2
2
ammunition
2
Amman
36
1
4
3
2
o
2

4
2
2
aminobenzoic
2
amino
36
1
4
3
2

2

4
3
2
amidst
2
amide
2
amid
36
1
4
3
2

2
dn
4
5
2
amity
2
amiss
2
amigo
2
amicable
2
ami
36
1
4
3
2
hyst
2

4
2
2
amethystine
2
amethyst
36
1
4
3
2

2
n
4
1
2
America
36
1
4
3
2
c
2
a
4
1
2
americium
36
1
4
3
2

2
i
4
1
2
Amerada
36
1
4
3
2

2

4
2
2
amende
2
amend
36
1
4
3
2

2
d
4
1
2
amen
36
1
4
3
2
i
2

4
2
2
ameliorate
2
Amelia
36
1
4
3
2

2
lnrt
4
1
2
Ames
36
1
4
3
2

2

4
2
2
ambush
2
ambuscade
36
1
4
3
2
a
2

4
2
2
ambulatory
2
ambulant
36
1
4
3
2

2
ls
4
0
36
1
4
3
2
a
2

4
2
2
ambrosial
2
ambrosia
36
1
4
3
2
os
2
i
4
1
2
ambrose
36
1
4
3
2

2

4
2
2
ambling
2
amble
36
1
4
3
2
io
2

4
2
2
ambitious
2
ambition
36
1
4
3
2
u
2

4
2
2
ambiguous
2
ambiguity
36
1
4
3
2

2
gt
4
4
2
ambivalent
2
ambient
2
ambidextrous
2
ambiance
36
1
4
3
2

2
ilru
4
2
2
amber
2
ambassador
36
1
4
3
2

2

4
2
2
Amazon
2
amaze
36
1
4
3
2
ur
2

4
2
2
amateurish
2
amateur
36
1
4
3
2

2
e
4
1
2
amatory
36
1
4
3
2

2

4
2
2
Amarillo
2
amaranth
36
1
4
3
2

2

4
2
2
amanuensis
2
amanita
36
1
4
3
2
gam
2

4
2
2
amalgamate
2
amalgam
36
1
4
3
2

2
lnrtz
4
3
2
amass
2
Amadeus
2
AMA
36
1
4
3
2

2
abeimopuy
4
5
2
Amtrak
2
Amsterdam
2
amra
2
Amherst
2
am
36
1
4
3
2
ol
2

4
3
2
alveolus
2
alveoli
2
alveolar
36
1
4
3
2

2

4
2
2
Alvarez
2
Alva
36
1
4
3
2

2
ae
4
1
2
Alvin
36
1
4
3
2

2
in
4
1
2
alum
36
1
4
3
2

2

4
2
2
alumnae
2
alumna
36
1
4
3
2

2
a
4
2
2
alumnus
2
alumni
36
1
4
3
2
na
2

4
2
2
aluminate
2
alumina
36
1
4
3
2

2
m
4
1
2
alundum
36
1
4
3
2
uis
2

4
2
2
altruist
2
altruism
36
1
4
3
2

2

4
3
2
Alton
2
altogether
2
alto
36
1
4
3
2

2

4
2
2
altitude
2
altimeter
36
1
4
3
2

2

4
2
2
although
2
althea
36
1
4
3
2

2
a
4
1
2
altern
36
1
4
3
2
r
2
n
4
4
2
alterman
2
altercate
2
alterate
2
alter
36
1
4
3
2

2

4
2
2
altar
2
Altair
36
1
4
3
2

2
aehior
4
0
36
1
4
3
2

2

4
2
2
Alsop
2
also
36
1
4
3
2

2
o
4
1
2
Alsatian
36
1
4
3
2

2
b
4
2
2
alphanumeric
2
alpha
36
1
4
3
2
et
2

4
2
2
alphabetic
2
alphabet
36
1
4
3
2

2
a
4
2
2
Alphonse
2
Alpheratz
36
1
4
3
2

2

4
2
2
Alpert
2
alpenstock
36
1
4
3
2

2
eh
4
2
2
alpine
2
alp
36
1
4
3
2

2

4
2
2
alongside
2
along
36
1
4
3
2

2
g
4
1
2
alone
36
1
4
3
2

2
n
4
5
2
aloud
2
aloof
2
aloha
2
aloft
2
aloe
36
1
4
3
2

2

4
2
2
almost
2
almond
36
1
4
3
2

2

4
4
2
almanac
2
almagest
2
Almaden
2
alma
36
1
4
3
2

2
ao
4
1
2
almighty
36
1
4
3
2

2

4
3
2
Allyn
2
allyl
2
ally
36
1
4
3
2
i
2

4
2
2
alluvium
2
alluvial
36
1
4
3
2
i
2

4
2
2
allusive
2
allusion
36
1
4
3
2

2
sv
4
2
2
allure
2
allude
36
1
4
3
2

2

4
2
2
Allstate
2
allspice
36
1
4
3
2

2

4
4
2
allowed
2
allows
2
allowance
2
allow
36
1
4
3
2

2

4
2
2
allotting
2
allotted
36
1
4
3
2

2
t
4
2
2
allotropic
2
allot
36
1
4
3
2
a
2

4
2
2
allocate
2
allocable
36
1
4
3
2

2
ctw
4
1
2
alloy
36
1
4
3
2

2

4
2
2
Allison
2
Allis
36
1
4
3
2

2
s
4
3
2
alliterate
2
alligator
2
alliance
36
1
4
3
2

2

4
2
2
alleyway
2
alley
36
1
4
3
2
g
2

4
2
2
allergy
2
allergic
36
1
4
3
2

2

4
2
2
Allentown
2
Allen
36
1
4
3
2

2
or
4
4
2
allegiant
2
Allegheny
2
allege
2
allegate
36
1
4
3
2

2

4
2
2
allegro
2
Allegra
36
1
4
3
2
r
2

4
2
2
allegory
2
allegoric
36
1
4
3
2

2
gnry
4
3
2
alleviate
2
allemand
2
allele
36
1
4
3
2

2

4
3
2
allay
2
Allan
2
Allah
36
1
4
3
2

2
aeiosuy
4
1
2
all
36
1
4
3
2

2

4
2
2
alkaline
2
alkali
36
1
4
3
2
al
2
i
4
1
2
alkaloid
36
1
4
3
2

2

4
2
2
Alistair
2
Alison
36
1
4
3
2

2

4
2
2
align
2
alight
36
1
4
3
2
n
2

4
2
2
alienate
2
alien
36
1
4
3
2

2

4
2
2
Alicia
2
Alice
36
1
4
3
2

2
s
4
1
2
alia
36
1
4
3
2

2
acegs
4
8
2
alizarin
2
alive
2
aliquot
2
aliphatic
2
alimony
2
alike
2
alibi
2
Ali
36
1
4
3
2
ithm
2

4
2
2
algorithmic
2
algorithm
36
1
4
3
2

2
r
4
2
2
Algonquin
2
Algol
36
1
4
3
2

2

4
2
2
alginate
2
Algiers
36
1
4
3
2

2

4
2
2
Algeria
2
Alger
36
1
4
3
2
ra
2

4
2
2
algebraic
2
algebra
36
1
4
3
2

2
br
4
1
2
Algenib
36
1
4
3
2

2
e
4
2
2
algal
2
alga
36
1
4
3
2

2

4
2
2
algaecide
2
algae
36
1
4
3
2

2
aeio
4
0
36
1
4
3
2

2

4
2
2
Alfredo
2
Alfred
36
1
4
3
2
e
2
d
4
1
2
alfresco
36
1
4
3
2

2
r
4
2
2
alfonso
2
alfalfa
36
1
4
3
2

2

4
3
2
Alexandria
2
Alexandre
2
Alexandra
36
1
4
3
2
nd
2
r
4
1
2
Alexander
36
1
4
3
2

2
a
4
3
2
Alexis
2
Alexei
2
Alex
36
1
4
3
2

2

4
2
2
Aleck
2
Alec
36
1
4
3
2

2
cx
4
4
2
alewife
2
alert
2
aleph
2
ale
36
1
4
3
2
i
2

4
2
2
aldrin
2
Aldrich
36
1
4
3
2

2
r
4
3
2
Alden
2
aldehyde
2
Aldebaran
36
1
4
3
2

2

4
2
2
aldermen
2
alderman
36
1
4
3
2

2
m
4
1
2
alder
36
1
4
3
2

2
er
4
0
36
1
4
3
2
ol
2

4
2
2
alcoholic
2
alcohol
36
1
4
3
2

2
h
4
3
2
alcove
2
Alcott
2
Alcoa
36
1
4
3
2

2
o
4
3
2
Alcmena
2
alchemy
2
Alcestis
36
1
4
3
2

2

4
2
2
albumin
2
album
36
1
4
3
2

2
m
4
1
2
Albuquerque
36
1
4
3
2

2

4
2
2
Albright
2
Albrecht
36
1
4
3
2

2

4
3
2
Alberto
2
Alberta
2
Albert
36
1
4
3
2

2
t
4
1
2
Alberich
36
1
4
3
2

2
r
4
1
2
albeit
36
1
4
3
2
a
2

4
2
2
Albanian
2
Albania
36
1
4
3
2

2
i
4
1
2
Albany
36
1
4
3
2

2
n
4
3
2
albatross
2
albacore
2
alba
36
1
4
3
2

2
aeru
4
1
2
alb
36
1
4
3
2

2

4
2
2
Alamo
2
Alameda
36
1
4
3
2

2

4
2
2
Alabamian
2
Alabama
36
1
4
3
2
a
2
m
4
1
2
alabaster
36
1
4
3
2

2
bm
4
6
2
Alaska
2
alarm
2
alan
2
alai
2
alacrity
2
ala
36
1
4
3
2

2
abcdefgiklmopstuvw
4
4
2
alyssum
2
already
2
Alhambra
2
AL
36
1
4
3
2

2

4
4
2
Akron
2
akin
2
Akers
2
AK
36
1
4
3
2
a
2

4
2
2
Ajax
2
ajar
36
1
4
3
2

2

4
2
2
airstrip
2
airspeed
36
1
4
3
2

2

4
3
2
airport
2
airplane
2
airpark
36
1
4
3
2

2

4
3
2
airmass
2
airman
2
airmail
36
1
4
3
2

2
a
4
1
2
airmen
36
1
4
3
2

2

4
2
2
airline
2
airlift
36
1
4
3
2

2
i
4
1
2
airlock
36
1
4
3
2

2

4
4
2
airframe
2
airflow
2
airfield
2
airfare
36
1
4
3
2

2

4
2
2
Aires
2
airedale
36
1
4
3
2

2
eflmps
4
7
2
airy
2
airway
2
airtight
2
airdrop
2
aircraft
2
airborne
2
air
36
1
4
3
2

2

4
2
2
Ainu
2
ain't
36
1
4
3
2

2

4
2
2
aileron
2
aile
36
1
4
3
2

2
e
4
2
2
ailanthus
2
ail
36
1
4
3
2

2
e
4
2
2
Aida
2
aid
36
1
4
3
2

2

4
2
2
Aides
2
aide
36
1
4
3
2

2
dlnr
4
4
2
Aitken
2
aisle
2
aim
2
Aiken
36
1
4
3
2

2

4
2
2
ahem
2
ahead
36
1
4
3
2

2
e
4
3
2
ahoy
2
Ahmedabad
2
ah
36
1
4
3
2

2
u
4
1
2
Agricola
36
1
4
3
2
ltur
2

4
2
2
agriculture
2
agricultural
36
1
4
3
2

2
c
4
1
2
agrimony
36
1
4
3
2
e
2

4
5
2
agreement
2
agreed
2
agreeing
2
agreeable
2
agree
36
1
4
3
2

2
ei
4
1
2
agrarian
36
1
4
3
2

2

4
2
2
agony
2
agone
36
1
4
3
2

2
n
4
2
2
agouti
2
ago
36
1
4
3
2

2

4
2
2
agnostic
2
agnomen
36
1
4
3
2

2

4
2
2
Agnew
2
Agnes
36
1
4
3
2

2
eo
4
0
36
1
4
3
2

2

4
3
2
agitate
2
aging
2
agile
36
1
4
3
2

2

4
2
2
aggressive
2
aggression
36
1
4
3
2
s
2
i
4
1
2
aggressor
36
1
4
3
2

2
s
4
1
2
aggregate
36
1
4
3
2

2
e
4
2
2
aggrieve
2
aggravate
36
1
4
3
2

2
u
4
1
2
agglomerate
36
1
4
3
2
tin
2

4
2
2
agglutinin
2
agglutinate
36
1
4
3
2

2
lr
4
0
36
1
4
3
2

2

4
3
2
agency
2
agent
2
agenda
36
1
4
3
2

2
n
4
2
2
Agee
2
age
36
1
4
3
2

2
it
4
2
2
agave
2
Agamemnon
36
1
4
3
2

2

4
2
2
Agatha
2
agate
36
1
4
3
2
n
2

4
2
2
against
2
again
36
1
4
3
2

2
aeginor
4
4
2
Agway
2
ague
2
agleam
2
aghast
36
1
4
3
2

2

4
2
2
afterword
2
afterward
36
1
4
3
2
r
2
w
4
8
2
afterthought
2
afternoon
2
aftermath
2
afterlife
2
afterimage
2
afterglow
2
aftereffect
2
after
36
1
4
3
2

2
e
4
1
2
aft
36
1
4
3
2

2

4
4
2
afro
2
Africa
2
afresh
2
afraid
36
1
4
3
2
e
2

4
3
2
aforethought
2
aforesaid
2
aforementioned
36
1
4
3
2

2
r
4
1
2
afoot
36
1
4
3
2

2

4
2
2
afloat
2
aflame
36
1
4
3
2

2

4
3
2
afire
2
afield
2
aficionado
36
1
4
3
2
han
2

4
2
2
Afghanistan
2
Afghan
36
1
4
3
2

2

4
2
2
affront
2
affricate
36
1
4
3
2
st
2

4
2
2
afforestation
2
afforest
36
1
4
3
2
r
2
e
4
1
2
afford
36
1
4
3
2

2

4
2
2
affluent
2
afflict
36
1
4
3
2
ti
2

4
2
2
affirmative
2
affirmation
36
1
4
3
2
m
2
a
4
1
2
affirm
36
1
4
3
2

2
r
4
5
2
affix
2
affine
2
affiliate
2
affidavit
2
affiance
36
1
4
3
2
t
2

4
3
2
affectionate
2
affectate
2
affect
36
1
4
3
2

2
c
4
1
2
afferent
36
1
4
3
2

2

4
2
2
affair
2
affable
36
1
4
3
2

2
aeilor
4
0
36
1
4
3
2

2
fgilort
4
1
2
afar
36
1
4
3
2
het
2

4
2
2
aesthetic
2
aesthete
36
1
4
3
2

2
t
4
1
2
Aeschylus
36
1
4
3
2

2

4
2
2
aerospace
2
aerosol
36
1
4
3
2

2

4
2
2
aerobic
2
Aerobacter
36
1
4
3
2

2
bs
4
3
2
aeronautic
2
aerogene
2
aerodynamic
36
1
4
3
2

2
o
4
2
2
aerial
2
aerate
36
1
4
3
2
l
2

4
2
2
Aeolus
2
aeolian
36
1
4
3
2
e
2

4
2
2
Aeneid
2
Aeneas
36
1
4
3
2

2

4
2
2
aegis
2
Aegean
36
1
4
3
2

2
gnors
4
0
36
1
4
3
2
ca
2

4
2
2
advocate
2
advocacy
36
1
4
3
2
r
2

4
2
2
advisory
2
advisor
36
1
4
3
2

2

4
2
2
advisee
2
advise
36
1
4
3
2

2
eo
4
1
2
advisable
36
1
4
3
2

2
s
4
1
2
advice
36
1
4
3
2

2

4
2
2
advertise
2
advert
36
1
4
3
2

2

4
2
2
adverse
2
adversary
36
1
4
3
2

2

4
2
2
adverbial
2
adverb
36
1
4
3
2

2
bst
4
0
36
1
4
3
2
t
2
u
4
2
2
adventitious
2
advent
36
1
4
3
2
r
2

4
2
2
adventurous
2
adventure
36
1
4
3
2

2
nr
4
0
36
1
4
3
2
n
2
t
4
1
2
advance
36
1
4
3
2
age
2

4
2
2
advantageous
2
advantage
36
1
4
3
2

2
aeio
4
0
36
1
4
3
2
r
2

4
3
2
adultery
2
adulterous
2
adulterate
36
1
4
3
2

2
e
4
1
2
adult
36
1
4
3
2
l
2
t
4
1
2
adulate
36
1
4
3
2
ti
2

4
2
2
adsorptive
2
adsorption
36
1
4
3
2

2

4
2
2
adsorbate
2
adsorb
36
1
4
3
2
or
2
bp
4
0
36
1
4
3
2

2

4
2
2
Adriatic
2
Adrian
36
1
4
3
2

2
a
4
2
2
adrift
2
Adrienne
36
1
4
3
2
nal
2

4
2
2
adrenaline
2
adrenal
36
1
4
3
2

2
ei
4
1
2
adroit
36
1
4
3
2

2

4
2
2
adorn
2
adore
36
1
4
3
2

2

4
2
2
adoptive
2
adoption
36
1
4
3
2
t
2
i
4
1
2
adopt
36
1
4
3
2
h
2

4
2
2
Adolphus
2
Adolph
36
1
4
3
2

2
p
4
1
2
adolescent
36
1
4
3
2

2
lpr
4
3
2
Adonis
2
adobe
2
ado
36
1
4
3
2
ni
2

4
2
2
admonition
2
admonish
36
1
4
3
2

2
nrstx
4
0
36
1
4
3
2

2

4
2
2
admixture
2
admix
36
1
4
3
2

2

4
3
2
admitting
2
admitted
2
admittance
36
1
4
3
2

2
t
4
1
2
admit
36
1
4
3
2
si
2

4
2
2
admission
2
admissible
36
1
4
3
2

2
l
4
1
2
admiration
36
1
4
3
2

2

4
2
2
admiralty
2
admiral
36
1
4
3
2

2
a
4
1
2
admire
36
1
4
3
2
ist
2
r
4
1
2
administer
36
1
4
3
2

2

4
3
2
administration
2
administratrix
2
administrate
36
1
4
3
2
a
2
t
4
1
2
administrable
36
1
4
3
2

2
io
4
0
36
1
4
3
2

2

4
2
2
adjudicate
2
adjudge
36
1
4
3
2

2
d
4
3
2
adjutant
2
adjust
2
adjunct
36
1
4
3
2
n
2

4
2
2
adjoint
2
adjoin
36
1
4
3
2

2
i
4
1
2
adjourn
36
1
4
3
2
ct
2

4
2
2
adjectival
2
adject
36
1
4
3
2

2
eou
4
1
2
adjacent
36
1
4
3
2

2

4
4
2
Adirondack
2
adipic
2
adieu
2
adiabatic
36
1
4
3
2
i
2

4
2
2
adhesive
2
adhesion
36
1
4
3
2
e
2

4
2
2
adherent
2
adhere
36
1
4
3
2
e
2
rs
4
0
36
1
4
3
2
ua
2

4
2
2
adequate
2
adequacy
36
1
4
3
2

2

4
2
2
adenosine
2
adenoma
36
1
4
3
2

2
o
4
2
2
adenine
2
Aden
36
1
4
3
2

2

4
3
2
Adelia
2
Adele
2
Adelaide
36
1
4
3
2

2
lnq
4
1
2
adept
36
1
4
3
2
ess
2

4
3
2
Addressograph
2
addressee
2
address
36
1
4
3
2
i
2
o
4
1
2
additive
36
1
4
3
2

2

4
2
2
Addison
2
Addis
36
1
4
3
2

2
st
4
2
2
adding
2
addict
36
1
4
3
2

2
n
4
1
2
added
36
1
4
3
2

2
eir
4
3
2
adduce
2
addle
2
add
36
1
4
3
2
t
2

4
3
2
adaptive
2
adaptation
2
adapt
36
1
4
3
2

2

4
3
2
Adamson
2
adamant
2
Adam
36
1
4
3
2

2

4
2
2
adagio
2
adage
36
1
4
3
2

2
gmp
4
2
2
Adair
2
Ada
36
1
4
3
2

2
adehijmorsuv
4
4
2
adposition
2
Adler
2
Adkins
2
ad
36
1
4
3
2

2

4
3
2
acute
2
acumen
2
acuity
36
1
4
3
2
a
2
l
4
2
2
actuate
2
actuarial
36
1
4
3
2

2

4
2
2
actor
2
Acton
36
1
4
3
2

2
io
4
0
36
1
4
3
2

2

4
2
2
actinometer
2
actinolite
36
1
4
3
2

2

4
3
2
actinium
2
actinide
2
actinic
36
1
4
3
2

2
nov
4
0
36
1
4
3
2

2
iou
4
3
2
actress
2
Actaeon
2
act
36
1
4
3
2
l
2

4
2
2
acrylic
2
acrylate
36
1
4
3
2
a
2
t
4
1
2
acrobacy
36
1
4
3
2

2

4
2
2
acrobatic
2
acrobat
36
1
4
3
2

2
b
4
3
2
across
2
acropolis
2
acronym
36
1
4
3
2

2

4
2
2
acreage
2
acre
36
1
4
3
2

2
eoy
4
1
2
acrid
36
1
4
3
2

2

4
2
2
acquitting
2
acquittal
36
1
4
3
2

2
t
4
1
2
acquit
36
1
4
3
2
iti
2

4
2
2
acquisitive
2
acquisition
36
1
4
3
2
sce
2

4
2
2
acquiescent
2
acquiesce
36
1
4
3
2

2
est
4
1
2
acquire
36
1
4
3
2
int
2

4
2
2
acquaintance
2
acquaint
36
1
4
3
2
u
2
ai
4
0
36
1
4
3
2

2

4
3
2
acoustic
2
acorn
2
acolyte
36
1
4
3
2

2

4
2
2
acme
2
ACM
36
1
4
3
2
owledge
2

4
2
2
acknowledgeable
2
acknowledge
36
1
4
3
2

2
n
4
2
2
Ackley
2
Ackerman
36
1
4
3
2
d
2

4
3
2
acidulous
2
acidic
2
acid
36
1
4
3
2

2

4
3
2
aching
2
Achilles
2
achieve
36
1
4
3
2

2
i
4
2
2
achromatic
2
ache
36
1
4
3
2

2

4
4
2
acetylene
2
acetone
2
acetic
2
acetate
36
1
4
3
2
bi
2

4
2
2
acerbity
2
acerbic
36
1
4
3
2

2
rt
4
1
2
ace
36
1
4
3
2
t
2
i
4
1
2
accusatory
36
1
4
3
2

2

4
2
2
accusative
2
accusation
36
1
4
3
2

2
a
4
2
2
accustom
2
accuse
36
1
4
3
2
a
2

4
2
2
accurate
2
accuracy
36
1
4
3
2

2
rs
4
2
2
accumulate
2
acculturate
36
1
4
3
2

2

4
2
2
accrue
2
accrual
36
1
4
3
2
it
2

4
2
2
accreditate
2
accredit
36
1
4
3
2

2
d
4
1
2
accretion
36
1
4
3
2

2
eu
4
1
2
Accra
36
1
4
3
2
t
2

4
3
2
accounts
2
accountant
2
account
36
1
4
3
2

2
n
4
1
2
accouter
36
1
4
3
2
d
2
i
4
2
2
accordant
2
accord
36
1
4
3
2
i
2

4
2
2
accomplish
2
accomplice
36
1
4
3
2
n
2
i
4
1
2
accompany
36
1
4
3
2

2

4
2
2
accompanist
2
accompaniment
36
1
4
3
2

2
al
4
0
36
1
4
3
2

2
p
4
1
2
accommodate
36
1
4
3
2

2
mru
4
2
2
accost
2
accolade
36
1
4
3
2

2

4
2
2
acclamation
2
acclaim
36
1
4
3
2

2
a
4
1
2
acclimate
36
1
4
3
2
ent
2

4
2
2
accidental
2
accident
36
1
4
3
2

2
d
4
1
2
accipiter
36
1
4
3
2

2
lnps
4
1
2
accede
36
1
4
3
2

2

4
2
2
accession
2
accessible
36
1
4
3
2
s
2
i
4
2
2
accessory
2
access
36
1
4
3
2
t
2

4
4
2
accepted
2
acceptor
2
acceptant
2
accept
36
1
4
3
2
a
2

4
2
2
accentuate
2
accentual
36
1
4
3
2
t
2
u
4
1
2
accent
36
1
4
3
2
er
2

4
2
2
accelerometer
2
accelerate
36
1
4
3
2

2
eiloru
4
0
36
1
4
3
2

2
e
4
1
2
Acadia
36
1
4
3
2
m
2
i
4
1
2
academy
36
1
4
3
2

2
c
4
1
2
academia
36
1
4
3
2

2

4
2
2
academician
2
academic
36
1
4
3
2

2
d
4
2
2
Acapulco
2
acanthus
36
1
4
3
2

2
acehikmoqrtu
4
2
2
acyclic
2
AC
36
1
4
3
2

2

4
2
2
Abyssinia
2
abyss
36
1
4
3
2
s
2
s
4
1
2
abysmal
36
1
4
3
2

2

4
2
2
abutting
2
abutted
36
1
4
3
2

2
t
4
1
2
abut
36
1
4
3
2

2

4
3
2
abusive
2
abuse
2
abusable
36
1
4
3
2

2
st
4
2
2
abundant
2
abuilding
36
1
4
3
2
ct
2

4
2
2
abstractor
2
abstract
36
1
4
3
2

2
a
4
1
2
abstruse
36
1
4
3
2

2
r
4
3
2
abstinent
2
abstention
2
abstain
36
1
4
3
2
ti
2

4
2
2
absorptive
2
absorption
36
1
4
3
2

2

4
2
2
absorbent
2
absorb
36
1
4
3
2

2
bp
4
0
36
1
4
3
2

2
u
4
1
2
absolve
36
1
4
3
2
t
2

4
2
2
absolution
2
absolute
36
1
4
3
2

2
lr
4
0
36
1
4
3
2
e
2

4
2
2
absenteeism
2
absentee
36
1
4
3
2
nt
2
e
4
3
2
absentminded
2
absentia
2
absent
36
1
4
3
2

2
i
4
1
2
abscess
36
1
4
3
2
ssa
2

4
2
2
abscissae
2
abscissa
36
1
4
3
2

2
ceot
4
2
2
absurd
2
absinthe
36
1
4
3
2

2

4
2
2
abrogate
2
abroad
36
1
4
3
2
dg
2

4
2
2
abridgment
2
abridge
36
1
4
3
2
a
2

4
2
2
abreast
2
abreact
36
1
4
3
2

2
ms
4
2
2
Abraham
2
abrade
36
1
4
3
2
i
2

4
2
2
abrasive
2
abrasion
36
1
4
3
2

2

4
2
2
Abramson
2
Abram
36
1
4
3
2

2
aeio
4
1
2
abrupt
36
1
4
3
2
e
2

4
4
2
abovementioned
2
aboveground
2
aboveboard
2
above
36
1
4
3
2

2

4
2
2
about
2
abound
36
1
4
3
2
gin
2

4
2
2
aborigine
2
aboriginal
36
1
4
3
2

2
i
4
2
2
abort
2
aborning
36
1
4
3
2
ina
2

4
2
2
abominate
2
abominable
36
1
4
3
2
i
2

4
2
2
abolition
2
abolish
36
1
4
3
2

2
lmruv
4
3
2
abode
2
aboard
2
Abo
36
1
4
3
2

2

4
2
2
abnormal
2
Abner
36
1
4
3
2

2

4
2
2
ablaze
2
ablate
36
1
4
3
2

2
a
4
2
2
ablution
2
able
36
1
4
3
2

2

4
2
2
Abidjan
2
abide
36
1
4
3
2

2
d
4
2
2
abilities
2
Abigail
36
1
4
3
2
orre
2

4
2
2
abhorrent
2
abhorred
36
1
4
3
2
an
2

4
2
2
abeyant
2
abeyance
36
1
4
3
2

2

4
2
2
abetting
2
abetted
36
1
4
3
2

2
t
4
1
2
abet
36
1
4
3
2
a
2

4
2
2
aberrate
2
aberrant
36
1
4
3
2

2
r
4
2
2
Abernathy
2
Aberdeen
36
1
4
3
2

2

4
3
2
Abelson
2
Abelian
2
Abel
36
1
4
3
2

2
lrty
4
2
2
abed
2
Abe
36
1
4
3
2
m
2

4
2
2
abdominal
2
abdomen
36
1
4
3
2

2
o
4
2
2
abduct
2
abdicate
36
1
4
3
2
t
2

4
2
2
Abbott
2
abbot
36
1
4
3
2

2

4
2
2
abbey
2
abbe
36
1
4
3
2

2
eor
4
1
2
abbas
36
1
4
3
2

2
cs
4
5
2
abate
2
abandon
2
abalone
2
Ababa
2
ABA
36
1
4
3
2

2

4
2
2
abash
2
abase
36
1
4
3
2

2

4
2
2
abacus
2
aback
36
1
4
3
2

2
Abdehilnorsuy
4
2
2
abject
2
abc
36
1
4
3
2

2

4
2
2
Aaron
2
Aarhus
36
1
4
3
2

2

4
2
2
AAAS
2
AAA
36
1
4
3
2

2
Ar
4
0
36
1
4
3
2

2
AbcdefghijklMn&pqrstuvwxyz
4
3
2
a's
2
aorta
2
a
36
1
4
151
2
glowing
2
mostly
2
appears
2
reading
2
warning
2
lowercase
2
faux
2
picked
2
letters
2
singer
2
logged
2
teleport
2
becomes
2
refuses
2
disturbed
2
technically
2
entries
2
randomly
2
seriously
2
probabilities
2
choosing
2
stranger
2
similarities
2
letter
2
mostly
2
profusely
2
writer
2
liking
2
reasoned
2
shortened
2
spelling
2
abbreviated
2
humor
2
evidence
2
firmly
2
direction
2
posting
2
disconnected
2
timing
2
grammatically
2
assuming
2
permissions
2
correctly
2
caller
2
containing
2
generating
2
unhelpful
2
regardless
2
occurence
2
replaced
2
capitalised
2
precede
2
pules
2
neftehkefeh
2
thinking
2
stirring
2
feelings
2
weddings
2
who's
2
cars
2
thinks
2
dusting
2
premenstrual
2
trichome
2
figment
2
pages
2
appears
2
drags
2
screaming
2
teleport
2
twirling
2
suddenly
2
jumps
2
clawed
2
shoulders
2
yanking
2
ceiling
2
jumps
2
sucked
2
refuses
2
THX
2
teleport
2
logged
2
teleport
2
replace
2
voters
2
sessile
2
sessile
2
splinter
2
speaker
2
horns
2
stretches
2
dividing
2
encounter
2
catapulted
2
housekeeper
2
purling
2
RPG
2
formation
2
legs
2
generations
2
shoulders
2
ends
2
animation
2
wearing
2
modifies
2
pushes
2
suggesting
2
evening
2
pushes
2
suggesting
2
determined
2
manners
2
overalls
2
accounting
2
stripes
2
disappear
2
sleeves
2
customize
2
fastening
2
feeling
2
rising
2
morning
2
myst
2
cunt
2
glasses
2
wearing
2
teleports
2
refuses
2
logged
2
expels
2
featureless
2
hastily
2
crafted
2
pages
2
shapes
2
crumpled
2
folded
2
badly
2
bootlace
2
chewing
2
drops
2
picks
2
sees
2
priority
2
giver
2
authorise
2
embossed
2
contains
2
secrets
2
Illuminati
36
5
4
0
36
5
4
3
2

2

4
2
2
procedures
2
procedure
36
1
4
3
2

2

4
2
2
quoting
2
quotient
36
1
4
3
2
eviat
2

4
2
2
abbreviation
2
abbreviate
36
1
4
3
2

2

4
2
2
evaluation
2
evaluate
36
1
4
3
2

2

4
3
2
introduced
2
introduces
2
introduce
36
1
4
3
2

2

4
3
2
defined
2
defines
2
define
36
1
4
3
2

2
e
4
1
2
own
36
1
4
3
2

2

4
2
2
properties
2
property
36
1
4
3
2
r
2

4
2
2
ancestors
2
ancestor
36
1
4
3
2
lt
2

4
2
2
defaults
2
default
36
1
4
3
2
e
2

4
2
2
unclear
2
uncle
36
1
4
3
2

2

4
2
2
manner
2
mannequin
36
1
4
3
2

2
i
4
1
2
modify
36
1
4
3
2

2
c
4
1
2
modified
36
1
4
3
2

2

4
2
2
reduced
2
reduce
36
1
4
3
2
or
2

4
2
2
behavior
2
behavioral
36
1
4
3
2

2

4
2
2
Newell
2
newel
36
1
4
3
2

2

4
2
2
behaves
2
behave
36
1
4
3
2

2

4
2
2
severely
2
severe
36
1
4
3
2
n
2

4
2
2
container
2
contain
36
1
4
3
2

2

4
2
2
blessed
2
bless
36
1
4
3
2
s
2

4
2
2
release
2
releasable
36
1
4
3
2
h
2

4
2
2
toughened
2
tough
36
1
4
3
2

2
e
4
1
2
removal
36
1
4
3
2
r
2

4
2
2
improperly
2
improper
36
1
4
3
2

2

4
2
2
satisfying
2
satisfy
36
1
4
3
2

2

4
2
2
notifies
2
notify
36
1
4
3
2

2

4
2
2
securing
2
security
36
1
4
3
2
g
2

4
2
2
belonging
2
belong
36
1
4
3
2

2

4
2
2
smelly
2
smell
36
1
4
3
2

2

4
2
2
temporarily
2
temporary
36
1
4
3
2
r
2

4
2
2
eagerly
2
eager
36
1
4
3
2

2

4
2
2
chirps
2
chirp
36
1
4
3
2
us
2

4
2
2
obviously
2
obvious
36
1
4
3
2
h
2

4
2
2
branches
2
branch
36
1
4
3
2
n
2
a
4
1
2
option
36
1
4
3
2

2
r
4
1
2
owned
36
1
4
3
2
on
2

4
2
2
mentioned
2
mention
36
1
4
3
2

2

4
2
2
listed
2
listen
36
1
4
3
2

2

4
2
2
supplied
2
supplicate
36
1
4
3
2

2

4
2
2
removes
2
remove
36
1
4
3
2
ng
2

4
2
2
seemingly
2
seeming
36
1
4
3
2

2

4
2
2
shorter
2
shorten
36
1
4
3
2
f
2

4
2
2
solidifies
2
solidify
36
1
4
3
2

2

4
2
2
fiddlestick
2
fiddle
36
1
4
3
2
k
2

4
2
2
flickers
2
flick
36
1
4
3
2
ht
2

4
2
2
slightly
2
slight
36
1
4
3
2

2

4
2
2
pleased
2
please
36
1
4
3
2

2

4
2
2
teaches
2
teach
36
1
4
3
2
l
2

4
2
2
optionally
2
optional
36
1
4
3
2

2

4
2
2
functional
2
functionary
36
1
4
3
2

2

4
2
2
centre
2
centrex
36
1
4
3
2

2

4
2
2
parsecs
2
parse
36
1
4
3
2

2

4
2
2
personality
2
personal
36
1
4
3
2

2

4
2
2
aliases
2
alias
36
1
4
3
2

2

4
2
2
owners
2
owner
36
1
4
3
2
og
2

4
2
2
zoologist
2
zoology
36
1
4
3
2
h
2
e
4
1
2
finish
36
1
4
3
2

2

4
2
2
completely
2
complete
36
1
4
3
2

2

4
2
2
fakir
2
fake
36
1
4
3
2

2

4
2
2
initialize
2
initial
36
1
4
3
2

2

4
2
2
cured
2
cure
36
1
4
3
2
ation
2

4
2
2
modifications
2
modification
36
1
4
3
2
inat
2

4
2
2
eliminating
2
eliminate
36
1
4
3
2

2

4
2
2
unfriendly
2
unfortunately
36
1
4
3
2

2

4
2
2
actually
2
actual
36
1
4
3
2

2

4
2
2
easier
2
easily
36
1
4
3
2

2

4
2
2
faster
2
fasten
36
1
4
3
2
r
2

4
2
2
impaired
2
impair
36
1
4
3
2

2

4
2
2
simplified
2
simplify
36
1
4
3
2
v
2

4
2
2
subjective
2
subjectivity
36
1
4
3
2
r
2
e
4
1
2
interferometer
36
1
4
3
2

2

4
2
2
specification
2
specifically
36
1
4
3
2
t
2

4
2
2
alternative
2
alternate
36
1
4
3
2

2

4
5
2
presently
2
presenting
2
presented
2
present
2
presentation
36
1
4
3
2

2

4
2
2
existential
2
existent
36
1
4
3
2

2

4
2
2
extremely
2
extreme
36
1
4
3
2
l
2

4
2
2
carefully
2
careful
36
1
4
3
2
nt
2

4
2
2
currently
2
current
36
1
4
3
2

2

4
2
2
definitely
2
definite
36
1
4
3
2
ich
2

4
2
2
sandwiches
2
sandwich
36
1
4
3
2
bl
2

4
2
2
reasonably
2
reasonable
36
1
4
3
2

2

4
4
2
instantly
2
instantiate
2
instantaneous
2
instant
36
1
4
3
2

2

4
2
2
finishes
2
finished
36
1
4
3
2
rew
2

4
2
2
unscrew
2
unscrews
36
1
4
3
2
nt
2

4
2
2
represents
2
representative
36
1
4
3
2

2
a
4
1
2
implicit
36
1
4
3
2
e
2

4
2
2
generated
2
generate
36
1
4
3
2

2

4
2
2
fridge
2
Friday
36
1
4
3
2

2

4
2
2
filled
2
fillet
36
1
4
3
2

2

4
2
2
neatest
2
neater
36
1
4
3
2
d
2

4
2
2
backwards
2
backward
36
1
4
3
2

2

4
2
2
basically
2
basic
36
1
4
3
2
e
2

4
2
2
circumstances
2
circumstance
36
1
4
3
2
l
2

4
2
2
incidentally
2
incidental
36
1
4
3
2
ent
2

4
2
2
conveniently
2
convenient
36
1
4
3
2
erate
2

4
2
2
deliberately
2
deliberate
36
1
4
3
2

2

4
2
2
whilst
2
while
36
1
4
3
2

2

4
2
2
applications
2
applicate
36
1
4
3
2

2

4
2
2
criticism
2
critic
36
1
5
36
5
0
3
36
1
4
4
2

2
Abc-deFGhIjKlmNopQrszTuvwyX
4
0
4
0
36
0
5
36
4
4
2
2
Mr. Spell
2
spell
36
5
2
For help on using the speller, use 'help spelling' and 'help @spell'.
36
5
4
2
0
1298817
0
1084848672
36
1
#33
sequence utilities

16
36
-1
-1
-1
78
-1
13
21
add remove
36
173
-1
contains
36
173
-1
complement
36
173
-1
union
36
173
-1
tostr
36
173
-1
for
2
173
-1
extract
36
173
-1
tolist
36
173
-1
from_list
36
173
-1
from_sorted_list
36
173
-1
first
36
173
-1
last
36
173
-1
size
36
173
-1
from_string
36
173
-1
firstn
36
173
-1
lastn
36
173
-1
range
36
173
-1
expand
36
173
-1
contract
36
173
-1
_union
36
173
-1
intersection
36
173
-1
0
5
4
38
2
A sequence is a set of integers (*)
2
This package supplies the following verbs:
2

2
  :add      (seq,f,t)  => seq with [f..t] interval added
2
  :remove   (seq,f,t)  => seq with [f..t] interval removed
2
  :range    (f,t)      => sequence corresponding to [f..t]
2
  {}                   => empty sequence
2
  :contains (seq,n)    => n in seq
2
  :size     (seq)      => number of elements in seq
2
  :first    (seq)      => first integer in seq or E_NONE
2
  :firstn   (seq,n)    => first n integers in seq (as a sequence)
2
  :last     (seq)      => last integer in seq  or E_NONE
2
  :lastn    (seq,n)    => last n integers in seq (as a sequence)
2

2
  :complement   (seq)         => sequence consisting of integers not in seq
2
  :union        (seq,seq,...) => union of all sequences
2
  :intersection (seq,seq,...) => intersection of all sequences
2
  :contract (seq,cseq)              (see `help $seq_utils:contract')
2
  :expand   (seq,eseq[,include])    (see `help $seq_utils:expand')
2
  
2
  :extract(seq,array)           => array[@seq]
2
  :for([n,]seq,obj,verb,@args)  => for s in (seq) obj:verb(s,@args); endfor
2

2
  :tolist(seq)            => list corresponding to seq
2
  :tostr(seq)             => contents of seq as a string
2
  :from_list(list)        => sequence corresponding to list
2
  :from_sorted_list(list) => sequence corresponding to list (assumed sorted)
2
  :from_string(string)    => sequence corresponding to string
2

2
For boolean expressions, note that
2
  the representation of the empty sequence is {} (boolean FALSE) and
2
  all non-empty sequences are represented as nonempty lists (boolean TRUE).
2

2
The representation used works better than the usual list implementation for sets consisting of long uninterrupted ranges of integers.  
2
For sparse sets of integers the representation is decidedly non-optimal (though it never takes more than double the space of the usual list representation).
2

2
(*) i.e., integers in the range [$minint+1..$maxint].  The implementation depends on $minint never being included in a sequence.
2

36
5
5
36
4
4
3
2
sequence utilities
2
seq_utils
2
squ
36
5
4
1
2
This is the sequence utilities utility package.  See `help $seq_utils' for more details.
36
5
4
2
0
17130
0
1084848672
36
1
#34
Quota-Log

0
2
46
-1
61
45
-1
29
1
init_for_core
2
173
-1
0
22
4
0
2
5
0
0
36
1
4
0
36
0
0
1
2
5
2
%n (%#) can't send to moderated list %t (%[#t]) directly.
2
5
4
0
2
5
4
0
2
5
4
1
1
2
36
1
4
0
36
1
0
2592000
36
1
0
0
36
1
4
0
36
0
5
2
5
5
2
5
4
0
36
1
5
36
0
5
36
0
5
36
0
5
2
4
4
4
2
Quota-Log
2
Quota_Log
2
QL
2
Quota
36
1
2
Record of whose quota has been messed with and why.
2
5
4
2
0
1113
0
1084848672
36
1
#35
you

16
36
-1
-1
-1
94
-1
-1
5
verb_sub
36
173
-1
say_action
36
165
-1
fixpos
36
173
-1
reflexive
36
173
-1
say_action_reflexive
2
165
-1
2
conjugations
help_msg
17
4
4
4
2
2
is
2
are
4
2
2
was
2
were
4
2
2
does
2
do
4
2
2
has
2
have
36
1
4
16
2
This object is useful for announcing messages that switch between third and second person when addressed to the appropriate parties in a room.
2

2
Verbs:
2

2
  :verb_sub(STR verbspec) -> conjugates the given verb into singular form
2
  :say_action(message [,who [,thing, [,where]]]) -> appropriately pronoun 
2
      substituted message announced to where, which defaults to who.location
2
      where who defaults to player.
2
  Ex:  if player=#123 (Munchkin), dobj=#456 (Frebblebit), and iobj=#789
2
       (Bob) and they are all in the same room,
2
       $you:say_action("%N %<waves> happily to %d and %i.") would do this:
2

2
Munchkin sees:       You wave happily to Frebblebit and Bob.
2
Frebblebit sees:     Munchkin waves happily to you and Bob.
2
Bob sees:            Munchkin waves happily to Frebblebit and you.
2
Everyone else sees:  Munchkin waves happily to Frebblebit and Bob.
36
5
2
2nd
36
5
2
Yours
36
5
2
yours
36
5
2
Your
36
5
2
your
36
5
2
Yourself
36
5
2
yourself
36
5
2
You
36
5
2
you
36
5
2
You
36
5
2
you
36
5
5
36
4
4
1
2
you
36
5
4
1
2
An object useful for pronoun substitution for switching between third and second person.  See `help $you' for details.
36
5
4
2
0
4737
0
1084848672
36
1
#36
Hacker

19
36
-1
-1
-1
58
-1
71
1
init_for_core
2
173
-1
0
90
5
36
1
5
36
1
5
36
1
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
1
5
36
1
5
36
1
5
36
1
5
36
1
5
36
1
5
36
1
0
0
36
1
5
36
5
5
36
5
5
36
5
5
36
1
5
36
5
5
36
4
5
36
5
5
2
1
4
1
1
2
36
5
4
0
36
5
5
36
5
5
36
5
5
36
4
5
36
4
4
2
1
90
1
89
36
1
5
2
0
5
2
0
0
2147483647
2
1
0
0
36
5
5
36
5
5
36
1
5
36
1
5
36
0
5
36
1
0
0
2
1
5
36
1
5
36
4
5
2
0
5
2
0
5
36
5
5
36
5
5
36
4
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
2
1
0
37331
36
0
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
1
-1
36
5
5
2
0
5
36
5
5
36
5
5
36
5
5
36
5
0
2147483647
2
1
4
4
0
100000008
0
-27508461
0
1008125633
0
1510455
36
0
5
2
0
5
2
0
5
36
4
4
1
2
Hacker
2
1
2
A system character used to own non-wizardly system verbs , properties, and objects in the core.
36
5
4
2
0
2102
0
1084848672
36
1
#37
Generic Database

144
36
-1
-1
-1
1
32
15
20
find find_key
36
173
-1
find_exact
36
173
-1
find_all find_all_keys
36
173
-1
_only
36
173
-1
_every
36
173
-1
_every_key
36
173
-1
insert
36
173
-1
delete
36
173
-1
delete2
36
173
-1
set_node
36
173
-1
make_node
2
173
-1
kill_node
2
173
-1
clearall
2
173
-1
clearall_big
36
173
-1
_kill_subtrees
36
173
-1
depth
36
173
-1
count_entries
36
173
-1
count_chars
36
173
-1
count
36
153
3
proxy_for_core
2
173
-1
3
node_perms
data
 
7
2
r
36
5
0
4
36
1
4
4
2

2

4
0
4
0
36
0
5
36
4
4
1
2
Generic Database
36
5
2
A generic `database' (well, really more like a string-indexed array if you want the truth...). See `help $generic_db' for details.
36
5
4
2
0
17214
0
1084848672
36
1
#38
Everyman

19
36
-1
-1
-1
40
-1
-1
6
eval
2
173
-1
moveto
36
173
-1
eval_d
2
173
-1
call_verb
2
173
-1
bad_eval
2
173
-1
set_*
36
173
-1
1
queued_task_limit
60
0
0
2
1
5
36
5
4
0
36
4
5
36
5
5
2
1
2
Everyman ($no_one) can not receive mail.
36
5
4
0
36
5
5
36
5
4
0
36
5
5
36
4
4
0
36
4
5
36
1
5
2
0
2

2
0
0
2147483647
2
1
0
0
36
5
5
36
5
5
36
1
5
36
1
5
36
0
5
36
1
4
0
2
1
5
36
1
5
36
4
5
2
0
5
2
0
5
36
5
5
36
5
5
36
4
5
36
5
5
36
5
5
36
5
5
36
5
2
... no one out there to see it.
36
5
5
36
5
5
2
1
0
-10000
36
0
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
1
-1
36
5
5
2
0
5
36
5
5
36
5
5
36
5
5
36
5
0
2147483647
2
1
4
4
0
0
0
0
0
1084781037
0
0
36
0
5
2
0
5
2
0
5
36
4
4
4
2
Everyman
2
everyone
2
no_one
2
noone
2
1
2
The character used for "safe" evals.
36
5
4
2
0
5625
0
1084848672
36
1
#39
Player Database

16
36
-1
-1
-1
37
-1
-1
6
load
36
173
-1
check
36
45
-1
init_for_core
36
173
-1
available
36
173
-1
suspend_restart
2
173
-1
why_bad_name
2
173
-1
7
stupid_names
frozen
reserved
 H
 e
 n
 Ev
14
4
28
2
with
2
using
2
at
2
to
2
in
2
into
2
on
2
onto
2
upon
2
out
2
from
2
inside
2
over
2
through
2
under
2
underneath
2
beneath
2
behind
2
beside
2
for
2
about
2
is
2
as
2
off
2
of
2
me
2
you
2
here
36
5
0
0
36
5
4
0
36
1
4
4
2

2

4
2
2
Hacker
2
housekeeper
4
2
1
36
1
71
36
1
4
4
2

2
v
4
1
2
Editor_Owner
4
1
1
96
36
1
4
4
2
o
2

4
2
2
noone
2
no_one
4
2
1
38
1
38
36
1
4
4
2
ery
2

4
2
2
everyone
2
Everyman
4
2
1
38
1
38
36
1
5
36
5
5
36
1
4
4
2

2
Hen
4
1
2
Wizard
4
1
1
2
36
0
0
0
36
4
4
3
2
player_db
2
plyrdb
2
pdb
36
5
4
2
2
A database containing all player names and aliases.  
2
See `help $player_db' for more information.
36
5
4
2
0
8069
0
1084848672
36
1
#40
Generic Mail Receiving Player

144
2
-1
-1
-1
6
88
-1
60
mail_forward
2
173
-1
receive_message
2
173
-1
display_message
2
173
-1
parse_message_seq from_msg_seq %from_msg_seq to_msg_seq %to_msg_seq subject_msg_seq body_msg_seq kept_msg_seq unkept_msg_seq display_seq_headers display_seq_full messages_in_seq list_rmm new_message_num length_num_le length_date_le length_date_gt length_all_msgs exists_num_eq msg_seq_to_msg_num_list msg_seq_to_msg_num_string rm_message_seq undo_rmm expunge_rmm renumber keep_message_seq
2
173
-1
msg_summary_line
36
173
-1
msg_text
2
173
-1
notify_mail
2
173
-1
current_message
2
173
-1
get_current_message
2
173
-1
set_current_message
2
173
-1
make_current_message
2
173
-1
kill_current_message
2
173
-1
current_folder
2
173
-1
set_current_folder
2
173
-1
parse_folder_spec
2
173
-1
parse_mailread_cmd
2
173
-1
@mail
2
93
-2
@read @peek
2
93
-2
@next @prev
2
89
-2
@rmm*ail
2
89
-2
@renumber
2
25
-1
@unrmm*ail
2
89
-2
@send
2
93
-2
@answer @repl*y
2
89
-2
@forward
2
93
-2
@gripe
2
89
-2
@typo @bug @suggest*ion @idea @comment
2
89
-2
@skip
2
89
-2
@subscribe*-quick @unsubscribed*-quick
2
89
-2
mail_catch_up
2
173
-1
@rn check_mail_lists @subscribed @rn-full
2
13
-1
mail_option
2
173
-1
@unsub*scribe
2
89
-2
send_self_netmail
2
173
-1
@netforw*ard
2
93
-2
@@sendmail
2
89
-2
@keep-m*ail @keepm*ail
2
89
-2
my_match_recipient
2
173
-1
expire_old_messages
2
173
-1
msg_full_text
2
173
-1
@resend
2
89
-2
expirable_msg_seq
2
173
-1
format_for_netforward
2
173
-1
format_for_netforward_debug
2
173
-1
@nn
2
13
-1
@unread
2
89
-2
@refile @copym*ail
2
89
-2
@quickr*eply @qreply
2
89
-2
@mail-all-new*-mail
2
13
-1
@read-all-new*-mail @ranm
2
29
-1
@quick*send @qsend
2
89
-2
init_for_core
2
173
-1
confunc
2
173
-1
@add-notify
2
89
1
mail_notify
2
173
-1
@unsend
2
89
5
do_unsend
2
173
-1
@annotate*mail
2
89
-2
annotate_message_seq
2
173
-1
check_mail
2
173
-1
10
_mail_task
messages_going
mail_lists
mail_notify
mail_forward
mail_options
message_keep_date
messages_kept
current_message
messages
59
0
0
2
5
4
0
2
4
4
0
2
5
4
2
4
0
4
0
2
1
4
0
2
5
4
0
2
5
0
0
2
5
4
0
2
5
4
2
0
0
0
0
2
4
4
0
2
4
5
36
1
5
2
0
5
2
0
5
2
1
1
85
2
5
5
2
5
5
36
1
5
36
1
5
36
0
5
36
1
5
2
1
5
36
1
5
2
4
5
2
0
5
2
0
5
2
5
5
2
5
5
2
4
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
1
5
36
0
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
1
62
2
5
5
2
0
5
2
5
5
2
5
5
2
5
5
2
5
5
2
1
5
36
0
5
2
0
5
2
0
0
0
2
4
4
1
2
Generic Mail Receiving Player
2
1
5
2
5
4
2
0
71323
0
1084848672
36
1
#41
gender utilities

16
36
-1
-1
-1
78
-1
26
8
set
2
173
-1
add
2
173
-1
get_pronoun
36
173
-1
get_conj*ugation
36
173
-1
_verb_plural
36
173
-1
_verb_singular
36
173
-1
_do
36
173
-1
pronoun_sub
2
173
-1
15
is_plural
have
be
pronouns
genders
ps
po
pp
pq
pr
psc
poc
ppc
pqc
prc
20
4
11
0
0
0
0
0
0
0
0
0
0
0
0
0
1
0
1
0
1
0
1
0
1
36
5
4
11
2
has
2
has
2
has
2
has
2
has
2
has
2
have
2
have
2
have
2
have
2
have
36
5
4
11
2
is
2
is
2
is
2
is
2
is
2
is
2
are
2
am
2
are
2
are
2
are
36
5
4
10
2
ps
2
po
2
pp
2
pq
2
pr
2
psc
2
poc
2
ppc
2
pqc
2
prc
36
5
4
10
2
neuter
2
male
2
female
2
either
2
Spivak
2
splat
2
plural
2
egotistical
2
royal
2
2nd
36
5
4
10
2
it
2
he
2
she
2
s/he
2
e
2
*e
2
they
2
I
2
we
2
you
36
5
4
10
2
it
2
him
2
her
2
him/her
2
em
2
h*
2
them
2
me
2
us
2
you
36
5
4
10
2
its
2
his
2
her
2
his/her
2
eir
2
h*
2
their
2
my
2
our
2
your
36
5
4
10
2
its
2
his
2
hers
2
his/hers
2
eirs
2
h*s
2
theirs
2
mine
2
ours
2
yours
36
5
4
10
2
itself
2
himself
2
herself
2
(him/her)self
2
emself
2
h*self
2
themselves
2
myself
2
ourselves
2
yourself
36
5
4
10
2
It
2
He
2
She
2
S/He
2
E
2
*E
2
They
2
I
2
We
2
You
36
5
4
10
2
It
2
Him
2
Her
2
Him/Her
2
Em
2
H*
2
Them
2
Me
2
Us
2
You
36
5
4
10
2
Its
2
His
2
Her
2
His/Her
2
Eir
2
H*
2
Their
2
My
2
Our
2
Your
36
5
4
10
2
Its
2
His
2
Hers
2
His/Hers
2
Eirs
2
H*s
2
Theirs
2
Mine
2
Ours
2
Yours
36
5
4
10
2
Itself
2
Himself
2
Herself
2
(Him/Her)self
2
Emself
2
H*self
2
Themselves
2
Myself
2
Ourselves
2
Yourself
36
5
4
18
2
Defines the list of standard genders, the default pronouns for each, and routines for adding or setting pronoun properties on any gendered object.
2

2
Properties:
2
  .genders  -- list of standard genders
2
  .pronouns -- list of pronoun properties
2
  .ps .po .pp .pq .pr .psc .poc .ppc .pqc .prc 
2
            -- lists of pronouns for each of the standard genders
2

2
  If foo is of gender this.gender[n], 
2
  then the default pronoun foo.p is this.p[n] 
2
  (where p is one of ps/po/pp/pq...)
2

2
Verbs:
2
  :set(object,newgender) -- changes pronoun properties to match new gender.
2
  :add(object[,perms[,owner]]) -- adds pronoun properties to object.
2

2
  :get_pronoun     (which,object) -- return pronoun for a given object
2
  :get_conj*ugation(verbspec,object) -- return appropriately conjugated verb
36
5
5
36
4
4
1
2
Gender_Utilities
36
5
4
1
2
This is the gender utilities utility package.  See `help $gender_utils' for more details.
36
5
4
2
0
12822
0
1084848672
36
1
#42
permissions utilities

24
2
-1
-1
-1
78
-1
21
4
controls
2
173
-1
apply
36
173
-1
caller
2
173
-1
controls_prop*erty controls_verb
2
173
-1
0
5
4
16
2
Miscellaneous routines for permissions checking
2

2
For a complete description of a given verb, do `help $perm_utils:verbname'
2

2
:controls(who,what) -- can who write on object what
2
:controls_property(who,what,propname) -- can who write on what.propname
2
These routines check write flags and also the wizardliness of `who'.
2

2
(these last two probably belong on $code_utils)
2

2
:apply(permstring,mods)
2
  -- used by @chmod to apply changes (e.g., +x) 
2
     to a given permissions string
2

2
:caller()
2
  -- returns the first caller in the callers() stack distinct from `this'
2
5
5
2
4
5
2
5
4
1
2
This is the permissions utilities utility package.  See `help $perm_utils' for more details.
2
5
4
2
0
3491
0
1084848672
36
1
#43
time utilities

16
36
-1
-1
-1
78
-1
51
18
day
36
13
-1
month
36
13
-1
ampm
36
13
-1
to_seconds
36
173
-1
sun
36
173
-1
from_ctime
36
173
-1
dhms dayshoursminutesseconds
36
173
-1
english_time
36
173
-1
from_day
36
173
-1
from_month
36
173
-1
dst_midnight
36
173
-1
time_sub
36
173
-1
mmddyy ddmmyy
36
173
-1
parse_english_time_interval
36
173
-1
seconds_until_date
36
165
-1
seconds_until_time
36
165
-1
rfc822_ctime
2
173
-1
mmddyyyy ddmmyyyy
36
173
-1
12
monthlens
timezones
stsd
ctcd
ct
corr
dayabbrs
days
months
monthabbrs
zones
time_units
17
4
12
0
31
0
28
0
31
0
30
0
31
0
30
0
31
0
31
0
30
0
31
0
30
0
31
36
5
4
15
4
2
2
AuEST
0
-10
4
2
2
AuCST
0
-9
4
2
2
AuWST
0
-8
4
2
2
WET
0
-1
4
2
2
GMT
0
0
4
2
2
AST
0
4
4
2
2
EDT
0
4
4
2
2
EST
0
5
4
2
2
CDT
0
5
4
2
2
CST
0
6
4
2
2
MDT
0
6
4
2
2
MST
0
7
4
2
2
PDT
0
7
4
2
2
PST
0
8
4
2
2
HST
0
10
36
5
0
2427
36
5
0
7276
36
5
0
7934
36
5
0
-122
36
5
4
7
2
Sun
2
Mon
2
Tue
2
Wed
2
Thu
2
Fri
2
Sat
36
5
4
7
2
Sunday
2
Monday
2
Tuesday
2
Wednesday
2
Thursday
2
Friday
2
Saturday
36
5
4
12
2
January
2
February
2
March
2
April
2
May
2
June
2
July
2
August
2
September
2
October
2
November
2
December
36
5
4
12
2
Jan
2
Feb
2
Mar
2
Apr
2
May
2
Jun
2
Jul
2
Aug
2
Sep
2
Oct
2
Nov
2
Dec
36
5
4
5
4
2
4
4
2
est
2
edt
2
Massachusetts
2
MA
0
10800
4
2
4
2
2
cst
2
cdt
0
7200
4
2
4
2
2
mst
2
mdt
0
3600
4
2
4
5
2
pst
2
pdt
2
California
2
CA
2
Lambda
0
0
4
2
4
1
2
gmt
0
28800
36
5
4
7
4
5
0
31536000
2
year
2
years
2
yr
2
yrs
4
5
0
2628000
2
month
2
months
2
mo
2
mos
4
5
0
604800
2
week
2
weeks
2
wk
2
wks
4
5
0
86400
2
day
2
days
2
dy
2
dys
4
5
0
3600
2
hour
2
hours
2
hr
2
hrs
4
5
0
60
2
minute
2
minutes
2
min
2
mins
4
5
0
1
2
second
2
seconds
2
sec
2
secs
36
5
4
30
2
    Converting from seconds-since-1970    
2
dhms          (time)                 => string ...DD:HH:MM:SS
2
english_time  (time[, reference time)=> string of y, m, d, h, m, s
2

2
    Converting to seconds
2
to_seconds    ("hh:mm:ss")           => seconds since 00:00:00
2
from_ctime    (ctime)                => corresponding time-since-1970
2
from_day      (day_of_week, which)   => time-since-1970 for the given day*
2
from_month    (month, which)         => time-since-1970 for the given month*
2
    (* the first midnight of that day/month)
2
parse_english_time_interval("n1 u1 n2 u2...")
2
                                     => seconds in interval
2
seconds_until_time("hh:mm:ss")       => number of seconds from now until then
2
seconds_until_date("month",day,"hh:mm:ss",flag 
2
                                     => number of seconds from now until then
2
                                        (see verb help for details)
2

2
    Converting to some standard English formats
2
day           ([c]time)              => what day it is
2
month         ([c]time)              => what month it is
2
ampm          ([c]time[, precision]) => what time it is, with am or pm
2
mmddyy        ([c]time)              => date in format MM/DD/YY
2
ddmmyy        ([c]time)              => date in format DD/MM/YY
2

2
    Substitution
2
time_sub      (string, time)         => substitute time information
2

2
    Miscellaneous
2
sun           ([time])               => angle between sun and zenith
2
dst_midnight  (time)                 
36
5
5
36
4
4
2
2
time utilities
2
time
36
5
4
1
2
This is the time utilities utility package.  See `help $time_utils' for more details.
36
5
4
2
0
22076
0
1084848672
36
1
#44
Editor Help

16
36
-1
-1
-1
30
-1
28
0
45
summary
edit-index
emote
say
delete
insert
view
depublish
perish
unpublish
publish
mode
enter
quit
unsubscribe
subscribe
reply-to
moo
find
edit
compile
save
showlists
subject
to
also-to
who
print
send
list
next
prev
subst
join
fill
move
copy
what
abort
done
pause
ranges
cc
uncc
not-to
51
4
11
2
You are inside an editor.  Do
2

2
look          -- for list of commands
2
what          -- to find out what you're editing.
2
list          -- to list out some portion of the text
2
say / emote   -- to add new text to whatever you're editing
2

2
help edit-index -- for a full list of editor help topics
2
help editors    -- for a general discussion about editors
2
help moo        -- for the general MOO help summary (i.e., what you get by 
2
                   typing `help' with no arguments from outside the editor).
36
5
4
2
2
*index*
2
Editor Help Topics
36
5
4
19
2
Syntax: emote <text>
2
        :<text>
2

2
(EDITOR)
2
Appends <text> to the end of the line before the insertion point.
2
The second form is equivalent to the first except that it doesn't strip leading blanks off of <text> (just as with the normal `emote' and `:' commands).
2
The insertion point is left unmoved.
2

2
    >list .
2
    _37_ Hello there
2
    ^38^ Oh, I'm fine.
2
    >:, how are you
2
    Appended to line 37.
2
    >:?
2
    Appended to line 37.
2
    >list .
2
    _37_ Hello there, how are you?
2
    ^38^ Oh, I'm fine.
2

36
5
4
17
2
Syntax: say <text>
2
        "<text>
2

2
(EDITOR)
2
Adds <text> to whatever you are editing.
2
The second form is equivalent to the first except in that it doesn't strip leading blanks off of <text> (just as with the normal `say' and `"' commands).
2

2
The added text appears as a new line at the insertion point.  The insertion point, in turn, gets moved so as to be after the added text.  For example:
2

2
    >"first line
2
    Line 1 added.
2
    >"  second line"
2
    Line 2 added.
2
    >list
2
      1: first line
2
    __2_   second line"
2
    ^^^^
36
5
4
5
2
Syntax:  del*ete [<range>] 
2

2
(EDITOR)
2
Deletes the specified range of lines
2
<range> defaults to the line *before* the current insertion point.
36
5
4
21
2
Syntax:  ins*ert [<ins>] ["<text>]
2
         .                    (`.' == `insert' without arguments)
2

2
(EDITOR)
2
Many editor commands refer to an "insertion point" which is (usually) the place right below where the most recent line was inserted.  The insertion point should really be thought of as sitting *between* lines.  In listings, the line above the insertion point is marked with `_' while the one below is marked with `^'.
2

2
The `insert' command, when given an argument, sets the insertion point.
2
If <text> is provided, a new line will be created and inserted as with `say'.
2
<ins>, both here and in other commands that require specifying an insertion point (e.g., copy/move), can be one of
2
          
2
    ^n   above line n
2
     n   above line n
2
    _n   below line n
2
     $   at the end
2
    ^$   before the last line
2
   n^$   n lines before the end
2
     .   the current insertion point  (i.e., `insert .' is a no-op)
2
    +n   n lines below the current insertion point.
2
    -n   n lines above the current insertion point.
2

2
For the truly perverse, there are other combinations that also work due to artifacts of the parsing process, but these might go away...
36
5
4
10
2
Syntax:  view <player> [<range>] [nonum]
2
         view
2

2
Prints some subset of the specified player's text.
2
Said player must have previously made his text readable with `publish'.
2
<ranges> are specified as in other commands (see `help ranges').
2
References to the insertion point refer to wherever the other player has set his/her insertion point; you have no control over it.
2
The default range is as in list.
2

2
If no arguments are given, this lists all of the players that have published anything in this editor.
36
5
4
2
2
*forward*
2
unpublish
36
5
4
2
2
*forward*
2
unpublish
36
5
4
5
2
Syntax:  unpub*lish
2
         depub*lish
2
         perish
2

2
This command reverses the effects of `publish', making your text readable only by you.
36
5
4
6
2
Syntax:  pub*lish
2

2
By default, only you (and wizards) can read the text you are editing.
2
This command makes your text readable by the entire world (see `help view').
2
This is useful if you need help from someone or if you just want to show off your programming acumen.
2
Use `unpublish' to make your text private again.
36
5
4
12
2
(NOTE EDITOR)
2
Syntax:  mode
2
         mode string
2
         mode list
2
         
2
There are (currently) two modes the note editor can be in.
2
One is string mode, in which if the text being edited is one line or less, 
2
it will be saved as a single string (or an empty string) rather than as a list.
2
The other is list mode, in which text is always saved as a list of strings.
2
The mode is set when the text is first loaded (string mode if the text is a string, list mode otherwise), but can be changed using this command.
2

2
The first form above (i.e., without any arguments) reports the current mode.
36
5
4
12
2
Syntax:  enter
2

2
(EDITOR)
2
Enters a sequence of lines at the insertion point (see `help insert').
2
This is similar to .program in that every line you type after the `enter' command is inserted verbatim into the text until you type a line with a single period (`.') on it.  This command is essentially for if you don't like the idea of putting " at the beginning of each line you type.  The only exceptions, i.e., lines that are not entered verbatim (aside from the `.' line), are
2

2
 - If you type a line whose sole text is `@abort', 
2
   that aborts this command without making any changes to the text.  
2
 - Any line whose first nonblank character is `.' and has additional text
2
   is entered but with its first `.' stripped off.  
2

2
Thus, to enter a line whose text is `@abort', you could enter it as `.@abort'.
36
5
4
7
2
Syntax:  q*uit
2
         done
2
         pause  
2

2
(EDITOR)
2
Leaves the editor.  If you have unsaved text it will be there when you return (and in fact you will not be able to do anything else with this editor until you 'abort' or save the text).
2

36
5
4
9
2
Syntax: unsubscribe from <list-name>
2
        unsubscribe <name>... from <list-name>
2

2
(MAILROOM)
2
Remove yourself from the given mailing list.
2
The second form removes arbitrary people from a mailing list.
2
You can only do this if you own whatever is being removed or you own the list.
2

2
Use the `who' command to determine if you are on a given mailing list.
36
5
4
11
2
Syntax: subscribe to <list-name>
2
        subscribe [<name>...] to <list-name>
2

2
(MAILROOM)
2
Add yourself to the given mailing list.  
2
The second form adds arbitrary people to a mailing list.
2
You can only do this if you own the list or if it is listed as [Public] and you own whatever is being added.
2

2
The first form of this command is probably obsolete since if <list-name> is public, you can already read it via `@mail on *<list-name>' and it's much better for the MOO if you do so.  `@mail-option +sticky' makes this even easier.
2

2
Use the `who' command to determine if you are on a given mailing list.
36
5
4
11
2
Syntax:  reply-to [<recipients>]
2

2
(MAIL ROOM)
2
Reports the current contents of the Reply-to: field of your message.
2
With arguments, adds (or changes) the Reply-to: field.
2

2
When someone @answers a message, the Reply-to: field is checked first when determining to whom the reply should be sent --- see `help @answer'.
2

2
To clear the Reply-to: field, do
2

2
         reply-to ""
36
5
4
2
2
*pass*
2

36
5
4
9
2
Syntax:  f*ind  /<str>[/[c][<ins>]]
2
         /<str>[/[c][<ins>]]
2

2
Searches for the first line after <ins> containing <str>.  <ins> defaults to  the current insertion point (see `help insert' for how to specify other places).  With the first form, any character (not just `/') may be used as a delimiter.
2
For the second form, you must use '/'.
2

2
The 'c' flag, if given, indicates that case is to be ignored while searching.
2

2
[Bug: With the second form, there are problems if the search string contains quotes, backslashes or a run of spaces.  The first whitespace will always be treated as a single space.  Likewise, quotes and backslashes occuring in the first word of the command (i.e., the "verb") need to be escaped with `\'.  Unfortunately it will not be possible to fix this until we get a new command parser.]
36
5
4
17
2
(VERB EDITOR)
2
Syntax:  edit <object>:<verb>
2

2
Changes what verb you are editing and loads the code for that verb
2
into the editor. 
2
Equivalent to @edit <object>:<verb>.
2

2
(NOTE EDITOR)
2
Syntax:  edit <note-object>
2
         edit <object>.<property>
2

2
Changes to a different note or a different object text property and 
2
loads its text into the editor.
2
These are equivalent to @notedit <note> or @notedit <object>.<property>
2
respectively.
2

2
For both the verb-editor and note-editor commands, <object> will match on the room you came from, though if the room you came from was another editor, then all bets are off...
36
5
4
5
2
Syntax:  compile [as <object>:<verb>]
2

2
(VERB EDITOR)
2
Installs the new program into the system if there are no syntax errors.
2
If a new object:verb is specified and actually turns out to exist, that <object>:<verb> becomes the default for subsequent compilations.
36
5
4
5
2
Syntax:  save [<note-object>]
2
         save [<object>.<property>]
2

2
(NOTE EDITOR)
2
Installs the freshly edited text.  If <note> or <object>.<property> is specified, text is installed on that note or property instead of the original one.  In addition the new note or property becomes the default for future save commands.
36
5
4
4
2
Syntax:  showlists
2

2
(MAIL ROOM)
2
Print a list of the publically available mailing lists/archives and other non-player entities that can receive mail.
36
5
4
4
2
Syntax:  subj*ect [<text>]
2

2
(MAIL ROOM)
2
Specifies a Subject: line for your message.  If <text> is "", the Subject: line is removed.
36
5
4
6
2
Syntax:  to [<recipients>]
2

2
(MAIL ROOM)
2
Specifies a new set of recipients (the To: line) for your message.
2
Recipient names not beginning with * are matched against the list of players.
2
Recipient names beginning with * are interpreted as mailing-lists/archives/other types of non-person addresses and are matched against all such publically available objects (see `help showlists').  If the list you want to use isn't in the database (i.e., isn't located in the database ($mail_agent)) you need to refer to it by object id.
36
5
4
7
2
Syntax:  also-to [<recipients>]
2

2
Synonym: cc
2

2
(MAIL ROOM)
2
Adds additional recipients to the To: line of your message.
2
Same rules apply as for the `to' command.
36
5
4
7
2
Syntax:  who 
2
         who <rcpt>...
2

2
(MAIL ROOM)
2
Invokes $mail_agent's mail-forwarding tracer and determines who (or what) is actually going to receive your message.  The resulting list will not include destinations that will simply forward the message without :receive_message()'ing a copy for themselves.
2

2
The second form expands an arbitrary list of recipients, for if e.g., you're curious about the members of particular mailing list.
36
5
4
6
2
Syntax:  pri*nt
2

2
Display your text without line numbers.
2

2
(MAIL ROOM)
2
Display your message including headers.
36
5
4
8
2
Syntax:  send
2

2
(MAIL ROOM)
2
Send the message, then exit the mail room if all of the addresses on the To: line turn out to be valid and usable (you can use the `who' command to check these in advance, though the status of recipients may change without warning).
2
If the To: line turns out to contain invalid recipients or recipients that are not usable by you, the message will not be sent and you will remain in the mail room.
2
It may be, however, that valid addresses on your To: line will forward to other addresses that are bogus; you'll receive warnings about these, but in this case your message will still be delivered to those addresses that are valid.
2

2
Note that there may be particularly long delays when sending to recipients with large forwarding/notification lists or when sending on occasions when the MOO is heavily loaded in general.  In such a case, it is possible to continue editing the message while the send is in progress; any such edits affect only the text in the editor.  In particular, the text of the message currently being sent remains as it was when you first typed the send command.  However, any editing will mark the text as "changed" meaning that you will need to explicitly `abort' or `quit' in order to leave the mail room even if the send concludes successfully.
36
5
4
8
2
Syntax:  lis*t [<range>] [nonum]
2

2
Prints some subset of the current verb text.
2
The default range is some reasonable collection of lines around the current insertion point:  currently this is 8_-8^, ie., 8 lines above the insertion point to 8 lines below it unless this runs up against the beginning or end of file, in which case we just take the first or last 16 lines, or just 1-$ if there aren't that many.  (See `help ranges' for how to specify line numbers and ranges.)
2

2
`nonum' prints without line numbers.
2

2
Yes, window heights will be customizable some day.
36
5
4
4
2
Syntax:  n*ext [n] ["<text>]
2

2
Moves the insertion point down n lines.  If <text> is provided, inserts a new line there just like `say'.
2
Equivalent to `insert +n'.  As one might expect, n defaults to 1.
36
5
4
4
2
Syntax:  p*rev [n] ["<text>]
2

2
Moves the insertion point up n lines.  If <text> is provided, a new line is inserted as with `say'.
2
Equivalent to `insert -n'.  As one might expect, n defaults to 1.
36
5
4
20
2
Syntax:  s*ubst/<str1>/<str2>[/[g][c][r][<range>]]
2

2
Substitutes <str2> for <str1>, in all of the lines of <range>.
2
Any character (not just `/') may be used to delimit the strings. 
2
If <str1> is blank, <str2> is inserted at the beginning of the line.  
2
(For inserting a string at the end of a line use emote/:).
2

2
Normally, only one substitution is done per line in the specified range, but if the 'g' flag is given, *all* instances of <str1> are replaced.
2
The 'c' flag indicates that case is not significant when searching for substitution instances.
2

2
The `r' flag means that the command will be grepped and matched using regular expressions. This is how you perform a regexp subst:
2

2
The <str1> field will be understood as a regular expression. If you are unfamiliar with regexp protocol, read `help regular-expressions'.
2
In cases where successful matches are made, the <str2> string will be run through the substitute() builtin, with the match() info as an argument, before replacing the old string.
2
So, in short. If `match(line, <str1>)' returns something, then `substitute(<str2>, match result)' is subbed in its place. The `g' and `c' arguments are still applicable.
2

2
<range> defaults to the line *before* the insertion point.
2

2
You do *not* need a space between the verb and the delimeter before <str1>.
2
[Bug: If you omit the space and the first whitespace in <str1> is a run of more than one space, those spaces get treated as one.  Likewise, quotes and backslashes occuring in the first word of the command (i.e., the "verb") need to be escaped with `\'.  The fix on this will have to wait for a new command parser.]
36
5
4
4
2
Syntax:  join        [<range>]
2
         joinliteral [<range>]
2

2
combines the lines in the specified range.  Normally, spaces are inserted and double space appears after periods and colons, but 'joinliteral' (abbreviates to 'joinl') supresses this and joins the lines as is.  <range> defaults to the two lines surrounding the insertion point.
36
5
4
3
2
Syntax:  fill [<range>] [@ c]
2

2
combines the specified lines as in join and then splits them so that no line is more than c characters (except in cases of pathological lines with very long words).  c defaults to 70.  <range> defaults to the single line preceding the insertion point.
36
5
4
6
2
Syntax:  m*ove [<range>] to <ins>
2

2
Moves the range of lines to place specified by <ins>.
2
If <ins> happens to be the current insertion point, the insertion point is moved to the end of the freshly moved lines.  If the range of lines contains the insertion point, the insertion point is carried over to the range's new location.
2

2
See `help insert' for a list of possibilities for <ins>.
36
5
4
7
2
Syntax:  c*opy [<range>] to <ins>
2

2
Copies the specified range of lines to place given by <ins>.
2
If <ins> happens to be the current insertion point, the insertion 
2
point moves to the end of the inserted lines.
2

2
See `help insert' for a list of possibilities for <ins>.
36
5
4
3
2
Syntax:  w*hat
2

2
Prints information about the editing session.
36
5
4
3
2
Syntax:  abort
2

2
Abandons this editing session and any changes.
36
5
4
2
2
*forward*
2
quit
36
5
4
2
2
*forward*
2
quit
36
5
4
20
2
Most editor commands act upon a particular range of lines.
2
Essentially, one needs to specify a first line and a last line.
2
Line numbers may be given in any of the following forms
2
  
2
  n      (i.e., the nth line of text)
2
  n^     n-th line after/below  the current insertion point
2
  n_     n-th line before/above the current insertion point
2
  n$     n-th line before the end.
2

2
In the latter three, n defaults to 1, so that `^' by itself refers to the line below the current (i.e., the line that gets `^' printed before it), and likewise for `_' while `$' refers to the last line.  Note that the usage depends on whether you are specifying a line or an insertion point (space between lines). `^5' is the space above/before line 5, while `5^' is the fifth line after/below the current insertion point.
2

2
Ranges of lines may be specified in any of the
2
following ways:
2

2
  <line>                  just that line
2
  from <line> to <line>   what it says; the following two forms are equivalent:
2
  <line>-<line>            
2
  <line> <line>
2

2
With the `from l to l' form, either the from or the to can be left off and it will default to whatever is usual for that command (usually a line above or below the insertion point).  Actually I was thinking of punting the `from'/`to' specifications entirely because they're so verbose.  Opinions?
36
5
4
2
2
*forward*
2
also-to
36
5
4
2
2
*forward*
2
not-to
36
5
4
6
2
Syntax:  not-to [<recipients>]
2

2
Synonym: uncc
2

2
(MAIL ROOM)
2
Removes the specified recipients from the To: line of your message.
36
5
5
36
5
4
1
2
edit-index
36
1
5
36
4
4
1
2
Editor Help
36
5
0
0
36
5
4
2
0
21862
0
1084848672
36
1
#45
Generic Mail Recipient

144
36
-1
-1
-1
1
34
94
40
set_aliases
36
173
-1
look_self
36
173
-1
is_writable_by is_annotatable_by
36
173
-1
is_readable_by
36
173
-1
is_usable_by
36
173
-1
mail_notify
36
173
-1
mail_forward
36
173
-1
moderator_forward
36
173
-1
add_forward
36
173
-1
delete_forward
36
173
-1
add_notify
36
173
-1
delete_notify
36
173
-1
receive_message
36
173
-1
ok
36
173
-1
ok_write
36
173
-1
parse_message_seq from_msg_seq %from_msg_seq to_msg_seq %to_msg_seq subject_msg_seq body_msg_seq kept_msg_seq unkept_msg_seq display_seq_headers display_seq_full messages_in_seq list_rmm new_message_num length_num_le length_date_le length_all_msgs exists_num_eq msg_seq_to_msg_num_list msg_seq_to_msg_num_string
36
173
-1
length_date_gt
36
173
-1
rm_message_seq
36
173
-1
undo_rmm expunge_rmm renumber keep_message_seq set_message_body_by_index
36
173
-1
own_messages_filter
36
173
-1
messages
36
173
-1
date_sort
36
173
-1
_fix_last_msg_date
36
173
-1
moderator_notify
36
173
-1
msg_summary_line
36
173
-1
__check
36
173
-1
__fix
2
173
-1
init_for_core
2
173
-1
initialize
2
173
-1
mail_name_old mail_name short_mail_name
36
173
-1
mail_names
36
173
-1
expire_old_messages
2
173
-1
moveto
36
173
-1
msg_full_text
36
173
-1
@set_expire
36
109
1
@register @netregister
2
109
1
@validate
36
109
0
set_name
36
173
-1
ok_annotate
2
173
-1
annotate_message_seq
2
173
-1
18
moderator_notify
last_msg_date
messages_going
moderated
moderator_forward
writers
readers
mail_notify
mail_forward
expire_period
last_used_time
messages
rmm_own_msgs
guests_can_send_here
messages_kept
registered_email
email_validated
validation_password
22
4
0
36
5
0
0
36
1
4
0
36
0
4
0
36
5
2
%n (%#) can't send to moderated list %t (%[#t]) directly.
36
5
4
0
36
5
4
0
36
5
4
0
36
1
2
%t (%[#t]) is a generic recipient.
36
1
0
2592000
36
1
0
0
36
1
4
0
36
0
0
1
36
5
0
0
36
5
4
0
36
1
2

36
0
0
1
36
0
2

36
0
5
36
4
4
1
2
Generic Mail Recipient
36
1
2
This can either be a mailing list or a mail folder, depending on what mood you're in...
36
5
4
2
0
30900
0
1084848672
36
1
#46
Mail Distribution Center

16
36
-1
17
-1
1
-1
45
56
resolve_addr
36
173
-1
sends_to
36
173
-1
send_message
36
173
-1
raw_send
2
173
-1
mail_forward mail_notify
36
173
-1
touch
36
173
-1
look_self
36
173
-1
acceptable
36
173
-1
check_names
36
173
-1
match_old match
36
173
-1
match_recipient
36
173
-1
match_failed
36
173
-1
make_message
36
173
-1
name
36
173
-1
name_list
36
173
-1
parse_address_field
36
173
-1
display_seq_full
2
173
-1
display_seq_headers
2
173
-1
rm_message_seq
2
173
-1
undo_rmm
2
173
-1
expunge_rmm list_rmm
2
173
-1
renumber
2
173
-1
msg_summary_line
36
173
-1
parse_message_seq
2
173
-1
_parse_from _parse_to
36
173
-1
_parse_date
36
173
-1
new_message_num
2
173
-1
length_all_msgs
2
173
-1
length_date_le
2
173
-1
length_date_gt
2
173
-1
length_num_le
2
173
-1
exists_num_eq
2
173
-1
from_msg_seq
2
173
-1
%from_msg_seq
2
173
-1
to_msg_seq
2
173
-1
%to_msg_seq
2
173
-1
subject_msg_seq
2
173
-1
body_msg_seq
2
173
-1
messages_in_seq
2
173
-1
__convert_new
2
173
-1
to_text
36
173
-1
is_readable_by is_writable_by is_usable_by
36
173
-1
reserved_pattern
36
173
-1
is_recipient
36
173
-1
keep_message_seq
2
173
-1
kept_msg_seq unkept_msg_seq
2
173
-1
msg_seq_to_msg_num_string
2
173
-1
msg_seq_to_msg_num_list
2
173
-1
send_log_message
36
173
-1
parse_misc_headers
36
173
-1
resend_message
2
173
-1
init_for_core
2
165
-1
time
36
173
-1
set_message_body_by_index
2
173
-1
get_message_body_by_index
2
173
-1
message_body_by_index
2
173
-1
9
options
reserved_patterns
player_expire_time
player_default_@mail
max_mail_notify
max_list_aliases
player_default_@unsend
last_mail_time
time_collisions
13
4
11
2
include
2
noinclude
2
all
2
sender
2
nosubject
2
expert
2
enter
2
sticky
2
@mail
2
manymsgs
2
replyto
36
5
4
0
36
1
0
2592000
36
5
2
last:15
36
5
0
15
36
5
0
8
36
5
2
last:1
2
1
0
0
36
1
4
2
0
0
0
0
36
1
5
36
4
4
2
2
Mail Distribution Center
2
Postmaster
36
5
4
5
2
This is the database of mailing-list/mail-folder objects.
2
The basic procedure for creating a new list/folder is to create a child of $mail_recipient (Generic Mail Recipient) assign it a suitable name&aliases, set a suitable .mail_forward/.mail_notify (or create suitable :mail_forward() and :mail_notify() verbs) and then teleport it here.
2

2
Avaliable aliases:
2

36
5
4
2
0
50262
0
1084848672
36
1
#47
Mail Room

16
36
-1
-1
-1
50
-1
95
26
working_on
36
173
-1
parse_invoke
36
173
-1
init_session
36
173
-1
pri*nt
36
25
-1
message_with_headers
36
173
-1
subj*ect:
36
89
-2
set_subject
36
173
-1
sending
36
173
-1
to*:
36
89
-2
also*-to: cc*:
36
89
-2
not-to*: uncc*:
36
89
-2
parse_recipients
36
173
-1
recipient_names
36
173
-1
make_message
36
173
-1
name_list
36
173
-1
parse_msg_headers
36
173
-1
check_answer_flags
36
173
-1
reply-to*: replyto*:
36
89
-2
send
2
9
-1
who
36
29
-1
showlists
36
25
-1
subsc*ribe
36
89
1
unsubsc*ribe
36
89
5
retain_session_on_exit
36
173
-1
no_littering_msg
36
173
-1
local_editing_info
36
173
-1
4
replytos
recipients
subjects
sending
42
4
0
36
0
4
0
36
0
4
0
36
0
4
0
36
0
4
0
96
1
4
0
96
1
4
2
4
12
2
say
2
emote
2
lis*t
2
ins*ert
2
n*ext,p*rev
2
enter
2
del*ete
2
f*ind
2
s*ubst
2
m*ove,c*opy
2
join*l
2
fill
4
12
2
y*ank
2
w*hat
2
subj*ect
2
to
2
also-to
2
reply-to
2
showlists,unsubscribe
2
who
2
pri*nt
2
send
2
abort
2
q*uit,done,pause
36
5
4
0
36
5
2
Message body is empty.
36
5
4
8
4
2
2
subj*ect
2
[<text>]
4
2
2
to
2
[<rcpt>..]
4
2
2
also-to
2
[<rcpt>..]
4
2
2
reply-to
2
[<rcpt>..]
4
2
2
who
2
[<rcpt>..]
4
2
2
pri*nt
2

4
2
2
send
2

4
2
2
showlists,unsubscribe
2

36
5
0
0
96
1
0
1
36
5
2
You need to either SEND it or ABORT it before you can start another message.
36
5
4
8
4
2
2
sending
0
0
4
2
2
replytos
4
0
4
2
2
recipients
4
0
4
2
2
subjects
2

4
2
2
texts
4
0
4
2
2
changes
0
0
4
2
2
inserting
0
1
4
2
2
readable
0
0
96
1
2
%N flattens out into a largish postage stamp and floats away.
36
5
2
A largish postage stamp floats into the room and fattens up into %n.
36
5
4
4
2
Saving your message so that you can finish it later.
2
To come back, give the `@send' command with no arguments.
2
Please come back and SEND or ABORT if you don't intend to be working on this
2
message in the immediate future.  Keep Our MOO Clean!  No Littering!
36
5
5
36
5
5
36
5
2
You're not editing anything!
36
5
4
0
96
0
4
0
96
1
4
0
96
0
4
0
96
0
4
0
96
1
2
%L [mailing]
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
0
1
36
5
4
1
1
16500
36
4
1
-1
36
5
0
2043059065
36
5
4
0
36
4
5
36
5
5
36
5
5
36
4
4
1
2
Mail Room
36
5
5
36
5
4
2
0
22248
0
1084848672
36
1
#48
Note Editor

16
96
-1
-1
-1
50
-1
47
12
e*dit
96
25
-1
save
96
25
-1
init_session
96
173
-1
working_on
96
173
-1
parse_invoke
96
173
-1
note_text
2
173
-1
set_note_text
2
173
-1
note_match_failed
96
173
-1
w*hat
96
9
-1
mode
96
25
-1
local_editing_info
36
173
-1
set_*
96
173
-1
2
strmode
objects
40
4
0
96
1
4
0
96
5
4
0
96
1
4
0
96
1
4
2
4
12
2
say
2
emote
2
lis*t
2
ins*ert
2
n*ext,p*rev
2
enter
2
del*ete
2
f*ind
2
s*ubst
2
m*ove,c*opy
2
join*l
2
fill
4
7
2
y*ank
2
w*hat
2
mode
2
e*dit
2
save
2
abort
2
q*uit,done,pause
96
5
4
0
96
5
2
Note is devoid of text.
96
5
4
3
4
2
2
e*dit
2
<note>
4
2
2
save
2
[<note>]
4
2
2
mode
2
[string|list]
96
5
0
0
96
1
5
96
5
2
You need to ABORT or SAVE this note before editing any other.
96
5
4
6
4
2
2
strmode
0
0
4
2
2
objects
0
0
4
2
2
texts
0
0
4
2
2
changes
0
0
4
2
2
inserting
0
1
4
2
2
readable
0
0
96
1
2
A small swarm of 3x5 index cards arrives, engulfs %n, and carries %o away.
96
5
2
A small swarm of 3x5 index cards blows in and disperses, revealing %n.
96
5
4
3
2
Partially edited text will be here when you get back.
2
To return, give the `@notedit' command with no arguments.
2
Please come back and SAVE or ABORT if you don't intend to be working on this text in the immediate future.  Keep Our MOO Clean!  No Littering!
96
5
2
Note has not been modified since the last save.
96
5
2
There are changes.
96
5
2
Use the EDIT command to select a note.
96
5
4
0
96
0
4
0
96
1
4
0
96
0
4
0
96
0
4
0
96
1
2
%L [editing notes]
96
5
5
96
5
5
96
5
5
96
5
5
96
5
5
96
5
0
1
96
5
4
1
1
5750
96
4
1
-1
96
5
0
2137271057
96
5
4
0
96
4
5
96
5
5
96
5
5
96
4
4
2
2
Note Editor
2
nedit
96
5
5
96
5
4
2
0
9901
0
1084848672
36
1
#49
Verb Editor

16
96
-1
-1
-1
50
-1
48
13
e*dit
96
25
-1
com*pile save
96
73
-2
working_on
96
173
-1
init_session
96
173
-1
parse_invoke
96
173
-1
fetch_verb_code
2
173
-1
set_verb_code
2
173
-1
local_editing_info
2
173
-1
verb_name
2
173
-1
verb_args
2
173
-1
comment
96
89
-2
uncomment
96
89
-2
fetch_verb_args
2
173
-1
2
objects
verbnames
40
4
0
96
0
4
0
96
0
4
0
96
1
4
0
96
1
4
2
4
12
2
say
2
emote
2
lis*t
2
ins*ert
2
n*ext,p*rev
2
enter
2
del*ete
2
f*ind
2
s*ubst
2
m*ove,c*opy
2
join*l
2
fill
4
6
2
y*ank
2
w*hat
2
e*dit
2
com*pile
2
abort
2
q*uit,done,pause
96
5
4
0
96
5
2
Verb body is empty.
96
5
4
2
4
2
2
e*dit
2
<obj>:<verb>
4
2
2
com*pile
2
[as <obj>:<verb>]
96
5
0
0
96
1
5
96
5
2
You need to either COMPILE or ABORT this verb before you can start on another.
96
5
4
6
4
2
2
objects
0
0
4
2
2
verbnames
0
0
4
2
2
texts
0
0
4
2
2
changes
0
0
4
2
2
inserting
0
1
4
2
2
readable
0
0
96
1
2
You hear the bips of keyclick, the sliding of mice and the hum of computers in the distance as %n fades slowly out of view, heading towards them.
96
5
2
There are the light bips of keyclick and the sliding of mice as %n fades into view, shoving %r away from the console, which promptly fades away.
96
5
4
3
2
Keeping your verb for later work.  
2
To return, give the `@edit' command with no arguments.
2
Please come back and COMPILE or ABORT if you don't intend to be working on this verb in the immediate future.  Keep Our MOO Clean!  No Littering!
96
5
2
The verb has no pending changes.
96
5
2
You have changed the verb since last successful compile.
96
5
2
First, you have to select a verb to edit with the EDIT command.
96
5
4
0
96
0
4
0
96
1
4
0
96
0
4
0
96
0
4
0
96
1
2
%L [editing verbs]
96
5
5
96
5
5
96
5
5
96
5
5
96
5
5
96
5
0
1
96
5
4
1
1
5749
96
4
1
-1
96
5
0
665095404
96
5
4
0
96
4
5
96
5
5
96
5
5
96
4
4
4
2
Verb Editor
2
vedit
2
verbedit
2
verb edit
96
5
5
96
5
4
2
0
13962
0
1084848672
36
1
#50
Generic Editor

144
96
-1
-1
-1
3
49
62
70
say
96
93
-2
emote
96
93
-2
enter
96
25
-1
lis*t view
96
89
-2
ins*ert n*ext p*revious .
96
25
-1
del*ete
96
89
-2
f*ind
96
93
-2
m*ove c*opy
96
89
-2
join*literal
96
89
-2
fill
96
89
-2
pub*lish perish unpub*lish depub*lish
96
9
-1
w*hat
96
13
-1
abort
96
9
-1
done q*uit pause
96
13
-1
huh2
2
173
-1
insertion
96
173
-1
set_insertion
96
173
-1
changed retain_session_on_exit
96
173
-1
set_changed
96
173
-1
origin
96
173
-1
set_origin
96
173
-1
readable
96
173
-1
set_readable
96
173
-1
text
96
173
-1
load
96
173
-1
working_on
96
173
-1
ok
96
173
-1
loaded
96
173
-1
list_line
96
173
-1
insert_line
96
173
-1
append_line
96
173
-1
join_lines
96
173
-1
parse_number
96
173
-1
parse_range
96
173
-1
parse_insert
96
173
-1
parse_subst
96
173
-1
invoke
96
173
-1
suck_in
96
173
-1
new_session
2
173
-1
kill_session
2
173
-1
reset_session
2
173
-1
kill_all_sessions
2
173
-1
acceptable
96
173
-1
enterfunc
96
173
-1
exitfunc
96
173
-1
@flush
96
109
-2
@stateprop
96
153
11
@rmstateprop
96
153
5
initialize
96
173
-1
init_for_core
2
173
-1
set_stateprops
96
173
-1
description
96
173
-1
commands_info
96
173
-1
match_object
96
173
-1
who_location_msg
96
173
-1
nothing_loaded_msg no_text_msg change_msg no_change_msg no_littering_msg depart_msg return_msg previous_session_msg
96
173
-1
announce announce_all announce_all_but tell_contents
96
173
-1
fill_string
96
173
-1
here_huh
96
173
-1
match
2
173
-1
get_room
96
173
-1
invoke_local_editor
2
173
-1
_stateprop_length
2
173
-1
print
2
9
-1
accept
96
173
-1
y*ank
2
89
-2
do_flush
96
173
-1
s*ubst
96
93
-2
subst_regexp
96
173
-1
include_for_core
96
173
-1
21
readable
times
commands2
help
no_text_msg
commands
invoke_task
exit_on_abort
previous_session_msg
stateprops
depart_msg
return_msg
no_littering_msg
no_change_msg
change_msg
nothing_loaded_msg
texts
active
changes
inserting
original
38
4
0
96
1
4
0
96
1
4
2
4
11
2
say
2
emote
2
lis*t
2
ins*ert
2
n*ext,p*rev
2
del*ete
2
f*ind
2
s*ubst
2
m*ove,c*opy
2
join*l
2
fill
4
4
2
y*ank
2
w*hat
2
abort
2
q*uit,done,pause
96
5
1
44
96
5
2
There are no lines of text.
96
5
4
16
4
2
2
say
2
<text>
4
2
2
emote
2
<text>
4
2
2
lis*t
2
[<range>] [nonum]
4
2
2
ins*ert
2
[<ins>] ["<text>]
4
2
2
n*ext,p*rev
2
[n] ["<text>]
4
2
2
del*ete
2
[<range>]
4
2
2
f*ind
2
/<str>[/[c][<range>]]
4
2
2
s*ubst
2
/<str1>/<str2>[/[g][c][r][<range>]]
4
2
2
m*ove,c*opy
2
[<range>] to <ins>
4
2
2
join*l
2
[<range>]
4
2
2
fill
2
[<range>] [@<col>]
4
2
2
w*hat
2

4
2
2
abort
2

4
2
2
q*uit,done,pause
2

4
2
2
enter
2

4
2
2
y*ank
2
from <text-source>
96
5
0
0
96
1
0
0
96
5
2

96
5
4
4
4
2
2
texts
0
0
4
2
2
changes
0
0
4
2
2
inserting
0
1
4
2
2
readable
0
0
96
1
2
%N heads off to the Generic Editing Room.
96
5
2
%N comes back from the Generic Editing Room.
96
5
2
Keeping your [whatever] for later work.  Since this the Generic Editor, you have to do your own :set_changed(0) so that we'll know to get rid of whatever it you're working on when you leave.  Please don't litter... especially in the Generic Editor.
96
5
2
There have been no changes since the last save.
96
5
2
Text has been altered since the last save.
96
5
2
You're not currently editing anything.
96
5
4
0
96
0
4
0
96
1
4
0
96
0
4
0
96
0
4
0
96
1
2
%L [editing]
96
5
5
96
5
5
96
5
5
96
5
5
96
5
5
96
5
0
1
96
5
4
1
1
5751
96
4
1
-1
96
5
0
1399008566
96
5
5
96
4
5
96
5
5
96
5
5
96
4
4
3
2
Generic Editor
2
gedit
2
edit
96
5
4
0
96
5
4
2
0
51968
0
1084848672
36
1
#51
matching utilities

16
36
-1
-1
-1
78
-1
52
8
match
36
173
-1
match_nth
36
173
-1
match_verb
2
173
-1
match_list
36
173
-1
parse_ordinal_reference parse_ordref
36
173
-1
parse_possessive_reference
36
173
-1
object_match_failed
36
165
-1
init_for_core
2
173
-1
4
ordn
ordw
ordinal_regexp
matching_room
9
4
10
2
first
2
second
2
third
2
fourth
2
fifth
2
sixth
2
seventh
2
eighth
2
ninth
2
tenth
36
5
4
10
2
1st
2
2nd
2
3rd
2
4th
2
5th
2
6th
2
7th
2
8th
2
9th
2
10th
36
5
2
%<%(first%|second%|third%|fourth%|fifth%|sixth%|seventh%|eighth%|ninth%|tenth%|1st%|2nd%|3rd%|4th%|5th%|6th%|7th%|8th%|9th%|10th%)%>
36
5
1
-1
36
1
4
11
2
$match_utils defines the following verbs:
2

2
match
2
match_nth
2
match_verb
2
match_list
2
parse_ordinal_reference (alias parse_ordref)
2
parse_possessive_reference
2
object_match_failed
2

2
For more documentation, see help $match_utils:<specific verb>.
36
5
5
36
4
4
1
2
matching utilities
36
5
5
36
5
4
2
0
9401
0
1084848672
36
1
#52
object utilities

16
2
-1
-1
-1
78
-1
53
31
has_property
2
173
-1
all_properties all_verbs
2
173
-1
has_verb
2
173
-1
has_callable_verb
2
173
-1
match_verb
2
173
-1
isa
36
173
-1
ancestors
36
173
-1
ordered_descendants
36
173
-1
contains
36
173
-1
all_contents
36
173
-1
findable_properties
2
173
-1
owned_properties
2
173
-1
property_conflicts
2
173
-1
descendants_with_property_suspended
2
173
-1
locations
2
173
-1
all_properties_suspended all_verbs_suspended
2
173
-1
connected
36
173
-1
isoneof
36
173
-1
defines_verb
2
173
-1
defines_property
2
173
-1
has_any_verb has_any_property
2
173
-1
has_readable_prop*erty hrp
2
173
-1
descendants descendents
36
173
-1
leaves
36
173
-1
branches
36
173
-1
descendants_suspended descendents_suspended
2
173
-1
leaves_suspended
2
173
-1
branches_suspended
2
173
-1
disown disinherit
2
173
-1
accessible_verbs
2
173
-1
accessible_prop*erties accessible_props
2
173
-1
0
5
4
45
2
These routines are useful for finding out information about individual objects.
2

2
Examining everything an object has defined on it:
2
  all_verbs          (object) => like it says
2
  all_properties     (object) => likewise
2
  findable_properties(object) => tests to see if caller can "find" them
2
  owned_properties   (object[, owner]) => tests for ownership
2

2
Investigating inheritance:
2
  ancestors(object[,object...]) => all ancestors
2
  descendants      (object)     => all descendants
2
  ordered_descendants(object)   => descendants, in a different order
2
  leaves           (object)     => descendants with no children
2
  branches         (object)     => descendants with children 
2
  isa        (object,class) => true iff object is a descendant of class (or ==)
2
  property_conflicts (object,newparent) => can object chparent to newparent?
2
  isoneof     (object,list)     => true if object :isa class in list of parents
2

2
Considering containment:
2
  contains      (obj1, obj2) => Does obj1 contain obj2 (nested)?
2
  all_contents      (object) => return all the (nested) contents of object
2
  locations         (object) => list of location hierarchy above object
2

2
Verifying verbs and properties:
2
  has_property(object,pname) => false/true   according as object.(pname) exists
2
  has_readable_property(object,pname) => false/true if prop exists and is +r
2
  defines_property(object,pname) => does object *define* this property
2
  has_verb    (object,vname) => false/{#obj} according as object:(vname) exists
2
  has_callable_verb          => same, but verb must be callable from a program
2
  defines_verb(object,vname) => does this object *define* this verb
2
  match_verb  (object,vname) => false/{location, newvname}
2
                               (identify location and usable name of verb)
2
  accessible_verbs(object)   => a list of verb names (or E_PERM) regardless of 
2
                                readability of object
2

2
Player checking:
2
  connected         (object) => true if object is a player and is connected
2

2
Suspending:
2
  Many of the above verbs have ..._suspended versions to assist with very large object hierarchies.  The following exist:
2
   descendants_suspended              
2
   branches_suspended                 
2
   leaves_suspended                   
2
   all_properties_suspended           
2
   descendants_with_property_suspended
2
5
5
2
4
4
1
2
object utilities
2
5
4
1
2
This is the object utilities utility package.  See `help $object_utils' for more details.
2
5
4
2
0
21564
0
1084848672
36
1
#53
lock utilities

16
2
-1
-1
-1
78
-1
56
11
init_scanner
2
173
-1
scan_token
2
173
-1
canonicalize_spaces
2
173
-1
parse_keyexp
2
173
-1
parse_E
2
173
-1
parse_A
2
173
-1
eval_key
2
173
-1
match_object
2
173
-1
unparse_key
2
173
-1
eval_key_new
2
173
-1
parse_A_new
2
173
-1
5
player
input_index
input_length
input_string
index_incremented
10
0
0
2
5
0
0
2
5
0
0
2
5
2

2
5
0
0
2
5
4
13
2
These routines are used when locking objects, and when testing an object's lock before allowing use (such as in an exit).
2

2
:parse_keyexp   (string keyexpression, object player)
2
        => returns an object or list for the new key as defined by the
2
           keyexpression or a string describing the error if it failed.
2

2
:eval_key       (LIST|OBJ key, testobject)
2
        => returns true if the given testobject satisfies the key.
2

2
:unparse_key    (LIST|OBJ key)
2
        => returns a string describing the key in english/moo-code terms.
2

2
For more information on keys and locking, read `help locking', `help keys', and `help @lock'.
2
5
5
2
4
4
1
2
lock utilities
2
5
2
This the lock utilities package, used by the MOOwide locking mechanisms. See `help $lock_utils' for more details.
2
5
4
2
0
9664
0
1084848672
36
1
#54
generic letter

144
2
-1
-1
-1
9
-1
-1
3
burn
2
41
-1
burn_succeeded_msg oburn_succeeded_msg burn_failed_msg oburn_failed_msg
2
173
-1
do_burn
2
173
-1
4
oburn_succeeded_msg
oburn_failed_msg
burn_failed_msg
burn_succeeded_msg
19
2
stares at %t; %[tps] bursts into flame and disappears, leaving no ash.
2
5
0
0
2
5
2
%T might be damp.  In any case, %[tps] won't burn.
2
5
2
%T burns with a smokeless flame and leaves no ash.
2
5
5
2
5
5
36
4
5
2
4
5
2
5
5
2
5
5
2
5
5
2
5
5
36
5
5
36
5
5
36
5
2
This is a private letter.
36
5
5
36
4
4
1
2
generic letter
36
5
2
Some writing on the letter explains that you should 'read letter', and when you've finished, 'burn letter'.
36
5
4
2
0
2373
0
1084848672
36
1
#55
list utilities

16
36
-1
-1
-1
78
-1
24
42
make
36
173
-1
range
36
173
-1
map_prop*erty
2
173
-1
map_verb
2
173
-1
map_arg*s
2
173
-1
map_builtin
2
173
-1
find_insert
36
173
-1
remove_duplicates
36
173
-1
arrayset
36
173
-1
setremove_all
36
173
-1
append
36
173
-1
reverse
36
173
-1
_reverse
36
173
-1
compress
36
173
-1
sort
36
173
-1
sort_suspended
2
173
-1
slice
36
173
-1
assoc
36
173
-1
iassoc
36
173
-1
iassoc_suspended
2
173
-1
assoc_prefix
36
173
-1
iassoc_prefix
36
173
-1
iassoc_sorted
36
173
-1
sort_alist
36
173
-1
sort_alist_suspended
2
173
-1
randomly_permute
36
173
-1
count
2
173
-1
flatten
36
173
-1
longest shortest
36
173
-1
check_nonstring_tell_lines
36
173
-1
reverse_suspended
2
173
-1
_reverse_suspended
2
173
-1
randomly_permute_suspended
2
173
-1
swap_elements
36
173
-1
random_item random_element
36
173
-1
assoc_suspended
2
173
-1
amerge
36
173
-1
passoc
36
165
-1
setmove
36
173
-1
iassoc_new
36
173
-1
build_alist
36
173
-1
flatten_suspended
36
173
-1
1
nonstring_tell_lines
6
4
0
36
1
4
45
2
append            (list,list,..) => result of concatenating the given lists
2
reverse           (list)         => reversed list
2
remove_duplicates (list)         => list with all duplicates removed
2
compress          (list)         => list with consecutive duplicates removed
2
setremove_all     (list,elt)     => list with all occurrences of elt removed
2
find_insert       (sortedlist,e) => index of first element > e in sortedlist
2
sort              (list[,keys])  => sorted list
2
count             (elt,list)     => count of elt found in list.
2
flatten           (list)         => flatten all recursive lists into one list
2
randomly_permute  (list)         => list with elements randomly permuted
2
longest           (list)         => longest in list (consisting of str or list)
2
shortest          (list)         => shortest in list (as above)
2

2
make              (n[,e])        => list of n copies of e
2
range             (m,n)          => {m,m+1,...,n}
2

2
arrayset   (list,val,i[,j,k...]) => array modified so that list[i][j][k]==val
2

2
-- Mapping functions (take a list and do something to each element):
2

2
map_prop ({o...},prop)              => list of o.(prop)            for all o
2
map_verb ({o...},verb[,args])        => list of o:(verb)(@args)     for all o
2
map_arg  ([n,]obj,verb,{a...},args) => list of obj:(verb)(a,@args) for all a
2
map_builtin (objectlist, function)  => applies function to all in objectlist
2

2
-- Association list functions --
2

2
An association list (alist) is a list of pairs (2-element lists), though the following functions have been generalized for lists of n-tuples (n-element lists).  In each case i defaults to 1.
2

2
assoc        (targ,alist[,i]) => 1st tuple in alist whose i-th element is targ
2
iassoc       (targ,alist[,i]) => index of same.
2
assoc_prefix (targ,alist[,i]) => ... whose i-th element has targ as a prefix
2
iassoc_prefix(targ,alist[,i]) => index of same.
2
iassoc_sorted(targ,slist[,i]) => index of last element in sortedlist <= targ
2
slice             (alist[,i]) => list of i-th elements
2
sort_alist        (alist[,i]) => alist sorted on i-th elements.
2
amerge  (alist,[tind,[dind]]) => merges tuples of alist with matching i-th elt
2
build_alist          (list,N) => make an alist of N-intervals from list
2

2
-- Functions that suspend --
2

2
Each of these either suspends(0) as needed or takes an interval in seconds for the suspend as a first argument. See help $list_utils:<verb>.
2

2
sort_suspended          iassoc_suspended          sort_alist_suspended
2
reverse_suspended       randomly_permute_suspended
36
5
5
36
4
4
1
2
list_utilities
36
5
4
1
2
This is the list utilities utility package.  See `help $list_utils' for more details.
36
5
4
2
0
29031
0
1084848672
36
1
#56
command utilities

16
2
-1
-1
-1
78
-1
42
16
object_match_failed
2
173
-1
player_match_result player_match_failed
2
173
-1
read
2
173
-1
read_lines
2
173
-1
yes_or_no
2
173
-1
read_lines_escape
2
173
-1
suspend
2
173
-1
running_out_of_time
36
173
-1
suspend_if_needed
2
173
-1
dump_lines
36
173
-1
explain_syntax
2
173
-1
do_huh
2
165
-1
task_info
2
173
-1
init_for_core
2
173
-1
kill_if_laggy
36
173
-1
validate_feature
36
173
-1
2
lag_samples
feature_task
7
4
0
2
1
4
9
0
388912170
2
@abort
4
0
2

1
-1
2

2

1
-1
2

36
0
4
38
2
$command_utils is the repository for verbs that are of general usefulness to authors of all sorts of commands.  For more details about any of these verbs, use `help $command_utils:<verb-name>'.
2

2
Detecting and Handling Failures in Matching
2
-------------------------------------------
2
:object_match_failed(match_result, name)
2
    Test whether or not a :match_object() call failed and print messages if so.
2
:player_match_failed(match_result, name)
2
    Test whether or not a :match_player() call failed and print messages if so.
2
:player_match_result(match_results, names)
2
    ...similar to :player_match_failed, but does a whole list at once.
2

2
Reading Input from the Player
2
-----------------------------
2
:read()         -- Read one line of input from the player and return it.
2
:yes_or_no([prompt])
2
                -- Prompt for and read a `yes' or `no' answer.
2
:read_lines()   -- Read zero or more lines of input from the player.
2
:dump_lines(lines) 
2
                -- Return list of lines quoted so that feeding them to 
2
                   :read_lines() will reproduce the original lines.
2
:read_lines_escape(escapes[,help])
2
                -- Like read_lines, except you can provide more escapes
2
                   to terminate the read.
2

2
Feature Objects
2
---------------
2
:validate_feature -- compare command line against feature verb argument spec
2

2
Utilities for Suspending
2
------------------------
2
:running_out_of_time()
2
                -- Return true if we're low on ticks or seconds.
2
:suspend_if_needed(time)
2
                -- Suspend (and return true) if we're running out of time.
2

2
Client Support for Lengthy Commands
2
-----------------------------------
2
:suspend(args)  -- Handle PREFIX and SUFFIX for clients in long commands.
2
5
5
2
4
5
2
5
4
1
2
This is the command utilities utility package.  See `help $command_utils' for more details.
2
5
4
2
0
18931
0
1084848672
36
1
#57
generic wizard

16
2
-1
-1
-1
58
2
36
38
@chown*#
2
89
-2
@shout
2
89
-2
@grant @grants* @transfer
2
89
1
@programmer
2
25
-1
make-core-database
2
25
-1
@shutdown
2
89
-2
@dump-d*atabase
2
9
-1
@who-calls
2
89
-2
mcd_2
2
13
-1
@toad @toad! @toad!!
2
89
-2
@untoad @detoad
2
89
-2
@quota
2
89
12
@players
2
89
-2
kill_aux_wizard_parse
2
173
-1
@grepcore @egrepcore
2
89
-2
@net-who @@who
2
89
-2
@make-player
2
89
-2
@abort-sh*utdown
2
89
-2
toad_msg toad_victim_msg programmer_msg programmer_victim_msg newt_msg newt_victim_msg
2
173
-1
moveto
2
173
-1
@newt
2
89
-2
@unnewt @denewt @get-better
2
89
-2
@register
2
89
-2
@new-password @newpassword
2
89
12
@log
2
89
-2
@guests
2
25
-1
@rn mail_catch_up check_mail_lists current_message set_current_message get_current_message make_current_message kill_current_message @nn
2
13
-1
@blacklist @graylist @redlist @unblacklist @ungraylist @unredlist @spooflist @unspooflist
2
89
-2
@corify
2
89
13
@make-guest
2
25
-1
@temp-newt
2
89
11
@deprog*rammer
2
89
-2
display_list
2
173
-1
parse_templist_duration
36
173
-1
check_site_entries
2
173
-1
@lock-login @unlock-login @lock-login!
2
89
-2
__fix
2
173
-1
toad_cleanup
2
173
-1
9
newt_victim_msg
newt_msg
public_identity
programmer_msg
programmer_victim_msg
toad_victim_msg
toad_msg
mail_identity
advertised
99
2

2
5
2
%n @newts %d (%[#d])
2
5
1
-1
2
5
2
%d is now a programmer.
2
5
2
You are now a programmer.
2
5
2
Have a nice life...
2
5
2
%n @toads %d (%[#d])
2
5
1
-1
2
4
0
1
2
5
5
36
1
5
36
1
5
36
1
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
36
1
5
36
1
5
36
1
5
36
1
5
36
1
5
36
1
5
36
1
5
36
1
5
2
5
5
2
5
5
2
5
5
36
1
5
2
5
5
2
4
5
2
5
5
2
5
5
2
5
4
0
2
5
5
2
5
5
2
5
5
2
4
5
2
4
4
2
1
90
1
89
36
1
5
2
0
5
2
0
5
2
1
1
23
2
5
5
2
5
5
36
1
5
36
1
5
36
0
5
36
1
5
2
1
5
36
1
5
2
4
5
2
0
5
2
0
5
2
5
5
2
5
5
2
4
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
1
5
36
0
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
1
62
2
5
2
really impossible password to type
2
0
5
2
5
5
2
5
5
2
5
5
2
5
5
2
1
5
36
0
5
2
0
5
2
0
5
2
4
4
1
2
player
2
1
2
You see a wizard who chooses not to reveal its true appearance.
2
5
4
2
0
56607
0
1084848672
36
1
#58
generic programmer

144
2
-1
-1
-1
4
57
96
35
@prop*erty
2
89
-2
@chmod*#
2
89
-2
@args*#
2
89
-2
eval*-d
2
89
-2
@rmprop*erty
2
89
-2
@verb
2
89
-2
@rmverb*#
2
25
-1
@forked*-verbose
2
25
-1
@kill @killq*uiet
2
25
-1
@copy @copy-x @copy-move
2
89
1
_kill_task_message
2
173
-1
@prog*ram @program#
2
89
-2
@setenv
2
89
-2
@pros*pectus pros*pectus
2
93
-2
@d*isplay
2
25
-1
@db*size
2
9
-1
@gethelp
2
93
-2
@grep*all @egrep*all
2
89
-2
@s*how
2
89
-2
@check-p*roperty
2
25
-1
set_eval_env
36
173
-1
@clearp*roperty @clprop*erty
2
25
-1
@disown @disinherit
2
89
-2
eval_cmd_string
2
173
-1
@dump
2
89
-2
#*
2
89
-2
eval_value_to_string
2
173
-1
@progo*ptions @prog-o*ptions @programmero*ptions @programmer-o*ptions
2
89
-2
prog_option
2
173
-1
set_prog_option
2
173
-1
@list*#
2
89
-2
set_eval_subs
2
13
-1
@verbs*
2
25
-1
@old-forked-v*erbose
2
25
-1
@props @properties
2
81
-2
4
eval_subs
eval_ticks
eval_env
prog_options
90
4
0
36
1
0
3
36
1
2
here=player.location;me=player
36
1
4
0
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
36
1
5
36
1
5
36
1
5
36
1
5
36
1
5
36
1
5
36
1
5
36
1
5
2
5
5
2
5
5
2
5
5
36
1
5
2
5
5
2
4
5
2
5
5
2
5
5
2
5
4
0
2
5
5
2
5
5
2
5
5
2
4
5
2
4
4
2
1
90
1
89
36
1
5
2
0
5
2
0
5
2
1
4
4
1
22
1
28
1
18
1
19
2
5
5
2
5
5
36
1
5
36
1
5
36
0
5
36
1
5
2
1
5
36
1
5
2
4
5
2
0
5
2
0
5
2
5
5
2
5
5
2
4
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
1
0
0
36
0
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
1
62
2
5
5
2
0
5
2
5
5
2
5
5
2
5
5
2
5
5
2
1
5
36
0
5
2
0
5
2
0
5
2
4
4
2
2
generic
2
programmer
2
1
2
You see a player who is too experienced to have any excuse for not having a description.
2
5
4
2
0
59612
0
1084848672
36
1
#59
code utilities

16
36
-1
-1
-1
78
-1
91
59
eval_d
2
85
-2
toint tonum
36
173
-1
toobj
36
173
-1
toerr
36
173
-1
error_name
36
173
-1
show_object
2
173
-1
show_property
2
173
-1
show_verbdef
2
173
-1
explain_verb_syntax
2
173
-1
verb_p*erms verb_permi*ssions
2
173
-1
verb_loc*ation
36
173
-1
verb_documentation
2
173
-1
set_verb_documentation
2
173
-1
parse_propref
2
173
-1
parse_verbref
2
173
-1
parse_argspec
36
173
-1
prepositions
36
173
-1
short_prep
36
173
-1
full_prep
36
173
-1
get_prep
36
173
-1
_fix_preps
36
173
1
find_verb_named
2
165
-1
find_last_verb_named
2
173
-1
find_callable_verb_named
2
173
-1
verbname_match(new)
36
173
-1
find_verbs_containing find_verbs_matching find_verb_lines_containing find_verb_lines_matching
2
173
-1
_find_verbs_containing _find_verbs_matching
2
173
-1
_grep_verb_code
2
173
-1
_egrep_verb_code
2
173
-1
_parse_audit_args
36
173
-1
help_db_list
2
173
-1
help_db_search
36
173
-1
corify_object
36
173
-1
inside_quotes
2
173
-1
verb_or_property
2
173
-1
task_valid
2
173
-1
task_owner
2
173
-1
argstr
2
173
-1
verbname_match
36
173
-1
substitute
36
173
-1
show_who_listing
2
173
-1
_egrep_verb_code_all
2
173
-1
_grep_verb_code_all
2
173
-1
verb_usage
2
173
-1
verb_frame
36
173
-1
verb_all_frames
36
173
-1
move_verb
2
173
-1
move_prop*erty
2
173
-1
eval_d_util
2
165
-1
display_callers
2
173
-1
callers_text
2
173
-1
set_property_value set_verb_or_property
2
165
-1
owns_task
2
173
-1
dflag_on
2
173
-1
type_str
36
173
-1
dump_properties
2
173
-1
dump_preamble
2
173
-1
dump_verbs
2
173
-1
_find_verb_lines_containing _find_verb_lines_matching
2
173
-1
10
_version
_multi_preps
_other_preps_n
_other_preps
_short_preps
_all_preps
builtin_props
error_names
error_list
prepositions
15
2
1.8.4+toastsoft.51
36
5
4
7
2
off
2
from
2
out
2
on
2
on top
2
in
2
in front
36
5
4
13
0
1
0
2
0
4
0
4
0
5
0
5
0
5
0
6
0
6
0
9
0
9
0
12
0
15
36
5
4
13
2
using
2
at
2
inside
2
into
2
on top of
2
onto
2
upon
2
out of
2
from inside
2
underneath
2
beneath
2
about
2
off of
36
5
4
15
2
with
2
to
2
in front of
2
in
2
on
2
from
2
over
2
through
2
under
2
behind
2
beside
2
for
2
is
2
as
2
off
36
5
4
28
2
with
2
using
2
at
2
to
2
in front of
2
in
2
inside
2
into
2
on top of
2
on
2
onto
2
upon
2
out of
2
from inside
2
from
2
over
2
through
2
under
2
underneath
2
beneath
2
behind
2
beside
2
for
2
about
2
is
2
as
2
off
2
off of
36
5
4
9
2
name
2
r
2
w
2
f
2
programmer
2
wizard
2
owner
2
location
2
contents
2
1
4
16
2
E_NONE
2
E_TYPE
2
E_DIV
2
E_PERM
2
E_PROPNF
2
E_VERBNF
2
E_VARNF
2
E_INVIND
2
E_RECMOVE
2
E_MAXREC
2
E_RANGE
2
E_ARGS
2
E_NACC
2
E_INVARG
2
E_QUOTA
2
E_FLOAT
36
5
4
16
3
0
3
1
3
2
3
3
3
4
3
5
3
6
3
7
3
8
3
9
3
10
3
11
3
12
3
13
3
14
3
15
36
5
4
15
2
with/using
2
at/to
2
in front of
2
in/inside/into
2
on top of/on/onto/upon
2
out of/from inside/from
2
over
2
through
2
under/underneath/beneath
2
behind
2
beside
2
for/about
2
is
2
as
2
off/off of
36
5
4
65
2
parse_propref("foo.bar")  => {"foo","bar"} (or 0 if arg. isn't a property ref.)
2
parse_verbref("foo:bar")  => {"foo","bar"} (or 0 if arg. isn't a verb ref.)
2
parse_argspec("any","in","front","of","this","baz"...)
2
                          => {{"any", "in front of", "this"},{"baz"...}} 
2
                                           (or string if args don't parse)
2

2
toint(string)           => integer (or E_TYPE if string is not a integer)
2
toobj(string)           => object (or E_TYPE if string is not an object)
2
toerr(number or string) => error value (or 1 if out of range or unrecognized)
2
error_name(error value) => name of error (e.g., error_name(E_PERM) => "E_PERM")
2

2
verb_perms()      => the current task_perms (as set by set_task_perms()).
2
verb_location()   => the object where the current verb is defined.
2
verb_frame()      => callers()-style frame for the current verb.
2
verb_all_frames() => entire callers() stack including current verb.
2
verb_usage([object,verbname]) => returns first line of verb doc, usually usage
2
verb_documentation([object,verbname]) => documentation at beginning of
2
           verb code, if any -- default is the calling verb
2
set_verb_documentation(object,verbname,text) => sets text at beginning of verb
2

2
   Preposition routines
2

2
prepositions()     => full list of prepostions
2
full_prep ("in")   => "in/inside/into"
2
short_prep("into") => "in"
2
short_prep("in/inside/into") => "in"
2
get_prep  ("off", "of", "the", "table") => {"off of", "the", "table"}
2

2
   Verb routines
2

2
verbname_match (fullname,name) => can `name' be used to call `fullname'
2
find_verb_named          (object,name[,n]) => verb number or 0 if not found
2
find_last_verb_named     (object,name[,n]) => verb number of last verb match
2
find_callable_verb_named (object,name[,n]) => verb number or 0 if not found
2
find_verbs_containing (pattern[,object|objlist]) => does work for @grep
2
find_verbs_matching (pattern[,object|objlist]) => does work for @egrep
2
move_verb (from obj,name,to obj[,newname]) => move a verb from object to object
2

2
move_prop (from obj,name,to obj[,newname]) => move a property to another object
2

2
   Verbs that do the actual dirty work for command lines verbs:
2

2
@show           => show_object  (object)
2
                   show_property(object,propname)
2
                   show_verbdef (object,verbname)
2
explain_syntax  => explain_verb_syntax(thisname,verbname,@verbargs)
2
eval*-d         => eval_d(code)
2
help            => help_db_list([player])
2
                   help_db_search(string topic, dblist)
2
@who            => show_who_listing(players [,more_players])
2
@check-full     => display_callers([callers() output])
2
@dump           => dump_preamble(object)
2
                => dump_properties(object, create_flag)
2
                => dump_verbs(object, create_flag)
2

2
   Random but useful verbs
2

2
verb_or_property(object,name[,@args]) => result of verb or property call,
2
                                         or E_PROPNF
2
corify_object(object)     => if the object is corified, returns $<name>
2
task_valid(INT task_id)   => returns true if task_id is currently running.
2
task_owner(INT task_id)   => returns owner of task_id, if running
2
owns_task(NUM task_id,OBJ who) => returns whether who owns task_id (if running)
2
argstr(verb,args[,argstr] => returns a corrected argstr (see full verb help)
2
substitute(string,subs)   => subs in form {{"target", "sub"}, {...}, ...}
36
5
5
36
4
4
2
2
code
2
utils
36
5
4
1
2
This is the code utilities utility package.  See `help $code_utils' for more details.
36
5
4
2
0
59174
0
1084848672
36
1
#60
Help Database

16
36
-1
-1
-1
30
-1
44
9
player_quota
2
173
-1
prog_quota
2
173
-1
get_topic
2
173
-1
find_topics
2
173
-1
full_index
36
173
-1
index_list
36
173
-1
wizard_list
2
173
-1
dump_topic
36
173
-1
find_full_index_topic
36
173
-1
121
@uptime
wizard-list
@wrap
full-index
 index
gen-index
@pagelength
@more
programming
@linelength
@gaglist
::
@comment

spoofing
privacy
@examine
security
@sweep
@paranoid
@check
@eject
@quit
whereis
@suggest
@idea
@bug
@typo
@notedit
editors
@memory
"
:
@lastlog
@version
miscellaneous
insert
information
?
put
remove
burn
letters
decrypt
encrypt
delete
erase
write
read
examine
hand
throw
take
@messages
pronouns
messages
descriptions
@describe
tinymud
@gripe
@listgag
@ungag
@gag
go
@password
@sethome
@who
introduction
give
news
gagging
@move
inventory
@gender
@rename
notes
look
drop
get
manipulation
help
movement
home
say
whisper
page
emote
players
summary
@edit-options
@editoptions
@add-feature
@remove-feature
@features
features
@rmalias
@addalias
commands
 name
@request-character
player-names
@registerme
@eject!
gopher
options
@age
@edit
@addfeature
communication
objects
 aliases
@check-full
@users
alias
@add-alias
@mode
wizard-names
backspace
spivak
@owner
checkpoint
127
4
4
2
Syntax:  @uptime
2

2
   The @uptime command displays the amount of time since the last restart of the server.
2
   Note to programmers:  The last restart time of the server is stored in $last_restart_time.
36
5
4
4
2
*subst*
2

2
%;this:wizard_list()
2

36
5
4
2
2
*forward*
2
@linelength
36
1
4
1
2
*full_index*
36
5
4
1
2
*index_list*
36
5
4
2
2
*index*
2
General Help Topics
36
5
4
21
2
Syntax:  @pagelength <number>
2
         @pagelength
2

2
If the lines you see scroll off the top of your screen too quickly for you to
2
read and your client program is such that any lines scrolling off the top are
2
gone forever, you can use the @pagelength command to invoke page buffering to
2
limit the number of lines sent at a time.  E.g., if your terminal has a 24 line
2
screen, you can do @pagelength 24 and output will stop every 24 lines if you
2
don't type any other commands.
2

2
You will need to use the @more command to continue reading output once it 
2
has been stopped.  Make sure you read `help @more' before setting @pagelength.
2

2
@pagelength 0 means no page buffering will be done by the MOO.
2

2
By default the MOO will assume you have an infinitely wide terminal screen, so
2
you may wish to set @linelength as well, and ensure wrapping is on with @wrap
2
on.  (See help @linelength and help @wrap.)  As with word wrapping, you are
2
best off running a client that can do its own page buffering; the MOO server's
2
page buffering is inherently slower and many MUD's do not have page buffering
2
at all.
2
1
4
19
2
*subst*
2
Syntax:  @more
2
         @more rest
2
         @more flush
2

2
If you have @pagelength set (see `help @pagelength') and some combination of events or commands produces sufficiently many lines of output, you will see a message of the form
2

2
%[strsub(player.more_msg,"%%n","37")]
2

2
indicating (in this case) 37 more lines of text waiting to be read.  
2
At this point, you should give one of the @more commands above.  
2

2
@more without arguments prints sufficiently many lines to fill your screen,
2
assuming you've set @pagelength correctly, unless there are not that many
2
lines left to print.
2

2
@more rest will print all of the remaining lines, regardless of your @pagelength setting.  
2

2
@more flush discards all remaining lines
2
1
4
3
2
MOO contains a rich programming language for the creation of interesting rooms, exits, and other objects.
2

2
Not every player is allowed to program in MOO, including (at the moment, anyway) you.  If you would like to be, find a wizard and convince them that you've got good ideas that the MOO needs.  Good luck!
36
5
4
22
2
Syntax:  @wrap <on|off>
2
         @wrap
2

2
         @linelength <number>
2
         @linelength
2

2
If the lines you see get cut off at the edge of your screen (you don't have
2
word-wrap), you can get the MOO to split lines for you.  The @linelength
2
command tells the MOO how many columns you have on your screen--you probably
2
want @linelength 79--and "@wrap on" tells the MOO you want it to do word-
2
wrap.
2

2
It's better if you can fix this problem without the MOO's help, though,
2
because the MOO's solution will be slower than a local solution, and
2
because not all MUDs are willing to do word-wrap.
2

2
If you don't want the MOO to split lines for you, there might still be some
2
use for the @linelength command.  Certain commands, like @who and @check,
2
print truncated lines so they can print in neat columns.  The default for
2
these is generally about 79 columns, which looks fine if you have an
2
eighty-column screen.  If your screen is a different width, though, you
2
can set @linelength and some of these commands will react accordingly.
36
5
4
2
2
*forward*
2
@listgag
36
5
4
2
2
*forward*
2
emote
36
5
4
2
2
*forward*
2
@typo
36
5
4
5
2
*forward*
2
summary
2

2
Type 'help <topic>' for information on a particular topic.
2

36
5
4
2
2
*forward*
2
security
36
1
4
15
2
Some things you should be aware of:
2

2
 -*-*- OMNISCIENT WIZARDS AND SYSADMINS: -*-*-
2
Wizards can look at absolutely *anything* in the MOO database.  
2
The arch-wizard and the sysadmin for the MOO-server host have complete access not only to the MOO database itself but to many other possibly-relevant things.
2
The above mentioned parties (wizards et al), while they will endeavor to be discreet about anything incidental that turns up, nevertheless reserve the right to look at anything they want, if only for the sake of being able to resolve technical problems.
2

2
 -*-*- LOGGING: -*-*- 
2
Some client programs (the "client" is the program you use to connect to the MOO, e.g., telnet, tinytalk, tinyfugue, emacs with mud.el...) are capable of logging everything that happens to the corresponding player.  In fact, with some clients this happens by default.  If a given player's client has logging enabled and said player is either in the room with you or is monitoring an object that is in the room with you, then *everything* you say and emote gets recorded.  Also, if you are in a room owned by someone else, all bets are off.  There is *no way* that the MOO server can know about what client a given player is using; thus, anyone who can hear you is a potential logger.
2

2
In and of itself this would not be a problem --- indeed, logs are often useful for reference purposes.  However, there is no guarantee that the log will not end up someplace where you'd rather it didn't, e.g., posted on the rec.games.mud Usenet newsgroup.  While it is considered bad form (i.e., rude) to circulate or post a log without having the permission of at least the major participants in the activities logged, there is not a whole lot we can do on the technical side to prevent it from happening.
2

2
Be aware of the problem.  The @sweep command (see `help @sweep') attempts to determine what players can be listening at any given moment.  If anything, it errs on the side of paranoia.  Even so, it doesn't cover *all* possible avenues of eavesdropping, and there's no hope for it covering the situations like the one where someone manages to convince one of the participants in your discussion who kept a log that it really doesn't need to be kept private after all.
2

2
If you've got something really sensitive to discuss, you are best off doing it by encrypted email or in person.
36
5
4
12
2
Syntax:  @examine <object>
2
         @exam <object>
2

2
Prints several useful pieces of information about the named object, including the following:
2
        + its full name, aliases, and object number
2
        + its owner's name and object number
2
        + its description
2
        + its key expression (if it is locked and if you own it)
2
        + its contents and their object numbers
2
        + the 'obvious' verbs defined on it
2

2
[Note to programmers: the 'obvious' verbs are those that are readable and that can be invoked as commands.  To keep a verb off this list, either make it unreadable (see 'help @chmod') or, if it shouldn't be used as a command, give it 'args' of 'this none this' (see 'help @args').]
36
5
4
5
2
There are several commands available to determine the origins of messages and to check that your communications with other players are secure. Help is available on the following topics:
2

2
@paranoid -- keeping a record of messages your character hears.
2
@check    -- looking at that record to determine responsibility for messages.
2
@sweep    -- checking who is listening in on your conversation.
36
5
4
3
2
Syntax: @sweep
2

2
Used when you wish to have a private conversation, and are concerned someone may be listening in. @sweep tries to list the avenues by which information may be leaving the room. In a manner analogous to @check, it assumes that you don't want to hear about your own verbs, or those belonging to wizards, who presumably wouldn't stoop to bugging.
36
5
4
9
2
Syntax:  @paranoid
2
         @paranoid off
2
         @paranoid immediate
2
         @paranoid <number>
2

2
In immediate mode, the monitor prepends everything you hear with the name of 
2
the character it considers responsible for the message. Otherwise, it keeps 
2
records of the last <number> (defaults to 10) lines you have heard. These 
2
records can be accessed by the @check command.
36
5
4
23
2
Syntax:   @check <options>
2

2
where <options> is one or more of:
2
-- the number of lines to be displayed
2
-- a player's name, someone to be "trusted" during the assignment of responsibility for the message.
2
-- a player's named prefixed by !, someone not to be "trusted".
2

2
          @check-full <options>
2
where <options is either 
2
-- the number of lines to be displayed
2
-- a search string: only lines containing that string will be displayed.
2

2
Used when you are suspicious about the origin of some of the messages your character has just heard.
2

2
Output from @check is in columns that contain, in order, the monitor's best guess as to:
2
    what object the message came from,
2
    what verb on that object that was responsible,
2
    whose permissions that verb was running with, and
2
    the beginning of the actual message.
2

2
Output from @check-full is in columns that contains a description of all the verbs that were responsible for the noise heard, not just the best guess as to who was responsible.
2

2
@check operates by examining the list of verbs that were involved in delivering the message, and assigning responsibility to the first owner it sees who is not "trusted".  By default, it trusts you and all the wizards.  It uses the records maintained by @paranoid, so you must have used that command before you received the message.
36
5
4
11
2
Syntax: @eject[!] <object> [from <place>]
2

2
This command is used to remove unwanted objects from places you own.  Players thus removed are unceremoniously dumped in their homes (unless that's this room, in which case they are dumped in the default player starting place).  Other kinds of objects are checked for a .home property and sent there if possible, otherwise they get thrown into #-1.  Unlike @move, @eject does *not* check to see if the object wants to be moved, and with the destination being what it is, there is no question of the destination refusing the move, either.  Generally, you should only resort to @eject if @move doesn't work.
2

2
`@eject <object>' removes <object> from the current room, whereas `@eject <object> from <place>' removes the object from the specified location (in most cases, <place> will need to be specified as an object number).  In either case, this command only works if you own the room/entity from which the object is being ejected.
2

2
`@eject ... from me' suffices to get rid of some unwanted object in your inventory.
2

2
The verbs @eject! and @eject!! are provided for those rare situations in which @eject does not work.  @eject! does not check for .home properties, sending the offending object to #-1 immediately, but with a notification.  @eject!! is just like @eject! but provides no notification to the object.
2

2
See 'help room-messages' for a list of messages one can set regarding the @eject command.
36
5
4
3
2
Syntax:  @quit
2

2
Disconnect from the MOO.  This breaks your network connection and leaves your player sleeping.  Disconnecting in most parts of the MOO automatically returns your player to its designated home (see 'help home').
36
1
4
4
2
Syntax:  whereis [<player> [<player>...]]
2
        @whereis [<player> [<player>...]]
2

2
Returns the current location of each of the specified players, or of all players if not arguments given.
36
5
4
2
2
*forward*
2
@typo
36
5
4
2
2
*forward*
2
@typo
36
5
4
2
2
*forward*
2
@typo
36
5
4
12
2
Syntax:  @typo    [<text>]
2
         @bug     [<text>]
2
         @suggest [<text>]
2
         @idea    [<text>]
2
         @comment [<text>]
2

2
If <text> is given, a one-line message is sent to the owner of the room, presumably about something that you've noticed.  If <text> is not given, we assume you have more to say than can fit comfortably on a single line; the usual mail editor is invoked.  The convention is that @typo is for typographical errors on the room or objects found therein, @bug is for anomalous or nonintuitive behaviour of some sort, @idea/@suggest for any particular brainstorms or criticisms you might happen to have, and @comment for anything else.
2

2
If you're sending a bug report to someone because you got an error traceback when you used some object of theirs, please give them enough information to work on the problem.  In particular, please tell them *exactly* what you typed and *all* of the error messages that were printed to you, including the entire traceback, up to the line `(End of traceback.)'.  Without this information, it is nearly impossible for the programmer to discover, let alone fix, the problem.
2

2
The usual mail editor is only invoked for this command when in rooms that allow free entry, i.e., rooms that are likely to allow you back after you are done editing your message.  Otherwise these commands will require <text> and only let you do one-line messages.  
2
Most adventuring scenario rooms fall into this latter category.
36
5
4
8
2
Syntax:  @notedit <note-object>
2
         @notedit <object>.<property>
2

2
Enters the MOO Note Editor to edit the text on the named object
2
For the first form, <note-object> must be a descendant of $note.  
2
For the second form, <object>.<property> can be any string-valued or text-valued (i.e., list of strings) property on any object.
2

2
See 'help editors' for more detail.
36
5
4
40
2
One can always enter an editor by teleporting to it, or you can use one of the commands provided
2

2
    @edit     <object>:<verb>    invokes the Verb Editor (edits verb code)
2
    @notedit  <note_object>      invokes the Note Editor (edits note text)
2
    @notedit  <object>.<prop>    invokes the Note Editor (edits text property)
2
    @send     <list of recipients>        invokes the Mailer (edits a mail msg)
2
    @answer   [<msg_number>] [<flags>...] invokes the Mailer (edits a reply)
2

2
This will transport you to one of several special rooms that have editing commands available.  These editors are admittedly not as good as EMACS, but for those with no other editing capability on their host systems, they are better than nothing.
2

2
There is a generic editor that provides basic editing commands that are applicable to all editors.  Documentation for these commands can be obtained by typing `help <topic>' within the editor:
2

2
    abort              emote/:            pause              send      (M) 
2
    also-to (M)        fill               prev               showlists (M) 
2
    compile (V)        insert             print     (M)      subject   (M) 
2
    copy               join               quit               subst         
2
    delete             list               ranges             to    (M)     
2
    done               move               save      (N)      what          
2
    edit    (V,N)      next               say/"              who   (M)     
2

2
In addition, individual editors provide their own additional commands for loading text from places, saving text to places, and various other specialized functions which are denoted in the above list with (M),(N),(V) according as they apply to the mail editor, the note editor, or the verb editor, respectively.
2

2
Note that a given editor only allows you one session at a time (ie. one verb, one note, or one mail message).  If you leave an editor without either aborting or compiling/saving/sending the item you're working on, that editor remembers what you are doing next time you enter it, whether you enter it by teleporting or by using the appropriate command.  Note that editors are periodically flushed so anything left there for sufficiently long will eventually go away.
2

2
A player may have his own .edit_options property which is a list containing one or more (string) flags from the following list
2

2
  quiet_insert
2
      suppresses those annoying "Line n added." or "Appended..." messages
2
      that one gets in response to 'say' or 'emote'.  This is useful if you're
2
      entering a long list of lines, perhaps via some macro on your client,
2
      and you don't want to see an equally long list of "Line n added..."
2
      messages.  What you do want, however is some indication that this all
2
      got through, which is why the "." command is an abbreviation for insert.
2

2
  eval_subs
2
      Enables the verb editor to process your eval_subs property when
2
      compiling your verb.  See `help eval' for more information about
2
      the eval_subs property.
2

2
There will be more options, some day.
36
5
4
3
2
Syntax:  @memory
2

2
Prints out all information available on the current memory-usage behavior of the MOO server.  Probably only a wizard, if anyone, cares about this.
36
1
4
2
2
*forward*
2
say
36
1
4
2
2
*forward*
2
emote
36
1
4
6
2
Syntax:  @lastlog
2
         @lastlog <player>
2

2
The first form prints out a list of all players, roughly sorted by how long it's been since that player last connected to the MOO.  For each player, the precise time of their last connection is printed.
2

2
The second form only shows the last-connection time for the named player.
36
1
4
3
2
Syntax:  @version
2

2
Prints out the version number for the currently-executing MOO server.
36
1
4
4
2
Here are a few commands of occasional utility that didn't fit into any of the neat categories for the rest of the help system:
2

2
@version -- printing the MOO server version number
2
@lastlog -- finding out when some player last connected to the MOO
36
1
4
2
2
*forward*
2
put
36
1
4
2
2
*forward*
2
help
36
1
4
2
2
*forward*
2
help
36
1
4
4
2
Syntax:  put <object> into <container>
2
         insert <object> in <container>
2

2
Moves the named object into the named container.  Sometimes the owners of the object and/or the container will not allow you to do this.
36
1
4
2
2
*forward*
2
take
36
1
4
3
2
Syntax:  burn <letter>
2

2
Destroy the named letter irretrievably.  Only players who can read the letter can do this.
36
1
4
1
2
A letter is a special kind of note (see 'help notes') with the added feature that it can be recycled by anyone who can read it.  This is often useful for notes from one player to another.  You create the letter as a child of the generic letter, $letter (see 'help @create' and 'help write'), encrypt it so that only you and the other player can read it (see 'help encrypt') and then either give it to the player in question or leave it where they will find it.  Once they've read it, they can use the 'burn' command to recycle the letter; see 'help burn' for details.
36
1
4
3
2
Syntax:  decrypt <note>
2

2
Removes any restriction on who may read the named note or letter.  Only the owner of a note may do this.
36
1
4
3
2
Syntax:  encrypt <note> with <key-expression>
2

2
Restricts the set of players who can read the named note or letter to those for whom the given key expression is true.  See 'help keys' for information on the syntax and semantics of key expressions.  Only the owner of a note may do this.
36
1
4
3
2
Syntax:  delete <line-number> from <note>
2

2
Removes a single line of text from a note.  The first line of text is numbered 1, the second is 2, and so on.  Only the owner of a note may do this.
36
1
4
3
2
Syntax:  erase <note>
2

2
Deletes all of the text written on a note or letter.  Only the owner of a note may do this.
36
1
4
3
2
Syntax:  write "<any text>" on <note>
2

2
Adds a line of text to the named note or letter.  Only the owner of a note may do this.
36
1
4
3
2
Syntax:  read <note>
2

2
Prints the text written on the named object, usually a note or letter.  Some notes are encrypted so that only certain players may read them.
36
1
4
10
2
Syntax:  examine <object>
2
         exam <object>
2

2
Prints several useful pieces of information about the named object, including the following:
2
        + its full name, object number, and aliases
2
        + its owner's name
2
        + its description
2
        + its key expression (if it is locked and if you own it)
2
        + its contents
2
        + the 'obvious' verbs defined on it
36
1
4
2
2
*forward*
2
give
36
1
4
2
2
*forward*
2
drop
36
1
4
9
2
Syntax:  take <object>
2
         get <object>
2
         take <object> from <container>
2
         get <object> from <container>
2
         remove <object> from <container>
2

2
The first two forms pick up the named object and place it in your inventory.  Sometimes the owner of the object won't allow it to be picked up for some reason.
2

2
The remaining forms move the named object from inside the named container (see 'help containers') into your inventory.  As before, sometimes the owner of an object will not allow you to do this.
36
1
4
3
2
Syntax:  @messages <object>
2

2
List all of the messages that can be set on the named object and their current values.  See 'help messages' for more details.
36
1
4
67
2
Some kinds of messages are not printed directly to players; they are allowed to contain special characters marking places to include the appropriate pronoun for some player.  For example, a builder might have a doorway that's very short, so that people have to crawl to get through it.  When they do so, the builder wants a little message like this to be printed:
2

2
        Balthazar crawls through the little doorway, bruising his knee.
2

2
The problem is the use of 'his' in the message; what if the player in question is female?  The correct setting of the 'oleave' message on that doorway is as follows:
2

2
        "crawls through the little doorway, bruising %p knee."
2

2
The '%p' in the message will be replaced by either 'his', 'her', or 'its', depending upon the gender of the player.  
2

2
As it happens, you can also refer to elements of the command line (e.g., direct and indirect objects) the object issuing the message, and the location where this is all happening.  In addition one can refer to arbitrary string properties on these objects, or get the object numbers themselves.
2

2
The complete set of substitutions is as follows:
2

2
        %% => `%'  (just in case you actually want to talk about percentages).
2
    Names:
2
        %n => the player
2
        %t => this object (i.e., the object issuing the message,... usually)
2
        %d => the direct object from the command line
2
        %i => the indirect object from the command line
2
        %l => the location of the player
2
    Pronouns:
2
        %s => subject pronoun:          either `he',  `she', or `it'
2
        %o => object pronoun:           either `him', `her', or `it'
2
        %p => posessive pronoun (adj):  either `his', `her', or `its'  
2
        %q => posessive pronoun (noun): either `his', `hers', or `its'
2
        %r => reflexive pronoun:  either `himself', `herself', or `itself'
2
    General properties:
2
        %(foo) => player.foo 
2
        %[tfoo], %[dfoo], %[ifoo], %[lfoo]
2
               => this.foo, dobj.foo, iobj.foo, and player.location.foo
2
    Object numbers:
2
        %#  => player's object number
2
        %[#t], %[#d], %[#i], %[#l]
2
            => object numbers for this, direct obj, indirect obj, and location.
2

2
In addition there is a set of capitalized substitutions for use at the 
2
beginning of sentences.  These are, respectively, 
2

2
   %N, %T, %D, %I, %L for object names, 
2
   %S, %O, %P, %Q, %R for pronouns, and
2
   %(Foo), %[dFoo] (== %[Dfoo] == %[DFoo]),... for general properties
2

2
Note: there is a special exception for player .name's which are assumed to
2
already be capitalized as desired.
2

2
There may be situations where the standard algorithm, i.e., upcasing the first letter, yields something incorrect, in which case a "capitalization" for a particular string property can be specified explicitly.  If your object has a ".foo" property that is like this, you need merely add a ".fooc" (in general .(propertyname+"c")) specifying the correct capitalization.  This will also work for player .name's if you want to specify a capitalization that is different from your usual .name
2

2
Example:  
2
Rog makes a hand-grenade with a customizable explode message.
2
Suppose someone sets grenade.explode_msg to:
2

2
  "%N(%#) drops %t on %p foot.  %T explodes.  
2
   %L is engulfed in flames."
2

2
If the current location happens to be #3443 ("yduJ's Hairdressing Salon"),
2
the resulting substitution may produce, eg.,
2

2
  "Rog(#4292) drops grenade on his foot.  Grenade explodes.  
2
   YduJ's Hairdressing Salon is engulfed in flames."
2

2
which contains an incorrect capitalization.  
2
yduJ may remedy this by setting #3443.namec="yduJ's Hairdressing Salon".
2

2
Note for programmers:  
2
 In programs, use $string_utils:pronoun_sub().
2
 %n actually calls player:title() while %(name) refers to player.name directly.
36
1
4
18
2
Most objects have messages that are printed when a player succeeds or fails in manipulating the object in some way.  Of course, the kinds of messages printed are specific to the kinds of manipulations and those, in turn, are specific to the kind of object.  Regardless of the kind of object, though, there is a uniform means for listing the kinds of messages that can be set and then for setting them.
2

2
The '@messages' command prints out all of the messages you can set on any object you own.  Type 'help @messages' for details.
2

2
To set a particular message on one of your objects use a command with this form:
2
        @<message-name> <object> is "<message>"
2
where '<message-name>' is the name of the message being set, <object> is the name or number of the object on which you want to set that message, and <message> is the actual text.
2

2
For example, consider the 'leave' message on an exit; it is printed to a player when they successfully use the exit to leave a room.  To set the 'leave' message on the exit 'north' from the current room, use the command
2
        @leave north is "You wander in a northerly way out of the room."
2

2
[Note to programmers: This class of commands automatically applies to any property whose name ends in '_msg'.  Thus, in the example above, the command is setting the 'leave_msg' property of the named exit.  You can get such a command to work on new kinds of objects simply by giving the appropriate properties names that end in '_msg'.  Additionally, in many cases the _msg property is accompanied by a _msg verb, which defaultly returns the named property, but which is available to be customized in more complex ways than allowed by simple string substitution.  You should check for the particular property you're considering whether the verb form exists (typically with @list).]
2

2
The following help topics describe the uses of the various messages available on standard kinds of objects:
2

2
container-messages -- the messages on objects that can contain other objects
2
exit-messages -- the messages on exit objects
2
thing-messages -- the messages on objects that can be taken and dropped
36
1
4
5
2
Most objects have one or more descriptive pieces of text associated with them; these texts are printed under various circumstances depending on the kind of text.  For example, every object has a 'description' text that is printed whenever a player looks at the object.  The following help topics discuss the commands for manipulating these descriptive texts on your objects:
2

2
@rename -- setting the name and aliases of your objects
2
@describe -- setting what others see when they look at your objects
2
messages -- listing and setting the other descriptive texts on an object
36
1
4
13
2
Syntax:  @describe <object> as <description>
2

2
Sets the description string of <object> to <description>.  This is the string that is printed out whenever someone uses the 'look' command on <object>.  To describe yourself, use 'me' as the <object>.
2

2
Example:
2
Munchkin types this:
2
  @describe me as "A very fine fellow, if a bit on the short side."
2
People who type 'look Munchkin' now see this:
2
  A very fine fellow, if a bit on the short side.
2

2
Note for programmers:
2
The description of an object is kept in its .description property.  
2
For descriptions of more than one paragraph, .description can be a list of strings.
36
1
4
45
2
This is yduJ's table of tinymud commands and their equivalents in LambdaMOO.  A longer document, with discussions of the different verbs and how they have changed, is available via FTP from ftp.lambda.moo.mud.org as pub/MOO/contrib/docs/TinyMUD-LambdaMOO-equivs.  All the commands mentioned here have help nodes on LambdaMOO.
2

2
The following commands are basically the same in MOO and MUD.
2

2
    drop(throw), get(take), go, help, home, inventory, look, news, say (",:)
2

2

2
The following commands have no equivalent:
2

2
    kill, rob, score, @force
2

2

2
The following commands have the same names and do similar things, but are changed in some way (both syntactic and semantic differences, sometimes quite substantial differences):
2

2
    @examine, give, page, read, whisper, @create, @dig,
2
    @lock, @password, @unlock, @describe
2

2

2
The following commands have rough equivalents in LambdaMOO but the name is different:
2

2
    TinyMUD name            LambdaMOO name
2
    ------------            --------------
2
    QUIT                    @quit
2
    gripe                   @gripe
2
    goto/move               go
2
    WHO                     @who
2
    @fail                   @take_failed, @nogo, @drop_failed
2
    @find                   @audit
2
    @link                   @dig, @sethome, @add-exit, @add-entrance
2
    @name                   @rename
2
    @ofail                  @otake_failed, @onogo, @odrop_failed
2
    @open                   @dig
2
    @osuccess               @oleave, @oarrive, @otake_succeeded, 
2
                            @odrop_succeeded
2
    @success                @leave, @arrive, @take_succeeded
2
                            @drop_succeeded
2
    @teleport               @move
2

2

2
Here are some commands for which no equivalent exists, or for which the equivalent is a complicated set of actions.
2

2
    @set, @stats, @unlink
2

2

2
Documentation on most of the LambdaMOO commands mentioned above can be acquired using 'help <command-name>'.  A notable exception is the commands like @oarrive and @take_failed that set textual messages on objects.  These are described under 'help messages'.
36
1
4
13
2
Syntax:  @gripe <anything> ...
2

2
Puts you into the MOO mail system to register a complaint (or, conceivably, a compliment) with the wizards.  The rest of the command line (the <anything> ... part) is used as the subject line for the message.  More information on using the MOO mail system is given once you're in it.
2

2
You may hear back from the wizards eventually; see 'help @mail' for how to read their reply.
2

2
Example:
2
Munchkin types:
2
  @gripe The little bird
2
  "How come I can't ever see the little bird in the cuckoo clock?
2
  "        -- A frustrated player
2
  send
2
and, somewhat later, the wizards reply with a note about being sure to look while the clock is chiming.
36
5
4
4
2
Syntax:  @listgag [all]
2
         @gaglist [all]
2

2
Shows you a list of the players and objects currently on your 'gag list'.  You don't see any messages that result from actions initiated by the players or objects on this list.  In particular, you will not hear them if they try to speak, emote, or whisper to you.  See 'help gagging' for an explanation of gagging in general.  With the optional "all" parameter it will also scan the database for players who are gagging you.  This may induce lag, so caution is advised with this option.
36
1
4
9
2
Syntax:  @ungag <player or object>
2
         @ungag everyone
2

2
Remove the given player or object (or, in the second form, everyone) from your 'gag list'.  You will once again see any messages that result from actions initiated by the ungagged player(s) or objects.  In particular, you will once again be able to hear them if they speak, emote, or whisper to you.  See 'help gagging' for an explanation of gagging in general.
2

2
Example:
2
Munchkin types:
2
  @ungag Grover
2
and is once again able to hear Grover's witty remarks.  Sigh...
36
1
4
12
2
Syntax:  @gag <player or object> [<player or object>...]
2

2
Add the given players to your 'gag list'.  You will no longer see any messages that result from actions initiated by these players.  In particular, you will not hear them if they try to speak, emote, or whisper to you.  See 'help gagging' for an explanation of gagging in general.
2

2
Example:
2
Munchkin types:
2
  @gag Grover
2
and no longer hears anything that Grover says.  What a relief!
2

2
If you specify an object, then any text originating from that object will not be printed.  Example:  Noisy Robot prints "Hi there" every 15 seconds.   In order to avoid seeing that, Munchkin types:
2
  @gag Noisy
2
and no longer hears that robot!  (Munchkin must be in the same room as Noisy Robot for this to work, or know its object number.)
36
1
4
8
2
Syntax: go <direction> ...
2

2
Invokes the named exits in the named order, moving through many rooms in a single command.
2

2
Example:
2
Munchkin types:
2
  go n e e u e e s e
2
and moves quite rapidly from the Living Room all the way to the Bovine Illuminati Atrium, all in one command.
36
1
4
9
2
Syntax: @password <old-password> <new-password>
2

2
Changes your player's password (as typed in the 'connect' command when you log in to the MOO) to <new-password>.  For security reasons, you are required to type your current (soon to be old) password as the first argument.
2

2
Your password is stored in an encrypted form in the MOO database; in principle, not even the wizards can tell what it is, though they can change it, of course.  It is recommended that your password not be your name or a common word; MOO passwords have been stolen or cracked in the past and characters have been made unhappy by such theft.  Your password is your security; choose a safe one.
2

2
If your character does get stolen, a wizard can change it for you and tell you the new password in secret.  You may have to provide your email address for verification.
2

2
Only the first 8 characters of a password are significant.
36
1
4
3
2
Syntax: @sethome
2

2
Sets your designated home (see `help home') to be the room you're in now.  If the current room wouldn't allow you to teleport in, then the `@sethome' command nicely refuses to set your home there.  This avoids later, perhaps unpleasant, surprises.  Additionally, your home must be a room that will allow you to stay there.  Rooms which you own will do this, as will rooms to which you have been added as a resident.  See the @resident command for help on adding someone as a resident to a room you own.
36
1
4
11
2
*subst*
2
Syntax: @who
2
        @who <player> [<player> ... ]
2

2
The first form lists all of the currently-connected players, along with the amount of time they've been connected, the amount of time they've been idle, and their present location in the MOO.
2

2
The second form, in which a list of player names is given, shows information for just those players.  For any listed players that are not connected, we show the last login time instead of the connect/idle times.
2

2
@who refers to the @who_location message (see 'help messages') on each player's location in order to determine what should be printed in the location column.  Pronoun substitutions are done on this string in the usual manner (see 'help pronouns').  The default value is "%[$room.who_location_msg]" (i.e., the room name).
2

2
If the list of players to display is longer than 100, this command will not show its normal output, since it can be quite expensive to compute.  In such cases, you might want to use the @users command instead; see `help @users' for more information.
36
1
4
17
2
LambdaMOO is a kind of virtual reality, in which players move about from place to place manipulating their environment in what we hope are amusing, entertaining, or enlightening ways.
2

2
LambdaMOO is more of a pastime than a game in the usual sense; there is no `score' kept, there are no specific goals to attain in general, and there's no competition involved.  LambdaMOO participants explore the virtual world, talk to the other participants, try out the weird gadgets that others have built, and create new places and things for others to encounter and enjoy.
2

2
Most commands have the form of simple English sentences:
2
    <verb>
2
    <verb>  <direct object>
2
    <verb>  <direct object>  <preposition>  <indirect object>
2
Don't use English articles (e.g. 'a', 'an', or 'the') in your commands; the MOO won't understand them.  You can refer to yourself as 'me' and the room you're in as 'here'.
2

2
The first five kinds of commands you'll want to know are listed below.  Type 'help <topic-name>' for details on any of them:
2

2
look -- getting a description of the current room or any other object
2
say -- speaking to the other players in the same room as you
2
@who -- showing which players are currently connected to the MOO
2
movement -- how to move around in the MOO, from room to room
2
@quit -- disconnecting from the MOO
36
1
4
4
2
Syntax:  give <object> to <player>
2
         hand <object> to <player>
2

2
Move an object from your contents to that of another player.  This doesn't change the ownership of the object.  Some players may refuse to accept gifts and some objects may refuse to be given.
36
5
4
10
2
*subst*
2
Syntax: news
2
        news all
2
        news new
2
        news contents
2
        news archive
2

2
Read the latest edition of the %[$network.MOO_name] Newspaper, which carries articles concerning recent changes to the MOO server or to the main public classes, or other articles of interest to the MOO at large.
2

2
The default behavior for the `news' command is to act like `news new' but this may be changed by setting the @mail-option news to one of `all' or `new' or `contents'.  `news all' displays all current news articles.  `news new' only displays articles you have not yet read.  `news contents' displays the authors and subjects of all current news.  `news archive' displays back issues of the newspaper which are deemed worth reading by every citizen at any time.
36
5
4
5
2
Occasionally, you may run into a situation in which you'd rather not hear from certain other players.  It might be that they're being annoying, or just that whatever they're doing makes a lot of noise.  Gagging a player will stop you from hearing the results of any task initiated by that player.  You can also gag a specific object, if you want to hear what the owner of that object says, but not the output from their noisy robot.  The commands to use gagging are listed below; detailed help is available on each of them:
2

2
@gag -- add one or more players to your gag list
2
@ungag -- remove a player from your gag list
2
@listgag -- list the players you currently have gagged
36
5
4
5
2
Syntax:  @move <thing> to <place>
2

2
Move the specified object to the specified location.  This is not guaranteed to work; in particular, the object must agree to be moved and the destination must agree to allow the object in.  This is usually the case, however.  The special case where <thing> is 'me' is useful for teleporting yourself around.
2

2
If @move doesn't work and you own the room where the object is located, try using @eject instead.
36
5
4
4
2
Syntax:  inventory
2
         i
2

2
Prints a list showing every object you're carrying.
36
5
4
8
2
Syntax: @gender <gender>
2
        @gender
2

2
The first form, with an argument, defines your player to have the gender <gender>.  If <gender> is one of the standard genders (e.g., 'male', 'female', 'neuter',...), your various pronouns will also be set appropriately, making exits and certain other objects behave more pleasantly for you.
2

2
The second form tells you the current definition of your player's gender, your current pronouns, and the complete list of standard genders.
2

2
It should be noted that some of the "genders" on the standard gender list need verb conjugation in order to work properly and much of the MOO isn't set up for this (...yet).  For example, you should expect to see `they is' a fair amount if you @gender yourself `plural'.
36
5
4
27
2
Syntax: @rename <object>        to [name-and-alias],<alias>,...,<alias>
2
        @rename <object>        to [name]:<alias>,...,<alias>
2
        @rename <object>.<property> to <new-property-name>
2
        @rename <object>:<verb-name> to <new-verb-name>
2
        @rename# <object>:<verb-number> to <new-verb-name>
2

2
The first two forms are used to change the name and aliases of an object. The name is what will be used in most printed descriptions of the object. The aliases are the names by which players can refer to the object in commands. Typically you want to include the name in the aliases, as the MOO parser only checks .aliases when matching, so the first syntax is generally preferred.
2

2
If you leave out the "name" part of the list, @rename will leave the object's name as it is, and only change the aliases.
2

2
Note that for renaming players, more stringent rules apply.  See `help player-names'.  Certain other kinds of objects (e.g., mail recipients) also enforce their own rules w.r.t what they can be named.
2

2
Examples:
2
Munchkin names his dog:
2
  @rename #4237 to "Rover the Wonder Dog":Rover,dog
2
Now we'll see 'Rover the Wonder Dog' if we're in the same room as him and we can refer to him as either 'Rover' or just 'dog' in our commands, like 'pet dog'.  Note, however, that it will be impossible to use "Rover the Wonder Dog" to rever to the dog: if you don't include the name in the aliases, confusion can result.  It might have been better to start off with
2
  @rename #4237 to "Rover the Wonder Dog",Rover,dog
2

2
Since he didn't, Munchkin now changes his dog's aliases:
2
  @rename #4237 to ,Rover,dog,Rover the Wonder Dog
2
The name remains the same--we still see 'Rover the Wonder Dog'--but now any of 'Rover', 'dog', or 'Rover the Wonder Dog' can be used to refer to him.  This can help reduce confusion.
2

2
The third form of the @rename command is also for use by programmers, to change the name of a property they own to <new-property-name>.
2

2
The fourth form of the @rename command is for use by programmers, to change the name of a verb they own. If the <new-verb-name> contains spaces, the verb will have multiple names, one for each space-separated word.
2

2
The fifth form, @rename#, is for unambiguously referring to a verb on an object in case there is more than one with the same name. The verb number is the 1-based index of the verb as it appears in the verbs() (or @verbs) output list.
36
5
4
15
2
Notes are objects that can have text written on them to be read later.  They are useful for leaving messages to people, or for documenting your creations.
2

2
The following help topics cover verbs that can be used with notes:
2

2
read -- reading the text on the note
2
write -- adding text to a note
2
erase -- removing all the text from a note
2
delete -- deleting one line of text from a note
2

2
@notedit -- general editing on the text of a note
2

2
encrypt -- restricting who can read a note
2
decrypt -- undoing a previous encryption
2

2
You can make a note by creating a child of the standard note, $note (see 'help @create').  Note that, like most objects, only the owner of a note can recycle it.  If you'd like to make it possible for a reader of your note to destroy it (this is a common desire for notes to other individual players), then you might want to look at 'help letters'.
36
5
4
11
2
Syntax: look
2
        look <object>
2
        look <object> in <container>
2

2
Show a description of something.
2

2
The first form, with no arguments, shows you the name and description of the room you're in, along with a list of the other objects that are there.
2

2
The second form lets you look at a specific object.  Most objects have descriptions that may be read this way.  You can look at your own description using 'look me'.  You can set the description for an object or room, including yourself, with the 'describe' command (see 'help describe').
2

2
The third form shows you the description of an object that is inside some other object, including objects being carried by another player.
36
5
4
4
2
Syntax:  drop <object>
2
         throw <object>
2

2
Remove an object you are carrying from your inventory and put it in your current room.  Occasionally you may find that the owner of the room won't allow you to do this.
36
5
4
2
2
*forward*
2
take
36
5
4
17
2
Objects usually have verbs defined on them that allow players to manipulate and use them in various ways. Standard ones are:
2

2
get  -- pick an object up and place it in your inventory
2
drop -- remove an object from your inventory and place it in the room
2
put  -- take an object from your inventory and place it in a container
2
give -- hand an object to some other player
2
look -- see what an object looks like
2

2
You can see what objects you're carrying with the 'inventory' command; see 'help inventory' for details.
2

2
Some specialized objects will have other commands. The programmer of the object will usually provide some way for you to find out what the commands are.  One way that works for most objects is the 'examine' command; see 'help examine' for details.
2

2
The following specialized objects have help entries you should consult:
2

2
notes -- objects that allow text to be written on them and read later
2
letters -- notes that a recipient can burn after reading
2
containers -- objects that may contain other objects
36
5
4
18
2
Syntax:  help
2
         help <topic>
2
         help index
2

2
Print out entries from the online documentation system.  The commands `?' and `information' (usually abbreviated `info') are synonyms for `help'.
2

2
The first form prints out a summary table of contents for the entire help system.  
2

2
The second form prints out the documentation available on the given topic.  Many help system entries contain references to other entries accessible in this way.  The topic name may be abbreviated; if there is no topic exactly matching the name you give, the help system checks for topics for which the name is a prefix, perhaps with the addition or omission of an initial `@', or perhaps with some confusion beween dashes (-) and underscores (_), e.g., 
2
      `bui' instead of `building', 
2
      `who' instead of `@who', 
2
     `@wri' instead of `write',
2
  `add_ent' instead of `@add-entrance',
2
 `unlock-'  instead of `@unlock_for_open'
2

2
If the abbreviation you give is ambiguous, you will be presented with a list of the matching complete topic names.
2

2
The `help index' commands prints out a list of indices for the various help databases.  Each index gives a list of topics available on that database.  It is sometimes easier to find the topics you're interested in this way, rather than tracing through the chain of cross references.
36
1
4
5
2
The descriptions of most rooms outline the directions in which exits exist.  Typical directions include the eight compass points ('north', 'south', 'east', 'west', 'northeast', 'southeast', 'northwest', and 'southwest'), 'up', 'down', and 'out'.
2

2
To go in a particular direction, simply type the name of that direction (e.g, 'north', 'up').  The name of the direction can usually be abbreviated to one or two characters (e.g., 'n', 'sw').  You can also type 'go <direction>' to move; this is particularly useful if you know you're going to type several movement commands in a row (see 'help go').
2

2
In addition to such vanilla movement, some areas may contain objects allowing teleportation and almost all areas permit the use of the 'home' command to teleport you to your designated home (see 'help home' for more details).
36
1
4
6
2
*subst*
2
Syntax: home
2

2
Instantly teleports you to your designated home room.
2
Initially, this room is %[tostr($player_start.name," (",$player_start,")")].
2
You can change your designated home; see 'help @sethome' for details.
36
1
4
12
2
Syntax:  say <anything> ...
2
         "<anything> ...
2

2
Says <anything> out loud, so that everyone in the same room hears it.  This is so commonly used that there's a special abbreviation for it: any command-line beginning with a double-quote ('"') is treated as a 'say' command.
2

2
Example:
2
Munchkin types this:
2
  "This is a great MOO!
2
Munchkin sees this:
2
  You say, "This is a great MOO!"
2
Others in the same room see this:
2
  Munchkin says, "This is a great MOO!"
36
1
4
2
2
whisper "<text>" to <player>
2
sends the message "<yourname> whispers, "<text>" to you " to <player>, if they are in the room.
36
1
4
27
2
*subst*
2
Syntax:  page <player> [[with] <text>]
2

2
Sends a message to a connected player, telling them your location and, optionally, <text>.
2

2
Example:
2
Munchkin types:
2
        page Frebble with "Where are you?"
2
Frebble sees:
2
        You sense that Munchkin is looking for you in the Kitchen.
2
        He pages, "Where are you?"
2
Munchkin sees:
2
        Your message has been received.
2

2
Advanced Features:
2
Page refers to the following messages on the players involved (see 'help messages'):
2

2
@page_origin [%[$player.page_origin_msg]]
2
  Determines how the recipient is told of your location.
2

2
@page_echo   [%[$player.page_echo_msg]]
2
  Determines the response received by anyone who pages you.
2

2
@page_absent [%[$player.page_absent_msg]]
2
  Determines the response received by anyone who tries to page you when you aren't connected.
2

2
All of these undergo the usual pronoun substitutions (see 'help pronouns') except that in both cases the direct object (%d) refers to the recipent of the page and the indirect object (%i) refers to the sender.  You should only change these messages if you want to add to the Virtual Reality feel of the MOO for your character.
36
1
4
18
2
Syntax:  emote <anything> ...
2
         :<anything> ...
2
         ::<anything> ...
2

2
Announces <anything> to everyone in the same room, prepending your name.  This is commonly used to express various non-verbal forms of communication.  In fact, it is so commonly used that there's a special abbreviation for it: any command-line beginning with ':' is treated as an 'emote' command.
2

2
The alternate form, '::' (less commonly 'emote :'), does not insert the space between the player name and the text.
2

2
Examples:
2
Munchkin types this:
2
  :wishes he were much taller...
2
Everyone in the same room sees this:
2
  Munchkin wishes he were much taller...
2

2
Munchkin types this:
2
  ::'s eyes are green.
2
Everyone in the same room sees this:
2
  Munchkin's eyes are green.
36
1
4
8
2
There are a number of commands for modifying various characteristics of the object representing you in the MOO, your 'player'.  Help on them is available in the following topics:
2

2
@describe -- setting what others see when they look at you
2
@gender -- changing your player's gender
2
@password -- changing your player's password
2
@sethome -- changing your designated home room
2
@rename -- changing your name and/or aliases
2
@linelength -- adding word-wrap to the lines you see
36
1
4
18
2
Help is available on the following general topics:
2

2
introduction -- what's going on here and some basic commands
2
index -- index into the help system
2

2
players -- setting characteristics of yourself
2
movement -- moving yourself between rooms
2
communication -- communicating with other players
2
manipulation -- moving or using other objects
2
miscellaneous -- commands that don't fit anywhere else
2

2
building -- extending the MOO
2
programming -- writing code in the MOO programming language
2
editors -- editing text and code in the MOO
2

2
@pagelength -- what to do if lines scroll off your screen too fast
2
@linelength -- what to do if lines are truncated
2
tinymud -- a list of equivalences between MOO and TinyMUD concepts/commands
36
5
4
26
2
Syntax:  @edit-option
2
         @edit-option <option>
2

2
Synonym:  @editoption
2

2
The edit options customize the behavior of the various editors (mail editor, verb editor, etc...) to your particular taste.  The first form of this command displays all of your edit options.  The second form displays just that one option, one of the flags listed below.
2

2
The remaining forms of this command are for setting your edit options:
2

2
         @edit-option +<flag>
2
         @edit-option -<flag>
2
         @edit-option !<flag>           (equivalent to -<flag>)
2

2
These respectively set and reset the specified flag
2

2
-quiet_insert    insert (") and append (:) echo back the line numbers
2
+quiet_insert    insert (") and append (:) produce no output
2
-eval_subs       (VERB EDITOR) ignore .eval_subs when compiling verbs
2
+eval_subs       (VERB EDITOR) apply .eval_subs to verbs being compiled
2
-local           Use in-MOO text editors.
2
+local           Ship text to client for local editing.
2
-no_parens       include all parentheses in verb code.
2
+no_parens       include only necessary parentheses in verb code.
2

2
+parens        is a synonym for -no_parens
2
+noisy_insert  is a synonym for -quiet_insert
36
5
4
2
2
*forward*
2
@edit-options
36
5
4
4
2
Usage:  @add-feature  <object>
2
 @remove-feature <object>
2

2
Add or remove a feature from your list.  A feature is an object which provides additional commands you can use.  For more information, see `help features'.
36
5
4
2
2
*forward*
2
@add-feature
36
5
4
3
2
Usage:  @features [<name>] [for <player>]
2

2
List all of <player>'s features matching <name>, or all of <player>'s features if <name> is not supplied.  <player> defaults to you.  See `help features' for more information.
36
5
4
3
2
Features are objects that provide you with commands not covered by the ordinary player objects.  The advantage of using features is that you can mix and match the things you like; whereas if you like a command that's defined on a player class, you have to also get all the commands it defines, and all the commands its ancestors define.
2

2
You can list your features with the @features command, and add or remove features from your list with the @add-feature and @remove-feature commands.
36
5
4
10
2
Syntax: @rmalias <alias>[,...,<alias>] from <object>
2
        @rmalias <alias>[,...,<alias>] from <object>:<verb-name>
2
        @rmalias# <alias>[,...,<alias>] from <object>:<verb-number>
2

2
The first form is used to remove aliases from an object.  If the object is a valid player, space and commas will be assumed to be separations between unwanted aliases.  Otherwise, only commas will be assumed to be separations.
2
Note that @rmalias will not affect the object's name, only its aliases.
2

2
The second form is for use by programmers, to remove aliases from a verb they own.  All spaces and commas are assumed to be separations between unwanted aliases.
2

2
The third form, @rmalias#, is for unambiguously referring to a verb on an object that might have more than one verb with the same name. The verb-number is the 1-based index of the verb as it appears in the verb() (or @verbs) output list.
36
5
4
25
2
Syntax: @addalias <alias>[,...,<alias>] to <object>
2
        @addalias <alias>[,...,<alias>] to <object>:<verb-name>
2
        @addalias# <alias>[,...,<alias>] to <object>:<verb-number>
2

2
The first form is used to add aliases to an object's list of aliases.  You can separate multiple aliases with commas.  The aliases will be checked against the object's current aliases and all aliases not already in the object's list of aliases will be added.
2

2
Example:
2
Muchkin wants to add new aliases to Rover the Wonder Dog:
2
  @addalias Dog,Wonder Dog to Rover
2
Since Rover the Wonder Dog already has the alias "Dog" but does not have the alias "Wonder Dog", Munchkin sees:
2
  Rover the Wonder Dog(#4237) already has the alias Dog.
2
  Alias Wonder Dog added to Rover the Wonder Dog(#4237).
2

2
If the object is a player, spaces will also be assumed to be separations between aliases and each alias will be checked against the Player Name Database to make sure no one else is using it. Any already used aliases will be identified.  Certain other classes of objects (e.g., mail-recipients) also enforce rules about what aliases may be given them.
2

2
Example:
2
Munchkin wants to add his nicknames to his own list of aliases:
2
  @addalias Foobar Davey to me
2
@Addalias recognizes that Munchkin is trying to add an alias to a valid player and checks the aliases against the Player Name Database.  Unfortunately, DaveTheMan is already using the alias "Davey" so Munchkin sees:
2
  DaveTheMan(#5432) is already using the alias Davey
2
  Alias Foobar added to Munchkin(#1523).
2

2
The second form of the @addalias command is for use by programmers, to add aliases to a verb they own.  All commas and spaces are assumed to be separations between aliases.
2

2
The third form, @addalias#, is for unambiguously referring to a verb on an object in case there are more than one with the same name. The verb number is the 1-based index of the verb as it appears in the verbs() (or @verbs) output list.
36
5
4
5
2
*forward*
2
summary
2

2
Type 'help <topic>' for information on a particular topic.
2

36
5
4
4
2
Every object (including players, rooms, exits) has a name and a set of aliases. The object name is commonly used to display an object in various contexts. The object aliases are used to refer to an object when players type commands.
2
Help is available on the following commands:
2
@rename -- change the names or aliases of an object or yourself.
2
@addalias, @rmalias -- add and remove aliases.
36
5
4
7
2
Usage:    @request <player-name> for <email-address>
2

2
Example:  @request Munchkin for msneed@baum.edu
2

2
This command is available to Guest characters only.
2

2
The @request command requests a new character, registered for your email address. Please use your primary address for this, as your password will be sent to the address provided.
36
5
4
6
2
*subst*
2
A player name must be a single word, must not contain any spaces, backslashes, or quotes, nor can it begin with the characters #, *, (, or ).  Finally it cannot be one that is in use by any other player nor any of the words on the following list:
2

2
%;;lns={};for l in ($string_utils:columnize({@$player_db.stupid_names,@$player_db.reserved},6)) lns={@lns,"  "+l}; endfor return lns;
2

2
Note that these rules apply as well to your single-word aliases, since those can equally well be used to refer to you in commands that match on player names (@who, whereis, ...).  There are no restrictions on your multi-word aliases, however the commands that expect player names will not recognize them.
36
5
4
6
2
  @registerme as <email-address>
2
This verb changes your registered email_address property. It will modify the registration, and then, to validate the email address, it will assign a new password and mail the password to the given email_address.
2
If, for some reason, this is a problem for you, contact a wizard or registrar to get your email address changed.
2

2
  @registerme
2
Prints your registered email address.
36
5
4
2
2
*forward*
2
@eject
36
5
4
3
2
Gopher is an internet service for information retrieval. There are many gopher servers across the internet, providing a wide variety of information of all sorts: network news, weather, and White House press releases, campus class information, and scientific papers.
2

2
The programmer interface to Gopher is contained in the object $gopher (`help $gopher').
36
5
4
5
2
Options allow you to customize the behavior of various commands.  Options are grouped into separate option packages that each affects a given class of related commands.  Each has its own help topic:
2

2
  @mail-options    --- mail commands (@mail, @read, @next, @prev, @send...)
2
  @edit-options    --- editing commands (@edit and commands within the editor)
2
  @build-options   --- building commands (@create, @dig, @recycle)
36
5
4
4
2
Syntax:  @age [player]
2

2
Displays the MOO age of the player if the player specified first connected after initial connections were recorded.
2
MOO age is computed from the moment the player first connected until the current time.
36
5
4
9
2
Syntax:  @edit <object>.<property>
2
         @edit <object>:<verb-name> [<dobj> [<prep> [<iobj>]]]
2
         @edit <object>
2

2
Enters a MOO editor, as appropriate.
2

2
Chooses the MOO Note editor for the named property, or the MOO verb editor for the named verb.  If no property or verb name is given, assumes property .text for a note object, or .description for any other object.
2

2
See 'help editors' for more detail.
36
5
4
2
2
*forward*
2
@add-feature
36
5
4
15
2
There are several commands available to allow you to communicate with your fellow MOOers.  Help is available on the following communication-related topics:
2

2
say      -- talking to the other connected players in the room
2
whisper  -- talking privately to someone in the same room
2
page     -- yelling to someone anywhere in the MOO
2
emote    -- non-verbal communication with others in the same room
2
gagging  -- screening out noise generated by certain other players
2
news     -- reading the wizards' most recent set of general announcements
2
@gripe   -- sending complaints to the wizards
2
@typo @bug @idea @suggest
2
         -- sending complaints/ideas to the owner of the current room
2
whereis  -- locating other players
2
@who     -- finding out who is currently logged in
2
mail     -- the MOO email system
2
security -- the facilities for detecting forged messages and eavesdropping.
36
5
4
7
2
Objects are the fundamental building blocks of the MOO.  Every object has a unique number, a name, an owner, a location, and various other properties.  An object can always be referred to by its number, and sometimes by its name or one of its aliases -- if you are in the same location as the object, for example, and also in some other special cases.
2

2
For help on creating an object, see 'help @create'.
2

2
For help on recycling an object, see 'help @recycle'.
2

2
For help on finding information about specific objects, see 'help @display', 'help @show', and 'help $object_utils'.
36
1
4
5
2
Every object on the MOO (players included) has a list of aliases, or names by which it can be referred.  This is useful when an object has a nice long descriptive name that you don't want to have to type every time you refer to it.
2

2
Typing `exam object' will show you its aliases.  If you are a programmer, you can type `#<object>.aliases', using an object's number, or `#Munchkin.aliases p'.  (The `p' indicates that the prefix is a player's name.)
2

2
See also `help #', `help @addalias', and `help @rmalias'.
36
1
4
2
2
*forward*
2
@check
36
5
4
3
2
Syntax:  @users
2

2
Prints out the number of users currently connected and a list of their names, in alphabetical order.
36
5
4
2
2
*forward*
2
 name
36
5
4
2
2
*forward*
2
@addalias
36
5
4
3
2
Syntax:  @mode <brief | verbose>
2

2
Sets your current mode to either brief or verbose.  In brief mode, when you enter into a room, you will not see the room's description unless you explicitly type `look'.  Verbose is the default mode.
36
1
4
2
2
*forward*
2
wizard-list
36
5
4
10
2
Players sometimes have difficulty getting their backspace key to work.  This is an outside-MOO problem:  Whatever access software you have determines how the line you type is edited before the MOO ever sees it.  If your backspace key won't work here, you will probably need to consult with some documentation or a guru at your end.
2

2
The above notwithstanding, here are a few things to try instead of backspace:
2

2
   ctrl-h            (another way of typing backspace)
2
   del               (delete character)
2
   ctrl-backspace    (another way of typing delete character)
2
   ctrl-w            (delete word left)
2
   ctrl-u            (delete entire line)
2
   ctrl-r            (redraw line)
36
5
4
8
2
The spivak pronouns were developed by mathematician Michael Spivak for use in his books.  They are the most simplistic of the gender neutral pronouns (others being "neuter" and "splat") and can be easily integrated into writing.  They should be used in a generic setting where the gender of the person referred to is unknown, such as "the reader."  They can also be used to describe a specific individual who has chosen not to identify emself with the traditional masculine (male) or feminine (female) gender.
2

2
The spivak pronouns are
2
E      - subjective
2
Em     - objective
2
Eir    - possessive (adjective)
2
Eirs   - possessive (noun)
2
Emself - reflexive
36
5
4
3
2
Usage: @owner object
2

2
Displays the specified object, its object number, and its owner (and its owner's object number).
36
1
4
5
2
Checkpointing refers to process by which the MOO makes a backup copy of itself.  Because the computer that's running the MOO has to simultaneously handle two copies of itself, this results in a period of high lag for the MOO users.  So, why do we put up with this?
2

2
Every successful checkpoint results in a database of what the MOO was like at that point in time.  All the MOOmail, mailing lists, objects, descriptions, properties, and verbs on all of the MOO are frozen in time and stored.  In the event that the MOO crashes (due to a power failure or the like), this checkpoint database can be used to restart the MOO with much of our recent work intact.  This is a very good thing.
2

2
Checkpointing is a global backup.  Do not rely on the checkpoint database to back up your own work!  Archive your code, properties, and objects offline to ensure their safety.  Each successful checkpoint overwrites the previous day's checkpoint, so it is an unreliable means of recovering lost data.  Some of these checkpoints do get backed up quarterly, but these are not available without inconveniencing the MOO populace as a whole.
36
1
5
36
5
4
1
2
gen-index
36
1
5
36
4
4
0
36
5
4
9
2
The object $help is the main help database.  For every help topic there is a corresponding property on $help, interpreted as follows:
2

2
$help.(topic) = string           - one-line help text.
2
$help.(topic) = {"*verb*",@args} - call this:verb(args,{}) to get text
2
$help.(topic) = any other list   - multi-line help text
2

2
There is also a "" property which applies in the case of `help' typed without any arguments.
2

2
See the description of $generic_help for more detail.
36
5
4
2
0
82127
0
1084848672
36
1
#61
News

16
36
46
-1
70
45
-1
-1
21
description
36
173
-1
is_writable_by
2
173
-1
rm_message_seq
36
173
-1
undo_rmm
36
173
-1
expunge_rmm
36
173
-1
set_current_news
36
173
-1
add_current_news
36
173
-1
rm_current_news
36
173
-1
news_display_seq_full
2
173
-1
to_text
36
173
-1
check
2
173
-1
touch
2
45
-1
@addnews
2
157
1
@rmnews
2
157
5
@setnews
2
105
1
_parse
36
173
-1
init_for_core
2
173
-1
add_news
2
173
-1
rm_news
2
173
-1
@listnews
2
141
4
@clearnews
2
41
-1
4
current_news
last_news_time
current_news_going
archive_news
26
4
2
0
1
0
2
36
5
0
1084848652
36
5
4
0
36
5
4
0
36
5
4
0
36
5
0
1084848652
36
1
4
0
36
0
0
1
36
5
2
%n (%#) can't send to moderated list %t (%[#t]) directly.
36
5
4
0
36
5
0
1
36
5
4
0
36
1
4
0
36
1
0
0
36
1
0
1084848652
36
1
4
1
4
2
0
1
4
150
0
1084848652
2
Wizard (#2)
2
*News (#61)
2
Welcome to LambdaCore
2

2
Getting Started with your LambdaCore MOO
2
========================================
2

2
Thank you for choosing LambdaCore!
2

2
Initial Setup Notes
2
-------------------
2

2
The "welcome" screen, seen when a player connects.
2
  -- this is stored in $login.welcome_message
2

2
Do you want on-line character creation?
2
  -- this is stored in $login.create_enabled
2
     for more detailed information, edit $login:player_creation_enabled
2

2
Do you want to limit the number of players on the MOO at once?
2
  -- look at $login.max_connections
2
     the `connection_limit' message on $login is the message printed
2
     when this limit is reached.
2

2
Do you want a different default player class?
2
  -- set $player_class to a different value
2
     *do not* change $player
2

2
You should also set the following:
2
  $network.postmaster
2
    -- your email address, or the email address of the person who will 
2
       handle your email
2
  $network.site
2
    -- the machine your MOO is running on (e.g. "lambda.moo.mud.org")
2
  $network.port
2
    -- the port your MOO is running on (e.g. 8888)
2
  $network.MOO_Name
2
    -- the name of your MOO (e.g. "LambdaMOO")
2
  $site_db.domain
2
  -- this is set to the `domain' of your address
2
     (eg `foo.com' for `moo.foo.com')
2

2
If you compiled the server with open_network_connection() enabled (allowing the MOO to open up connections with other computers on the network), then you should set
2
  $network.active = 1
2
     This will enable @newpassword, @registerme, @password, @mailme, @netforward, and others to send mail from the MOO.
2

2
-------------------------------------------------------------------
2

2
Setting Yourself Up
2
-------------------
2

2
Set a password for yourself.
2
  -- @password <new-password>
2

2
Set a description for yourself.
2
  -- @describe me as <anything>
2

2
Set a gender for yourself.
2
  -- @gender <gender>
2

2
There are, also, a large number of messages you can set on yourself.  Setting them will enhance the virtual reality.
2

2
-------------------------------------------------------------------
2

2
About Guests
2
------------
2

2
To make a new Guest character:
2
  -- @make-guest <guestname>
2
     will make a new guest with the name you specify with `_Guest' appended
2
     and some other standard but useful aliases
2

2
This is the easiest way to make Guest characters.  The most important things to remember about Guests, if you want to make them yourself, are:
2
  -- make them owned by nonwizards, and not owned by themselves
2
  -- make sure they've got .password == 0, and that .password is nonclear
2
  -- at least one Guest must always be named `Guest'; this can be an alias
2

2
To set the default description and gender for a guest:
2
  -- set .default_description to the description the guest should start with
2
  -- set .default_gender to the gender the guest should start with
2
  -- remember to set .description and .gender too, for the guest's first use
2

2
-------------------------------------------------------------------
2

2
Adding to the Newspaper
2
-----------------------
2

2
The newspaper is a special mailing list.  To add a post to the newspaper, send mail to it (as *News or $news), and then note the number of your post (let's call it <x> and:
2
  -- @addnews <x> to *News
2
... in general, `@addnews $ to *News' will work as well.
2

2
-------------------------------------------------------------------
2

2
Quota
2
-----
2

2
By default, LambdaCore runs with byte-based quota, an in-DB quota system, limiting users by total database space as opposed to total objects.  You'll need to do two things:
2
  -- decide on the default quota:
2
     ;$byte_quota_utils.default_quota[1] = <a number of bytes>
2
  -- start the measurement task; see `help routine_tasks' for more information (Note: this help topic contains information about more than just the quota task; it should be read regardless of how quota is set).
2

2
If you prefer the quota system documented in the LambdaMOO Programmer's Manual, directly supported by the server, you can enable object-based quota:
2
  -- set $quota_utils to $object_quota_utils
2

2
It's best that you make this switch before users start, because converting existing users is an awkward (and inherently arbitrary and political) move.
2

2
-------------------------------------------------------------------
2

2
Making Programmers
2
------------------
2

2
The command to turn someone into a programmer is `@programmer'  Its syntax is `@programmer <user>'.  For example:
2
  -- @programmer Haakon
2
The `@programmer' verb will prompt you if the user isn't set up with a description and a gender.
2

2
No code to automatically grant programmer bits is included with LambdaCore.
2

2
Making Wizards
2
--------------
2

2
THINK CAREFULLY.
2

2
Be very careful before giving someone a wizard bit.  That person can do gross damage to your database, and fixable but serious damage to the machine it runs on.  That person can quite possibly open outbound network connections from your machine, and thus commit acts for which your host system will be blamed.  That person can ruin your MOO's as-yet-untarnished reputation.
2

2
Wizards have technical power, the ability to change anything within the database, to create anything within the database.  Be careful with the idea of a `Social Wizard' -- a nontechnical person holding a wizard bit is fairly likely to, at some point, accidentally do something destructive.  It's a good idea not to socialize as your wizard character, for the same reason, to make it less likely to be accidentally destructive.
2

2
That said, in general you don't turn an existing character into a wizard, you make a -new- character to be the wizard.  This is because the existing character probably owns code and objects which could be destructive if suddenly made wizardly; it's a good security measure to make a fresh player.  So, to make a fresh player:
2
  -- @make-player (see `help @make-player' for more information)
2
     this will make you a new player. for this example, #123
2

2
To make #123 a wizard:
2
  -- @programmer #123
2
     (a nonprogrammer wizard is a truly strange beast)
2
  -- ;#123.wizard = 1;
2
  -- @chparent #123 to $wiz
2
  -- ;#123.public_identity = <the player's nonwizard character's object number>
2

2
-------------------------------------------------------------------
2

2
Good luck with your new LambdaCore database!
2

2
Visit us at LambdaMOO: lambda.moo.mud.org 8888
2

2
Join the international mailing list for MOO coders: send an email message to moo-cows-request@the-b.org with the word `subscribe' as the body of your message.
2

2
Do good things.
2

2
The LambdaMOO Wizards
2
[authored February 15, 1999]
36
0
5
36
5
5
36
5
4
0
36
1
5
36
0
5
36
0
5
36
0
0
0
36
4
4
1
2
News
36
1
2
It's the current issue of the News, dated %d.
36
5
4
2
0
21017
0
1084848672
36
1
#62
The First Room

16
36
-1
2
-1
3
-1
-1
5
disfunc
2
173
-1
enterfunc
2
173
-1
match
36
173
-1
init_for_core
2
173
-1
keep_clean
2
173
-1
0
17
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
4
0
36
4
5
36
5
5
36
5
4
0
36
4
5
36
5
5
36
5
5
36
4
4
0
36
5
2
This is all there is right now.
36
5
4
2
0
4407
0
1084848672
36
1
#63
Recycling Center

16
36
-1
-1
-1
5
-1
74
18
_recreate
2
173
-1
_recycle
2
173
-1
_create
2
173
-1
addhist
2
173
-1
show*-history
2
45
-1
request
2
157
5
setup_toad
2
173
-1
add_orphan
36
173
-1
remove_orphan
36
173
-1
valid
2
173
-1
init_for_core
2
173
-1
resurrect
2
173
-1
reclaim_lost_souls
2
173
-1
look_self
36
173
-1
check_quota_scam
2
173
-1
gc
36
173
-1
moveto
36
173
-1
kill_all_tasks
2
173
-1
5
orphans
announce_removal_msg
nhist
history
lost_souls
17
4
0
36
1
2

36
5
0
50
36
0
4
0
36
0
4
0
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
4
4
2
2
Recycling Center
2
Center
36
5
2
Object reuse. Call $recycler:_create() to create an object (semantics the same as create()), $recycler:_recycle() to recycle an object. Will create a new object if nothing available in its contents. Note underscores, to avoid builtin :recycle() verb called when objects are recycled. Uses $building_utils:recreate() to prepare objects.
36
5
4
2
0
11836
0
1084848672
36
1
#64
Generic Garbage Object

16
36
-1
-1
-1
-1
-1
-1
5
description
2
173
-1
look_self
2
173
-1
title titlec
2
173
-1
tell
2
173
-1
do_examine
2
13
-1
1
aliases
1
4
1
2
garbage
36
1
#65
Mail Options

16
36
-1
-1
-1
68
-1
66
20
actual
36
173
-1
parse_@mail
36
173
-1
parse_sticky parse_manymsgs
36
173
-1
parse_replyto
36
173
-1
show_manymsgs
36
173
-1
show_sticky
36
173
-1
show_@mail
36
173
-1
show_replyto
36
173
-1
show
36
173
-1
check_replyto
36
173
-1
show_netmail
2
173
-1
check_netmail
2
173
-1
show_expire
36
173
-1
parse_expire
36
173
-1
init_for_core
2
165
-1
check_news
36
173
-1
parse_news
36
173
-1
show_news
36
173
-1
parse_@unsend
2
173
-1
show_@unsend
2
173
-1
18
show_include
show_all
show_nosubject
show_expert
show_enter
type_manymsgs
type_@mail
type_replyto
type_expire
show_followup
show_resend_forw
choices_rn_order
show_no_auto_forward
show_expert_netfwd
show_no_dupcc
show_no_unsend
type_@unsend
unsend_sequences
26
4
2
2
Original message will not be included in replies
2
Original message will be included in replies
36
5
4
2
2
Replies will go to original sender only.
2
Replies will go to original sender and all previous recipients.
36
5
4
2
2
Mail editor will initially require a subject line.
2
Mail editor will not initially require a subject line.
36
5
4
2
2
Novice mail user...
2
Expert mail user...
36
5
4
2
2
Mail editor will not start with an implicit `enter' command.
2
Mail editor will start with an implicit `enter' command.
36
5
4
1
0
0
36
5
4
2
0
2
4
1
0
2
36
5
4
2
0
1
4
1
0
1
36
5
4
1
0
0
36
5
4
2
2
No special reply action for messages with non-player recipients.
2
Replies go only to first non-player recipient if any.
36
5
4
2
2
@resend puts player in Resent-By: header
2
@resend puts player in From: header (like @forward)
36
5
4
3
4
2
2
read
4
1
2
.current_message folders are sorted by last read date.
4
2
2
send
4
1
2
.current_message folders are sorted by last send date.
4
2
2
fixed
4
1
2
.current_message folders are not sorted.
36
5
4
2
2
@netforward when expiring messages
2
do not @netforward messages when expiring mail
36
5
4
2
2
@netforward confirms before emailing messages
2
@netforward doesn't confirm before emailing messages
36
5
4
2
2
i want to read mail to me also sent to lists i read
2
don't send me personal copies of mail also sent to lists i read
36
1
4
2
2
People may @unsend unread messages they send to me
2
No one may @unsend messages they sent to me
2
1
4
2
0
2
4
1
0
2
2
1
4
7
2
before
2
after
2
since
2
until
2
subject
2
body
2
last
2
1
4
20
2
include
2
all
2
followup
2
nosubject
2
expert
2
enter
2
sticky
2
@mail
2
manymsgs
2
replyto
2
netmail
2
expire
2
resend_forw
2
rn_order
2
no_auto_forward
2
expert_netfwd
2
news
2
no_dupcc
2
no_unsend
2
@unsend
36
1
2
!include!noinclude!all!sender!nosubject!expert!enter!sticky!@mail!manymsgs!replyto!netmail!expire!followup!resend_forw!rn_order!no_auto_forward!expert_netfwd!news!no_dupcc!no_unsend!@unsend!
36
1
4
2
2
noinclude
2
sender
36
1
0
19
36
5
5
36
4
4
1
2
Mail Options
36
5
2
Options for mailing
36
5
4
2
0
14349
0
1084848672
36
1
#66
Edit Options

16
36
-1
-1
-1
68
-1
67
2
actual
36
173
-1
show
36
173
-1
4
show_quiet_insert
show_eval_subs
show_local
show_no_parens
12
4
2
2
Report line numbers on insert or append.
2
No echo on insert or append.
36
5
4
2
2
Ignore .eval_subs when compiling verbs.
2
Use .eval_subs when compiling verbs.
36
5
4
2
2
Use in-MOO text editors.
2
Ship text to client for local editing.
36
5
4
2
2
include all parentheses when fetching verbs.
2
includes only necessary parentheses when fetching verbs.
36
5
4
4
2
quiet_insert
2
eval_subs
2
local
2
no_parens
36
1
2
!quiet_insert!eval_subs!local!no_parens!parens!noisy_insert!
36
1
4
2
2
parens
2
noisy_insert
36
1
0
20
36
5
5
36
4
4
1
2
Edit Options
36
5
5
36
5
4
2
0
1856
0
1084848672
36
1
#67
Display Options

16
36
-1
-1
-1
68
-1
77
0
3
show_blank_tnt
show_shortprep
show_thisonly
11
4
2
2
Treat `this none this' verbs like the others.
2
Blank out the args on `this none this' verbs.
36
5
4
2
2
Display prepositions in full.
2
Use short forms of prepositions.
36
5
4
2
2
./: will show ancestor properties/verbs if none on this.
2
./: will not show ancestor properties/verbs.
36
5
4
3
2
blank_tnt
2
shortprep
2
thisonly
36
1
2
!blank_tnt!shortprep!thisonly!
36
1
4
0
36
1
5
36
5
5
36
4
4
1
2
Display Options
36
5
5
36
5
4
2
0
809
0
1084848672
36
1
#68
Generic Option Package

144
36
-1
-1
-1
1
65
69
12
get
36
173
-1
set
36
173
-1
parse
36
173
-1
_name
36
173
-1
add_name
36
173
-1
remove_name
36
173
-1
show
36
173
-1
actual
36
173
-1
istype
36
173
-1
islistof
36
173
-1
desc_type
36
173
-1
parsechoice
36
173
-1
4
names
_namelist
extras
namewidth
8
4
0
36
1
2
!
36
1
4
0
36
1
0
15
36
5
5
36
4
4
1
2
Generic Option Package
36
5
2
an option package in need of a description.  See `help $generic_option'...
36
5
4
2
0
12729
0
1084848672
36
1
#69
Error Generator

16
36
-1
-1
-1
1
-1
72
20
raise
36
173
-1
E_NONE
36
173
-1
E_TYPE
36
173
-1
E_DIV
36
173
-1
E_PERM
36
173
-1
E_PROPNF
36
173
-1
E_VERBNF
36
173
-1
E_VARNF
36
173
-1
E_INVIND
36
173
-1
E_RECMOVE
36
173
-1
E_MAXREC
36
173
-1
E_RANGE
36
173
-1
E_ARGS
36
173
-1
E_NACC
36
173
-1
E_INVARG
36
173
-1
E_QUOTA
2
173
-1
accept
36
173
-1
name
36
173
-1
toerr
36
173
-1
match_error
36
173
-1
2
names
all_errors
6
4
16
2
E_NONE
2
E_TYPE
2
E_DIV
2
E_PERM
2
E_PROPNF
2
E_VERBNF
2
E_VARNF
2
E_INVIND
2
E_RECMOVE
2
E_MAXREC
2
E_RANGE
2
E_ARGS
2
E_NACC
2
E_INVARG
2
E_QUOTA
2
E_FLOAT
36
5
4
16
3
0
3
1
3
2
3
3
3
4
3
5
3
6
3
7
3
8
3
9
3
10
3
11
3
12
3
13
3
14
3
15
36
1
5
36
4
4
1
2
Error Generator
36
5
4
3
2
Object to automatically generate errors.
2

2
raise(error) actually raises the error.
36
5
4
2
0
7458
0
1084848672
36
1
#70
Site-Locks

0
2
46
-1
-1
45
-1
61
1
init_for_core
2
173
-1
0
22
4
0
2
5
0
0
36
1
4
0
36
0
0
1
2
5
2
%n (%#) can't send to moderated list %t (%[#t]) directly.
2
5
4
0
2
5
4
0
2
5
4
1
1
2
36
1
4
0
36
1
0
2592000
36
1
0
0
36
1
4
0
36
0
5
2
5
5
2
5
4
0
36
1
5
36
0
5
36
0
5
36
0
5
2
4
4
1
2
Site-Locks
36
1
2
Notes on annoying sites.
2
5
4
2
0
1042
0
1084848672
36
1
#71
housekeeper

19
71
-1
-1
-1
58
-1
-1
24
look_self
71
173
-1
cleanup
71
173
-1
replace
71
173
-1
cleanup_list
71
29
-1
add_cleanup
71
93
-2
remove_cleanup
71
29
-1
controls
71
173
-1
continuous
71
173
-1
litterbug
71
173
-1
is_watching
71
173
-1
send_home
71
173
-1
moveit
2
173
-1
ejectit
2
173
-1
is_object_cleaned
71
173
-1
is_litter
71
173
-1
init_for_core
2
173
-1
clean_status
71
173
-1
is_cleaning
71
173
-1
time
71
173
-1
acceptable
2
173
-1
move_players_home
2
173
-1
move_em
2
173
-1
take_away_msg drop_off_msg
71
173
-1
set_moveto_task
71
173
-1
17
recycle_bins
owners
cleaning
litter
eschews
public_places
task
requestors
destination
clean
testing
player_queue
take_away_msg
drop_off_msg
move_player_task
moveto_task
cleaning_index
107
4
0
71
5
4
1
1
2
71
5
1
-1
71
5
4
0
71
5
4
0
71
5
4
0
71
5
0
0
71
5
4
0
71
5
4
0
71
5
4
0
71
1
0
0
71
5
4
0
71
1
2
%[tpsc] arrives to cart %n off to bed.
71
5
2
%[tpsc] arrives to drop off %n, who is sound asleep.
71
5
0
0
71
1
0
0
71
5
0
0
71
5
4
0
36
1
5
36
1
2
here=player.location;me=player
36
1
5
71
5
5
71
5
5
71
5
5
71
5
5
71
5
5
71
5
5
71
5
5
71
5
5
71
5
5
71
5
5
71
5
5
71
5
5
71
5
5
71
5
5
71
5
5
71
5
5
36
1
5
36
1
5
36
1
5
36
1
5
36
1
5
36
1
5
36
1
0
0
36
1
5
71
5
5
71
5
5
71
5
5
36
1
5
71
5
5
71
4
5
71
5
5
2
1
4
1
1
2
71
5
4
0
71
5
5
71
5
5
71
5
5
71
4
5
71
4
4
2
1
90
1
89
36
1
5
2
0
5
2
0
0
2147483647
2
1
0
0
71
5
5
71
5
5
36
1
5
36
1
5
36
0
5
36
1
4
1
1
71
2
1
0
-80
36
1
5
71
4
5
2
0
5
2
0
5
71
5
5
71
5
5
71
4
2
The housekeeper is too busy putting away all of the junk all over LambdaMoo that there isn't time to listen to pages and stuff like that so your page isn't listened to, too bad.
71
5
2
the housekeeper's
71
5
2
The housekeeper's
71
5
5
71
5
5
71
5
5
71
5
5
2
1
0
-9993
36
0
5
71
5
2
'Self
71
5
2
The housekeeper's
71
5
2
The housekeeper
71
5
2
The housekeeper
71
5
2
'self
71
5
2
the housekeeper's
71
5
2
the housekeeper
71
5
2
the housekeeper
71
5
1
62
71
5
2
Impossible password to type
2
0
5
71
5
5
71
5
5
71
5
5
71
5
0
2147483647
2
1
4
4
0
183000
0
34096
0
1084780981
0
0
36
0
0
0
2
0
5
2
0
5
71
4
4
1
2
housekeeper
2
1
2
A very clean, neat, tidy person who doesn't mind lugging players and their gear all over the place.
71
5
4
2
0
21397
0
1084848672
36
1
#72
Network Utilities

16
2
-1
-1
-1
1
-1
75
25
parse_address
2
173
-1
local_domain
2
173
-1
open
2
173
-1
close
2
173
-1
sendmail
2
29
-1
trust
2
173
-1
init_for_core
2
173
-1
raw_sendmail
2
29
-1
invalid_email_address
2
173
-1
invalid_hostname
2
173
-1
email_will_fail
2
173
-1
read
2
173
-1
is_open
36
173
-1
incoming_connection
2
173
-1
return_address_for
2
173
-1
server_started
2
173
-1
is_outgoing_connection
2
173
-1
notify
2
173
-1
suspend_if_needed
2
173
-1
error
2
173
-1
help_msg
36
173
-1
adjust_postmaster_for_password
2
173
-1
add_queued_mail
36
173
-1
send_queued_mail
2
173
-1
tcp_wait
2
173
-1
21
site
large_domains
connect_connections_to
postmaster
port
MOO_name
valid_host_regexp
maildrop
trusts
active
valid_email_regexp
invalid_userids
debugging
errors_to_address
suspicious_userids
usual_postmaster
password_postmaster
queued_mail
queued_mail_task
envelope_from
blank_envelope
25
2
yoursite
2
1
4
0
2
1
4
0
2
0
2
postmastername@yourhost
2
5
0
7777
2
5
2
YourMOO
2
5
2
^%([-_a-z0-9]+%.%)+%(gov%|edu%|com%|org%|int%|mil%|net%|%nato%|arpa%|name%|info%|[a-z][a-z]%)$
2
5
2
localhost
2
5
4
1
1
36
2
1
0
0
2
5
2
^[-a-z0-9_!.%+$'=/]*[-a-z0-9_!%+$'=]$
2
5
4
7
2

2
sysadmin
2
root
2
postmaster
2
system
2
operator
2
bin
2
5
0
0
2
5
2
moomailerrors@yourhost
2
5
4
13
2

2
sysadmin
2
root
2
postmaster
2
bin
2
SYSTEM
2
OPERATOR
2
guest
2
me
2
mailer-daemon
2
webmaster
2
sysop
2
info
2
5
2
postmastername@yourhost
2
5
2
postmastername@yourhost
2
5
4
0
36
0
0
1076002766
36
1
2
postmastername@yourhost
2
5
0
0
2
5
0
0
2
4
4
1
2
Network Utilities
2
5
4
74
2
Utilities for dealing with network connections
2
---------------
2
Creating & tracking hosts:
2

2
:open(host, port [, connect-connection-to]) => connection
2
    open a network connection (using open_network_connection).
2
    If 'connect-connection-to' is a player object, the
2
    connection will be connected to that object when it
2
    gets the first line of input.
2

2
:close(connection)
2
     closes the connection & cleans up data
2

2
------------------
2
Parsing network things:
2

2
:invalid_email_address(email)
2
     return "" or string saying why 'email' is invalid.
2
     uses .valid_email_regexp
2

2
:invalid_hostname(host)
2
     return "" or string saying why 'host' doesn't look
2
     like a valid internet host name
2

2
:local_domain(host)
2
     returns the 'important' part of a host name, e.g.
2
     golden.parc.xerox.com => parc.xerox.com
2

2
-------------------
2
Sending mail
2

2
:sendmail(to, subject, @lines)
2
     send mail to the email address 'to' with indicated subject.
2
     header fields like 'from', 'date', etc. are filled in.
2
     lines can start with additional header lines.
2

2
:raw_sendmail(to, @lines)
2
     used by :sendmail. Send mail to given user at host, just
2
     as specified, no error checking.
2

2
================================================================
2
Parameters:
2

2
.active If 0, disabled sending of mail.
2

2
.site   Where does this MOO run?
2
        (Maybe MOOnet will use it later).
2

2
.port   The network port this MOO listens on.
2

2
.large_domains 
2
        A list of sites where more than 2 levels of host name are
2
        significant, e.g., if you want 'parc.xerox.com' to be
2
        different than 'cinops.xerox.com', put "xerox.com" as an
2
        element in .large_domains.
2

2
.postmaster
2
        Email address to which problems with MOO mail should
2
        go. This should be a real email address that someone reads.
2

2
.maildrop
2
        Hostname to connect to for dropping off mail. Usually can
2
        just be "localhost".
2

2
.reply_address
2
        If a MOO character sends email, where does a reply go?
2
        Inserted in 'From:' for mail from characters without
2
        registration addresses.        
2

2
.trusts
2
        List of (non-wizard) programmers who can call
2
        :open, :sendmail, :close
2

2
                
2
5
4
2
0
22932
0
1084848672
36
1
#73
Generic BigList Resident

144
36
-1
-1
-1
1
-1
18
7
_make
2
173
-1
_kill
2
173
-1
_get
36
173
-1
_put
36
173
-1
_genprop
36
173
-1
_ord
36
173
-1
init_for_core
2
173
-1
3
_genprop
mowner
_mgr
7
2
a
36
5
1
36
36
5
1
13
36
5
5
36
4
4
3
2
biglist
2
resident
2
gblr
36
5
4
1
2
This is the object you want to use as a parent in order to @create a place for your biglists to live.  Suitably sick souls may wish to reimplement :_genprop and :_kill to reclaim unused properties (this :_kill just throws them away and this :_genprop just relentlessly advances....  who cares).  Anyway, you'll need to look at $biglist before this will make sense.
36
5
4
2
0
3606
0
1084848672
36
1
#74
Generic Feature Object

144
36
-1
-1
-1
5
89
87
12
help_msg
36
173
-1
look_self
36
173
-1
using this
36
173
-1
examine_commands_ok
2
173
-1
set_feature_ok
36
173
-1
hidden_verbs
36
173
-1
set_feature_verbs
36
173
-1
initialize
36
173
-1
init_for_core
2
173
-1
feature_remove
2
173
-1
player_connected
2
173
-1
has_feature_verb
2
173
-1
4
warehouse
help_msg
feature_verbs
feature_ok
16
1
83
36
1
2
The Generic Feature Object--not to be used as a feature object.
36
5
4
1
2
Using
36
1
0
1
36
1
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
4
4
4
2
Generic Feature Object
2
Generic .Features_Huh Object
2
Feature Object
2
.Features_Huh Object
36
5
2
This is the Generic Feature Object.  It is not meant to be used as a feature object itself, but is handy for making new feature objects.
36
5
4
2
0
6698
0
1084848672
36
1
#75
Gopher utilities

16
2
-1
-1
-1
1
-1
78
19
get_now
2
173
-1
parse
2
173
-1
show_text
2
173
-1
type
2
173
-1
summary
2
173
-1
get
2
173
-1
clear_cache
2
173
-1
unparse
2
173
-1
interpret_error
2
173
-1
trusted
2
173
-1
_textp
2
173
-1
_mail_text
2
173
-1
init_for_core
2
173
-1
display_cache
2
45
-1
get_cache
2
173
-1
cache_entry
2
173
-1
help_msg
2
173
-1
daily
2
173
-1
get_now_EXPERIMENTAL
2
173
-1
6
cache_requests
cache_times
cache_values
limit
cache_timeout
frozen
10
4
0
2
1
4
0
2
1
4
0
2
1
0
2000
2
5
0
900
2
1
0
0
2
5
0
0
2
4
4
1
2
Gopher utilities
2
5
4
30
2
An interface to Gopher internet services.
2
Copyright (c) 1992,1993 Grump,JoeFeedback@LambdaMOO.
2

2
This object contains just the raw verbs for getting data from gopher servers and parsing the results. Look at #50122 (Generic Gopher Slate) for one example of a user interface. 
2

2
:get(site, port, selection)
2
  Get data from gopher server: returns a list of strings, or an error if it couldn't connect. Results are cached.
2

2
:get_now(site, port, selection)
2
  Used by $gopher:get. Arguments are the same: this actually gets the 
2
  data without checking the cache. (Don't call this, since the
2
  caching is important to reduce lag.)
2
  
2
:show_text(who, start, end, site, port, selection)
2
  Requires wiz-perms to call.
2
  like who:notify_lines($gopher:get(..node..)[start..end])
2

2
:clear_cache()
2
  Erase the gopher cache.
2

2
:parse(string)
2
  Takes a directory line as returned by $gopher:get, and return a list
2
  {host, port, selector, label}
2
   host, port, and selector are what you send to :get.
2
  label is a string, where the first character is the type code.
2

2
:type(char)
2
   returns the name of the gopher type indicated by the character, e.g.
2
   $gopher:type("I") => "image"
2

2
5
4
2
0
15578
0
1084848672
36
1
#76
Programmer Options

16
36
-1
-1
-1
68
-1
-1
8
actual
36
173
-1
show
36
173
-1
show_verb_args
36
173
-1
check_verb_args
36
173
-1
parse_verb_args
36
173
-1
show_@prop_flags
36
173
-1
check_@prop_flags
2
173
-1
parse_@prop_flags
2
173
-1
7
show_eval_time
show_list_all_parens
show_list_no_numbers
show_copy_expert
type_@prop_flags
show_list_show_permissions
show_rmverb_mail_backup
15
4
2
2
eval does not show ticks/seconds consumed.
2
eval shows ticks/seconds consumed.
36
5
4
2
2
@list shows only necessary parentheses by default
2
@list shows all parentheses by default
36
5
4
2
2
@list gives line numbers by default
2
@list omits line numbers by default
36
5
4
2
2
@copy prints warning message.
2
@copy omits warning message.
36
5
4
1
0
2
36
5
4
2
2
@list does not display permissions in header
2
@list displays permissions in header
36
5
4
2
2
@rmverb does not email you a backup
2
@rmverb emails you a backup before deleting the verb
36
5
4
8
2
list_all_parens
2
list_no_numbers
2
eval_time
2
copy_expert
2
verb_args
2
@prop_flags
2
list_show_permissions
2
rmverb_mail_backup
36
1
2
!list_all_parens!list_no_numbers!list_show_permissions!eval_time!copy_expert!list_numbers!verb_args!@prop_flags!rmverb_mail_backup!
36
1
4
1
2
list_numbers
36
1
0
15
36
5
0
0
36
4
4
1
2
Programmer Options
36
5
4
1
2
Option package for $prog commands.  See `help @prog-options'.
36
5
4
2
0
5196
0
1084848672
36
1
#77
Builder Options

16
36
-1
-1
-1
68
-1
76
5
check_create_flags
36
173
-1
show_create_flags
36
173
-1
parse_create_flags
36
173
-1
show_dig_room show_dig_exit
36
173
-1
parse_dig_room parse_dig_exit
36
173
-1
5
show_bi_create
type_dig_room
type_dig_exit
show_audit_bytes
show_audit_float
13
4
2
2
@create/@recycle re-use object numbers.
2
@create/@recycle call create()/recycle() directly.
36
5
4
1
0
1
36
5
4
1
0
1
36
5
4
2
2
@audit/@prospectus shows `<1K'
2
@audit/@prospectus shows bytes
2
1
4
2
2
@audit/@prospectus shows integer sizes (1K)
2
@audit/@prospectus shows floating-point sizes (1.0K)
2
1
4
6
2
dig_room
2
dig_exit
2
create_flags
2
bi_create
2
audit_bytes
2
audit_float
36
1
2
!dig_room!dig_exit!create_flags!bi_create!audit_bytes!audit_float!
36
1
4
0
36
1
0
20
36
5
5
36
4
4
1
2
Builder Options
36
5
4
1
2
Option package for $builder commands.  See `help @build-options'.
36
5
4
2
0
3690
0
1084848672
36
1
#78
Generic Utilities Package

144
2
-1
-1
-1
1
20
80
0
1
help_msg
5
4
1
2
This is the Generic Utility Object.  One presumes it should have text in it explaining the use of the utility object in question.
2
5
0
0
2
4
4
1
2
Generic Utilities Package
2
5
2
This is a placeholder parent for all the $..._utils packages, to more easily find them and manipulate them. At present this object defines no useful verbs or properties. (Filfre.)
2
5
4
2
0
579
0
1084848672
36
1
#79
Byte Quota Utilities

16
36
-1
-1
-1
78
-1
81
36
initialize_quota
36
173
-1
init_for_core
2
173
-1
adjust_quota_for_programmer
36
173
-1
bi_create
2
173
-1
enable_create
2
173
-1
disable_create
2
173
-1
parse_create_args
36
173
-1
creation_permitted verb_addition_permitted property_addition_permitted
36
173
-1
all_characters
36
173
-1
display_quota
36
173
-1
get_quota
36
173
-1
charge_quota
36
173
-1
reimburse_quota
36
173
-1
set_quota
36
173
-1
get_size_quota
36
173
-1
display_quota_summary
36
173
-1
quota_remaining
36
173
-1
preliminary_reimburse_quota
36
173
-1
value_bytes
2
173
-1
object_bytes object_size
2
173
-1
do_summary
36
157
0
summarize_one_user
36
173
-1
recent_object_bytes
2
173
-1
measurement_task
2
173
-1
can_peek
36
173
-1
can_touch
36
173
-1
do_breakdown
2
173
-1
object_overhead_bytes
36
173
-1
property_overhead_bytes
2
173
-1
verb_overhead_bytes
2
173
-1
add_owned_object
2
173
-1
measurement_task_nofork
2
173
-1
measurement_task_body
2
173
-1
schedule_measurement_task
2
173
-1
task_perms
2
173
-1
property_exists
2
173
-1
15
default_quota
large_negative_number
max_unmeasured
unmeasured_multiplier
working
cycle_days
task_time_limit
byte_based
exempted
task_repeat
repeat_cycle
too_large
large_objects
report_recipients
measurement_task_running
20
4
4
0
20000
0
0
0
0
0
1
36
5
0
-10000
36
5
0
10
36
5
0
100
36
5
1
2
36
5
0
5
36
5
0
500
36
5
0
1
36
5
4
0
36
5
0
1
36
5
0
0
36
5
0
1000000
36
5
4
1
1
32
36
5
4
1
1
2
36
5
0
0
36
5
4
66
2
Verbs a user might want to call from a program:
2
 :bi_create -- built-in create() call, takes same args.
2

2
 :get_quota(who) -- just get the raw size_quota property
2
 :display_quota(who) -- prints to player the quota of who.  If caller_perms() controls who, include any secondary characters.  Called by @quota.
2
 :get_size_quota(who [allchars]) -- return the quota of who, if allchars flag set, add info from all secondary chars, if caller_perms() permits.
2

2
 :value_bytes(value) -- computes the size of the value.
2
 :object_bytes(object) -- computes the size of the object and caches it.
2
 :recent_object_bytes(object, days) -- computes and caches the size of object only if cached value more than days old.  Returns cached value.
2
 :do_summary(user) -- prints out the results of summarize-one-user.
2
 :summarize_one_user(user) -- summarizes and caches space usage for user.  See verb help for details.
2

2
Verbs the system calls:
2
 :"creation_permitted verb_addition_permitted property_addition_permitted"(who) -- returns true if who is permitted to build.
2
 :initialize_quota(who) -- sets quota for newly created players
2
 :adjust_quota_for_programmer(who) -- empty; might add more quota to newly @progged player.
2
 :enable_create(who) -- sets .ownership_quota to 1
2
 :disable_create(who) -- sets .ownership_quota back to -1000 to prohibit create()
2
 :charge_quota(who, object) -- subtract the size of object from who's quota.  Manipulates the #-unmeasured if what is not currently measured.  Called by $wiz_utils:set_owner.
2
 :reimburse_quota(who, object) -- add the size of object to who's quota.  Ditto.
2
 :preliminary_reimburse_quota(who, object) -- Because the set_owner is done *after* an object has been turned into $garbage, ordinary reimbursement fails.  So we use this verb in the $recycler.
2
 :set_quota(who, howmuch)
2
 :quota_remaining(who) 
2
 :display_quota_summary -- internal, called by display quota
2

2
The measurement task:
2

2
 :measurement_task() -- runs once every 24 hours measuring stuff, separated from the scheduling in case you just want to run it once.  Calls the body and then reports via moomail.
2
 :schedule_measurement_task() -- actually schedules it.  Look here to change the start time.
2
 :measurement_task_body(timeout) -- does the real work, working for no longer than timeout seconds.
2
 .task_time_limit -- integer number of seconds indicating for how long it should run each day.
2
 .working -- object indicating the player whom it is either working on now (or if not running) will pick up working on when it commences tonight.
2
 .cycle_days -- integer numbers indicating how long ago an object must have been measured before it will be remeasured.
2
 .repeat_cycle -- boolean.  0 means have a vanilla cycle (goes through all players() exactly once measuring their objects measured more than .cycle_days ago).  1 means to have a much more complex algorithm: The first cycle, it only measures stuff owned by people who have logged in within .cycle_days.  If, in .task_time_limit seconds, it measures all objects not measured in cycle_days owned by such people, it will run again measuring those objects which have not been measured in cycle_days - 1, considering people who have logged in within 4 * cycle_days, repeating until it has used up its seconds.  ("Doing some of tomorrow's work.")  Selecting .repeat_cycle = 1 is appropriate only for large MOOs.
2
 .exempted -- list of objects to never measure (useful if there are huge objects).  Suggested huge objects include $player_db and $site_db.
2
 .measurement_task -- indicates the task_id() of the most recent measurement task -- used to prevent duplicate invocation.
2
 .report_recipients -- recipients of the daily reports.  Set to {} to disable reporting entirely.
2

2
See help @measure and help @quota for the command line verbs.
2

2

2
Porter's notes:  If you are planning on porting this system to another MOO, here are the things to grab in addition to @dumping all of $quota_utils:
2

2
The following verbs have been changed on $prog:
2
@prop*erty @verb @copy (@add-alias @copy-move as well)
2

2
The following verbs have been changed on $wiz:
2
@programmer @quota
2

2
The following verbs have been changed on $wiz_utils:
2
set_programmer set_owner make_player
2

2
The following verbs have been changed on $builder:
2
@quota _create
2

2
This verb probably should have gone on $builder.
2
@measure
2

2
The followig verbs have been changed on $recycler
2
_recycle _create setup_toad
2

2
The following verb has been changed on $login:
2
create
2

2
And don't forget $object_quota_utils, which has the object based implementation.
36
5
0
0
36
4
4
1
2
Byte Quota Utilities
36
5
4
1
2
This is the Byte Quota Utilities utility package.  See `help $quota_utils' for more details.
36
5
4
2
0
32429
0
1084848672
36
1
#80
@paranoid database

16
36
-1
-1
-1
1
-1
82
10
ensure_props_exist
36
173
-1
init_for_core
36
173
-1
add_data
36
173
-1
get_data
36
173
-1
erase_data
36
173
-1
set_kept_lines
36
173
-1
gc
36
173
-1
help_msg
2
173
-1
semiweeklyish
2
173
-1
is_paranoid
2
173
-1
1
max_lines
5
0
30
2
1
0
0
36
4
4
2
2
@paranoid database
2
paranoid
36
5
4
19
2

2
This object stores the @paranoid data from :tell.  Normally it is not necessary to access these things directly.  All verbs are controlled by a caller_perms() check.  All data is stored in the old .responsible format.
2

2
:add_data(who,data) adds one line's worth of data to the collection, trimming from the front as necessary.
2

2
:get_data(who) retrieves the entire batch of data.
2

2
:erase_data(who) sets the data to {}
2

2
:set_kept_lines(who,number) Changes the number of kept lines.  Maximum is 20.
2

2
Core verbs that call the above are this are $player:tell, @check, @paranoid, and :erase_paranoid_data.
2

2
Internal:  
2
   Properties used are
2
   tostr(player)+"lines"
2
   tostr(player)+"pdata"
2
   :ensure_props_exist(who,linesname,dataname):  creates the above
2
   :GC() --- loops over all data and verifies they're for players.
36
5
4
2
0
5921
0
1084848672
36
1
#81
Object Quota Utilities

16
36
-1
-1
-1
78
-1
59
14
initialize_quota
36
173
-1
init_for_core
2
173
-1
adjust_quota_for_programmer
36
173
-1
bi_create
2
173
-1
creation_permitted
36
173
-1
verb_addition_permitted property_addition_permitted
36
173
-1
display_quota
36
173
-1
get_quota quota_remaining
36
173
-1
charge_quota
36
173
-1
reimburse_quota
36
173
-1
set_quota
36
173
-1
preliminary_reimburse_quota
36
173
-1
can_peek
36
173
-1
can_touch
36
173
-1
1
byte_based
6
0
0
36
5
2
This is the default package that interfaces to the $player/$prog quota manipulation verbs.
36
5
0
0
36
4
4
1
2
Object Quota Utilities
36
5
4
1
2
This is the Object Quota Utilities utility package.  See `help $object_quota_utils' for more details.
36
5
4
2
0
6728
0
1084848672
36
1
#82
Server Options

16
2
-1
-1
-1
1
-1
86
2
help_msg
36
173
-1
init_for_core
2
173
-1
15
protect_chparent
protect_add_verb
protect_add_property
protect_recycle
permit_writable_verbs
protect_set_verb_info
queued_task_limit
help_msg
support_numeric_verbname_strings
connect_msg
protect_force_input
protect_set_property_info
fg_ticks
bg_ticks
boot_msg
19
0
1
2
5
0
1
2
5
0
1
2
5
0
1
2
5
0
0
2
5
0
1
2
5
0
300
2
5
4
34
2
                Server Options <$server_options>
2
                --------------------------------
2

2
messages: 'boot_msg', 'connect_msg', 'create_msg', 'recycle_msg', 'redirect_from_msg', 'redirect_to_msg', and 'timeout_msg'.
2
A number of the messages printed to a connection by the server under various circumstances can now be customized or eliminated from within the DB.  In each case, a property on $server_options is checked at the time the message would be printed.  If the property does not exist, the standard message is printed.  If the property exists and its value is not a string, then no message is printed at all.  Otherwise, the string is printed in place of the standard message.  The following list covers all of the newly customizable messages, showing for each the name of the relevant property on $server_options, the default/standard message, and the circumstances under which the message is printed:
2
'boot_msg'              "*** Disconnected ***"
2
The function boot_player() was called on this connection.
2
'connect_msg'           "*** Connected ***"
2
The user object that just logged in on this connection existed before #0:do_login_command() was called.
2
'create_msg'            "*** Created ***"
2
The user object that just logged in on this connection did not exist before #0:do_login_command() was called.
2
'recycle_msg'           "*** Recycled ***"
2
The logged-in user of this connection has been recycled.
2
'redirect_from_msg'     "*** Redirecting connection to new port ***"
2
The logged-in user of this connection has just logged in on some other connection.
2
'redirect_to_msg'       "*** Redirecting old connection to this port ***"
2
The user who just logged in on this connection was already logged in on some other connection.
2
'timeout_msg'           "*** Timed-out waiting for login. ***"
2
This in-bound network connection was idle and un-logged-in for at least CONNECT_TIMEOUT seconds (as defined in options.h).
2

2
Note: on a 1.8rN server, changes to $server_options will not take effect until load_server_options() has been called.
2

2

2
Some properties on $server_options can change the server behavior:
2

2
'bg_seconds', 'bg_ticks', 'fg_seconds', and 'fg_ticks'.
2
If those properties exist and are numbers, the server use them instead of the constants DEFAULT_BG_SECONDS, DEFAULT_BG_TICKS, DEFAULT_FG_SECONDS and DEFAULT_FG_TICKS (respectively) defined at compile time in "options.h"; they are looked up anew every time a task begins or resumes execution. Those define ticks (basic operations)/real-time seconds any task is allowed to use without suspending. 'fg' constants/properties are used only for 'foreground' tasks (those started by either player input or the server's initiative and that have never suspended); the 'bg' constants/properties are used only for 'background' tasks (forked tasks and those of any kind that have suspended).
2

2
'max_stack_depth' This allow to change in-db the the maximum verb-call depth. Originillay the maximum verb-call depth is defined at compile time by the DEFAULT_MAX_STACK_DEPTH constant in "options.h". The maximum stack depth for any task is set at the time that task is created and cannot be changed thereafter. This implies that suspended tasks, even after being saved in and restored from the DB, are not affected by later changes to $server_options.max_stack_depth. 
2

2
'queued_task_limit' if this property exist and its value is non-negative, then it is used as the maximum of tasks a verb-owner (more exactly the user's perms the verb run with) can queue (through fork() and suspend()). This setting is overriden if the user has a 'queued_task_limit' property and if its value is non-negative. E_QUOTA is raised of either forking or suspending when the user is over quota for tasks.
2

2
'protect_...' On every call to a built-in function 'foo', if the property $server_options.protect_foo exists and is true, and the programmer is not a wizard, then the server checks for the existence of #0:bf_<fuction> and calls that. If it doesn't exist then E_PERM is raised, i.e. the built-in function is made wiz-only.
2
                --------------------------------
2
5
0
0
36
1
2
*** Connected ***
2
5
0
1
2
5
0
1
2
1
0
150000
2
5
0
80000
2
5
2

2
5
0
0
2
4
4
1
2
Server Options
2
5
5
2
5
4
2
0
6853
0
1084848672
36
1
#83
Feature Warehouse

16
36
-1
-1
-1
8
-1
-1
1
list
36
157
3
0
31
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
2
1
0
0
2
1
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
0
1
2
1
5
36
4
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
0
0
36
4
4
2
2
Feature Warehouse
2
warehouse
36
5
5
36
5
4
2
0
1594
0
1084848672
36
1
#84
Builder Help DB

16
36
-1
-1
-1
30
-1
85
1
init_for_core
2
173
-1
51
builder-index
@locations
@sort-owned
@verify-owned
@add-owned
@recreate
@parents
@contents
key-representation
keys
@unlock
@lock
locking
@classes
@audit
@count
@quota
@create
creation
@dig
@recycle
building
@dump
@setprop
@set
@builder-options
@builderoptions
@buildoptions
@build-options
room-messages
@resident
exit-messages
@add-entrance
@add-exit
topology
@entrances
@exits
containers
rooms
@remove-entrance
@remove-exit
@unlock_for_open
@lock_for_open
@opacity
container-messages
thing-messages
common_quota
object-quota
@measure
audit_bytes
audit_float
57
4
2
2
*index*
2
Builder Help Topics
36
5
4
7
2
Syntax:  @locations object
2

2
Prints out the names and object numbers of all containing objects.
2

2
Example:
2
  @locations ur-Rog
2
  ur-Rog(#6349)   ur-Rog's Display Case(#6355)   Editorial Boardroom(#5747)
36
5
4
5
2
Syntax:  @sort-owned  [ object | size ]
2

2
Sorts your .owned_objects property so @audit shows up sorted.  See help @audit for more information.
2

2
@sort-owned object will sort by object number (the default).  @sort-owned size will sort by size of object as periodically recorded.
36
5
4
3
2
Syntax:  @verify-owned
2

2
Checks that all the objects in your .owned_objects property are actually owned by you, and effects repairs if needed.  See help @audit for more information.
36
5
4
3
2
Syntax:  @add-owned <object>
2

2
Adds an object to your .owned_objects property in case it managed not to get updated properly upon creation of that object.  Checks to ensure that the objects is really owned by you and otherwise belongs in your .owned_objects property.  See help @audit for more information.
36
5
4
7
2
Usage: @recreate <object> as <parent> named <name spec>
2

2
This is a combination of @create and @chparent.  It takes an existing object, completely strips it of any verbs, properties, and values for inherited properties.  This object is then reshaped into a child of the parent specified, as though @create had been called, but retaining the same object number as the original.
2

2
You may use "called" instead of "named" in this command, if you wish.
2

2
The <parent> and <name spec> arguments are as in @create.
36
5
4
8
2
Syntax:  @parents object
2

2
A quick way to find out the ancestry of an object.  Prints out the names and object numbers of all ancestors.
2

2
Example:
2
  @parents Haakon
2
  Haakon(#2)   generic wizard(#218)   generic programmer(#217)   generic 
2
  player(#6)   Root Class(#1)
36
5
4
8
2
Syntax:  @contents object
2

2
A quick way to find out the contents of an object.  Prints out the names and object numbers of all direct contents.  This can be useful when you need to refer to something by object number because something is wrong with its aliases.
2

2
Example:
2
  @contents here
2
  The Entrance Hall(#19) contains:
2
  Strasbourg Clock(#71)   mirror at about head height(#7444)
36
5
4
10
2
The representation of key expressions is very simple and makes it easy to construct new keys on the fly.
2

2
Objects are represented by their object numbers and all other kinds of key expressions are represented by lists.  These lists have as their first element a string drawn from the following set:
2
        "&&"     "||"     "!"     "?"
2
For the first two of these, the list should be three elements long; the second and third elements are the representations of the key expressions on the left- and right-hand sides of the appropriate operator.  In the third case, "!", the list should be two elements long; the second element is again a representation of the operand.  Finally, in the "?" case, the list is also two elements long but the second element must be an object number.
2

2
As an example, the key expression
2
        #45  &&  ?#46  &&  (#47  ||  !#48)
2
would be represented as follows:
2
        {"&&", {"&&", #45, {"?", #46}}, {"||", #47, {"!", #48}}}
36
1
4
24
2
LambdaMOO supports a simple but powerful notation for specifying locks on objects, encryption on notes, and other applications.  The idea is to describe a constraint that must be satisfied concerning what some object must be or contain in order to use some other object.
2

2
The constraint is given in the form of a logical expression, made up of object numbers connected with the operators 'and', 'or', and 'not' (written '&&', '||', and '!', for compatibility with the MOO programming language).  When writing such expressions, though, one usually does not use object numbers directly, but rather gives their names, as with most MOO commands.
2

2
These logical expressions (called 'key expressions') are always evaluated in the context of some particular 'candidate' object, to see if that object meets the constraint.  To do so, we consider the candidate object, along with every object it contains (and the ones those objects contain, and so on), to be 'true' and all other objects to be 'false'.
2

2
As an example, suppose the player Munchkin wanted to lock the exit leading to his home so that only he and the holder of his magic wand could use it.  Further, suppose that Munchkin was object #999 and the wand was #1001.  Munchkin would use the '@lock' command to lock the exit with the following key expression:
2
        me || magic wand
2
and the system would understand this to mean
2
        #999 || #1001
2
That is, players could only use the exit if they were (or were carrying) either #999 or #1001.
2

2
To encrypt a note so that it could only be read by Munchkin or someone carrying his book, his bell, and his candle, Munchkin would use the 'encrypt' command with the key expression
2
        me || (bell && book && candle)
2

2
Finally, to keep players from taking a large gold coffin through a particularly narrow exit, Munchkin would use this key expression:
2
        ! coffin
2
That is, the expression would be false for any object that was or was carrying the coffin.
2

2
There is one other kind of clause that can appear in a key expression:
2
        ? <object>
2
This is evaluated by testing whether the given object is unlocked for the candidate object; if so, this clause is true, and otherwise, it is false.  This allows you to have several locks all sharing some single other one; when the other one is changed, all of the locks change their behavior simultaneously.
2

2
[Note to programmers: The internal representation of key expressions, as stored in .key on every object, for example, is very simple and easy to construct on the fly.  For details, see 'help key-representation'.]
36
1
4
3
2
Syntax:  @unlock <object>
2

2
Clear any lock that might exist on the given object.  See 'help locking' for general information about locking.
36
1
4
5
2
Syntax:  @lock <object> with <key expression>
2

2
Set a lock on <object> to restrict its use.  See 'help locking' for general information about locking and 'help keys' for the syntax and semantics of key expressions.
2

2
N.B.  In the case of rooms, you are actually better off setting room.free_entry to 0 thus preventing teleportation and then @locking the various entrances.  The problem with @locking the room itself is that this can make it impossible to drop objects in the room.
36
1
4
21
2
It is frequently useful to restrict the use of some object.  For example, one might want to keep people from using a particular exit unless they're carrying a bell, a book, and a candle.  Alternatively, one might allow anyone to use the exit unless they're carrying that huge golden coffin in the corner.  LambdaMOO supports a general locking mechanism designed to make such restrictions easy to implement, usually without any programming.
2

2
Every object supports a notion of being 'locked' with respect to certain other objects.  For example, the exit above might be locked for any object that was carrying the coffin object but unlocked for all other objects.  In general, if some object 'A' is locked for another object, 'B', then 'B' is usually prevented from using 'A'.  Of course, the meaning of 'use' in this context depends upon the kind of object.
2

2
The various standard classes of objects use locking as follows:
2
  + Rooms and containers refuse to allow any object inside them if they're locked for it.
2
  + Exits refuse to transport any object that they're locked for.
2
  + Things (including notes and letters) cannot be moved to locations that they're locked for.
2

2
There are two sides to locking:
2
  + How is it specified whether one object is locked for another one?
2
  + What is the effect of an object being locked?
2
Note that these two questions are entirely independent: one could invent a brand-new way to specify locking, but the effect of an exit being locked would be unchanged.
2

2
[Note to programmers: the interface between these two sides is the verb x:is_unlocked_for(y), which is called by x to determine if it is locked for the object y.  The way in which 'is_unlocked_for' is implemented is entirely independent of the ways in which x uses its results.  Note that you can play on either side of this interface with your own objects, either defining new implementations of 'is_unlocked_for' that match your particular circumstances or having your objects interpret their being locked in new ways.]
2

2
There is a default way to specify locks on objects; the following help topics cover the relevant commands:
2

2
@lock -- setting a lock on an object
2
@unlock -- clearing the lock on an object
2
keys -- describes the language used to describe lock keys
36
1
4
8
2
Syntax:  @classes
2
         @classes <class-name> ...
2

2
The wizards have identified several useful classes of objects in the database.  The @classes command is used to see which classes exist and what their member objects are.
2

2
The first form simply lists all of the defined classes along with short descriptions of the membership of each.
2

2
The second form prints an indented listing of that subset of the object parent/child hierarchy containing the objects in the class(es) you specify.
36
1
4
27
2
Syntax:  @audit [<player>] [for <string>] [from <number>] [to <number>] 
2

2
`@audit'        prints a report of all of the objects you own.
2
`@audit player' prints the same report for another player.
2

2
The `for' string restricts the search to objects whose names begin with that string.
2
It is also possible to restrict the range of object numbers to include only those above a given number (`from') or below a given number (`to').
2

2
All forms of @audit print a report:
2

2
   #14 Gemba                          [The Pool]
2
  #144 Popgun                         [Gemba]
2
 #1479 Cockatoo                      *[The Living Room]
2
 #1673 Bottom of Swimming Pool       
2
 #2147 Cavern                        <-*west
2
 #2148 tunnel                         Bottom of Swimming ->Cavern
2

2
The first column is the object's number, the second its name. The third column shows the object's location: Gemba is in The Pool, and is carrying the Popgun (#144).
2
For exits, the third column shows source ->dest.
2
For rooms, the third column shows any entrances owned by someone else.
2
Object location, exit sources and destinations owned by another player are preceded by a *.
2

2
@audit uses a property .owned_objects on the player, for speed.  This property is updated at the time of each object creation and destruction and ownership change.  The verb @auditdb (same args as @audit) actually searches through the entire database for objects.
2

2
See also @verify-owned, @sort-owned, and @add-owned.
2

2
See also @prospectus, which gives some additional information.
36
1
4
5
2
Syntax:  @count [player]
2

2
Prints out the number of objects you or another person own.  Do not be surprised if this is one larger than you think it should be: remember that your player object is owned by you as well, even though you didn't create it in the usual way.
2

2
If byte-based quota is enabled, also prints the total usage by all objects at last measurement.
36
1
4
2
2
*pass*
2
@quota
36
1
4
16
2
Syntax:  @create <class-name> named "<names>"
2
         @create <parent-object> named "<names>"
2

2
The main command for creating objects other than rooms and exits (for them, see 'help @dig'; it's much more convenient).
2

2
The first argument specifies the 'parent' of the new object: loosely speaking, the 'kind' of object you're creating.  <class-name> is one of the four standard classes of objects: $note, $letter, $thing, or $container.  As time goes on, more 'standard classes' may be added.  If the parent you have in mind for your new object isn't one of these, you may use the parent's name (if it's in the same room as you) or else its object number (e.g., #4562).
2

2
You may use "called" instead of "named" in this command, if you wish.
2

2
An object must be fertile to be used as a parent-class.  See help @chmod for details.
2

2
The <names> are given in the same format as in the @rename command:
2
        <name-and-alias>,<alias>,...,<alias> [preferred]
2
        <name>:<alias>,...,<alias> [not preferred]
2

2
See 'help @rename' for a discussion of the difference between a name and an alias.
36
1
4
11
2
The primary means for players to extend the MOO is for them to create new objects with interesting behavior.  There are convenient commands for creating and recycling objects and for keeping track of the objects you've created.  Help is available on these commands in the following topics:
2

2
@dig -- conveniently building new rooms and exits
2
@create -- making other kinds of objects
2
@recycle -- destroying objects you no longer want
2
@quota -- determining how many more objects you can build
2
@count -- determining how many objects you already own
2
@audit -- listing all of your objects
2
@classes -- listing all of the public classes available for your use
2
@move -- moving your objects from place to place
2
@parents, @kids -- examine the inheritance hierarchy.
36
1
4
24
2
Syntax:  @dig "<new-room-name>"
2
         @dig <exit-spec> to "<new-room-name>"
2
         @dig <exit-spec> to <old-room-object-number>
2

2
This is the basic building tool.  The first form of the command creates a new room with the given name.  The new room is not connected to anywhere else; it is floating in limbo.  The @dig command tells you its object number, though, so you can use the @move command to get there easily.
2

2
The second form of the command not only creates the room, but one or two exits linking your current location to (and possibly from) the new room.  An <exit-spec> has one of the following two forms:
2
        <names>
2
        <names>|<names>
2
where the first form is used when you only want to create one exit, from your current room to the new room, and the second form when you also want an exit back, from the new room to your current room.  In any case, the <names> piece is just a list of names for the exit, separated by commas; these are the names of the commands players can type to use the exit.  It is usually a good idea to include explicitly the standard abbreviations for direction names (e.g., 'n' for 'north', 'se' for 'southeast', etc.).  DO NOT put spaces in the names of exits; they are useless in MOO.
2

2
The third form of the command is just like the second form except that no new room is created; you instead specify by object number the other room to/from which the new exits will connect.
2

2
NOTE: You must own the room at one end or the other of the exits you create.  If you own both, everything is hunky-dorey.  If you own only one end, then after creating the exits you should write down their object numbers.  You must then get the owner of the other room to use @add-exit and @add-entrance to link your new exits to their room.
2

2
Examples:
2
    @dig "The Conservatory"
2
creates a new room named "The Conservatory" and prints out its object number.
2
    @dig north,n to "The North Pole"
2
creates a new room and also an exit linking the player's current location to the new room; players would say either 'north' or 'n' to get from here to the new room.  No way to get back from that room is created.
2
    @dig west,w|east,e,out to "The Department of Auto-Musicology"
2
creates a new room and two exits, one taking players from here to the new room (via the commands 'west' or 'w') and one taking them from the new room to here (via 'east', 'e', or 'out').
2
    @dig up,u to #7164
2
creates an exit leading from the player's current room to #7164, which must be an existing room.
36
5
4
3
2
Syntax:  @recycle <object-name-or-number>
2

2
Destroys the indicated object utterly and irretrievably.  Naturally, you may only do this to objects that you own.
36
5
4
6
2
There are a number of commands available to players for building new parts of the MOO.  Help on them is available under the following topics:
2

2
creation -- making, unmaking, and listing your rooms, exits, and other objects
2
topology -- making and listing the connections between rooms and exits
2
descriptions -- setting the names and descriptive texts for new objects
2
locking -- controlling use of and access to your objects
36
1
4
7
2
Syntax:  @dump <object> [with [id=#<id>] [noprops] [noverbs] [create]]
2

2
This spills out all the properties and verbs on an object, calling suspend at appropriate intervals.
2
   id=#<id> -- specifies an idnumber to use in place of the object's actual id (for porting to another MOO)
2
   noprops  -- don't show properties.
2
   noverbs  -- don't show verbs.
2
   create   -- indicates that a @create command should be generated and all of the verbs be introduced with @verb rather than @args; the default assumption is that the object already exists and you're just doing this to have a look at it.
2
1
4
4
2
Syntax:  @set <object>.<prop-name> to <value>
2

2
Changes the value of the specified object's property to the given value.
2
You must have permission to modify the property, either because you own the property or if it is writable.
36
5
4
3
2
*forward*
2
@setprop
2
@set is a valid abbreviation for @setprop.
36
5
4
2
2
*forward*
2
@build-options
36
5
4
2
2
*forward*
2
@build-options
36
5
4
2
2
*forward*
2
@build-options
36
5
4
41
2
Syntax:  @build-option
2
         @build-option <option>
2

2
Synonyms:  @buildoption, @builder-option @builderoption
2

2
The first form displays all of your builder options
2
The second displays just that one option, which may be one of the flags listed below.  The builder options control various annoying details of your building commands (e.g., @create, ...)
2

2
The remaining forms of this command are for setting your programmer options:
2

2
         @build-option create_flags [is] <flags>
2
         @build-option create_flags=<flags>
2
         @build-option -create_flags
2
                      (equivalent to create_flags="")
2

2
where flags is some substring of "rwf".  This option determines the read/write/fertility permissions of an object freshly created with @create or @recreate (see `help @create' and `help @recreate' and `help @chmod').  E.g., to make every object you create henceforth readable by default, do
2

2
         @build-option create_flags=r
2

2
For controlling the behavior of @dig, we have
2

2
         @build-option  dig_room=<room>
2
         @build-option  dig_room [is] <room>
2
         @build-option -dig_room
2
                      (equivalent to dig_room=$room)
2
         @build-option  dig_exit=<exit>
2
         @build-option  dig_exit [is] <exit>
2
         @build-option -dig_exit
2
                      (equivalent to dig_exit=$exit)
2

2
The following respectively set and reset the specified flag option
2

2
         @build-option +<option>
2
         @build-option -<option>
2
         @build-option !<option>           (equivalent to -<option>)
2

2
Currently the only builder flag option available is
2
 -bi_create     @create/@recycle re-use object numbers.
2
 +bi_create     @create/@recycle call create()/recycle() directly 
2

2
we prefer that you not use +bi_create, since this drives up the object numbers.
36
5
4
13
2
*subst*
2
A few different messages can be set on a room object (see 'help messages' for instructions on doing so); they are printed to various audiences when a player or other object is ejected from the room.  (See 'help @eject'.)  The standard pronoun substitutions are made on each message before it is printed; see 'help pronouns' for details.
2

2
The default message is given in brackets after each name below:
2

2
@ejection  [%[$room.ejection_msg]]
2
  Printed to the player doing the ejecting.
2

2
@victim_ejection  [%[$room.victim_ejection_msg]]
2
  Printed to the object being ejected.
2

2
@oejection  [%[$room.oejection_msg]]
2
  Printed to others in the room from which the object is being ejected.
36
5
4
13
2
Syntax: @resident player
2
        @resident !player
2
        @resident
2

2
Adds or removes a player from the residents list of a room.  The residents list controls who is allowed to use @sethome in that room.  This defaults to just the owner of the room; by manipulating the residents list you may allow additional players to use that room as their home.
2

2
@resident player adds that player to the list.  
2
@resident !player removes that player from the list.
2
@resident with no arguments simply displays the current list (which may be "none", indicating no additional people besides the owner may use that room as their home).
2

2
See also help @sethome.
2

2
Hints for programmers: The verb $room:accept_for_abode is called by @sethome.  By overriding this verb you can give different criteria to @sethome.  It should return 1 for allowed and 0 for denied.
36
5
4
22
2
*subst*
2
Several kinds of messages can be set on an exit object (see 'help messages' for instructions on doing so); they are printed to various audiences at certain times whenever an attempt is made to go through the exit.  The ones whose names begin with 'o' are always shown prefixed with the name of the player making the attempt and a single space character.  The standard pronoun substitutions (with respect to the player) are made on each message before it is printed; see 'help pronouns' for details.
2

2
The default message is given in brackets after each name below:
2

2
@leave  [%[$exit.leave_msg]]
2
  Printed to the player just before they successfully use the exit.
2

2
@oleave  [%[$exit.oleave_msg||"has left."]]
2
  Printed to others in the source room when a player successfully uses the exit.
2

2
@arrive  [%[$exit.arrive_msg]]
2
  Printed to the player just after they successfully use the exit.
2

2
@oarrive  [%[$exit.oarrive_msg||"has arrived."]]
2
  Printed to others in the destination room when a player successfully uses the exit.
2

2
@nogo  [%[$exit.nogo_msg||"You can't go that way."]]
2
  Printed to the player when they fail in using the exit.
2

2
@onogo  [%[$exit.onogo_msg]]
2
  Printed to others when a player fails in using the exit.
36
1
4
3
2
Syntax:  @add-entrance <exit-object-number>
2

2
Add the exit with the given object number as a recognized entrance to the current room (that is, one whose use is not considered teleportation).  Usually, @dig does this for you, but it doesn't if you don't own the room in question.  Instead, it tells you the object number of the new exit and you have to find the owner of the room and get them to use the @add-entrance command to link it up.
36
1
4
3
2
Syntax:  @add-exit <exit-object-number>
2

2
Add the exit with the given object number as a conventional exit from the current room (that is, an exit that can be invoked simply by typing its name, like 'east').  Usually, @dig does this for you, but it doesn't if you don't own the room in question.  Instead, it tells you the object number of the new exit and you have to find the owner of the room and get them to use the @add-exit command to link it up.
36
1
4
10
2
The topology of the MOO universe is determined by the rooms that exist and the exits that connect them.  Several commands are available for creating and discovering the topology of the MOO.  Help on them is available under the following topics:
2

2
@dig -- creating new rooms and exits
2
@add-exit -- adding other players' exits from your rooms
2
@add-entrance -- adding other player's entrances to your rooms
2
@remove-exit -- removing exits from your room
2
@remove-entrance -- removing entrances from your room
2
@exits -- listing all of the conventional exits from your rooms
2
@entrances -- listing all of the conventional entrances to your rooms
2
@resident -- listing or changing the residents of your rooms
36
1
4
3
2
Syntax:  @entrances
2

2
Prints a list of all recognized entrances to the current room (but only if you own the room).  A recognized entrance is one whose use is not considered to be teleportation.
36
5
4
3
2
Syntax:  @exits
2

2
Prints a list of all conventional exits from the current room (but only if you own the room).  A conventional exit is one that can be used simply by typing its name, like 'east'.
36
5
4
15
2
Containers are objects that allow you to store other objects inside them.  The following help topics cover verbs that can be used with containers:
2

2
put -- putting an object into a container
2
remove -- taking an object out of a container
2

2
Containers may be open or closed, using the verbs 'open container' and 'close container'.  Containers have a separate lock to determine if a player may open them.  See the following help topics:
2

2
@lock_for_open -- setting the lock for opening a container
2
@unlock_for_open -- clearing the lock
2

2
You can make a container by creating a child of the standard container, $container (see 'help @create').
2

2
Containers have a large number of messages which get printed when players act upon them.  See 'help container-messages' for more information.
2

2
Containers have opacity.  See 'help @opacity' for more information.
36
1
4
1
2
Rooms may be made by builders, using the DIG verb. By default, all rooms are instances of _the_ room, $room, or #3, which you can examine to see how it works. If you require a room to have a more specific behaviour, you can make a subclass of room.
36
1
4
3
2
Syntax:  @remove-entrance <entrance>
2

2
Remove the specified entrance from the current entrances list of the room.  Entrance may be either the name or object number of an entrance to this room.
36
5
4
3
2
Syntax:  @remove-exit <exit>
2

2
Remove the specified exit from the current exits list of the room.  Exit may be either the name or object number of an exit from this room.
36
5
4
6
2
Syntax:
2
  @unlock_for_open <container>
2

2
Clears the lock which restricts who may open <container>.  See 'help locking' for general information about locking. 
2

2
See 'help containers' for information on containers.
36
5
4
6
2
Syntax:
2
  @lock_for_open <container> with <key expression>
2

2
Set the lock on <container> which restricts who can open it.  See 'help locking' for general information about locking and 'help keys' for the syntax and semantics of key expressions.
2

2
See 'help containers' for information on containers.
36
5
4
9
2
Syntax:
2
  @opacity <container> is <integer>
2

2
The opacity can take on one of three values:
2
   0:  The container is transparent and you can always see into it.
2
   1:  The container is opaque, and you cannot see into it when closed
2
   2:  The container is a black hole, and you can never see into it whether closed or open.  
2

2
The default @opacity is 1.
36
5
4
49
2
*subst*
2
Several kinds of messages can be set on a container object; they are printed to various audiences at certain times whenever an attempt is made to use the container.  The ones whose names begin with 'o' are always shown prefixed with the name of the player making the attempt and a single space character.  The standard pronoun substitutions (with respect to the player) are made on each message before it is printed; see 'help pronouns' for details.
2

2
The default message is given in brackets after each name below:
2

2
@empty[%[$container.empty_msg]]
2
  Printed in place of the contents list when the container is empty.
2

2
@open  [%[$container.open_msg]]
2
  Printed to the player who successfully opens the container.
2

2
@oopen  [%[$container.oopen_msg]]
2
  Printed to others in the same room if the player successfully opens the container.
2

2
@open_fail  [%[$container.open_fail_msg]]
2
  Printed to the player who cannot open the container.
2

2
@oopen_fail  [%[$container.oopen_fail_msg]]
2
  Printed to others in the room when a player fails to open a container.
2

2
@close  [%[$container.close_msg]]
2
  Printed to the player who closes a container.
2

2
@oclose  [%[$container.oclose_msg]]
2
  Printed to others in the room when a player closes a container.
2

2
@put  [%[$container.put_msg]]
2
  Printed to a player when an object is successfully placed in a container.
2

2
@oput  [%[$container.oput_msg]]
2
  Printed to others in the room when a player successfully places an object in a container.
2

2
@put_fail  [%[$container.put_fail_msg]]
2
  Printed when a player fails to put an object in a container.
2

2
@oput_fail  [%[$container.oput_fail_msg]]
2
  Printed to others in the room when a player fails to place an object in a container.
2

2
@remove  [%[$container.remove_msg]]
2
  Printed when a player succeeds in removing an object from a container.
2

2
@oremove  [%[$container.oremove_msg]]
2
  Printed to others in the room when a player succeeds in removing an object from a container.
2

2
@remove_fail  [%[$container.remove_fail_msg]]
2
  Printed when a player fails to remove an object from a container.
2

2
@oremove_fail  [%[$container.oremove_fail_msg]]
2
  Printed to others in the room when a player fails to remove an object from a container.
36
5
4
28
2
*subst*
2
Several kinds of messages can be set on 'things', objects that have $thing as an ancestor (see 'help messages' for instructions on doing so).  They are printed to various audiences under various circumstances when an attempt is made to 'take' or 'drop' a thing.  The ones whose names begin with 'o' are always shown prefixed with the name of the player making the attempt and a single space character.  The standard pronoun substitutions (with respect to the player) are made on each message before it is printed; see 'help pronouns' for details.
2

2
The default message is given in brackets after each name below:
2

2
@take_failed  [%[$thing.take_failed_msg]]
2
  Printed to a player who fails to take the object.
2

2
@otake_failed [%[$thing.otake_failed_msg]]
2
  Printed to others in the same room if a player fails to take the object.
2

2
@take_succeeded  [%[$thing.take_succeeded_msg]]
2
  Printed to a player who succeeds in taking the object.
2

2
@otake_succeeded  [%[$thing.otake_succeeded_msg]]
2
  Printed to others in the same room if a player succeeds in taking the object.
2

2
@drop_failed  [%[$thing.drop_failed_msg]]
2
  Printed to a player who fails to drop the object.
2

2
@odrop_failed [%[$thing.odrop_failed_msg]]
2
  Printed to others in the same room if a player fails to drop the object.
2

2
@drop_succeeded  [%[$thing.drop_succeeded_msg]]
2
  Printed to a player who succeeds in dropping the object.
2

2
@odrop_succeeded  [%[$thing.odrop_succeeded_msg]]
2
  Printed to others in the room if a player succeeds in dropping the object.
36
1
4
7
2
Syntax:  @quota
2

2
Each player has a limit as to how many objects that player may create, called their 'quota'.  Every object they create lowers the quota by one and every object they recycle increases it by one.  If the quota goes to zero, then that player may not create any more objects (unless, of course, they recycle some first).
2

2
The @quota command prints out your current quota.
2

2
The quota mechanism is intended to solve a long-standing problem in many MUDs: database bloat.  The problem is that a large number of people build a large number of dull objects and areas that are subsequently never used or visited.  The database becomes quite large and difficult to manage without getting substantially more interesting.  With the quota system, we can make it possible for players to experiment and learn while simultaneously keeping random building to acceptable levels.
2
1
4
4
2
*forward*
2
common_quota
2

2
To get a larger quota, talk to a wizard.  They will take a look at what you've done with the objects you've built so far and make a determination about whether or not it would be a net gain for the MOO community if you were to build some more things.  If so, they will increase your quota; if not, they will try to explain some ways in which you could build things that were more useful, entertaining, or otherwise interesting to other players.  Wizards may be more impressed by objects which are interactive and employ a fair number of verbs.
36
5
4
18
2
Syntax:
2
  @measure object <object name>
2
  @measure summary [player]
2
  @measure new [player]
2
  @measure breakdown <object name>
2
  @measure recent [number of days] [player]
2

2
When the MOO is under byte-quota, objects in the MOO are measured approximately once a week, and the usage tally as reported by @quota is updated.  You may wish to measure an object specially, however, without waiting for the automatic measurement to take place, or if the MOO is under object-quota.  @measure has some subcommands to handle this.
2

2
@measure object will measure an individual object right now, update the usage of that object in your usage as reported by @quota, and update the date of that object's measurement.
2

2
@measure summary will go through your or another player's objects and produce the summary information that is printed by @quota.  Normally this will be just the same as @quota prints out, but occasionally the addition/subtraction done to keep @quota in sync will get out of date, and @measure summary will be needed.
2

2
@measure new will go through all your or another player's objects, measuring exactly those which have never been measured before (that is, are too newly @created to have any measurement data).  This is necessary as any player is only permitted to own 10 unmeasured objects, or object creation will not be permitted.
2

2
@measure breakdown will give you full information on where an object's size is coming from.  It will offer to moomail you the result.  Caution: don't forget to delete this message, as it is large and takes up a lot of space!
2

2
@measure recent will let you re-measure objects of yours or another player's which have not been measured in the specified number of days (the default is the ordinary cycle of the measurement task).
36
5
4
7
2
Usage:  @build-option [+|-|!]audit_bytes
2
Lets you see the actual bytes of small objects in @audit and @prospectus.  Ignored if `audit_float' is turned on.
2

2
  -audit_bytes     @audit/@prospectus shows `<1K'
2
  +audit_bytes     @audit/@prospectus shows bytes.
2

2
Default: -audit_bytes
2
1
4
7
2
Usage: @build-option [+|-|!]audit_float
2
Lets you see object sizes in @audit and @prospectus as floating point numbers to one decimal place.
2

2
  -audit_float     @audit/@prospectus shows integer sizes (1K)
2
  +audit_float     @audit/@prospectus shows floating-point sizes (1.2K)
2

2
Default: -audit_float
2
1
5
36
5
4
1
2
builder-index
36
1
0
0
36
4
4
2
2
Builder Help DB
2
BHD
36
5
2
This help database contains topics about the generic builder and building commands.
36
5
4
2
0
39390
0
1084848672
36
1
#85
Mail Commands Help Db

16
36
-1
-1
-1
30
-1
92
0
39
mail-index
@mailoptions
@mail-options
mail-forwarding
@forward
@subscribe
@rn
@unsubscribe
@skip
zombie-messages
message-sequences
@unrmmail
@reply
@renumber
@prev
@next
@answer
@rmmail
@read
@send
mail
@mail
@peek
@subscribed
@netforward
@keep-mail
@keepmail
@resend
@qsend
@qreply
@quickreply
@quicksend
@nn
@mail-all-new-mail
@read-all-new-mail
@refile
@copymail
@add-notify
@unsend
45
4
2
2
*index*
2
Mail System Help Topics
36
5
4
2
2
*forward*
2
@mail-options
36
1
4
103
2
Syntax:  @mail-option
2
         @mail-option <option>
2

2
Synonym:  @mailoption
2

2
The first form displays all of your mail options
2
The second displays just that one option, which may be either `@mail', `replyto', or one of the flags listed below.  The mail options control various annoying details of your mail reading and mail editing commands.
2

2
The remaining forms of this command are for setting your mail options:
2

2
         @mail-option +<flag>
2
         @mail-option -<flag>
2
         @mail-option !<flag>           (equivalent to -<flag>)
2

2
These respectively set and reset the specified flag
2

2
 -include          @replys start out with a blank message body
2
 +include          @replys start with original message included
2
 -all              @replys go to sender only
2
 +all              @replys go to sender and all original recipients
2
 -followup         @replys go as directed by `all' flag
2
 +followup         @replys go to first nonplayer recipient if any
2
                    (if there are no non-player recipients, use `all' flag).
2
 -nosubject        @send forces you to provide a Subject: line
2
 +nosubject        allow entering the mail editor without giving a subject line
2
 -expert           novice mail user (various annoying messages will be printed)
2
 +expert           expert mail user (suppress printing of annoying messages)
2
 -enter            start each mail editing session in the usual command mode.
2
 +enter            start each mail editing session with an implicit `enter'
2
                    command
2
 -sticky           each mail command applies by default to one's own collection
2
 +sticky           each mail command applies by default to the same message 
2
                    collection that the previous successful command did
2
 -netmail          mail to you accumulates in your MOO mailbox
2
 +netmail          mail to you is actually forwarded to your registered email
2
                    address, if you have one.
2
 -resend_forw      @resend puts player in Resent-By: header
2
 +resend_forw      @resend puts player in From: header (like @forward)
2
 -no_auto_forward  @netforward when expiring messages
2
 +no_auto_forward  do not @netforward messages when expiring mail
2
 -expert_netfwd    @netforward confirms before emailing messages
2
 +expert_netfwd    @netforward doesn't confirm before emailing messages
2
 -no_dupcc         send a personal copy even if already subscribed to a 
2
                    mailing list on the to: line
2
 +no_dupcc         don't send personal copies of mail also sent to lists
2
                    you are subscribed to
2
 -no_unsend        People may @unsend unread messages they send to you
2
 +no_unsend        No one may @unsend messages they sent to you
2

2
For "sticky", `mail command' is one of @mail, @read, @prev, @next, @answer.
2
All flags default to the `-' settings.  
2

2
Next, we have
2

2
         @mail-option  manymsgs [is] <number>
2
         @mail-option  manymsgs=<number>
2
         @mail-option -manymsgs
2

2
The first two forms specify that if you give a @mail or @read command asking for <number> or more messages, you will first be given a yes-or-no prompt to continue, the idea being that you many not actually have wanted to see that many messages.  The third form turns off this behavior.
2

2
         @mail-option  @mail [is] <message-sequence>
2

2
The "@mail" option determines what message-sequence the @mail command uses by 
2
default.  Initially, this is "last:15", but other reasonable choices include
2
"new" and "1-last"
2

2
         @mail-option  replyto [is] <recipient> [<recipient>...]
2
         @mail-option -replyto
2

2
The first form specifies that a Reply-To: field is to be placed in all messages constructed by @send or @answer.  Note this can still be changed before sending via the mail room's reply-to command.  
2
The second form resets this option so that no Reply-to: is initially inserted.
2

2
        @mail-option rn_order=<order>
2

2
controls the order in which folders listed by @rn and @subscribed will appear.  <order> can be one of
2

2
 read    folders are sorted by last read date. (default)
2
 send    folders are sorted by last send date.
2
 fixed   folders are not sorted
2

2
To control expiration of messages (see `help @keep-mail') we have
2

2
        @mail-option expire [is] <time-interval>
2
        @mail-option expire=<time-interval>
2

2
<time-interval> can either be a number of seconds or something with units in it, e.g.,
2

2
        @mail-option expire 13 days
2
        @mail-option expire 1 year 39 days
2

2
A negative number or
2

2
        @mail-option +expire
2

2
disables message expiration entirely
2

2
        @mail-option -expire
2

2
sets your message expiration time to the current default.
2

2
        @mail-option @unsend=<message sequence>
2

2
sets the default message sequence that the @unsend command will operate upon.  The default is "last:1".
36
5
4
30
2
There are 3 personal properties that you can use to customize how your mail is composed and forwarded
2

2
.mail_forward 
2
 -- list of objects that will receive any mail that gets sent to you.
2
    Objects on this list should either be players or descendants of 
2
    $mail_recipient.
2
    If this list is nonempty, you will not receive any mail yourself unless
2
    you are on it.  E.g., if Rog is #4292 and ur-Rog is #6349
2

2
  #6349.mail_forward={}            -- usual case; ur-Rog gets his own mail.
2
  #6349.mail_forward={#4292}       -- Rog gets ur-Rog's mail instead.
2
  #6349.mail_forward={#6349,#4292} -- ur-Rog gets mail and Rog gets a copy.
2
  #6349.mail_forward={#-1}         -- ur-Rog's mail disappears without a trace.
2

2
.mail_notify
2
 -- list of objects to be notified whenever mail is sent to you.
2
    This list may include anything that has a :notify_mail() verb.
2
    Notification will take place regardless of whether or how your mail
2
    is forwarded.  
2

2
Thus, in the previous example
2

2
  #4292.mail_notify={#6349} --- means that ur-Rog will be told
2
                                whenever Rog is sent new mail.
2

2
.mail_options
2
 -- this controls lots of miscellaneous things.  Use the @mail-option command
2
    to view and set these options (see `help @mail-option')
2

2
See `help mail-resolve' for more detail on how mail forwarding and mail notification work.  See `help MR-subscribing' for information on how to change .mail_forward and .mail_notify on $mail_recipient children, where they are !c properties.
36
5
4
18
2
Syntax:  @forward <msg> [on *<collection>] to <recipient> [<recipient>...]
2
Syntax:  @resend  <msg> [on *<collection>] to <recipient> [<recipient>...]
2

2
Both of these commands take the indicated message in your (or some other) message collection, and sends it on to the indicated recipients in some form.
2

2
@forward sends an entirely new message whose body is the original message (both headers and body).
2
@resend sends the original message, but with a header containing the lines
2

2
  From:  original-sender
2
  To:    original-recipients...
2
  Resent-By: you
2
  Resent-To: new-recipients...
2

2
If you prefer to have yourself in the From: line of messages you @resend, set the mail option `resend_forw (see `help @mail-options').  In this case, the message will instead have a header containing the lines
2

2
  From:  you
2
  To:    new-recipients...
2
  Original-From:  original-sender
36
5
4
22
2
Syntax:  @subscribe *<collection> [with|without notification] [before|after *<collection>]
2
         @subscribe
2
         @subscribe-quick
2

2
The second and third form of the command gives a list of all mail collections that are readable by you. The third form omits the mail collection description.
2

2
The first form of this command sets up a current message and a last-read-time for the given mail collection so that when you next log in or issue the @rn command, you will be informed about new mail that has appeared there.  Note that this happens automatically whenever you @read messages on a given collection, so if this much is all you care about, you don't need to use this command; just do, e.g.,
2
         @read last on *<collection>
2

2
Specifying "with notification" causes you to be added to the immediate-notification list (.mail_notify) for that collection, i.e., whenever new mail arrives there, you will be notified immediately.  Specifying "without notification" causes you to be removed from the collection's .mail_notify.
2

2
Specifying "before *<other-collection>" causes <collection> to be placed immediately before *<collection> in your @rn listing (which see) and likewise for the "after" clause.  By default, new collections are placed at the end of your list.  The before/after specification is only useful if you have @mail-option rn_order=fixed set (see `help @mail-options').
2

2
@subscribing to a collection for which you already have a current-message/last-read-time has no effect other from possibly changing that collection's .mail_notify and/or reordering your collections for @rn.
2

2
You can only @subscribe to collections that are readable by you.
2

2
Note that this is entirely different from the Mail Room `subscribe' command
2
which actually adds you to the .mail_forward list for a given collection/
2
mailing-list, so that mail sent to the list actually shows up in your own
2
mail collection.
2
We're probably going to phase out the Mail Room `subscribe' command...
36
5
4
5
2
Syntax:  @rn
2

2
For each collection of mail messages that you read other from your own, a last-read-time is kept.  This command tells you which collections (out of all those you have ever read) have recently had messages added to them, i.e., more recently than when you last did a @read, @prev, @next, or @skip on that collection.
2

2
Etymologists' note:  If you thought @rn had anything to do with the popular UNIX newsreading program `rn', it's just your imagination.
36
5
4
2
2
*forward*
2
@skip
36
5
4
8
2
Syntax:  @skip [<collection>...]
2
         @unsubscribe [<collection>...]
2

2
For each collection of mail messages that you read other from your own, a current message and a last-read-time is kept.  Normally, if you neglect to actually @read any messages on a collection other from your own, @rn (or :check_mail_lists) will continue to remind you that they are there.
2

2
The @skip command indicates that you're not interested in reading the rest of the messages that currently exist in that given collection.  
2

2
The @unsubscribe command flushes the current-message/last-read-time information completely, indicating that you are not only uninterested in the rest of the messages on that collection, but also likewise uninterested in anything else that may appear on that collection later on.  @unsubscribe also removes you from the collection's .mail_notify list.
36
5
4
2
2
*forward*
2
@unrmmail
36
5
4
55
2
Certain mail commands, including @mail, @read, and @rmmail, allow a <message-sequence> argument that indicates to which messages in one's collection the command is to apply.  Any combination of the following may appear as a <message-sequence> argument to any of the various mail commands (@mail, @read, @answer, @rmm).
2

2
  17        message number 17 if there is one (and likewise for other integers)
2
  17..23    all messages numbered between 17 and 23 (inclusive), if any.
2
  cur       the current message
2
  prev      the message before
2
  next      the message after
2
  prev17    the 17 messages prior to the current message
2
  next17    the 17 messages after the current message
2
  first     the first message if any
2
  last      the final message if any (`$' is a synonym for `last')
2
  new       unread messages if any
2

2
You may use as many of these at once as sanity permits, e.g.,
2

2
  @mail cur 1..5 last
2

2
which will display the header for your current message, your messages in the range 1..5, and your last message.  Though some of these ranges may overlap, the header for any given message is only shown once in any event.
2

2
In addition, there are other message-sequence arguments that act as filters on whatever precedes them. 
2

2
 before:<date>               messages strictly before the given date
2
 after:<date>                messages strictly after the given date
2
 since:<date>                messages on or after the given date
2
 until:<date>                messages on or before the given date
2
 from:<player>[|<player...]  messages from the given player(s)
2
 to:<recip>[|<recip>...]     messages to the given recipient(s)
2
 %from:<string>              messages with <string> in the From: line
2
 %to:<string>                messages with <string> in the To: line
2
 subject:<string>            messages with <string> in the subject
2
 body:<string>               messages with <string> in the body (SLOW!!!)
2
 first:<number>              the first <number> messages
2
 last:<number>               the last <number> messages
2
 kept:                       messages marked as kept (see `help @keep-mail')
2
 unkept:                     messages not marked as kept
2

2
<date>  is either a weekday, "today", "yesterday", or
2
        a dd-Month, dd-Month-yy or dd-Month-yyyy date
2
<recip> is either <player> or *<$mail_recipient kid>
2

2
Examples:
2

2
  @read from:G7|Gemba              read all messages from G7 or Gemba
2
  @rmm to:yduJ|*Core               remove messages that are to yduJ or to *Core
2
  @mail since:1-Jan before:1-Feb   show messages dated in January
2
  @mail since:Tues                 show messages dated on or after Tuesday
2
  @rmm subject:manners             remove msgs with `manners' in the subject:
2
  @mail subject:"stupid idiots"    (search string contains a space => need "'s)
2
  @rmm to:yduJ to:*Core            remove messages that are to yduJ and *Core
2
  @mail from:Haakon last:5         show the last 5 messages from Haakon
2
  @mail %from:guest                show mail from players with "guest" in
2
                                   their names
2
  @mail last:10 body:fribble       show those of the last 10 messages having
2
                                   `fribble' in the body (one should always try
2
                                   to narrow body searches in this way).
36
1
4
13
2
Syntax:  @unrmmail [list|expunge] [on *<collection>]
2

2
When you do @rmmail on a particular message collection, the messages removed don't go away immediately, but are rather saved elsewhere.  These "zombie" messages can be brought back or examined using the @UNrmmail command.
2

2
Without `list' or `expunge', @unrmm restores the zombie messages, thus undoing the effect of the most recent @rmmail command.  Only the most recent @rmmail can be undone in this way; messages deleted by any previous @rmmail commands on this same collection are lost and gone forever.
2

2
The `list' option merely lists the headers of the zombie messages without actually restoring them.
2

2
The `expunge' option banishes the zombie messages forever.
2

2
Note that the message numbers used by zombie messages are held in reserve against the possibility that you might @unrmm them some day; with such messages around, new messages received will be given higher numbers than you might have expected.  @renumber does an implicit @unrmm expunge.
2

2
`@unrmmail' and `@unrmmail expunge' on collections other than your own are only allowed when you have write access.  Likewise, `@unrmmail list' on other collections is only possible when they are readable by you.
36
5
4
2
2
*forward*
2
@answer
36
5
4
5
2
Syntax:  @renumber [<collection>]
2

2
Renumbers the messages in your collection to go from 1 to however many you have at the moment.  The optional argument allows you to renumber the messages stored in some other collection (@renumber, like @rmmail, requires write access).
2

2
Note that if you have zombie messages from a previous @rmmail command (see `help zombie-messages'), these will be expunged.
36
5
4
3
2
Syntax:  @prev [<number>] [on <collection>]
2

2
Print the 'previous' message in a given email collection (defaults to your own).  The mail system's notion of your 'current message' for that collection is decremented.  Thus, e.g., one can review all of one's previous messages one-by-one simply by typing '@prev' repeatedly.  If <number> is supplied, print (and decrement current message by) that many messages.
36
5
4
3
2
Syntax:  @next [<number>] [on <collection>]
2

2
Print the `next' message in a given email collection (defaults to your own).  The mail system's notion of your 'current message' for that collection is incremented.  Thus, e.g., one can read all of one's new messages one-by-one simply by typing '@next' repeatedly.  If <number> is supplied, prints and advances that many messages.
36
1
4
17
2
Syntax:  @answer [<message-number>] [sender] [all] [include] [noinclude] [followup]
2

2
Synonym: @reply
2

2
Prepares for you to compose a MOO email message to the players who either received or composed the indicated message from your collection.  The usual editor is invoked (see `help editors' for details).  The subject line for the new message will be initialized from that of the indicated message.  If you leave off the message number, the reply will be to your current message, if that exists.  In fact you may give a general message-sequence (see `help message-sequences') argument here, provided that it indicates only a single message (e.g., `@answer last:1')
2

2
If there is a Reply-to: field in the message you are @answer'ing, its contents will be used to initialize the To: line of your reply.  Otherwise, a To: line is determined depending on whether you specified `sender', `all', or `followup' in the command line (or your .mail_options).
2
  `sender'   replies to sender only
2
  `all'      replies to sender and all original recipients
2
  `followup' replies to first original recipient that is a non-player
2
             (no effect if there are no non-player recipients).
2

2
`include' includes the text of the original message in your reply, `noinclude' does not.  
2

2
`sender', `all', `followup', `include', and `noinclude' can all be abbreviated (e.g., `@answer i').
2

2
Defaults are `sender' and `noinclude', but you can change this by setting your .mail-options (see `help mail-options').  
36
5
4
12
2
Syntax:  @rmmail [<message-sequence>] [from *<recipient>]
2

2
Deletes the indicated messages from your MOO email collection.
2
By default, your current message is deleted.
2
See `help message-sequence' for the full list of possible arguments.
2
You get the message numbers for use here by typing the '@mail' command.
2

2
There is no confirmation for this action, so be careful.  While it is true that @unrmmail will be able to bring back the messages deleted by the last @rmm, any messages deleted before then are really gone, i.e., irrecoverable.  See `help @unrmmail' for more information.
2

2
This command may be used on other mail recipients (children of $mail_recipient), but only ones to which you have write access (you either have to own it or be on good terms with whoever does...).
2

2
You can try to delete messages that you accidentally sent to a person with the command @unsend (see `help @unsend').  Note there are restrictions on the operation, so it often will not work.
36
5
4
14
2
Syntax:  @read <message-number>
2
         @read
2
         @peek ...
2

2
Prints the contents of the indiciated messages from your MOO email collection.  You get the message numbers for use here by typing the '@mail' command, which prints a table of contents for your entire MOO email collection.  If no arguments are given to @read, then the 'current message' in your collection is printed.  In any case, the 'current message' after @read finishes is the last one printed.
2

2
The most general form of the @read command is
2

2
         @read <message-sequence> [on *<collection>]  
2

2
where <message-sequence> is as described in `help message-sequences'.
2
As with the @mail command you may @read messages on any publically readable collection (child of $mail_recipient).
2

2
The @peek command is a variant of @read that works no differently except that it refrains from setting your `current message'.  This is useful, for example, if you want to see some particular message on a collection without losing track of where you are in it.
36
5
4
10
2
Syntax:  @send <recipient> [<recipient> ...]  [subj[ect]="<subject>"]
2

2
Prepares for you to compose a MOO email message to the recipients named on the command line.  A recipient can be specified by giving a player name or object-id, or a '*' followed by the name or object-id of some non-player mail recipient (e.g., a mailing list or a mail folder) -- a list of such non-player recipients is available from within the mailroom with the 'showlists' command.
2

2
The usual editor is invoked.   
2
You will be prompted for a subject line if you did not specify one in the @send command (see `help mail_options' for how to avoid this).
2
Use `say' (") to insert lines in the body of your message.  
2
See `help editors' for details.
2

2
Giving this command without arguments resumes editing the previous unsent draft message if one exists.
36
5
4
35
2
The MOO email system allows you to send and receive messages to and from other players.  It provides commands to view and manage your own collection of saved messages and, in addition, to browse through other collections that may be available (e.g.,archives of public mailing lists).  Help is available on the following commands:
2

2
@mail     -- seeing a table of contents for a collection of email messages
2
@read     -- reading individual messages 
2
@next     -- reading the 'next'     message
2
@prev     -- reading the 'previous' message
2

2
@send     -- composing and sending a message to other players
2
@answer   -- replying to one of the messages in a collection
2
@forward  -- resending one of the messages in a collection somewhere else
2

2
@rmmail   -- discarding some subset of a collection
2
@unrmmail -- undoing the most recent @rmm on a collection
2
@unsend   -- try to remove a message you accidentally sent
2
@renumber -- renumbering the messages in a collection
2
@keep-mail - marking messages in a collection as exempt from expiration
2

2
@mail-option -- describes and sets various customization flags
2

2
help mail-forwarding
2
 -- describes mail forwarding
2
help message-sequences
2
 -- describes message-sequences arguments to @mail, @read, @rmm, and @answer.
2

2
For viewing collections other from your own, the following commands are useful:
2

2
@rn          -- list those collections that have new messages on them
2
@subscribe   -- indicate that you want @rn to report on a given collection
2
                  and add yourself to its .mail_notify list
2
@skip        -- ignore any remaining new messages in a given collection
2
@unsubscribe -- ignore a given collection entirely from now on
2
                  and remove yourself from its .mail_notify list
2
@unsubscribed-- show the mailing lists that you aren't subscribed to.
2
@subscribed  -- like @rn, but shows all lists that you are subscribed to
2
                even if they have no new activity
36
5
4
16
2
Syntax:  @mail
2
         @mail new            (to see recent messages)
2
         @mail 1-$            (to see *all* messages)
2

2
Shows a table of contents for your MOO email message collection.  You are notified when you connect to the MOO if there are any such messages.  A little arrow indicates the mail system's notion of your 'current message'.  
2
The first form lists all of your messages or the last 15 if you have more than that many; the second form lists only those messages after your `current message'.  The third form shows your entire collection.
2

2
If you have a large number of mail messages, you can give arguments so that @mail only lists the messages you're interested in.  You can also list messages residing on mail recipients which are public or for which you have read access.
2
The general format is
2

2
         @mail <message-sequence> [on *<recipient>]
2

2
<recipient> must name some child of $mail_recipient (e.g., a mailing list);
2
<message-sequence> can be a sequence of message numbers; you can also scan the recipient for articles that fit a given description, as specified in `help message-sequences'.
2

2
Note that if you view mail on some other recipient and have "sticky" in your .mail_options (see `help mail-options'), all further mail commands (e.g., @read, @next, @rmm,...) will apply to that recipient.  In this case use `@mail on me' to go back to looking at your own mail.
36
1
4
2
2
*forward*
2
@read
36
5
4
3
2
Syntax: @subscribed
2

2
Like @rn, but shows you ALL mailing lists to which you are subscribed, even those which have no new messages.
36
5
4
16
2
Syntax:  @netforward <message-number>
2
         @netforward 
2
         @netforward <message-sequence> on *collection
2

2
Forwards the contents of the indiciated messages from your MOO email collection to your registered email address.  You get the message numbers for use here by typing the '@mail' command, which prints a table of contents for your entire MOO email collection.  If no arguments are given to @netforward, then the 'current message' in your collection is sent.  In any case, the 'current message' after @netforward finishes is not affected.
2

2
The most general form of the @netforward command is
2

2
         @netforward <message-sequence> [on *<collection>]
2

2
where <message-sequence> is as described in `help message-sequences'.
2
As with the @mail command you may @netforward messages on any publically readable collection (child of $mail_recipient).
2

2
Before messages are sent, you are asked to confirm the email unless you have set your `expert_netfwd' mail option on.  See `help @mail-options' for details.
2

2
If you do not have a valid registered email address, you will not be able to use this command and must first @registerme or get a wizard to register your address. `help @registerme' for details.
36
5
4
25
2
Syntax:  @keep-mail [<message-sequence>]
2
         @keep-mail none
2

2
Synonym: @keepmail
2

2
As a space-saving measure, there is a task that runs periodically and from all player collections removes those messages that are
2
  (1) marked as read (i.e., dated before the last-read-date), 
2
  (2) older than a certain expire time, and
2
  (3) not specifically marked as "kept".
2

2
"kept" messages will show up in your @mail listing with an `=' to the right of the message number.
2

2
The first form of the @keep-mail command marks the indicated messages as kept.  The message-sequence argument is as with other mail commands (see `help message-sequences').  @keep-mail without any arguments marks your current message as kept.
2

2
The second form of the command is used to remove all such marks from your mail collection.
2

2
    @mail kept:
2

2
will produce a list of all messages marked as kept (see `help message-sequences').
2

2
You can use @mail-option expire (see `help @mail-option') to change your expire time.
2

2
You can use the @netforward command (see `help @netforward') to send mail to your email address for local archival.
2

2
[...At the time of this writing, player mail is taking up a large fraction of LambdaMOO's database.  It would be appreciated if you not @keep any more mail than you have to...]
36
5
4
2
2
*forward*
2
@keep-mail
36
5
4
2
2
*forward*
2
@forward
36
5
4
2
2
*forward*
2
@quicksend
36
5
4
2
2
*forward*
2
@quickreply
36
5
4
6
2
Syntax:   @quickreply  <msg> [on *<recipient>] [<flags>...]
2
          @quickreply  <msg> [<flags>...] [on *<recipient>] 
2

2
Synonym:  @qreply
2

2
The @quickreply command allows you to do a short reply to a mail message without heading for the mail room.  As with @reply, the subject line on the reply message is taken from the original.  <flags> are as with @reply, except that `include' is not recognized --- if you're going to include the original message, you *have* to trim it down, and that requires the editor.
36
5
4
6
2
Syntax:   @quicksend <player> [subj="<text>"] <one-line-message>...
2
          @quicksend <player> [subj="<text>"]
2

2
Synonym:  @qsend
2

2
The @quicksend command allows you to send a short mail message without heading for the mail room.  With the second form of the command you will be prompted for the body of the message (and a subject line unless your `nosubject' mailoption is set (see `help @mail-option') or you already gave a subject line).
36
5
4
15
2
Alternative mail reading commands.
2

2
Syntax:  @nn
2

2
This command finds a folder containing an unread message, displays the first such, and updates your last-read-time for that folder.  Your personal mail and all @subscribed folders are checked.
2

2
Syntax:  @mail-all-new-mail
2

2
Displays headers of all unread messages on all of your folders (i.e., your personal folder and all @subscribed folders).
2

2
Syntax:  @read-all-new-mail
2

2
Displays all unread messages on all of your folders (i.e., your personal folder and all @subscribed folders).  This command ends with a prompt, "Did you get all of that? [Enter `yes' or `no']."  Answering "yes" causes all of your last-read times to be updated.  You will probably want to check for <<<n lines flushed>>> indications before you answer this question.
2

2
@read-all-new-mail (with a "yes" answer at the end) is equivalent to doing a large number of @nn's.
36
5
4
2
2
*forward*
2
@nn
36
5
4
2
2
*forward*
2
@nn
36
5
4
6
2
Syntax:  @refile <message-seq> [on mail-recipient] to mail-recipient
2
         @copymail <message-seq> [on mail-recipient] to mail-recipient
2

2
Moves a message sequence directly from one mail recipient (defaulting as per the sticky @mail-option) to another, without adding headers or reordering.
2

2
NOTE:  The recipient of @refiled messages may well have its mail out of order.  This can confuse a variety of features of the mail system, which expects its messages to always be in chronological order.  Care should be exercised with @refile/@copymail.
36
5
4
2
2
*forward*
2
@refile
36
5
4
6
2
Usage:  @add-notify me to player
2
    Sends mail to player saying that I want to be added to their mail notification property.
2
Usage:  @add-notify player to me
2
    Makes sure that player wants to be notified, if so, adds them to my .mail_notify property.
2

2
In order for one person to be notified that another person has new mail, both the mail recipient and the notification recipient should agree that this is an OK transfer of information.  This verb facilitates that transaction.
36
5
4
17
2
The @unsend command was created by ballot on LambdaMOO, *B:Unsend (#77081).
2

2
Syntax: @unsend [message-sequence] from <user>
2

2
A message cannot be unsent to a player if e has read the message, it has been forwarded to eir e-mail address, or e has set an option to prevent messages being unsent to em.  A message cannot be unsent to a group of players unless it can be unsent to each player in the group.
2

2
The unsender may not view a list of unread messages on a player.  E may only select the message(s) to be unsent by filters such as "subject:<subject>" or "since:today".
2

2
In order to protect privacy, if any of the restrictions above, such as one of the users having already read the message, are not met, the error message will be quite generic and not tell you exactly what went wrong, but simply that messages could not be unsent.
2

2
The following mail options are available:
2

2
@mail-option +no_unsend      No one may @unsend messages they sent to you
2
@mail-option -no_unsend      People may @unsend unread messages they send to you
2
@mail-option @unsend=<message sequence>
2

2
sets the default message sequence that the @unsend command will operate upon.  The default is "last:1".
36
5
5
36
5
4
1
2
mail-index
36
1
0
0
36
4
4
1
2
Mail Commands Help Db
36
5
2
This help database contains topics relating to the general use of the mail system.
36
5
4
2
0
36642
0
1084848672
36
1
#86
FTP utilities

16
2
-1
-1
-1
1
-1
30
16
open
2
173
-1
close
2
173
-1
do_command
2
173
-1
wait_for_response
2
173
-1
controls
2
173
-1
get_messages
2
173
-1
open_data
2
173
-1
get_data
2
173
-1
put_data
2
173
-1
trusted
2
173
-1
listen
2
173
-1
close_data
2
173
-1
get
2
173
-1
init_for_core
2
173
-1
put
2
173
-1
data_connection
2
173
-1
3
trusted
port
connections
7
0
1
2
5
0
21
2
5
4
0
2
0
0
0
2
4
4
1
2
FTP utilities
2
5
5
2
5
4
2
0
9099
0
1084848672
36
1
#87
password verifier

16
2
-1
-1
-1
5
-1
97
13
help_msg
36
173
-1
reject_password
2
173
-1
trivial_check
36
173
-1
check_length
36
173
-1
check_name
36
173
-1
check_email
2
173
-1
check_hosts
2
173
-1
check_dictionary
36
173
-1
check_for_funky_characters
36
173
-1
check_against_moo
36
173
-1
_is_funky_case
36
173
-1
check_obscure_combinations
36
173
-1
init_for_core
2
173
-1
9
minimum_password_length
check_against_name
check_against_email
check_against_hosts
check_against_dictionary
require_funky_characters
help_msg
check_against_moo
check_obscure_stuff
21
0
0
2
1
0
0
2
1
0
0
2
1
0
0
2
1
0
0
2
1
0
0
2
1
4
8
2
Password Verifier
2
==================
2

2
To check for the validity of a password, use
2
  :reject_password( password [, for-whom? ] )
2
... If it returns a true value, that value will contain the string representing the reason why the password was rejected.  If it returns a false value, the password is OK.
2

2
The toggle switches for this checking are:
36
1
0
0
2
1
0
0
2
1
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
0
0
2
4
4
4
2
password verifier
2
password
2
verifier
2
pwd
2
5
2
The password verifier verifies passwords.
2
5
4
2
0
10921
0
1084848672
36
1
#88
Frand's player class

144
36
-1
-1
-1
40
31
38
80
@rooms
36
13
-1
names_of
36
173
-1
@go
36
29
-1
lookup_room
36
173
-1
teleport
2
173
-1
teleport_messages
36
173
-1
@move
36
93
-2
index_room
36
173
-1
@addr*oom
36
29
-1
@rmr*oom
36
29
-1
@join
36
29
-1
@find
36
29
-1
find_verb
36
173
-1
@ways
36
29
-1
findexits
36
173
-1
checkexits
36
173
-1
self_port_msg player_port_msg thing_port_msg join_msg
36
173
-1
oself_port_msg self_arrive_msg oplayer_port_msg player_arrive_msg victim_port_msg othing_port_msg thing_arrive_msg object_port_msg
36
173
-1
msg_sub
36
173
-1
obvious_exits
36
173
-1
tell_ways
36
173
-1
tell_obj
36
173
-1
parse_out_object
36
173
-1
enlist
36
173
-1
@spellm*essages @spellp*roperties
2
89
-2
@at
36
93
-2
at_players
36
173
-1
do_at_all
36
173
-1
do_at
36
173
-1
print_at_items
36
173
-1
at_item
36
173
-1
internal_at
36
173
-1
confunc
2
173
-1
disfunc
2
173
-1
@addword @adddict
2
89
-2
@spell @cspell @complete
2
89
-2
@rmword
2
89
-2
@rmdict
2
89
-2
find_property
36
173
-1
find_verbs_on
36
173
-1
find_properties_on
36
173
-1
property_inherited_from
36
173
-1
@ref*use
36
89
-2
@unref*use @allow
36
89
-2
@refusals
36
73
-2
@refusal-r*eporting
36
89
-2
parse_refuse_arguments
36
173
-1
time_word_to_seconds
36
173
-1
parse_time_length
36
173
-1
parse_time
36
173
-1
clear_refusals
36
173
-1
set_default_refusal_time
36
173
-1
refusable_actions
36
173
-1
translate_refusal_synonym
36
173
-1
default_refusals_text_filter
36
173
-1
refusals_text
36
173
-1
player_to_refusal_origin
2
173
-1
refusal_origin_to_name
36
173
-1
check_refusal_actions
36
173
-1
add_refusal
36
173
-1
remove_refusal
36
173
-1
remove_expired_refusals
36
173
-1
refuses_action
36
173
-1
refuses_action_*
36
173
-1
report_refusal
36
173
-1
wh*isper
36
157
1
receive_page
36
173
-1
page_echo_msg
36
173
-1
moveto acceptable
36
173
-1
receive_message
36
173
-1
whisper_refused_msg page_refused_msg mail_refused_msg
36
173
-1
last_huh
2
173
-1
ping_features
2
173
-1
set_owned_objects
2
173
-1
init_for_core
2
173
-1
find_help
36
173
-1
@spurn
36
25
-1
@spurned
36
9
-1
set_spurned_objects
36
173
-1
@addsubmitted @rmsubmitted @submitted
36
9
-1
26
at_room_width
at_number
join_msg
object_port_msg
victim_port_msg
thing_arrive_msg
othing_port_msg
thing_port_msg
player_arrive_msg
oplayer_port_msg
player_port_msg
self_arrive_msg
oself_port_msg
self_port_msg
rooms
refused_origins
refused_extra
default_refusal_time
report_refusal
refused_actions
refused_until
page_refused
page_refused_msg
whisper_refused_msg
mail_refused_msg
spurned_objects
85
0
30
36
5
0
0
36
5
2
You join %n.
36
5
2
teleports you.
36
5
2
teleports you.
36
5
2
%T teleports %n in.
36
5
2
%T teleports %n out.
36
5
2
You teleport %n.
36
5
2
%T teleports %n in.
36
5
2
%T teleports %n out.
36
5
2
You teleport %n.
36
5
2
%<teleports> in.
36
5
2
%<teleports> out.
36
5
2

36
5
4
0
36
1
4
0
36
1
4
0
36
1
0
604800
36
1
0
0
36
1
4
0
36
1
4
0
36
1
0
0
36
1
2
%N refuses your page.
36
5
2
%N refuses your whisper.
36
5
2
%N refuses your mail.
36
5
4
0
36
1
5
36
5
5
36
4
5
36
5
5
36
5
5
36
5
4
0
36
5
5
36
5
5
36
5
5
36
4
5
36
4
4
2
1
90
1
89
36
1
5
2
0
5
2
0
5
2
1
1
92
36
5
5
36
5
5
36
1
5
36
1
5
36
0
5
36
1
5
2
1
5
36
1
5
36
4
5
2
0
5
2
0
5
36
5
5
36
5
5
36
4
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
2
1
5
36
0
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
1
62
36
5
5
2
0
5
36
5
5
36
5
5
36
5
5
36
5
5
2
1
4
4
0
50000
0
0
0
0
0
1
36
0
5
2
0
5
2
0
5
36
4
4
2
2
Frand's player class
2
player class
2
1
2
You see a player who should type '@describe me as ...'.
36
5
4
2
0
69955
0
1084848672
36
1
#89
Stage-Talk Feature

144
36
-1
-1
-1
74
-1
90
5
stage `* -*
36
93
-2
stage [*
36
93
-2
stage ]*
36
93
-2
~*
36
93
-2
stage <*
36
93
-2
0
16
5
36
1
4
1
2
This feature contains various verbs used in stage talk, which allows players to describe their actions in terms of stage directions instead of prose.
36
5
4
5
2
`
2
[
2
]
2
-
2
<
36
1
5
36
1
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
4
4
1
2
Stage-Talk Feature
36
5
4
1
2
This feature contains various verbs used in stage talk, which allows players to describe their actions in terms of stage directions instead of prose.
36
5
4
2
0
4109
0
1084848672
36
1
#90
Pasting Feature

144
36
-1
-1
-1
74
-1
-1
3
@paste
36
85
-2
|*
36
93
-2
@pasteto @paste-to
36
29
-1
0
16
5
36
1
2
The Pasting Feature is mostly useful to people with fancy clients (such as Emacs) or who connect using a windowing system that allows them to copy text they've already seen.  It's intended to give people a way to quote verbatim text at other people in the room.
36
5
4
3
2
@paste
2
|
2
@paste-to
36
1
5
36
1
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
5
5
36
4
4
1
2
Pasting Feature
36
5
2
Verbs useful to people using a windowing system to paste text at people.
36
5
4
2
0
4210
0
1084848672
36
1
#91
Vector and Matrix Utils

16
36
-1
-1
-1
78
-1
93
28
vector_add vector_sub vector_mul vector_div
36
173
-1
matrix_add matrix_sub
36
173
-1
transpose
36
173
-1
determinant
36
173
-1
inverse
36
173
-1
identity
36
173
-1
null
36
173
-1
is_square
36
173
-1
is_null
36
173
-1
is_identity
36
173
-1
cross_prod outer_prod vector_prod
36
173
-1
norm length
36
173
-1
submatrix
36
173
-1
dot_prod inner_prod scalar_prod
36
173
-1
dimension*s
36
173
-1
order
36
173
-1
scalar_vector_add scalar_vector_sub scalar_vector_mul scalar_vector_div
36
173
-1
subtended_angle
36
173
-1
column
36
173
-1
matrix_mul
36
173
-1
scalar_matrix_mul scalar_matrix_div
36
173
-1
is_matrix
36
173
-1
is_vector
36
173
-1
is_reflexive is_areflexive
36
173
-1
is_symmetric is_asymmetric
36
173
-1
is_transitive is_atransitive
36
173
-1
_relation_result
36
173
-1
is_partial_ordering
36
173
-1
1
note
6
2
Please contact Uther@LambdaMOO if you make changes to this object, so he can make the changes on Lambda and elsewhere.
36
5
4
62
2
Utility verbs for manipulating lists as vectors (one dimensional lists) or as matrices (two dimensional lists).
2

2
Some definitions:
2
A VECTOR is a list of INTs or a list of FLOATs. Each element in the list represents the vector's cartesian coordinate as measured from its tail to its tip. (For instance, {3, 4} represents a vector in the x-y plane with an x component of 3 and a y component of 4. {-2, 5, 10} represents a vector in 3-space with a x component of -2, a y component of 5 and a z component of 10.)
2
A MATRIX is a list of VECTORs, all of which have the same number (and type) of components.
2

2
Vector verbs:
2
:vector_add        (V1 [,V2 ...]) => VN such that VN[n] = V1[n] + V2[n]...
2
:vector_sub        (V1 [,V2 ...]) => VN such that VN[n] = V1[n] - V2[n]...
2
:scalar_vector_mul (V, S)         => VN such that VN[n] = V[n] * S...
2
:scalar_vector_div (V, S)         => VN such that VN[n] = V[n] / S...
2
:dot_prod          (V1, V2)       => NUM sum of the products of the 
2
:inner_prod                          corresponding elements of the two
2
                                     vectors.
2
:cross_prod        (V1, V2)       => VN, the vector perpendicular to both V1
2
:outer_prod                          and V2 with length equal to the area of
2
                                     the parallelogram spanned by V1 and V2.
2
:subtended_angle   (V1, V2)       => FLOAT smallest radian angle defined by
2
                                     V1 and V2.
2
:length            (V)            => FLOAT length of the vector. 
2
:norm
2

2
Matrix and Vector verbs:
2
:dimensions (M) => LIST of dimensional sizes
2
:order      (M) => NUM of dimensions
2

2
Matrix verbs:
2
:matrix_add (M1 [,M2 ...]) => MN such that MN[m][n] = M1[m][n] + M2[m][n]...
2
:matrix_sub (M1 [,M2 ...]) => MN such that MN[m][n] = M1[m][n] - M2[m][n]...
2
:matrix_mul (M1, M2)       => MN such than MN[m][n] = the dot product of the  
2
                              mth row of M1 and the nth column of M2.
2
:scalar_matrix_mul (M, S)  => MN such that MN[m][n] = M[m][n] * S...
2
:scalar_matrix_div (M, S)  => MN such that MN[m][n] = M[m][n] / S...
2
:transpose  (M1)           => M2 such that the rows in M1 are the columns in
2
                              M2 and vice versa.
2
:identity   (INT <size>)   => Identity matrix (I) of dimensions <size> by 
2
                              <size>.
2
:null       (INT <size>)   => Null matrix (O) of dimensions <size> by <size>.
2
:is_square  (M)            => 1 iff dimensions of M are equal.
2
:column     (M, INT <n>)   => LIST the nth column of M.
2

2
Square Matrix verbs:
2
:determinant (M) => NUM the determinant of the square matrix.
2
:inverse     (M) => the matrix that M multiplied by :inverse(M) yields I.
2
:is_identity (M) => 1 iff M is I.
2
:is_null     (M) => 1 iff M is O.
2

2
Relation verbs:
2
:is_reflexive   (M) => 1 if M is a reflexive relation, -1 if areflexive,
2
                       0 otherwise.
2
:is_areflexive  (M) => 1 if M is an areflexive relation, -1 if reflexive,
2
                       0 otherwise.
2
:is_symmetric   (M) => 1 if M is a symmetric relation, -1 if asymmetric,
2
                       0 otherwise.
2
:is_asymmetric  (M) => 1 if M is an asymmetric relation, -1 if symmetric,
2
                       0 otherwise.
2
:is_transitive  (M) => 1 if M is a transitive relation, -1 if atransitive,
2
                       0 otherwise.
2
:is_atransitive (M) => 1 if M is an atransitive relation, -1 if transitive,
2
                       0 otherwise.
2
:is_partial_ordering (M) => 1 if M is a reflexive, asymmetric, transitive
2
                            relation.
36
5
0
0
36
4
4
3
2
Vector and Matrix Utils
2
vector
2
matrix
36
5
2
This is a utilities package for dealing with lists as representations of vectors and matrices. Type `help $matrix_utils' for more details.
36
5
4
2
0
29765
0
1084848672
36
1
#92
Frand Help DB

16
36
-1
-1
-1
30
-1
-1
0
31
frand-index
spelling
@spell
@cspell
@spellproperties
@spellmessages
@rmword
@addword
@complete
@find
@rooms
@addroom
@rmroom
@join
@go
@move
teleport-messages
@refuse
@unrefuse
@refusal-reporting
@refusals
refusal-programming
@ways
@at
@adddict
@rmdict
@spurn
@spurned
@submitted
@addsubmitted
@rmsubmitted
37
4
2
2
*index*
2
Frand's Player Class Help Topics
36
5
4
19
2
The MOO has a built in spelling checker and dictionary.  There are several player commands which access the database, as well as some programming features available.  Additional documentation is available under individual commands.
2

2
The current dictionary only contains about 20,000 words, and thus is somewhat incomplete.  Words may be added to a personal dictionary, as well as to the main dictionary (only a few people can add to the main dictionary).
2

2
@spell a word or phrase - Spell check a word or phrase.
2
@spell thing.prop - Spell check a property. The value must be a string or a list of strings.
2
@spell thing:verb - Spell check a verb. Only the quoted strings in the verb are checked.
2
@spellproperties object - Spell check all text properties of an object.
2
@spellmessages object - Spell check only message properties of an object.
2
@cspell word - Spell check a word, and if it is not in the dictionary, offers suggestions about what the right spelling might be. This actually works with thing.prop and thing:verb too, but it is too slow to be useful--it takes maybe 30 seconds per unknown word.
2
@complete prefix - List all the word in the dictionary which begin with the given prefix. For example, '@complete zoo' lists zoo, zoologist, zoology, and zoom.
2
@addword word - Add a word to your personal dictionary.
2
@rmword word - Remove a word from your personal dictionary.
2
@adddict word - Add a word to the global dictionary.
2
@rmdict word - Remove a word from the global dictionary.
2

2
For programmers, the verb $spell:random() is available -- returns a word, at random, from the dictionary.
2

2
Questions and comments should be directed to waffle on LambdaMOO.
36
5
4
11
2
Syntax: @spell <any number of words>
2
           - will check the words from the command line.
2
        @spell object.property
2
           - will spellcheck the contents of a prop. Must be a string or
2
             list of strings.
2
        @spell object:verb
2
           - will check everything within quoted strings in a verb. E.g.,
2
             only the quoted part of player:tell("Spellchecking is fun.");
2
             will be examined for errors.
2

2
Refer to Help Spelling for general information about the spell checker.
36
5
4
7
2
Syntax: @cspell <any number of words>
2
        @cspell object.property
2
        @cspell object:verb
2

2
Like @spell, but attempts to guess at correct spellings for words it believes are spelled incorrectly.   This verb can be quite slow, so correcting large chunks of text may not be a good idea.
2

2
Refer to help spelling and help @spell for more information.
36
5
4
2
2
*forward*
2
@spellmessages
36
5
4
5
2
Syntax: @spellproperties <object>
2
        @spellmessages <object>
2
These commands will spellcheck all properties or messages, respectively, on an object.  The object must be owned or readable by the user.  Messages and properties will be spellchecked if they contain a string or a list of strings; others will be ignored.
2

2
Refer to help spelling for general information about the spellchecker.
36
5
4
3
2
Usage: @rmword <word or words>
2

2
Will remove all words found from your personal dictionary, stored in player property ".dict".
36
5
4
6
2
Syntax: @addword <word or words>
2
        @addword object.property
2
        @addword object:verb
2

2
Will add all words found and unknown into your personal dictionary.
2
Your dictionary is stored in a property named ".dict".
36
5
4
5
2
Syntax:  @complete prefix
2

2
This verb is part of the MOO spelling checker.  It will show you all the words in the dictionary that start with the prefix letters you specify.  You should be specific as to what you're looking for (for example, you might use @complete comput, rather than @complete co) in order to avoid getting an excessive number of words output.
2

2
Refer to help spelling for more information.
36
5
4
7
2
  @find #<object>   - locate an object by number
2
  @find <player>    - locate a player
2
  @find :<verb>     - locate a verb on an object in your vicinity
2
  @find .<property> - locate a property on objects in your vicinity.
2
  @find ?<topic>    - locate a help topic on a help database.
2

2
For example, '@find frand' shows Frand's number and location. '@find :jump' lists every object in the same room as you (including you and the room itself) which has a 'jump' verb.  For properties and verbs, output is a list of pairs of objects: each object on which the property or verb exists, and the ancestor that actually defines it.
36
5
4
7
2
When you aren't in the same room with an object, you have to refer to it by number. When teleporting, that means you usually have to give your destination as a number. To avoid this, Frand's player class provides a way for you to store a database of rooms by name. If the library is in your list of rooms, you can just '@go library' to teleport there. Or '@move book to lib' to teleport an object there.
2

2
  @rooms                     - see a list of the rooms you know by name
2
  @addr*oom <name> <number>  - remember a room by name
2
  @rmr*oom  <name>           - forget about a room's name
2

2
For example, to add the kitchen to your database of rooms, type '@addr Kitchen #24'. To remove it, type '@rmr kitchen'.
36
5
4
2
2
*forward*
2
@rooms
36
5
4
2
2
*forward*
2
@rooms
36
5
4
2
2
*forward*
2
@move
36
5
4
2
2
*forward*
2
@move
36
5
4
10
2
  @move <obj> to <location>  - teleport an object to a given location
2
  @go <location>             - teleport yourself to a given location
2
  @join <player>             - teleport yourself to a player's location
2

2
You can teleport an object (if it allows this) to any location that will accept it. For example, `@move rock to #11' will teleport the rock to the closet. `@move #123 to here' will move object #123 to your location. `@go home' will teleport you home. `@join yduj' will teleport you to yduJ's location. You can also teleport an object to #-1, which is nowhere.
2

2
See help teleport-messages for information on customizing the text that appears
2
(both to you and to others in the vicinity) when you teleport.
2
See also help @rooms for information on naming rooms for convenient movement.
2
If @move doesn't work and you own the place where the object is located, try using @eject instead.
36
5
4
16
2
Teleporting using @go, @move, or @join causes various messages to appear. The messages are defined on you as properties. Here are the messages, who sees them, and when.
2

2
 when you teleport -  yourself      a player        a thing
2

2
           you see -  self_port     player_port     thing_port
2
        others see -  oself_port    oplayer_port    othing_port
2
  destination sees -  self_arrive   player_arrive   thing_arrive
2
   teleportee sees -                victim_port     object_port
2

2
When you @join a player, your join message is printed to you.
2

2
You can set the messages with commands like '@oself_port me is "vanishes in a shimmering haze."', '@join me is "You visit %n."', and so on.
2

2
The messages to you are printed as they stand. The messages to others are printed after your name. If you set a message to "", the null string, nothing will print for that message. But if you have a non-empty message which does not include your name, then your name will be added in front of the message. You can use the usual pronoun substitutions, like '%n' to refer to the object you are teleporting. You can also use the special substitutions %<from room> and %<to room> to refer to the original and destination rooms for the teleport.
2

2
If you are leaving your name out of the messages, and relying on its being inserted automatically, you have to be careful about the substitutions you use. If Frand has an oself_port message "jumps to %<to room>.", for example, and Frand teleports to Frand's MOOhome, the message printed will be "jumps to Frand's MOOhome." My name is there, so it isn't added in. If you want to include your name as a substitution, the one to use is %t, 'this'. "%t jumps to %<to room>." will work.
36
5
4
63
2

2
The refusal facility allows you to ignore specific actions by players. You can ignore all mail that Stupid_Jerk (#34567) sends you, for
2
example, or you can ignore all whispers and pages, no matter who they are from.
2

2
There are three basic refusal commands. They are explained below.
2

2
    @refuse <action> from <player>
2
    @unrefuse <action> from <player>
2
    @refusals
2

2
The actions you can refuse are page, whisper, mail, move, join, and accept. These are explained in a table farther down.
2

2
For example, '@refuse mail from Stupid_Jerk'. Any future mail that Stupid_Jerk sends you will be dropped on the floor, and Stupid_Jerk will
2
be told that you refused to receive it. The refusal stays active for a week; after the week is over, Stupid_Jerk's mail will again get
2
through. (If you want the refusal to last a longer or shorter time, keep on reading.)
2

2
You can refuse more than one action at a time. '@refuse page whisper from Stupid_Jerk' refuses both pages and whispers.
2

2
You can also refuse actions from everybody.
2

2
    @refuse <actions>
2

2
For example, '@refuse page' refuses every page. These refusals are listed as refusals of 'everybody' when you use the @refusals command,
2
below.
2

2
See `help @unrefuse' and `help @refusal-reporting' for information on undoing refusals and finding out what you're refusing.
2

2
 - the actions
2

2
The actions everybody can refuse are page, whisper, mail, move, and join.
2
refuse other things as well, depending on your player class.
2

2
 refuse this      to prevent somebody from doing this
2
 -----------      -----------------------------------
2
    page        - tell you a message with the 'page' command
2
    whisper     - tell you a message with the 'whisper' or 'murmur' command
2
    mail        - send you a MOOmail message via @send
2
    move        - teleport you
2
    join        - enter the same room as you (only works in a some rooms)
2
    accept      - hand you an object (or teleport it to you)
2
    flames      - posts are suppressed on mail lists
2
    politics    - set yourself `apolitical' [see `help apolitical']
2
    all         - all of the above
2

2
Refusing move is a little tricky. The player will not be able to teleport you, but you will not be able to pass through any special exits
2
that the player may have programmed either. Refusing move means refusing *all* movement, including movement through programmed exits.
2
Fortunately most exits are plain exits, and you will always be able to pass through them. Only specially programmed exits by the player you
2
are refusing move from are barred to you.
2

2
Refusing join only works in special rooms that support it.
2

2
 - time limits
2

2
Refusals expire after a certain amount of time has gone by. Unless you say otherwise, they expire after a week. You can add '... for
2
<time>' to the end of a @refuse command:
2

2
    @refuse <action> from <player> for <time>
2
    @refuse <action> for <time>
2

2
For example, '@refuse join from Stupid_Jerk for 3 days'.
2

2
The <time> is always a number followed by a unit, like '10 weeks' or '45 seconds'. The possible units are second, minute, hour, day, week,
2
and month.
36
5
4
15
2
Syntax:
2
    @unrefuse <actions> from <player>
2

2
If Stupid_Jerk reforms, you can change your mind. '@unrefuse mail from Stupid_Jerk' will remove the refusal.
2

2
'@unrefuse' can also be called '@allow', for those who prefer English over clarity.
2

2
    @unrefuse <actions>
2

2
If you don't mention a player, you remove only refusals that apply to everybody. '@unrefuse page' turns off any '@refuse page' command you
2
gave before, but does not affect refusals of specific players. You will still be refusing pages from Stupid_Jerk, if you were before.
2

2
    @unrefuse everything
2

2
 If you '@unrefuse everything', all your refusals are removed. This command asks if you are sure before erasing them all.
36
5
4
26
2
[See help @refuse for a discussion of the refusal facility]
2

2
    @refusals
2
    @refusals for <player>
2

2
List the players and actions you are refusing, or the players and actions that another player is refusing. For example, you can see if
2
Stupid_Jerk is refusing your mail too: '@refusals for Stupid_Jerk'.
2

2
Normally refusal works without your awareness. You don't even notice when Stupid_Jerk attempts to send you mail. If you would rather be
2
notified when it happens (so you can thumb your nose), then do
2

2
    @refusal-reporting on
2

2
Actually, all you need to type is '@refusal-r on'. You will see a message like 'Mail from Stupid_Jerk (#34567) refused.' as soon as
2
Stupid_Jerk types 'send' in the mail editor.
2

2
Refusal reporting only works for some actions. It works for page, whisper, and mail, but not for move, join or accept. Sorry.
2

2
You will only be notified if you are connected when the refusal happens. If you are not connected when Stupid_Jerk tries to send you mail,
2
you won't know about it, no matter whether refusal reporting is on or off.
2

2
You can turn off refusal reporting with '@refusal-r off'. You can check whether it is on or off with '@refusal-r'. Here's the list:
2

2
    @refusal-reporting on     - turn on refusal reporting
2
    @refusal-reporting off    - turn off refusal reporting
2
    @refusal-reporting        - see whether it is on or off
36
5
4
2
2
*forward*
2
@refusal-reporting
36
5
4
123
2

2
  -- -- --  refusal programming
2

2
This entry explains how to program new kinds of refusal for the refusal mechanism. This information is only useful for programmers. For basic information about the refusal mechanism, read the 'refusal' entry.
2

2
 - making a new refusable action
2

2
Making a refusable action has several steps. You have to (1) override the verb that lists your refusable actions, (2) write a verb to handle any special cases in determining when an action should be refused, and (3) write the code that does the actual acceptance or refusal of the action.
2

2
You can put new refusable actions on yourself, or on a player class. If you put them on yourself, then you are the only one who can use them. If you put them on a player class, then everyone who belongs to that class can use them.
2

2
I'll walk you through the example of making a refusable action 'smirk'. If you '@refuse smirk from Munchkin' then anything Munchkin tells you with the word 'smirk' in it will be refused. Since this is useless, I'll assume that you're defining it on yourself, instead of on a player class.
2

2
(1) You have to make 'smirk' a refusable action. You do that by overriding your :refusable_actions verb. :Refusable_actions is a verb which returns the actions that you know how to refuse. It is a verb instead of a property so that players can add refusable actions at all levels of the player class hierarchy without interfering with each other.
2

2
    @verb me:refusable_actions this none this
2
    @program me:refusable_actions
2
      return {@pass(@args), "smirk"};
2
    .
2

2
'@pass (@args)' means 'include the actions that my parent knows how to refuse, because I know how to refuse them too.'
2

2
(2) The refusal mechanism provides for special cases in deciding whether an action should be refused. None of the refusals defined on Frand's Player Class actually make use of this special case, and you probably won't have to use it either. But you still have to write a verb to deal with it.
2

2
The verb should be named :refuses_action_<action>, where <action> is the action that the verb is for. In this case, it should be :refuses_action_smirk. The verb takes some arguments and returns whether the action should be refused. The details of this will someday be explained in the next section, 'fancy refusable actions', but in all simple cases the verb should simply return 1.
2

2
    @verb me:refuses_action_smirk this none this
2
    @program me:refuses_action_smirk
2
      return 1;
2
    .
2

2
(3) Finally you must implement the refusal itself. The code that performs the action should call <target>:refuses_action (player, <action>). <target> is the target of the action; it is you, because others are smirking at you. 'Player' is the current player, the one who is attempting to perform the action. <action> is the action the player is attempting, 'smirk'.
2

2
In this case, you want to change your :tell verb to check whether its message contains the word 'smirk', and whether you are refusing smirks from the player who's talking. It also has to do two other things: (1) inform the player whose smirk was refused, and (2) call this:report_refusal, which tests whether you have refusal reporting turned on, and if so, reports the refusal to you. The call is this:report_refusal (<player>, <message>).
2

2
    @verb me:tell this none this
2
    @program me:tell
2
      line = tostr (@args);
2
      if (index (line, "smirk") &&
2
          this:refuses_action (player, "smirk"))
2
        player:tell (this.name, " refuses your s m i r k.");
2
        this:report_refusal (player, "You refused a s m i r k.");
2
      else
2
        pass (@args);
2
      endif
2
    .
2

2
The messages say 's m i r k' instead of 'smirk' to prevent an infinite :tell loop.
2

2
It may help to study some examples. To see how whisper refusal works, read #3133:whisper. For page refusal, see #3133:receive_page and #3133:page_echo_msg. For mail refusal, #3133:receive_message. For move and accept refusal, #3133:moveto or #3133:accept (they are the same verb).
2

2
 - refusal data structures
2

2
Refusal information is stored in four main properties, all lists.
2

2
    .refused_origins    - who you are refusing actions from
2
    .refused_actions    - for each, what actions you're refusing
2
    .refused_until      - when the refusals expire
2
    .refused_extra      - any further information about each refused action
2

2
These properties are all readable and owned by Frand. You (or anyone) can see their values, but you can only change them by calling verbs for the purpose. The verbs are explained later on.
2

2
Your .refused_origins property remembers who you are refusing actions from. It might have the value {#47, #34567} if you are refusing actions from Frand (#47) and Stupid_Jerk (#34567). If you are refusing actions by guests, it will have entries like "xxP1Xw.nkQzft". This weird string is a code word that stands for the guest's connection site; you are refusing actions not by a certain guest character, but by any guest who may connect from that site. The verb :player_to_refusal_origin (<player>) converts a player object to a refusal origin (either the same player object or a guest's site code) suitable to be stored in .refused_origins.
2

2
Your .refused_actions property stores, for each origin in .refused_origins, a list of the actions you are refusing for that origin. Continuing the example from the last paragraph, if you are refusing page from Frand and page, whisper, and mail from Stupid_Jerk, then your .refused_actions has the value {{"page"}, {"page", "whisper", "mail"}}.
2

2
Your .refused_until stores an expiration time for each refusal origin, in the form used by time(), the number of seconds since midnight, 1 January 1970, GMT. All actions that you are refusing from a given player expire at the same time. If you are refusing Frand until 19 December 1992, and Stupid_Jerk for seven years, your .refused_until might have the value {724763397, 928384392}.
2

2
Your .refused_extra property stores any additional information needed for fancy refusals. It stores one piece of information for every action you are refusing from every player. In other words, .refused_extra contains a list of lists which are parallel to the lists in .refused_actions. None of the built-in refusals on #3133 is fancy, so for them, the extra piece of information is always 0. In the example, your .refused_extra has the value {{0}, {0, 0, 0}}. The next section explains how to use .refused_extra in fancy refusals.
2

2
Another property, .default_refusal_time, stores the duration in seconds that a refusal lasts by default. This property is readable and owned by Frand. Its value is usually 604800, seven days. You can set it via the verb :set_default_refusal_time.
2

2
 - fancy refusable actions
2

2
THIS SECTION IS NOT YET WRITTEN
2

2
 - selective refusal reporting
2

2
If you have done '@refusal-reporting on', then you see a message when you refuse somebody else's action (for some actions). This reporting is done by the verb :report_refusal.
2

2
    :report_refusal (<player>, <message>, ...)
2

2
The first argument is the player whose action is refused, and the rest are concatenated to form the message that you see.
2

2
You can override this verb if you want more selective refusal reporting. If you're refusing pages, for example, you might find that the refusal report is just as annoying as the original page--but you still don't want to turn it off. In that case, you might decide to give no more than one refusal report per minute, using code like this:
2

2
    @property me.refusal_time 0
2
    @property me.refusal_count 0
2
    @verb me:report_refusal this none this
2
    @program me:report_refusal
2
      if (time() - this.refusal_time < 60)
2
        this.refusal_count = this.refusal_count + 1;
2
      else
2
        if (this.refusal_count > 0)
2
           pass (args [1], "You've refused ", this.refusal_count+1,
2
                 " actions recently.");
2
        else
2
          pass (@args);
2
        endif
2
        this.refusal_time = time();
2
        this.refusal_count = 0;
2
      endif
2
    .
2

2
The property that remembers whether refusal reporting is turned on is .report_refusal, which may have the values 0 or 1. The property is owned by Frand, so you can't change it directly.
2

2
 - refusal synonyms
2

2
You can give a refusal more than one name by overriding the verb :translate_refusal_synonym. The verb takes one argument, a word from the command line, and it returns a list of refusal names that the word stands for. If the word is not a synonym, :translate_refusal_synonym should return the empty list, {}.
2

2
    :translate_refusal_synonym (<word>) -> <list>
2

2
If you want 'noise' to mean both page and whisper for you, then you'd write this. You need to pass(@args) to get the synonym 'all', which stands for all refusable actions. If you type '@refuse noises from Munchkin', the plural 's' is removed automatically, so you don't have to worry about that.
2

2
    @verb me:translate_refusal_synonym this none this
2
    @program me:translate_refusal_synonym
2
      return pass(@args) ||
2
             (args [1] == "noise") ? {"page", "whisper"} | {};
2
    .
2

2
 - refusing actions by classes of players
2

2
THIS SECTION IS NOT YET WRITTEN
36
5
4
1
2
'@ways', '@ways <room>' - List any obvious exits from the given room (or this room, if none is given).
36
5
4
8
2
 '@at' - Find out where everyone is.
2
 '@at <player>' - Find out where <player> is, and who else is there.
2
 '@at <obj>' - Find out who else is at the same place as <obj>.
2
 '@at <place>' - Find out who is at the place.
2
 The place can be given by number, or it can be a name from your @rooms list.
2
 '@at #-1' - Find out who is at #-1.
2
 '@at me' - Find out who is in the room with you.
2
 '@at home' - Find out who is at your home.
36
5
4
2
2
*forward*
2
@addword
2
1
4
2
2
*forward*
2
@rmword
2
1
4
3
2
*verbdoc*
2
$frand_class
2
@spurn
2
1
4
3
2
*verbdoc*
2
$frand_class
2
@spurned
2
1
4
3
2
*verbdoc*
2
$frand_class
2
@submitted
2
1
4
2
2
*forward*
2
@submitted
2
1
4
2
2
*forward*
2
@submitted
2
1
5
36
5
4
1
2
frand-index
36
1
0
0
36
4
4
1
2
Frand Help DB
36
5
5
36
5
4
2
0
26603
0
1084848672
36
1
#93
Conversion Utils

16
36
-1
-1
-1
78
-1
-1
15
dd_to_dms dh_to_hms
36
173
-1
dms_to_dd hms_to_dh
36
173
-1
rect_to_polar
36
173
-1
polar_to_rect
36
173
-1
F_to_C degF_to_degC
36
173
-1
C_to_F degC_to_degF
36
173
-1
convert
36
173
-1
_do_convert
36
173
-1
_try_metric_prefix
36
173
-1
_format_units
36
173
-1
K_to_C degK_to_degC
36
173
-1
C_to_K degC_to_degK
36
173
-1
F_to_R degF_to_degR
36
173
-1
R_to_F degR_to_degF
36
173
-1
_do_value
36
173
-1
385
basic_units
pi
c
g
au
mole
e
abcoulomb
force
slug
mercury
hg
torr
%
percent
cg
atmosphere
atm
psi
bar
chemamu
physamu
amu
chemdalton
dalton
physdalton
dozen
bakersdozen
quire
ream
gross
hertz
cps
hz
khz
mhz
rutherford
degree
circle
turn
revolution
rpm
grade
grad
sign
arcdeg
arcmin
arcsec
karat
proof
mpg
curie
stoke
steradian
sr
sphere
ps
us
ns
ms
sec
minute
min
hour
hr
day
week
quadrant
fortnight
year
yr
month
mo
decade
century
millenium
gm
myriagram
mg
metricton
gamma
metriccarat
quintal
lb
pound
lbf
cental
stone
ounce
oz
avdram
usdram
dram
dr
grain
gr
shortton
ton
longquarter
shortquarter
longton
longhundredweight
shorthundredweight
wey
carat
scruple
pennyweight
apdram
apounce
appound
cm
mm
km
parsec
pc
nm
micron
angstrom
fermi
point
pica
caliber
barleycorn
inch
in
mil
palm
hand
span
foot
feet
ft
cubit
pace
yard
yd
fathom
rod
rd
rope
ell
skein
cable
furlong
nmile
nautmile
bolt
mile
mi
league
nautleague
lightyear
engineerschain
engineerslink
gunterchain
gunterlink
ramdenchain
ramdenlink
acre
rood
are
centare
hectare
barn
section
township
cc
liter
l
ml
registerton
cord
boardfoot
boardfeet
cordfoot
cordfeet
last
perch
stere
cfs
gallon
imperial
gal
quart
qt
magnum
pint
pt
cup
gill
fifth
firkin
barrel
petrbarrel
hogshead
hd
tun
kilderkin
noggin
floz
fldr
tablespoon
teaspoon
minim
pk
bushel
dry
bu
british
brbucket
brpeck
brbushel
brfirkin
dryquartern
liqquarten
butt
bag
brbarrel
seam
drachm
newton
pascal
nt
joule
cal
gramcalorie
calorie
btu
frigorie
kcal
kcalorie
langley
dyne
poundal
pdl
erg
horsepower
hp
poise
reyn
rhe
coul
statcoul
ampere
abampere
amp
watt
volt
v
abvolt
statvolt
ohm
abohm
mho
abmho
siemens
farad
abfarad
statfarad
pf
abhenry
henry
stathenry
mh
weber
gauss
electronvolt
ev
kev
mev
bev
faraday
gilbert
oersted
oe
cd
lumen
lux
footcandle
footlambert
lambert
phot
stilb
candle
engcandle
germancandle
carcel
hefnerunit
candlepower
baud
byte
kb
mb
gb
word
long
block
mph
knot
brknot
mach
energy
ccs
peck
arpentcan
apostilb
arpentlin
atomicmassunit
barie
barye
biot
blondel
bottommeasure
refrigeration
centesimalminute
centesimalsecond
chain
circularinch
circularmil
clusec
coomb
crith
dioptre
displacementton
dopplezentner
equivalentfootcandle
equivalentlux
equivalentphot
finger
franklin
galileo
geographicalmile
hefnercandle
homestead
hyl
imaginarycubicfoot
jeroboam
line
link
lusec
marineleague
maxwell
mgd
minersinch
nail
nit
nox
pieze
pipe
pole
quarter
quartersection
ra
rankine
rehoboam
rontgen
rydberg
sabin
shippington
sigma
skot
spat
spindle
square
sthene
tesla
thermie
timberfoot
tonne
water
xunit
k
puncheon
tnt
basic_units_template
meter
gram
second
inches
sennight
cubichectare
astronomicalunit
fluidounce
tsp
tbsp
390
4
9
2
m
2
kg
2
s
2
coul
2
candela
2
radian
2
bit
2
erlang
2
kelvin
36
1
2
3.14159265358979323846264338327950288
36
1
2
2.99792458e8 m/sec
36
1
2
9.80665 m/sec2
36
1
2
1.49599e11 m
36
1
2
6.022045e23
36
1
2
1.6020e-19 coul
36
1
2
10 coul
36
1
2
g
36
1
2
lb g sec2/ft
36
1
2
1.3157895 atm/m
36
1
2
mercury
36
1
2
mm hg
36
1
2
1|100
36
1
2
%
36
1
2
centigram
36
1
2
1.01325 bar
36
1
2
atmosphere
36
1
2
lb g/in2
36
1
2
1e6 dyne/cm2
36
1
2
1.66024e-24 g
36
1
2
1.65979e-24 g
36
1
2
chemamu
36
1
2
chemamu
36
1
2
chemamu
36
1
2
physamu
36
1
2
12
36
1
2
13
36
1
2
25
36
1
2
500
36
1
2
144
36
1
2
1/sec
36
1
2
hertz
36
1
2
hertz
36
1
2
kilohz
36
1
2
megahz
36
1
2
1e6/sec
36
1
2
1|180 pi radian
36
1
2
2 pi radian
36
1
2
2 pi radian
36
1
2
360 degrees
36
1
2
revolution/minute
36
1
2
1|400 circle
36
1
2
1|400 circle
36
1
2
1|12 circle
36
1
2
1 degree
36
1
2
1|60 arcdeg
36
1
2
1|60 arcmin
36
1
2
1|24
36
1
2
1|200
36
1
2
mile/gal
36
1
2
3.7e10/sec
36
1
2
1 cm2/sec
36
1
2
radian radian
36
1
2
steradian
36
1
2
4 pi steradian
36
1
2
picosec
36
1
2
microsec
36
1
2
nanosec
36
1
2
millisec
36
1
2
second
36
1
2
60 sec
36
1
2
minute
36
1
2
60 min
36
1
2
hour
36
1
2
24 hr
36
1
2
7 day
36
1
2
5400 minute
36
1
2
14 day
36
1
2
365.24219879 day
36
1
2
year
36
1
2
1|12 year
36
1
2
month
36
1
2
10 year
36
1
2
100 year
36
1
2
1000 year
36
1
2
gram
36
1
2
10 kg
36
1
2
milligram
36
1
2
1000 kg
36
1
2
1e-6 g
36
1
2
200 mg
36
1
2
100 kg
36
1
2
0.45359237 kg
36
1
2
lb
36
1
2
lb g
36
1
2
100 lb
36
1
2
14 lb
36
1
2
1|16 lb
36
1
2
ounce
36
1
2
1|16 oz
36
1
2
1|8 oz
36
1
2
avdram
36
1
2
dram
36
1
2
1|7000 lb
36
1
2
grain
36
1
2
2000 lb
36
1
2
shortton
36
1
2
28 lb
36
1
2
500 lb
36
1
2
2240 lb
36
1
2
112 lb
36
1
2
100 lb
36
1
2
252 lb
36
1
2
205.3 mg
36
1
2
20 grain
36
1
2
24 grain
36
1
2
60 grain
36
1
2
480 grain
36
1
2
5760 grain
36
1
2
centimeter
36
1
2
millimeter
36
1
2
kilometer
36
1
2
au radian/arcsec
36
1
2
parsec
36
1
2
nanometer
36
1
2
1e-6 meter
36
1
2
1e-8 meter
36
1
2
1e-13 cm
36
1
2
1|72.27 in
36
1
2
0.166044 inch
36
1
2
0.01 in
36
1
2
1|3 in
36
1
2
2.54 cm
36
1
2
inch
36
1
2
0.001 in
36
1
2
3 in
36
1
2
4 in
36
1
2
9 in
36
1
2
12 in
36
1
2
foot
36
1
2
foot
36
1
2
18 in
36
1
2
30 inch
36
1
2
3 ft
36
1
2
yard
36
1
2
6 ft
36
1
2
16.5 ft
36
1
2
rod
36
1
2
20 ft
36
1
2
45 in
36
1
2
360 feet
36
1
2
720 ft
36
1
2
660 ft
36
1
2
1852 m
36
1
2
nmile
36
1
2
120 feet
36
1
2
5280 feet
36
1
2
mile
36
1
2
3 mi
36
1
2
3 nmile
36
1
2
c yr
36
1
2
100 ft
36
1
2
0.01 engineerschain
36
1
2
66 ft
36
1
2
0.01 gunterchain
36
1
2
100 ft
36
1
2
0.01 ramdenchain
36
1
2
43560 ft2
36
1
2
0.25 acre
36
1
2
100 m2
36
1
2
0.01 are
36
1
2
100 are
36
1
2
1e-24 cm2
36
1
2
mi2
36
1
2
36 mi2
36
1
2
cm3
36
1
2
1000 cc
36
1
2
liter
36
1
2
milliliter
36
1
2
100 ft3
36
1
2
128 ft3
36
1
2
144 in3
36
1
2
boardfoot
36
1
2
0.125 cord
36
1
2
cordfoot
36
1
2
80 bu
36
1
2
24.75 ft3
36
1
2
m3
36
1
2
ft3/sec
36
1
2
231 in3
36
1
2
1.200949
36
1
2
gallon
36
1
2
1|4 gal
36
1
2
quart
36
1
2
2 qt
36
1
2
1|2 qt
36
1
2
pint
36
1
2
1|2 pt
36
1
2
1|4 pt
36
1
2
1|5 gal
36
1
2
72 pint
36
1
2
31.5 gal
36
1
2
42 gal
36
1
2
63 gal
36
1
2
hogshead
36
1
2
252 gal
36
1
2
18 imperial gal
36
1
2
1 imperial gill
36
1
2
1|4 gill
36
1
2
1|32 gill
36
1
2
4 fldr
36
1
2
1|3 tablespoon
36
1
2
1|480 floz
36
1
2
peck
36
1
2
8 dry gal
36
1
2
268.8025 in3/gallon
36
1
2
bushel
36
1
2
277.4193|231
36
1
2
4 dry british gal
36
1
2
2 dry british gal
36
1
2
8 dry british gal
36
1
2
1.125 brbushel
36
1
2
2.272980 l
36
1
2
0.1420613 l
36
1
2
126 gal
36
1
2
3 brbushels
36
1
2
4.5 brbushels
36
1
2
8 brbushels
36
1
2
3.551531 ml
36
1
2
kg m/sec2
36
1
2
nt/m2
36
1
2
newton
36
1
2
nt m
36
1
2
4.1868 joule
36
1
2
cal
36
1
2
cal
36
1
2
1054.35 joule
36
1
2
kilocal
36
1
2
kilocal
36
1
2
kilocal
36
1
2
cal/cm cm
36
1
2
erg/cm
36
1
2
ft lb/sec2
36
1
2
poundal
36
1
2
1e-7 joule
36
1
2
550 ft lb g/sec
36
1
2
horsepower
36
1
2
gram/cm sec
36
1
2
6.89476e-6 centipoise
36
1
2
1/poise
36
1
2
coulomb
36
1
2
3.335635e-10 coul
36
1
2
coul/sec
36
1
2
10 amp
36
1
2
ampere
36
1
2
joule/sec
36
1
2
watt/amp
36
1
2
volt
36
1
2
10 volt
36
1
2
299.7930 volt
36
1
2
volt/amp
36
1
2
10 ohm
36
1
2
1/ohm
36
1
2
10 mho
36
1
2
mho
36
1
2
coul/volt
36
1
2
10 farad
36
1
2
1.112646e-12 farad
36
1
2
picofarad
36
1
2
10 henry
36
1
2
sec2/farad
36
1
2
8.987584e11 henry
36
1
2
millihenry
36
1
2
volt sec
36
1
2
maxwell/cm2
36
1
2
e volt
36
1
2
e volt
36
1
2
1e3 ev
36
1
2
1e6 ev
36
1
2
1e9 ev
36
1
2
9.648456e4coul
36
1
2
0.7957747154 amp
36
1
2
1 gilbert / cm
36
1
2
oersted
36
1
2
candela
36
1
2
cd sr
36
1
2
lumen/m2
36
1
2
lumen/ft2
36
1
2
cd/pi ft2
36
1
2
cd/pi cm2
36
1
2
lumen/cm2
36
1
2
cd/cm2
36
1
2
cd
36
1
2
1.04 cd
36
1
2
1.05 cd
36
1
2
9.61 cd
36
1
2
.92 cd
36
1
2
12.566370 lumen
36
1
2
bit/sec
36
1
2
8 bit
36
1
2
1024 byte
36
1
2
1024 kb
36
1
2
1024 mb
36
1
2
4 byte
36
1
2
4 word
36
1
2
512 byte
36
1
2
mile/hr
36
1
2
nmile/hr
36
1
2
6080 ft/hr
36
1
2
331.45 m/sec
36
1
2
c2
36
1
2
1|36 erlang
36
1
2
2 dry gallon
36
1
2
27.52 mi
36
1
2
cd/pi m2
36
1
2
191.835 ft
36
1
2
amu
36
1
2
1e-1 nt/m2
36
1
2
1e-1 nt/m2
36
1
2
10 amp
36
1
2
cd/pi m2
36
1
2
1|40 in
36
1
2
12000 but/ton hr
36
1
2
1e-2 grade
36
1
2
1e-4 grade
36
1
2
gunterchain
36
1
2
1|4 pi in2
36
1
2
1e-6|4 pi in2
36
1
2
1e-8 mm hg m3/s
36
1
2
4 bu
36
1
2
9.06e-2 gram
36
1
2
1/m
36
1
2
35 ft3
36
1
2
100 kg
36
1
2
lumen/pi ft2
36
1
2
lumen/pi m2
36
1
2
cd/pi cm2
36
1
2
7|8 in
36
1
2
3.33564e-10 coul
36
1
2
1e-2 m/sec2
36
1
2
nmile
36
1
2
hefnerunit
36
1
2
1|4 mi2
36
1
2
gram force sec2/m
36
1
2
1.4 ft3
36
1
2
4|5 gal
36
1
2
1|12 in
36
1
2
66|100 ft
36
1
2
1e-6 mm hg m3/s
36
1
2
3nmile
36
1
2
1e-8 weber
36
1
2
megagal/day
36
1
2
1.5 ft3/min
36
1
2
1|16 yd
36
1
2
cd/m2
36
1
2
1e-3 lux
36
1
2
1e3 nt/mt2
36
1
2
4 barrel
36
1
2
rd
36
1
2
9 in
36
1
2
1|4 mi2
36
1
2
100 erg/gram
36
1
2
1.8 kelvin
36
1
2
156 floz
36
1
2
2.58e-4 curie/kg
36
1
2
1.36054e1 ev
36
1
2
1 ft2
36
1
2
40 ft3
36
1
2
microsec
36
1
2
1e-3 apostilb
36
1
2
sphere
36
1
2
14400 yd
36
1
2
100 ft2
36
1
2
1e3 nt
36
1
2
weber/m2
36
1
2
1e6 cal
36
1
2
ft3
36
1
2
1e6 gram
36
1
2
0.22491|2.54 kg/m2 sec2
36
1
2
1.00202e-13 m
36
1
2
1.38047e-16 erg/kelvin
36
1
2
84 gal
36
1
2
4.6e6 m2/sec2
36
1
4
9
4
2
2
m
0
0
4
2
2
kg
0
0
4
2
2
s
0
0
4
2
2
coul
0
0
4
2
2
candela
0
0
4
2
2
radian
0
0
4
2
2
bit
0
0
4
2
2
erlang
0
0
4
2
2
kelvin
0
0
36
1
2
m
36
1
2
1|1000 kg
36
1
2
s
36
1
2
inch
36
1
2
1 week
36
1
2
1000000 m3
36
1
2
au
2
1
2
floz
2
1
2
teaspoon
2
1
2
tablespoon
2
1
4
20
2
Utility verbs for converting from one unit of measure to another.
2

2
Unusual conversions:
2
:dd_to_dms => converts decimal (INT or FLOAT) Degrees into Degrees, Minutes,
2
              and Seconds. (Also works for decimal Hours.)
2
:dms_to_dd => converts from Degrees (or Hours), Minutes, and Seconds to
2
              decimal Degrees (or Hours).
2
:rect_to_polar => converts from cartesian (x,y) coordinates to polar.
2
:polar_to_rect => converts from polar (r, theta) coordinates to cartesian.
2
:F_to_C => converts from Fahrenheit to Celsius.
2
:C_to_F => converts from Celsius to Fahrenheit.
2
:C_to_K => converts from Celsius to Kelvin.
2
:K_to_C => converts from Kelvin to Celsius.
2
:F_to_R => converts from Fahrenheit to Rankine.
2
:R_to_F => converts from Rankine to Fahrenheit.
2

2
Standard conversions:
2
:convert => takes two string inputs and attempts to determine the 
2
            multiplicative conversion factor. See the verb help for details
2
            and input format."
36
5
0
0
36
4
4
1
2
Conversion Utils
36
5
2
This is a utilities package for converting from one unit of measurement to another. Type 'help #770' for more details.
36
5
4
2
0
30721
0
1084848672
36
1
#94
Generic Gendered Object

144
2
-1
-1
-1
1
35
37
3
set_gender
2
173
-1
@gen*der
2
105
12
verb_sub
2
173
-1
11
gender
pqc
pq
ppc
pp
prc
pr
poc
po
psc
ps
15
2
neuter
2
5
2
its
2
5
2
its
2
5
2
Its
2
5
2
its
2
5
2
Itself
2
5
2
itself
2
5
2
It
2
5
2
it
2
5
2
It
2
5
2
it
2
5
0
0
2
4
4
1
2
Generic Gendered Object
2
5
5
2
5
4
2
0
2378
0
1084848672
36
1
#95
List Editor

144
96
-1
-1
-1
50
-1
-1
15
e*dit
96
25
-1
save
96
89
-2
join* fill
96
89
-2
expl*ode
96
89
-2
value
96
173
-1
working_on
96
173
-1
init_session
96
173
-1
property_match_result
96
173
-1
property
2
165
-1
set_property
2
165
-1
explode_line
96
173
-1
explode_list
96
173
-1
is_delimiter
96
173
-1
to_value
96
173
-1
parse_invoke
96
173
-1
2
objects
properties
40
4
0
96
1
4
0
96
1
4
0
96
1
4
0
96
1
4
2
4
10
2
say
2
emote
2
lis*t
2
ins*ert
2
n*ext,p*rev
2
del*ete
2
f*ind
2
s*ubst
2
m*ove,c*opy
2
expl*ode
4
3
2
w*hat
2
abort
2
q*uit,done,pause
96
5
5
96
5
5
96
5
4
3
4
2
2
e*dit
2
<object>.<prop>
4
2
2
save
2
[<object>.<prop>]
4
2
2
expl*ode
2
[<range>]
96
5
0
0
96
1
5
96
5
5
96
5
4
6
4
2
2
properties
2

4
2
2
objects
1
-1
4
2
2
texts
0
0
4
2
2
changes
0
0
4
2
2
inserting
0
1
4
2
2
readable
0
0
96
1
2
%N heads off to edit some properties.
96
5
2
%N comes back from editing properties.
96
5
4
3
2
Partially edited list value will be here when you get back.
2
To return, give the `@pedit' command with no arguments.
2
Please come back and SAVE or ABORT if you don't intend to be working on this list value in the immediate future.  Keep Our MOO Clean!  No Littering!
96
5
5
96
5
5
96
5
5
96
5
4
0
96
0
4
0
96
1
4
0
96
0
4
0
96
0
4
0
96
1
5
96
5
5
96
5
5
96
5
5
96
5
5
96
5
5
96
5
5
96
5
5
96
4
5
96
5
0
917349705
96
5
5
96
4
5
96
5
5
96
5
5
96
4
4
1
2
List Editor
96
5
5
96
5
4
2
0
11877
0
1084848672
36
1
#96
Editor_Owner

1
96
-1
-1
-1
4
-1
-1
0
0
86
5
96
5
5
96
5
5
96
5
5
96
5
5
96
5
5
96
5
5
96
5
5
96
5
5
96
5
5
96
5
5
96
5
5
96
5
5
96
5
5
96
5
5
96
5
5
36
1
5
36
1
5
36
1
5
36
1
5
36
1
5
36
1
5
36
1
5
36
1
5
96
5
5
96
5
5
96
5
5
36
1
5
96
5
5
96
4
5
96
5
5
2
1
4
1
1
2
96
5
4
0
96
5
5
96
5
5
96
5
5
96
4
5
96
4
4
2
1
90
1
89
36
1
5
2
0
2

2
0
0
2147483647
2
1
0
0
96
5
5
96
5
5
36
1
5
36
1
5
36
0
5
36
1
4
5
1
48
1
49
1
50
1
95
1
96
2
1
5
36
1
5
96
4
5
2
0
5
2
0
5
96
5
5
96
5
5
96
4
5
96
5
5
96
5
5
96
5
5
96
5
5
96
5
5
96
5
5
2
1
0
-10000
36
0
5
96
5
5
96
5
5
96
5
5
96
5
5
96
5
5
96
5
5
96
5
5
96
5
5
96
5
1
-1
96
5
2
impossible password to type
2
0
5
96
5
5
96
5
5
96
5
5
96
5
0
2147483647
2
1
4
4
0
0
0
-6548
0
0
0
0
36
0
0
0
2
0
5
2
0
0
0
96
4
4
1
2
Editor_Owner
2
1
2
This player owns all editor-related verbs.
96
5
4
2
0
2277
0
1084848672
36
1
#97
HTTP Server

0
2
2
-1
-1
5
-1
-1
3
handle_connection
2
173
-1
tell_key
2
173
-1
gen_key
2
173
-1
5
guests
master_key
alpha
nonalpha
help_msg
17
4
0
2
5
2
902894a52d08e5cf3c45812a321cac36
2
5
2
0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz
2
5
2
 !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~
2
5
4
12
2
HTTP Server
2
-----------
2

2
To use this device, all you need to do is put a .html property on your object. It will then serve a web page at http://SITE:PORT/OBJID where OBJID is the object's ID number without the # sign, SITE is your MOO's address, and PORT is your MOO's port.
2
If it starts with the line <HTML>, the server will automatically serve it up as HTML code.
2
Otherwise, you will need to use your own HTTP headers (for example, if you want to serve plain text instead of HTML).
2

2
If you want to have more functionality than this, you can make a verb :html(args), that does the same thing. The args are a list of anything after the OBJID divided by /.
2
For example, the URL http://SITE:PORT/123/foo/10 will result in a call to #123:html("foo","10"). This call should return a list of strings that is HTML, or HTTP stuff with the appropriate headers.
2

2
Additionally, your object can call http:tell_key(player). This will generate a special keyed URL for that player, so when your :html() verb is called, the built-in variable PLAYER will be set to the person who was issued the key.
2
This verb tells the player their custom key directly.
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
5
2
5
0
0
2
4
4
1
2
HTTP Server
2
5
5
2
5
4
2
0
7309
0
1529542623
36
1
#0:0
"...This code should only be run as a server task...";
if (callers())
return E_PERM;
endif
if (typeof(h = $network:incoming_connection(player)) == OBJ)
"connected to an object";
return h;
elseif (h)
return 0;
endif
host = $string_utils:connection_hostname(connection_name(player));
if ($login:redlisted(host))
boot_player(player);
server_log(tostr("REDLISTED: ", player, " from ", host));
return 0;
endif
"HTTP server by Krate";
try
newargs = $http:handle_connection(@args);
if (!newargs)
return 0;
endif
args = newargs;
except v (ANY)
endtry
"...checks to see if the login is spamming the server with too many commands...";
if (!$login:maybe_limit_commands())
args = $login:parse_command(@args);
return $login:(args[1])(@listdelete(args, 1));
endif
.
#0:1
if (!callers())
$last_restart_time = time();
$network:server_started();
$login:server_started();
endif
.
#0:2
set_task_perms($no_one);
{?core_variant = "Imnotsurewhatthisshouldbeyetdontdependonthis", ?in_mcd = 0} = args;
if (in_mcd)
{vb, perms, loc} = callers()[1][2..4];
if (((vb != "make-core-database") || (!perms.wizard)) || (loc != $wiz))
raise(E_PERM);
endif
endif
core_objects = {};
proxy_original = proxy_incore = core_properties = skipped_parents = {};
todo = {{#0, {"sysobj", "owner"}}};
"...lucky for us #0 has a self-referential property";
while ({?sfc, @todo} = todo)
{o, ?props_to_follow = {}} = sfc;
o_props = {};
for p in (props_to_follow)
v = o.(p);
if ((typeof(v) != OBJ) || (!valid(v)))
continue p;
endif
o_props = {@o_props, p};
if ((v in proxy_original) || (v in core_objects))
"...we have been here before...";
continue p;
endif
if ($object_utils:has_callable_verb(v, "proxy_for_core"))
"...proxy_for_core() returns an object to";
"...take the place of v in the final core.";
proxy_original[1..0] = {v};
try
vnew = v:proxy_for_core(core_variant, in_mcd);
if (typeof(vnew) != OBJ)
raise(E_TYPE, "returned non-object");
elseif ((vnew in proxy_original) > 1)
raise(E_RECMOVE, "proxy loop");
endif
except e (ANY)
player:notify(tostr("Error from ", v, ":proxy_for_core => ", e[2]));
player:notify(toliteral(e[4]));
vnew = #-1;
endtry
if (vnew == v)
proxy_original[1..1] = {};
else
proxy_incore[1..0] = {vnew};
if ((vnew in core_objects) || (!valid(vnew)))
continue p;
endif
v = vnew;
endif
endif
if ($object_utils:has_callable_verb(v, "include_for_core"))
"...include_for_core() returns a list of properties on v";
"...to be searched for additional core objects.";
try
v_props = v:include_for_core(core_variant);
if (typeof(v_props) != LIST)
raise(E_TYPE, "returned non-list");
endif
if (v_props)
todo = {@todo, {v, v_props}};
endif
except e (ANY)
player:notify(tostr("Error from ", v, ":include_for_core => ", e[2]));
player:notify(toliteral(e[4]));
endtry
endif
core_objects = setadd(core_objects, v);
endfor
core_properties = {@core_properties, {o, o_props}};
endwhile
for o in (core_objects)
p = parent(o);
while (valid(p))
if (!(p in core_objects))
skipped_parents = setadd(skipped_parents, p);
endif
p = parent(p);
endwhile
endfor
if (verb == "core_object_info")
"... what make-core-database needs";
return {core_objects, core_properties, skipped_parents, proxy_original, proxy_incore};
else
"... what most people care about";
return core_objects;
endif
.
#0:3
if (caller_perms().wizard)
pass(@args);
`delete_property(this, "mail_name_db") ! E_PROPNF';
`delete_verb(this, "do_command") ! E_VERBNF';
$core_history = {{$network.MOO_name, server_version(), time()}, @$core_history};
$shutdown_message = "";
$shutdown_time = 0;
$dump_interval = 3600;
$gripe_recipients = {player};
$class_registry = {{"generics", "Generic objects intended for use as the parents of new objects", {$room, $exit, $thing, $note, $letter, $container, $root_class, $player, $prog, $wiz, $generic_editor, $mail_recipient, $mail_agent}}, {"utilities", "Objects holding useful general-purpose verbs", children($generic_utils)}};
for v in ({"do_login_command", "server_started"})
c = {};
for i in (verb_code(this, v))
c = {@c, strsub(i, "$local.login", "$login")};
endfor
set_verb_code(#0, v, c);
endfor
endif
.
#0:4
"Copied from The System Object (#0):user_connected by Slartibartfast (#4242) Sun May 21 18:14:16 1995 PDT";
if (callers())
return;
endif
user = args[1];
set_task_perms(user);
try
user.location:confunc(user);
user:confunc();
except id (ANY)
user:tell("Confunc failed: ", id[2], ".");
for tb in (id[4])
user:tell("... called from ", tb[4], ":", tb[2], (tb[4] != tb[1]) ? tostr(" (this == ", tb[1], ")") | "", ", line ", tb[6]);
endfor
user:tell("(End of traceback)");
endtry
.
#0:5
if (callers())
return;
endif
if (args[1] < #0)
"not logged in user.  probably should do something clever here involving Carrot's no-spam hack.  --yduJ";
return;
endif
user = args[1];
user.last_disconnect_time = time();
set_task_perms(user);
where = user.location;
`user:disfunc() ! ANY => 0';
if (user.location != where)
`where.location:disfunc(user) ! ANY => 0';
endif
`user.location:disfunc(user) ! ANY => 0';
.
#0:6
"chparent(object, new-parent) -- see help on the builtin.";
who = caller_perms();
{what, papa} = args;
if (typeof(what) != OBJ)
retval = E_TYPE;
elseif (!valid(what))
retval = E_INVARG;
elseif (typeof(papa) != OBJ)
retval = E_TYPE;
elseif ((!valid(papa)) && (papa != #-1))
retval = E_INVIND;
elseif (!$perm_utils:controls(who, what))
retval = E_PERM;
elseif ((is_player(what) && (!$object_utils:isa(papa, $player_class))) && (!who.wizard))
retval = E_PERM;
elseif ((is_player(what) && (!$object_utils:isa(what, $player_class))) && (!who.wizard))
retval = E_PERM;
elseif ((children(what) && $object_utils:isa(what, $player_class)) && (!$object_utils:isa(papa, $player_class)))
retval = E_PERM;
elseif ((is_player(what) && (what in $wiz_utils.chparent_restricted)) && (!who.wizard))
retval = E_PERM;
elseif ((((what.location == $mail_agent) && $object_utils:isa(what, $mail_recipient)) && (!$object_utils:isa(papa, $mail_recipient))) && (!who.wizard))
retval = E_PERM;
elseif ((!valid(papa)) || ($perm_utils:controls(who, papa) || papa.f))
retval = `chparent(@args) ! ANY';
else
retval = E_PERM;
endif
return ((typeof(retval) == ERR) && $code_utils:dflag_on()) ? raise(retval) | retval;
.
#0:7
"add_verb() -- see help on the builtin for more information. This verb is called by the server when $server_options.protect_add_verb exists and is true and caller_perms() are not wizardly.";
who = caller_perms();
what = args[1];
info = args[2];
if (typeof(what) != OBJ)
retval = E_TYPE;
elseif (!valid(what))
retval = E_INVARG;
elseif ((!$perm_utils:controls(who, what)) && (!what.w))
"caller_perms() is not allowed to hack on the object in question";
retval = E_PERM;
elseif (!$perm_utils:controls(who, info[1]))
"caller_perms() is not permitted to add a verb with the specified owner.";
retval = E_PERM;
elseif (index(info[2], "w") && (!$server_options.permit_writable_verbs))
retval = E_INVARG;
elseif (!$quota_utils:verb_addition_permitted(who))
retval = E_QUOTA;
elseif (((what.owner != who) && (!who.wizard)) && (!$quota_utils:verb_addition_permitted(what.owner)))
retval = E_QUOTA;
elseif (!who.programmer)
retval = E_PERM;
else
"we now know that the caller's perms control the object or the object is writable, and we know that the caller's perms control the prospective verb owner (by more traditional means)";
retval = `add_verb(@args) ! ANY';
endif
return ((typeof(retval) == ERR) && $code_utils:dflag_on()) ? raise(retval) | retval;
.
#0:8
"add_property() -- see help on the builtin for more information. This verb is called by the server when $server_options.protect_add_property exists and is true and caller_perms() are not wizardly.";
who = caller_perms();
{what, propname, value, info} = args;
if (typeof(what) != OBJ)
retval = E_TYPE;
elseif (!valid(what))
retval = E_INVARG;
elseif ((!$perm_utils:controls(who, what)) && (!what.w))
retval = E_PERM;
elseif (!$perm_utils:controls(who, info[1]))
retval = E_PERM;
elseif (!$quota_utils:property_addition_permitted(who))
retval = E_QUOTA;
elseif (((what.owner != who) && (!who.wizard)) && (!$quota_utils:property_addition_permitted(what.owner)))
retval = E_QUOTA;
"elseif (!who.programmer)";
"  return E_PERM;     I wanted to do this, but $builder:@newmessage relies upon nonprogs being able to call add_property.  --Nosredna";
elseif ((propname in {"object_size", "size_quota", "queued_task_limit"}) && (!who.wizard))
retval = E_PERM;
else
"we now know that the caller's perms control the object (or the object is writable), and that the caller's perms are permitted to control the new property's owner.";
retval = `add_property(@args) ! ANY';
endif
return ((typeof(retval) == ERR) && $code_utils:dflag_on()) ? raise(retval) | retval;
.
#0:9
"recycle(object) -- see help on the builtin. This verb is called by the server when $server_options.protect_recycle exists and is true and caller_perms() are not wizardly.";
if (!valid(what = args[1]))
retval = E_INVARG;
elseif (!$perm_utils:controls(who = caller_perms(), what))
retval = E_PERM;
elseif ((p = is_player(what)) && (!who.wizard))
for p in ($wiz_utils:connected_wizards_unadvertised())
p:tell($string_utils:pronoun_sub("%N (%#) is currently trying to recycle %t (%[#t])", who, what));
endfor
retval = E_PERM;
else
if (p)
$wiz_utils:unset_player(what);
endif
$recycler:kill_all_tasks(what);
retval = `recycle(what) ! ANY';
endif
return ((typeof(retval) == ERR) && $code_utils:dflag_on()) ? raise(retval) | retval;
.
#0:10
if (callers())
return;
endif
if ($object_utils:isa(user = args[1], $guest))
"from $guest:boot";
oldloc = user.location;
move(user, $nothing);
"..force enterfunc to be called so that the newbie gets a room description.";
move(user, user.home);
user:do_reset();
if ($object_utils:isa(oldloc, $room))
oldloc:announce("In the distance you hear someone's alarm clock going off.");
if (oldloc != user.location)
oldloc:announce(user.name, " wavers and vanishes into insubstantial mist.");
else
oldloc:announce(user.name, " undergoes a wrenching personality shift.");
endif
endif
set_task_perms(user);
`user:confunc() ! ANY';
endif
.
#0:11
"set_verb_info() -- see help on the builtin for more information. This verb is called by the server when $server_options.protect_set_verb_info exists and is true and caller_perms() are not wizardly.";
{o, v, i} = args;
if (typeof(vi = `verb_info(o, v) ! ANY') == ERR)
"probably verb doesn't exist";
retval = vi;
elseif (!$perm_utils:controls(cp = caller_perms(), vi[1]))
"perms don't control the current verb owner";
retval = E_PERM;
elseif ((typeof(i) != LIST) || (typeof(no = i[1]) != OBJ))
"info is malformed";
retval = E_TYPE;
elseif ((!valid(no)) || (!is_player(no)))
"invalid new verb owner";
retval = E_INVARG;
elseif (!$perm_utils:controls(cp, no))
"perms don't control prospective verb owner";
retval = E_PERM;
elseif (index(i[2], "w") && (!`$server_options.permit_writable_verbs ! E_PROPNF, E_INVIND => 1'))
retval = E_INVARG;
else
retval = `set_verb_info(o, v, i) ! ANY';
endif
return ((typeof(retval) == ERR) && $code_utils:dflag_on()) ? raise(retval) | retval;
.
#0:12
m = `match(@args) ! ANY';
return ((typeof(m) == ERR) && $code_utils:dflag_on()) ? raise(m) | m;
if ((length(args[1]) > 256) && index(args[2], "*"))
return E_INVARG;
else
return match(@args);
endif
.
#0:13
r = `rmatch(@args) ! ANY';
return ((typeof(r) == ERR) && $code_utils:dflag_on()) ? raise(r) | r;
if ((length(args[1]) > 256) && index(args[2], "*"))
return E_INVARG;
else
return rmatch(@args);
endif
.
#0:14
"Copied from The System Object (#0):checkpoint_finished [verb author Heathcliff (#89987)] at Fri May  7 12:02:22 2004 PDT";
callers() && raise(E_PERM);
$login.checkpoint_in_progress = 0;
`$local.checkpoint_notification:checkpoint_finished(@args) ! ANY';
.
#0:15
"do_out_of_band_command -- a cheap and very dirty do_out_of_band verb.  Forwards to verb on player with same name if it exists, otherwise forwards to $login.  May only be called by the server in response to an out of band command, otherwise E_PERM is returned.";
if (((caller == #-1) && (caller_perms() == #-1)) && (callers() == {}))
if (valid(player) && is_player(player))
set_task_perms(player);
$object_utils:has_callable_verb(player, "do_out_of_band_command") && player:do_out_of_band_command(@args);
else
$login:do_out_of_band_command(@args);
endif
else
return E_PERM;
endif
.
#0:16
if (!callers())
{code, msg, value, stack, traceback} = args;
if (!$object_utils:connected(player))
"Mail the player the traceback if e isn't connected.";
$mail_agent:send_message(#0, player, {"traceback", $gripe_recipients}, traceback);
endif
"now let the player do something with it if e wants...";
return `player:(verb)(@args) ! ANY';
endif
.
#0:17
callers() && raise(E_PERM);
$login.checkpoint_in_progress = 1;
`$local.checkpoint_notification:checkpoint_started(@args) ! ANY';
.
#0:18
"Copied from Jay (#3920):bf_force_input Mon Jun 16 20:55:27 1997 PDT";
"force_input(conn, line [, at-front])";
"see help on the builtin for more information. This verb is called by the server when $server_options.protect_force_input exists and is true and caller_perms() are not wizardly.";
{conn, line, ?at_front = 0} = args;
if (caller_perms() != conn)
retval = E_PERM;
elseif (conn in $login.newted)
retval = E_PERM;
else
retval = `force_input(@args) ! ANY';
this.force_input_count = this.force_input_count + 1;
endif
return ((typeof(retval) == ERR) && $code_utils:dflag_on()) ? raise(retval) | retval;
.
#0:19
"Let's keep bozos from partying.  --Nosredna the partypooper";
return pass(#-1);
.
#0:20
who = caller_perms();
retval = 0;
try
{what, propname, info} = args;
except (E_ARGS)
retval = E_ARGS;
endtry
try
{owner, perms, ?newname = 0} = info;
except (E_ARGS)
retval = E_ARGS;
except (E_TYPE)
retval = E_TYPE;
endtry
if (retval != 0)
elseif ((newname in {"object_size", "size_quota", "queued_task_limit"}) && (!who.wizard))
retval = E_PERM;
else
set_task_perms(who);
retval = `set_property_info(@args) ! ANY';
endif
return ((typeof(retval) == ERR) && $code_utils:dflag_on()) ? raise(retval) | retval;
.
#0:21
return properties(this);
.
#0:22
if (!callers())
{resource, stack, traceback} = args;
if (!$object_utils:connected(player))
"Mail the player the traceback if e isn't connected.";
$mail_agent:send_message(#0, player, {"traceback", $gripe_recipients}, traceback);
endif
"now let the player do something with it if e wants...";
return `player:(verb)(@args) ! ANY';
endif
.
#1:0
if (typeof(this.owner.owned_objects) == LIST)
this.owner.owned_objects = setadd(this.owner.owned_objects, this);
endif
if ((caller == this) || $perm_utils:controls(caller_perms(), this))
if (is_clear_property(this, "object_size"))
"If this isn't clear, then we're being hacked.";
this.object_size = {0, 0};
endif
this.key = 0;
else
return E_PERM;
endif
.
#1:1
if ((caller == this) || $perm_utils:controls(caller_perms(), this))
try
if ((typeof(this.owner.owned_objects) == LIST) && (!is_clear_property(this.owner, "owned_objects")))
this.owner.owned_objects = setremove(this.owner.owned_objects, this);
$recycler.lost_souls = setadd($recycler.lost_souls, this);
endif
except (ANY)
"Oy, doesn't have a .owned_objects??, or maybe .owner is $nothing";
"Should probably do something...like send mail somewhere.";
endtry
else
return E_PERM;
endif
.
#1:2
"set_name(newname) attempts to change this.name to newname";
"  => E_PERM   if you don't own this or aren't its parent, or are a player trying to do an end-run around $player_db...";
if ((!caller_perms().wizard) && (is_player(this) || ((caller_perms() != this.owner) && (this != caller))))
return E_PERM;
else
return (typeof(e = `this.name = args[1] ! ANY') != ERR) || e;
endif
.
#1:3
return this.name;
.
#1:4
return `this.namec ! E_PROPNF => $string_utils:capitalize(this:title())';
.
#1:5
"set_aliases(alias_list) attempts to change this.aliases to alias_list";
"  => E_PERM   if you don't own this or aren't its parent";
"  => E_TYPE   if alias_list is not a list";
"  => E_INVARG if any element of alias_list is not a string";
"  => 1        if aliases are set exactly as expected (default)";
"  => 0        if aliases were set differently than expected";
"              (children with custom :set_aliases should be aware of this)";
if (!($perm_utils:controls(caller_perms(), this) || (this == caller)))
return E_PERM;
elseif (typeof(aliases = args[1]) != LIST)
return E_TYPE;
else
for s in (aliases)
if (typeof(s) != STR)
return E_INVARG;
endif
endfor
this.aliases = aliases;
return 1;
endif
.
#1:6
c = this:contents();
return $string_utils:match(args[1], c, "name", c, "aliases");
.
#1:7
":match_object(string [,who])";
args[2..1] = {this};
return $string_utils:match_object(@args);
.
#1:8
"set_description(newdesc) attempts to change this.description to newdesc";
"  => E_PERM   if you don't own this or aren't its parent";
if (!($perm_utils:controls(caller_perms(), this) || (this == caller)))
return E_PERM;
elseif (typeof(desc = args[1]) in {LIST, STR})
this.description = desc;
return 1;
else
return E_TYPE;
endif
.
#1:9
return this.description;
.
#1:10
desc = this:description();
if (desc)
player:tell_lines(desc);
else
player:tell("You see nothing special.");
endif
.
#1:11
if (is_player(this))
notify(this, @args);
endif
.
#1:12
this:notify(tostr(@args));
.
#1:13
lines = args[1];
if (typeof(lines) == LIST)
for line in (lines)
this:tell(line);
endfor
else
this:tell(lines);
endif
.
#1:14
set_task_perms(caller_perms());
return this:acceptable(@args);
.
#1:15
set_task_perms(this.owner);
return `move(this, args[1]) ! ANY';
.
#1:16
"eject(victim) --- usable by the owner of this to remove victim from this.contents.  victim goes to its home if different from here, or $nothing or $player_start according as victim is a player.";
"eject_basic(victim) --- victim goes to $nothing or $player_start according as victim is a player; victim:moveto is not called.";
what = args[1];
nice = verb != "eject_basic";
perms = caller_perms();
if ((!perms.wizard) && (perms != this.owner))
raise(E_PERM);
elseif ((!(what in this.contents)) || what.wizard)
return 0;
endif
if ((((nice && $object_utils:has_property(what, "home")) && (typeof(where = what.home) == OBJ)) && (where != this)) && (is_player(what) ? `where:accept_for_abode(what) ! ANY' | `where:acceptable(what) ! ANY'))
else
where = is_player(what) ? $player_start | $nothing;
endif
fork (0)
if (what.location == this)
"It didn't move when we asked it to, or :moveto is broken. Force it.";
move(what, where);
endif
endfork
return nice ? `what:moveto(where) ! ANY' | `move(what, where) ! ANY';
.
#1:17
return (this.key == 0) || $lock_utils:eval_key(this.key, args[1]);
.
#1:18
set_task_perms((caller_perms() != #-1) ? caller_perms() | player);
$command_utils:do_huh(verb, args);
.
#1:19
":set_message(msg_name,new_value)";
"Does the actual dirty work of @<msg_name> object is <new_value>";
"changing the raw value of the message msg_name to be new_value.";
"Both msg_name and new_value should be strings, though their interpretation is up to the object itself.";
" => error value (use E_PROPNF if msg_name isn't recognized)";
" => string error message if something else goes wrong.";
" => 1 (true non-string) if the message is successfully set";
" => 0 (false non-error) if the message is successfully `cleared'";
if (!((caller == this) || $perm_utils:controls(caller_perms(), this)))
return E_PERM;
else
return `this.(args[1] + "_msg") = args[2] ! ANY' && 1;
endif
.
#1:20
"do_examine(examiner)";
"the guts of examine";
"call a series of verbs and report their return values to the player";
who = args[1];
"if (caller == this || caller == who)";
if (caller == who)
"set_task_perms();";
who:notify_lines(this:examine_names(who) || {});
"this:examine_names(who);";
who:notify_lines(this:examine_owner(who) || {});
"this:examine_owner(who);";
who:notify_lines(this:examine_desc(who) || {});
"this:examine_desc(who);";
who:notify_lines(this:examine_key(who) || {});
"this:examine_key(who);";
who:notify_lines(this:examine_contents(who) || {});
who:notify_lines(this:examine_verbs(who) || {});
else
return E_PERM;
endif
.
#1:21
"examine_key(examiner)";
"return a list of strings to be told to the player, indicating what the key on this type of object means, and what this object's key is set to.";
"the default will only tell the key to a wizard or this object's owner.";
who = args[1];
if (((caller == this) && $perm_utils:controls(who, this)) && (this.key != 0))
return {tostr("Key:  ", $lock_utils:unparse_key(this.key))};
endif
.
#1:22
"examine_names(examiner)";
"Return a list of strings to be told to the player, indicating the name and aliases (and, by default, the object number) of this.";
return {tostr(this.name, " (aka ", $string_utils:english_list({tostr(this), @this.aliases}), ")")};
.
#1:23
"examine_desc(who) - return the description, probably";
"who is the player examining";
"this should probably go away";
desc = this:description();
if (desc)
if (typeof(desc) != LIST)
desc = {desc};
endif
return desc;
else
return {"(No description set.)"};
endif
.
#1:24
"examine_contents(examiner)";
"by default, calls :tell_contents.";
"Should probably go away.";
who = args[1];
if (caller == this)
try
this:tell_contents(this.contents, this.ctype);
except (ANY)
"Just ignore it. We shouldn't care about the contents unless the object wants to tell us about them via :tell_contents ($container, $room)";
endtry
endif
.
#1:25
"Return a list of strings to be told to the player.  Standard format says \"Obvious verbs:\" followed by a series of lines explaining syntax for each usable verb.";
if (caller != this)
return E_PERM;
endif
who = args[1];
name = dobjstr;
vrbs = {};
commands_ok = `this:examine_commands_ok(who) ! ANY => 0';
dull_classes = {$root_class, $room, $player, $prog, $builder};
what = this;
hidden_verbs = this:hidden_verbs(who);
while (what != $nothing)
$command_utils:suspend_if_needed(0);
if (!(what in dull_classes))
for i in [1..length(verbs(what))]
$command_utils:suspend_if_needed(0);
info = verb_info(what, i);
syntax = verb_args(what, i);
if (this:examine_verb_ok(what, i, info, syntax, commands_ok, hidden_verbs))
{dobj, prep, iobj} = syntax;
if (syntax == {"any", "any", "any"})
prep = "none";
endif
if (prep != "none")
for x in ($string_utils:explode(prep, "/"))
if (length(x) <= length(prep))
prep = x;
endif
endfor
endif
"This is the correct way to handle verbs ending in *";
vname = info[3];
while (j = index(vname, "* "))
vname = tostr(vname[1..j - 1], "<anything>", vname[j + 1..$]);
endwhile
if (vname[$] == "*")
vname = vname[1..$ - 1] + "<anything>";
endif
vname = strsub(vname, " ", "/");
rest = "";
if (prep != "none")
rest = " " + ((prep == "any") ? "<anything>" | prep);
if (iobj != "none")
rest = tostr(rest, " ", (iobj == "this") ? name | "<anything>");
endif
endif
if (dobj != "none")
rest = tostr(" ", (dobj == "this") ? name | "<anything>", rest);
endif
vrbs = setadd(vrbs, ("  " + vname) + rest);
endif
endfor
endif
what = parent(what);
endwhile
if ($code_utils:verb_or_property(this, "help_msg"))
vrbs = {@vrbs, tostr("  help ", dobjstr)};
endif
return vrbs && {"Obvious verbs:", @vrbs};
.
#1:26
":get_message(msg_name)";
"Use this to obtain a given user-customizable message's raw value, i.e., the value prior to any pronoun-substitution or incorporation of any variant elements --- the value one needs to supply to :set_message().";
"=> error (use E_PROPNF if msg_name isn't recognized)";
"=> string or list-of-strings raw value";
"=> {2, @(list of {msg_name_n,rawvalue_n} pairs to give to :set_message)}";
"=> {1, other kind of raw value}";
"=> {E_NONE, error message} ";
if (!((caller == this) || $perm_utils:controls(caller_perms(), this)))
return E_PERM;
elseif (((t = typeof(msg = `this.(args[1] + "_msg") ! ANY')) in {ERR, STR}) || (((t == LIST) && msg) && (typeof(msg[1]) == STR)))
return msg;
else
return {1, msg};
endif
.
#1:27
try
this.location:(verb)(@args);
except (ANY)
endtry
.
#1:28
if (caller_perms().wizard)
deletes = {};
for vnum in [1..length(verbs(this))]
$command_utils:suspend_if_needed(0);
for name in ($string_utils:explode(verb_info(this, vnum)[3]))
if (rindex(name, "(old)") == max(1, length(name) - 4))
deletes[1..0] = {vnum};
break;
elseif (rindex(name, "(core)") == max(1, length(name) - 5))
deletes[1..0] = {vnum};
set_verb_code(this, name[1..$ - 6], verb_code(this, vnum));
break;
endif
endfor
endfor
for vnum in (deletes)
delete_verb(this, vnum);
endfor
endif
.
#1:29
"Returns a list of the objects that are apparently inside this one.  Don't confuse this with .contents, which is a property kept consistent with .location by the server.  This verb should be used in `VR' situations, for instance when looking in a room, and does not necessarily have anything to do with the value of .contents (although the default implementation does).  `Non-VR' commands (like @contents) should look directly at .contents.";
return this.contents;
.
#1:30
"examine_verb_ok(loc, index, info, syntax, commands_ok, hidden_verbs)";
"loc is the object that defines the verb; index is which verb on the object; info is verb_info; syntax is verb_args; commands_ok is determined by this:commands_ok, probably, but passed in so we don't have to calculate it for each verb.";
"hidden_verbs is passed in for the same reasons.  It should be a list, each of whose entries is either a string with the full verb name to be hidden (e.g., \"d*rop th*row\") or a list of the form {verb location, full verb name, args}.";
if ((caller == this) || $perm_utils:controls(caller_perms(), this))
{loc, index, info, syntax, commands_ok, hidden_verbs} = args;
vname = info[3];
return (((((syntax[2..3] != {"none", "this"}) && (!index(vname, "("))) && (commands_ok || ("this" in syntax))) && `verb_code(loc, index) ! ANY') && (!(vname in hidden_verbs))) && (!({loc, vname, syntax} in hidden_verbs));
else
return E_PERM;
endif
.
#1:31
"return 1 if the object can hear a :tell, or cares. Useful for active objects that want to stop when nothing is listening.";
return 0;
.
#1:32
"hidden_verbs(who)";
"returns a list of verbs on this that should be hidden from examine";
"the player who's examining is passed in, so objects can hide verbs from specific players";
"verbs are returned as {location, full_verb_name, args} or just full_verb_name.  full_verb name is what shows up in verb_info(object, verb)[2], for example \"d*op th*row\".";
if ((caller == this) || $perm_utils:controls(caller_perms(), this))
hidden = {};
what = this;
while (what != $nothing)
for i in [1..length(verbs(what))]
info = verb_info(what, i);
if (!index(info[2], "r"))
hidden = setadd(hidden, {what, info[3], verb_args(what, i)});
endif
endfor
what = parent(what);
endwhile
return hidden;
else
return E_PERM;
endif
.
#1:33
"examine_owner(examiner)";
"Return a list of strings to be told to the player, indicating who owns this.";
return {tostr("Owned by ", this.owner.name, ".")};
.
#1:34
return;
.
#1:35
lines = args[1];
if (typeof(lines) == LIST)
for line in (lines)
this:tell(line);
$command_utils:suspend_if_needed(0);
endfor
else
this:tell(lines);
endif
.
#1:36
return 0;
"intended as a 'quiet' way to determine if :accept will succeed. Currently, some objects have a noisy :accept verb since it is the only thing that a builtin move() call is guaranteed to call.";
"if you want to tell, before trying, whether :accept will fail, use :acceptable instead. Normally, they'll do the same thing.";
.
#3:0
if ((((cp = caller_perms()) == player) || $perm_utils:controls(cp, player)) || (caller == this))
"Need the first check because guests don't control themselves";
this:look_self(player.brief);
this:announce($string_utils:pronoun_sub("%N %<has> connected.", player));
endif
.
#3:1
if ((((cp = caller_perms()) == player) || $perm_utils:controls(cp, player)) || (caller == this))
this:announce($string_utils:pronoun_sub("%N %<has> disconnected.", player));
"need the first check since guests don't control themselves";
if (!$object_utils:isa(player, $guest))
"guest disfuncs are handled by $guest:disfunc. Don't add them here";
$housekeeper:move_players_home(player);
endif
endif
.
#3:2
try
player:tell("You say, \"", argstr, "\"");
this:announce(player.name, " ", $gender_utils:get_conj("says", player), ", \"", argstr, "\"");
except (ANY)
"Don't really need to do anything but ignore the idiot who has a bad :tell";
endtry
.
#3:3
if ((argstr != "") && (argstr[1] == ":"))
this:announce_all(player.name, argstr[2..length(argstr)]);
else
this:announce_all(player.name, " ", argstr);
endif
.
#3:4
for dude in (setremove(this:contents(), player))
try
dude:tell(@args);
except (ANY)
"Just skip the dude with the bad :tell";
continue dude;
endtry
endfor
.
#3:5
what = args[1];
if (what)
yes = $failed_match;
for e in (this.exits)
if (valid(e) && (what in {e.name, @e.aliases}))
if (yes == $failed_match)
yes = e;
elseif (yes != e)
return $ambiguous_match;
endif
endif
endfor
return yes;
else
return $nothing;
endif
.
#3:6
set_task_perms(caller_perms());
return `this.exits = setadd(this.exits, args[1]) ! E_PERM' != E_PERM;
.
#3:7
{contents, ctype} = args;
if ((!this.dark) && (contents != {}))
if (ctype == 0)
player:tell("Contents:");
for thing in (contents)
player:tell("  ", thing:title());
endfor
elseif (ctype == 1)
for thing in (contents)
if (is_player(thing))
player:tell($string_utils:pronoun_sub(tostr("%N ", $gender_utils:get_conj("is", thing), " here."), thing));
else
player:tell("You see ", thing:title(), " here.");
endif
endfor
elseif (ctype == 2)
player:tell("You see ", $string_utils:title_list(contents), " here.");
elseif (ctype == 3)
players = things = {};
for x in (contents)
if (is_player(x))
players = {@players, x};
else
things = {@things, x};
endif
endfor
if (things)
player:tell("You see ", $string_utils:title_list(things), " here.");
endif
if (players)
player:tell($string_utils:title_listc(players), (length(players) == 1) ? " " + $gender_utils:get_conj("is", players[1]) | " are", " here.");
endif
endif
endif
.
#3:8
if (!$perm_utils:controls(valid(caller_perms()) ? caller_perms() | player, this))
player:tell("Sorry, only the owner of a room may list its exits.");
elseif (this.exits == {})
player:tell("This room has no conventional exits.");
else
try
for exit in (this.exits)
try
player:tell(exit.name, " (", exit, ") leads to ", valid(exit.dest) ? exit.dest.name | "???", " (", exit.dest, ") via {", $string_utils:from_list(exit.aliases, ", "), "}.");
except (ANY)
player:tell("Bad exit or missing .dest property:  ", $string_utils:nn(exit));
continue exit;
endtry
endfor
except (E_TYPE)
player:tell("Bad .exits property. This should be a list of exit objects. Please fix this.");
endtry
endif
.
#3:9
{?brief = 0} = args;
player:tell(this:title());
if (!brief)
pass();
endif
this:tell_contents(setremove(this:contents(), player), this.ctype);
.
#3:10
what = args[1];
return this:is_unlocked_for(what) && (((this:free_entry(@args) || ((what == this.blessed_object) && (task_id() == this.blessed_task))) || (what.owner == this.owner)) || ((typeof(this.residents) == LIST) && ((what in this.residents) || (what.owner in this.residents))));
.
#3:11
set_task_perms(caller_perms());
return `this.entrances = setadd(this.entrances, args[1]) ! E_PERM' != E_PERM;
.
#3:12
if (caller in {@this.entrances, this})
this.blessed_object = args[1];
this.blessed_task = task_id();
endif
.
#3:13
if (!$perm_utils:controls(valid(caller_perms()) ? caller_perms() | player, this))
player:tell("Sorry, only the owner of a room may list its entrances.");
elseif (this.entrances == {})
player:tell("This room has no conventional entrances.");
else
try
for exit in (this.entrances)
try
player:tell(exit.name, " (", exit, ") comes from ", valid(exit.source) ? exit.source.name | "???", " (", exit.source, ") via {", $string_utils:from_list(exit.aliases, ", "), "}.");
except (ANY)
player:tell("Bad entrance object or missing .source property: ", $string_utils:nn(exit));
continue exit;
endtry
endfor
except (E_TYPE)
player:tell("Bad .entrances property. This should be a list of exit objects. Please fix this.");
endtry
endif
.
#3:14
if ((!args) || (!(dir = args[1])))
player:tell("You need to specify a direction.");
return E_INVARG;
elseif (valid(exit = player.location:match_exit(dir)))
exit:invoke();
if (length(args) > 1)
old_room = player.location;
"Now give objects in the room we just entered a chance to act.";
suspend(0);
if (player.location == old_room)
"player didn't move or get moved while we were suspended";
player.location:go(@listdelete(args, 1));
endif
endif
elseif (exit == $failed_match)
player:tell("You can't go that way (", dir, ").");
else
player:tell("I don't know which direction `", dir, "' you mean.");
endif
.
#3:15
if ((dobjstr == "") && (!prepstr))
this:look_self();
elseif ((prepstr != "in") && (prepstr != "on"))
if ((!dobjstr) && (prepstr == "at"))
dobjstr = iobjstr;
iobjstr = "";
else
dobjstr = dobjstr + (prepstr && ((dobjstr && " ") + prepstr));
dobjstr = dobjstr + (iobjstr && ((dobjstr && " ") + iobjstr));
endif
dobj = this:match_object(dobjstr);
if (!$command_utils:object_match_failed(dobj, dobjstr))
dobj:look_self();
endif
elseif (!iobjstr)
player:tell(verb, " ", prepstr, " what?");
else
iobj = this:match_object(iobjstr);
if (!$command_utils:object_match_failed(iobj, iobjstr))
if (dobjstr == "")
iobj:look_self();
elseif ((thing = iobj:match(dobjstr)) == $failed_match)
player:tell("I don't see any \"", dobjstr, "\" ", prepstr, " ", iobj.name, ".");
elseif (thing == $ambiguous_match)
player:tell("There are several things ", prepstr, " ", iobj.name, " one might call \"", dobjstr, "\".");
else
thing:look_self();
endif
endif
endif
.
#3:16
for dude in (this:contents())
try
dude:tell(@args);
except (ANY)
"Just ignore the dude with the stupid :tell";
continue dude;
endtry
endfor
.
#3:17
":announce_all_but(LIST objects to ignore, text)";
{ignore, @text} = args;
contents = this:contents();
for l in (ignore)
contents = setremove(contents, l);
endfor
for listener in (contents)
try
listener:tell(@text);
except (ANY)
"Ignure listener with bad :tell";
continue listener;
endtry
endfor
.
#3:18
object = args[1];
if (is_player(object) && (object.location == this))
player = object;
this:look_self(player.brief);
endif
if (object == this.blessed_object)
this.blessed_object = #-1;
endif
.
#3:19
return;
.
#3:20
exit = args[1];
if (caller != exit)
set_task_perms(caller_perms());
endif
return `this.exits = setremove(this.exits, exit) ! E_PERM' != E_PERM;
.
#3:21
exit = args[1];
if (caller != exit)
set_task_perms(caller_perms());
endif
return `this.entrances = setremove(this.entrances, exit) ! E_PERM' != E_PERM;
.
#3:22
set_task_perms(player);
if (!dobjstr)
player:tell("Usage:  @add-exit <exit-number>");
return;
endif
exit = this:match_object(dobjstr);
if ($command_utils:object_match_failed(exit, dobjstr))
return;
endif
if (!($exit in $object_utils:ancestors(exit)))
player:tell("That doesn't look like an exit object to me...");
return;
endif
try
dest = exit.dest;
except (E_PERM)
player:tell("You can't read the exit's destination to check that it's consistent!");
return;
endtry
try
source = exit.source;
except (E_PERM)
player:tell("You can't read that exit's source to check that it's consistent!");
return;
endtry
if (source == $nothing)
player:tell("That exit's source has not yet been set; set it to be this room, then run @add-exit again.");
return;
elseif (source != this)
player:tell("That exit wasn't made to be attached here; it was made as an exit from ", source.name, " (", source, ").");
return;
elseif (((typeof(dest) != OBJ) || (!valid(dest))) || (!($room in $object_utils:ancestors(dest))))
player:tell("That exit doesn't lead to a room!");
return;
endif
if (!this:add_exit(exit))
player:tell("Sorry, but you must not have permission to add exits to this room.");
else
player:tell("You have added ", exit, " as an exit that goes to ", exit.dest.name, " (", exit.dest, ") via ", $string_utils:english_list(setadd(exit.aliases, exit.name)), ".");
endif
.
#3:23
set_task_perms(player);
if (!dobjstr)
player:tell("Usage:  @add-entrance <exit-number>");
return;
endif
exit = this:match_object(dobjstr);
if ($command_utils:object_match_failed(exit, dobjstr))
return;
endif
if (!($exit in $object_utils:ancestors(exit)))
player:tell("That doesn't look like an exit object to me...");
return;
endif
try
dest = exit.dest;
except (E_PERM)
player:tell("You can't read the exit's destination to check that it's consistent!");
return;
endtry
if (dest != this)
player:tell("That exit doesn't lead here!");
return;
endif
if (!this:add_entrance(exit))
player:tell("Sorry, but you must not have permission to add entrances to this room.");
else
player:tell("You have added ", exit, " as an entrance that gets here via ", $string_utils:english_list(setadd(exit.aliases, exit.name)), ".");
endif
.
#3:24
"Make a mild attempt to keep people and objects from ending up in #-1 when people recycle a room";
if ((caller == this) || $perm_utils:controls(caller_perms(), this))
"... first try spilling them out onto the floor of enclosing room if any";
if (valid(this.location))
for x in (this.contents)
try
x:moveto(this.location);
except (ANY)
continue x;
endtry
endfor
endif
"... try sending them home...";
for x in (this.contents)
if (is_player(x))
if ((typeof(x.home) == OBJ) && valid(x.home))
try
x:moveto(x.home);
except (ANY)
continue x;
endtry
endif
if (x.location == this)
move(x, $player_start);
endif
elseif (valid(x.owner))
try
x:moveto(x.owner);
except (ANY)
continue x;
endtry
endif
endfor
pass(@args);
else
return E_PERM;
endif
.
#3:25
set_task_perms((caller_perms() == #-1) ? player | caller_perms());
exit = this:match_exit(verb);
if (valid(exit))
exit:invoke();
elseif (exit == $failed_match)
player:tell("You can't go that way.");
else
player:tell("I don't know which direction `", verb, "' you mean.");
endif
.
#3:26
set_task_perms(player);
if ($command_utils:object_match_failed(dobj, dobjstr))
return;
elseif (dobj.location != this)
is = $gender_utils:get_conj("is", dobj);
player:tell(dobj.name, "(", dobj, ") ", is, " not here.");
return;
elseif (!$perm_utils:controls(player, this))
player:tell("You are not the owner of this room.");
return;
elseif (dobj.wizard)
player:tell("Sorry, you can't ", verb, " a wizard.");
dobj:tell(player.name, " tried to ", verb, " you.");
return;
endif
iobj = this;
player:tell(this:ejection_msg());
this:((verb == "@eject") ? "eject" | "eject_basic")(dobj);
if (verb != "@eject!!")
dobj:tell(this:victim_ejection_msg());
endif
this:announce_all_but({player, dobj}, this:oejection_msg());
.
#3:27
return $gender_utils:pronoun_sub(this.(verb));
.
#3:28
who = args[1];
return this:basic_accept_for_abode(who) && this:acceptable(who);
.
#3:29
if (!$perm_utils:controls(player, this))
player:tell("You must own this room to manipulate the legal residents list.  Try contacting ", this.owner.name, ".");
else
if (typeof(this.residents) != LIST)
this.residents = {this.residents};
endif
if (!dobjstr)
"First, remove !valid objects from this room...";
for x in (this.residents)
if ((typeof(x) != OBJ) || (!$recycler:valid(x)))
player:tell("Warning: removing ", x, ", an invalid object, from the residents list.");
this.residents = setremove(this.residents, x);
endif
endfor
player:tell("Allowable residents in this room:  ", $string_utils:english_list($list_utils:map_prop(this.residents, "name"), "no one"), ".");
return;
elseif (dobjstr[1] == "!")
notflag = 1;
dobjstr = dobjstr[2..$];
else
notflag = 0;
endif
result = $string_utils:match_player_or_object(dobjstr);
if (!result)
return;
else
"a one element list was returned to us if it won.";
result = result[1];
if (notflag)
if (!(result in this.residents))
player:tell(result.name, " doesn't appear to be in the residents list of ", this.name, ".");
else
this.residents = setremove(this.residents, result);
player:tell(result.name, " removed from the residents list of ", this.name, ".");
endif
else
if (result in this.residents)
is = $gender_utils:get_conj("is", result);
player:tell(result.name, " ", is, " already an allowed resident of ", this.name, ".");
else
this.residents = {@this.residents, result};
player:tell(result.name, " added to the residents list of ", this.name, ".");
endif
endif
endif
endif
.
#3:30
target = {@this:contents(), @this:exits()};
return $string_utils:match(args[1], target, "name", target, "aliases");
.
#3:31
set_task_perms(player);
if (!dobjstr)
player:tell("Usage:  @remove-exit <exit>");
return;
endif
exit = this:match_object(dobjstr);
if (!(exit in this.exits))
if ($command_utils:object_match_failed(exit, dobjstr))
return;
endif
player:tell("Couldn't find \"", dobjstr, "\" in the exits list of ", this.name, ".");
return;
elseif (!this:remove_exit(exit))
player:tell("Sorry, but you do not have permission to remove exits from this room.");
else
name = valid(exit) ? exit.name | "<recycled>";
player:tell("Exit ", exit, " (", name, ") removed from exit list of ", this.name, " (", this, ").");
endif
.
#3:32
set_task_perms(player);
if (!dobjstr)
player:tell("Usage:  @remove-entrance <entrance>");
return;
endif
entrance = $string_utils:match(dobjstr, this.entrances, "name", this.entrances, "aliases");
if (!valid(entrance))
"Try again to parse it.  Maybe they gave object number.  Don't complain if it's invalid though; maybe it's been recycled in some nefarious way.";
entrance = this:match_object(dobjstr);
endif
if (!(entrance in this.entrances))
player:tell("Couldn't find \"", dobjstr, "\" in the entrances list of ", this.name, ".");
return;
elseif (!this:remove_entrance(entrance))
player:tell("Sorry, but you do not have permission to remove entrances from this room.");
else
name = valid(entrance) ? entrance.name | "<recycled>";
player:tell("Entrance ", entrance, " (", name, ") removed from entrance list of ", this.name, " (", this, ").");
endif
.
#3:33
if ((caller in {this, this.owner}) || $perm_utils:controls(caller_perms(), this))
return pass(@args);
else
return E_PERM;
endif
.
#3:34
return (msg = `this.(verb) ! ANY') ? $string_utils:pronoun_sub(msg, args[1]) | "";
.
#3:35
if ((caller == this) || $perm_utils:controls(caller_perms(), this))
return this.(verb);
else
return E_PERM;
endif
.
#3:36
exits = {};
for exit in (`(verb == "obvious_exits") ? this.exits | this.entrances ! ANY => {}')
if (`$code_utils:verb_or_property(exit, "obvious") ! ANY')
exits = setadd(exits, exit);
endif
endfor
return exits;
.
#3:37
":here_huh(verb,args)  -- room-specific :huh processing.  This should return 1 if it finds something interesting to do and 0 otherwise; see $command_utils:do_huh.";
"For the generic room, we check for the case of the caller specifying an exit for which a corresponding verb was never defined.";
set_task_perms(caller_perms());
if (args[2] || ($failed_match == (exit = this:match_exit(verb = args[1]))))
"... okay, it's not an exit.  we give up...";
return 0;
elseif (valid(exit))
exit:invoke();
else
"... ambiguous exit ...";
player:tell("I don't know which direction `", verb, "' you mean.");
endif
return 1;
.
#3:38
this:(verb[6..$])(@args);
.
#3:39
return this == args[1].location;
.
#3:40
"examine_key(examiner)";
"return a list of strings to be told to the player, indicating what the key on this type of object means, and what this object's key is set to.";
"the default will only tell the key to a wizard or this object's owner.";
who = args[1];
if (((caller == this) && $perm_utils:controls(who, this)) && (this.key != 0))
return {tostr(this:title(), " will accept only objects matching the following key:"), tostr("  ", $lock_utils:unparse_key(this.key))};
endif
.
#3:41
"examine_contents(who)";
if (caller == this)
this:tell_contents(this.contents, this.ctype);
endif
.
#3:42
return this.free_entry;
.
#3:43
if (caller_perms().wizard)
pass(@args);
if (this == $player_start)
"... If there are ever multiple rooms, then the question of";
"....which one is to be $player_start may well be an option of some sort,";
"... so this goes better here than hardcoded into some specific room:init_for_core verb.";
move(player, this);
endif
endif
.
#3:44
return this.(verb);
.
#3:45
"Copied from generic room (#3):announce by Haakon (#2) Thu Oct 24 16:15:01 1996 PDT";
for dude in (setremove(this:contents(), player))
try
dude:tell_lines(@args);
except id (ANY)
endtry
endfor
.
#3:46
who = args[1];
return valid(who) && ((this.free_home || $perm_utils:controls(who, this)) || ((typeof(residents = this.residents) == LIST) ? who in this.residents | (who == this.residents)));
.
#4:0
set_task_perms(player);
if (dobjstr == "")
dobj = player;
else
dobj = $string_utils:match_player(dobjstr);
endif
if (!valid(dobj))
player:notify("Show whose quota?");
return;
endif
$quota_utils:display_quota(dobj);
try
if (dobj in $local.informed_quota_consumers.uninformed_quota_consumers)
player:notify(tostr("Note that quota is held in escrow -- `look ", $local.informed_quota_consumers, "' for more details."));
endif
except id (ANY)
endtry
.
#4:1
set_task_perms(player);
nargs = length(args);
pos = "named" in args;
if ((pos <= 1) || (pos == nargs))
pos = "called" in args;
endif
if ((pos <= 1) || (pos == nargs))
player:notify("Usage:  @create <parent-class> named [name:]alias,...,alias");
player:notify("   or:  @create <parent-class> named name-and-alias,alias,...,alias");
player:notify("");
player:notify("where <parent-class> is one of the standard classes ($note, $letter, $thing, or $container) or an object number (e.g., #999), or the name of some object in the current room.");
player:notify("You can use \"called\" instead of \"named\", if you wish.");
return;
endif
parentstr = $string_utils:from_list(args[1..pos - 1], " ");
namestr = $string_utils:from_list(args[pos + 1..$], " ");
if (!namestr)
player:notify("You must provide a name.");
return;
endif
if (parentstr[1] == "$")
parent = $string_utils:literal_object(parentstr);
if ((parent == $failed_match) || (typeof(parent) != OBJ))
player:notify(tostr("\"", parentstr, "\" does not name an object."));
return;
endif
else
parent = player:my_match_object(parentstr);
if ($command_utils:object_match_failed(parent, parentstr))
return;
endif
endif
object = player:_create(parent);
if (typeof(object) == ERR)
player:notify(tostr(object));
return;
endif
for f in ($string_utils:char_list(player:build_option("create_flags") || ""))
object.(f) = 1;
endfor
"move() shouldn't, but could bomb. Say if player has a stupid :accept";
`move(object, player) ! ANY';
$building_utils:set_names(object, namestr);
if ((other_names = setremove(object.aliases, object.name)) != {})
aka = (" (aka " + $string_utils:english_list(other_names)) + ")";
else
aka = "";
endif
player:notify(tostr("You now have ", object.name, aka, " with object number ", object, " and parent ", parent.name, " (", parent, ")."));
.
#4:2
set_task_perms(player);
dobj = player:my_match_object(dobjstr);
if (dobj == $nothing)
player:notify(tostr("Usage:  ", verb, " <object>"));
elseif ($command_utils:object_match_failed(dobj, dobjstr))
"...bogus object...";
elseif (player == dobj)
player:notify($wiz_utils.suicide_string);
elseif (!$perm_utils:controls(player, dobj))
player:notify(tostr(E_PERM));
else
name = dobj.name;
result = player:_recycle(dobj);
if (typeof(result) == ERR)
player:notify(tostr(result));
else
player:notify(tostr(name, " (", dobj, ") recycled."));
endif
endif
.
#4:3
"@recreate <object> as <parent-class> named [name:]alias,alias,...";
"  effectively recycles and creates <object> all over again.";
set_task_perms(player);
as = prepstr in args;
named = "named" in args;
if ((named <= (as + 1)) || (named == length(args)))
named = "called" in args;
endif
if ((named <= (as + 1)) || (named == length(args)))
player:notify_lines({tostr("Usage:  ", verb, " <object> as <parent-class> named [name:]alias,...,alias"), "", "where <parent-class> is one of the standard classes ($note, $letter, $thing, or $container) or an object number (e.g., #999), or the name of some object in the current room.  The [name:]alias... specification is as in @create.", "", "You can use \"called\" instead of \"named\", if you wish."});
return;
elseif ($command_utils:object_match_failed(dobj = player:my_match_object(dobjstr), dobjstr))
return;
elseif (is_player(dobj))
player:notify("You really *don't* want to do that!");
return;
endif
parentstr = $string_utils:from_list(args[as + 1..named - 1], " ");
namestr = $string_utils:from_list(args[named + 1..$], " ");
if (parentstr[1] == "$")
parent = $string_utils:literal_object(parentstr);
if ((parent == $failed_match) || (typeof(parent) != OBJ))
player:notify(tostr("\"", parentstr, "\" does not name an object."));
return;
endif
else
parent = player:my_match_object(parentstr);
if ($command_utils:object_match_failed(parent, parentstr))
return;
endif
endif
if (!(e = $building_utils:recreate(dobj, parent)))
player:notify(tostr(e));
return;
endif
for f in ($string_utils:char_list(player:build_option("create_flags") || ""))
dobj.(f) = 1;
endfor
"move() shouldn't, but could, bomb. Say if player has a stupid :accept";
`move(dobj, player) ! ANY';
$building_utils:set_names(dobj, namestr);
if ((other_names = setremove(dobj.aliases, dobj.name)) != {})
aka = (" (aka " + $string_utils:english_list(other_names)) + ")";
else
aka = "";
endif
player:notify(tostr("Object number ", dobj, " is now ", dobj.name, aka, " with parent ", parent.name, " (", parent, ")."));
.
#4:4
set_task_perms(player);
nargs = length(args);
if (nargs == 1)
room = args[1];
exit_spec = "";
elseif ((nargs >= 3) && (args[2] == "to"))
exit_spec = args[1];
room = $string_utils:from_list(args[3..$], " ");
elseif (argstr && (!prepstr))
room = argstr;
exit_spec = "";
else
player:notify(tostr("Usage:  ", verb, " <new-room-name>"));
player:notify(tostr("    or  ", verb, " <exit-description> to <new-room-name-or-old-room-object-number>"));
return;
endif
if (room != tostr(other_room = toobj(room)))
room_kind = player:build_option("dig_room");
if (room_kind == 0)
room_kind = $room;
endif
other_room = player:_create(room_kind);
if (typeof(other_room) == ERR)
player:notify(tostr("Cannot create new room as a child of ", $string_utils:nn(room_kind), ": ", other_room, ".  See `help @build-options' for information on how to specify the kind of room this command tries to create."));
return;
endif
for f in ($string_utils:char_list(player:build_option("create_flags") || ""))
other_room.(f) = 1;
endfor
other_room.name = room;
other_room.aliases = {room};
move(other_room, $nothing);
player:notify(tostr(other_room.name, " (", other_room, ") created."));
elseif (nargs == 1)
player:notify("You can't dig a room that already exists!");
return;
elseif ((!valid(player.location)) || (!($room in $object_utils:ancestors(player.location))))
player:notify(tostr("You may only use the ", verb, " command from inside a room."));
return;
elseif ((!valid(other_room)) || (!($room in $object_utils:ancestors(other_room))))
player:notify(tostr(other_room, " doesn't look like a room to me..."));
return;
endif
if (exit_spec)
exit_kind = player:build_option("dig_exit");
if (exit_kind == 0)
exit_kind = $exit;
endif
exits = $string_utils:explode(exit_spec, "|");
if ((length(exits) < 1) || (length(exits) > 2))
player:notify("The exit-description must have the form");
player:notify("     [name:]alias,...,alias");
player:notify("or   [name:]alias,...,alias|[name:]alias,...,alias");
return;
endif
do_recreate = !player:build_option("bi_create");
to_ok = $building_utils:make_exit(exits[1], player.location, other_room, do_recreate, exit_kind);
if (to_ok && (length(exits) == 2))
$building_utils:make_exit(exits[2], other_room, player.location, do_recreate, exit_kind);
endif
endif
.
#4:5
"Usage:  @audit [player] [from <start>] [to <end>] [for <matching string>]";
set_task_perms(player);
dobj = $string_utils:match_player(dobjstr);
if (!dobjstr)
dobj = player;
elseif ($command_utils:player_match_result(dobj, dobjstr)[1])
return;
endif
dobjwords = $string_utils:words(dobjstr);
if (args[1..length(dobjwords)] == dobjwords)
args = args[length(dobjwords) + 1..$];
endif
if (!(parse_result = $code_utils:_parse_audit_args(@args)))
player:notify(tostr("Usage:  ", verb, " [player] [from <start>] [to <end>] [for <match>]"));
return;
endif
return $building_utils:do_audit(dobj, @parse_result);
.
#4:6
if (!dobjstr)
dobj = player;
elseif ($command_utils:player_match_result(dobj = $string_utils:match_player(dobjstr), dobjstr)[1])
return;
endif
set_task_perms(player);
if (typeof(dobj.owned_objects) == LIST)
count = length(dobj.owned_objects);
player:notify(tostr(dobj.name, " currently owns ", count, " object", (count == 1) ? "." | "s."));
if ($quota_utils.byte_based)
player:notify(tostr("Total bytes consumed:  ", $string_utils:group_number($quota_utils:get_size_quota(dobj)[2]), "."));
endif
else
player:notify(tostr(dobj.name, " is not enrolled in the object ownership system.  Use @countDB instead."));
endif
.
#4:7
if (!dobjstr)
dobj = player;
elseif ($command_utils:player_match_result(dobj = $string_utils:match_player(dobjstr), dobjstr)[1])
return;
endif
set_task_perms(player);
count = 0;
for o in [#1..max_object()]
if ($command_utils:running_out_of_time())
player:notify("Counting...");
suspend(5);
endif
if (valid(o) && (o.owner == dobj))
count = count + 1;
endif
endfor
player:notify(tostr(dobj.name, " currently owns ", count, " object", (count == 1) ? "." | "s."));
.
#4:8
"$player:owned_objects -- sorts a players .owned_objects property in ascending";
"order so it looks nice on @audit.";
if (player != this)
return E_PERM;
endif
if (typeof(player.owned_objects) == LIST)
if ((!dobjstr) || (index("object", dobjstr) == 1))
ret = $list_utils:sort_suspended(0, player.owned_objects);
elseif (index("size", dobjstr) == 1)
ret = $list_utils:reverse_suspended($list_utils:sort_suspended(0, player.owned_objects, $list_utils:slice($list_utils:map_prop(player.owned_objects, "object_size"))));
endif
if (typeof(ret) == LIST)
player.owned_objects = ret;
player:tell("Your .owned_objects list has been sorted.");
return 1;
else
player:tell("Something went wrong. .owned_objects not sorted.");
return 0;
endif
else
player:tell("You are not enrolled in .owned_objects scheme, sorry.");
endif
.
#4:9
if (player != this)
player:tell("Permission Denied");
return E_PERM;
endif
if (!valid(dobj))
player:tell("Don't understand `", dobjstr, "' as an object to add.");
elseif (dobj.owner != player)
player:tell("You don't own ", dobj.name, ".");
elseif (dobj in player.owned_objects)
player:tell(dobj.name, " is already recorded in your .owned_objects.");
else
player.owned_objects = setadd(player.owned_objects, dobj);
player:tell("Added ", dobj, " to your .owned_objects.");
endif
.
#4:10
for x in (player.owned_objects)
if ((!valid(x)) || (x.owner != player))
player.owned_objects = setremove(player.owned_objects, x);
if (valid(x))
player:tell("Removing ", x.name, "(", x, "), owned by ", valid(x.owner) ? x.owner.name | "<recycled player>", " from your .owned_objects property.");
else
player:tell("Removing invalid object ", x, " from your .owned_objects property.");
endif
endif
$command_utils:suspend_if_needed(2, tostr("Suspending @verify-owned ... ", x));
endfor
player:tell(".owned_objects property verified.");
.
#4:11
set_task_perms(player);
dobj = player:my_match_object(dobjstr);
if ($command_utils:object_match_failed(dobj, dobjstr))
return;
endif
try
dobj.key = 0;
player:notify(tostr("Unlocked ", dobj.name, "."));
except error (ANY)
player:notify(error[2]);
endtry
.
#4:12
set_task_perms(player);
dobj = player:my_match_object(dobjstr);
if ($command_utils:object_match_failed(dobj, dobjstr))
return;
endif
key = $lock_utils:parse_keyexp(iobjstr, player);
if (typeof(key) == STR)
player:notify("That key expression is malformed:");
player:notify(tostr("  ", key));
else
try
dobj.key = key;
player:notify(tostr("Locked ", dobj.name, " to this key:"));
player:notify(tostr("  ", $lock_utils:unparse_key(key)));
except error (ANY)
player:notify(error[2]);
endtry
endif
.
#4:13
"Usage:  @newmessage <message-name> [<message>] [on <object>]";
"Add a message property to an object (default is player), and optionally";
"set its value.  For use by non-programmers, who aren't allowed to add";
"properties generally.";
"To undo the effects of this, use @unmessage.";
set_task_perms(player);
dobjwords = $string_utils:words(dobjstr);
if (!dobjwords)
player:notify(tostr("Usage:  ", verb, " <message-name> [<message>] [on <object>]"));
return;
endif
object = valid(iobj) ? iobj | player;
name = this:_messagify(dobjwords[1]);
value = dobjstr[length(dobjwords[1]) + 2..$];
nickname = "@" + name[1..$ - 4];
e = `add_property(object, name, value, {player, "rc"}) ! ANY';
if (typeof(e) != ERR)
player:notify(tostr(nickname, " on ", object.name, " is now \"", object.(name), "\"."));
elseif (e != E_INVARG)
player:notify(tostr(e));
elseif ($object_utils:has_property(object, name))
"object already has property";
player:notify(tostr(object.name, " already has a ", nickname, " message."));
else
player:notify(tostr("Unable to add ", nickname, " message to ", object.name, ": ", e));
endif
.
#4:14
"Usage:  @unmessage <message-name> [from <object>]";
"Remove a message property from an object (default is player).";
set_task_perms(player);
if ((!dobjstr) || (length($string_utils:words(dobjstr)) > 1))
player:notify(tostr("Usage:  ", verb, " <message-name> [from <object>]"));
return;
endif
object = valid(iobj) ? iobj | player;
name = this:_messagify(dobjstr);
nickname = "@" + name[1..$ - 4];
try
delete_property(object, name);
player:notify(tostr(nickname, " message removed from ", object.name, "."));
except (E_PROPNF)
player:notify(tostr("No ", nickname, " message found on ", object.name, "."));
except error (ANY)
player:notify(error[2]);
endtry
.
#4:15
"Given any of several formats people are likely to use for a @message";
"property, return the canonical form (\"foobar_msg\").";
name = args[1];
if (name[1] == "@")
name = name[2..$];
endif
if ((length(name) < 4) || (name[$ - 3..$] != "_msg"))
name = name + "_msg";
endif
return name;
.
#4:16
"'@kids <obj>' - List the children of an object. This is handy for seeing whether anybody's actually using your carefully-wrought public objects.";
thing = player:my_match_object(dobjstr);
if (!$command_utils:object_match_failed(thing, dobjstr))
kids = children(thing);
if (kids)
player:notify(tostr(thing:title(), "(", thing, ") has ", length(kids), " kid", (length(kids) == 1) ? "" | "s", "."));
player:notify(tostr($string_utils:names_of(kids)));
else
player:notify(tostr(thing:title(), "(", thing, ") has no kids."));
endif
endif
.
#4:17
"'@contents <obj> - list the contents of an object, with object numbers.";
set_task_perms(player);
if (!dobjstr)
dobj = player.location;
else
dobj = player:my_match_object(dobjstr);
endif
if ($command_utils:object_match_failed(dobj, dobjstr))
else
contents = dobj.contents;
if (contents)
player:notify(tostr(dobj:title(), "(", dobj, ") contains:"));
player:notify(tostr($string_utils:names_of(contents)));
else
player:notify(tostr(dobj:title(), "(", dobj, ") contains nothing."));
endif
endif
.
#4:18
"'@parents <thing>' - List <thing> and its ancestors, all the way back to the Root Class (#1).";
if (player != this)
return player:notify("Permission denied: not a builder.");
elseif (!dobjstr)
player:notify(tostr("Usage:  ", verb, " <object>"));
return;
endif
set_task_perms(player);
o = player:my_match_object(dobjstr);
if (!$command_utils:object_match_failed(o, dobjstr))
player:notify($string_utils:names_of({o, @$object_utils:ancestors(o)}));
endif
.
#4:19
"@locations <thing> - List <thing> and its containers, all the way back to the outermost one.";
set_task_perms(player);
if (!dobjstr)
what = player;
elseif ((!valid(what = player:my_match_object(dobjstr))) && (!valid(what = $string_utils:match_player(dobjstr))))
$command_utils:object_match_failed(dobj, dobjstr);
return;
endif
player:notify($string_utils:names_of({what, @$object_utils:locations(what)}));
.
#4:20
"$class_registry is in the following format:";
"        { {name, description, members}, ... }";
"where `name' is the name of a particular class of objects, `description' is a one-sentence description of the membership of the class, and `members' is a list of object numbers, the members of the class.";
"";
if (!$command_utils:yes_or_no("This command can be very spammy.  Are you certain you need this information?"))
return player:tell("OK, aborting.  The lag thanks you.");
endif
if (args)
members = {};
for name in (args)
class = $list_utils:assoc_prefix(name, $class_registry);
if (class)
for o in (class[3])
members = setadd(members, o);
endfor
else
player:tell("There is no defined class of objects named `", name, "'; type `@classes' to see a complete list of defined classes.");
return;
endif
endfor
printed = {};
for o in (members)
what = o;
while (valid(what))
printed = setadd(printed, what);
what = parent(what);
endwhile
endfor
player:tell("Members of the class", (length(args) > 1) ? "es" | "", " named ", $string_utils:english_list(args), ":");
player:tell();
set_task_perms(player);
this:classes_2($root_class, "", members, printed);
player:tell();
else
"List all class names and descriptions";
player:tell("The following classes of objects have been defined:");
for class in ($class_registry)
name = class[1];
description = class[2];
player:tell();
player:tell("-- ", name, ": ", description);
endfor
player:tell();
player:tell("Type `@classes <name>' to see the members of the class with the given <name>.");
endif
.
#4:21
{root, indent, members, printed} = args;
if (root in members)
player:tell(indent, root.name, " (", root, ")");
else
player:tell(indent, "<", root.name, " (", root, ")>");
endif
printed = setremove(printed, root);
indent = indent + "  ";
set_task_perms(caller_perms());
for c in ($list_utils:sort_suspended(2, $set_utils:intersection(children(root), printed)))
$command_utils:suspend_if_needed(10);
this:classes_2(c, indent, members, printed);
endfor
.
#4:22
set_task_perms(caller_perms());
if (this:build_option("bi_create"))
return $quota_utils:bi_create(@args);
else
return $recycler:(verb)(@args);
endif
.
#4:23
set_task_perms(caller_perms());
if (this:build_option("bi_create"))
return recycle(@args);
else
return $recycler:(verb)(@args);
endif
.
#4:24
set_task_perms(player);
if ($command_utils:object_match_failed(object = player:my_match_object(dobjstr), dobjstr))
"...bogus object...";
elseif ($command_utils:object_match_failed(parent = player:my_match_object(iobjstr), iobjstr))
"...bogus new parent...";
elseif ((this != player) && (!$object_utils:isa(player, $player)))
"...They chparented to #1 and want to chparent back to $prog.  Probably for some nefarious purpose...";
player:notify("You don't seem to already be a valid player class.  Perhaps chparenting away from the $player hierarchy was not such a good idea.  Permission denied.");
elseif (is_player(object) && (!$object_utils:isa(parent, $player)))
player:notify(tostr(object, " is a player and ", parent, " is not a player class."));
player:notify("You really *don't* want to do this.  Trust me.");
else
if ($object_utils:isa(object, $mail_recipient))
if (!$command_utils:yes_or_no("Chparenting a mailing list is usually a really bad idea.  Do you really want to do it?  (If you don't know why we're asking this question, please say 'no'.)"))
return player:tell("Aborted.");
endif
endif
try
result = player:_chparent(object, parent);
player:notify("Parent changed.");
except (E_INVARG)
if (valid(object) && valid(parent))
player:notify(tostr("Some property existing on ", parent, " is defined on ", object, " or one of its descendants."));
player:notify(tostr("Try @check-chparent ", dobjstr, " to ", iobjstr));
else
player:notify("Either that is not a valid object or not a valid parent");
endif
except (E_PERM)
player:notify("Either you don't own the object, don't own the parent, or the parent is not fertile.");
except (E_RECMOVE)
player:notify("That parent object is a descendant of the object!");
endtry
endif
.
#4:25
"Copied from generic programmer (#217):@check-chparent by ur-Rog (#6349) Sun Nov  8 22:13:53 1992 PST";
"@check-chparent object to newparent";
"checks for property name conflicts that would make @chparent bomb.";
set_task_perms(player);
if (!(dobjstr && iobjstr))
player:notify(tostr("Usage:  ", verb, " <object> to <newparent>"));
elseif ($command_utils:object_match_failed(object = player:my_match_object(dobjstr), dobjstr))
"...bogus object...";
elseif ($command_utils:object_match_failed(parent = player:my_match_object(iobjstr), iobjstr))
"...bogus new parent...";
elseif (player != this)
player:notify(tostr(E_PERM));
elseif (typeof(result = $object_utils:property_conflicts(object, parent)) == ERR)
player:notify(tostr(result));
elseif (result)
su = $string_utils;
player:notify("");
player:notify(su:left("Property", 30) + "Also Defined on");
player:notify(su:left("--------", 30) + "---------------");
for r in (result)
player:notify(su:left(tostr(parent, ".", r[1]), 30) + su:from_list(listdelete(r, 1), " "));
$command_utils:suspend_if_needed(0);
endfor
else
player:notify("No property conflicts found.");
endif
.
#4:26
"Syntax:  @set <object>.<prop-name> to <value>";
"";
"Changes the value of the specified object's property to the given value.";
"You must have permission to modify the property, either because you own the property or if it is writable.";
set_task_perms(player);
if (this != player)
return player:tell(E_PERM);
endif
l = $code_utils:parse_propref(dobjstr);
if (l)
dobj = player:my_match_object(l[1], player.location);
if ($command_utils:object_match_failed(dobj, l[1]))
return;
endif
prop = l[2];
to_i = "to" in args;
at_i = "at" in args;
i = (to_i && at_i) ? min(to_i, at_i) | (to_i || at_i);
iobjstr = argstr[$string_utils:word_start(argstr)[i][2] + 1..$];
iobjstr = $string_utils:trim(iobjstr);
if (!iobjstr)
try
val = dobj.(prop) = "";
except e (ANY)
player:tell("Unable to set ", dobj, ".", prop, ": ", e[2]);
return;
endtry
iobjstr = "\"\"";
"elseif (iobjstr[1] == \"\\\"\")";
"val = dobj.(prop) = iobjstr;";
"iobjstr = \"\\\"\" + iobjstr + \"\\\"\";";
else
val = $string_utils:to_value(iobjstr);
if (!val[1])
player:tell("Could not parse: ", iobjstr);
return;
elseif (!$object_utils:has_property(dobj, prop))
player:tell("That object does not define that property.");
return;
endif
try
val = dobj.(prop) = val[2];
except e (ANY)
player:tell("Unable to set ", dobj, ".", prop, ": ", e[2]);
return;
endtry
endif
player:tell("Property ", dobj, ".", prop, " set to ", $string_utils:print(val), ".");
else
player:tell("Property ", dobjstr, " not found.");
endif
.
#4:27
":build_option(name)";
"Returns the value of the specified builder option";
if ((caller == this) || $perm_utils:controls(caller_perms(), this))
return $build_options:get(this.build_options, args[1]);
else
return E_PERM;
endif
.
#4:28
":set_build_option(oname,value)";
"Changes the value of the named option.";
"Returns a string error if something goes wrong.";
if (!((caller == this) || $perm_utils:controls(caller_perms(), this)))
return tostr(E_PERM);
endif
"...this is kludgy, but it saves me from writing the same verb n times.";
"...there's got to be a better way to do this...";
verb[1..4] = "";
foo_options = verb + "s";
"...";
if (typeof(s = #0.(foo_options):set(this.(foo_options), @args)) == STR)
return s;
elseif (s == this.(foo_options))
return 0;
else
this.(foo_options) = s;
return 1;
endif
.
#4:29
"@<what>-option <option> [is] <value>   sets <option> to <value>";
"@<what>-option <option>=<value>        sets <option> to <value>";
"@<what>-option +<option>     sets <option>   (usually equiv. to <option>=1";
"@<what>-option -<option>     resets <option> (equiv. to <option>=0)";
"@<what>-option !<option>     resets <option> (equiv. to <option>=0)";
"@<what>-option <option>      displays value of <option>";
set_task_perms(player);
what = "build";
options = what + "_options";
option_pkg = #0.(options);
set_option = ("set_" + what) + "_option";
if (!args)
player:notify_lines({("Current " + what) + " options:", "", @option_pkg:show(this.(options), option_pkg.names)});
return;
elseif (typeof(presult = option_pkg:parse(args)) == STR)
player:notify(presult);
return;
else
if (length(presult) > 1)
if (typeof(sresult = this:(set_option)(@presult)) == STR)
player:notify(sresult);
return;
elseif (!sresult)
player:notify("No change.");
return;
endif
endif
player:notify_lines(option_pkg:show(this.(options), presult[1]));
endif
.
#4:30
"Syntax:";
"  @measure object <object name>";
"  @measure summary [player]";
"  @measure new [player]";
"  @measure breakdown <object name>";
"  @measure recent [number of days] [player]";
if (length(args) < 1)
player:tell_lines($code_utils:verb_documentation());
return;
endif
if (index("object", args[1]) == 1)
"Object.";
what = player.location:match_object(name = $string_utils:from_list(args[2..$], " "));
lag = $login:current_lag();
if (!valid(what))
player:tell("Sorry, I didn't understand `", name, "'");
elseif (((((($object_utils:has_property(what, "object_size") && (what.object_size[1] > $byte_quota_utils.too_large)) && (!player.wizard)) && (player != $byte_quota_utils.owner)) && (player != $hacker)) && (player != what.owner)) && (lag > 0))
player:tell($string_utils:nn(what), " when last measured was ", $string_utils:group_number(what.object_size[1]), " bytes.  To reduce lag induced by multiple players re-measuring large objects multiple times, you may not measure that object.");
elseif (((lag > 0) && (`what.object_size[2] ! ANY => 0' > (time() - 86400))) && (!$command_utils:yes_or_no(tostr("That object was measured only ", $string_utils:from_seconds(time() - what.object_size[2]), " ago.  Please don't lag the MOO by remeasuring things frequently.  Are you sure you want to remeasure it?"))))
return player:tell("Not measuring.  It was ", $string_utils:group_number(what.object_size[1]), " bytes when last measured.");
else
player:tell("Checking size of ", what.name, " (", what, ")...");
player:tell("Size of ", what.name, " (", what, ") is ", $string_utils:group_number($byte_quota_utils:object_bytes(what)), " bytes.");
endif
elseif (index("summary", args[1]) == 1)
"Summarize player.";
if (length(args) == 1)
what = player;
else
what = $string_utils:match_player(name = $string_utils:from_list(args[2..$], " "));
endif
if (!valid(what))
player:tell("Sorry, I don't know who you mean by `", name, "'");
else
$byte_quota_utils:do_summary(what);
endif
elseif (index("new", args[1]) == 1)
if (length(args) == 1)
what = player;
elseif (!valid(what = $string_utils:match_player(name = $string_utils:from_list(args[2..$], " "))))
return $command_utils:player_match_failed(what, name);
endif
player:tell("Measuring the sizes of ", what.name, "'s recently created objects...");
total = 0;
unmeasured_index = 4;
unmeasured_multiplier = 100;
nunmeasured = 0;
if (typeof(what.owned_objects) == LIST)
for x in (what.owned_objects)
if (!$object_utils:has_property(x, "object_size"))
nunmeasured = nunmeasured + 1;
elseif (!x.object_size[1])
player:tell("Measured ", $string_utils:nn(x), ":  ", size = $byte_quota_utils:object_bytes(x), " bytes.");
total = total + size;
endif
$command_utils:suspend_if_needed(5);
endfor
if (nunmeasured && (what.size_quota[unmeasured_index] < (unmeasured_multiplier * nunmeasured)))
what.size_quota[unmeasured_index] = (what.size_quota[unmeasured_index] % unmeasured_multiplier) + (nunmeasured * unmeasured_multiplier);
endif
player:tell("Total bytes used in new creations: ", total, ".", nunmeasured ? tostr("There were a total of ", nunmeasured, " object(s) found with no .object_size property.  This will prevent additional building.") | "");
else
player:tell("Sorry, ", what.name, " is not enrolled in the object measurement scheme.");
endif
elseif (index("recent", args[1]) == 1)
"@measure recent days player";
if (length(args) > 1)
days = $code_utils:toint(args[2]);
else
days = $byte_quota_utils.cycle_days;
endif
if (!days)
return player:tell("Couldn't understand `", args[2], "' as a positive integer.");
endif
if (length(args) > 2)
if (!valid(who = $string_utils:match_player(name = $string_utils:from_list(args[3..$], " "))))
return $command_utils:player_match_failed(who, name);
endif
else
who = player;
endif
if (typeof(who.owned_objects) == LIST)
player:tell("Re-measuring objects of ", $string_utils:nn(who), " which have not been measured in the past ", days, " days.");
when = time() - (days * 86400);
which = {};
for x in (who.owned_objects)
if (x.object_size[2] < when)
$byte_quota_utils:object_size(x);
which = setadd(which, x);
$command_utils:suspend_if_needed(3, "...measuring");
endif
endfor
player:tell("Done, re-measured ", length(which), " objects.", (length(which) > 0) ? "  Recommend you use @measure summary to update the display of @quota." | "");
else
player:tell("Sorry, ", who.name, " is not enrolled in the object measurement scheme.");
endif
elseif (index("breakdown", args[1]) == 1)
what = player.location:match_object(name = $string_utils:from_list(args[2..$], " "));
if (!valid(what))
player:tell("Sorry, I didn't understand `", name, "'");
elseif (!$byte_quota_utils:can_peek(player, what.owner))
return player:tell("Sorry, you don't control ", what.name, " (", what, ")");
else
if (mail = $command_utils:yes_or_no("This might be kinda long.  Want me to mail you the result?"))
player:tell("Result will be mailed.");
endif
info = $byte_quota_utils:do_breakdown(what);
if (typeof(info) == ERR)
player:tell(info);
endif
if (mail)
$mail_agent:send_message($byte_quota_utils.owner, {player}, tostr("Object breakdown of ", what.name, " (", what, ")"), info);
else
player:tell_lines_suspended(info);
endif
endif
else
player:tell("Not a sub-command of @measure: ", args[1]);
player:tell_lines($code_utils:verb_documentation());
endif
.
#4:31
if (caller_perms().wizard)
if (this == $builder)
this.build_options = {};
else
clear_property(this, "build_options");
endif
return pass(@args);
endif
.
#4:32
"@listedit|@pedit object.prop -- invokes the list editor.";
"   if you are editing a list of strings, you're better off using @notedit.";
$list_editor:invoke(dobjstr, verb);
.
#5:0
set_task_perms(callers() ? caller_perms() | player);
if (this.location == player)
player:tell("You already have that!");
elseif (this.location != player.location)
player:tell("I don't see that here.");
else
this:moveto(player);
if (this.location == player)
player:tell(this:take_succeeded_msg() || "Taken.");
if (msg = this:otake_succeeded_msg())
player.location:announce(player.name, " ", msg);
endif
else
player:tell(this:take_failed_msg() || "You can't pick that up.");
if (msg = this:otake_failed_msg())
player.location:announce(player.name, " ", msg);
endif
endif
endif
.
#5:1
set_task_perms(callers() ? caller_perms() | player);
if (this.location != player)
player:tell("You don't have that.");
elseif (!player.location:acceptable(this))
player:tell("You can't drop that here.");
else
this:moveto(player.location);
if (this.location == player.location)
player:tell_lines(this:drop_succeeded_msg() || "Dropped.");
if (msg = this:odrop_succeeded_msg())
player.location:announce(player.name, " ", msg);
endif
else
player:tell_lines(this:drop_failed_msg() || "You can't seem to drop that here.");
if (msg = this:odrop_failed_msg())
player.location:announce(player.name, " ", msg);
endif
endif
endif
.
#5:2
where = args[1];
"if (!valid(where) || this:is_unlocked_for(where))";
if (this:is_unlocked_for(where))
pass(where);
endif
.
#5:3
set_task_perms(caller_perms());
return $string_utils:pronoun_sub(this.(verb));
.
#5:4
set_task_perms(callers() ? caller_perms() | player);
if (this.location != player)
player:tell("You don't have that!");
elseif (!valid(player.location))
player:tell("I see no \"", iobjstr, "\" here.");
elseif ($command_utils:object_match_failed(who = player.location:match_object(iobjstr), iobjstr))
elseif (who.location != player.location)
player:tell("I see no \"", iobjstr, "\" here.");
elseif (who == player)
player:tell("Give it to yourself?");
else
this:moveto(who);
if (this.location == who)
player:tell("You hand ", this:title(), " to ", who:title(), ".");
who:tell(player:titlec(), " ", $gender_utils:get_conj("hands/hand", player), " you ", this:title(), ".");
else
player:tell(who:titlec(), " ", $gender_utils:get_conj("does/do", who), " not want that item.");
endif
endif
.
#5:5
"examine_key(examiner)";
"return a list of strings to be told to the player, indicating what the key on this type of object means, and what this object's key is set to.";
"the default will only tell the key to a wizard or this object's owner.";
who = args[1];
if (((caller == this) && $perm_utils:controls(who, this)) && (this.key != 0))
return {tostr(this:title(), " can only be moved to locations matching this key:"), tostr("  ", $lock_utils:unparse_key(this.key))};
endif
.
#6:0
if (caller_perms().wizard)
pass(@args);
this.home = (this in {$no_one, $hacker, $generic_editor.owner}) ? $nothing | $player_start;
if (a = $list_utils:assoc(this, {{$prog, {$prog_help, $builtin_function_help, $verb_help, $core_help}}, {$wiz, $wiz_help}, {$mail_recipient_class, $mail_help}, {$builder, $builder_help}, {$frand_class, $frand_help}}))
this.help = a[2];
else
this.help = 0;
endif
if (this != $player)
for p in ({"last_connect_place", "all_connect_places", "features", "previous_connection", "last_connect_time"})
clear_property(this, p);
endfor
if (is_player(this))
this.first_connect_time = $maxint;
this.last_disconnect_time = $maxint;
endif
endif
endif
.
#6:1
if (((valid(cp = caller_perms()) && (caller != this)) && (!$perm_utils:controls(cp, this))) && (caller != #0))
return E_PERM;
endif
this:("@last-connection")();
$news:check();
.
#6:2
if (((valid(cp = caller_perms()) && (caller != this)) && (!$perm_utils:controls(cp, this))) && (caller != #0))
return E_PERM;
endif
this:expunge_rmm();
this:erase_paranoid_data();
this:gc_gaglist();
return;
.
#6:3
if ((caller == this) || $perm_utils:controls(caller_perms(), this))
this.help = 0;
return pass(@args);
else
return E_PERM;
endif
.
#6:4
return !is_player(args[1]);
.
#6:5
"Extra parsing of player commands.  Called by $command_utils:do_huh.";
"This version of my_huh just handles features.";
permissions = (((caller == this) || $perm_utils:controls(caller_perms(), this)) && $command_utils:validate_feature(@args)) ? this | $no_one;
"verb - obvious                 pass - would be args";
"plist - list of prepspecs that this command matches";
"dlist and ilist - likewise for dobjspecs, iobjspecs";
verb = args[1];
if (`$server_options.support_numeric_verbname_strings ! E_PROPNF => 0' && $string_utils:is_integer(verb))
return;
endif
pass = args[2];
plist = {"any", prepstr ? $code_utils:full_prep(prepstr) | "none"};
dlist = dobjstr ? {"any"} | {"none", "any"};
ilist = iobjstr ? {"any"} | {"none", "any"};
for fobj in (this.features)
if (!$recycler:valid(fobj))
this:remove_feature(fobj);
else
fverb = 0;
try
"Ask the FO for a matching verb.";
fverb = fobj:has_feature_verb(verb, dlist, plist, ilist);
except e (E_VERBNF)
"Try to match it ourselves.";
if (`valid(loc = $object_utils:has_callable_verb(fobj, verb)[1]) ! ANY => 0')
vargs = verb_args(loc, verb);
if ((vargs[2] in plist) && ((vargs[1] in dlist) && (vargs[3] in ilist)))
fverb = verb;
endif
endif
endtry
if (fverb)
"(got rid of notify_huh - use @find to locate feature verbs)";
set_task_perms(permissions);
fobj:(fverb)(@pass);
return 1;
endif
endif
if ($command_utils:running_out_of_time())
player:tell("You have too many features.  Parsing your command runs out of ticks while checking ", fobj.name, " (", fobj, ").");
return 1;
endif
endfor
.
#6:6
":last_huh(verb,args)  final attempt to parse a command...";
set_task_perms(caller_perms());
{verb, args} = args;
if ((verb[1] == "@") && (prepstr == "is"))
"... set or show _msg property ...";
set_task_perms(player);
$last_huh:(verb)(@args);
return 1;
elseif (verb in {"give", "hand", "get", "take", "drop", "throw"})
$last_huh:(verb)(@args);
return 1;
else
return 0;
endif
.
#6:7
":my_match_object(string [,location])";
return $string_utils:match_object(@{@args, this.location}[1..2], this);
.
#6:8
c = args[1];
if (c)
longear = {};
gear = {};
width = player:linelen();
half = width / 2;
player:tell("Carrying:");
for thing in (c)
cx = tostr(" ", thing:title());
if (length(cx) > half)
longear = {@longear, cx};
else
gear = {@gear, cx};
endif
endfor
player:tell_lines($string_utils:columnize(gear, 2, width));
player:tell_lines(longear);
endif
.
#6:9
return `this.namec ! E_PROPNF => this:title()';
.
#6:10
line = args[1];
if (!(this in connected_players()))
"...drop it on the floor...";
return 0;
elseif ((caller != this) && (!$perm_utils:controls(caller_perms(), this)))
return E_PERM;
endif
if (this.pagelen)
"...need wizard perms if this and this.owner are different, since...";
"...only this can notify() and only this.owner can read .linebuffer...";
if ((player == this) && (this.linetask[2] != task_id()))
"...player has started a new task...";
"....linetask[2] is the taskid of the most recent player task...";
if (this.linetask[2] != this.linetask[1])
this.linesleft = this.pagelen - 2;
endif
this.linetask[2] = task_id();
endif
"... digest the current line...";
if (this.linelen > 0)
lbuf = {@this.linebuffer, @this:linesplit(line, this.linelen)};
else
lbuf = {@this.linebuffer, line};
endif
"... print out what we can...";
if (this.linesleft)
howmany = min(this.linesleft, length(lbuf));
for l in (lbuf[1..howmany])
pass(l);
endfor
this.linesleft = this.linesleft - howmany;
lbuf[1..howmany] = {};
endif
if (lbuf)
"...see if we need to say ***More***";
if (this.linetask[1] != this.linetask[2])
"....linetask[1] is the taskid of the most recent player task";
"...   for which ***More*** was printed...";
this.linetask[1] = this.linetask[2];
fork (0)
if (lb = this.linebuffer)
pass(strsub(this.more_msg, "%n", tostr(length(lb))));
endif
endfork
endif
llen = length(lbuf);
if (llen > 500)
"...way too much saved text, flush some of it...";
lbuf[1..llen - 100] = {"*** buffer overflow, lines flushed ***"};
endif
endif
this.linebuffer = lbuf;
else
if (this.linelen > 0)
for l in (this:linesplit(line, this.linelen))
pass(l);
endfor
else
pass(line);
endif
endif
.
#6:11
if (($perm_utils:controls(caller_perms(), this) || (caller == this)) || (caller_perms() == this))
set_task_perms(caller_perms());
for line in ((typeof(lines = args[1]) != LIST) ? {lines} | lines)
this:notify(tostr(line));
endfor
else
return E_PERM;
endif
.
#6:12
":linesplit(line,len) => list of substrings of line";
"used by :notify to split up long lines if .linelen>0";
{line, len} = args;
cline = {};
while (length(line) > len)
cutoff = rindex(line[1..len], " ");
if (nospace = cutoff < ((4 * len) / 5))
cutoff = len + 1;
nospace = line[cutoff] != " ";
endif
cline = {@cline, line[1..cutoff - 1]};
line = (nospace ? " " | "") + line[cutoff..$];
endwhile
return {@cline, line};
.
#6:13
return abs(this.linelen);
.
#6:14
if (player != this)
"... somebody's being sneaky...";
"... Can't do set_task_perms(player) since we need to be `this'...";
"... to notify and `this.owner' to change +c properties...";
return;
elseif (!(lbuf = this.linebuffer))
this.linesleft = this.pagelen - 2;
notify(this, "*** No more ***");
elseif (index("flush", dobjstr || "x") == 1)
this.linesleft = this.pagelen - 2;
notify(this, tostr("*** Flushed ***  ", length(lbuf), " lines"));
this.linebuffer = {};
elseif ((index("rest", dobjstr || "x") == 1) || (!this.pagelen))
this.linesleft = this.pagelen - 2;
for l in (lbuf)
notify(this, l);
endfor
this.linebuffer = {};
else
howmany = min(this.pagelen - 2, llen = length(lbuf = this.linebuffer));
for l in (lbuf[1..howmany])
notify(this, l);
endfor
this.linesleft = (this.pagelen - 2) - howmany;
this.linebuffer = lbuf[howmany + 1..llen];
if (howmany < llen)
notify(this, strsub(this.more_msg, "%n", tostr(llen - howmany)));
this.linetask[1] = task_id();
endif
endif
this.linetask[2] = task_id();
.
#6:15
if (player != this)
"... someone is being sneaky...";
"... Can't do set_task_perms(player) since we need to be `this'...";
"... to notify and `this.owner' to change +c properties...";
return;
endif
linelen = player.linelen;
if (!(prepstr in {"on", "off"}))
player:notify("Usage:  @wrap on|off");
player:notify(tostr("Word wrap is currently ", (linelen > 0) ? "on" | "off", "."));
return;
endif
player.linelen = abs(linelen) * ((prepstr == "on") ? 1 | -1);
player:notify(tostr("Word wrap is now ", prepstr, "."));
.
#6:16
if (callers() ? (caller != this) && (!$perm_utils:controls(caller_perms(), this)) | (player != this))
"... somebody is being sneaky ...";
return;
endif
curlen = player.linelen;
wrap = curlen > 0;
wrapstr = wrap ? "on" | "off";
if (!dobjstr)
player:notify(tostr("Usage:  ", verb, " <number>"));
player:notify(tostr("Current line length is ", abs(curlen), ".  Word wrapping is ", wrapstr, "."));
return;
endif
newlen = toint(dobjstr);
if (newlen < 0)
player:notify("Line length can't be a negative number.");
return;
elseif (newlen == 0)
return player:notify("Linelength zero makes no sense.  You want to use '@wrap off' if you want to turn off wrapping.");
elseif (newlen < 10)
player:notify("You don't want your linelength that small.  Setting it to 10.");
newlen = 10;
elseif (newlen > 1000)
player:notify("You don't want your line length that large.  Setting it to 1000.");
newlen = 1000;
endif
this:set_linelength(newlen);
player:notify(tostr("Line length is now ", abs(player.linelen), ".  Word wrapping is ", wrapstr, "."));
if (!wrap)
player:notify("To enable word wrapping, type `@wrap on'.");
endif
.
#6:17
"@pagelength number  -- sets page buffering to that many lines (or 0 to turn off page buffering)";
if (player != this)
"... somebody is being sneaky ...";
"... Can't do set_task_perms(player) since we need to be `this'...";
"... to notify and `this.owner' to change +c properties...";
return;
elseif (!dobjstr)
notify(player, tostr("Usage:  ", verb, " <number>"));
notify(player, tostr("Current page length is ", player.pagelen, "."));
return;
elseif (0 > (newlen = toint(dobjstr)))
notify(player, "Page length can't be a negative number.");
return;
elseif (newlen == 0)
player.pagelen = 0;
notify(player, "Page buffering off.");
if (lb = this.linebuffer)
"queued text remains";
this:notify_lines(lb);
clear_property(this, "linebuffer");
endif
elseif (newlen < 5)
player.pagelen = 5;
notify(player, "Too small.  Setting it to 5.");
else
notify(player, tostr("Page length is now ", player.pagelen = newlen, "."));
endif
if (this.linebuffer)
notify(this, strsub(this.more_msg, "%n", tostr(length(this.linebuffer))));
player.linetask = {task_id(), task_id()};
player.linesleft = 0;
else
player.linetask = {0, task_id()};
player.linesleft = player.pagelen - 2;
endif
.
#6:18
if (this.gaglist || this.paranoid)
"Check the above first, default case, to save ticks.  Paranoid gaggers are cost an extra three or so ticks by this, probably a net savings.";
if (this:gag_p())
return;
endif
if (this.paranoid == 1)
$paranoid_db:add_data(this, {{@callers(1), {player, "<cmd-line>", player}}, args});
elseif (this.paranoid == 2)
z = this:whodunnit({@callers(), {player, "", player}}, {this, $no_one}, {})[3];
args = {"(", z.name, " ", z, ") ", @args};
endif
endif
pass(@args);
.
#6:19
if (player in this.gaglist)
return 1;
elseif (gag = this.gaglist)
for x in (callers())
if (((x[1] == #-1) && (x[3] == #-1)) && (x[2] != ""))
elseif ((x[1] in gag) || (x[4] in gag))
return 1;
endif
endfor
endif
return 0;
"--- old definition --";
if (player in this.gaglist)
return 1;
elseif (this.gaglist)
for x in (callers())
if (valid(x[1]))
if (x[1] in this.gaglist)
return 1;
endif
endif
endfor
endif
return 0;
.
#6:20
":set_gaglist(@newlist) => this.gaglist = newlist";
if (!((caller == this) || $perm_utils:controls(caller_perms(), this)))
return E_PERM;
else
return this.gaglist = args;
endif
.
#6:21
set_task_perms(player);
if (player != this)
player:notify("Permission denied.");
return;
endif
if (!args)
player:notify(tostr("Usage:  ", verb, " <player or object> [<player or object>...]"));
return;
endif
victims = $string_utils:match_player_or_object(@args);
changed = 0;
for p in (victims)
if (p in player.gaglist)
player:notify(tostr("You are already gagging ", p.name, "."));
elseif (p == player)
player:notify("Gagging yourself is a bad idea.");
elseif (children(p) && (verb != "@gag!"))
player:tell("If you really want to gag all descendents of ", $string_utils:nn(p), ", use `@gag! ", p, "' instead.");
else
changed = 1;
player:set_gaglist(@setadd(this.gaglist, p));
endif
endfor
if (changed)
this:("@listgag")();
endif
.
#6:22
set_task_perms(valid(caller_perms()) ? caller_perms() | player);
if (!this.gaglist)
player:notify(tostr("You are ", callers() ? "no longer gagging anything." | "not gagging anything right now."));
else
player:notify(tostr("You are ", callers() ? "now" | "currently", " gagging ", $string_utils:nn(this.gaglist), "."));
endif
gl = {};
if (args)
player:notify("Searching for players who may be gagging you...");
for p in (players())
if ((typeof(`p.gaglist ! E_PERM') == LIST) && (this in p.gaglist))
gl = {@gl, p};
endif
$command_utils:suspend_if_needed(10, "...searching gaglist...");
endfor
if (gl || (!callers()))
player:notify(tostr($string_utils:nn(gl, " ", "No one"), " appear", (length(gl) <= 1) ? "s" | "", " to be gagging you."));
endif
endif
.
#6:23
if ((player != this) || ((caller != this) && (!$perm_utils:controls(caller_perms(), this))))
player:notify("Permission denied.");
elseif (dobjstr == "")
player:notify(tostr("Usage:  ", verb, " <player>  or  ", verb, " everyone"));
elseif (dobjstr == "everyone")
this.gaglist = {};
player:notify("You are no longer gagging anyone or anything.");
else
if (valid(dobj))
match = dobj;
elseif ((match = toobj(dobjstr)) > #0)
else
match = $string_utils:match(dobjstr, this.gaglist, "name", this.gaglist, "aliases");
endif
if (match == $failed_match)
player:notify(tostr("You don't seem to be gagging anything named ", dobjstr, "."));
elseif (match == $ambiguous_match)
player:notify(tostr("I don't know which \"", dobjstr, "\" you mean."));
else
this.gaglist = setremove(this.gaglist, match);
player:notify(tostr(valid(match) ? match.name | match, " removed from gag list."));
endif
this:("@listgag")();
endif
.
#6:24
{record, trust, mistrust} = args;
s = {this, "???", this};
for w in (record)
if (((((!valid(s[3])) || s[3].wizard) || (s[3] in trust)) && (!(s[3] in mistrust))) || (s[1] == this))
s = w;
else
return s;
endif
endfor
return s;
.
#6:25
responsible = $paranoid_db:get_data(this);
if (length(verb) <= 6)
"@check, not @check-full";
n = 5;
trust = {this, $no_one};
"... trust no one, my friend.... no one....  --Herod";
mistrust = {};
for k in (args)
if (z = $code_utils:toint(k))
n = z;
elseif (k[1] == "!")
mistrust = listappend(mistrust, $string_utils:match_player(k[2..$]));
else
trust = listappend(trust, $string_utils:match_player(k));
endif
endfor
msg_width = player:linelen() - 60;
for q in ((n > (y = length(responsible))) ? responsible | responsible[(y - n) + 1..y])
msg = tostr(@q[2]);
if (length(msg) > msg_width)
msg = msg[1..msg_width];
endif
s = this:whodunnit(q[1], trust, mistrust);
text = valid(s[1]) ? s[1].name | "** NONE **";
this:notify(tostr($string_utils:left(tostr((length(text) > 13) ? text[1..13] | text, " (", s[1], ")"), 20), $string_utils:left(s[2], 15), $string_utils:left(tostr((length(s[3].name) > 13) ? s[3].name[1..13] | s[3].name, " (", s[3], ")"), 20), msg));
endfor
this:notify("*** finished ***");
else
"@check-full, from @traceback by APHiD";
"s_i_n's by Ho_Yan 10/18/94";
matches = {};
if (length(match = argstr) == 0)
player:notify(tostr("Usage: ", verb, " <string> --or-- ", verb, " <number>"));
return;
endif
if (!responsible)
player:notify("No text has been saved by the monitor.  (See `help @paranoid').");
else
if (typeof(x = $code_utils:toint(argstr)) == ERR)
for line in (responsible)
if (index(tostr(@line[$]), argstr))
matches = {@matches, line};
endif
endfor
else
matches = responsible[($ - min(x, $)) + 1..$];
endif
if (matches)
for match in (matches)
$command_utils:suspend_if_needed(3);
text = tostr(@match[$]);
player:notify("Traceback for:");
player:notify(text);
"Moved cool display code to $code_utils, 3/29/95, Ho_Yan";
$code_utils:display_callers(listdelete(mm = match[1], length(mm)));
endfor
player:notify("**** finished ****");
else
player:notify(tostr("No matches for \"", argstr, "\" found."));
endif
endif
endif
.
#6:26
if ((args == {}) || ((typ = args[1]) == ""))
$paranoid_db:set_kept_lines(this, 10);
this.paranoid = 1;
this:notify("Anti-spoofer on and keeping 10 lines.");
elseif (index("immediate", typ))
$paranoid_db:set_kept_lines(this, 0);
this.paranoid = 2;
this:notify("Anti-spoofer now in immediate mode.");
elseif (index("off", typ) || (typ == "0"))
this.paranoid = 0;
$paranoid_db:set_kept_lines(this, 0);
this:notify("Anti-spoofer off.");
elseif ((tostr(y = toint(typ)) != typ) || (y < 0))
this:notify(tostr("Usage: ", verb, " <lines to be kept>     to turn on your anti-spoofer."));
this:notify(tostr("       ", verb, " off                    to turn it off."));
this:notify(tostr("       ", verb, " immediate              to use immediate mode."));
else
this.paranoid = 1;
kept = $paranoid_db:set_kept_lines(this, y);
this:notify(tostr("Anti-spoofer on and keeping ", kept, " lines."));
endif
.
#6:27
buggers = 1;
found_listener = 0;
here = this.location;
for thing in (setremove(here.contents, this))
tellwhere = $object_utils:has_verb(thing, "tell");
notifywhere = $object_utils:has_verb(thing, "notify");
if (thing in connected_players())
this:notify(tostr(thing.name, " (", thing, ") is listening."));
found_listener = 1;
elseif ($object_utils:has_callable_verb(thing, "sweep_msg") && (typeof(msg = thing:sweep_msg()) == STR))
this:notify(tostr(thing.name, " (", thing, ") ", msg, "."));
found_listener = 1;
elseif (tellwhere && (((owner = verb_info(tellwhere[1], "tell")[1]) != this) && (!owner.wizard)))
this:notify(tostr(thing.name, " (", thing, ") has been taught to listen by ", owner.name, " (", owner, ")"));
found_listener = 1;
elseif (notifywhere && (((owner = verb_info(notifywhere[1], "notify")[1]) != this) && (!owner.wizard)))
this:notify(tostr(thing.name, " (", thing, ") has been taught to listen by ", owner.name, " (", owner, ")"));
found_listener = 1;
endif
endfor
buggers = {};
for v in ({"announce", "announce_all", "announce_all_but", "say", "emote", "huh", "here_huh", "huh2", "whisper", "here_explain_syntax"})
vwhere = $object_utils:has_verb(here, v);
if (vwhere && (((owner = verb_info(vwhere[1], v)[1]) != this) && (!owner.wizard)))
buggers = setadd(buggers, owner);
endif
endfor
if (buggers != {})
if ($object_utils:has_verb(here, "sweep_msg") && (typeof(msg = here:sweep_msg()) == STR))
this:notify(tostr(here.name, " (", here, ") ", msg, "."));
else
this:notify(tostr(here.name, " (", here, ") may have been bugged by ", $string_utils:english_list($list_utils:map_prop(buggers, "name")), "."));
endif
elseif (!found_listener)
this:notify("Communications look secure.");
endif
.
#6:28
this:tell(player.name, " whispers, \"", dobjstr, "\"");
player:tell("You whisper, \"", dobjstr, "\" to ", this.name, ".");
.
#6:29
nargs = length(args);
if (nargs < 1)
player:notify(tostr("Usage: ", verb, " <player> [with <message>]"));
return;
endif
who = $string_utils:match_player(args[1]);
if ($command_utils:player_match_result(who, args[1])[1])
return;
elseif (who in this.gaglist)
player:tell("You have ", who:title(), " @gagged.  If you paged ", $gender_utils:get_pronoun("o", who), ", ", $gender_utils:get_pronoun("s", who), " wouldn't be able to answer you.");
return;
endif
"for pronoun_sub's benefit...";
dobj = who;
iobj = player;
header = player:page_origin_msg();
text = "";
if (nargs > 1)
if ((args[2] == "with") && (nargs > 2))
msg_start = 3;
else
msg_start = 2;
endif
msg = $string_utils:from_list(args[msg_start..nargs], " ");
text = tostr($string_utils:pronoun_sub(($string_utils:index_delimited(header, player.name) ? "%S" | "%N") + " %<pages>, \""), msg, "\"");
endif
result = text ? who:receive_page(header, text) | who:receive_page(header);
if (result == 2)
"not connected";
player:tell((typeof(msg = who:page_absent_msg()) == STR) ? msg | $string_utils:pronoun_sub("%n is not currently logged in.", who));
else
player:tell(who:page_echo_msg());
endif
.
#6:30
"called by $player:page.  Two args, the page header and the text, all pre-processed by the page command.  Could be extended to provide haven abilities, multiline pages, etc.  Indeed, at the moment it just does :tell_lines, so we already do have multiline pages, if someone wants to take advantage of it.";
"Return codes:";
"  1:  page was received";
"  2:  player is not connected";
"  0:  page refused";
"If a specialization wants to refuse a page, it should return 0 to say it was refused.  If it uses pass(@args) it should propagate back up the return value.  It is possible that this code should interact with gagging and return 0 if the page was gagged.";
if (this:is_listening())
this:tell_lines_suspended(args);
return 1;
else
return 2;
endif
.
#6:31
"set_task_perms(this.owner)";
return (msg = `this.(verb) ! ANY') ? $string_utils:pronoun_sub(this.(verb), this) | "";
.
#6:32
if (c = player:contents())
this:tell_contents(c);
else
player:tell("You are empty-handed.");
endif
.
#6:33
player:tell(this:titlec());
pass();
if (!(this in connected_players()))
player:tell($gender_utils:pronoun_sub("%{:He} %{!is} sleeping.", this));
elseif ((idle = idle_seconds(this)) < 60)
player:tell($gender_utils:pronoun_sub("%{:He} %{!is} awake and %{!looks} alert.", this));
else
time = $string_utils:from_seconds(idle);
player:tell($gender_utils:pronoun_sub("%{:He} %{!is} awake, but %{!has} been staring off into space for ", this), time, ".");
endif
if (c = this:contents())
this:tell_contents(c);
endif
.
#6:34
start = this.location;
if (start == this.home)
player:tell("You're already home!");
return;
elseif (typeof(this.home) != OBJ)
player:tell("You've got a weird home, pal.  I've reset it to the default one.");
this.home = $player_start;
elseif (!valid(this.home))
player:tell("Oh no!  Your home's been recycled.  Time to look around for a new one.");
this.home = $player_start;
else
player:tell("You click your heels three times.");
endif
this:moveto(this.home);
if (!valid(start))
elseif (start == this.location)
start:announce(player.name, " ", $gender_utils:get_conj("learns", player), " that you can never go home...");
else
try
start:announce(player.name, " ", $gender_utils:get_conj("goes", player), " home.");
except e (E_VERBNF)
"start did not support announce";
endtry
endif
if (this.location == this.home)
this.location:announce(player.name, " ", $gender_utils:get_conj("comes", player), " home.");
elseif (this.location == start)
player:tell("Either home doesn't want you, or you don't really want to go.");
else
player:tell("Wait a minute!  This isn't your home...");
if (valid(this.location))
this.location:announce(player.name, " ", $gender_utils:get_conj("arrives", player), ", looking quite bewildered.");
endif
endif
.
#6:35
set_task_perms(this);
here = this.location;
if (!$perm_utils:controls(player, player))
player:notify("Players who do not own themselves may not modify their home.");
elseif (!$object_utils:has_callable_verb(here, "accept_for_abode"))
player:notify("This is a pretty odd place.  You should make your home in an actual room.");
elseif (here:accept_for_abode(this))
this.home = here;
player:notify(tostr(here.name, " is your new home."));
else
player:notify(tostr("This place doesn't want to be your home.  Contact ", here.owner.name, " to be added to the residents list of this place, or choose another place as your home."));
endif
.
#6:36
player:tell("This is not a pick-up joint!");
this:tell(player.name, " tried to pick you up.");
.
#6:37
"'@move <object> to <place>' - Teleport an object. Example: '@move trash to #11' to move trash to the closet.";
set_task_perms((caller == this) ? this | $no_one);
dobj = this:my_match_object(dobjstr);
iobj = this:my_match_object(iobjstr);
if ($command_utils:object_match_failed(dobj, dobjstr) || ((iobj != $nothing) && $command_utils:object_match_failed(iobj, iobjstr)))
return;
endif
if ((!$perm_utils:controls(this, dobj)) && (this != dobj))
player:tell("You may only @move your own things.");
return;
endif
old_loc = dobj.location;
if (old_loc == iobj)
player:tell(dobj.name, " is already ", valid(iobj) ? "in " + iobj.name | "nowhere", ".");
return;
endif
dobj:moveto(iobj);
if (dobj.location == iobj)
player:tell("Moved.");
if (is_player(dobj))
if (valid(old_loc))
old_loc:announce_all(dobj.name, " disappears suddenly for parts unknown.");
if (dobj != player)
dobj:tell("You have been moved by ", player.name, ".");
endif
endif
if (valid(dobj.location))
dobj.location:announce(dobj.name, " materializes out of thin air.");
endif
endif
elseif (dobj.location == old_loc)
if ($object_utils:contains(dobj, iobj))
player:tell(iobj.name, " is inside of ", dobj.name, "!");
else
player:tell($string_utils:pronoun_sub("Either %d doesn't want to go, or %i doesn't want to accept %[dpo]."));
endif
elseif (dobj == player)
player:tell("You have been deflected from your original destination.");
else
player:tell($string_utils:pronoun_sub("%D has been deflected from %[dpp] original destination."));
endif
.
#6:38
set_task_perms(player);
if (iobjstr == "here")
iobj = player.location;
elseif (iobjstr == "me")
iobj = player;
elseif ($command_utils:object_match_failed(iobj, iobjstr))
return;
endif
if (!$perm_utils:controls(player, iobj))
player:notify(tostr("You are not the owner of ", iobj.name, "."));
return;
endif
if (dobjstr == "me")
dobj = player;
elseif (($failed_match == (dobj = $string_utils:literal_object(dobjstr))) && $command_utils:object_match_failed(dobj = iobj:match(dobjstr), dobjstr))
return;
endif
if (dobj.location != iobj)
player:notify(tostr(dobj.name, "(", dobj, ") is not in ", iobj.name, "(", iobj, ")."));
return;
endif
if (dobj.wizard)
player:notify(tostr("Sorry, you can't ", verb, " a wizard."));
dobj:tell(player.name, " tried to ", verb, " you.");
return;
endif
iobj:((verb == "@eject") ? "eject" | "eject_basic")(dobj);
player:notify($object_utils:has_callable_verb(iobj, "ejection_msg") ? iobj:ejection_msg() | $room:ejection_msg());
if (verb != "@eject!!")
dobj:tell($object_utils:has_callable_verb(iobj, "victim_ejection_msg") ? iobj:victim_ejection_msg() | $room:victim_ejection_msg());
endif
iobj:announce_all_but({player, dobj}, $object_utils:has_callable_verb(iobj, "oejection_msg") ? iobj:oejection_msg() | $room:oejection_msg());
.
#6:39
if (!args)
them = connected_players();
else
who = $command_utils:player_match_result($string_utils:match_player(args), args);
if (length(who) <= 1)
if (!who[1])
player:notify("Where is who?");
endif
return;
elseif (who[1])
player:notify("");
endif
them = listdelete(who, 1);
endif
lmax = rmax = 0;
for p in (them)
player:notify(tostr($string_utils:left($string_utils:nn(p), 25), " ", $string_utils:nn(p.location)));
endfor
.
#6:40
if (caller != player)
return E_PERM;
endif
plyrs = args ? listdelete($command_utils:player_match_result($string_utils:match_player(args), args), 1) | connected_players();
if (!plyrs)
return;
elseif (length(plyrs) > 100)
player:tell("You have requested a listing of ", length(plyrs), " players.  Please either specify individual players you are interested in, to reduce the number of players in any single request, or else use the `@users' command instead.  The lag thanks you.");
return;
endif
$code_utils:show_who_listing(plyrs);
.
#6:41
"@wizards [all]";
if (caller != player)
return E_PERM;
endif
if (args)
$code_utils:show_who_listing($wiz_utils:all_wizards());
else
$code_utils:show_who_listing($wiz_utils:connected_wizards()) || player:notify("No wizards currently logged in.");
endif
.
#6:42
set_task_perms(callers() ? caller_perms() | player);
"...this code explicitly relies on being !d in several places...";
if ((index(verb, "?") != 1) || (length(verb) <= 1))
what = $string_utils:trimr(argstr);
elseif (argstr)
what = tostr(verb[2..$], " ", $string_utils:trimr(argstr));
else
what = verb[2..$];
endif
"...find a db that claims to know about `what'...";
dblist = $code_utils:help_db_list();
result = $code_utils:help_db_search(what, dblist);
if (!result)
"... note: all of the last-resort stuff...";
"... is now located on $help:find_topics/get_topic...";
$wiz_utils:missed_help(what, result);
player:notify(tostr("Sorry, but no help is available on `", what, "'."));
elseif (result[1] == $ambiguous_match)
$wiz_utils:missed_help(what, result);
player:notify_lines(tostr("Sorry, but the topic-name `", what, "' is ambiguous.  I don't know which of the following topics you mean:"));
for x in ($help:columnize(@$help:sort_topics(result[2])))
player:notify(tostr("   ", x));
endfor
else
{help, topic} = result;
if (topic != what)
player:notify(tostr("Showing help on `", topic, "':"));
player:notify("----");
endif
dblist = dblist[1 + (help in dblist)..$];
if (1 == (text = help:get_topic(topic, dblist)))
"...get_topic took matters into its own hands...";
elseif (text)
"...these can get long...";
for line in ((typeof(text) == LIST) ? text | {text})
if (typeof(line) != STR)
player:notify("Odd results from help -- complain to a wizard.");
else
player:notify(line);
endif
$command_utils:suspend_if_needed(0);
endfor
else
player:notify(tostr("Help DB ", help, " thinks it knows about `", what, "' but something's messed up."));
player:notify(tostr("Tell ", help.owner.wizard ? "" | tostr(help.owner.name, " (", help.owner, ") or "), "a wizard."));
endif
endif
.
#6:43
":display_option(name) => returns the value of the specified @display option";
if ((caller == this) || $perm_utils:controls(caller_perms(), this))
return $display_options:get(this.display_options, args[1]);
else
return E_PERM;
endif
.
#6:44
":edit_option(name) => returns the value of the specified edit option";
if ((caller == this) || ($object_utils:isa(caller, $generic_editor) || $perm_utils:controls(caller_perms(), this)))
return $edit_options:get(this.edit_options, args[1]);
else
return E_PERM;
endif
.
#6:45
":set_edit_option(oname,value)";
":set_display_option(oname,value)";
":set_mail_option(oname,value)";
"Changes the value of the named option.";
"Returns a string error if something goes wrong.";
if (!((caller == this) || $perm_utils:controls(caller_perms(), this)))
return tostr(E_PERM);
endif
"...this is kludgy, but it saves me from writing the same verb 3 times.";
"...there's got to be a better way to do this...";
verb[1..4] = "";
foo_options = verb + "s";
"...";
if (typeof(s = #0.(foo_options):set(this.(foo_options), @args)) == STR)
return s;
elseif (s == this.(foo_options))
return 0;
else
this.(foo_options) = s;
return 1;
endif
.
#6:46
"@<what>-option <option> [is] <value>   sets <option> to <value>";
"@<what>-option <option>=<value>        sets <option> to <value>";
"@<what>-option +<option>     sets <option>   (usually equiv. to <option>=1";
"@<what>-option -<option>     resets <option> (equiv. to <option>=0)";
"@<what>-option !<option>     resets <option> (equiv. to <option>=0)";
"@<what>-option <option>      displays value of <option>";
set_task_perms(player);
what = {"mail", "edit", "display"}[index("med", verb[2])];
options = what + "_options";
option_pkg = #0.(options);
set_option = ("set_" + what) + "_option";
if (!args)
player:notify_lines({("Current " + what) + " options:", "", @option_pkg:show(this.(options), option_pkg.names)});
return;
elseif (typeof(presult = option_pkg:parse(args)) == STR)
player:notify(presult);
return;
else
if (length(presult) > 1)
if (typeof(sresult = this:(set_option)(@presult)) == STR)
player:notify(sresult);
return;
elseif (!sresult)
player:notify("No change.");
return;
endif
endif
player:notify_lines(option_pkg:show(this.(options), presult[1]));
endif
.
#6:47
"set_name(newname) attempts to change this.name to newname";
"  => E_PERM   if you don't own this";
"  => E_INVARG if the name is already taken or prohibited for some reason";
"  => E_NACC   if the player database is not taking new names right now.";
"  => E_ARGS   if the name is too long (controlled by $login.max_player_name)";
"  => E_QUOTA  if the player is not allowed to change eir name.";
if (!($perm_utils:controls(caller_perms(), this) || (this == caller)))
return E_PERM;
elseif (!is_player(this))
"we don't worry about the names of player classes.";
set_task_perms(caller_perms());
return pass(@args);
elseif ($player_db.frozen)
return E_NACC;
elseif (length(name = args[1]) > $login.max_player_name)
return E_ARGS;
elseif (!($player_db:available(name, this) in {this, 1}))
return E_INVARG;
else
old = this.name;
this.name = name;
if ((name != old) && (!(old in this.aliases)))
$player_db:delete(old);
endif
$player_db:insert(name, this);
return 1;
endif
.
#6:48
"set_aliases(alias_list)";
"For changing player aliases, we check to make sure that none of the aliases match existing player names/aliases.  Aliases containing spaces are not entered in the $player_db and so are not subject to this restriction ($string_utils:match_player will not match on them, however, so they only match if used in the immediate room, e.g., with match_object() or somesuch).";
"Also we make sure that the .name is included in the .alias list.  In any situation where .name and .aliases are both being changed, do the name change first.";
"  => 1        if successful, and aliases changed from previous setting.";
"  => 0        if resulting work didn't change aliases from previous.";
"  => E_PERM   if you don't own this";
"  => E_NACC   if the player database is not taking new aliases right now.";
"  => E_TYPE   if alias_list is not a list";
"  => E_INVARG if any element of alias_list is not a string";
if (!($perm_utils:controls(caller_perms(), this) || (this == caller)))
return E_PERM;
elseif (!is_player(this))
"we don't worry about the names of player classes.";
return pass(@args);
elseif ($player_db.frozen)
return E_NACC;
elseif (typeof(aliases = args[1]) != LIST)
return E_TYPE;
elseif ((length(aliases = setadd(aliases, this.name)) > ($object_utils:has_property($local, "max_player_aliases") ? $local.max_player_aliases | $maxint)) && (length(aliases) >= length(this.aliases)))
return E_INVARG;
else
for a in (aliases)
if (typeof(a) != STR)
return E_INVARG;
endif
if ((!(index(a, " ") || index(a, "	"))) && (!($player_db:available(a, this) in {this, 1})))
aliases = setremove(aliases, a);
endif
endfor
old = this.aliases;
this.aliases = aliases;
for a in (old)
if (!(a in aliases))
$player_db:delete2(a, this);
endif
endfor
for a in (aliases)
if (!(index(a, " ") || index(a, "	")))
$player_db:insert(a, this);
endif
endfor
return this.aliases != old;
endif
.
#6:49
if ((player != caller) || (player != this))
return;
endif
set_task_perms(player);
bynumber = verb == "@rename#";
spec = $code_utils:parse_verbref(dobjstr);
if (spec)
if (!player.programmer)
return player:notify(tostr(E_PERM));
endif
object = this:my_match_object(spec[1]);
if (!$command_utils:object_match_failed(object, spec[1]))
vname = spec[2];
if (bynumber)
vname = $code_utils:toint(vname);
if (vname == E_TYPE)
return player:notify("Verb number expected.");
elseif ((vname < 1) || `vname > length(verbs(object)) ! E_PERM => 0')
return player:notify("Verb number out of range.");
endif
endif
try
info = verb_info(object, vname);
try
result = set_verb_info(object, vname, listset(info, iobjstr, 3));
player:notify("Verb name changed.");
except e (ANY)
player:notify(e[2]);
endtry
except (E_VERBNF)
player:notify("That object does not define that verb.");
except e (ANY)
player:notify(e[2]);
endtry
endif
elseif (bynumber)
player:notify("@rename# can only be used with verbs.");
elseif (pspec = $code_utils:parse_propref(dobjstr))
if (!player.programmer)
return player:notify(tostr(E_PERM));
endif
object = this:my_match_object(pspec[1]);
if (!$command_utils:object_match_failed(object, pspec[1]))
pname = pspec[2];
try
info = property_info(object, pname);
try
result = set_property_info(object, pname, {@info, iobjstr});
player:notify("Property name changed.");
except e (ANY)
player:notify(e[2]);
endtry
except (E_PROPNF)
player:notify("That object does not define that property.");
except e (ANY)
player:notify(e[2]);
endtry
endif
else
object = this:my_match_object(dobjstr);
if (!$command_utils:object_match_failed(object, dobjstr))
old_name = object.name;
old_aliases = object.aliases;
if (e = $building_utils:set_names(object, iobjstr))
if (strcmp(object.name, old_name) == 0)
name_message = tostr("Name of ", object, " (", old_name, ") is unchanged");
else
name_message = tostr("Name of ", object, " changed to \"", object.name, "\"");
endif
aliases = $string_utils:from_value(object.aliases, 1);
if (object.aliases == old_aliases)
alias_message = tostr(".  Aliases are unchanged (", aliases, ").");
else
alias_message = tostr(", with aliases ", aliases, ".");
endif
player:notify(name_message + alias_message);
elseif (e == E_INVARG)
player:notify("That particular name change not allowed (see help @rename).");
if (object == player)
player:notify($player_db:why_bad_name(player, iobjstr));
endif
elseif (e == E_NACC)
player:notify("Oops.  You can't update that name right now; try again in a few minutes.");
elseif (e == E_ARGS)
player:notify(tostr("Sorry, name too long.  Maximum number of characters in a name:  ", $login.max_player_name));
elseif (e == 0)
player:notify("Name and aliases remain unchanged.");
else
player:notify(tostr(e));
endif
endif
endif
.
#6:50
"Syntax: @addalias <alias>[,...,<alias>] to <object>";
"        @addalias <alias>[,...,<alias>] to <object>:<verb>";
"";
"The first form is used to add aliases to an object's list of aliases.  You can separate multiple aliases with commas.  The aliases will be checked against the object's current aliases and all aliases not already in the object's list of aliases will be added.";
"";
"Example:";
"Muchkin wants to add new aliases to Rover the Wonder Dog:";
"  @addalias Dog,Wonder Dog to Rover";
"Since Rover the Wonder Dog already has the alias \"Dog\" but does not have the alias \"Wonder Dog\", Munchkin sees:";
"  Rover the Wonder Dog(#4237) already has the alias Dog.";
"  Alias Wonder Dog added to Rover the Wonder Dog(#4237).";
"";
"If the object is a player, spaces will also be assumed to be separations between aliases and each alias will be checked against the Player Name Database to make sure no one else is using it. Any already used aliases will be identified.";
"";
"Example:";
"Munchkin wants to add his nicknames to his own list of aliases:";
"  @addalias Foobar Davey to me";
"@Addalias recognizes that Munchkin is trying to add an alias to a valid player and checks the aliases against the Player Name Database.  Unfortunately, DaveTheMan is already using the alias \"Davey\" so Munchkin sees:";
"  DaveTheMan(#5432) is already using the alias Davey";
"  Alias Foobar added to Munchkin(#1523).";
"";
"The second form of the @addalias command is for use by programmers, to add aliases to a verb they own.  All commas and spaces are assumed to be separations between aliases.";
if (player != this)
return;
endif
set_task_perms(player);
bynumber = verb[$] == "#";
spec = $code_utils:parse_verbref(iobjstr);
if (spec)
if (!player.programmer)
return player:notify(tostr(E_PERM));
endif
object = player:my_match_object(spec[1]);
if (!$command_utils:object_match_failed(object, spec[1]))
vname = spec[2];
if (bynumber)
if ((vname = $code_utils:toint(vname)) == E_TYPE)
return player:notify("Verb number expected.");
elseif ((vname < 1) || `vname > length(verbs(object)) ! E_PERM => 0')
return player:notify("Verb number out of range.");
endif
endif
try
info = verb_info(object, vname);
old_aliases = $string_utils:explode(info[3]);
used = {};
for alias in (new_aliases = $list_utils:remove_duplicates($string_utils:explode(strsub(dobjstr, ",", " "))))
if (alias in old_aliases)
used = {@used, alias};
new_aliases = setremove(new_aliases, alias);
endif
endfor
if (used)
player:notify(tostr(object.name, "(", object, "):", vname, " already has the alias", (length(used) > 1) ? "es" | "", " ", $string_utils:english_list(used), "."));
endif
if (new_aliases)
info = listset(info, aliases = $string_utils:from_list({@old_aliases, @new_aliases}, " "), 3);
try
result = set_verb_info(object, vname, info);
player:notify(tostr("Alias", (length(new_aliases) > 1) ? "es" | "", " ", $string_utils:english_list(new_aliases), " added to verb ", object.name, "(", object, "):", vname));
player:notify(tostr("Verbname is now ", object.name, "(", object, "):\"", aliases, "\""));
except e (ANY)
player:notify(e[2]);
endtry
endif
if ((!new_aliases) && (!used))
"Pathological case, we failed to parse dobjstr, possibly consisted only of commas, spaces, or just the empty string";
player:notify("Did not understand what aliases to add from value:  " + dobjstr);
endif
except (E_VERBNF)
player:notify("That object does not define that verb.");
except e (ANY)
player:notify(e[2]);
endtry
endif
elseif (bynumber)
player:notify(tostr(verb, " can only be used with verbs."));
else
object = player:my_match_object(iobjstr);
if (!$command_utils:object_match_failed(object, iobjstr))
old_aliases = object.aliases;
used = {};
for alias in (new_aliases = $list_utils:remove_duplicates($list_utils:map_arg($string_utils, "trim", $string_utils:explode(is_player(object) ? strsub(dobjstr, " ", ",") | dobjstr, ","))))
if (alias in old_aliases)
used = {@used, alias};
new_aliases = setremove(new_aliases, alias);
elseif (is_player(object) && valid(someone = $player_db:find_exact(alias)))
player:notify(tostr(someone.name, "(", someone, ") is already using the alias ", alias, "."));
new_aliases = setremove(new_aliases, alias);
endif
endfor
if (used)
player:notify(tostr(object.name, "(", object, ") already has the alias", (length(used) > 1) ? "es" | "", " ", $string_utils:english_list(used), "."));
endif
if (new_aliases)
if ((e = object:set_aliases(aliases = {@old_aliases, @new_aliases})) && (object.aliases == aliases))
player:notify(tostr("Alias", (length(new_aliases) > 1) ? "es" | "", " ", $string_utils:english_list(new_aliases), " added to ", object.name, "(", object, ")."));
player:notify(tostr("Aliases for ", $string_utils:nn(object), " are now ", $string_utils:from_value(aliases, 1)));
elseif (e)
player:notify("That particular name change not allowed (see help @rename or help @addalias).");
elseif (e == E_INVARG)
if ($object_utils:has_property(#0, "local"))
if ($object_utils:has_property($local, "max_player_aliases"))
max = $local.max_player_aliases;
player:notify(("You are not allowed more than " + tostr(max)) + " aliases.");
endif
else
player:notify("You are not allowed any more aliases.");
endif
elseif (e == E_NACC)
player:notify("Oops.  You can't update that object's aliases right now; try again in a few minutes.");
elseif (e == 0)
player:notify("Aliases not changed as expected!");
player:notify(tostr("Aliases for ", $string_utils:nn(object), " are now ", $string_utils:from_value(object.aliases, 1)));
else
player:notify(tostr(e));
endif
else
player:tell("No new aliases found to add.");
endif
endif
endif
.
#6:51
"Syntax: @rmalias <alias>[,...,<alias>] from <object>";
"        @rmalias <alias>[,...,<alias>] from <object>:<verb>";
"";
"The first form is used to remove aliases from an object.  If the object is a valid player, space and commas will be assumed to be separations between unwanted aliases.  Otherwise, only commas will be assumed to be separations.";
"[5/10/93 Nosredna: flushed above is_player feature";
"Note that @rmalias will not affect the object's name, only its aliases.";
"";
"The second form is for use by programmers, to remove aliases from a verb they own.  All spaces and commas are assumed to be separations between unwanted aliases.";
if (player != this)
return;
endif
set_task_perms(player);
bynumber = verb[$] == "#";
spec = $code_utils:parse_verbref(iobjstr);
if (spec)
if (!player.programmer)
player:notify(tostr(E_PERM));
endif
object = player:my_match_object(spec[1]);
if (!$command_utils:object_match_failed(object, spec[1]))
vname = spec[2];
if (bynumber)
if ((vname = $code_utils:toint(vname)) == E_TYPE)
return player:notify("Verb number expected.");
elseif ((vname < 1) || `vname > length(verbs(object)) ! E_PERM => 0')
return player:notify("Verb number out of range.");
endif
endif
try
info = verb_info(object, vname);
old_aliases = $string_utils:explode(info[3]);
not_used = {};
for alias in (bad_aliases = $list_utils:remove_duplicates($string_utils:explode(strsub(dobjstr, ",", " "))))
if (!(alias in old_aliases))
not_used = {@not_used, alias};
bad_aliases = setremove(bad_aliases, alias);
else
old_aliases = setremove(old_aliases, alias);
endif
endfor
if (not_used)
player:notify(tostr(object.name, "(", object, "):", vname, " does not have the alias", (length(not_used) > 1) ? "es" | "", " ", $string_utils:english_list(not_used), "."));
endif
if (bad_aliases && old_aliases)
info = listset(info, aliases = $string_utils:from_list(old_aliases, " "), 3);
try
result = set_verb_info(object, vname, info);
player:notify(tostr("Alias", (length(bad_aliases) > 1) ? "es" | "", " ", $string_utils:english_list(bad_aliases), " removed from verb ", object.name, "(", object, "):", vname));
player:notify(tostr("Verbname is now ", object.name, "(", object, "):\"", aliases, "\""));
except e (ANY)
player:notify(e[2]);
endtry
elseif (!old_aliases)
player:notify("You have to leave a verb with at least one alias.");
else
player:notify("No aliases removed.");
endif
except (E_VERBNF)
player:notify("That object does not define that verb.");
except e (ANY)
player:notify(e[2]);
endtry
endif
elseif (bynumber)
player:notify(tostr(verb, " can only be used with verbs."));
else
object = player:my_match_object(iobjstr);
if (!$command_utils:object_match_failed(object, iobjstr))
old_aliases = object.aliases;
not_used = {};
for alias in (bad_aliases = $list_utils:remove_duplicates($list_utils:map_arg($string_utils, "trim", $string_utils:explode(dobjstr, ","))))
"removed is_player(object) ? strsub(dobjstr, \" \", \",\") | --Nosredna";
if (!(alias in old_aliases))
not_used = {@not_used, alias};
bad_aliases = setremove(bad_aliases, alias);
else
old_aliases = setremove(old_aliases, alias);
endif
endfor
if (not_used)
player:notify(tostr(object.name, "(", object, ") does not have the alias", (length(not_used) > 1) ? "es" | "", " ", $string_utils:english_list(not_used), "."));
endif
if (bad_aliases)
if (e = object:set_aliases(old_aliases))
player:notify(tostr("Alias", (length(bad_aliases) > 1) ? "es" | "", " ", $string_utils:english_list(bad_aliases), " removed from ", object.name, "(", object, ")."));
player:notify(tostr("Aliases for ", object.name, "(", object, ") are now ", $string_utils:from_value(old_aliases, 1)));
elseif (e == E_INVARG)
player:notify("That particular name change not allowed (see help @rename or help @rmalias).");
elseif (e == E_NACC)
player:notify("Oops.  You can't update that object's aliases right now; try again in a few minutes.");
elseif (e == 0)
player:notify("Aliases not changed as expected!");
player:notify(tostr("Aliases for ", $string_utils:nn(object), " are ", $string_utils:from_value(object.aliases, 1)));
else
player:notify(tostr(e));
endif
else
player:notify("Aliases unchanged.");
endif
endif
endif
.
#6:52
set_task_perms(player);
dobj = player:my_match_object(dobjstr);
if ($command_utils:object_match_failed(dobj, dobjstr))
"...lose...";
elseif (e = dobj:set_description(iobjstr))
player:notify("Description set.");
else
player:notify(tostr(e));
endif
.
#6:53
set_task_perms(player);
if (dobjstr == "")
player:notify(tostr("Usage:  ", verb, " <object>"));
return;
endif
dobj = player:my_match_object(dobjstr);
if ($command_utils:object_match_failed(dobj, dobjstr))
return;
endif
found_one = 0;
props = $object_utils:all_properties(dobj);
if (typeof(props) == ERR)
player:notify("You can't read the messages on that.");
return;
endif
for pname in (props)
len = length(pname);
if ((len > 4) && (pname[len - 3..len] == "_msg"))
found_one = 1;
msg = `dobj.(pname) ! ANY';
if (msg == E_PERM)
value = "isn't readable by you.";
elseif (!msg)
value = "isn't set.";
elseif (typeof(msg) == LIST)
value = "is a list.";
elseif (typeof(msg) != STR)
value = "is corrupted! **";
else
value = "is " + $string_utils:print(msg);
endif
player:notify(tostr("@", pname[1..len - 4], " ", dobjstr, " ", value));
endif
endfor
if (!found_one)
player:notify("That object doesn't have any messages to set.");
endif
.
#6:54
$note_editor:invoke(dobjstr, verb);
.
#6:55
"@last-c           reports when and from where you last connected.";
"@last-c all       adds the 10 most recent places you connected from.";
"@last-c confunc   is like `@last-c' but is silent on first login.";
opts = {"all", "confunc"};
i = 0;
if (caller != this)
return E_PERM;
elseif (args && ((length(args) > 1) || (!(i = $string_utils:find_prefix(args[1], opts)))))
this:notify(tostr("Usage:  ", verb, " [all]"));
return;
endif
opt_all = i && (opts[i] == "all");
opt_confunc = i && (opts[i] == "confunc");
if (!(prev = this.previous_connection))
this:notify("Something was broken when you logged in; tell a wizard.");
elseif (prev[1] == 0)
opt_confunc || this:notify("Your previous connection was before we started keeping track.");
elseif (prev[1] > time())
this:notify("This is your first time connected.");
else
this:notify(tostr("Last connected ", this:ctime(prev[1]), " from ", prev[2]));
if (opt_all)
this:notify("Previous connections have been from the following sites:");
for l in (this.all_connect_places)
this:notify("   " + l);
endfor
endif
endif
.
#6:56
"set_gender(newgender) attempts to change this.gender to newgender";
"  => E_PERM   if you don't own this or aren't its parent";
"  => Other return values as from $gender_utils:set.";
if (!($perm_utils:controls(caller_perms(), this) || (this == caller)))
return E_PERM;
else
result = $gender_utils:set(this, args[1]);
this.gender = (typeof(result) == STR) ? result | args[1];
return result;
endif
.
#6:57
set_task_perms(valid(caller_perms()) ? caller_perms() | player);
if (!args)
player:notify(tostr("Your gender is currently ", this.gender, "."));
player:notify($string_utils:pronoun_sub("Your pronouns:  %s,%o,%p,%q,%r,%S,%O,%P,%Q,%R"));
player:notify(tostr("Available genders:  ", $string_utils:english_list($gender_utils.genders, "", " or ")));
else
result = this:set_gender(args[1]);
quote = (result == E_NONE) ? "\"" | "";
player:notify(tostr("Gender set to ", quote, this.gender, quote, "."));
if (typeof(result) != ERR)
player:notify($string_utils:pronoun_sub("Your pronouns:  %s,%o,%p,%q,%r,%S,%O,%P,%Q,%R"));
elseif (result != E_NONE)
player:notify(tostr("Couldn't set pronouns:  ", result));
else
player:notify("Pronouns unchanged.");
endif
endif
.
#6:58
"set_brief(value)";
"set_brief(value, anything)";
"If <anything> is given, add value to the current value; otherwise, just set the value.";
if (!($perm_utils:controls(caller_perms(), this) || (this == caller)))
return E_PERM;
else
if (length(args) == 1)
this.brief = args[1];
else
this.brief = this.brief + args[1];
endif
endif
.
#6:59
"@mode <mode>";
"Current modes are brief and verbose.";
"General verb for setting player `modes'.";
"Modes are coded right here in the verb.";
if (caller != this)
player:tell("You can't set someone else's modes.");
return E_PERM;
endif
modes = {"brief", "verbose"};
mode = `modes[$string_utils:find_prefix(dobjstr, modes)] ! E_TYPE, E_RANGE => 0';
if (!mode)
player:tell("Unknown mode \"", dobjstr, "\".  Known modes:");
for mode in (modes)
player:tell("  ", mode);
endfor
return 0;
elseif (mode == "brief")
this:set_brief(1);
elseif (mode == "verbose")
this:set_brief(0);
endif
player:tell($string_utils:capitalize(mode), " mode set.");
return 1;
.
#6:60
"This verb should probably go away once 'examine' is in place.";
if (dobjstr == "")
player:notify(tostr("Usage:  ", verb, " <object>"));
return;
endif
what = $string_utils:match_object(dobjstr, player.location);
if ($command_utils:object_match_failed(what, dobjstr))
return;
endif
player:notify(tostr(what.name, " (", what, ") is owned by ", valid(what.owner) ? what.owner.name | "a recycled player", " (", what.owner, ")."));
player:notify(tostr("Aliases:  ", $string_utils:english_list(what.aliases)));
desc = what:description();
if (desc)
player:notify_lines(desc);
else
player:notify("(No description set.)");
endif
if ($perm_utils:controls(player, what))
player:notify(tostr("Key:  ", $lock_utils:unparse_key(what.key)));
endif
contents = what.contents;
if (contents)
player:notify("Contents:");
for item in (contents)
player:notify(tostr("  ", item.name, " (", item, ")"));
endfor
endif
"Use dobjstr, not shortest alias.";
name = dobjstr;
"name = what.name;";
"if (typeof(what.aliases) == LIST && what.aliases != {})";
"for alias in (what.aliases)";
"if (length(alias) <= length(name))";
"name = alias;";
"endif";
"endfor";
"endif";
vrbs = {};
commands_ok = what in {player, player.location};
dull_classes = {$root_class, $room, $player, $prog};
what = what;
printed_working_msg = 0;
while (what != $nothing)
if ($command_utils:running_out_of_time())
if (!printed_working_msg)
player:notify("Working on list of obvious verbs...");
printed_working_msg = 1;
endif
suspend(0);
endif
if (!(what in dull_classes))
for i in [1..length(verbs(what))]
if ($command_utils:running_out_of_time())
if (!printed_working_msg)
player:notify("Working on list of obvious verbs...");
printed_working_msg = 1;
endif
suspend(0);
endif
info = verb_info(what, i);
syntax = verb_args(what, i);
if ((index(info[2], "r") && ((syntax[2..3] != {"none", "this"}) && (commands_ok || ("this" in syntax)))) && verb_code(what, i))
{dobj, prep, iobj} = syntax;
if (syntax == {"any", "any", "any"})
prep = "none";
endif
if (prep != "none")
for x in ($string_utils:explode(prep, "/"))
if (length(x) <= length(prep))
prep = x;
endif
endfor
endif
"This is the correct way to handle verbs ending in *";
vname = info[3];
while (j = index(vname, "* "))
vname = tostr(vname[1..j - 1], "<anything>", vname[j + 1..$]);
endwhile
if (vname[$] == "*")
vname = vname[1..$ - 1] + "<anything>";
endif
vname = strsub(vname, " ", "/");
rest = "";
if (prep != "none")
rest = " " + ((prep == "any") ? "<anything>" | prep);
if (iobj != "none")
rest = tostr(rest, " ", (iobj == "this") ? name | "<anything>");
endif
endif
if (dobj != "none")
rest = tostr(" ", (dobj == "this") ? name | "<anything>", rest);
endif
vrbs = setadd(vrbs, ("  " + vname) + rest);
endif
endfor
endif
what = parent(what);
endwhile
if (vrbs)
player:notify("Obvious Verbs:");
player:notify_lines(vrbs);
printed_working_msg && player:notify("(End of list.)");
elseif (printed_working_msg)
player:notify("No obvious verbs found.");
endif
.
#6:61
set_task_perms(player);
if (!dobjstr)
player:notify(tostr("Usage:  ", verb, " <object>"));
return E_INVARG;
endif
what = player.location:match_object(dobjstr);
if ($command_utils:object_match_failed(what, dobjstr))
return;
endif
what:do_examine(player);
.
#6:62
"Add a feature to this player's features list.  Caller must be this or have suitable permissions (this or wizardly).";
"If this is a nonprogrammer, then ask feature if it is feature_ok (that is, if it has a verb :feature_ok which returns a true value, or a property .feature_ok which is true).";
"After adding feature, call feature:feature_add(this).";
"Returns true if successful, E_INVARG if not a valid object, and E_PERM if !feature_ok or if caller doesn't have permission.";
if ((caller == this) || $perm_utils:controls(caller_perms(), this))
feature = args[1];
if ((typeof(feature) != OBJ) || (!valid(feature)))
return E_INVARG;
"Not a valid object.";
endif
if ($code_utils:verb_or_property(feature, "feature_ok", this))
"The object is willing to be a feature.";
if (typeof(this.features) == LIST)
"If list, we can simply setadd the feature.";
this.features = setadd(this.features, feature);
else
"If not, we erase the old value and create a new list.";
this.features = {feature};
endif
"Tell the feature it's just been added.";
try
feature:feature_add(this);
except (ANY)
"just ignore errors.";
endtry
return 1;
"We're done.";
else
return E_PERM;
"Feature isn't feature_ok.";
endif
else
return E_PERM;
"Caller doesn't have permission.";
endif
.
#6:63
"Remove a feature from this player's features list.  Caller must be this, or have permissions of this, a wizard, or feature.owner.";
"Returns true if successful, E_PERM if caller didn't have permission.";
feature = args[1];
if (((caller == this) || $perm_utils:controls(caller_perms(), this)) || (caller_perms() == feature.owner))
if (typeof(this.features) == LIST)
"If this is a list, we can just setremove...";
this.features = setremove(this.features, feature);
"Otherwise, we leave it alone.";
endif
"Let the feature know it's been removed.";
try
feature:feature_remove(this);
except (ANY)
"just ignore errors.";
endtry
return 1;
"We're done.";
else
return E_PERM;
"Caller didn't have permission.";
endif
.
#6:64
"Usage:";
"  @add-feature";
"  @add-feature <feature object>";
"Modified 10 Oct 94, by Michele, to check the warehouse and match.";
"Lists all features or adds an object to your features list.";
set_task_perms(player);
if (dobjstr)
if (dobj == $failed_match)
dobj = $feature.warehouse:match_object(dobjstr);
endif
if (!$command_utils:object_match_failed(dobj, dobjstr))
if (dobj in player.features)
player:tell(dobjstr, " is already one of your features.");
elseif (player:add_feature(dobj))
player:tell(dobj, " (", dobj.name, ") added as a feature.");
else
player:tell("You can't seem to add ", dobj, " (", dobj.name, ") to your features list.");
endif
endif
else
player:tell("Usage:  @add-feature <object>");
if (length($feature.warehouse.contents) < 20)
player:tell("Available features include:");
player:tell("--------------------------");
fe = {};
for c in ($feature.warehouse.contents)
fe = {(c in player.features) ? c:title() + " (*)" | c:title()};
player:tell("  " + $string_utils:english_list(fe));
endfor
player:tell("--------------------------");
player:tell("A * after the feature name means that you already have that feature.");
endif
endif
.
#6:65
"Usage:  @remove-feature <feature object>";
"Remove an object from your .features list.";
set_task_perms(player);
if (dobjstr)
features = player.features;
if (!valid(dobj))
dobj = $string_utils:match(dobjstr, features, "name", features, "aliases");
endif
if (!$command_utils:object_match_failed(dobj, dobjstr))
if (dobj in features)
player:remove_feature(dobj);
player:tell(dobj, " (", dobj.name, ") removed from your features list.");
else
player:tell(dobjstr, " is not one of your features.");
endif
endif
else
player:tell("Usage:  @remove-feature <object>");
endif
.
#6:66
"Usage:  @features [<name>] for <player>";
"List the feature objects matching <name> used by <player>.";
if (!iobjstr)
player:tell("Usage: @features [<name>] for <player>");
return;
elseif ($command_utils:player_match_failed(whose = $string_utils:match_player(iobjstr), iobjstr))
return;
endif
features = {};
for feature in (whose.features)
if (!valid(feature))
whose:remove_feature(feature);
elseif ((!dobjstr) || ((dobjstr in feature.aliases) || ((pref = $string_utils:find_prefix(dobjstr, feature.aliases)) || (pref == $ambiguous_match))))
features = listappend(features, feature);
endif
endfor
if (features)
len = max(length("Feature"), length(tostr(max_object()))) + 1;
player:tell($string_utils:left("Feature", len), "Name");
player:tell($string_utils:left("-------", len), "----");
for feature in (features)
player:tell($string_utils:left(tostr(feature), len), feature.name);
endfor
player:tell($string_utils:left("-------", len), "----");
cstr = ((tostr(length(features)) + " feature") + ((length(features) > 1) ? "s" | "")) + " found";
if (whose != this)
cstr = ((((cstr + " on ") + whose.name) + " (") + tostr(whose)) + ")";
endif
if (dobjstr)
cstr = ((cstr + " matching \"") + dobjstr) + "\"";
endif
cstr = cstr + ".";
player:tell(cstr);
elseif (dobjstr)
player:tell("No features found on ", whose.name, " (", whose, ") matching \"", dobjstr, "\".");
else
player:tell("No features found on ", whose.name, " (", whose, ").");
endif
.
#6:67
"Usage:  @features [<name>]";
"List the feature objects matching <name> used by player.";
iobjstr = player.name;
iobj = player;
this:("@features")();
.
#6:68
stats = memory_usage();
if (!stats)
player:notify("Sorry, but no memory-usage statistics are available for this server.");
return;
endif
su = $string_utils;
player:notify("Block Size   # In Use    # Free    Bytes In Use   Bytes Free");
player:notify("----------   --------   --------   ------------   ----------");
nused = nfree = bytesused = bytesfree = 0;
kilo = 1024;
meg = kilo * kilo;
for x in (stats)
if (x[2..3] != {0, 0})
bsize = x[1];
if ((bsize % meg) == 0)
bsize = tostr(bsize / meg, " M");
elseif ((bsize % kilo) == 0)
bsize = tostr(bsize / kilo, " K");
endif
bused = x[1] * x[2];
bfree = x[1] * x[3];
player:notify(tostr(su:left(bsize, 10), "   ", su:right(su:group_number(x[2]), 8), "   ", su:right(su:group_number(x[3]), 8), "   ", su:right(su:group_number(bused), 12), "   ", su:right(su:group_number(bfree), 10)));
nused = nused + x[2];
nfree = nfree + x[3];
bytesused = bytesused + bused;
bytesfree = bytesfree + bfree;
endif
endfor
player:notify("");
player:notify(tostr(su:left("Totals:", 10), "   ", su:right(su:group_number(nused), 8), "   ", su:right(su:group_number(nfree), 8), "   ", su:right(su:group_number(bytesused), 12), "   ", su:right(su:group_number(bytesfree), 10)));
player:notify("");
player:notify(tostr("Total Memory Size: ", su:group_number(bytesused + bytesfree), " bytes."));
.
#6:69
if ($object_utils:has_property($local, "server_hardware"))
hw = (" on " + $local.server_hardware) + ".";
else
hw = ".";
endif
server_version = server_version();
if (server_version[1] == "v")
server_version[1..1] = "";
endif
player:notify(tostr("The MOO is currently running version ", server_version, " of the LambdaMOO server code", hw));
try
{MOOname, sversion, coretime} = $core_history[1];
player:notify(tostr("The database was derived from a core created on ", $time_utils:time_sub("$n $t, $Y", coretime), " at ", MOOname, " for version ", sversion, " of the server."));
except (E_RANGE)
player:notify("The database was created from scratch.");
except (ANY)
player:notify("No information is available on the database version.");
endtry
.
#6:70
player:notify(tostr($network.MOO_name, " has been up for ", $time_utils:english_time(time() - $last_restart_time, $last_restart_time), "."));
.
#6:71
boot_player(player);
"-- argh, let the player decide; #3:disfunc() takes care of this --Rog";
"player:moveto(player.home)";
.
#6:72
return this == args[1];
.
#6:73
"return true if player is active.";
return typeof(`idle_seconds(this) ! ANY') != ERR;
.
#6:74
if (args[1] == #-1)
return E_INVARG;
this:notify("You are now in #-1, The Void.  Type `home' to get back.");
endif
set_task_perms(caller_perms());
pass(@args);
.
#6:75
return this.location:(verb)(@args);
"temporarily let player:announce be noisy to player";
if (verb == "announce_all_but")
if (this in args[1])
return;
endif
args = args[2..$];
endif
this:tell("(from within you) ", @args);
.
#6:76
"Return a true value if this needs linewrapping.";
"default is true if .linelen > 0";
return this.linelen > 0;
.
#6:77
"Usage:  @set-note-{string | text} {#xx | #xx.pname}";
"        ...lines of text...";
"        .";
"";
"For use by clients' local editors, to save new text for a note or object property.  See $note_editor:local_editing_info() for details.";
text = $command_utils:read_lines_escape((active = player in $note_editor.active) ? {} | {"@edit"}, {tostr("Changing ", argstr, "."), @active ? {} | {"Type `@edit' to take this into the note editor."}});
if (text && (text[1] == "@edit"))
$note_editor:invoke(argstr, verb);
who = $note_editor:loaded(player);
if (who)
$note_editor.texts[who] = text[2];
endif
return;
endif
set_task_perms(player);
text = text[2];
if ((verb == "@set-note-string") && (length(text) <= 1))
text = text ? text[1] | "";
endif
if (spec = $code_utils:parse_propref(argstr))
o = player:my_match_object(spec[1]);
p = spec[2];
if ($object_utils:has_verb(o, vb = "set_" + p) && (typeof(e = o:(vb)(text)) != ERR))
player:tell("Set ", p, " property of ", o.name, " (", o, ") via :", vb, ".");
elseif (text != (e = `o.(p) = text ! ANY'))
player:tell("Error:  ", e);
else
player:tell("Set ", p, " property of ", o.name, " (", o, ").");
endif
elseif (typeof(note = $code_utils:toobj(argstr)) == OBJ)
e = note:set_text(text);
if (typeof(e) == ERR)
player:tell("Error:  ", e);
else
player:tell("Set text of ", note.name, " (", note, ").");
endif
else
player:tell("Error:  Malformed argument to ", verb, ": ", argstr);
endif
.
#6:78
text = args[1];
if (a = `$list_utils:assoc(text, this.verb_subs) ! ANY')
return a[2];
else
return $gender_utils:get_conj(text, this);
endif
.
#6:79
if ($perm_utils:controls(caller_perms(), this))
return this.(verb);
else
return E_PERM;
endif
.
#6:80
lines = args[1];
if (typeof(lines) != LIST)
lines = {lines};
endif
if (this.gaglist || this.paranoid)
"Check the above first, default case, to save ticks.  Paranoid gaggers are cost an extra three or so ticks by this, probably a net savings.";
if (this:gag_p())
return;
endif
if (this.paranoid == 2)
z = this:whodunnit({@callers(1), {player, "", player}}, {this, $no_one}, {})[3];
lines = {((("[start text by " + z.name) + " (") + tostr(z)) + ")]", @lines, ((("[end text by " + z.name) + " (") + tostr(z)) + ")]"};
elseif (this.paranoid == 1)
$paranoid_db:add_data(this, {{@callers(1), {player, "<cmd-line>", player}}, lines});
endif
endif
"don't gather stats for now: $list_utils:check_nonstring_tell_lines(lines)";
this:notify_lines(lines);
.
#6:81
"Copied from generic room (#3):@lastlog by Haakon (#2) Wed Dec 30 13:30:02 1992 PST";
if (dobjstr != "")
dobj = $string_utils:match_player(dobjstr);
if (!valid(dobj))
player:tell("Who?");
return;
endif
folks = {dobj};
else
folks = players();
endif
if (length(folks) > 100)
player:tell("You have requested a listing of ", length(folks), " players.  That is too long a list; specify individual players you are interested in.");
return;
endif
day = week = month = ever = never = {};
a_day = (24 * 60) * 60;
a_week = 7 * a_day;
a_month = 30 * a_day;
now = time();
for x in (folks)
when = x.last_connect_time;
how_long = now - when;
if ((when == 0) || (when > now))
never = {@never, x};
elseif (how_long < a_day)
day = {@day, x};
elseif (how_long < a_week)
week = {@week, x};
elseif (how_long < a_month)
month = {@month, x};
else
ever = {@ever, x};
endif
endfor
for entry in ({{day, "the last day"}, {week, "the last week"}, {month, "the last 30 days"}, {ever, "recorded history"}})
if (entry[1])
player:tell("Players who have connected within ", entry[2], ":");
for x in (entry[1])
player:tell("  ", x.name, " last connected ", ctime(x.last_connect_time), ".");
endfor
endif
endfor
if (never)
player:tell("Players who have never connected:");
player:tell("  ", $string_utils:english_list($list_utils:map_prop(never, "name")));
endif
.
#6:82
"Set linelength.  Linelength must be an integer >= 10.";
"If wrap is currently off (i.e. linelength is less than 0), maintains sign.  That is, this function *takes* an absolute value, and coerces the sign to be appropriate.";
"If you want to override the dwimming of wrap, pass in a second argument.";
"returns E_PERM if not allowed, E_INVARG if linelength is too low, otherwise the linelength.";
if ((caller != this) && (!$perm_utils:controls(caller_perms(), this)))
return E_PERM;
elseif (abs(len = args[1]) < 10)
return E_INVARG;
elseif (length(args) > 1)
this.linelen = len;
else
"DWIM here.";
this.linelen = (this.linelen > 0) ? len | (-len);
return len;
endif
.
#6:83
"Set pagelength. Must be an integer >= 5, or 0 to turn pagelength off.";
"Returns E_PERM if you shouldn't be doing this, E_INVARG if it's too low, otherwise, what it got set to.";
if ((caller != this) && (!$perm_utils:controls(caller_perms(), this)))
return E_PERM;
elseif (((len = args[1]) < 5) && (len != 0))
return E_INVARG;
else
if ((this.pagelen = len) == 0)
if (lb = this.linebuffer)
"queued text remains";
this:notify_lines(lb);
clear_property(this, "linebuffer");
endif
endif
return len;
endif
.
#6:84
"set_home(newhome) attempts to change this.home to newhome";
"E_TYPE   if newhome doesn't have a callable :accept_for_abode verb.";
"E_INVARG if newhome won't accept you as a resident.";
"E_PERM   if you don't own this and aren't its parent.";
"1        if it works.";
newhome = args[1];
if ((caller == this) || $perm_utils:controls(caller_perms(), this))
if ($object_utils:has_callable_verb(newhome, "accept_for_abode"))
if (newhome:accept_for_abode(this))
return (typeof(e = `this.home = args[1] ! ANY') != ERR) || e;
else
return E_INVARG;
endif
else
return E_TYPE;
endif
else
return E_PERM;
endif
.
#6:85
"@registerme as <email-address> -- enter a new email address for player";
"   will change the database entry, assign a new password, and mail the new password to the player at the given email address.";
if (player != this)
return player:notify(tostr(E_PERM));
endif
who = this;
if ($object_utils:isa(this, $guest))
who:notify("Sorry, guests should use the '@request' command to request a character.");
return;
endif
connection = $string_utils:connection_hostname(connection_name(who));
if (!argstr)
if ($wiz_utils:get_email_address(who))
player:tell("You are currently registered as:  ", $wiz_utils:get_email_address(who));
else
player:tell("You are not currently registered.");
endif
player:tell("Use @registerme as <address> to change this.");
return;
elseif (((prepstr != "as") || (!iobjstr)) || dobjstr)
player:tell("Usage: @registerme as <address>");
return;
endif
email = iobjstr;
if (email == $wiz_utils:get_email_address(this))
who:notify("That is your current address.  Not changed.");
return;
elseif (reason = $wiz_utils:check_reregistration(this, email, connection))
if (reason[1] == "-")
if (!$command_utils:yes_or_no(reason[2..$] + ". Automatic registration not allowed. Ask to be registered at this address anyway?"))
who:notify("Okay.");
return;
endif
else
return who:notify(tostr(reason, " Please try again."));
endif
endif
if ($network.active && (!reason))
if (!$command_utils:yes_or_no(tostr("If you continue, your password will be changed, the new password mailed to `", email, "'. Do you want to continue?")))
return who:notify("Registration terminated.");
endif
password = $wiz_utils:random_password(5);
old = $wiz_utils:get_email_address(who) || "[ unregistered ]";
who:notify(tostr("Registering you, and changing your password and mailing new one to ", email, "."));
result = $network:sendmail(email, tostr("Your ", $network.MOO_Name, " character, ", who.name), "Reply-to: " + $login.registration_address, @$generic_editor:fill_string(tostr("Your ", $network.MOO_name, " character, ", $string_utils:nn(who), " has been registered to this email address (", email, "), and a new password assigned.  The new password is `", password, "'. Please keep your password secure. You can change your password with the @password command."), 75));
if (result != 0)
who:notify(tostr("Mail sending did not work: ", reason, ". Reregistration terminated."));
return;
endif
who:notify(tostr("Mail with your new password forwarded. If you do not get it, send regular email to ", $login.registration_address, " with your character name."));
$mail_agent:send_message($new_player_log, $new_player_log, "reg " + $string_utils:nn(this), {email, tostr("formerly ", old)});
$registration_db:add(this, email, "Reregistered at " + ctime());
$wiz_utils:set_email_address(this, email);
who.password = crypt(password);
who.last_password_time = time();
else
who:notify("No automatic reregistration: your request will be forwarded.");
if (typeof(curreg = $registration_db:find(email)) == LIST)
additional_info = {"Current registration information for this email address:", @$registration_db:describe_registration(curreg)};
else
additional_info = {};
endif
$mail_agent:send_message(this, $registration_db.registrar, "Registration request", {((("Reregistration request from " + $string_utils:nn(who)) + " connected via ") + connection) + ":", "", (("@register " + who.name) + " ") + email, ("@new-password " + who.name) + " is ", "", "Reason this request was forwarded:", reason, @additional_info});
endif
.
#6:86
":ctime([INT time]) => STR as the function.";
"May be hacked by players and player-classes to reflect differences in time-zone.";
return ctime(@args);
.
#6:87
if ((dobjstr == "") || (dobj == player))
dobj = player;
else
dobj = $string_utils:match_player(dobjstr);
if (!valid(dobj))
$command_utils:player_match_failed(dobj, dobjstr);
return;
endif
endif
time = dobj.first_connect_time;
if (time == $maxint)
duration = time() - dobj.last_disconnect_time;
if (duration < 86400)
notice = $string_utils:from_seconds(duration);
else
notice = $time_utils:english_time((duration / 86400) * 86400);
endif
player:notify(tostr(dobj.name, " has never connected.  It was created ", notice, " ago."));
elseif (time == 0)
player:notify(tostr(dobj.name, " first connected before initial connections were being recorded."));
else
player:notify(tostr(dobj.name, " first connected on ", ctime(time)));
duration = time() - time;
if (duration < 86400)
notice = $string_utils:from_seconds(duration);
else
notice = $time_utils:english_time((duration / 86400) * 86400);
endif
player:notify(tostr($string_utils:pronoun_sub("%S %<is> ", dobj), notice, " old."));
endif
.
#6:88
"Usage: news [contents] [articles]";
"";
"Common uses:";
"news           -- display all current news, or as @mail-options decree";
"news new       -- display articles you haven't seen yet";
"news all       -- display all current news";
"news contents  -- display headers of current news";
"news <article> -- display article";
"news archive   -- display news which has been marked as archived.";
set_task_perms(player);
cur = this:get_current_message($news) || {0, 0};
arch = 0;
if (((!args) && (o = player:mail_option("news"))) && (o != "all"))
"no arguments, use the player's default";
args = {o};
elseif (args == {"all"})
args = {};
elseif (args == {"archive"})
arch = 1;
args = {};
endif
if (hdrs_only = args && (args[1] == "contents"))
"Do the mail contents list";
args[1..1] = {};
endif
if (args)
if (typeof(seq = $news:_parse(args, @cur)) == STR)
player:notify(seq);
return;
elseif (seq = $seq_utils:intersection(seq, $news.current_news))
else
player:notify((args == {"new"}) ? "No new news." | "None of those are current articles.");
return;
endif
elseif (arch && (seq = $news.archive_news))
"yduJ hates this coding style.  Just so you know.";
elseif (seq = $news.current_news)
else
player:notify("No news");
return;
endif
if (hdrs_only)
$news:display_seq_headers(seq, @cur);
else
player:set_current_message($news, @$news:news_display_seq_full(seq));
endif
.
#6:89
"Calls the verb editor on verbs, the note editor on properties, and on anything else assumes it's an object for which you want to edit the .description.";
if (!args)
((player in $note_editor.active) ? $note_editor | $verb_editor):invoke(dobjstr, verb);
elseif ($code_utils:parse_verbref(args[1]))
if (player.programmer)
$verb_editor:invoke(argstr, verb);
else
player:notify("You need to be a programmer to do this.");
player:notify("If you want to become a programmer, talk to a wizard.");
return;
endif
else
$note_editor:invoke(dobjstr, verb);
endif
.
#6:90
if (!($perm_utils:controls(caller_perms(), this) || (this == caller)))
return E_PERM;
else
$paranoid_db:erase_data(this);
endif
.
#6:91
"'@move <object> to <place>' - Teleport an object. Example: '@move trash to #11' to move trash to the closet.";
set_task_perms((caller == this) ? this | $no_one);
if ((prepstr != "to") || (!iobjstr))
player:tell("Usage: @move <object> to <location>");
return;
endif
if ((!dobjstr) || (dobjstr == "me"))
dobj = this;
else
dobj = here:match_object(dobjstr);
if (!valid(dobj))
dobj = player:my_match_object(dobjstr);
endif
endif
if ($command_utils:object_match_failed(dobj, dobjstr))
return;
endif
iobj = this:lookup_room(iobjstr);
if ((iobj != $nothing) && $command_utils:object_match_failed(iobj, iobjstr))
return;
endif
if (((!player.programmer) && (!$perm_utils:controls(this, dobj))) && (this != dobj))
player:tell("You may only @move your own things.");
return;
endif
this:teleport(dobj, iobj);
.
#6:92
if (($perm_utils:controls(caller_perms(), this) || (caller == this)) || (caller_perms() == this))
set_task_perms(caller_perms());
for line in ((typeof(lines = args[1]) != LIST) ? {lines} | lines)
$command_utils:suspend_if_needed(0);
this:notify(tostr(line));
endfor
else
return E_PERM;
endif
.
#6:93
set_task_perms(caller_perms());
return chparent(@args);
.
#6:94
"Prints a count and compact list of the currently-connected players, sorted into columns.";
cp = connected_players();
linelen = player:linelen() || 79;
player:tell(("There are " + tostr(length(cp))) + " players connected:");
dudes = $list_utils:map_prop(cp, "name");
dudes = $list_utils:sort_suspended($login.current_lag, dudes);
player:tell_lines($string_utils:columnize(dudes, 4, linelen));
.
#6:95
if (typeof(player.password) != STR)
if (length(args) != 1)
return player:notify(tostr("Usage:  ", verb, " <new-password>"));
else
new_password = args[1];
endif
elseif (length(args) != 2)
player:notify(tostr("Usage:  ", verb, " <old-password> <new-password>"));
return;
elseif (player.password != crypt(tostr(args[1]), player.password))
player:notify("That's not your old password.");
return;
elseif (is_clear_property(player, "password"))
player:notify("Your password has a `clear' property.  Please refer to a wizard for assistance in changing it.");
return;
elseif (player in $wiz_utils.change_password_restricted)
player:notify("You are not permitted to change your own password.");
return;
else
new_password = args[2];
endif
if (r = $password_verifier:reject_password(new_password, player))
player:notify(r);
return;
endif
player.password = crypt(tostr(new_password));
player.last_password_time = time();
player:notify("New password set.");
.
#6:96
if ((caller == this) || $perm_utils:controls(caller_perms(), this))
pass(@args);
features = this.features;
for x in (features)
"Have to do this, or :feature_remove thinks you're a liar and doesn't believe.";
this.features = setremove(this.features, x);
if ($object_utils:has_verb(x, "feature_remove"))
try
x:feature_remove(this);
except (ANY)
player:tell("Failure in ", x, ":feature_remove for player ", $string_utils:nn(this));
endtry
endif
$command_utils:suspend_if_needed(0);
endfor
endif
.
#6:97
((caller == this) || $perm_utils:controls(caller_perms(), this)) || raise(E_PERM);
if (g = this.gaglist)
recycler = $recycler;
for o in (g)
if (!recycler:valid(o))
g = setremove(g, o);
endif
endfor
this.gaglist = g;
endif
.
#6:98
set_task_perms(caller_perms());
return this.email_address;
.
#6:99
set_task_perms(caller_perms());
this.email_address = args[1];
.
#6:100
if (((valid(cp = caller_perms()) && (caller != this)) && (!$perm_utils:controls(cp, this))) && (caller != $sysobj))
return E_PERM;
endif
return this:confunc(@args);
.
#6:101
if ($command_utils:object_match_failed(dobj = player:my_match_object(dobjstr), dobjstr))
return;
endif
player:tell($string_utils:nn(dobj), " is owned by ", $string_utils:nn(dobj.owner), ".");
.
#7:0
set_task_perms(caller_perms());
this:move(player);
.
#7:1
set_task_perms(caller_perms());
what = args[1];
"if ((what.location != this.source) || (!(this in this.source.exits)))";
"  player:tell(\"You can't go that way.\");";
"  return;";
"endif";
unlocked = this:is_unlocked_for(what);
if (unlocked)
this.dest:bless_for_entry(what);
endif
if (unlocked && this.dest:acceptable(what))
start = what.location;
if (msg = this:leave_msg(what))
what:tell_lines(msg);
endif
what:moveto(this.dest);
if (what.location != start)
"Don't print oleave messages if WHAT didn't actually go anywhere...";
this:announce_msg(start, what, (this:oleave_msg(what) || this:defaulting_oleave_msg(what)) || "has left.");
endif
if (what.location == this.dest)
"Don't print arrive messages if WHAT didn't really end up there...";
if (msg = this:arrive_msg(what))
what:tell_lines(msg);
endif
this:announce_msg(what.location, what, this:oarrive_msg(what) || "has arrived.");
endif
else
if (msg = this:nogo_msg(what))
what:tell_lines(msg);
else
what:tell("You can't go that way.");
endif
if (msg = this:onogo_msg(what))
this:announce_msg(what.location, what, msg);
endif
endif
.
#7:2
if ((caller == this) || $perm_utils:controls(caller_perms(), this))
try
this.source:remove_exit(this);
this.dest:remove_entrance(this);
except id (ANY)
endtry
return pass(@args);
else
return E_PERM;
endif
.
#7:3
msg = this.(verb);
return msg ? $string_utils:pronoun_sub(msg, @args) | "";
.
#7:4
if ($perm_utils:controls(cp = caller_perms(), this) || (valid(this.source) && (this.source.owner == cp)))
return (typeof(e = `this.name = args[1] ! ANY') != ERR) || e;
else
return E_PERM;
endif
.
#7:5
if ($perm_utils:controls(cp = caller_perms(), this) || (valid(this.source) && (this.source.owner == cp)))
if (typeof(e = `this.aliases = args[1] ! ANY') == ERR)
return e;
else
return 1;
endif
else
return E_PERM;
endif
.
#7:6
"This is intended to be called only by exits, for announcing various oxxx messages.  First argument is room to announce in.  Second argument is as in $room:announce_all_but's first arg, who not to announce to.  Rest args are what to say.  If the final arg is a list, prepends all the other rest args to the first line and emits the lines separately.";
where = args[1];
whobut = args[2];
last = args[$];
if (typeof(last) == LIST)
where:announce_all_but(whobut, @args[3..$ - 1], last[1]);
for line in (last[2..$])
where:announce_all_but(whobut, line);
endfor
else
where:announce_all_but(@args[3..$]);
endif
.
#7:7
for k in ({this.name, @this.aliases})
if (k in {"east", "west", "south", "north", "northeast", "southeast", "southwest", "northwest", "out", "up", "down", "nw", "sw", "ne", "se", "in"})
return ("goes " + k) + ".";
elseif (k in {"leave", "out", "exit"})
return "leaves";
endif
endfor
if ((index(this.name, "an ") == 1) || (index(this.name, "a ") == 1))
return ("leaves for " + this.name) + ".";
else
return ("leaves for the " + this.name) + ".";
endif
.
#7:8
if ((caller in {this, this.owner}) || $perm_utils:controls(caller_perms(), this))
return pass(@args);
else
return E_PERM;
endif
.
#7:9
"examine_key(examiner)";
"return a list of strings to be told to the player, indicating what the key on this type of object means, and what this object's key is set to.";
"the default will only tell the key to a wizard or this object's owner.";
who = args[1];
if (((caller == this) && $perm_utils:controls(who, this)) && (this.key != 0))
return {tostr(this:title(), " will only transport objects matching this key:"), tostr("  ", $lock_utils:unparse_key(this.key))};
endif
.
#7:10
":announce_msg(place, what, msg)";
"  announce msg in place (except to what). Prepend with what:title if it isn't part of the string";
msg = args[3];
what = args[2];
title = what:titlec();
if (!$string_utils:index_delimited(msg, title))
msg = tostr(title, " ", msg);
endif
args[1]:announce_all_but({what}, msg);
.
#8:0
if ((this.location != player) && (this.location != player.location))
player:tell("You can't get at ", this.name, ".");
elseif (dobj == $nothing)
player:tell("What do you want to put ", prepstr, " ", this.name, "?");
elseif ($command_utils:object_match_failed(dobj, dobjstr))
elseif ((dobj.location != player) && (dobj.location != player.location))
player:tell("You don't have ", dobj.name, ".");
elseif (!this.opened)
player:tell(this.name, " is closed.");
else
set_task_perms(callers() ? caller_perms() | player);
dobj:moveto(this);
if (dobj.location == this)
player:tell(this:put_msg());
if (msg = this:oput_msg())
player.location:announce(player.name, " ", msg);
endif
else
player:tell(this:put_fail_msg());
if (msg = this:oput_fail_msg())
player.location:announce(player.name, " ", msg);
endif
endif
endif
.
#8:1
if (!(this.location in {player, player.location}))
player:tell("Sorry, you're too far away.");
elseif (!this.opened)
player:tell(this.name, " is not open.");
elseif (this.dark)
player:tell("You can't see into ", this.name, " to remove anything.");
elseif ((dobj = this:match_object(dobjstr)) == $nothing)
player:tell("What do you want to take from ", this.name, "?");
elseif ($command_utils:object_match_failed(dobj, dobjstr))
elseif (!(dobj in this:contents()))
player:tell(dobj.name, " isn't in ", this.name, ".");
else
set_task_perms(callers() ? caller_perms() | player);
dobj:moveto(player);
if (dobj.location == player)
player:tell(this:remove_msg());
if (msg = this:oremove_msg())
player.location:announce(player.name, " ", msg);
endif
else
dobj:moveto(this.location);
if (dobj.location == this.location)
player:tell(this:remove_msg());
if (msg = this:oremove_msg())
player.location:announce(player.name, " ", msg);
endif
player:tell("You can't pick up ", dobj.name, ", so it tumbles onto the floor.");
else
player:tell(this:remove_fail_msg());
if (msg = this:oremove_fail_msg())
player.location:announce(player.name, " ", msg);
endif
endif
endif
endif
.
#8:2
pass();
if (!this.dark)
this:tell_contents();
endif
.
#8:3
return !is_player(args[1]);
.
#8:4
perms = (callers() && (caller != this)) ? caller_perms() | player;
if (this.opened)
player:tell("It's already open.");
"elseif (this:is_openable_by(player))";
elseif (this:is_openable_by(perms))
this:set_opened(1);
player:tell(this:open_msg());
if (msg = this:oopen_msg())
player.location:announce(player.name, " ", msg);
endif
else
player:tell(this:open_fail_msg());
if (msg = this:oopen_fail_msg())
player.location:announce(player.name, " ", msg);
endif
endif
.
#8:5
set_task_perms(player);
key = $lock_utils:parse_keyexp(iobjstr, player);
if (typeof(key) == STR)
player:tell("That key expression is malformed:");
player:tell("  ", key);
else
try
this.open_key = key;
player:tell("Locked opening of ", this.name, " with this key:");
player:tell("  ", $lock_utils:unparse_key(key));
except error (ANY)
player:tell(error[2], ".");
endtry
endif
.
#8:6
return (this.open_key == 0) || $lock_utils:eval_key(this.open_key, args[1]);
.
#8:7
if (!this.opened)
player:tell("It's already closed.");
else
this:set_opened(0);
player:tell(this:close_msg());
if (msg = this:oclose_msg())
player.location:announce(player.name, " ", msg);
endif
endif
.
#8:8
set_task_perms(player);
try
dobj.open_key = 0;
player:tell("Unlocked ", dobj.name, " for opening.");
except error (ANY)
player:tell(error[2], ".");
endtry
.
#8:9
if (this.contents)
player:tell("Contents:");
for thing in (this:contents())
player:tell("  ", thing:title());
endfor
elseif (msg = this:empty_msg())
player:tell(msg);
endif
.
#8:10
if (!$perm_utils:controls(caller.owner, this))
return E_PERM;
else
this.opened = opened = !(!args[1]);
this.dark = this.opaque > opened;
return opened;
endif
.
#8:11
if (!$perm_utils:controls(player, this))
player:tell("Can't set opacity of something you don't own.");
elseif ((iobjstr != "0") && (!toint(iobjstr)))
player:tell("Opacity must be an integer (0, 1, 2).");
else
player:tell("Opacity changed:  Now " + {"transparent.", "opaque.", "a black hole."}[1 + this:set_opaque(toint(iobjstr))]);
endif
.
#8:12
if (!$perm_utils:controls(caller.owner, this))
return E_PERM;
elseif (typeof(number = args[1]) != INT)
return E_INVARG;
else
number = (number < 0) ? 0 | ((number > 2) ? 2 | number);
this.dark = number > this.opened;
return this.opaque = number;
endif
.
#8:13
return (msg = `this.(verb) ! ANY') ? $string_utils:pronoun_sub(msg) | "";
.
#8:14
return this.(verb);
.
#9:0
if (!this:is_readable_by(valid(caller_perms()) ? caller_perms() | player))
player:tell("Sorry, but it seems to be written in some code that you can't read.");
else
this:look_self();
player:tell();
player:tell_lines_suspended(this:text());
player:tell();
player:tell("(You finish reading.)");
endif
.
#9:1
if (this:is_writable_by(valid(caller_perms()) ? caller_perms() | player))
this:set_text({});
player:tell("Note erased.");
else
player:tell("You can't erase this note.");
endif
.
#9:2
if (this:is_writable_by(valid(caller_perms()) ? caller_perms() | player))
this:set_text({@this.text, dobjstr});
player:tell("Line added to note.");
else
player:tell("You can't write on this note.");
endif
.
#9:3
if (!this:is_writable_by(player))
player:tell("You can't modify this note.");
elseif (!dobjstr)
player:tell("You must tell me which line to delete.");
else
line = toint(dobjstr);
if (line < 0)
line = (line + length(this.text)) + 1;
endif
if ((line <= 0) || (line > length(this.text)))
player:tell("Line out of range.");
else
this:set_text(listdelete(this.text, line));
player:tell("Line deleted.");
endif
endif
.
#9:4
set_task_perms(player);
key = $lock_utils:parse_keyexp(iobjstr, player);
if (typeof(key) == STR)
player:tell("That key expression is malformed:");
player:tell("  ", key);
else
try
this.encryption_key = key;
player:tell("Encrypted ", this.name, " with this key:");
player:tell("  ", $lock_utils:unparse_key(key));
except error (ANY)
player:tell(error[2], ".");
endtry
endif
.
#9:5
set_task_perms(player);
try
dobj.encryption_key = 0;
player:tell("Decrypted ", dobj.name, ".");
except error (ANY)
player:tell(error[2], ".");
endtry
.
#9:6
cp = caller_perms();
if ($perm_utils:controls(cp, this) || this:is_readable_by(cp))
return this.text;
else
return E_PERM;
endif
.
#9:7
key = this.encryption_key;
return (key == 0) || $lock_utils:eval_key(key, args[1]);
.
#9:8
cp = caller_perms();
newtext = args[1];
if ($perm_utils:controls(cp, this) || this:is_writable_by(cp))
if (typeof(newtext) == LIST)
this.text = newtext;
else
return E_TYPE;
endif
else
return E_PERM;
endif
.
#9:9
who = args[1];
wr = this.writers;
if ($perm_utils:controls(who, this))
return 1;
elseif (typeof(wr) == LIST)
return who in wr;
else
return wr;
endif
.
#9:10
"Usage:  mailme <note>";
"  uses $network to sends the text of this note to your REAL internet email address.";
if (!this:is_readable_by(player))
return player:tell("Sorry, but it seems to be written in some code that you can't read.");
elseif (!(email = $wiz_utils:get_email_address(player)))
return player:tell("Sorry, you don't have a registered email address.");
elseif (!$network.active)
return player:tell("Sorry, internet mail is disabled.");
elseif (!(text = this:text()))
return player:tell($string_utils:pronoun_sub("%T is empty--there wouldn't be any point to mailing it."));
endif
player:tell("Mailing ", this:title(), " to ", email, ".");
player:tell("... ", length(text), " lines ...");
suspend(0);
$network:sendmail(email, this:titlec(), "", @text);
.
#10:0
if ((caller != #0) && (caller != this))
return E_PERM;
else
clist = {};
for j in ({this, @$object_utils:ancestors(this)})
for i in [1..length(verbs(j))]
if ((verb_args(j, i) == {"any", "none", "any"}) && index((info = verb_info(j, i))[2], "x"))
vname = $string_utils:explode(info[3])[1];
star = index(vname + "*", "*");
clist = {@clist, $string_utils:uppercase(vname[1..star - 1]) + strsub(vname[star..$], "*", "")};
endif
endfor
endfor
notify(player, "I don't understand that.  Valid commands at this point are");
notify(player, "   " + $string_utils:english_list(setremove(clist, "?"), "", " or "));
return 0;
endif
.
#10:1
if ((caller != #0) && (caller != this))
return E_PERM;
else
msg = this.welcome_message;
version = server_version();
for line in ((typeof(msg) == LIST) ? msg | {msg})
if (typeof(line) == STR)
notify(player, strsub(line, "%v", version));
endif
endfor
this:check_player_db();
this:check_for_shutdown();
this:check_for_checkpoint();
this:maybe_print_lag();
return 0;
endif
.
#10:2
masked = $login.who_masks_wizards ? $wiz_utils:connected_wizards() | {};
if ((caller != #0) && (caller != this))
return E_PERM;
elseif (!args)
plyrs = connected_players();
if (length(plyrs) > 100)
this:notify(tostr("You have requested a listing of ", length(plyrs), " players.  Please restrict the number of players in any single request to a smaller number.  The lag thanks you."));
return 0;
else
$code_utils:show_who_listing($set_utils:difference(plyrs, masked)) || this:notify("No one logged in.");
endif
else
plyrs = listdelete($command_utils:player_match_result($string_utils:match_player(args), args), 1);
if (length(plyrs) > 100)
this:notify(tostr("You have requested a listing of ", length(plyrs), " players.  Please restrict the number of players in any single request to a smaller number.  The lag thanks you."));
return 0;
endif
$code_utils:show_who_listing(plyrs, $set_utils:intersection(plyrs, masked));
endif
return 0;
.
#10:3
"$login:connect(player-name [, password])";
" => 0 (for failed connections)";
" => objnum (for successful connections)";
((caller == #0) || (caller == this)) || raise(E_PERM);
"=================================================================";
"=== Check arguments, print usage notice if necessary";
try
{name, ?password = 0} = args;
name = strsub(name, " ", "_");
except (E_ARGS)
notify(player, tostr("Usage:  ", verb, " <existing-player-name> <password>"));
return 0;
endtry
try
"=================================================================";
"=== Is our candidate name invalid?";
if (!valid(candidate = orig_candidate = this:_match_player(name)))
raise(E_INVARG, tostr("`", name, "' matches no player name."));
endif
"=================================================================";
"=== Is our candidate unable to connect for generic security";
"=== reasons (ie clear password, non-player object)?";
if (`is_clear_property(candidate, "password") ! E_PROPNF' || (!$object_utils:isa(candidate, $player)))
server_log(tostr("FAILED CONNECT: ", name, " (", candidate, ") on ", connection_name(player), ($string_utils:connection_hostname(connection_name(player)) in candidate.all_connect_places) ? "" | "******"));
raise(E_INVARG);
endif
"=================================================================";
"=== Check password";
if (typeof(cp = candidate.password) == STR)
"=== Candidate requires a password";
if (password)
"=== Candidate requires a password, and one was provided";
if (strcmp(crypt(password, cp), cp))
"=== Candidate requires a password, and one was provided, which was wrong";
server_log(tostr("FAILED CONNECT: ", name, " (", candidate, ") on ", connection_name(player), ($string_utils:connection_hostname(connection_name(player)) in candidate.all_connect_places) ? "" | "******"));
raise(E_INVARG, "Invalid password.");
else
"=== Candidate requires a password, and one was provided, which was right";
endif
else
"=== Candidate requires a password, and none was provided";
set_connection_option(player, "binary", 1);
notify(player, "Password: ");
set_connection_option(player, "binary", 0);
set_connection_option(player, "client-echo", 0);
this:add_interception(player, "intercepted_password", candidate);
return 0;
endif
elseif (cp == 0)
"=== Candidate does not require a password";
else
"=== Candidate has a nonstandard password; something's wrong";
raise(E_INVARG);
endif
"=================================================================";
"=== Is the player locked out?";
if ($no_connect_message && (!candidate.wizard))
notify(player, $no_connect_message);
server_log(tostr("REJECTED CONNECT: ", name, " (", candidate, ") on ", connection_name(player)));
return 0;
endif
"=================================================================";
"=== Check guest connections";
if ($object_utils:isa(candidate, $guest) && (!valid(candidate = candidate:defer())))
if (candidate == #-2)
server_log(tostr("GUEST DENIED: ", connection_name(player)));
notify(player, "Sorry, guest characters are not allowed from your site at the current time.");
else
notify(player, "Sorry, all of our guest characters are in use right now.");
endif
return 0;
endif
"=================================================================";
"=== Check newts";
if (candidate in this.newted)
if (entry = $list_utils:assoc(candidate, this.temporary_newts))
if ((uptime = this:uptime_since(entry[2])) > entry[3])
"Temporary newting period is over.  Remove entry.  Oh, send mail, too.";
this.temporary_newts = setremove(this.temporary_newts, entry);
this.newted = setremove(this.newted, candidate);
fork (0)
player = this.owner;
$mail_agent:send_message(player, $newt_log, tostr("automatic @unnewt ", candidate.name, " (", candidate, ")"), {"message sent from $login:connect"});
endfork
else
notify(player, "");
notify(player, this:temp_newt_registration_string(entry[3] - uptime));
boot_player(player);
return 0;
endif
else
notify(player, "");
notify(player, this:newt_registration_string());
boot_player(player);
return 0;
endif
endif
"=================================================================";
"=== Connection limits based on lag";
if ((((!candidate.wizard) && (!(candidate in this.lag_exemptions))) && ((howmany = length(connected_players())) >= (max = this:max_connections()))) && (!$object_utils:connected(candidate)))
notify(player, $string_utils:subst(this.connection_limit_msg, {{"%n", tostr(howmany)}, {"%m", tostr(max)}, {"%l", tostr(this:current_lag())}, {"%t", candidate.last_connect_attempt ? ctime(candidate.last_connect_attempt) | "not recorded"}}));
if ($object_utils:has_property($local, "mudlist"))
notify(player, "You may wish to try another MUD while waiting for the MOO to unlag.  Here are a few that we know of:");
for l in ($local.mudlist:choose(3))
notify(player, l);
endfor
endif
candidate.last_connect_attempt = time();
server_log(tostr("CONNECTION LIMIT EXCEEDED: ", name, " (", candidate, ") on ", connection_name(player)));
boot_player(player);
return 0;
endif
"=================================================================";
"=== Log the player on!";
if (candidate != orig_candidate)
notify(player, tostr("Okay,... ", name, " is in use.  Logging you in as `", candidate.name, "'"));
endif
this:record_connection(candidate);
return candidate;
except (E_INVARG)
notify(player, "Either that player does not exist, or has a different password.");
return 0;
endtry
.
#10:4
if ((caller != #0) && (caller != this))
return E_PERM;
"... caller isn't :do_login_command()...";
elseif (!this:player_creation_enabled(player))
notify(player, this:registration_string());
"... we've disabled player creation ...";
elseif (length(args) != 2)
notify(player, tostr("Usage:  ", verb, " <new-player-name> <new-password>"));
elseif ($player_db.frozen)
notify(player, "Sorry, can't create any new players right now.  Try again in a few minutes.");
elseif ((!(name = args[1])) || (name == "<>"))
notify(player, "You can't have a blank name!");
if (name)
notify(player, "Also, don't use angle brackets (<>).");
endif
elseif ((name[1] == "<") && (name[$] == ">"))
notify(player, "Try that again but without the angle brackets, e.g.,");
notify(player, tostr(" ", verb, " ", name[2..$ - 1], " ", strsub(strsub(args[2], "<", ""), ">", "")));
notify(player, "This goes for other commands as well.");
elseif (index(name, " "))
notify(player, "Sorry, no spaces are allowed in player names.  Use dashes or underscores.");
"... lots of routines depend on there not being spaces in player names...";
elseif ((!$player_db:available(name)) || (this:_match_player(name) != $failed_match))
notify(player, "Sorry, that name is not available.  Please choose another.");
"... note the :_match_player call is not strictly necessary...";
"... it is merely there to handle the case that $player_db gets corrupted.";
elseif (!(password = args[2]))
notify(player, "You must set a password for your player.");
else
new = $quota_utils:bi_create($player_class, $nothing);
set_player_flag(new, 1);
new.name = name;
new.aliases = {name};
new.programmer = $player_class.programmer;
new.password = crypt(password);
new.last_password_time = time();
new.last_connect_time = $maxint;
"Last disconnect time is creation time, until they login.";
new.last_disconnect_time = time();
"make sure the owership quota isn't clear!";
$quota_utils:initialize_quota(new);
this:record_connection(new);
$player_db:insert(name, new);
`move(new, $player_start) ! ANY';
return new;
endif
return 0;
.
#10:5
if ((caller != #0) && (caller != this))
return E_PERM;
else
boot_player(player);
return 0;
endif
.
#10:6
if ((caller != #0) && (caller != this))
return E_PERM;
else
notify(player, tostr("The server has been up for ", $time_utils:english_time(time() - $last_restart_time), "."));
return 0;
endif
.
#10:7
if ((caller != #0) && (caller != this))
return E_PERM;
else
notify(player, tostr("The MOO is currently running version ", server_version(), " of the LambdaMOO server code."));
return 0;
endif
.
#10:8
":parse_command(@args) => {verb, args}";
"Given the args from #0:do_login_command,";
"  returns the actual $login verb to call and the args to use.";
"Commands available to not-logged-in users should be located on this object and given the verb_args \"any none any\"";
if ((caller != #0) && (caller != this))
return E_PERM;
endif
if (li = this:interception(player))
return {@li, @args};
endif
if (!args)
return {this.blank_command, @args};
elseif ((verb = args[1]) && (!$string_utils:is_numeric(verb)))
for i in ({this, @$object_utils:ancestors(this)})
try
if ((verb_args(i, verb) == {"any", "none", "any"}) && index(verb_info(i, verb)[2], "x"))
return args;
endif
except (ANY)
continue i;
endtry
endfor
endif
return {this.bogus_command, @args};
.
#10:9
when = $shutdown_time - time();
if (when >= 0)
line = "***************************************************************************";
notify(player, "");
notify(player, "");
notify(player, line);
notify(player, line);
notify(player, "****");
notify(player, ("****  WARNING:  The server will shut down in " + $time_utils:english_time(when - (when % 60))) + ".");
for piece in ($generic_editor:fill_string($shutdown_message, 60))
notify(player, "****            " + piece);
endfor
notify(player, "****");
notify(player, line);
notify(player, line);
notify(player, "");
notify(player, "");
endif
.
#10:10
if ($player_db.frozen)
line = "***************************************************************************";
notify(player, "");
notify(player, line);
notify(player, "***");
for piece in ($generic_editor:fill_string("The character-name matcher is currently being reloaded.  This means your character name might not be recognized even though it still exists.  Don't panic.  You can either wait for the reload to finish or you can connect using your object number if you remember it (e.g., `connect #1234 yourpassword').", 65))
notify(player, "***       " + piece);
endfor
notify(player, "***");
for piece in ($generic_editor:fill_string("Repeat:  Do not panic.  In particular, please do not send mail to any wizards or the registrar asking about this.  It will finish in time.  Thank you for your patience.", 65))
notify(player, "***       " + piece);
endfor
if (this:player_creation_enabled(player))
notify(player, "***       This also means that character creation is disabled.");
endif
notify(player, "***");
notify(player, line);
notify(player, "");
endif
.
#10:11
":_match_player(name)";
"This is the matching routine used by @connect.";
"returns either a valid player corresponding to name or $failed_match.";
name = args[1];
if (valid(candidate = $string_utils:literal_object(name)) && is_player(candidate))
return candidate;
endif
".....uncomment this to trust $player_db and have `connect' recognize aliases";
if (valid(candidate = $player_db:find_exact(name)) && is_player(candidate))
return candidate;
endif
".....uncomment this if $player_db gets hosed and you want by-name login";
". for candidate in (players())";
".   if (candidate.name == name)";
".     return candidate; ";
".   endif ";
". endfor ";
".....";
return $failed_match;
.
#10:12
set_task_perms(caller_perms());
`notify(player, args[1]) ! ANY';
.
#10:13
"keeps bad things from happening if someone brings this object into a room and talks to it.";
return 0;
.
#10:14
"Accepts a player object.  If player creation is enabled for that player object, then return true.  Otherwise, return false.";
"Default implementation checks the player's connecting host via $login:blacklisted to decide.";
if (caller_perms().wizard)
return this.create_enabled && (!this:blacklisted($string_utils:connection_hostname(connection_name(args[1]))));
else
return E_PERM;
endif
.
#10:15
return $string_utils:subst(this.(verb), {{"%e", this.registration_address}, {"%%", "%"}});
.
#10:16
if (caller_perms().wizard)
this.current_lag = 0;
this.lag_exemptions = {};
this.max_connections = 99999;
this.lag_samples = {0, 0, 0, 0, 0};
this.print_lag = 0;
this.last_lag_sample = 0;
this.bogus_command = "?";
this.blank_command = "welcome";
this.create_enabled = 1;
this.registration_address = "";
this.registration_string = "Character creation is disabled.";
this.newt_registration_string = "Your character is temporarily hosed.";
this.welcome_message = {"Welcome to the LambdaCore database.", "", "Type 'connect wizard' to log in.", "", "You will probably want to change this text and the output of the `help' command, which are stored in $login.welcome_message and $login.help_message, respectively."};
this.help_message = {"Sorry, but there's no help here yet.  Type `?' for a list of commands."};
this.redlist = this.blacklist = this.graylist = this.spooflist = {{}, {}};
this.temporary_redlist = this.temporary_blacklist = this.temporary_graylist = this.temporary_spooflist = {{}, {}};
this.who_masks_wizards = 0;
this.newted = this.temporary_newts = {};
this.downtimes = {};
if ("monitor" in properties(this))
delete_property(this, "monitor");
endif
if ("monitor" in verbs(this))
delete_verb(this, "monitor");
endif
if ("special_action" in verbs(this))
set_verb_code(this, "special_action", {});
endif
pass(@args);
endif
.
#10:17
.
#10:18
":blacklisted(hostname) => is hostname on the .blacklist";
":graylisted(hostname)  => is hostname on the .graylist";
":redlisted(hostname)   => is hostname on the .redlist";
sitelist = this.(this:listname(verb));
if (!caller_perms().wizard)
return E_PERM;
elseif (((hostname = args[1]) in sitelist[1]) || (hostname in sitelist[2]))
return 1;
elseif ($site_db:domain_literal(hostname))
for lit in (sitelist[1])
if ((index(hostname, lit) == 1) && ((hostname + ".")[length(lit) + 1] == "."))
return 1;
endif
endfor
else
for dom in (sitelist[2])
if (index(dom, "*"))
"...we have a wildcard; let :match_string deal with it...";
if ($string_utils:match_string(hostname, dom))
return 1;
endif
else
"...tail of hostname ...";
if ((r = rindex(hostname, dom)) && ((("." + hostname)[r] == ".") && (((r - 1) + length(dom)) == length(hostname))))
return 1;
endif
endif
endfor
endif
return this:(verb + "_temp")(hostname);
.
#10:19
"To add a temporary entry, only call the `temp' version.";
"blacklist_add_temp(Site, start time, duration)";
if (!caller_perms().wizard)
return E_PERM;
endif
{where, ?start, ?duration} = args;
lname = this:listname(verb);
which = 1 + (!$site_db:domain_literal(where));
if (index(verb, "temp"))
lname = "temporary_" + lname;
this.(lname)[which] = setadd(this.(lname)[which], {where, start, duration});
else
this.(lname)[which] = setadd(this.(lname)[which], where);
endif
return 1;
.
#10:20
"The temp version removes from the temporary property if it exists.";
if (!caller_perms().wizard)
return E_PERM;
endif
where = args[1];
lname = this:listname(verb);
which = 1 + (!$site_db:domain_literal(where));
if (index(verb, "temp"))
lname = "temporary_" + lname;
if (entry = $list_utils:assoc(where, this.(lname)[which]))
this.(lname)[which] = setremove(this.(lname)[which], entry);
return 1;
else
return E_INVARG;
endif
elseif (where in this.(lname)[which])
this.(lname)[which] = setremove(this.(lname)[which], where);
return 1;
else
return E_INVARG;
endif
.
#10:21
return {"???", "blacklist", "graylist", "redlist", "spooflist"}[1 + index("bgrs", (args[1] || "?")[1])];
.
#10:22
if (caller != #0)
return E_PERM;
elseif (!args)
$code_utils:show_who_listing(connected_players()) || this:notify("No one logged in.");
else
plyrs = listdelete($command_utils:player_match_result($string_utils:match_player(args), args), 1);
$code_utils:show_who_listing(plyrs);
endif
return 0;
.
#10:23
":record_connection(plyr) update plyr's connection information";
"to reflect impending login.";
if (!caller_perms().wizard)
return E_PERM;
else
plyr = args[1];
plyr.first_connect_time = min(time(), plyr.first_connect_time);
plyr.previous_connection = {plyr.last_connect_time, $string_utils:connection_hostname(plyr.last_connect_place)};
plyr.last_connect_time = time();
plyr.last_connect_place = cn = connection_name(player);
chost = $string_utils:connection_hostname(cn);
acp = setremove(plyr.all_connect_places, chost);
plyr.all_connect_places = {chost, @acp[1..min($, 15)]};
if (!$object_utils:isa(plyr, $guest))
$site_db:add(plyr, chost);
endif
endif
.
#10:24
if (!caller_perms().wizard)
return E_PERM;
endif
lag = (time() - this.last_lag_sample) - 15;
this.lag_samples = {lag, @this.lag_samples[1..3]};
"Now compute the current lag and store it in a property, instead of computing it in :current_lag, which is called a hundred times a second.";
thislag = max(0, (time() - this.last_lag_sample) - this.lag_sample_interval);
if (thislag > (60 * 60))
"more than an hour, probably the lag sampler stopped";
this.current_lag = 0;
else
samples = this.lag_samples;
sum = 0;
cnt = 0;
for x in (listdelete(samples, 1))
sum = sum + x;
cnt = cnt + 1;
endfor
this.current_lag = max(thislag, samples[1], samples[2], sum / cnt);
endif
fork (15)
this:sample_lag();
endfork
this.last_lag_sample = time();
.
#10:25
return this:current_lag() > this.lag_cutoff;
.
#10:26
max = this.max_connections;
if (typeof(max) == LIST)
if (this:is_lagging())
max = max[1];
else
max = max[2];
endif
endif
return max;
.
#10:27
"request_character(player, name, address)";
"return true if succeeded";
if (!caller_perms().wizard)
return E_PERM;
endif
{who, name, address} = args;
connection = $string_utils:connection_hostname(connection_name(who));
if (reason = $wiz_utils:check_player_request(name, address, connection))
prefix = "";
if (reason[1] == "-")
reason = reason[2..$];
prefix = "Please";
else
prefix = "Please try again, or, to register another way,";
endif
notify(who, reason);
msg = tostr(prefix, " send mail to ", $login.registration_address, ", with the character name you want.");
for l in ($generic_editor:fill_string(msg, 70))
notify(who, l);
endfor
return 0;
endif
if (lines = $no_one:eval_d("$local.help.(\"multiple-characters\")")[2])
notify(who, "Remember, in general, only one character per person is allowed.");
notify(who, tostr("Do you already have a ", $network.moo_name, " character? [enter `yes' or `no']"));
answer = read(who);
if (answer == "yes")
notify(who, "Process terminated *without* creating a character.");
return 0;
elseif (answer != "no")
return notify(who, tostr("Please try again; when you get this question, answer `yes' or `no'. You answered `", answer, "'"));
endif
notify(who, "For future reference, do you want to see the full policy (from `help multiple-characters'?");
notify(who, "[enter `yes' or `no']");
if (read(who) == "yes")
for x in (lines)
for y in ($generic_editor:fill_string(x, 70))
notify(who, y);
endfor
endfor
endif
endif
notify(who, tostr("A character named `", name, "' will be created."));
notify(who, tostr("A random password will be generated, and e-mailed along with"));
notify(who, tostr(" an explanatory message to: ", address));
notify(who, tostr(" [Please double-check your email address and answer `no' if it is incorrect.]"));
notify(who, "Is this OK? [enter `yes' or `no']");
if (read(who) != "yes")
notify(who, "Process terminated *without* creating a character.");
return 0;
endif
if (!$network.active)
$mail_agent:send_message(this.owner, $registration_db.registrar, "Player request", {"Player request from " + connection, ":", "", (("@make-player " + name) + " ") + address});
notify(who, tostr("Request for new character ", name, " email address '", address, "' accepted."));
notify(who, tostr("Please be patient until the registrar gets around to it."));
notify(who, tostr("If you don't get email within a week, please send regular"));
notify(who, tostr("  email to: ", $login.registration_address, "."));
elseif ($player_db.frozen)
notify(who, "Sorry, can't create any new players right now.  Try again in a few minutes.");
else
new = $wiz_utils:make_player(name, address);
password = new[2];
new = new[1];
notify(who, tostr("Character ", name, " (", new, ") created."));
notify(who, tostr("Mailing password to ", address, "; you should get the mail very soon."));
notify(who, tostr("If you do not get it, please do NOT request another character."));
notify(who, tostr("Instead, send regular email to ", $login.registration_address, ","));
notify(who, tostr("with the name of the character you requested."));
$mail_agent:send_message(this.owner, $new_player_log, tostr(name, " (", new, ")"), {address, tostr(" Automatically created at request of ", valid(player) ? player.name | "unconnected player", " from ", connection, ".")});
$wiz_utils:send_new_player_mail(tostr("Someone connected from ", connection, " at ", ctime(), " requested a character on ", $network.moo_name, " for email address ", address, "."), name, address, new, password);
return 1;
endif
.
#10:28
if ((caller != #0) && (caller != this))
return E_PERM;
endif
"must be #0:do_login_command";
if (!this.request_enabled)
for line in ($generic_editor:fill_string(this:registration_string(), 70))
notify(player, line);
endfor
elseif ((length(args) != 3) || (args[2] != "for"))
notify(player, tostr("Usage:  ", verb, " <new-player-name> for <email-address>"));
elseif ($login:request_character(player, args[1], args[3]))
boot_player(player);
endif
.
#10:29
if ((caller != #0) && (caller != this))
return E_PERM;
else
msg = this.help_message;
for line in ((typeof(msg) == LIST) ? msg | {msg})
if (typeof(line) == STR)
notify(player, line);
endif
endfor
return 0;
endif
.
#10:30
if ((caller == this) || (caller_perms() == player))
if (this.print_lag)
lag = this:current_lag();
if (lag > 1)
lagstr = tostr("approximately ", lag, " seconds");
elseif (lag == 1)
lagstr = "approximately 1 second";
else
lagstr = "low";
endif
notify(player, tostr("The lag is ", lagstr, "; there ", ((l = length(connected_players())) == 1) ? "is " | "are ", l, " connected."));
endif
endif
.
#10:31
return this.current_lag;
.
#10:32
"This limits the number of commands that can be issued from the login prompt to prevent haywire login programs from lagging the MOO.";
"$login.current_connections has the current player id's of people at the login prompt.";
"$login.current_numcommands has the number of commands they have issued at the prompt so far.";
"$login.max_numcommands has the maximum number of commands they may try before being booted.";
if (!caller_perms().wizard)
return E_PERM;
else
if (iconn = player in this.current_connections)
knocks = this.current_numcommands[iconn] = this.current_numcommands[iconn] + 1;
else
this.current_connections = {@this.current_connections, player};
this.current_numcommands = {@this.current_numcommands, 1};
knocks = 1;
"...sweep idle connections...";
for p in (this.current_connections)
if (typeof(`idle_seconds(p) ! ANY') == ERR)
n = p in this.current_connections;
this.current_connections = listdelete(this.current_connections, n);
this.current_numcommands = listdelete(this.current_numcommands, n);
endif
endfor
endif
if (knocks > this.max_numcommands)
notify(player, "Sorry, too many commands issued without connecting.");
boot_player(player);
return 1;
else
return 0;
endif
endif
.
#10:33
"Called by #0:server_started when the server restarts.";
if (caller_perms().wizard)
this.lag_samples = {0, 0, 0, 0, 0};
this.downtimes = {{time(), this.last_lag_sample}, @this.downtimes[1..min($, 100)]};
this.intercepted_players = this.intercepted_actions = {};
this.checkpoint_in_progress = 0;
endif
.
#10:34
"uptime_since(time): How much time has LambdaMOO been up since `time'";
since = args[1];
up = time() - since;
for x in (this.downtimes)
if (x[1] < since)
"downtime predates when we're asking about";
return up;
endif
"since the server was down between x[2] and x[1], don't count it as uptime";
up = up - (x[1] - max(x[2], since));
endfor
return up;
.
#10:35
caller_perms().wizard || $error:raise(E_PERM);
now = time();
tasks = queued_tasks();
sum = 0;
for t in (tasks)
delay = t[2] - now;
interval = (delay <= 0) ? 1 | (delay * 2);
"SUM is measured in hundredths of a player for the moment...";
(delay <= 300) && (sum = sum + (2000 / interval));
endfor
count = sum / 100;
return count;
.
#10:36
":blacklisted_temp(hostname) => is hostname on the .blacklist...";
":graylisted_temp(hostname)  => is hostname on the .graylist...";
":redlisted_temp(hostname)   => is hostname on the .redlist...";
":spooflisted_temp(hostname) => is hostname on the .spooflist...";
"";
"... and the time limit hasn't run out.";
lname = this:listname(verb);
sitelist = this.("temporary_" + lname);
if (!caller_perms().wizard)
return E_PERM;
elseif (entry = $list_utils:assoc(hostname = args[1], sitelist[1]))
return this:templist_expired(lname, @entry);
elseif (entry = $list_utils:assoc(hostname, sitelist[2]))
return this:templist_expired(lname, @entry);
elseif ($site_db:domain_literal(hostname))
for lit in (sitelist[1])
if ((index(hostname, lit[1]) == 1) && ((hostname + ".")[length(lit[1]) + 1] == "."))
return this:templist_expired(lname, @lit);
endif
endfor
else
for dom in (sitelist[2])
if (index(dom[1], "*"))
"...we have a wildcard; let :match_string deal with it...";
if ($string_utils:match_string(hostname, dom[1]))
return this:templist_expired(lname, @dom);
endif
else
"...tail of hostname ...";
if ((r = rindex(hostname, dom[1])) && ((("." + hostname)[r] == ".") && (((r - 1) + length(dom[1])) == length(hostname))))
return this:templist_expired(lname, @dom);
endif
endif
endfor
endif
return 0;
.
#10:37
"check to see if duration has expired on temporary_<colorlist>. Removes entry if so, returns true if still <colorlisted>";
":(listname, hostname, start time, duration)";
{lname, hname, start, duration} = args;
if (!caller_perms().wizard)
return E_PERM;
endif
if (this:uptime_since(start) > duration)
this:(lname + "_remove_temp")(hname);
return 0;
else
return 1;
endif
.
#10:38
return ("Your character is unavailable for another " + $time_utils:english_time(args[1])) + ".";
.
#10:39
(caller == this) || raise(E_PERM);
{who, verbname, @arguments} = args;
(who in this.intercepted_players) && raise(E_INVARG, "Player already has an interception set.");
this.intercepted_players = {@this.intercepted_players, who};
this.intercepted_actions = {@this.intercepted_actions, {verbname, @arguments}};
return 1;
.
#10:40
(caller == this) || raise(E_PERM);
{who} = args;
if (loc = who in this.intercepted_players)
this.intercepted_players = listdelete(this.intercepted_players, loc);
this.intercepted_actions = listdelete(this.intercepted_actions, loc);
return 1;
else
"raise an error?  nah.";
return 0;
endif
.
#10:41
(caller == this) || raise(E_PERM);
{who} = args;
return (loc = who in this.intercepted_players) ? this.intercepted_actions[loc] | 0;
.
#10:42
(caller == #0) || raise(E_PERM);
this:delete_interception(player);
set_connection_option(player, "client-echo", 1);
notify(player, "");
try
{candidate, ?password = ""} = args;
except (E_ARGS)
return 0;
endtry
return this:connect(tostr(candidate), password);
.
#10:43
"This is where oob handlers need to be put to handle oob commands issued prior to assigning a connection to a player object.  Right now it simply returns.";
return;
.
#10:44
if (this.checkpoint_in_progress)
line = "***************************************************************************";
notify(player, "");
notify(player, "");
notify(player, line);
notify(player, line);
notify(player, "****");
notify(player, "****  NOTICE:  The server is very slow now.");
notify(player, "****           The database is being saved to disk.");
notify(player, "****");
notify(player, line);
notify(player, line);
notify(player, "");
notify(player, "");
endif
.
#11:0
"{last_huh}  @<msg_name> <object> is [<text>]";
"If <text> is given calls <object>:set_message(<msg_name>,<text>),";
"otherwise prints the value of the specified message property";
set_task_perms(caller_perms());
nargs = length(args);
pos = "is" in args;
if (pos == 1)
player:notify(tostr("Usage:  ", verb, " <object> is <message>"));
return;
endif
dobjstr = $string_utils:from_list(args[1..pos - 1], " ");
message = $string_utils:from_list(args[pos + 1..nargs], " ");
msg_name = verb[2..$];
dobj = player:my_match_object(dobjstr);
if ($command_utils:object_match_failed(dobj, dobjstr))
"... oh well ...";
elseif (pos == nargs)
if (E_PROPNF == (get = `dobj.(msg_name + "_msg") ! ANY'))
player:notify(tostr(dobj.name, " (", dobj, ") has no \"", msg_name, "\" message."));
elseif (typeof(get) == ERR)
player:notify(tostr(get));
elseif (!get)
player:notify("Message is not set.");
else
player:notify(tostr("The \"", msg_name, "\" message of ", dobj.name, " (", dobj, "):"));
player:notify(tostr(get));
endif
else
set = dobj:set_message(msg_name, message);
if (set)
if (typeof(set) == STR)
player:notify(set);
else
player:notify(tostr("You set the \"", msg_name, "\" message of ", dobj.name, " (", dobj, ")."));
endif
elseif (set == E_PROPNF)
player:notify(tostr(dobj.name, " (", dobj, ") has no \"", msg_name, "\" message to set."));
elseif (typeof(set) == ERR)
player:notify(tostr(set));
else
player:notify(tostr("You clear the \"", msg_name, "\" message of ", dobj.name, " (", dobj, ")."));
endif
endif
.
#11:1
"{last_huh}  give any to any";
"a give \"verb\" that works for non-$things.";
set_task_perms(caller_perms());
if (((verb == "give") && (dobjstr == "up")) && (!prepstr))
player:tell("Try this instead: @quit");
elseif (dobj == $nothing)
player:tell("What do you want to give?");
elseif (iobj == $nothing)
player:tell("To whom/what do you want to give it?");
elseif ($command_utils:object_match_failed(dobj, dobjstr) || $command_utils:object_match_failed(iobj, iobjstr))
"...lose...";
elseif (dobj.location != player)
player:tell("You don't have that!");
elseif (iobj.location != player.location)
player:tell("I don't see ", iobj.name, " here.");
else
dobj:moveto(iobj);
if (dobj.location == iobj)
player:tell("You give ", dobj:title(), " to ", iobj.name, ".");
iobj:tell(player.name, " gives you ", dobj:title(), ".");
else
player:tell("Either that doesn't want to be given away or ", iobj.name, " doesn't want it.");
endif
endif
.
#11:2
"{last_huh}  get/take any";
"a take \"verb\" that works for non-$things.";
set_task_perms(caller_perms());
if (dobj == $nothing)
player:tell(verb, " what?");
elseif ($command_utils:object_match_failed(dobj, dobjstr))
"...lose...";
elseif (dobj.location == player)
player:tell("You already have that!");
elseif (dobj.location != player.location)
player:tell("I don't see that here.");
else
dobj:moveto(player);
if (dobj.location == player)
player:tell("Taken.");
player.location:announce(player.name, " takes ", dobj.name, ".");
else
player:tell("You can't pick that up.");
endif
endif
.
#11:3
"{last_huh}  drop/throw any";
"a drop \"verb\" that works for non-$things.";
set_task_perms(caller_perms());
if (dobj == $nothing)
player:tell(verb, " what?");
elseif ($command_utils:object_match_failed(dobj, dobjstr))
"...lose...";
elseif (dobj.location != player)
player:tell("You don't have that.");
elseif (!player.location:acceptable(dobj))
player:tell("You can't drop that here.");
else
dobj:moveto(player.location);
if (dobj.location == player.location)
player:tell_lines((verb[1] == "d") ? "Dropped." | "Thrown.");
player.location:announce(player.name, (verb[1] == "d") ? " dropped " | " threw away ", dobj.name, ".");
else
player:tell_lines("You can't seem to drop that here.");
endif
endif
.
#12:0
":enter(who,islogin,time,site)";
"adds an entry to the connection log for a given guest (caller).";
if ($object_utils:isa(caller, $guest))
$guest_log.connections = {{caller, @args}, @$guest_log.connections[1..min($guest_log.max_entries, $)]};
else
return E_PERM;
endif
.
#12:1
":last([n,[guest_list]])";
"print list of the last n entries in the guest log";
" (use n=0 if you want all entries)";
" optional second arg limits listing to the specified guest(s)";
set_task_perms(caller_perms());
{?howmany = 0, ?which = 0} = args;
howmany = min(howmany || $maxint, length($guest_log.connections));
if (!caller_perms().wizard)
player:notify("Sorry.");
else
current = {};
listing = {};
last = 0;
for c in ($guest_log.connections[1..howmany])
if (which && (!(c[1] in which)))
elseif (c[2])
"...login...";
if (a = $list_utils:assoc(c[1], current))
listing[a[2]][3] = c[3];
current = setremove(current, a);
else
listing = {@listing, {c[1], c[4], c[3], $object_utils:connected(c[1]) ? -idle_seconds(c[1]) | 1}};
last = last + 1;
endif
else
"...logout...";
listing = {@listing, {c[1], c[4], 0, c[3]}};
last = last + 1;
if (i = $list_utils:iassoc(c[1], current))
current[i][2] = last;
else
current = {@current, {c[1], last}};
endif
endif
$command_utils:suspend_if_needed(2);
endfor
su = $string_utils;
player:notify(su:left(su:left(su:left("Guest", 20) + "Connected", 36) + "Idle/Disconn.", 52) + "From");
player:notify(su:left(su:left(su:left("-----", 20) + "---------", 36) + "-------------", 52) + "----");
for l in (listing)
on = l[3] ? (ct = ctime(l[3]))[1..3] + ct[9..19] | "earlier";
off = (l[4] > 0) ? (ct = ctime(l[4]))[1..3] + ct[9..19] | ("  " + $string_utils:from_seconds(-l[4]));
player:notify(su:left(su:left(su:right(tostr(strsub(l[1].name, "uest", "."), " (", l[1], ")  "), -20) + on, 36) + off, 52) + l[2]);
$command_utils:suspend_if_needed(2);
endfor
endif
.
#12:2
if (caller_perms().wizard)
pass(@args);
this.connections = {};
endif
.
#12:3
":find(guest_id,time)";
" => site name of guest logged in at that time";
" => 0 if not logged in";
" => E_NACC if this is earlier than the earliest guest recorded";
set_task_perms(caller_perms());
{who, when} = args;
if (!caller_perms().wizard)
raise(E_PERM);
else
found = (who in connected_players()) ? $string_utils:connection_hostname(who.last_connect_place) | 0;
for c in ($guest_log.connections)
if (c[3] < when)
return found;
elseif (c[1] != who)
"... different guest...";
elseif (c[2])
"...login...";
if (c[3] == when)
return found;
endif
found = 0;
else
"...logout...";
found = c[4];
endif
endfor
return E_NACC;
endif
.
#13:0
":length(tree) => number of leaves in tree.";
return args[1] ? args[1][2] | 0;
.
#13:1
":find_nth(tree,n) => nth leaf of tree.  Assumes n in [1..tree[2]]";
return this:_find_nth(caller, @args);
.
#13:2
":_find_ord(tree,n,comp) ";
" => index of rightmost leaf for which :(comp)(n,:_ord(leaf)) is false.";
"returns 0 if true for all leaves.";
return args[1] ? this:_find_ord(caller, @args) | 0;
.
#13:3
":set_nth(tree,n,value) => tree";
"modifies tree so that nth leaf == value";
if (((n = args[2]) < 1) || ((!(tree = args[1])) || (tree[2] < n)))
return E_RANGE;
else
this:_set_nth(caller, @args);
return (n != 1) ? tree | listset(tree, caller:_ord(args[3]), 3);
endif
.
#13:4
":kill(tree[,leafverb]) deletes tree and _kills all of the nodes that it uses.";
"if leafverb is given, caller:leafverb is called on all leaves in tree.";
if (tree = args[1])
lverb = {@args, ""}[2];
this:_skill(caller, (typeof(tree) == LIST) ? tree[1] | tree, lverb);
endif
"... otherwise nothing to do...";
.
#13:5
":insert_after(tree,subtree,n)";
":insert_before(tree,subtree,n)";
"  inserts subtree after (before) the nth leaf of tree,";
"  returning the resulting tree.";
subtree = args[2];
if (tree = args[1])
if (subtree)
where = args[3] - (verb == "insert_before");
if (where <= 0)
return this:_merge(caller, subtree, tree);
elseif (where >= tree[2])
return this:_merge(caller, tree, subtree);
else
s = this:_split(caller, caller:_get(tree[1])[1], where, tree);
return this:_merge(caller, this:_merge(caller, s[1], subtree), s[2]);
endif
else
return tree;
endif
else
return subtree;
endif
.
#13:6
":extract_range(tree,first,last) => {newtree,extraction}";
return this:_extract(caller, @args);
.
#13:7
":delete_range(tree,first,last[,leafkill]) => newtree";
extract = this:_extract(caller, @args);
if (die = extract[2])
this:_skill(caller, die[1], {@args, ""}[4]);
endif
return extract[1];
.
#13:8
":keep_range(tree,first,last[,leafkill]) => range";
extract = this:_extract(caller, @args);
if (die = extract[1])
this:_skill(caller, die[1], {@args, ""}[4]);
endif
return extract[2];
.
#13:9
":insert_last(tree,insert) => newtree";
"insert a new leaf to be inserted at the righthand end of the tree";
tree = args[1];
insert = args[2];
if (!tree)
return {caller:_make(0, {insert}), 1, caller:_ord(insert)};
endif
hgt = caller:_get(tree[1]);
rspine = {{tree, plen = length(kids = hgt[2])}};
for i in [1..hgt[1]]
parent = kids[plen];
kids = caller:_get(parent[1])[2];
plen = length(kids);
rspine = {{parent, plen}, @rspine};
endfor
iord = caller:_ord(insert);
for h in [1..length(rspine)]
"... tree is the plen'th (rightmost) child of parent...";
if (rspine[h][2] < this.maxfanout)
parent = rspine[h][1];
hgp = caller:_get(parent[1]);
caller:_put(parent[1], @listset(hgp, {@hgp[2], insert}, 2));
for p in (rspine[h + 1..length(rspine)])
rkid = listset(parent, parent[2] + 1, 2);
parent = p[1];
hgp = caller:_get(parent[1]);
caller:_put(parent[1], @listset(hgp, listset(hgp[2], rkid, p[2]), 2));
endfor
return listset(tree, tree[2] + 1, 2);
endif
insert = {caller:_make(h - 1, {insert}), 1, iord};
endfor
return {caller:_make(length(rspine), {tree, insert}), tree[2] + 1, tree[3]};
.
#13:10
":start(tree,first,last) => {list of leaf nodes, @handle}";
"handle is of the form {{node,next,size}...}";
if (tree = args[1])
before = max(0, args[2] - 1);
howmany = min(args[3], tree[2]) - before;
if (howmany <= 0)
return {};
else
spine = {};
for h in [1..caller:_get(tree[1])[1]]
ik = this:_listfind_nth(kids = caller:_get(tree[1])[2], before);
newh = kids[ik[1]][2] - ik[2];
if (newh < howmany)
spine = {{tree[1], ik[1] + 1, howmany - newh}, @spine};
howmany = newh;
endif
tree = kids[ik[1]];
before = ik[2];
endfor
return {caller:_get(tree[1])[2][before + 1..before + howmany], @spine};
endif
else
return {};
endif
.
#13:11
":next(@handle) => {list of more leaf nodes, @newhandle}";
if (args)
spine = listdelete(args, 1);
node = args[1][1];
n = args[1][2];
size = args[1][3];
for h in [1..caller:_get(node)[1]]
nnode = caller:_get(node)[2][n];
if (size > nnode[2])
spine = {{node, n + 1, size - nnode[2]}, @spine};
size = nnode[2];
endif
n = 1;
node = nnode[1];
endfor
test = caller:_get(node);
return {test[2][n..size], @spine};
else
return {};
endif
.
#13:12
":_find_nth(home,tree,n) => nth leaf of tree.";
"...Assumes n in [1..tree[2]]";
if (caller != this)
return E_PERM;
endif
{home, tree, n} = args;
if ((p = home:_get(tree[1]))[1])
for k in (p[2])
if (n > k[2])
n = n - k[2];
else
return this:_find_nth(home, k, n);
endif
endfor
return E_RANGE;
else
return p[2][n];
endif
.
#13:13
":_find_ord(home,tree,n,less_than) ";
" => index of rightmost leaf for which :(less_than)(n,:_ord(leaf)) is false.";
"returns 0 if true for all leaves.";
if (caller != this)
return E_PERM;
endif
{home, tree, n, less_than} = args;
if ((p = home:_get(tree[1]))[1])
sz = tree[2];
for i in [-length(p[2])..-1]
k = p[2][-i];
sz = sz - k[2];
if (!this:_call(home, less_than, n, k[3]))
return sz + this:_find_ord(home, k, n, less_than);
endif
endfor
return 0;
else
for i in [1..r = length(p[2])]
if (this:_call(home, less_than, n, home:_ord(p[2][i])))
return i - 1;
endif
endfor
return r;
endif
.
#13:14
":_set_nth(home,tree,n,value) => tree[n] = value";
"Assumes n in [1..tree[2]]";
if (caller != this)
return E_PERM;
endif
{home, tree, n, value} = args;
if ((p = home:_get(tree[1]))[1])
ik = this:_listfind_nth(p[2], n - 1);
this:_set_nth(home, p[2][ik[1]], ik[2] + 1, value);
if (!ik[2])
p[2][ik[1]][3] = home:_ord(value);
home:_put(tree[1], @p);
endif
else
p[2][n] = value;
home:_put(tree[1], @p);
endif
.
#13:15
":_skill(home,node,kill_leaf)";
"home:_kill's node and all descendants, home:(kill_leaf)'s all leaves";
if (caller != this)
return E_PERM;
endif
{home, node, kill_leaf} = args;
try
{height, subtrees} = home:_get(node) || {0, {}};
except (E_PROPNF)
return;
endtry
if (height)
for kid in (subtrees)
this:_skill(home, kid[1], kill_leaf);
endfor
elseif (kill_leaf)
for kid in (subtrees)
this:_call(home, kill_leaf, kid);
endfor
endif
home:_kill(node);
.
#13:16
":_extract(home,tree,first,last) => {newtree,extraction}";
if (caller != this)
return E_PERM;
endif
home = args[1];
if (!(tree = args[2]))
return {{}, {}};
endif
before = max(0, args[3] - 1);
end = min(tree[2], args[4]);
if ((end <= 0) || (before >= end))
return {tree, {}};
endif
height = home:_get(tree[1])[1];
if (end < tree[2])
r = this:_split(home, height, end, tree);
if (before)
l = this:_split(home, height, before, r[1]);
extract = l[2];
newtree = this:_merge(home, l[1], r[2]);
else
extract = r[1];
newtree = r[2];
endif
elseif (before)
l = this:_split(home, height, before, tree);
extract = l[2];
newtree = l[1];
else
return {{}, tree};
endif
return {this:_scrunch(home, newtree), this:_scrunch(home, extract)};
.
#13:17
"_merge(home,ltree,rtree) => newtree";
"assumes ltree and rtree to be nonempty.";
if (caller != this)
return E_PERM;
endif
{home, lnode, rnode} = args;
lh = home:_get(lnode[1])[1];
rh = home:_get(rnode[1])[1];
if (lh > rh)
return this:_rmerge(home, lnode, rnode);
endif
for h in [lh + 1..rh]
lnode[1] = home:_make(h, {lnode});
endfor
m = this:_smerge(home, rh, lnode, rnode);
return (length(m) <= 1) ? m[1] | {home:_make(rh + 1, m), m[1][2] + m[2][2], m[1][3]};
.
#13:18
"_smerge(home, height, ltree, rtree) =>{ltree[,rtree]}";
"assumes ltree and rtree are at the given height.";
"merges the trees if the combined number of children is <= maxfanout";
"otherwise returns two trees where ltree is guaranteed minfanout children and rtree is guaranteed the minimum of minfanout and however many children it started with.";
if (caller != this)
return E_PERM;
endif
{home, height, ltree, rtree} = args;
llen = length(lkids = home:_get(ltree[1])[2]);
rlen = length(rkids = home:_get(rtree[1])[2]);
if (height)
m = this:_smerge(home, height - 1, lkids[llen], rkids[1]);
mlen = length(mkids = {@listdelete(lkids, llen), @m, @listdelete(rkids, 1)});
if (mlen <= this.maxfanout)
home:_put(ltree[1], height, mkids);
home:_kill(rtree[1]);
ltree[2] = ltree[2] + rtree[2];
return {ltree};
else
S = max(llen - 1, (mlen + 1) / 2);
home:_put(ltree[1], height, mkids[1..S]);
home:_put(rtree[1], height, mkids[S + 1..$]);
xfer = -lkids[llen][2];
for k in (mkids[llen..S])
xfer = xfer + k[2];
endfor
ltree[2] = ltree[2] + xfer;
rtree[2] = rtree[2] - xfer;
rtree[3] = mkids[S + 1][3];
return {ltree, rtree};
endif
elseif ((llen * 2) >= this.maxfanout)
return {ltree, rtree};
elseif (this.maxfanout < (llen + rlen))
T = ((rlen - llen) + 1) / 2;
home:_put(ltree[1], 0, {@lkids, @rkids[1..T]});
home:_put(rtree[1], 0, rkids[T + 1..rlen]);
ltree[2] = ltree[2] + T;
rtree[2] = rtree[2] - T;
rtree[3] = home:_ord(rkids[T + 1]);
return {ltree, rtree};
else
home:_put(ltree[1], 0, {@lkids, @rkids});
home:_kill(rtree[1]);
ltree[2] = ltree[2] + rtree[2];
return {ltree};
endif
.
#13:19
"_split(home, height,lmax,ltree[,@rtrees]}) => {ltree,[mtree,]@rtrees}";
"ltree is split after the lmax'th leaf, the righthand portion grafted onto the leftmost of the rtrees, if possible.  Otherwise we create a new tree mtree, stealing from rtrees[1] if necessary.";
"Assumes 1<=lmax<ltree[2]";
if (caller != this)
return E_PERM;
endif
{home, height, lmax, ltree, @rtrees} = args;
llen = length(lkids = home:_get(ltree[1])[2]);
rlen = length(rkids = rtrees ? home:_get(rtrees[1][1])[2] | {});
if (height)
ik = this:_listfind_nth(lkids, lmax);
if (ik[2])
llast = ik[1];
m = this:_split(home, height - 1, ik[2], lkids[llast], @lkids[llast + 1..llen], @rkids);
lkids[llast] = m[1];
mkids = listdelete(m, 1);
else
llast = ik[1] - 1;
mkids = {@lkids[ik[1]..llen], @rkids};
endif
home:_put(ltree[1], height, lkids[1..llast]);
mlen = length(mkids);
if ((((mlen - rlen) * 2) >= this.maxfanout) || (!rtrees))
"...residue left over from splitting ltree can stand by itself...";
return {listset(ltree, lmax, 2), {home:_make(height, mkids[1..mlen - rlen]), ltree[2] - lmax, mkids[1][3]}, @rtrees};
elseif (mlen <= this.maxfanout)
"...residue left over from splitting ltree fits in rtrees[1]...";
home:_put(rtrees[1][1], height, mkids);
rtrees[1][2] = (ltree[2] - lmax) + rtrees[1][2];
rtrees[1][3] = mkids[1][3];
return {listset(ltree, lmax, 2), @rtrees};
else
"...need to steal from rtrees[1]...";
if (llast < llen)
msize = ltree[2] - lmax;
R = (mlen - rlen) + 1;
else
msize = 0;
R = 1;
endif
for k in (mkids[R..mlen / 2])
msize = msize + k[2];
endfor
home:_put(rtrees[1][1], height, mkids[(mlen / 2) + 1..mlen]);
rtrees[1][2] = (rtrees[1][2] + ltree[2]) - (lmax + msize);
rtrees[1][3] = mkids[(mlen / 2) + 1][3];
return {listset(ltree, lmax, 2), {home:_make(height, mkids[1..mlen / 2]), msize, mkids[1][3]}, @rtrees};
endif
else
home:_put(ltree[1], 0, lkids[1..lmax]);
if ((((llen - lmax) * 2) >= this.maxfanout) || (!rtrees))
"...residue left over from splitting ltree can stand by itself...";
return {listset(ltree, lmax, 2), {home:_make(0, lkids[lmax + 1..llen]), llen - lmax, home:_ord(lkids[lmax + 1])}, @rtrees};
elseif ((mlen = (rlen + llen) - lmax) <= this.maxfanout)
"...residue left over from splitting ltree fits in rtrees[1]...";
home:_put(rtrees[1][1], 0, {@lkids[lmax + 1..llen], @rkids});
rtrees[1][2] = mlen;
rtrees[1][3] = home:_ord(lkids[lmax + 1]);
return {listset(ltree, lmax, 2), @rtrees};
else
"...need to steal from rtrees[1]...";
home:_put(rtrees[1][1], 0, rkids[(R = ((rlen - llen) + lmax) / 2) + 1..rlen]);
rtrees[1][2] = (mlen + 1) / 2;
rtrees[1][3] = home:_ord(rkids[R + 1]);
return {listset(ltree, lmax, 2), {home:_make(0, {@lkids[lmax + 1..llen], @rkids[1..R]}), mlen / 2, home:_ord(lkids[lmax + 1])}, @rtrees};
endif
endif
.
#13:20
":_rmerge(home, tree, insertree) => newtree ";
"(newtree is tree with insertree appended to the right)";
"insertree is assumed to be of height < tree";
if (caller != this)
return E_PERM;
endif
{home, tree, insert} = args;
if (!tree)
return insert;
elseif (!insert)
return tree;
endif
iheight = home:_get(insert[1])[1];
rspine = {};
for i in [iheight + 1..home:_get(tree[1])[1]]
kids = home:_get(tree[1])[2];
tlen = length(kids);
rspine = {{tree, tlen}, @rspine};
tree = kids[tlen];
endfor
isize = insert[2];
m = this:_smerge(home, iheight, tree, insert);
for h in [1..length(rspine)]
plen = rspine[h][2];
parent = rspine[h][1];
hgp = home:_get(parent[1]);
if (((length(m) - 1) + plen) > this.maxfanout)
home:_put(parent[1], @listset(hgp, listset(hgp[2], m[1], plen), 2));
parent[2] = (parent[2] + isize) - m[2][2];
m = {parent, listset(m[2], home:_make(h + iheight, {m[2]}), 1)};
else
home:_put(parent[1], @listset(hgp, {@hgp[2][1..plen - 1], @m}, 2));
for p in (rspine[h + 1..length(rspine)])
parent[2] = parent[2] + isize;
tree = parent;
parent = p[1];
hgp = home:_get(parent[1]);
home:_put(parent[1], @listset(hgp, listset(hgp[2], tree, p[2]), 2));
endfor
return listset(parent, parent[2] + isize, 2);
endif
endfor
return {home:_make((length(rspine) + iheight) + 1, m), m[1][2] + m[2][2], m[1][3]};
.
#13:21
":_scrunch(home,tree) => newtree";
"decapitates single-child nodes from the top of the tree, returns new root.";
if (caller != this)
return E_PERM;
endif
if (tree = args[2])
home = args[1];
while ((n = home:_get(tree[1]))[1] && (length(n[2]) == 1))
home:_kill(tree[1]);
tree = n[2][1];
endwhile
endif
return tree;
.
#13:22
"_listfind_nth(nodelist,key) => {i,k} where i is the smallest i such that the sum of the first i elements of intlist is > key, and k==key - sum(first i-1 elements).";
"1 <= i <= length(intlist)+1";
{lst, key} = args;
for i in [1..length(lst)]
key = key - lst[i][2];
if (0 > key)
return {i, key + lst[i][2]};
endif
endfor
return {length(lst) + 1, key};
.
#13:23
if (caller != this)
return E_PERM;
endif
.
#13:24
return $perm_utils:controls(caller_perms(), this) ? this:(args[1])(@listdelete(args, 1)) | E_PERM;
.
#13:25
":_call(home,verb,@vargs) calls home:verb(@vargs) with $no_one's perms";
set_task_perms($no_one);
if (caller != this)
raise(E_PERM);
endif
{home, vb, @vargs} = args;
return home:(vb)(@vargs);
.
#14:0
gp = this._genprop;
ngp = "";
for i in [1..length(gp)]
if (gp[i] != "z")
ngp = (ngp + "bcdefghijklmnopqrstuvwxyz"[index("abcdefghijklmnopqrstuvwxy", gp[i])]) + gp[i + 1..length(gp)];
return " " + (this._genprop = ngp);
endif
ngp = ngp + "a";
endfor
return " " + (this._genprop = ngp + "a");
.
#14:1
":_make(...) => new node with value {...}";
if (!(caller in {this._mgr, this}))
return E_PERM;
endif
prop = this:_genprop();
`add_property(this, prop, args, {this.mowner, ""}) ! ANY';
return prop;
.
#14:2
":_kill(node) destroys the given node.";
if (!(caller in {this, this._mgr}))
return E_PERM;
endif
`delete_property(this, args[1]) ! ANY';
.
#14:3
return (caller == this._mgr) ? `this.(args[1]) ! ANY' | E_PERM;
.
#14:4
return (caller == this._mgr) ? this.(args[1]) = listdelete(args, 1) | E_PERM;
.
#14:5
return args[1][2..3];
.
#14:6
":_makemsg(ord,msg) => leafnode for msg";
"msg = $mail_agent:__convert_new(@args[2])";
msg = args[2];
if (caller != this)
return E_PERM;
elseif (h = "" in msg)
return {this:_make(@msg[h + 1..$]), args[1], @msg[1..h - 1]};
else
return {0, args[1], @msg};
endif
.
#14:7
if (caller != this._mgr)
return E_PERM;
elseif (node = args[1][1])
this:_kill(node);
endif
.
#14:8
return args[2];
.
#14:9
return args[3];
.
#14:10
return args[3..$];
.
#14:11
if ((caller == this) || this:is_readable_by(caller_perms()))
"perms check added HTC 16 Feb 1999";
return {@args[3..$], @args[1] ? {"", @this.(args[1])} | {}};
else
return E_PERM;
endif
.
#14:12
return args[1] < args[2][1];
.
#14:13
return args[1] < args[2][2];
.
#14:14
if (!this:is_writable_by(caller_perms()))
return E_PERM;
else
new = this:new_message_num();
msgtree = this.messages;
for m in (args)
msgtree = this._mgr:insert_last(msgtree, this:_makemsg(new, m[2]));
new = new + 1;
if ($command_utils:running_out_of_time())
this.messages = msgtree;
player:tell("... ", new);
suspend(0);
msgtree = this.messages;
new = this:new_message_num();
endif
endfor
this.messages = msgtree;
this.last_used_time = time();
return 1;
endif
.
#14:15
if (!this:is_writable_by(caller_perms()))
return E_PERM;
else
this.messages = this._mgr:insert_last(this.messages, msg = this:_makemsg(new = this:new_message_num(), args[1]));
this.last_msg_date = this:_message_date(@msg);
this.last_used_time = time();
return new;
endif
.
#14:16
if (!this:ok(caller, caller_perms()))
return E_PERM;
elseif (typeof(seq = args[1]) != LIST)
x = this._mgr:find_nth(this.messages, seq);
return {this:_message_num(@x), this:_message_text(@x)};
else
msgs = {};
while (seq)
handle = this._mgr:start(this.messages, seq[1], seq[2] - 1);
while (handle)
for x in (handle[1])
msgs = {@msgs, {this:_message_num(@x), this:_message_text(@x)}};
endfor
handle = this._mgr:next(@listdelete(handle, 1));
$command_utils:suspend_if_needed(0);
endwhile
seq = seq[3..$];
endwhile
return msgs;
endif
.
#14:17
":display_seq_headers(msg_seq[,cur[,last_read_date]])";
"This is the default header display routine.";
"Prints a list of headers of messages on this to player.  msg_seq is the handle returned by this:parse_message_seq(...).  cur is the player's current message.  last_read_date is the date of the last of the already-read messages.";
if (!this:ok(caller, caller_perms()))
return E_PERM;
endif
getmsg = this.summary_uses_body ? "_message_text" | "_message_hdr";
{seq, ?cur = 0, ?last_old = $maxint} = args;
keep_seq = {@$seq_utils:contract(this:kept_msg_seq(), $seq_utils:complement(seq, 1, this:length_all_msgs())), $maxint};
k = 1;
mcount = 0;
width = player:linelen();
while (seq)
handle = this._mgr:start(this.messages, seq[1], seq[2] - 1);
while (handle)
for x in (handle[1])
$command_utils:suspend_if_needed(0);
if (keep_seq[k] <= (mcount = mcount + 1))
k = k + 1;
endif
annot = (x[3] > last_old) ? "+" | ((k % 2) ? " " | "=");
line = tostr($string_utils:right(x[2], 5, (cur == x[2]) ? ">" | " "), ":", annot, " ", this:msg_summary_line(@this:(getmsg)(@x)));
player:tell(line[1..min(width, $)]);
endfor
handle = this._mgr:next(@listdelete(handle, 1));
endwhile
seq = seq[3..$];
endwhile
player:tell("-----+");
.
#14:18
":display_seq_full(msg_seq[,preamble]) => {cur}";
"This is the default message display routine.";
"Prints the indicated messages on folder to player.  msg_seq is the handle returned by folder:parse_message_seq(...).  Returns the number of the final message in the sequence (to be the new current message number).";
if (!this:ok(caller, caller_perms()))
return E_PERM;
endif
{seq, ?preamble = ""} = args;
cur = date = 0;
while (seq)
handle = this._mgr:start(this.messages, seq[1], seq[2] - 1);
while (handle)
for x in (handle[1])
cur = this:_message_num(@x);
date = this:_message_date(@x);
player:display_message(preamble ? strsub(preamble, "%d", tostr(cur)) | {}, this:msg_full_text(@this:_message_text(@x)));
endfor
handle = this._mgr:next(@listdelete(handle, 1));
$command_utils:suspend_if_needed(0);
endwhile
seq = seq[3..$];
endwhile
return {cur, date};
.
#14:19
if (!this:ok(caller, caller_perms()))
return E_PERM;
endif
len = 0;
getmsg = this.summary_uses_body ? "_message_text" | "_message_hdr";
going = this.messages_going;
if (going && ((!going[1]) || (typeof(going[1][2]) == INT)))
kept = {@going[1], $maxint};
going = going[2];
else
kept = {$maxint};
endif
k = 1;
mcount = 0;
for s in (going)
if (kept[k] <= (mcount = mcount + s[1]))
k = k + 1;
endif
len = len + s[2][2];
handle = this._mgr:start(s[2], 1, s[2][2]);
while (handle)
for x in (handle[1])
if (kept[k] <= (mcount = mcount + 1))
k = k + 1;
endif
player:tell($string_utils:right(this:_message_num(@x), 4), (k % 2) ? ":  " | ":= ", this:msg_summary_line(@this:(getmsg)(@x)));
endfor
handle = this._mgr:next(@listdelete(handle, 1));
endwhile
endfor
if (len)
player:tell("----+");
endif
return len;
.
#14:20
if (!this:ok_write(caller, caller_perms()))
return E_PERM;
endif
msgtree = this.messages;
seq = {};
last = 0;
"there are two possible formats here:";
"OLD: {{n,msgs},{n,msgs},...}";
"NEW: {kept_seq, {{n,msgs},{n,msgs},...}}";
going = this.messages_going;
if (going && ((!going[1]) || (typeof(going[1][2]) == INT)))
kept = going[1];
going = going[2];
else
kept = {};
endif
for s in (going)
msgtree = this._mgr:insert_after(msgtree, s[2], last + s[1]);
seq = {@seq, (last + s[1]) + 1, (last = (last + s[1]) + s[2][2]) + 1};
endfor
this.messages = msgtree;
this.messages_going = {};
this.messages_kept = $seq_utils:union(kept, $seq_utils:expand(this.messages_kept, seq));
this:_fix_last_msg_date();
return seq;
.
#14:21
if (!this:ok_write(caller, caller_perms()))
return E_PERM;
endif
len = 0;
going = this.messages_going;
if (going && ((!going[1]) || (typeof(going[1][2]) == INT)))
going = going[2];
endif
for s in (going)
len = len + s[2][2];
this._mgr:kill(s[2], "_killmsg");
endfor
this.messages_going = {};
return len;
.
#14:22
seq = args[1];
if (!(this:ok_write(caller, caller_perms()) || (this:ok(caller, caller_perms()) && (seq = this:own_messages_filter(caller_perms(), @args)))))
return E_PERM;
endif
msgtree = this.messages;
save = nums = {};
onext = 1;
rmmed = 0;
for i in [1..length(seq) / 2]
if ($command_utils:suspend_if_needed(0))
player:tell("... rmm ", onext);
suspend(0);
endif
start = seq[(2 * i) - 1];
next = seq[2 * i];
{msgtree, zmsgs} = this._mgr:extract_range(msgtree, start - rmmed, (next - 1) - rmmed);
save = {@save, {start - onext, zmsgs}};
nums = {@nums, this:_message_num(@this._mgr:find_nth(zmsgs, 1)), this:_message_num(@this._mgr:find_nth(zmsgs, zmsgs[2])) + 1};
onext = next;
rmmed = (rmmed + next) - start;
endfor
tmg = this.messages_going;
save_kept = $seq_utils:intersection(this.messages_kept, seq);
this.messages_kept = $seq_utils:contract(this.messages_kept, seq);
this.messages_going = save_kept ? {save_kept, save} | save;
fork (0)
for s in (tmg)
this._mgr:kill(s[2], "_killmsg");
endfor
endfork
this.messages = msgtree;
this:_fix_last_msg_date();
return $seq_utils:tostr(nums);
.
#14:23
":renumber([cur]) renumbers caller.messages, doing a suspend() if necessary.";
"  => {number of messages,new cur}.";
if (!this:ok_write(caller, caller_perms()))
return E_PERM;
endif
{?cur = 0} = args;
this:expunge_rmm();
"... blow away @rmm'ed messages since there's no way to tell what their new numbers should be...";
if (!(msgtree = this.messages))
return {0, 0};
endif
if (cur)
cur = this._mgr:find_ord(msgtree, cur - 1, "_lt_msgnum") + 1;
endif
while (1)
"...find first out-of-sequence message...";
n = 1;
subtree = msgtree;
if (msgtree[3][1] == 1)
while ((node = this.(subtree[1]))[1])
"...subtree[3][1]==n...";
kids = node[2];
n = n + subtree[2];
i = length(kids);
while ((n = n - kids[i][2]) != kids[i][3][1])
i = i - 1;
endwhile
subtree = kids[i];
endwhile
leaves = node[2];
n = ((firstn = n) + length(leaves)) - 1;
while (n != leaves[(n - firstn) + 1][2])
n = n - 1;
endwhile
n = n + 1;
endif
"... n == first out-of-sequence ...";
"...renumber as many messages as we have time for...";
while ((n <= msgtree[2]) && (!$command_utils:running_out_of_time()))
msg = this._mgr:find_nth(msgtree, n);
msgtree = this._mgr:set_nth(msgtree, n, listset(msg, n, 2));
n = n + 1;
endwhile
this.messages = msgtree;
if (n > msgtree[2])
return {n - 1, cur};
endif
player:tell("...(renumbering to ", n - 1, ")");
suspend(0);
"...start over... may have received new mail, rmm'ed stuff, etc...";
"...so who knows what's there now?...";
if (this.messages_going)
player:tell("Renumber aborted.");
return;
endif
msgtree = this.messages;
endwhile
.
#14:24
return this:ok(caller, caller_perms()) ? this.messages ? this.messages[2] | 0 | E_PERM;
.
#14:25
return this:ok(caller, caller_perms()) ? this._mgr:find_ord(this.messages, args[1], "_lt_msgnum") | E_PERM;
.
#14:26
return this:ok(caller, caller_perms()) ? this._mgr:find_ord(this.messages, args[1], "_lt_msgdate") | E_PERM;
.
#14:27
return this:ok(caller, caller_perms()) ? (i = this._mgr:find_ord(this.messages, args[1], "_lt_msgnum")) && ((this:_message_num(@this._mgr:find_nth(this.messages, i)) == args[1]) && i) | E_PERM;
.
#14:28
if (this:ok(caller, caller_perms()))
new = (msgtree = this.messages) ? this:_message_num(@this._mgr:find_nth(msgtree, msgtree[2])) + 1 | 1;
if (rmsgs = this.messages_going)
lbrm = rmsgs[$][2];
return max(new, this:_message_num(@this._mgr:find_nth(lbrm, lbrm[2])) + 1);
else
return new;
endif
else
return E_PERM;
endif
.
#14:29
":from_msg_seq(object or list)";
" => msg_seq of messages from any of these senders";
if (!this:ok(caller, caller_perms()))
return E_PERM;
elseif (!this.messages)
return {};
endif
{plist, ?mask = {1, this.messages[2] + 1}} = args;
if (typeof(plist) != LIST)
plist = {plist};
endif
fseq = {};
for m in [1..length(mask) / 2]
handle = this._mgr:start(this.messages, i = mask[(2 * m) - 1], mask[2 * m] - 1);
while (handle)
for msg in (handle[1])
fromline = msg[4];
for f in ($mail_agent:parse_address_field(fromline))
if (f in plist)
fseq = $seq_utils:add(fseq, i, i);
endif
endfor
i = i + 1;
$command_utils:suspend_if_needed(0);
endfor
handle = this._mgr:next(@listdelete(handle, 1));
endwhile
endfor
return fseq || ("%f %<has> no messages from " + $string_utils:english_list($list_utils:map_arg(2, $string_utils, "pronoun_sub", "%n (%#)", plist), "no one", " or "));
.
#14:30
":%from_msg_seq(string or list of strings)";
" => msg_seq of messages with one of these strings in the from line";
if (!this:ok(caller, caller_perms()))
return E_PERM;
elseif (!this.messages)
return {};
endif
{nlist, ?mask = {1, this.messages[2] + 1}} = args;
if (typeof(nlist) != LIST)
nlist = {nlist};
endif
fseq = {};
for m in [1..length(mask) / 2]
handle = this._mgr:start(this.messages, i = mask[(2 * m) - 1], mask[2 * m] - 1);
while (handle)
for msg in (handle[1])
fromline = " " + msg[4];
for n in (nlist)
if (index(fromline, n))
fseq = $seq_utils:add(fseq, i, i);
endif
endfor
i = i + 1;
$command_utils:suspend_if_needed(0);
endfor
handle = this._mgr:next(@listdelete(handle, 1));
endwhile
endfor
return fseq || ("%f %<has> no messages from " + $string_utils:english_list($list_utils:map_arg($string_utils, "print", nlist), "no one", " or "));
.
#14:31
":to_msg_seq(object or list) => msg_seq of messages to those people";
if (!this:ok(caller, caller_perms()))
return E_PERM;
elseif (!this.messages)
return {};
endif
{plist, ?mask = {1, this.messages[2] + 1}} = args;
if (typeof(plist) != LIST)
plist = {plist};
endif
seq = {};
for m in [1..length(mask) / 2]
handle = this._mgr:start(this.messages, i = mask[(2 * m) - 1], mask[2 * m] - 1);
while (handle)
for msg in (handle[1])
toline = msg[5];
for r in ($mail_agent:parse_address_field(toline))
if (r in plist)
seq = $seq_utils:add(seq, i, i);
endif
endfor
i = i + 1;
$command_utils:suspend_if_needed(0);
endfor
handle = this._mgr:next(@listdelete(handle, 1));
endwhile
endfor
return seq || ("%f %<has> no messages to " + $string_utils:english_list($list_utils:map_arg(2, $string_utils, "pronoun_sub", "%n (%#)", plist), "no one", " or "));
.
#14:32
":%to_msg_seq(string or list of strings)";
" => msg_seq of messages containing one of strings in the to line";
if (!this:ok(caller, caller_perms()))
return E_PERM;
elseif (!this.messages)
return {};
endif
{nlist, ?mask = {1, this.messages[2] + 1}} = args;
if (typeof(nlist) != LIST)
nlist = {nlist};
endif
seq = {};
for m in [1..length(mask) / 2]
handle = this._mgr:start(this.messages, i = mask[(2 * m) - 1], mask[2 * m] - 1);
while (handle)
for msg in (handle[1])
toline = " " + msg[5];
for n in (nlist)
if (index(toline, n))
seq = $seq_utils:add(seq, i, i);
endif
endfor
i = i + 1;
$command_utils:suspend_if_needed(0);
endfor
handle = this._mgr:next(@listdelete(handle, 1));
endwhile
endfor
return seq || ("%f %<has> no messages to " + $string_utils:english_list($list_utils:map_arg($string_utils, "print", nlist), "no one", " or "));
.
#14:33
":subject_msg_seq(target) => msg_seq of messages with target in the Subject:";
if (!this:ok(caller, caller_perms()))
return E_PERM;
elseif (!this.messages)
return {};
endif
{target, ?mask = {1, this.messages[2] + 1}} = args;
seq = {};
for m in [1..length(mask) / 2]
handle = this._mgr:start(this.messages, i = mask[(2 * m) - 1], mask[2 * m] - 1);
while (handle)
for msg in (handle[1])
if (((subject = msg[6]) != " ") && index(subject, target))
seq = $seq_utils:add(seq, i, i);
endif
i = i + 1;
$command_utils:suspend_if_needed(0);
endfor
handle = this._mgr:next(@listdelete(handle, 1));
endwhile
endfor
return seq || (("%f %<has> no messages with subjects containing `" + target) + "'");
.
#14:34
":body_msg_seq(target) => msg_seq of messages with target in the body";
if (!this:ok(caller, caller_perms()))
return E_PERM;
elseif (!this.messages)
return {};
endif
{target, ?mask = {1, this.messages[2] + 1}} = args;
seq = {};
for m in [1..length(mask) / 2]
handle = this._mgr:start(this.messages, i = mask[(2 * m) - 1], mask[2 * m] - 1);
while (handle)
for msg in (handle[1])
if ((msg[1] && (body = this.(msg[1]))) && index(tostr(@body), target))
seq = $seq_utils:add(seq, i, i);
"Above saves ticks. Munges the whole message into one string and indexes it. Old code follows.";
"l = length(body);";
"while (!index(body[l], target) && (l = l - 1))";
"$command_utils:suspend_if_needed(0);";
"endwhile";
"if (l)";
"seq = $seq_utils:add(seq, i, i);";
"endif";
endif
i = i + 1;
$command_utils:suspend_if_needed(0);
endfor
handle = this._mgr:next(@listdelete(handle, 1));
endwhile
endfor
return seq || tostr("%f %<has> no messages containing `", target, "' in the body.");
.
#14:35
return E_VERBNF;
.
#14:36
msgtree = this.messages;
this.last_msg_date = (msgtree && this:_message_hdr(@this._mgr:find_nth(msgtree, msgtree[2]))[1]) || 0;
.
#14:37
if (!this:ok_write(caller, caller_perms()))
return E_PERM;
endif
{?doit = 0} = args;
msgtree = this.messages;
for n in [1..msgtree[2]]
msg = this._mgr:find_nth(msgtree, n);
msg = {@msg[1..2], @$mail_agent:__convert_new(@msg[3..$])};
if (doit)
msgtree = this._mgr:set_nth(msgtree, n, msg);
endif
if ($command_utils:running_out_of_time())
suspend(0);
if (this.messages != msgtree)
player:notify("urk.  someone played with this folder.");
return 0;
endif
endif
endfor
return 1;
.
#14:38
if (caller_perms().wizard)
this._mgr = $biglist;
this.mowner = $mail_recipient.owner;
for p in (properties(this))
$command_utils:suspend_if_needed(0);
if (p && (p[1] == " "))
delete_property(this, p);
endif
endfor
this.messages = this.messages_going = {};
this:_fix_last_msg_date();
this._genprop = "";
pass(@args);
endif
.
#14:39
if (this:ok(caller, caller_perms()))
date = args[1];
return (this.last_msg_date <= date) ? 0 | (this.messages[2] - this._mgr:find_ord(this.messages, args[1], "_lt_msgdate"));
else
return E_PERM;
endif
.
#14:40
c = callers();
if ((caller != this) && (!((((length(c) > 1) && (c[1][1] == $list_utils)) && (c[1][2] == "map_arg")) && (c[2][1] == this))))
raise(E_PERM);
endif
$command_utils:suspend_if_needed(0);
biglist = this;
propname = args[1];
if (!propname)
bestlevel = -1;
best = {};
for prop in (properties(biglist))
$command_utils:suspend_if_needed(0);
if (index(prop, " ") == 1)
val = biglist.(prop);
if (typeof(val[1]) == INT)
if (bestlevel < val[1])
bestlevel = val[1];
best = {prop};
elseif (bestlevel == val[1])
best = {@best, prop};
endif
endif
endif
endfor
if (!best)
player:notify("Can't find a root.");
raise(E_INVARG);
elseif (length(best) == 1)
propname = best[1];
else
propname = best[1];
val = biglist.(propname);
for prop in (best[2..$])
$command_utils:suspend_if_needed(0);
val[2] = {@val[2], @biglist.(prop)[2]};
endfor
biglist.(propname) = val;
"Now that the new value is safely stored, delete old values.";
for prop in (best[2..$])
$command_utils:suspend_if_needed(0);
player:notify(tostr("Removing property ", toliteral(prop), ".  Its value, ", toliteral(biglist.(prop)), ", has been merged with property ", toliteral(propname), "."));
delete_property(biglist, prop);
endfor
endif
maxlevel = biglist.(propname)[1];
player:notify(tostr("Maximum level is ", maxlevel, "."));
items = $list_utils:make(maxlevel, {});
"Arrgh.  Even after finding the root, some nodes might be detached!";
player:notify("Checking for orphans...");
for prop in (properties(biglist))
$command_utils:suspend_if_needed(0);
if (prop && (prop[1] == " "))
val = biglist.(prop);
if (((typeof(val) == LIST) && (typeof(level = val[1]) == INT)) && (level < maxlevel))
items[level + 1] = {@items[level + 1], prop};
endif
endif
endfor
for prop in (properties(biglist))
$command_utils:suspend_if_needed(0);
if (prop && (prop[1] == " "))
val = biglist.(prop);
if (((typeof(val) == LIST) && (typeof(level = val[1]) == INT)) && (level > 0))
for item in (val[2])
items[level] = setremove(items[level], item[1]);
endfor
endif
endif
endfor
player:notify(tostr("Orphans: ", toliteral(items)));
backbone_prop = propname;
level = maxlevel;
while (level)
backbone = biglist.(backbone_prop);
lastkid = backbone_prop;
for prop in (props = items[level])
backbone[2] = {@backbone[2], {lastkid = prop, 0, {0, 0}}};
endfor
player:notify(tostr("Attaching ", nn = length(props), " propert", (nn == 1) ? "y" | "ies", " to property ", toliteral(backbone_prop), "..."));
biglist.(backbone_prop) = backbone;
backbone_prop = lastkid;
level = level - 1;
endwhile
player:notify(tostr("Orphans repatriated."));
endif
toplevel = "(top level)";
context = args[2] || toplevel;
"This stuff is just paranoia in case something unexpected is in the data structure.  Normally there should be no blowouts here. --Minnie";
if (typeof(propname) != STR)
player:notify(tostr("Context=", context, " Prop Name=", toliteral(propname), " -- bad property name."));
raise(E_INVARG);
endif
val = biglist.(propname);
if (typeof(val) != LIST)
player:notify(tostr("Context=", context, " Prop Name=", toliteral(propname), " -- contents invalid."));
raise(E_INVARG);
endif
if (typeof(level = val[1]) != INT)
player:notify(tostr("Context=", context, " Prop Name=", toliteral(propname), " -- contents invalid (bad first argument)."));
raise(E_INVARG);
endif
"This is where the real work starts. --Minnie";
"First check that the properties referred to really exist.  This must be done for all levels.";
for item in (val[2])
try
biglist.(item[1]);
except (E_PROPNF)
player:notify(tostr("Item ", toliteral(item), " is invalid in property ", toliteral(propname), ".  It is being removed."));
val[2] = setremove(val[2], item);
continue item;
endtry
endfor
"Next, only for upper levels, check that the message count for inferior levels is correct, but only after recursing into those levels and making repairs.";
if (level > 0)
new = $list_utils:map_arg(this, verb, $list_utils:slice(val[2]), propname);
if (val[2] != new)
player:notify(tostr("Changing ", toliteral(val[2]), " to ", toliteral(new), "."));
val[2] = new;
endif
"Now that everything is correct, count size of inferiors.";
endif
"Bravely stuff the result back into place.";
biglist.(propname) = val;
"The result will be of the form:                               ";
"  {propname, inferior_msgcount, {first_msgnum, first_time}}  ";
if (level == 0)
"Count the messages for message count.";
"Use first message number and time for first_msgnum and first_time.";
result = {propname, length(val[2]), val[2][1][2..3]};
else
"Use message count that is sum of inferior counts.";
"Just propagate first node's first_msgnum and first_time upward literally.";
n = 0;
for subnode in (val[2])
n = n + subnode[2];
endfor
result = {propname, n, val[2][1][3]};
endif
if (context == toplevel)
if (result != biglist.messages)
biglist.messages = result;
player:notify(tostr("Property ", biglist, ".messages updated."));
endif
player:tell(biglist.messages[2], " messages repaired in ", $mail_agent:name(biglist), ".");
endif
return result;
"Last modified Thu Feb 15 23:13:44 1996 MST by Minnie (#123).";
.
#14:41
"Syntax: repair <biglist>";
"";
"This tool makes a last-resort attempt to repair broken biglists (ones whose data structures are out of alignment due to an error such as \"out of ticks\" during some update operation leaving the b-tree in an inconsistent state).  This tool comes with no warranty of any kind.  You should only use it when you have no other choice, and you should make an attempt to @dump or fully copy or otherwise checkpoint your object before attempting to repair it so that you can recover from any failures this might produce.  This operation is NOT undoable.";
if (!$perm_utils:controls(player, this))
player:tell("You do not control that.");
elseif (!$command_utils:yes_or_no("This tool can be used to repair some (but maybe not all) situations involving generic biglists that have had an error (usually \"out of ticks\") during an update operation and were left inconsistent.  Is this list really and truly broken in such a way?"))
player:tell("No action taken.  PLEASE don't use this except in extreme cases.");
elseif (!$command_utils:yes_or_no("Have you made a best effort to @dump or otherwise save the contents in case this make things worse?"))
player:tell("No action taken.  PLEASE do any saving you can before proceeding.");
elseif (!$command_utils:yes_or_no("This tool comes with no warranty of any kind.  Is this really your last resort and are you prepared to accept the consequences of utter failure?  There is no undoing the actions this takes.  Do you understand and accept the risks?"))
player:tell("No action taken.  I'm not taking any responsibility for this failing.  It's gotta be your choice.");
else
player:tell("OK!  Going ahead with repair attempts...");
this:_repair();
player:tell("All done.  If this worked, you can thank Mickey.  If not, remember the promises you made above about accepting responsibility for failure.");
endif
"Last modified Fri Feb 16 08:36:27 1996 MST by Minnie (#123).";
.
#14:42
":restore_from(OLD_MAIL_RECIPIENT, LOST_STRING)";
"This clears all biglist properties from this object, then";
"scans the properties of OLD_MAIL_RECIPIENT, which must be a descendant";
"of $big_mail_recipient, looking for those corresponding to mail messages,";
"and then rebuilds the message tree entirely from scratch.";
"";
"No attempt is made to preserve the original tree structure.";
"The live/deleted state of any given message is lost;";
"all messages, including formerly rmm-ed ones, are restored to .messages";
"";
"In the (unlikely) event that message-body properties have been lost, the";
"affected messages are given a one-line body consisting of LOST_STRING";
"";
{old, ?lost_body = "###BODY-LOST###"} = args;
if (!($perm_utils:controls(caller_perms(), this) && $perm_utils:controls(caller_perms(), old)))
raise(E_PERM);
elseif (!$object_utils:isa(old, $big_mail_recipient))
raise(E_TYPE, "First argument must be a $big_mail_recipient.");
elseif (typeof(lost_body) != STR)
raise(E_TYPE, "Second argument, if given, must be a string.");
endif
mgr = this._mgr;
"...";
"... destroy everything...";
for p in (properties(this))
delete_property(this, p);
endfor
this.messages = this.messages_going = {};
"...";
"... look at all properties...";
msgcount = lostcount = 0;
for p in (properties(old))
if (index(p, " ") == 1)
pvalue = old.(p);
"... ignore everything except level-0 nodes...";
if (pvalue[1..min(1, $)] == {0})
for msg in (pvalue[2])
if ((ticks_left() < 6000) || (seconds_left() < 2))
player:tell("...", msgcount, " copied.");
suspend(0);
endif
try
body = old.(msg[1]);
except e (E_PROPNF)
body = {lost_body};
lostcount = lostcount + 1;
endtry
msg[1] = this:_make(@body);
msgtree = mgr:insert_last(this.messages, msg);
msgcount = msgcount + 1;
n = mgr:find_ord(msgtree, this:_message_num(@msg), "_lt_msgnum");
if (n < msgcount)
{msgtree, singleton} = mgr:extract_range(msgtree, msgcount, msgcount);
msgtree = mgr:insert_after(msgtree, singleton, n);
endif
this.messages = msgtree;
endfor
endif
endif
endfor
player:tell(msgcount, " messages installed on ", this.name, "(", this, ")");
if (lostcount)
player:tell(lostcount, " messages have missing bodies (indicated by ", toliteral(lost_body), ").");
else
player:tell("No message bodies were missing.");
endif
.
#14:43
{i, body} = args;
if (!this:ok_write(caller, caller_perms()))
"... maybe someday let people edit messages they've sent?";
"... && !(this:ok(caller, caller_perms()) && (seq = this:own_messages_filter(caller_perms(), @args))) ???";
return E_PERM;
endif
{bodyprop, @rest} = this._mgr:find_nth(this.messages, i);
if (!body)
if (bodyprop)
this:_kill(bodyprop);
this._mgr:set_nth(this.messages, i, {0, @rest});
endif
elseif (bodyprop)
if (typeof(body) != LIST)
raise(E_TYPE);
endif
this.(bodyprop) = body;
else
bodyprop = this:_make(@body);
this._mgr:set_nth(this.messages, i, {bodyprop, @rest});
endif
.
#15:0
what = args[1];
return is_player(what) && (!(what in connected_players()));
.
#15:1
(caller == #0) || raise(E_PERM);
{who} = args;
"this:eject(who)";
if (!$recycler:valid(home = who.home))
clear_property(who, "home");
home = who.home;
if (!$recycler:valid(home))
home = who.home = $player_start;
endif
endif
"Modified 08-22-98 by TheCat to foil people who manually set their home to places they shouldn't.";
if ((!home:acceptable(who)) || (!home:accept_for_abode(who)))
home = $player_start;
endif
try
move(who, home);
except (ANY)
move(who, $player_start);
endtry
who.location:announce_all_but({who}, who.name, " has connected.");
.
#15:2
return $player_start:who_location_msg(@args);
.
#15:3
"Don't go anywhere.";
.
#15:4
if ($perm_utils:controls(caller_perms(), this))
if ((what = args[1]).wizard && (what.location == this))
move(what, what.home);
else
return pass(@args);
endif
endif
.
#16:0
return ((caller == this) || caller_perms().wizard) ? pass(@args) | E_PERM;
.
#16:1
":add(player,email[,comment])";
if (!caller_perms().wizard)
return E_PERM;
endif
{who, email, @comment} = args;
l = this:find_exact(email);
if (l == $failed_match)
this:insert(email, {{who, @comment}});
elseif (i = $list_utils:iassoc(who, l))
this:insert(email, listset(l, {who, @comment}, i));
else
this:insert(email, {@l, {who, @comment}});
endif
.
#16:2
if (caller_perms().wizard)
pass(@args);
this:clearall();
this.registrar = #2;
this:prune_reset();
endif
.
#16:3
"suspicious(address [,who])";
"Determine whether an address appears to be another player in disguise.";
"returns a list of similar addresses.";
"If second argument given, then if all similar addresses are held by that";
"person, let it pass---they're just switching departments at the same school";
"or something.";
"";
"at the moment,";
"  foo@bar.baz.bing.boo";
"is considered 'similar' to anything matching";
"  foo@*.bing.boo";
if (!caller_perms().wizard)
return E_PERM;
endif
{address, ?allowed = #-1} = args;
{userid, site} = $network:parse_address(address);
exact = (!site) && this:find_exact(address);
if (!site)
site = $network.site;
endif
site = $network:local_domain(site);
sitelen = length(site);
others = this:find_all_keys(userid + "@");
for other in (others)
if (other[max(1, ($ - sitelen) + 1)..$] != site)
others = setremove(others, other);
endif
endfor
if (exact)
others = listinsert(others, address);
endif
for x in (others)
allzapped = 1;
for y in (this:find_exact(x))
if ((((length(y) == 2) && ((y[2] == "zapped due to inactivity") || (y[2] == "toaded due to inactivity"))) || (y[1] == allowed)) || (($object_utils:has_property($local, "second_char_registry") && (typeof(them = $local.second_char_registry:other_chars(y[1])) == LIST)) && (allowed in them)))
"let them change to the address if it is them, or if it is a registered char of theirs.";
"Hrm. Need typeof==LIST check because returns E_INVARG for shared characters. bleah Ho_Yan 5/8/95";
else
allzapped = 0;
endif
endfor
if (allzapped)
others = setremove(others, x);
endif
endfor
return others;
.
#16:4
"suspicious_userid(userid)";
"Return yes if userid is root or postmaster or something like that.";
if ($object_utils:has_property(#0, "local") && $object_utils:has_property($local, "suspicious_userids"))
extra = $local.suspicious_userids;
else
extra = {};
endif
return ((((args[1] in {@$network.suspicious_userids, @extra}) || match(args[1], "^guest")) || match(args[1], "^help")) || index(args[1], "-owner")) || index(args[1], "owner-");
"Thinking about ruling out hyphenated names, on the grounds that they're probably mailing lists.";
.
#16:5
"Returns a list of strings describing the registration data for an email address.  Args[1] should be the result of this:find.";
set_task_perms(caller_perms());
result = {};
for x in (args[1])
name = (valid(x[1]) && is_player(x[1])) ? x[1].name | "<recycled>";
email = (valid(x[1]) && is_player(x[1])) ? $wiz_utils:get_email_address(x[1]) | "<???>";
result = {@result, tostr("  ", name, " (", x[1], ") current email: ", email, (length(x) > 1) ? (" [" + x[2]) + "]" | "")};
endfor
return result;
.
#16:6
"Carefully loop through the db and delete items associated with reaped objects.  If that results in no objects remaining for a username, delete that username.";
"Attempt to keep memory usage down by only asking for a small number of items at a time.  Should probably have some arguments to control this.";
if (!caller_perms().wizard)
raise(E_PERM);
endif
this.prune_task = task_id();
probe = this.prune_progress;
while (probe < this.prune_stop)
for username in (this:find_all_keys(probe))
items = this:find_exact(username);
orig = items;
for y in (items)
{who, @whys} = y;
if ((!valid(who)) || (!is_player(who)))
nuke = 1;
for why in (whys)
if (((why && (why != "zapped due to inactivity")) && (why != "toaded due to inactivity")) && (why != "Additional email address"))
nuke = 0;
endif
endfor
if (nuke)
items = setremove(items, y);
endif
endif
$command_utils:suspend_if_needed(0);
endfor
if (!items)
this:delete(username);
this.total_pruned_people = this.total_pruned_people + 1;
elseif (items != orig)
this:insert(username, items);
this.total_pruned_characters = (this.total_pruned_characters + length(orig)) - length(items);
endif
$command_utils:suspend_if_needed(0);
endfor
probe = $string_utils:incr_alpha(probe, this.alphabet);
this.prune_progress = probe;
if ($command_utils:running_out_of_time())
set_task_perms($wiz_utils:random_wizard());
suspend(0);
endif
endwhile
player:tell("Prune stopped at ", toliteral(this.prune_progress));
.
#16:7
player:tell("Prune is up to ", toliteral(this.prune_progress), ".");
mine = 0;
alphalen = length(this.alphabet);
if (typeof(this.prune_progress) == STR)
total = (alphalen * alphalen) * alphalen;
for x in [1..3]
mine = ((mine * alphalen) + index(this.alphabet, this.prune_progress[x])) - 1;
endfor
else
total = 256 * 256;
mine = (this.prune_progress[1] * 256) + this.prune_progress[2];
endif
percent = (100.0 * tofloat(mine)) / tofloat(total);
player:tell("We have processed ", mine, " entries out of ", total, ", or ", toint(percent), ".", toint(10.0 * percent) % 10, "%.");
player:tell("There were ", this.total_pruned_characters, " individual list entries removed, and ", this.total_pruned_people, " whole email addresses removed.");
if ($code_utils:task_valid(this.prune_task))
player:tell("Prune task is ", this.prune_task, ".  Stacktrace:");
for x in (task_stack(this.prune_task, 1))
if (valid(x[4]))
player:tell(x[4], ":", x[2], " [", x[1], "]  ", x[3].name, "  (", x[6], ")");
endif
endfor
else
player:tell("The recorded task_id is no longer valid.");
endif
.
#16:8
this:report_prune_progress();
player:tell("Resetting...");
this.prune_progress = "aaa";
this.prune_stop = "zzz";
this.total_pruned_people = 0;
this.total_pruned_characters = 0;
this.prune_task = 0;
.
#16:9
who = caller_perms();
if (((who != #-1) && (!((who == player) || (caller == this)))) || (!(who.wizard || (who in $local.registrar_pet_core.members))))
raise(E_PERM);
endif
total = 0;
player:tell("Searching...");
for k in ($registration_db:find_all_keys(""))
$command_utils:suspend_if_needed(0);
line = (k + " ") + toliteral($registration_db:find_exact(k));
if (index(line, iobjstr))
player:tell(line);
total = total + 1;
endif
endfor
player:tell("Search over.  ", total, " matches found.");
.
#17:0
":display_seq_headers(msg_seq[,cur])";
if (!this:ok(caller, caller_perms()))
return E_PERM;
endif
player:tell("       WHEN    BY        WHO                 EMAIL-ADDRESS");
pass(@args);
.
#17:1
when = ctime(args[1])[5..10];
from = args[2];
by = $string_utils:left(from[1..index(from, " (") - 1], -9);
subject = args[4];
who = subject[1..(open = index(subject, " (")) - 1];
if ((close = rindex(subject, ")")) > open)
who = who[1..min(9, $)] + subject[open..close];
endif
who = $string_utils:left(who, 18);
line = args[("" in args) + 1];
email = line[1..index(line + " ", " ") - 1];
if (!index(email, "@"))
email = "??";
endif
return tostr(when, "  ", by, " ", who, "  ", email);
.
#17:2
if (caller_perms().wizard)
pass(@args);
this.mail_notify = {player};
player:set_current_message(this, 0, 0, 1);
this.moderated = {this};
else
return E_PERM;
endif
.
#17:3
"Copied from Generic Mail Recipient (#6419):is_usable_by by Rog (#4292) Tue Mar  2 10:02:32 1993 PST";
return (!this.moderated) || ((this:is_writable_by(who = args[1]) || (who in this.moderated)) || who.wizard);
.
#17:4
"Stop breaking the expire task completely with out of seconds/ticks.";
if (this:ok_write(caller, caller_perms()))
fork (0)
pass(@args);
endfork
else
return E_PERM;
endif
.
#18:0
if ($code_utils:parse_verbref(what = args[1]))
"... hey wow, I found it!...";
return {what};
else
return {};
endif
.
#18:1
"Help facility for verbs that people have bothered to document.  If the argument is a verb specification, this retrieves the code and prints any documentation lines that might be at the beginning.  Returns true if the arg can actually be interpreted as a verb specification, whether or not it is a correct one.";
set_task_perms(caller_perms());
if (!(spec = $code_utils:parse_verbref(args[1])))
return 0;
elseif ($command_utils:object_match_failed(object = $string_utils:match_object(spec[1], player.location), spec[1]))
return 1;
elseif (!(hv = $object_utils:has_verb(object, spec[2])))
return "That object does not define that verb.";
elseif (typeof(verbdoc = $code_utils:verb_documentation(object = hv[1], spec[2])) == ERR)
return tostr(verbdoc);
elseif (typeof(info = `verb_info(object, spec[2]) ! ANY') == ERR)
return tostr(info);
else
objverb = tostr(object.name, "(", object, "):", strsub(info[3], " ", "/"));
if (verbdoc)
return {tostr("Information about ", objverb), "----", @verbdoc};
else
return tostr("No information about ", objverb);
endif
endif
.
#18:2
set_task_perms(caller_perms());
if (!(spec = $code_utils:parse_verbref(args[1])))
return E_INVARG;
elseif ($command_utils:object_match_failed(object = $string_utils:match_object(spec[1], player.location), spec[1]))
return E_INVARG;
elseif (!(hv = $object_utils:has_verb(object, spec[2])))
return E_VERBNF;
elseif (typeof(vd = $code_utils:verb_documentation(hv[1], spec[2])) != LIST)
return vd;
else
return {tostr(";$code_utils:set_verb_documentation(", $code_utils:corify_object(hv[1]), ",", $string_utils:print(spec[2]), ",$command_utils:read_lines())"), @$command_utils:dump_lines(vd)};
endif
.
#19:0
if (!args)
l = {};
for p in (properties(#0))
if ((p[max(1, $ - 5)..$] == "_utils") && `#0.(p):help_msg() ! ANY')
l = {@l, "$" + p};
endif
endfor
return {@pass(@args), @l};
elseif (ts = pass(@args))
return ts;
elseif ((what = args[1])[1] != "$")
return {};
elseif (ts = pass("$generic_" + what[2..$]))
return ts;
elseif ((r = rindex(w = strsub(what[2..$], "-", "_"), "_utils")) && ((r == (length(w) - 5)) && (`valid(#0.(w)) ! ANY' && `#0.(w):help_msg() ! ANY')))
return {what};
else
return {};
endif
.
#19:1
topic = args[1];
if ((topic == (("$" + topic[2..$ - 5]) + "utils")) && (valid(#0.(w = strsub(topic[2..$], "-", "_"))) && (uhelp = #0.(w):description())))
return {tostr("General information on $", w, ":"), "----", @(typeof(uhelp) == STR) ? {uhelp} | uhelp};
else
return pass(@args);
endif
.
#19:2
if ((E_PROPNF != (text = pass(@args))) || ((args[1][1] != "$") || ((!((uprop = args[1][2..$]) in properties(#0))) || (typeof(uobj = #0.(uprop)) != OBJ))))
return text;
else
udesc = uobj.description;
return {tostr(";;$", uprop, ".description = $command_utils:read_lines()"), @$command_utils:dump_lines((typeof(udesc) == LIST) ? udesc | {udesc})};
endif
.
#20:0
"space(len,fill) returns a string of length abs(len) consisting of copies of fill.  If len is negative, fill is anchored on the right instead of the left.";
{n, ?fill = " "} = args;
if (typeof(n) == STR)
n = length(n);
endif
if (n > 1000)
"Prevent someone from crashing the moo with $string_utils:space($maxint)";
return E_INVARG;
endif
if (" " != fill)
fill = fill + fill;
fill = fill + fill;
fill = fill + fill;
elseif ((n = abs(n)) < 70)
return "                                                                      "[1..n];
else
fill = "                                                                      ";
endif
m = (n - 1) / length(fill);
while (m)
fill = fill + fill;
m = m / 2;
endwhile
return (n > 0) ? fill[1..n] | fill[($ + 1) + n..$];
.
#20:1
"$string_utils:left(string,width[,filler])";
"";
"Assures that <string> is at least <width> characters wide.  Returns <string> if it is at least that long, or else <string> followed by enough filler to make it that wide. If <width> is negative and the length of <string> is greater than the absolute value of <width>, then the <string> is cut off at <width>.";
"";
"The <filler> is optional and defaults to \" \"; it controls what is used to fill the resulting string when it is too short.  The <filler> is replicated as many times as is necessary to fill the space in question.";
{text, len, ?fill = " "} = args;
abslen = abs(len);
out = tostr(text);
if (length(out) < abslen)
return out + this:space(length(out) - abslen, fill);
else
return (len > 0) ? out | out[1..abslen];
endif
.
#20:2
"$string_utils:right(string,width[,filler])";
"";
"Assures that <string> is at least <width> characters wide.  Returns <string> if it is at least that long, or else <string> preceded by enough filler to make it that wide. If <width> is negative and the length of <string> is greater than the absolute value of <width>, then <string> is cut off at <width> from the right.";
"";
"The <filler> is optional and defaults to \" \"; it controls what is used to fill the resulting string when it is too short.  The <filler> is replicated as many times as is necessary to fill the space in question.";
{text, len, ?fill = " "} = args;
abslen = abs(len);
out = tostr(text);
if ((lenout = length(out)) < abslen)
return this:space(abslen - lenout, fill) + out;
else
return (len > 0) ? out | out[($ - abslen) + 1..$];
endif
.
#20:3
"$string_utils:center(string,width[,lfiller[,rfiller]])";
"";
"Assures that <string> is at least <width> characters wide.  Returns <string> if it is at least that long, or else <string> preceded and followed by enough filler to make it that wide.  If <width> is negative and the length of <string> is greater than the absolute value of <width>, then the <string> is cut off at <width>.";
"";
"The <lfiller> is optional and defaults to \" \"; it controls what is used to fill the left part of the resulting string when it is too short.  The <rfiller> is optional and defaults to the value of <lfiller>; it controls what is used to fill the right part of the resulting string when it is too short.  In both cases, the filler is replicated as many times as is necessary to fill the space in question.";
{text, len, ?lfill = " ", ?rfill = lfill} = args;
out = tostr(text);
abslen = abs(len);
if (length(out) < abslen)
return (this:space((abslen - length(out)) / 2, lfill) + out) + this:space(((abslen - length(out)) + 1) / -2, rfill);
else
return (len > 0) ? out | out[1..abslen];
endif
.
#20:4
"columnize (items, n [, width]) - Turn a one-column list of items into an n-column list. 'width' is the last character position that may be occupied; it defaults to a standard screen width. Example: To tell the player a list of numbers in three columns, do 'player:tell_lines ($string_utils:columnize ({1, 2, 3, 4, 5, 6, 7}, 3));'.";
{items, n, ?width = 79} = args;
height = ((length(items) + n) - 1) / n;
items = {@items, @$list_utils:make((height * n) - length(items), "")};
colwidths = {};
for col in [1..n - 1]
colwidths = listappend(colwidths, 1 - (((width + 1) * col) / n));
endfor
result = {};
for row in [1..height]
line = tostr(items[row]);
for col in [1..n - 1]
line = tostr(this:left(line, colwidths[col]), " ", items[row + (col * height)]);
endfor
result = listappend(result, line[1..min($, width)]);
endfor
return result;
.
#20:5
"$string_utils:from_list(list [, separator])";
"Return a string being the concatenation of the string representations of the elements of LIST, each pair separated by the string SEPARATOR, which defaults to the empty string.";
{thelist, ?separator = ""} = args;
if (separator == "")
return tostr(@thelist);
elseif (thelist)
result = tostr(thelist[1]);
for elt in (listdelete(thelist, 1))
result = tostr(result, separator, elt);
endfor
return result;
else
return "";
endif
.
#20:6
"Prints the argument (must be a list) as an english list, e.g. {1, 2, 3} is printed as \"1, 2, and 3\", and {1, 2} is printed as \"1 and 2\".";
"Optional arguments are treated as follows:";
"  Second argument is the string to use when the empty list is given.  The default is \"nothing\".";
"  Third argument is the string to use in place of \" and \".  A typical application might be to use \" or \" instead.";
"  Fourth argument is the string to use instead of a comma (and space).  Gary_Severn's deranged mind actually came up with an application for this.  You can ask him.";
"  Fifth argument is a string to use after the penultimate element before the \" and \".  The default is to have a comma without a space.";
{things, ?nothingstr = "nothing", ?andstr = " and ", ?commastr = ", ", ?finalcommastr = ","} = args;
nthings = length(things);
if (nthings == 0)
return nothingstr;
elseif (nthings == 1)
return tostr(things[1]);
elseif (nthings == 2)
return tostr(things[1], andstr, things[2]);
else
ret = "";
for k in [1..nthings - 1]
if (k == (nthings - 1))
commastr = finalcommastr;
endif
ret = tostr(ret, things[k], commastr);
endfor
return tostr(ret, andstr, things[nthings]);
endif
.
#20:7
"Return a string of the names and object numbers of the objects in a list.";
line = "";
for item in (args[1])
if ((typeof(item) == OBJ) && valid(item))
line = (((line + item.name) + "(") + tostr(item)) + ")   ";
endif
endfor
return $string_utils:trimr(line);
.
#20:8
":from_seconds(number of seconds) => returns a string containing the rough increment of days, or hours if less than a day, or minutes if less than an hour, or lastly in seconds.";
":from_seconds(86400) => \"a day\"";
":from_seconds(7200)  => \"two hours\"";
minute = 60;
hour = 60 * minute;
day = 24 * hour;
secs = args[1];
if (secs > day)
count = secs / day;
unit = "day";
article = "a";
elseif (secs > hour)
count = secs / hour;
unit = "hour";
article = "an";
elseif (secs > minute)
count = secs / minute;
unit = "minute";
article = "a";
else
count = secs;
unit = "second";
article = "a";
endif
if (count == 1)
time = tostr(article, " ", unit);
else
time = tostr(count, " ", unit, "s");
endif
return time;
.
#20:9
":trim (string [, space]) -- remove leading and trailing spaces";
"";
"`space' should be a character (single-character string); it defaults to \" \".  Returns a copy of string with all leading and trailing copies of that character removed.  For example, $string_utils:trim(\"***foo***\", \"*\") => \"foo\".";
{string, ?space = " "} = args;
m = match(string, tostr("[^", space, "]%(.*[^", space, "]%)?%|$"));
return string[m[1]..m[2]];
.
#20:10
":triml(string [, space]) -- remove leading spaces";
"";
"`space' should be a character (single-character string); it defaults to \" \".  Returns a copy of string with all leading copies of that character removed.  For example, $string_utils:triml(\"***foo***\", \"*\") => \"foo***\".";
{string, ?what = " "} = args;
m = match(string, tostr("[^", what, "]%|$"));
return string[m[1]..$];
.
#20:11
":trimr(string [, space]) -- remove trailing spaces";
"";
"`space' should be a character (single-character string); it defaults to \" \".  Returns a copy of string with all trailing copies of that character removed.  For example, $string_utils:trimr(\"***foo***\", \"*\") => \"***foo\".";
{string, ?what = " "} = args;
return string[1..rmatch(string, tostr("[^", what, "]%|^"))[2]];
.
#20:12
":strip_chars(string,chars) => string with chars removed";
{subject, stripped} = args;
for i in [1..length(stripped)]
subject = strsub(subject, stripped[i], "");
endfor
return subject;
.
#20:13
":strip_all_but(string,keep) => string with chars not in `keep' removed.";
"`keep' is used in match() so if it includes ], ^, or -,";
"] should be first, ^ should be other from first, and - should be last.";
string = args[1];
wanted = ("[" + args[2]) + "]+";
output = "";
while (m = match(string, wanted))
output = output + string[m[1]..m[2]];
string = string[m[2] + 1..$];
endwhile
return output;
.
#20:14
"lowercase(string) -- returns a lowercase version of the string.";
"uppercase(string) -- returns the uppercase version of the string.";
string = args[1];
from = caps = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
to = lower = "abcdefghijklmnopqrstuvwxyz";
if (verb == "uppercase")
from = lower;
to = caps;
endif
for i in [1..26]
string = strsub(string, from[i], to[i], 1);
endfor
return string;
.
#20:15
"capitalizes its argument.";
if ((string = args[1]) && (i = index("abcdefghijklmnopqrstuvwxyz", string[1], 1)))
string[1] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"[i];
endif
return string;
.
#20:16
"Matches args[1] against literal objects: #xxxxx, $variables, *mailing-lists, and username.  Returns the object if successful, $failed_match else.";
string = args[1];
if (!string)
return $nothing;
elseif ((string[1] == "#") && (E_TYPE != (object = $code_utils:toobj(string))))
return object;
elseif (string[1] == "~")
return this:match_player(string[2..$], #0);
elseif ((string[1] == "*") && (length(string) > 1))
return $mail_agent:match_recipient(string);
elseif (string[1] == "$")
string[1..1] = "";
object = #0;
while (pn = string[1..(dot = index(string, ".")) ? dot - 1 | $])
if ((!$object_utils:has_property(object, pn)) || (typeof(object = object.(pn)) != OBJ))
return $failed_match;
endif
string = string[length(pn) + 2..$];
endwhile
if ((object == #0) || (typeof(object) == ERR))
return $failed_match;
else
return object;
endif
else
return $failed_match;
endif
.
#20:17
"$string_utils:match(string [, obj-list, prop-name]*)";
"Each obj-list should be a list of objects or a single object, which is treated as if it were a list of that object.  Each prop-name should be string naming a property on every object in the corresponding obj-list.  The value of that property in each case should be either a string or a list of strings.";
"The argument string is matched against all of the strings in the property values.";
"If it exactly matches exactly one of them, the object containing that property is returned.  If it exactly matches more than one of them, $ambiguous_match is returned.";
"If there are no exact matches, then partial matches are considered, ones in which the given string is a prefix of some property string.  Again, if exactly one match is found, the object with that property is returned, and if there is more than one match, $ambiguous_match is returned.";
"Finally, if there are no exact or partial matches, then $failed_match is returned.";
subject = args[1];
if (subject == "")
return $nothing;
endif
no_exact_match = no_partial_match = 1;
for i in [1..length(args) / 2]
prop_name = args[(2 * i) + 1];
for object in ((typeof(olist = args[2 * i]) == LIST) ? olist | {olist})
if (valid(object))
if (typeof(str_list = `object.(prop_name) ! E_PERM, E_PROPNF => {}') != LIST)
str_list = {str_list};
endif
if (subject in str_list)
if (no_exact_match)
no_exact_match = object;
elseif (no_exact_match != object)
return $ambiguous_match;
endif
else
for string in (str_list)
if (index(string, subject) != 1)
elseif (no_partial_match)
no_partial_match = object;
elseif (no_partial_match != object)
no_partial_match = $ambiguous_match;
endif
endfor
endif
endif
endfor
endfor
return no_exact_match && (no_partial_match && $failed_match);
.
#20:18
"* wildcard matching. Returns a list of what the *s actually matched. Won't cath every match, if there are several ways to parse it.";
"Example: $string_utils:match_string(\"Jack waves to Jill\",\"* waves to *\") returns {\"Jack\", \"Jill\"}";
"Optional arguments: numbers are interpreted as case-sensitivity, strings as alternative wildcards.";
{what, targ, @rest} = args;
wild = "*";
case = ret = {};
what = what + "&^%$";
targ = targ + "&^%$";
for y in (rest)
if (typeof(y) == STR)
wild = y;
elseif (typeof(y) == INT)
case = {y};
endif
endfor
while (targ != "")
if (z = index(targ, wild))
part = targ[1..z - 1];
else
z = length(targ);
part = targ;
endif
n = (part == "") ? 1 | index(what, part, @case);
if (n)
ret = listappend(ret, what[1..n - 1]);
what = what[(z + n) - 1..$];
targ = targ[z + 1..$];
else
return 0;
endif
endwhile
if (ret == {})
return what == "";
elseif (ret == {""})
return 1;
elseif (ret[1] == "")
return ret[2..$];
else
return 0;
endif
.
#20:19
":match_object(string,location[,someone])";
"Returns the object matching the given string for someone, on the assumption that s/he is in the given location.  `someone' defaults to player.";
"This first tries :literal_object(string), \"me\"=>someone,\"here\"=>location, then player:match(string) and finally location:match(string) if location is valid.";
"This is the default algorithm for use by room :match_object() and player :my_match_object() verbs.  Player verbs that are calling this directly should probably be calling :my_match_object instead.";
{string, here, ?who = player} = args;
if ($failed_match != (object = this:literal_object(string)))
return object;
elseif (string == "me")
return who;
elseif (string == "here")
return here;
elseif ((valid(pobject = who:match(string)) && (string in {@pobject.aliases, pobject.name})) || (!valid(here)))
"...exact match in player or room is bogus...";
return pobject;
elseif ((valid(hobject = here:match(string)) && (string in {@hobject.aliases, hobject.name})) || (pobject == $failed_match))
"...exact match in room or match in player failed completely...";
return hobject;
else
return pobject;
endif
.
#20:20
"match_player(name,name,...)      => {obj,obj,...}";
"match_player(name[,meobj])       => obj";
"match_player({name,...}[,meobj]) => {obj,...}";
"objs returned are either players, $failed_match, $ambiguous_match, or $nothing in the case of an empty string.";
"meobj (what to return for instances of `me') defaults to player; if given and isn't actually a player, `me' => $failed_match";
retstr = 0;
me = player;
if ((length(args) < 2) || (typeof(me = args[2]) == OBJ))
me = (valid(me) && is_player(me)) ? me | $failed_match;
if (typeof(args[1]) == STR)
strings = {args[1]};
retstr = 1;
"return a string, not a list";
else
strings = args[1];
endif
else
strings = args;
me = player;
endif
found = {};
for astr in (strings)
if (!astr)
aobj = $nothing;
elseif (astr == "me")
aobj = me;
elseif (valid(aobj = $string_utils:literal_object(astr)) && is_player(aobj))
"astr is a valid literal object number of some player, so we are done.";
else
aobj = $player_db:find(astr);
endif
found = {@found, aobj};
endfor
return retstr ? found[1] | found;
.
#20:21
"Accepts any number of strings, attempts to match those strings first against objects in the room, and if no objects by those names exist, matches against player names (and \"#xxxx\" style strings regardless of location).  Returns a list of valid objects so found.";
"Unlike $string_utils:match_player, does not include in the list the failed and ambiguous matches; instead has built-in error messages for such objects.  This should probably be improved.  Volunteers?";
if (!args)
return;
endif
unknowns = {};
objs = {};
"We have to do something icky here.  Parallel walk the victims and args lists.  When it's a valid object, then it's a player.  If it's an invalid object, try to get an object match from the room.  If *that* fails, complain.";
for i in [1..length(args)]
if (valid(o = player.location:match_object(args[i])))
objs = {@objs, o};
else
unknowns = {@unknowns, args[i]};
endif
endfor
victims = $string_utils:match_player(unknowns);
for i in [1..length(victims)]
if (!valid(victims[i]))
player:tell("Could not find ", unknowns[i], " as either an object or a player.");
else
objs = {@objs, victims[i]};
endif
endfor
return objs;
.
#20:22
"find_prefix(prefix, string-list) => list index of something starting with prefix, or 0 or $ambiguous_match.";
{subject, choices} = args;
answer = 0;
for i in [1..length(choices)]
if (index(choices[i], subject) == 1)
if (answer == 0)
answer = i;
else
answer = $ambiguous_match;
endif
endif
endfor
return answer;
.
#20:23
"index_delimited(string,target[,case_matters]) is just like the corresponding call to the builtin index() but instead only matches on occurences of target delimited by word boundaries (i.e., not preceded or followed by an alphanumeric)";
args[2] = ("%(%W%|^%)" + $string_utils:regexp_quote(args[2])) + "%(%W%|$%)";
return (m = match(@args)) ? m[3][1][2] + 1 | 0;
.
#20:24
"Usage:  is_numeric(string)";
"        is_integer(string)";
"Is string numeric (composed of one or more digits possibly preceded by a minus sign)? This won't catch floating points.";
"Return true or false";
return match(args[1], "^ *[-+]?[0-9]+ *$");
digits = "1234567890";
if (!(string = args[1]))
return 0;
endif
if (string[1] == "-")
string = string[2..length(string)];
endif
for i in [1..length(string)]
if (!index(digits, string[i]))
return 0;
endif
endfor
return 1;
.
#20:25
":short_ordinal(1) => \"1st\",:short_ordinal(2) => \"2nd\",etc...";
string = tostr(n = args[1]);
n = abs(n) % 100;
if (((n / 10) != 1) && ((n % 10) in {1, 2, 3}))
return string + {"st", "nd", "rd"}[n % 10];
else
return string + "th";
endif
.
#20:26
"$string_utils:group_number(INT n [, sep_char])";
"$string_utils:group_number(FLOAT n, [INT precision [, scientific [, sep_char]]])";
"";
"Converts N to a string, inserting commas (or copies of SEP_CHAR, if given) every three digits, counting from the right.  For example, $string_utils:group_number(1234567890) returns the string \"1,234,567,890\".";
"For floats, the arguements precision (defaulting to 4 in this verb) and scientific are the same as given in floatstr().";
if (typeof(args[1]) == INT)
{n, ?comma = ","} = args;
result = "";
sign = (n < 0) ? "-" | "";
n = tostr(abs(n));
elseif (typeof(args[1]) == FLOAT)
{n, ?prec = 4, ?scien = 0, ?comma = ","} = args;
sign = (n < 0.0) ? "-" | "";
n = floatstr(abs(n), prec, scien);
i = index(n, ".");
result = n[i..$];
n = n[1..i - 1];
else
return E_INVARG;
endif
while ((len = length(n)) > 3)
result = (comma + n[len - 2..len]) + result;
n = n[1..len - 3];
endwhile
return (sign + n) + result;
"Code contributed by SunRay";
.
#20:27
"$string_utils:english_number(n) -- convert the integer N into English";
"";
"Produces a string containing the English phrase naming the given integer.  For example, $string_utils:english_number(-1234) returns the string `negative one thousand two hundred thirty-four'.";
numb = toint(args[1]);
if (numb == 0)
return "zero";
endif
labels = {"", " thousand", " million", " billion"};
numstr = "";
mod = abs(numb);
for n in [1..4]
div = mod % 1000;
if (div)
hun = div / 100;
ten = div % 100;
outstr = this:english_tens(ten) + labels[n];
if (hun)
outstr = ((this:english_ones(hun) + " hundred") + (ten ? " " | "")) + outstr;
endif
if (numstr)
numstr = (outstr + " ") + numstr;
else
numstr = outstr;
endif
endif
mod = mod / 1000;
endfor
return ((numb < 0) ? "negative " | "") + numstr;
.
#20:28
"$string_utils:english_ordinal(n) -- convert the integer N into an english ordinal (1 => \"first\", etc...)";
numb = toint(args[1]);
if (numb == 0)
return "zeroth";
elseif (numb % 100)
hundreds = (abs(numb) > 100) ? this:english_number((numb / 100) * 100) + " " | ((numb < 0) ? "negative " | "");
numb = abs(numb) % 100;
specials = {1, 2, 3, 5, 8, 9, 12, 20, 30, 40, 50, 60, 70, 80, 90};
ordinals = {"first", "second", "third", "fifth", "eighth", "ninth", "twelfth", "twentieth", "thirtieth", "fortieth", "fiftieth", "sixtieth", "seventieth", "eightieth", "ninetieth"};
if (i = numb in specials)
return hundreds + ordinals[i];
elseif ((numb > 20) && (i = (numb % 10) in specials))
return ((hundreds + this:english_tens((numb / 10) * 10)) + "-") + ordinals[i];
else
return (hundreds + this:english_number(numb)) + "th";
endif
else
return this:english_number(numb) + "th";
endif
.
#20:29
numb = args[1];
ones = {"", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"};
return ones[numb + 1];
.
#20:30
numb = args[1];
teens = {"ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"};
others = {"twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"};
if (numb < 10)
return this:english_ones(numb);
elseif (numb < 20)
return teens[numb - 9];
else
return (others[(numb / 10) - 1] + ((numb % 10) ? "-" | "")) + this:english_ones(numb % 10);
endif
.
#20:31
"subst(string,{{redex1,repl1},{redex2,repl2},{redex3,repl3}...}[,case])";
"  => returns string with all instances of the strings redex<n> replaced respectively by the strings repl<n>.  If the optional argument `case' is given and nonzero, the search for instances of redex<n> is case sensitive.";
"  Substitutions are done in parallel, i.e., instances of redex<n> that appear in any of the replacement strings are ignored.  In the event that two redexes overlap, whichever is leftmost in `string' takes precedence.  For two redexes beginning at the same position, the longer one takes precedence.";
"";
"subst(\"hoahooaho\",{{\"ho\",\"XhooX\"},{\"hoo\",\"mama\"}}) => \"XhooXamamaaXhooX\"";
"subst(\"Cc: banana\",{{\"a\",\"b\"},{\"b\",\"c\"},{\"c\",\"a\"}},1) => \"Ca: cbnbnb\"";
{ostr, subs, ?case = 0} = args;
if (typeof(ostr) != STR)
return ostr;
endif
len = length(ostr);
" - - - find the first instance of each substitution - -";
indices = {};
substs = {};
for s in (subs)
if (i = index(ostr, s[1], case))
fi = $list_utils:find_insert(indices, i = i - len) - 1;
while (fi && ((indices[fi] == i) && (length(substs[fi][1]) < length(s[1]))))
"...give preference to longer redexes...";
fi = fi - 1;
endwhile
indices = listappend(indices, i, fi);
substs = listappend(substs, s, fi);
endif
endfor
"- - - - - perform substitutions - ";
nstr = "";
while (substs)
ind = len + indices[1];
sub = substs[1];
indices = listdelete(indices, 1);
substs = listdelete(substs, 1);
if (ind > 0)
nstr = (nstr + ostr[1..ind - 1]) + sub[2];
ostr = ostr[ind + length(sub[1])..len];
len = length(ostr);
endif
if (next = index(ostr, sub[1], case))
fi = $list_utils:find_insert(indices, next = next - len) - 1;
while (fi && ((indices[fi] == next) && (length(substs[fi][1]) < length(sub[1]))))
"...give preference to longer redexes...";
fi = fi - 1;
endwhile
indices = listappend(indices, next, fi);
substs = listappend(substs, sub, fi);
endif
endwhile
return nstr + ostr;
.
#20:32
"subst(string,{{redex1,repl1},{redex2,repl2},{redex3,repl3}...}[,case])";
"Just like :substitute() but it uses index_delimited() instead of index()";
{ostr, subs, ?case = 0} = args;
if (typeof(ostr) != STR)
return ostr;
endif
len = length(ostr);
" - - - find the first instance of each substitution - -";
indices = {};
substs = {};
for s in (subs)
if (i = this:index_delimited(ostr, s[1], case))
fi = $list_utils:find_insert(indices, i = i - len) - 1;
while (fi && ((indices[fi] == i) && (length(substs[fi][1]) < length(s[1]))))
"...give preference to longer redexes...";
fi = fi - 1;
endwhile
indices = listappend(indices, i, fi);
substs = listappend(substs, s, fi);
endif
endfor
"- - - - - perform substitutions - ";
nstr = "";
while (substs)
ind = len + indices[1];
sub = substs[1];
indices = listdelete(indices, 1);
substs = listdelete(substs, 1);
if (ind > 0)
nstr = (nstr + ostr[1..ind - 1]) + sub[2];
ostr = ostr[ind + length(sub[1])..len];
len = length(ostr);
endif
if (next = this:index_delimited(ostr, sub[1], case))
fi = $list_utils:find_insert(indices, next = next - len) - 1;
while (fi && ((indices[fi] == next) && (length(substs[fi][1]) < length(sub[1]))))
"...give preference to longer redexes...";
fi = fi - 1;
endwhile
indices = listappend(indices, next, fi);
substs = listappend(substs, sub, fi);
endif
endwhile
return nstr + ostr;
.
#20:33
"cap_property(what,prop[,ucase]) returns what.(prop) but capitalized if either ucase is true or the prop name specified is capitalized.";
"If prop is blank, returns what:title().";
"If prop is bogus or otherwise irretrievable, returns the error.";
"If capitalization is indicated, we return what.(prop+\"c\") if that exists, else we capitalize what.(prop) in the usual fashion.  There is a special exception for is_player(what)&&prop==\"name\" where we just return what.name if no .namec is provided --- ie., a player's .name is never capitalized in the usual fashion.";
"If args[1] is a list, calls itself on each element of the list and returns $string_utils:english_list(those results).";
{what, prop, ?ucase = 0} = args;
set_task_perms(caller_perms());
if (typeof(what) == LIST)
result = {};
for who in (what)
result = {@result, this:_cap_property(who, prop, ucase)};
endfor
return $string_utils:english_list(result);
endif
ucase = (prop && (strcmp(prop, "a") < 0)) || ucase;
if (!prop)
return valid(what) ? ucase ? what:titlec() | what:title() | ((ucase ? "N" | "n") + "othing");
elseif ((!ucase) || (typeof(s = `what.(prop + "c") ! ANY') == ERR))
if (prop == "name")
s = valid(what) ? what.name | "nothing";
ucase = ucase && (!is_player(what));
else
s = `$object_utils:has_property(what, prop) ? what.(prop) | $player.(prop) ! ANY';
endif
if (ucase && (s && ((typeof(s) == STR) && (((z = index(this.alphabet, s[1], 1)) < 27) && (z > 0)))))
s[1] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"[z];
endif
endif
return (typeof(s) == ERR) ? s | tostr(s);
.
#20:34
"Pronoun (and other things) substitution. See 'help pronouns' for details.";
"syntax:  $string_utils:pronoun_sub(text[,who[,thing[,location[,dobj[,iobj]]]]])";
"%s,%o,%p,%q,%r    => <who>'s pronouns.  <who> defaults to player.";
"%n,%d,%i,%t,%l,%% => <who>, dobj, iobj, <thing>, location and %";
"<thing> defaults to caller; <location> defaults to who.location";
"%S,%O,%P,%Q,%R, %N,%D,%I,%T,%L have corresponding capitalized substitutions.";
" %[#n], %[#d], ...  =>  <who>, dobj, etc.'s object number";
"%(foo) => <who>.foo and %(Foo) => <who>.foo capitalized. %[dfoo] => dobj.foo, etc..";
"%<foo> -> whatever <who> does when normal people foo. This is determined by calling :verb_sub() on the <who>.";
"%<d:foo> -> whatever <dobj> does when normal people foo.";
{string, ?who = player, ?thing = caller, ?where = $nothing, ?dobject = dobj, ?iobject = iobj} = args;
where = valid(where) ? where | (valid(who) ? who.location | where);
set_task_perms($no_one);
if (typeof(string) == LIST)
plines = {};
for line in (string)
plines = {@plines, this:(verb)(line, who, thing, where)};
endfor
return plines;
endif
old = tostr(string);
new = "";
objspec = "nditl";
objects = {who, dobject, iobject, thing, where};
prnspec = "sopqrSOPQR";
prprops = {"ps", "po", "pp", "pq", "pr", "Ps", "Po", "Pp", "Pq", "Pr"};
oldlen = length(old);
while ((prcnt = index(old, "%")) && (prcnt < oldlen))
s = old[k = prcnt + 1];
if ((s == "<") && (gt = index(old[k + 2..$], ">")))
"handling %<verb> ";
gt = (gt + k) + 1;
vb = old[k + 1..gt - 1];
vbs = who;
if ((length(vb) > 2) && (vb[2] == ":"))
" %<d:verb>";
vbs = objects[index(objspec, vb[1]) || 1];
vb = vb[3..$];
endif
vb = $object_utils:has_callable_verb(vbs, "verb_sub") ? vbs:verb_sub(vb) | $gender_utils:get_conj(vb, vbs);
new = (new + old[1..prcnt - 1]) + vb;
k = gt;
else
cp_args = {};
if (brace = index("([", s))
if (!(w = index(old[k + 1..oldlen], ")]"[brace])))
return new + old;
else
p = old[prcnt + 2..(k = k + w) - 1];
if (brace == 1)
"%(property)";
cp_args = {who, p};
elseif (p[1] == "#")
"%[#n] => object number";
s = (o = index(objspec, p[2])) ? tostr(objects[o]) | (("[" + p) + "]");
elseif (!(o = index(objspec, p[1])))
s = ("[" + p) + "]";
else
" %[dproperty] ";
cp_args = {objects[o], p[2..w - 1], strcmp(p[1], "a") < 0};
endif
endif
elseif (o = index(objspec, s))
cp_args = {objects[o], "", strcmp(s, "a") < 0};
elseif (w = index(prnspec, s, 1))
cp_args = {who, prprops[w]};
elseif (s == "#")
s = tostr(who);
elseif (s != "%")
s = "%" + s;
endif
new = (new + old[1..prcnt - 1]) + ((!cp_args) ? s | ((typeof(sub = $string_utils:_cap_property(@cp_args)) != ERR) ? sub | (("%(" + tostr(sub)) + ")")));
endif
old = old[k + 1..oldlen];
oldlen = oldlen - k;
endwhile
return new + old;
.
#20:35
"$string_utils:pronoun_sub_secure(string[,who[,thing[,location]]], default)";
"Do pronoun_sub on string with the arguments given (see help";
"string_utils:pronoun_sub for more information).  Return pronoun_subbed";
"<default> if the subbed string does not contain <who>.name (<who>";
"defaults to player).";
who = (length(args) > 2) ? args[2] | player;
default = args[$];
result = this:pronoun_sub(@args[1..$ - 1]);
return this:index_delimited(result, who.name) ? result | this:pronoun_sub(@{default, @args[2..$ - 1]});
.
#20:36
" pronoun_quote(string) => quoted_string";
" pronoun_quote(list of strings) => list of quoted_strings";
" pronoun_quote(list of {key,string} pairs) => list of {key,quoted_string} pairs";
"";
"Here `quoted' means quoted in the sense of $string_utils:pronoun_sub, i.e., given a string X, the corresponding `quoted' string Y is such that pronoun_sub(Y) => X.  For example, pronoun_quote(\"--%Spam%--\") => \"--%%Spam%%--\".  This is for including literal text into a string that will eventually be pronoun_sub'ed, i.e., including it in such a way that the pronoun_sub will not expand anything in the included text.";
"";
"The 3rd form above (with {key,string} pairs) is for use with $string_utils:substitute().  If you have your own set of substitutions to be done in parallel with the pronoun substitutions, do";
"";
"  msg=$string_utils:substitute(msg,$string_utils:pronoun_quote(your_substs));";
"  msg=$string_utils:pronoun_sub(msg);";
if (typeof(what = args[1]) == STR)
return strsub(what, "%", "%%");
else
ret = {};
for w in (what)
if (typeof(w) == LIST)
ret = listappend(ret, listset(w, strsub(w[2], "%", "%%"), 2));
else
ret = listappend(ret, strsub(w, "%", "%%"));
endif
endfor
return ret;
endif
.
#20:37
"Pronoun (and other things) substitution. See 'help pronouns' for details.";
"syntax:  $string_utils:pronoun_sub(text[,who[,thing[,location]]])";
"%s,%o,%p,%q,%r    => <who>'s pronouns.  <who> defaults to player.";
"%n,%d,%i,%t,%l,%% => <who>, dobj, iobj, this, <who>.location and %";
"%S,%O,%P,%Q,%R, %N,%D,%I,%T,%L have corresponding capitalized substitutions.";
" %[#n], %[#d], ...  =>  <who>, dobj, etc.'s object number";
"%(foo) => <who>.foo and %(Foo) => <who>.foo capitalized. %[dfoo] => dobj.foo, etc..";
"%<foo> -> whatever <who> does when normal people foo. This is determined by calling :verb_sub() on the <who>.";
"%<d:foo> -> whatever <dobj> does when normal people foo.";
set_task_perms($no_one);
{string, ?who = player, ?thing = caller, ?where = $nothing} = args;
where = valid(who) ? who.location | where;
if (typeof(string) == LIST)
plines = {};
for line in (string)
plines = {@plines, this:(verb)(line, who, thing, where)};
endfor
return plines;
endif
old = tostr(string);
new = "";
objspec = "nditl";
objects = {who, dobj, iobj, thing, where};
prnspec = "sopqrSOPQR";
prprops = {"ps", "po", "pp", "pq", "pr", "Ps", "Po", "Pp", "Pq", "Pr"};
oldlen = length(old);
while ((prcnt = index(old, "%")) && (prcnt < oldlen))
s = old[k = prcnt + 1];
if ((s == "<") && (gt = index(old[k + 2..$], ">")))
"handling %<verb> ";
gt = (gt + k) + 1;
vb = old[k + 1..gt - 1];
vbs = who;
if ((length(vb) > 2) && (vb[2] == ":"))
" %<d:verb>";
vbs = objects[index(objspec, vb[1]) || 1];
vb = vb[3..$];
endif
vb = $object_utils:has_verb(vbs, "verb_sub") ? vbs:verb_sub(vb) | this:(verb)(vb, vbs);
new = (new + old[1..prcnt - 1]) + vb;
k = gt;
else
cp_args = {};
if (brace = index("([", s))
if (!(w = index(old[k + 1..oldlen], ")]"[brace])))
return new + old;
else
p = old[prcnt + 2..(k = k + w) - 1];
if (brace == 1)
"%(property)";
cp_args = {who, p};
elseif (p[1] == "#")
"%[#n] => object number";
s = (o = index(objspec, p[2])) ? tostr(objects[o]) | (("[" + p) + "]");
elseif (!(o = index(objspec, p[1])))
s = ("[" + p) + "]";
else
" %[dproperty] ";
cp_args = {objects[o], p[2..w - 1], strcmp(p[1], "a") < 0};
endif
endif
elseif (o = index(objspec, s))
cp_args = {objects[o], "", strcmp(s, "a") < 0};
elseif (w = index(prnspec, s, 1))
cp_args = {who, prprops[w]};
elseif (s == "#")
s = tostr(who);
elseif (s != "%")
s = "%" + s;
endif
new = (new + old[1..prcnt - 1]) + ((!cp_args) ? s | ((typeof(sub = $string_utils:_cap_property(@cp_args)) != ERR) ? sub | (("%(" + tostr(sub)) + ")")));
endif
old = old[k + 1..oldlen];
oldlen = oldlen - k;
endwhile
return new + old;
.
#20:38
"$string_utils:explode(subject [, break])";
"Return a list of those substrings of subject separated by runs of break[1].";
"break defaults to space.";
{subject, ?breakit = {" "}} = args;
breakit = breakit[1];
subject = subject + breakit;
parts = {};
while (subject)
if ((i = index(subject, breakit)) > 1)
parts = {@parts, subject[1..i - 1]};
endif
subject = subject[i + 1..$];
endwhile
return parts;
.
#20:39
"This breaks up the argument string into words, the resulting list being obtained exactly the way the command line parser obtains `args' from `argstr'.";
rest = args[1];
"...trim leading blanks...";
if (0)
rest[1..match(rest, "^ *")[2]] = "";
endif
rest = $string_utils:triml(rest);
if (!rest)
return {};
endif
quote = 0;
toklist = {};
token = "";
pattern = " +%|\\.?%|\"";
while (m = match(rest, pattern))
"... find the next occurence of a special character, either";
"... a block of spaces, a quote or a backslash escape sequence...";
char = rest[m[1]];
token = token + rest[1..m[1] - 1];
if (char == " ")
toklist = {@toklist, token};
token = "";
elseif (char == "\"")
"... beginning or end of quoted string...";
"... within a quoted string spaces aren't special...";
pattern = (quote = !quote) ? "\\.?%|\"" | " +%|\\.?%|\"";
elseif (m[1] < m[2])
"... char has to be a backslash...";
"... include next char literally if there is one";
token = token + rest[m[2]];
endif
rest[1..m[2]] = "";
endwhile
return (rest || (char != " ")) ? {@toklist, token + rest} | toklist;
.
#20:40
"This breaks up the argument string into words, returning a list of indices into argstr corresponding to the starting points of each of the arguments.";
rest = args[1];
"... find first nonspace...";
wstart = match(rest, "[^ ]%|$")[1];
wbefore = wstart - 1;
rest[1..wbefore] = "";
if (!rest)
return {};
endif
quote = 0;
wslist = {};
pattern = " +%|\\.?%|\"";
while (m = match(rest, pattern))
"... find the next occurence of a special character, either";
"... a block of spaces, a quote or a backslash escape sequence...";
char = rest[m[1]];
if (char == " ")
wslist = {@wslist, {wstart, (wbefore + m[1]) - 1}};
wstart = (wbefore + m[2]) + 1;
elseif (char == "\"")
"... beginning or end of quoted string...";
"... within a quoted string spaces aren't special...";
pattern = (quote = !quote) ? "\\.?%|\"" | " +%|\\.?%|\"";
endif
rest[1..m[2]] = "";
wbefore = wbefore + m[2];
endwhile
return (rest || (char != " ")) ? {@wslist, {wstart, wbefore + length(rest)}} | wslist;
.
#20:41
":to_value(string) tries to parse string as a value (i.e., object, number, string, error, or list thereof).";
"Returns {1,value} or {0,error_message} according as the attempt was successful or not.";
result = this:_tolist(string = args[1] + "}");
if (result[1] && (result[1] != $string_utils:space(result[1])))
return {0, tostr("after char ", length(string) - result[1], ":  ", result[2])};
elseif (typeof(result[1]) == INT)
return {0, "missing } or \""};
elseif (length(result[2]) > 1)
return {0, "comma unexpected."};
elseif (result[2])
return {1, result[2][1]};
else
return {0, "missing expression"};
endif
.
#20:42
":prefix_to_value(string) tries to parse string as a value (i.e., object, number, string, error, or list thereof).";
"Returns {rest-of-string,value} or {0,error_message} according as the attempt was successful or not.";
alen = length(args[1]);
slen = length(string = this:triml(args[1]));
if (!string)
return {0, "empty string"};
elseif (w = index("{\"", string[1]))
result = this:({"_tolist", "_unquote"}[w])(string[2..slen]);
if (typeof(result[1]) != INT)
return result;
elseif (result[1] == 0)
return {0, "missing } or \""};
else
return {0, result[2], (alen - result[1]) + 1};
endif
else
thing = string[1..tlen = index(string + " ", " ") - 1];
if (typeof(s = this:_toscalar(thing)) != STR)
return {string[tlen + 1..slen], s};
else
return {0, s, (alen - slen) + 1};
endif
endif
.
#20:43
"_tolist(string) --- auxiliary for :to_value()";
rest = this:triml(args[1]);
vlist = {};
if (!rest)
return {0, {}};
elseif (rest[1] == "}")
return {rest[2..$], {}};
endif
while (1)
rlen = length(rest);
if (w = index("{\"", rest[1]))
result = this:({"_tolist", "_unquote"}[w])(rest[2..rlen]);
if (typeof(result[1]) == INT)
return result;
endif
vlist = {@vlist, result[2]};
rest = result[1];
else
thing = rest[1..tlen = min(index(rest + ",", ","), index(rest + "}", "}")) - 1];
if (typeof(s = this:_toscalar(thing)) == STR)
return {rlen, s};
endif
vlist = {@vlist, s};
rest = rest[tlen + 1..rlen];
endif
if (!rest)
return {0, vlist};
elseif (rest[1] == "}")
return {rest[2..$], vlist};
elseif (rest[1] == ",")
rest = this:triml(rest[2..$]);
else
return {length(rest), ", or } expected"};
endif
endwhile
.
#20:44
"_unquote(string)   (auxiliary for :to_value())";
"reads string as if it were preceded by a quote, reading up to the closing quote if any, then returns the corresponding unquoted string.";
" => {0, string unquoted}  if there is no closing quote";
" => {original string beyond closing quote, string unquoted}  otherwise";
rest = args[1];
result = "";
while (m = match(rest, "\\.?%|\""))
"Find the next special character";
if (rest[pos = m[1]] == "\"")
return {rest[pos + 1..$], result + rest[1..pos - 1]};
endif
result = (result + rest[1..pos - 1]) + rest[pos + 1..m[2]];
rest = rest[m[2] + 1..$];
endwhile
return {0, result + rest};
.
#20:45
":_toscalar(string)  --- auxiliary for :tovalue";
" => value if string represents a number, object or error";
" => string error message otherwise";
thing = args[1];
if (!thing)
return "missing value";
elseif (match(thing, "^#?[-+]?[0-9]+ *$"))
return (thing[1] == "#") ? toobj(thing) | toint(thing);
elseif (match(thing, "^[-+]?%([0-9]+%.[0-9]*%|[0-9]*%.[0-9]+%)%(e[-+]?[0-9]+%)? *$"))
"matches 2. .2 3.2 3.2e3 .2e-3 3.e3";
return `tofloat(thing) ! E_INVARG => tostr("Bad floating point value: ", thing)';
elseif (match(thing, "^[-+]?[0-9]+e[-+]?[0-9]+ *$"))
"matches 345e4. No decimal, but has an e so still a float";
return `tofloat(thing) ! E_INVARG => tostr("Bad floating point value: ", thing)';
elseif (thing[1] == "E")
return (e = $code_utils:toerr(thing)) ? tostr("unknown error code `", thing, "'") | e;
elseif (thing[1] == "#")
return tostr("bogus objectid `", thing, "'");
else
return tostr("`", thing[1], "' unexpected");
endif
.
#20:46
":parse_command(cmd_line[,player])";
" => {verb, {dobj, dobjstr}, {prep, prepstr}, {iobj, iobjstr}, {args, argstr},";
"     {dobjset, prepset, iobjset}}";
"This mimics the action of the builtin parser, returning what the values of the builtin variables `verb', `dobj', `dobjstr', `prepstr', `iobj', `iobjstr', `args', and `argstr' would be if `player' had typed `cmd_line'.  ";
"`prep' is the shortened version of the preposition found.";
"";
"`dobjset' and `iobjset' are subsets of {\"any\",\"none\"} and are used to determine possible matching verbs, i.e., the matching verb must either be on `dobj' and have verb_args[1]==\"this\" or else it has verb_args[1] in `dobjset'; likewise for `iobjset' and verb_args[3]; similarly we must have verb_args[2] in `prepset'.";
{c, ?who = player} = args;
y = $string_utils:words(c);
if (y == {})
return {};
endif
vrb = y[1];
y = y[2..$];
as = (y == {}) ? "" | c[length(vrb) + 2..$];
n = 1;
while ((!(gp = $code_utils:get_prep(@y[n..$]))[1]) && (n < length(y)))
n = n + 1;
endwhile
"....";
really = player;
player = who;
loc = who.location;
if (ps = gp[1])
ds = $string_utils:from_list(y[1..n - 1], " ");
is = $string_utils:from_list(listdelete(gp, 1), " ");
io = valid(loc) ? loc:match_object(is) | $string_utils:match_object(is, loc);
else
ds = $string_utils:from_list(y, " ");
is = "";
io = $nothing;
endif
do = valid(loc) ? loc:match_object(ds) | $string_utils:match_object(ds, loc);
player = really;
"....";
dset = {"any", @(ds == "") ? {"none"} | {}};
"\"this\" must be handled manually.";
pset = {"any", @ps ? {$code_utils:full_prep(ps)} | {"none"}};
iset = {"any", @(is == "") ? {"none"} | {}};
return {vrb, {do, ds}, {$code_utils:short_prep(ps), ps}, {io, is}, {y, as}, {dset, pset, iset}};
.
#20:47
"$string_utils:from_value(value [, quote_strings = 0 [, list_depth = 1]])";
"Print the given value into a string.";
{value, ?quote_strings = 0, ?list_depth = 1} = args;
if (typeof(value) == LIST)
if (value)
if (list_depth)
result = "{" + this:from_value(value[1], quote_strings, list_depth - 1);
for v in (listdelete(value, 1))
result = tostr(result, ", ", this:from_value(v, quote_strings, list_depth - 1));
endfor
return result + "}";
else
return "{...}";
endif
else
return "{}";
endif
elseif (quote_strings)
if (typeof(value) == STR)
result = "\"";
while (q = index(value, "\"") || index(value, "\\"))
if (value[q] == "\"")
q = min(q, index(value + "\\", "\\"));
endif
result = ((result + value[1..q - 1]) + "\\") + value[q];
value = value[q + 1..$];
endwhile
return (result + value) + "\"";
elseif (typeof(value) == ERR)
return $code_utils:error_name(value);
else
return tostr(value);
endif
else
return tostr(value);
endif
.
#20:48
"$string_utils:print(value)";
"Print the given value into a string. == from_value(value,1,-1)";
return toliteral(args[1]);
value = args[1];
if (typeof(value) == LIST)
if (value)
result = "{" + this:print(value[1]);
for val in (listdelete(value, 1))
result = tostr(result, ", ", this:print(val));
endfor
return result + "}";
else
return "{}";
endif
elseif (typeof(value) == STR)
return tostr("\"", strsub(strsub(value, "\\", "\\\\"), "\"", "\\\""), "\"");
elseif (typeof(value) == ERR)
return $code_utils:error_name(value);
else
return tostr(value);
endif
.
#20:49
":reverse(string) => \"gnirts\"";
"An example: :reverse(\"This is a test.\") => \".tset a si sihT\"";
string = args[1];
if ((len = length(string)) > 50)
return this:reverse(string[($ / 2) + 1..$]) + this:reverse(string[1..$ / 2]);
endif
index = len;
result = "";
while (index > 0)
result = result + string[index];
index = index - 1;
endwhile
return result;
.
#20:50
":char_list(string) => string as a list of characters.";
"   e.g., :char_list(\"abad\") => {\"a\",\"b\",\"a\",\"d\"}";
if (30 < (len = length(string = args[1])))
return {@this:char_list(string[1..$ / 2]), @this:char_list(string[($ / 2) + 1..$])};
else
l = {};
for c in [1..len]
l = {@l, string[c]};
endfor
return l;
endif
.
#20:51
":regexp_quote(string)";
" => string with all of the regular expression special characters quoted with %";
string = args[1];
quoted = "";
while (m = rmatch(string, "[][$^.*+?%].*"))
quoted = ("%" + string[m[1]..m[2]]) + quoted;
string = string[1..m[1] - 1];
endwhile
return string + quoted;
.
#20:52
"Takes the output from connection_name() and returns just the host string portion of it.  Assumes you are using bsd_network style connection names.";
s = args[1];
return (m = `match(args[1], "^.* %(from%|to%) %([^, ]+%)") ! ANY') ? substitute("%2", m) | "";
.
#20:53
"This is the function that should actually be called to get the host name from a connection name.  The archwizard should change _bsd so as to be calling the verb appropriate for his/her network interface.";
return this:connection_hostname_bsd(@args);
.
#20:54
"$string_utils:from_value(value [, quote_strings = 0 [, list_depth = 1]])";
"Print the given value into a string.";
"This verb suspends as necessary for large values.";
set_task_perms(caller_perms());
{value, ?quote_strings = 0, ?list_depth = 1} = args;
if (typeof(value) == LIST)
if (value)
if (list_depth)
result = "{" + this:from_value(value[1], quote_strings, list_depth - 1);
for v in (listdelete(value, 1))
$command_utils:suspend_if_needed(0);
result = tostr(result, ", ", this:from_value(v, quote_strings, list_depth - 1));
endfor
return result + "}";
else
return "{...}";
endif
else
return "{}";
endif
elseif (quote_strings)
if (typeof(value) == STR)
result = "\"";
while (q = index(value, "\"") || index(value, "\\"))
$command_utils:suspend_if_needed(0);
if (value[q] == "\"")
q = min(q, index(value + "\\", "\\"));
endif
result = ((result + value[1..q - 1]) + "\\") + value[q];
value = value[q + 1..$];
endwhile
return (result + value) + "\"";
elseif (typeof(value) == ERR)
return $code_utils:error_name(value);
else
return tostr(value);
endif
else
return tostr(value);
endif
.
#20:55
":end_expression(string[,stop_at])";
"  assumes string starts with an expression; returns the index of the last char in expression or 0 if string appears not to be an expression.  Expression ends at any character from stop_at which occurs at top level.";
{string, ?stop_at = " "} = args;
gone = 0;
paren_stack = "";
inquote = 0;
search = top_level_search = ("[][{}()\"" + strsub(stop_at, "]", "")) + "]";
paren_search = "[][{}()\"]";
while (m = match(string, search))
char = string[m[1]];
string[1..m[2]] = "";
gone = gone + m[2];
if (char == "\"")
"...skip over quoted string...";
char = "\\";
while (char == "\\")
if (!(m = match(string, "%(\\.?%|\"%)")))
return 0;
endif
char = string[m[1]];
string[1..m[2]] = "";
gone = gone + m[2];
endwhile
elseif (index("([{", char))
"... push parenthesis...";
paren_stack[1..0] = char;
search = paren_search;
elseif (i = index(")]}", char))
if (paren_stack && ("([{"[i] == paren_stack[1]))
"... pop parenthesis...";
paren_stack[1..1] = "";
search = paren_stack ? paren_search | top_level_search;
else
"...parenthesis mismatch...";
return 0;
endif
else
"... stop character ...";
return gone - 1;
endif
endwhile
return (!paren_stack) && (gone + length(string));
.
#20:56
":first_word(string) => {first word, rest of string} or {}";
rest = args[1];
"...trim leading blanks...";
rest[1..match(rest, "^ *")[2]] = "";
if (!rest)
return {};
endif
quote = 0;
token = "";
pattern = " +%|\\.?%|\"";
while (m = match(rest, pattern))
"... find the next occurence of a special character, either";
"... a block of spaces, a quote or a backslash escape sequence...";
char = rest[m[1]];
token = token + rest[1..m[1] - 1];
if (char == " ")
rest[1..m[2]] = "";
return {token, rest};
elseif (char == "\"")
"... beginning or end of quoted string...";
"... within a quoted string spaces aren't special...";
pattern = (quote = !quote) ? "\\.?%|\"" | " +%|\\.?%|\"";
elseif (m[1] < m[2])
"... char has to be a backslash...";
"... include next char literally if there is one";
token = token + rest[m[2]];
endif
rest[1..m[2]] = "";
endwhile
return {token + rest, ""};
.
#20:57
":common(first,second) => length of longest common prefix";
{first, second} = args;
r = min(length(first), length(second));
l = 1;
while (r >= l)
h = (r + l) / 2;
if (first[l..h] == second[l..h])
l = h + 1;
else
r = h - 1;
endif
endwhile
return r;
.
#20:58
"wr_utils:title_list/title_listc(<obj-list>[, @<args>)";
"Creates an english list out of the titles of the objects in <obj-list>.  Optional <args> are passed on to $string_utils:english_list.";
"title_listc uses :titlec() for the first item.";
titles = $list_utils:map_verb(args[1], "title");
if (verb[length(verb)] == "c")
if (titles)
titles[1] = args[1][1]:titlec();
elseif (length(args) > 1)
args[2] = $string_utils:capitalize(args[2]);
else
args = listappend(args, "Nothing");
endif
endif
return $string_utils:english_list(titles, @args[2..$]);
.
#20:59
"name_and_number(object [,sepr] [,english_list_args]) => \"ObjectName (#object)\"";
"Return name and number for OBJECT.  Second argument is optional separator (for those who want no space, use \"\").  If OBJECT is a list of objects, this maps the above function over the list and then passes it to $string_utils:english_list.";
"The third through nth arguments to nn_list corresponds to the second through nth arguments to English_list, and are passed along untouched.";
{objs, ?sepr = " ", @eng_args} = args;
if (typeof(objs) != LIST)
objs = {objs};
endif
name_list = {};
for what in (objs)
name = valid(what) ? what.name | {"<invalid>", "$nothing", "$ambiguous_match", "$failed_match"}[1 + (what in {#-1, #-2, #-3})];
name = tostr(name, sepr, "(", what, ")");
name_list = {@name_list, name};
endfor
return this:english_list(name_list, @eng_args);
.
#20:60
"columnize_suspended (interval, items, n [, width]) - Turn a one-column list of items into an n-column list, suspending for `interval' seconds as necessary. 'width' is the last character position that may be occupied; it defaults to a standard screen width. Example: To tell the player a list of numbers in three columns, do 'player:tell_lines ($string_utils:columnize_suspended(0, {1, 2, 3, 4, 5, 6, 7}, 3));'.";
{interval, items, n, ?width = 79} = args;
height = ((length(items) + n) - 1) / n;
items = {@items, @$list_utils:make((height * n) - length(items), "")};
colwidths = {};
for col in [1..n - 1]
colwidths = listappend(colwidths, 1 - (((width + 1) * col) / n));
endfor
result = {};
for row in [1..height]
line = tostr(items[row]);
for col in [1..n - 1]
$command_utils:suspend_if_needed(interval);
line = tostr(this:left(line, colwidths[col]), " ", items[row + (col * height)]);
endfor
result = listappend(result, line[1..min($, width)]);
endfor
return result;
.
#20:61
":a_or_an(<noun>) => \"a\" or \"an\"";
"To accomodate personal variation (e.g., \"an historical book\"), a player can override this by having a personal a_or_an verb.  If that verb returns 0 instead of a string, the standard algorithm is used.";
noun = args[1];
if ($object_utils:has_verb(player, "a_or_an") && ((custom_result = player:a_or_an(noun)) != 0))
return custom_result;
endif
if (noun in this.use_article_a)
return "a";
endif
if (noun in this.use_article_an)
return "an";
endif
a_or_an = "a";
if (noun != "")
if (index("aeiou", noun[1]))
a_or_an = "an";
"unicycle, unimplemented, union, united, unimpressed, unique";
if ((((noun[1] == "u") && (length(noun) > 2)) && (noun[2] == "n")) && ((index("aeiou", noun[3]) == 0) || (((noun[3] == "i") && (length(noun) > 3)) && (index("aeioubcghqwyz", noun[4]) || ((length(noun) > 4) && index("eiy", noun[5]))))))
a_or_an = "a";
endif
endif
endif
return a_or_an;
"Ported by Mickey with minor tweaks from a Moo far far away.";
"Last modified Sun Aug  1 22:53:07 1993 EDT by BabyBriar (#2).";
.
#20:62
"index_all(string,target) -- returns list of positions of target in string.";
"Usage: $string_utils:index_all(<string,pattern>)";
"       $string_utils:index_all(\"aaabacadae\",\"a\")";
{line, pattern} = args;
if ((typeof(line) != STR) || (typeof(pattern) != STR))
return E_TYPE;
else
where = {};
place = -1;
next = 0;
while ((place = index(line[next + 1..$], pattern)) != 0)
where = {@where, place + next};
next = ((place + next) + length(pattern)) - 1;
endwhile
return where;
endif
.
#20:63
"Copied from Puff (#1449):match_stringlist Tue Oct 19 08:18:13 1993 PDT";
"$string_utils:match_stringlist(string, {list of strings})";
"The list of strings should be just that, a list of strings.  The first string is matched against the list of strings.";
"If it exactly matches exactly one of them, the index of the match is returned. If it exactly matches more than one of them, $ambiguous_match is returned.";
"If there are no exact matches, then partial matches are considered, ones in which the given string is a prefix of one of the strings.";
"Again, if exactly one match is found, the index of that string is returned, and if more than one match is found, $ambiguous match is returned.";
"Finally, if there are no exact or partial matches, then $failed_match is returned.";
{subject, stringlist} = args;
if ((subject == "") || (length(stringlist) < 1))
return $nothing;
endif
matches = {};
"First check for exact matches.";
for i in [1..length(stringlist)]
if (subject == stringlist[i])
matches = {@matches, i};
endif
endfor
"Now return a match, or $ambiguous, or check for partial matches.";
if (length(matches) == 1)
return matches[1];
elseif (length(matches) > 1)
return $ambiguous_match;
elseif (length(matches) == 0)
"Checking for partial matches is almost identical to checking for exact matches, but we use index(list[i], target) instead of list[i] == target to see if they match.";
for i in [1..length(stringlist)]
if (index(stringlist[i], subject) == 1)
matches = {@matches, i};
endif
endfor
if (length(matches) == 1)
return matches[1];
elseif (length(matches) > 1)
return $ambiguous_match;
elseif (length(matches) == 0)
return $failed_match;
endif
endif
.
#20:64
"This converts a ASCII character code in the range [32..126] into the ASCII character with that code, represented as a one-character string.";
"";
"Example:   $string_utils:from_ASCII(65) => \"A\"";
code = args[1];
return this.ascii[code - 31];
.
#20:65
"Convert a one-character string into the ASCII character code for that character.";
"";
"Example:  $string_utils:to_ASCII(\"A\") => 65";
return (index(this.ascii, args[1], 1) || raise(E_INVARG)) + 31;
.
#20:66
"Copied from Mickey (#52413):abbreviated_value Fri Sep  9 08:52:41 1994 PDT";
":abbreviated_value(value,max_reslen,max_lstlev,max_lstlen,max_strlen,max_toklen)";
"";
"Gets the printed representation of value, subject to these parameters:";
" max_reslen = Maximum desired result string length.";
" max_lstlev = Maximum list level to show.";
" max_lstlen = Maximum list length to show.";
" max_strlen = Maximum string length to show.";
" max_toklen = Maximum token length (e.g., numbers and errors) to show.";
"";
"A best attempt is made to get the exact target size, but in some cases the result is not exact.";
{value, ?max_reslen = $maxint, ?max_lstlev = $maxint, ?max_lstlen = $maxint, ?max_strlen = $maxint, ?max_toklen = $maxint} = args;
return this:_abbreviated_value(value, max_reslen, max_lstlev, max_lstlen, max_strlen, max_toklen);
"Originally written by Mickey.";
.
#20:67
"Copied from Mickey (#52413):_abbreviated_value Fri Sep  9 08:52:44 1994 PDT";
"Internal to :abbreviated_value.  Do not call this directly.";
{value, max_reslen, max_lstlev, max_lstlen, max_strlen, max_toklen} = args;
if ((type = typeof(value)) == LIST)
if (!value)
return "{}";
elseif (max_lstlev == 0)
return "{...}";
else
n = length(value);
result = "{";
r = max_reslen - 2;
i = 1;
eltstr = "";
while (((i <= n) && (i <= max_lstlen)) && (r > (x = (i == 1) ? 0 | 2)))
eltlen = length(eltstr = this:(verb)(value[i], r, max_lstlev - 1, max_lstlen, max_strlen, max_toklen));
lastpos = 1;
if (r >= (eltlen + x))
comma = (i == 1) ? "" | ", ";
result = tostr(result, comma);
if (r > 4)
lastpos = length(result);
endif
result = tostr(result, eltstr);
r = (r - eltlen) - x;
elseif (i == 1)
return "{...}";
elseif (r > 4)
return tostr(result, ", ...}");
else
return tostr(result[1..lastpos], "...}");
endif
i = i + 1;
endwhile
if (i <= n)
if (i == 1)
return "{...}";
elseif (r > 4)
return tostr(result, ", ...}");
else
return tostr(result[1..lastpos], "...}");
endif
else
return tostr(result, "}");
endif
endif
elseif (type == STR)
result = "\"";
while ((q = index(value, "\"")) ? q = min(q, index(value, "\\")) | (q = index(value, "\\")))
result = ((result + value[1..q - 1]) + "\\") + value[q];
value = value[q + 1..$];
endwhile
result = result + value;
if ((length(result) + 1) > (z = max(min(max_reslen, max(max_strlen, max_strlen + 2)), 6)))
z = z - 5;
k = 0;
while ((k < z) && (result[z - k] == "\\"))
k = k + 1;
endwhile
return tostr(result[1..z - (k % 2)], "\"+...");
else
return tostr(result, "\"");
endif
else
v = (type == ERR) ? $code_utils:error_name(value) | tostr(value);
len = max(4, min(max_reslen, max_toklen));
return (length(v) > len) ? v[1..len - 3] + "..." | v;
endif
"Originally written by Mickey.";
.
#20:68
"$string_utils:match_suspended(string [, obj-list, prop-name]*)";
"Each obj-list should be a list of objects or a single object, which is treated as if it were a list of that object.  Each prop-name should be string naming a property on every object in the corresponding obj-list.  The value of that property in each case should be either a string or a list of strings.";
"The argument string is matched against all of the strings in the property values.";
"If it exactly matches exactly one of them, the object containing that property is returned.  If it exactly matches more than one of them, $ambiguous_match is returned.";
"If there are no exact matches, then partial matches are considered, ones in which the given string is a prefix of some property string.  Again, if exactly one match is found, the object with that property is returned, and if there is more than one match, $ambiguous_match is returned.";
"Finally, if there are no exact or partial matches, then $failed_match is returned.";
"This verb will suspend as needed, and should be used if obj-list is very large.";
subject = args[1];
if (subject == "")
return $nothing;
endif
no_exact_match = no_partial_match = 1;
for i in [1..length(args) / 2]
prop_name = args[(2 * i) + 1];
for object in ((typeof(olist = args[2 * i]) == LIST) ? olist | {olist})
if (valid(object))
if (typeof(str_list = `object.(prop_name) ! E_PERM, E_PROPNF => {}') != LIST)
str_list = {str_list};
endif
if (subject in str_list)
if (no_exact_match)
no_exact_match = object;
elseif (no_exact_match != object)
return $ambiguous_match;
endif
else
for string in (str_list)
if (index(string, subject) != 1)
elseif (no_partial_match)
no_partial_match = object;
elseif (no_partial_match != object)
no_partial_match = $ambiguous_match;
endif
endfor
endif
endif
$command_utils:suspend_if_needed(5);
endfor
endfor
return no_exact_match && (no_partial_match && $failed_match);
.
#20:69
"args[1] is a string.  'increments' the string by one. E.g., aaa => aab, aaz => aba.  empty string => a, zzz => aaaa.";
"args[2] is optional alphabet to use instead of $string_utils.alphabet.";
{s, ?alphabet = this.alphabet} = args;
index = length(s);
if (!s)
return alphabet[1];
elseif (s[$] == alphabet[$])
return this:incr_alpha(s[1..index - 1], alphabet) + alphabet[1];
else
t = index(alphabet, s[index]);
return s[1..index - 1] + alphabet[t + 1];
endif
.
#20:70
"Usage:  is_float(string)";
"Is string composed of one or more digits possibly preceded by a minus sign either followed by a decimal or by an exponent?";
"Return true or false";
return match(args[1], "^ *[-+]?%(%([0-9]+%.[0-9]*%|[0-9]*%.[0-9]+%)%(e[-+]?[0-9]+%)?%)%|%([0-9]+e[-+]?[0-9]+%) *$");
.
#20:71
"Copied from Moo_tilities (#332):inside_quotes by Mooshie (#106469) Tue Dec 23 10:26:49 1997 PST";
"Usage: inside_quotes(STR)";
"Is the  end of the given string `inside' a doublequote?";
"Called from $code_utils:substitute.";
{string} = args;
quoted = 0;
while (i = index(string, "\""))
if ((!quoted) || (string[i - 1] != "\\"))
quoted = !quoted;
endif
string = string[i + 1..$];
endwhile
return quoted;
.
#20:72
":strip_all_but_seq(string, keep) => chars in string not in exact sequence of keep removed.";
":strip_all_but() works similarly, only it does not concern itself with the sequence, just the specified chars.";
string = args[1];
wanted = args[2];
output = "";
while (m = match(string, wanted))
output = output + string[m[1]..m[2]];
string = string[m[2] + 1..length(string)];
endwhile
return output;
.
#21:0
"make_exit(spec, source, dest[, use-$recycler-pool [, kind]])";
"";
"Uses $recycler by default; supplying fourth arg as 0 suppresses this.";
"Optional 5th arg gives a parent for the object to be created";
"(i.e., distinct from $exit)";
"Returns the object number as a list if successful, 0 if not.";
set_task_perms(caller_perms());
{spec, source, dest, ?use_recycler, ?exit_kind = $exit} = args;
exit = player:_create(exit_kind);
if (typeof(exit) == ERR)
player:notify(tostr("Cannot create new exit as a child of ", $string_utils:nn(exit_kind), ": ", exit, ".  See `help @build-options' for information on how to specify the kind of exit this command tries to create."));
return;
endif
for f in ($string_utils:char_list(player:build_option("create_flags") || ""))
exit.(f) = 1;
endfor
$building_utils:set_names(exit, spec);
exit.source = source;
exit.dest = dest;
source_ok = source:add_exit(exit);
dest_ok = dest:add_entrance(exit);
move(exit, $nothing);
via = $string_utils:from_value(setadd(exit.aliases, exit.name), 1);
if (source_ok)
player:tell("Exit from ", source.name, " (", source, ") to ", dest.name, " (", dest, ") via ", via, " created with id ", exit, ".");
if (!dest_ok)
player:tell("However, I couldn't add ", exit, " as a legal entrance to ", dest.name, ".  You may have to get its owner, ", dest.owner.name, " to add it for you.");
endif
return {exit};
elseif (dest_ok)
player:tell("Exit to ", dest.name, " (", dest, ") via ", via, " created with id ", exit, ".  However, I couldn't add ", exit, " as a legal exit from ", source.name, ".  Get its owner, ", source.owner.name, " to add it for you.");
return {exit};
else
player:_recycle(exit);
player:tell("I couldn't add a new exit as EITHER a legal exit from ", source.name, " OR as a legal entrance to ", dest.name, ".  Get their owners, ", source.owner.name, " and ", dest.owner.name, ", respectively, to add it for you.");
return 0;
endif
.
#21:1
"$building_utils:set_names(object, spec)";
set_task_perms(caller_perms());
object = args[1];
names = this:parse_names(args[2]);
name = names[1] || object.name;
return object:set_name(name) && object:set_aliases(names[2]);
.
#21:2
":recreate(object,newparent) -- effectively recycle and recreate the specified object as a child of parent.  Returns true if successful.";
{object, parent} = args;
who = caller_perms();
if (!(valid(object) && valid(parent)))
return E_INVARG;
elseif (who.wizard)
"no problemo";
elseif ((who != object.owner) || ((who != parent.owner) && (!parent.f)))
return E_PERM;
endif
"Chparent any children to their grandparent instead of orphaning them horribly.  Have to do the chparent with wizperms, in case the children are owned by others, so do this before set_task_perms.";
"Because this is done before set_task_perms() -- thus with wizard perms -- we save ticks and use chparent() instead of #0:chparent().  This will save many more ticks, if this is an object with many children.";
grandpa = parent(object);
for c in (children(object))
chparent(c, grandpa);
endfor
for item in (object.contents)
if (!is_player(item))
move(item, #-1);
else
move(item, $player_start);
endif
endfor
set_task_perms(who);
if ($object_utils:has_callable_verb(object, "recycle"))
object:recycle();
endif
chparent(object, #-1);
for p in (properties(object))
delete_property(object, p);
endfor
for v in (verbs(object))
delete_verb(object, 1);
endfor
chparent(object, parent);
object.name = "";
object.r = 0;
object.f = 0;
object.w = 0;
if ($object_utils:has_callable_verb(parent, "initialize"))
object:initialize();
endif
return 1;
.
#21:3
"$building_utils:parse_names(spec)";
"Return {name, {alias, alias, ...}} from name,alias,alias or name:alias,alias";
spec = args[1];
if (!(colon = index(spec, ":")))
aliases = $string_utils:explode(spec, ",");
if (!aliases)
aliases = {spec};
endif
name = aliases[1];
else
aliases = $string_utils:explode(spec[colon + 1..$], ",");
name = spec[1..colon - 1];
endif
return {name, $list_utils:map_arg($string_utils, "trim", aliases)};
.
#21:4
if (is_player(what = args[1]))
return "P";
endif
while (valid(what))
if (i = what in this.classes)
return this.class_string[i];
endif
what = parent(what);
endwhile
return " ";
.
#21:5
":object_audit_string(object [,prospectus-style])";
{o, ?prospectus = 0} = args;
olen = length(tostr(max_object()));
if (!$recycler:valid(o))
return tostr(prospectus ? "          " | "", $quota_utils.byte_based ? "    " | "", $string_utils:right(o, olen), " Invalid Object!");
endif
if (prospectus)
kids = 0;
for k in (children(o))
$command_utils:suspend_if_needed(0);
if (k.owner != o.owner)
kids = 2;
break k;
elseif (kids == 0)
kids = 1;
endif
endfor
"The verbs() call below might fail, but that's OK";
"Well, actually it won't cuz we seem to be a wizard.  Since you can get the number of verbs information from @verbs anyway, it seems kind of pointless to hide it here.";
v = verbs(o);
if (v)
vstr = tostr("[", $string_utils:right(length(v), 3), "] ");
else
vstr = "      ";
endif
if (o.r && o.f)
r = "f";
elseif (o.r)
r = "r";
elseif (o.f)
r = "F";
else
r = " ";
endif
vstr = tostr(" kK"[kids + 1], r, $building_utils:audit_object_category(o), vstr);
else
vstr = "";
endif
if ($quota_utils.byte_based)
vstr = tostr(this:size_string(`o.object_size[1] ! ANY => 0'), " ", vstr);
name_field_len = 26;
else
name_field_len = 30;
endif
if (valid(o.location))
loc = ((((o.location.owner == o.owner) ? " " | "*") + "[") + o.location.name) + "]";
elseif ($object_utils:has_property(o, "dest") && $object_utils:has_property(o, "source"))
if (typeof(o.source) != OBJ)
source = " <non-object> ";
elseif (!valid(o.source))
source = "<invalid>";
else
source = o.source.name;
if (o.source.owner != o.owner)
source = "*" + source;
endif
endif
if (typeof(o.dest) != OBJ)
destin = " <non-object> ";
elseif (!valid(o.dest))
destin = "<invalid>";
else
destin = o.dest.name;
if (o.dest.owner != o.owner)
destin = "*" + destin;
endif
endif
srclen = min(length(source), 19);
destlen = min(length(destin), 19);
loc = ((" " + source[1..srclen]) + "->") + destin[1..destlen];
elseif ($object_utils:isa(o, $room))
loc = "";
try
for x in (o.entrances)
if (((((typeof(x) == OBJ) && valid(x)) && (x.owner != o.owner)) && $object_utils:has_property(x, "dest")) && (x.dest == o))
loc = ((loc + (loc ? ", " | "")) + "<-*") + x.name;
endif
endfor
except (ANY)
if ($perm_utils:controls(player, o))
loc = " BROKEN PROPERTY: .entrances";
endif
endtry
else
loc = " [Nowhere]";
endif
if (length(loc) > 41)
loc = loc[1..37] + "..]";
endif
namelen = min(length(o.name), name_field_len - 1);
return tostr(vstr, $string_utils:right(o, olen), " ", $string_utils:left(o.name[1..namelen], name_field_len), loc);
.
#21:6
":do_audit(who, start, end, match)";
"audit who, with objects from start to end that match 'match'";
":do_prospectus(...)";
"same, but with verb counts";
{who, start, end, match} = args;
pros = verb == "do_prospectus";
"the set_task_perms is to make the task owned by the player. There are no other security aspects";
set_task_perms(caller_perms());
if ((((((start == 0) && (end == toint(max_object()))) && (!match)) && (typeof(who.owned_objects) == LIST)) && (length(who.owned_objects) > 100)) && (!$command_utils:yes_or_no(tostr(who.name, " has ", length(who.owned_objects), " objects.  This will be a very long list.  Do you wish to proceed?"))))
v = pros ? "@prospectus" | "@audit";
return player:tell(v, " aborted.  Usage:  ", v, " [player] [from <start>] [to <end>] [for <match>]");
endif
player:tell(tostr("Objects owned by ", who.name, " (from #", start, " to #", end, match ? " matching " + match | "", ")", ":"));
count = bytes = 0;
if (typeof(who.owned_objects) == LIST)
for o in (who.owned_objects)
$command_utils:suspend_if_needed(0);
if (!player:is_listening())
return;
endif
if ((toint(o) >= start) && (toint(o) <= end))
didit = this:do_audit_item(o, match, pros);
count = count + didit;
if ((didit && $quota_utils.byte_based) && $object_utils:has_property(o, "object_size"))
bytes = bytes + o.object_size[1];
endif
endif
endfor
else
for i in [start..end]
$command_utils:suspend_if_needed(0);
o = toobj(i);
if ($recycler:valid(o) && (o.owner == who))
didit = this:do_audit_item(o, match, pros);
count = count + didit;
if ((didit && $quota_utils.byte_based) && $object_utils:has_property(o, "object_size"))
bytes = bytes + o.object_size[1];
endif
endif
endfor
endif
player:tell($string_utils:left(tostr("-- ", count, " object", (count == 1) ? "." | "s.", $quota_utils.byte_based ? tostr("  Total bytes: ", $string_utils:group_number(bytes), ".") | ""), player:linelen() - 1, "-"));
.
#21:7
":do_audit_item(object, match-name-string, prospectus-flag)";
{o, match, pros} = args;
found = match ? 0 | 1;
names = `{o.name, @o.aliases} ! ANY => {o.name}';
"Above to get rid of screwed up aliases";
while (names && (!found))
if (index(names[1], match) == 1)
found = 1;
endif
names = listdelete(names, 1);
endwhile
if (found)
"From Dred---don't wrap long lines.";
line = $building_utils:object_audit_string(o, pros);
player:tell(line[1..min($, player:linelen())]);
return 1;
endif
return 0;
.
#21:8
"Copied from Roebare (#109000):size_string at Sat Nov 26 18:41:12 2005 PST";
size = args[1];
if (typeof(size) != INT)
return E_INVARG;
endif
if (`!player:build_option("audit_float") ! ANY')
"...use integers to determine a four-char string...";
factor = 1000;
threshold = {{1000, "B"}, {1000000, "K"}, {1000000000, "M"}};
if (!size)
return " ???";
elseif ((size < 0) || (size > threshold[$][1]))
if ((size < 0) || (size > $maxint))
return " >2G";
else
"...floats still required to factor over $maxint...";
return tostr($string_utils:right(floatstr(tofloat(size) / 1000000000.0, 0), 3), "G");
endif
elseif ((size < threshold[1][1]) && `!player:build_option("audit_bytes") ! ANY')
return " <1K";
endif
for entry in ($list_utils:slice(threshold, 1))
$command_utils:suspend_if_needed(0);
i = $list_utils:iassoc(entry, threshold);
if (size == entry)
size = "1";
try
unit = threshold[i + 1][2];
except error (E_RANGE)
unit = "G";
endtry
break;
elseif (size < entry)
size = tostr(size / (entry / factor));
unit = threshold[i][2];
break;
endif
endfor
return tostr($string_utils:right(size, 3), unit);
else
"...use floats to determine a six-char string...";
size = tofloat(size);
factor = 1024.0;
"...be precise, `((1024.00 * 1024.00) * 1024.00) * 1024.00'...";
threshold = {{1048576.0, "K"}, {1073741824.0, "M"}, {1099511627776.0, "G"}};
if (!size)
return "   ???";
elseif ((size < 0.0) || (size > threshold[$][1]))
"...special handling for bad conversions & big numbers...";
if ((size < 0.0) || (size > tofloat($maxint)))
return "   >2G";
else
return tostr($string_utils:right(floatstr(size / 1000000000.0, 1), 3), "G");
endif
endif
for entry in ($list_utils:slice(threshold, 1))
$command_utils:suspend_if_needed(0);
i = $list_utils:iassoc(entry, threshold);
if (size == entry)
size = "1";
try
unit = threshold[i + 1][2];
except error (E_RANGE)
"...in another decade, maybe...";
unit = "T";
endtry
break;
elseif (size < entry)
size = floatstr(size / (entry / factor), 1);
unit = threshold[i][2];
break;
endif
endfor
return tostr($string_utils:right(size, 5), unit);
endif
"Rewritten by Roebare (#109000), 051119-26";
"With inspiration from Miral (#107983) and assistance from Diopter (#98842)";
"Byte & float display optional, per Nosredna (#2487), 051120-24";
.
#21:9
if (caller_perms().wizard)
pass(@args);
this.classes = {$player, $room, $exit, $note, $container, $thing, $feature, $mail_recipient, $generic_help, $generic_db, $generic_utils, $generic_options};
endif
.
#22:0
text = args[1];
for i in [1..length($code_utils.error_list)]
text = {@text, tostr("    ", $string_utils:left($code_utils.error_names[i], 15), $code_utils.error_list[i])};
endfor
return text;
.
#22:1
text = args[1];
for p in ($code_utils:prepositions())
text = {@text, tostr($string_utils:space(4), p)};
endfor
return text;
.
#24:0
":set_programmer(victim[,mail from])  => 1 or error.";
"Sets victim.programmer, chparents victim to $prog if necessary, and sends mail to $new_prog_log, mail is from optional second arg or caller_perms().";
whodunnit = caller_perms();
{victim, ?mailfrom = whodunnit} = args;
if (!whodunnit.wizard)
return E_PERM;
elseif (!(valid(victim) && (is_player(victim) && $object_utils:isa(victim, $player))))
return E_INVARG;
elseif (victim.programmer)
return E_NONE;
elseif (this:check_prog_restricted(victim))
return E_INVARG;
elseif (typeof(e = `victim.programmer = 1 ! ANY') == ERR)
return e;
else
$quota_utils:adjust_quota_for_programmer(victim);
if (!$object_utils:isa(victim, $prog))
if (typeof(e = `chparent(victim, $prog) ! ANY') == ERR)
"...this isn't really supposed to happen but it could...";
player:notify(tostr("chparent(", victim, ",", $prog, ") failed:  ", e));
player:notify("Check for common properties.");
endif
else
player:notify(tostr(victim.name, " was already a child of ", parent(victim).name, " (", parent(victim), ")"));
endif
if (!$mail_agent:send_message(mailfrom, {$new_prog_log, victim}, tostr("@programmer ", victim.name, " (", victim, ")"), tostr("I just gave ", victim.name, " a programmer bit."))[1])
$mail_agent:send_message(mailfrom, {$new_prog_log}, tostr("@programmer ", victim.name, " (", victim, ")"), tostr("I just gave ", victim.name, " a programmer bit."));
endif
return 1;
endif
.
#24:1
":set_player(victim[,nochown]) => 1 or error";
"Set victim's player flag, (maybe) chown to itself, add name and aliases to $player_db.";
" E_NONE == already a player,";
" E_NACC == player_db is frozen,";
" E_RECMOVE == name is unavailable";
{victim, ?nochown = 0} = args;
if (!caller_perms().wizard)
return E_PERM;
elseif (!(valid(victim) && $object_utils:isa(victim, $player)))
return E_INVARG;
elseif (is_player(victim))
return E_NONE;
elseif ($player_db.frozen)
return E_NACC;
elseif (!$player_db:available(name = victim.name))
return E_RECMOVE;
else
set_player_flag(victim, 1);
if (0 && $object_utils:isa(victim, $prog))
victim.programmer = 1;
else
victim.programmer = $player.programmer;
endif
if (!nochown)
$wiz_utils:set_owner(victim, victim);
endif
$player_db:insert(name, victim);
for a in (setremove(aliases = victim.aliases, name))
if (index(a, " "))
"..ignore ..";
elseif ($player_db:available(a) in {this, 1})
$player_db:insert(a, victim);
else
aliases = setremove(aliases, a);
endif
endfor
victim.aliases = setadd(aliases, name);
return 1;
endif
.
#24:2
":set_owner(object,newowner[,suspendok])  does object.owner=newowner, taking care of c properties as well.  This should be used anyplace one is contemplating doing object.owner=newowner, since the latter leaves ownership of c properties unchanged.  (--Rog thinks this is a server bug).";
{object, newowner, ?suspendok = 0} = args;
if (!valid(object))
return E_INVIND;
elseif (!caller_perms().wizard)
return E_PERM;
elseif (!(valid(newowner) && is_player(newowner)))
return E_INVARG;
endif
oldowner = object.owner;
object.owner = newowner;
for pname in ($object_utils:all_properties(object))
if (suspendok && ((ticks_left() < 5000) || (seconds_left() < 2)))
suspend(0);
endif
perms = property_info(object, pname)[2];
if (index(perms, "c"))
set_property_info(object, pname, {newowner, perms});
endif
endfor
if ($object_utils:isa(oldowner, $player))
if (is_player(oldowner) && (object != oldowner))
$quota_utils:reimburse_quota(oldowner, object);
endif
if (typeof(oldowner.owned_objects) == LIST)
oldowner.owned_objects = setremove(oldowner.owned_objects, object);
endif
endif
if ($object_utils:isa(newowner, $player))
if (object != newowner)
$quota_utils:charge_quota(newowner, object);
endif
if (typeof(newowner.owned_objects) == LIST)
newowner.owned_objects = setadd(newowner.owned_objects, object);
endif
endif
return 1;
.
#24:3
":set_property_owner(object,prop,newowner[,suspendok])  changes the ownership of object.prop to newowner.  If the property is !c, changes the ownership on all of the descendents as well.  Otherwise, we just chown the property on the object itself and give a warning if newowner!=object.owner (--Rog thinks this is a server bug that one is able to do this at all...).";
{object, pname, newowner, ?suspendok = 0} = args;
if (!caller_perms().wizard)
return E_PERM;
elseif (!(info = `property_info(object, pname) ! ANY'))
"... handles E_PROPNF and invalid object errors...";
return info;
elseif (!is_player(newowner))
return E_INVARG;
elseif (index(info[2], "c"))
if (suspendok / 2)
"...(recursive call)...";
"...child property is +c while parent is -c??...RUN AWAY!!";
return E_NONE;
else
set_property_info(object, pname, listset(info, newowner, 1));
return (newowner == object.owner) || E_NONE;
endif
else
set_property_info(object, pname, listset(info, newowner, 1));
if ((suspendok % 2) && ((ticks_left() < 10000) || (seconds_left() < 2)))
suspend(0);
endif
suspendok = 2 + suspendok;
for c in (children(object))
this:set_property_owner(c, pname, newowner, suspendok);
endfor
return 1;
endif
.
#24:4
":unset_player(victim[,newowner])  => 1 or error";
"Reset victim's player flag, chown victim to newowner (if given), remove all of victim's names and aliases from $player_db.";
{victim, ?newowner = 0} = args;
if (!caller_perms().wizard)
return E_PERM;
elseif (!valid(victim))
return E_INVARG;
elseif (!is_player(victim))
return E_NONE;
endif
if (typeof(newowner) == OBJ)
$wiz_utils:set_owner(victim, newowner);
endif
victim.programmer = 0;
victim.wizard = 0;
set_player_flag(victim, 0);
if ($object_utils:has_property($local, "second_char_registry"))
$local.second_char_registry:delete_player(victim);
`$local.second_char_registry:delete_shared(victim) ! ANY';
endif
if ($player_db.frozen)
player:tell("Warning:  player_db is in the middle of a :load().");
endif
$player_db:delete2(victim.name, victim);
for a in (victim.aliases)
$player_db:delete2(a, victim);
"I don't *think* this is bad---we've already toaded the guy.  And folks with lots of aliases screw us. --Nosredna";
$command_utils:suspend_if_needed(0);
endfor
return 1;
"Paragraph (#122534) - Sat Nov 5, 2005 - Remove any shared character registry listings for `victim'.";
.
#24:5
":set_property_flags(object,prop,flags[,suspendok])  changes the permissions on object.prop to flags.  Unlike a mere set_property_info, this changes the flags on all descendant objects as well.  We also change the ownership on the descendent properties where necessary.";
{object, pname, flags, ?suspendok = 0} = args;
perms = caller_perms();
if (!(info = `property_info(object, pname) ! ANY'))
"... handles E_PROPNF and invalid object errors...";
return info;
elseif ($set_utils:difference($string_utils:char_list(flags), {"r", "w", "c"}))
"...not r, w, or c?...";
return E_INVARG;
elseif ((pinfo = `property_info(parent(object), pname) ! ANY') && (flags != pinfo[2]))
"... property doesn't actually live here...";
"... only allowed to correct so that this property matches parent...";
return E_INVARG;
elseif (!(perms.wizard || (info[1] == perms)))
"... you have to own the property...";
return E_PERM;
elseif (!(((!(c = index(flags, "c"))) == (!index(info[2], "c"))) || $perm_utils:controls(perms, object)))
"... if you're changing the c flag, you have to own the object...";
return E_PERM;
else
if (c)
set_property_info(object, pname, {object.owner, kflags = flags});
else
set_property_info(object, pname, kflags = listset(info, flags, 2));
endif
for kid in (children(object))
this:_set_property_flags(kid, pname, kflags, suspendok);
endfor
return 1;
endif
.
#24:6
"_set_property_flags(object, pname, {owner, flags} or something+\"c\", suspendok)";
"auxiliary to :set_property_flags... don't call this directly.";
if (caller != this)
return E_PERM;
endif
if (args[4] && $command_utils:running_out_of_time(0))
suspend(0);
endif
object = args[1];
if (typeof(args[3]) != LIST)
set_property_info(object, args[2], {object.owner, args[3]});
else
set_property_info(@args[1..3]);
endif
for kid in (children(object))
this:_set_property_flags(@listset(args, kid, 1));
endfor
.
#24:7
"Generate a random password of length args[1].  Alternates vowels and consonants, for maximum pronounceability.  Uses its own list of consonants which exclude F and C and K to prevent generating obscene sounding passwords.";
"Capital I and lowercase L are excluded on the basis of looking like each other.";
vowels = "aeiouyAEUY";
consonants = "bdghjmnpqrstvwxzBDGHJLMNPQRSTVWXZ";
len = toint(args[1]);
if (len)
alt = random(2) - 1;
s = "";
for i in [1..len]
newchar = alt ? vowels[random($)] | consonants[random($)];
s = s + newchar;
alt = !alt;
endfor
return s;
else
return E_INVARG;
endif
.
#24:8
":queued_tasks(player) => list of queued tasks for that player.";
"shouldn't the server builtin should work this way?  oh well";
set_task_perms(caller_perms());
if (typeof(e = `set_task_perms(who = args[1]) ! ANY') == ERR)
return e;
elseif (who.wizard)
tasks = {};
for t in (queued_tasks())
if (t[5] == who)
tasks = {@tasks, t};
endif
endfor
return tasks;
else
return queued_tasks();
endif
.
#24:9
"Return 1 if args[1] is a newted player.";
if (!caller_perms().wizard)
return E_PERM;
else
return args[1] in $login.newted;
endif
.
#24:10
if (!caller_perms().wizard)
return E_PERM;
else
set_task_perms(caller_perms());
player:tell("Beginning initialize_owned:  ", ctime());
for o in [#0..max_object()]
if (valid(o))
if ($object_utils:isa(owner = o.owner, $player) && (typeof(owner.owned_objects) == LIST))
owner.owned_objects = setadd(owner.owned_objects, o);
endif
endif
$command_utils:suspend_if_needed(0);
endfor
player:tell("Done adding, beginning verification pass.");
this:verify_owned_objects();
player:tell("Finished:  ", ctime());
endif
.
#24:11
if (!caller_perms().wizard)
return E_PERM;
else
for p in (players())
if (typeof(p.owned_objects) == LIST)
for o in (p.owned_objects)
if (((typeof(o) != OBJ) || (!valid(o))) || (o.owner != p))
p.owned_objects = setremove(p.owned_objects, o);
player:tell("Removed ", $string_utils:nn(o), " from ", $string_utils:nn(p), "'s .owned_objects list.");
if (((typeof(o) == OBJ) && valid(o)) && (typeof(o.owner.owned_objects) == LIST))
o.owner.owned_objects = setadd(o.owner.owned_objects, o);
endif
endif
$command_utils:suspend_if_needed(0, p);
endfor
endif
endfor
endif
.
#24:12
":connected_wizards() => list of currently connected wizards and players mentioned in .public_identity properties as being wizard counterparts.";
wizzes = $object_utils:leaves($wiz);
wlist = {};
everyone = verb == "connected_wizards_unadvertised";
for w in (wizzes)
if (w.wizard && (w.advertised || everyone))
if (`connected_seconds(w) ! ANY => 0')
wlist = setadd(wlist, w);
endif
if (`connected_seconds(w.public_identity) ! ANY => 0')
wlist = setadd(wlist, w.public_identity);
endif
endif
endfor
return wlist;
.
#24:13
":all_wizards_advertised() => list of all wizards who have set .advertised true and players mentioned their .public_identity properties as being wizard counterparts";
wizzes = $object_utils:leaves($wiz);
wlist = {};
everyone = verb == "all_wizards_unadvertised";
for w in (wizzes)
if (w.wizard && (w.advertised || everyone))
if (is_player(w))
wlist = setadd(wlist, w);
endif
if (`is_player(w.public_identity) ! ANY')
wlist = setadd(wlist, w.public_identity);
endif
endif
endfor
return wlist;
.
#24:14
":rename_all_instances(object,oldname,newname)";
"Used to rename all instances of an unwanted verb (like recycle or disfunc)";
"if said verb is actually defined on the object itself";
if (caller_perms().wizard)
found = 0;
{object, oldname, newname} = args;
while (info = `verb_info(object, oldname) ! ANY')
`set_verb_info(object, oldname, listset(info, newname, 3)) ! ANY';
found = 1;
endwhile
return found;
else
return E_PERM;
endif
.
#24:15
if (this.record_missed_help && (callers()[1][4] == $player))
miss = args[1];
if (!(index = miss in this.missed_help_strings))
this.missed_help_strings = {miss, @this.missed_help_strings};
this.missed_help_counters = {{0, 0}, @this.missed_help_counters};
index = 1;
endif
which = args[2] ? 2 | 1;
this.missed_help_counters[index][which] = this.missed_help_counters[index][which] + 1;
endif
.
#24:16
mhs = this.missed_help_strings;
cnt = this.missed_help_counters;
"save values first, so subsequent changes during suspends wont affect it";
thresh = args ? args[1] | 5;
strs = {};
for i in [1..length(mhs)]
$command_utils:suspend_if_needed(0);
if ((cnt[i][1] + cnt[i][2]) > thresh)
strs = {@strs, ((($string_utils:right(tostr(cnt[i][1]), 5) + " ") + $string_utils:right(tostr(cnt[i][2]), 5)) + " ") + mhs[i]};
endif
endfor
sorted = $list_utils:sort_suspended(0, strs);
len = length(sorted);
player:tell(" miss ambig word");
for x in [1..len]
$command_utils:suspend_if_needed(0);
player:tell(sorted[(len - x) + 1]);
endfor
player:tell(" - - - - - - - - -");
.
#24:17
if (caller_perms().wizard)
pass(@args);
`delete_property(this, "guest_feature_restricted") ! ANY';
this.boot_exceptions = {};
this.programmer_restricted = {};
this.programmer_restricted_temp = {};
this.chparent_restricted = {};
this.rename_restricted = {};
this.change_password_restricted = {};
this.record_missed_help = 0;
this.missed_help_counters = this.missed_help_strings = {};
this.suicide_string = "You don't *really* want to commit suicide, do you?";
this.wizards = {#2};
this.next_perm_index = 1;
this.system_chars = {$hacker, $no_one, $housekeeper};
this.expiration_progress = $nothing;
this.expiration_recipient = {#2};
endif
.
#24:18
":show_netwho_listing(tell,player_list)";
" prints a listing of the indicated players showing connect sites.";
{who, unsorted} = args;
if (!caller_perms().wizard)
return E_PERM;
endif
if (!unsorted)
return;
endif
su = $string_utils;
alist = {};
footnotes = {};
nwidth = length("Player name");
for u in (unsorted)
$command_utils:suspend_if_needed(0);
if (u.programmer)
pref = "% ";
footnotes = setadd(footnotes, "prog");
else
pref = "  ";
endif
if (u in connected_players())
lctime = ctime(time() - connected_seconds(u));
where = connection_name(u);
else
lctime = ctime(u.last_connect_time);
where = u.last_connect_place;
endif
name = u.name;
if (length(name) > 15)
name = name[1..13] + "..";
endif
u3 = {tostr(pref, u.name, " (", u, ")"), lctime[5..10] + lctime[20..24]};
nwidth = max(length(u3[1]), nwidth);
where = $string_utils:connection_hostname(where);
if ($login:blacklisted(where))
where = "(*) " + where;
footnotes = setadd(footnotes, "black");
elseif ($login:graylisted(where))
where = "(+) " + where;
footnotes = setadd(footnotes, "gray");
endif
alist = {@alist, {@u3, where}};
endfor
alist = $list_utils:sort_alist_suspended(0, alist, 3);
$command_utils:suspend_if_needed(0);
headers = {"Player name", "Last Login", "From Where"};
before = {0, nwidth + 3, (nwidth + length(ctime(0))) - 11};
tell1 = "  " + headers[1];
tell2 = "  " + su:space(headers[1], "-");
for j in [2..3]
tell1 = su:left(tell1, before[j]) + headers[j];
tell2 = su:left(tell2, before[j]) + su:space(headers[j], "-");
endfor
who:notify(tell1);
who:notify(tell2);
for a in (alist)
$command_utils:suspend_if_needed(0);
tell1 = a[1];
for j in [2..3]
tell1 = su:left(tell1, before[j]) + a[j];
endfor
who:notify(tell1[1..min($, 79)]);
endfor
if (footnotes)
who:notify("");
if ("prog" in footnotes)
who:notify(" %  == programmer.");
endif
if ("black" in footnotes)
who:notify("(*) == blacklisted site.");
endif
if ("gray" in footnotes)
who:notify("(+) == graylisted site.");
endif
endif
.
#24:19
":show_netwho_from_listing(tell,site)";
"@net-who from hoststring prints all players who have connected from that host or host substring.  Substring can include *'s, e.g. @net-who from *.foo.edu.";
if (!caller_perms().wizard)
return E_PERM;
endif
{tellwho, where} = args;
su = $string_utils;
if (!index(where, "*"))
"Oh good... search for users from a site... the fast way.  No wild cards.";
nl = 0;
bozos = {};
sites = $site_db:find_all_keys(where);
while (sites)
s = sites;
sites = {};
for domain in (s)
"Temporary kluge until $site_db is repaired. --Nosredna";
for b in ($site_db:find_exact(domain) || {})
$command_utils:suspend_if_needed(0, "..netwho..");
if (typeof(b) == STR)
sites = setadd(sites, (b + ".") + domain);
else
bozos = setadd(bozos, b);
nl = max(length(tostr(b, (valid(b) && is_player(b)) ? b.name | "*** recreated ***")), nl);
endif
endfor
endfor
endwhile
if (bozos)
tellwho:notify(tostr(su:left("  Player", nl + 7), "From"));
tellwho:notify(tostr(su:left("  ------", nl + 7), "----"));
for who in (bozos)
st = su:left(tostr((valid(who) && is_player(who)) ? (who.programmer ? "% " | "  ") + who.name | "", " (", who, ")"), nl + 7);
comma = 0;
if ($object_utils:isa(who, $player) && is_player(who))
for p in ({$wiz_utils:get_email_address(who) || "*Unregistered*", @who.all_connect_places})
if (comma && (length(p) >= (78 - length(st))))
tellwho:notify(tostr(st, ","));
st = su:space(nl + 7) + p;
else
st = tostr(st, comma ? ", " | "", p);
endif
comma = 1;
$command_utils:suspend_if_needed(0);
endfor
else
st = st + (valid(who) ? "*** recreated ***" | "*** recycled ***");
endif
tellwho:notify(st);
endfor
tellwho:notify("");
tellwho:notify(tostr(length(bozos), " player", (length(bozos) == 1) ? "" | "s", " found."));
else
tellwho:notify(tostr("No sites matching `", where, "'"));
endif
else
"User typed 'from'.  Go search for users from this site.  (SLOW!)";
howmany = 0;
for who in (players())
$command_utils:suspend_if_needed(0);
matches = {};
for name in (who.all_connect_places)
if ((index(where, "*") && su:match_string(name, where)) || ((!index(where, "*")) && index(name, where)))
matches = {@matches, name};
endif
endfor
if (matches)
howmany = howmany + 1;
tellwho:notify(tostr(who.name, " (", who, "): ", su:english_list(matches)));
endif
endfor
tellwho:notify(tostr(howmany || "No", " matches found."));
endif
.
#24:20
":check_player_request(name [,email [,connection]])";
" check if the request for player and email address is valid;";
" return empty string if it valid, or else a string saying why not.";
" The result starts with - if this is a 'send email, don't try again' situation.";
":check_reregistration(who, email, connection)";
"  Since name is ignored, only check the 'email' parts and use the first arg";
"  for the re-registering player.";
if (!caller_perms().wizard)
return E_PERM;
"accesses registration information -- wiz only";
endif
name = args[1];
if (verb == "check_reregistration")
"don't check player name";
elseif (!name)
return "A blank name isn't allowed.";
elseif (name == "<>")
return "Names with angle brackets aren't allowed.";
elseif (index(name, " "))
return "Names with spaces are not allowed. Use dashes or underscores.";
elseif (match(name, "^<.*>$"))
return tostr("Try using ", name[2..$ - 1], " instead of ", name, ".");
elseif ($player_db.frozen)
return "New players cannot be created at the moment, try again later.";
elseif (!$player_db:available(name))
return ("The name '" + name) + "' is not available.";
elseif ($login:_match_player(name) != $failed_match)
return ("The name '" + name) + "' doesn't seem to be available.";
endif
if (length(args) == 1)
"no email address supplied.";
return "";
endif
address = args[2];
addrargs = (verb == "check_reregistration") ? {name} | {};
if ($registration_db:suspicious_address(address, @addrargs))
return "-There has already been a character with that or a similar email address.";
endif
if (reason = $network:invalid_email_address(address))
return reason + ".";
endif
parsed = $network:parse_address(address);
if ($registration_db:suspicious_userid(parsed[1]))
return tostr("-Automatic registration from an account named ", parsed[1], " is not allowed.");
endif
connection = (length(args) > 2) ? args[3] | parsed[2];
check_connection = $wiz_utils.registration_domain_restricted && (verb == "check_player_request");
if ((connection[max($ - 2, 1)..$] == ".uk") && (parsed[2][1..3] == "uk."))
return tostr("Addresses must be in internet form. Try ", parsed[1], "@", $string_utils:from_list($list_utils:reverse($string_utils:explode(parsed[2], ".")), "."), ".");
elseif (check_connection && match(connection, "^[0-9.]+$"))
"Allow reregistration from various things we wouldn't allow registration from.  Let them register to their yahoo acct...";
return "-The system cannot resolve the name of the system you're connected from.";
elseif (check_connection && ((a = $network:local_domain(connection)) != (b = $network:local_domain(parsed[2]))))
return tostr("-The connection is from '", a, "' but the mail address is '", b, "'; these don't seem to be the same place.");
elseif ((verb == "check_player_request") && $login:spooflisted(parsed[2]))
return tostr("-Automatic registration is not allowed from ", parsed[2], ".");
endif
return "";
.
#24:21
"create a player named NAME with email address ADDRESS; return {object, password}.  Optional third arg is comment to be put in registration db.";
"assumes $wiz_utils:check_player_request() has been called and it passes.";
if (!caller_perms().wizard)
return E_PERM;
endif
{name, address, @rest} = args;
new = $quota_utils:bi_create($player_class, $nothing);
new.name = name;
new.aliases = {name};
new.password = crypt(password = $wiz_utils:random_password(5));
new.last_password_time = time();
new.last_connect_time = $maxint;
"Last disconnect time is creation time, until they login.";
new.last_disconnect_time = time();
$quota_utils:initialize_quota(new);
if (!(error = $wiz_utils:set_player(new)))
return player:tell("An error, ", error, " occurred while trying to make ", new, " a player. The database is probably inconsistent.");
endif
$wiz_utils:set_email_address(new, address);
$registration_db:add(new, address, @rest);
move(new, $player_start);
new.programmer = $player_class.programmer;
return {new, password};
.
#24:22
":send_new_player_mail(preface, name, address, character#, password)";
"  used by $wiz:@make-player and $guest:@request";
if (!caller_perms().wizard)
return E_PERM;
endif
{preface, name, address, new, password} = args;
msg = {preface};
msg = {@msg, tostr("A character has been created, with name \"", name, "\" and password \"", password, "\"."), "Passwords are case sensitive, which means you have to type it exactly as", "it appears here, including capital and lowercase letters.", "So, to log in, you would type:", tostr("  Connect ", name, " ", password)};
if ($object_utils:has_property($local, "new_player_message"))
msg = {@msg, @$local.new_player_message};
endif
return $network:sendmail(address, (("Your " + $network.moo_name) + " character, ") + name, "Reply-to: " + $login.registration_address, @msg);
.
#24:23
"do_maker_player(name,email,[comment])";
"Common code for @make-player";
"If no password is given, generates a random password for the player.";
"Email-address is stored in $registration_db and on the player object.";
if (!caller_perms().wizard)
return E_PERM;
endif
{name, email, @comments} = args;
comments = $string_utils:from_list(comments, " ");
reason = $wiz_utils:check_player_request(name, email);
if (others = $registration_db:find_exact(email))
player:notify(email + " is the registered address of the following characters:");
for x in (others)
player:notify(tostr(valid(x[1]) ? x[1].name | "<recycled>", (valid(x[1]) && (!is_player(x[1]))) ? " {nonplayer}" | "", " (", x[1], ") ", (length(x) > 1) ? ("[" + tostr(@x[2..$])) + "]" | ""));
endfor
if (!reason)
reason = "Already registered.";
endif
endif
if (reason)
player:notify(reason);
if (!$command_utils:yes_or_no("Create character anyway? "))
player:notify("Character not created.");
return;
endif
endif
new = $wiz_utils:make_player(name, email, comments);
player:notify(tostr(name, " (", new[1], ") created with password `", new[2], "' for ", email, comments ? (" [" + comments) + "]" | ""));
$mail_agent:send_message(player, $new_player_log, tostr(name, " (", new[1], ")"), tostr(email, comments ? " " + comments | ""));
if ($network.active)
if ($command_utils:yes_or_no(("Send email to " + email) + " with password? "))
player:notify(tostr("Sending the password to ", email, "."));
if ((result = $wiz_utils:send_new_player_mail(tostr("From ", player.name, "@", $network.moo_name, ":"), name, email, new[1], new[2])) == 0)
player:notify(tostr("Mail sent successfully to ", email, "."));
else
player:tell("Cannot send mail: ", result);
endif
else
player:notify("No mail sent.");
endif
else
player:notify("Sorry, the network isn't active.");
endif
.
#24:24
"do_register(name, email_address [,comments])";
"change player's email address.";
if (!caller_perms().wizard)
return E_PERM;
endif
{whostr, email, @comments} = args;
comments = $string_utils:from_list(comments);
who = $string_utils:match_player(whostr);
if ($command_utils:player_match_failed(who, whostr))
return;
endif
if (((whostr != who.name) && (!(whostr in who.aliases))) && (whostr != tostr(who)))
player:notify(tostr("Must be a full name or an object number:  ", who.name, "(", who, ")"));
return;
endif
if (reason = $network:invalid_email_address(email))
player:notify(reason);
if (!$command_utils:yes_or_no("Register anyway?"))
return player:notify("re-registration aborted.");
endif
endif
if (comments)
$registration_db:add(who, email, comments);
else
$registration_db:add(who, email);
endif
old = $wiz_utils:get_email_address(who);
$wiz_utils:set_email_address(who, email);
player:notify(tostr(who.name, " (", who, ") formerly ", old ? old | "unregistered", ", registered at ", email, ".", comments ? (" [" + comments) + "]" | ""));
.
#24:25
"do_new_password(who, [password])";
if (!caller_perms().wizard)
return E_PERM;
endif
{who, ?password = $wiz_utils:random_password(6)} = args;
if (!password)
password = $wiz_utils:random_password(6);
endif
whostr = $string_utils:nn(who);
player:notify(tostr("About to change password for ", whostr, ". Old encrypted password is \"", who.password, "\""));
who.password = crypt(password);
who.last_password_time = time();
player:notify(tostr(whostr, " new password is `", password, "'."));
if (!$wiz_utils:get_email_address(who))
player:notify(tostr(whostr, " doesn't have a registered email_address, cannot mail password; tell them some some other way."));
elseif ((who.last_connect_time == $maxint) && $command_utils:yes_or_no(tostr(who.name, " has never logged in.  Send mail with the password as though this were a new player request?")))
if ((result = $wiz_utils:send_new_player_mail(tostr("From ", player.name, "@", $network.moo_name, ":"), who.name, $wiz_utils:get_email_address(who), who, password)) == 0)
player:tell("Mail sent.");
else
player:tell("Trouble sending mail: ", result);
endif
elseif ($command_utils:yes_or_no(tostr("Email new password to ", whostr, "?")))
player:notify("Sending the password via email.");
$network:adjust_postmaster_for_password("enter");
if ((result = $network:sendmail($wiz_utils:get_email_address(who), ("Your " + $network.moo_name) + " password", ("The password for your " + $network.moo_name) + " character:", " " + whostr, "has been changed. The new password is:", " " + password, "", "Please note that passwords are case sensitive.")) == 0)
player:tell("Mail sent.");
else
player:tell("Trouble sending mail: ", result);
endif
$network:adjust_postmaster_for_password("exit");
else
player:tell("No mail sent.");
endif
.
#24:26
":set_owner(object,newowner[,suspendok])  does object.owner=newowner, taking care of c properties as well.  This should be used anyplace one is contemplating doing object.owner=newowner, since the latter leaves ownership of c properties unchanged.  (--Rog thinks this is a server bug).";
{object, newowner, ?suspendok = 0} = args;
if (!valid(object))
return E_INVIND;
elseif (!caller_perms().wizard)
return E_PERM;
elseif (!(valid(newowner) && is_player(newowner)))
return E_INVARG;
endif
oldowner = object.owner;
object.owner = newowner;
for pname in ($object_utils:all_properties(object))
if (suspendok && ((ticks_left() < 5000) || (seconds_left() < 2)))
suspend(0);
endif
perms = property_info(object, pname)[2];
if (index(perms, "c"))
set_property_info(object, pname, {newowner, perms});
endif
endfor
if ($object_utils:isa(oldowner, $player))
if (is_player(oldowner) && (object != oldowner))
$quota_utils:reimburse_quota(oldowner, object);
endif
if (typeof(oldowner.owned_objects) == LIST)
oldowner.owned_objects = setremove(oldowner.owned_objects, object);
endif
endif
if ($object_utils:isa(newowner, $player))
if (object != newowner)
$quota_utils:charge_quota(newowner, object);
endif
if (typeof(newowner.owned_objects) == LIST)
newowner.owned_objects = setadd(newowner.owned_objects, object);
endif
endif
return 1;
.
#24:27
if (!caller_perms().wizard)
return E_PERM;
endif
"------- constants ---- ";
"20 minutes idle for regular players";
mintime = 60 * 20;
"10 minutes for guests";
minguest = 60 * 10;
"wait 3 minutes before actually booting";
bootdelay = 3;
"start booting when there are 20 less than max players";
threshold = 20;
" ----------------------";
if ($code_utils:task_valid(this.boot_task) && (task_id() != this.boot_task))
"starting a new one: kill the old one";
kill_task(this.boot_task);
this.boot_task = 0;
endif
fork taskn ((bootdelay * 60) * 3)
maxplayers = $login:max_connections() - threshold;
if (length(pl = connected_players()) > maxplayers)
pll = {};
plt = {};
for x in (pl)
suspend(0);
min = $object_utils:isa(x, $guest) ? minguest | mintime;
if ((((idle = `idle_seconds(x) ! ANY => 0') > min) && (!x.wizard)) && (!(x in this.boot_exceptions)))
pll = {x, @pll};
plt = {idle, @plt};
endif
endfor
if (pll)
"Sort by idle time, and choose person who has been idle longest.";
pll = $list_utils:sort(pll, plt);
booted = pll[$];
guest = $object_utils:isa(booted, $guest);
min = guest ? minguest | mintime;
if (`idle_seconds(booted) ! ANY => 0' > min)
notify(booted, tostr("*** You've been idle more than ", min / 60, " minutes, and there are more than ", maxplayers, " players connected. If you're still idle and LambdaMOO is still busy in ", bootdelay, " minute", (bootdelay == 1) ? "" | "s", ", you will be booted. ***"));
fork (60 * bootdelay)
idle = `idle_seconds(booted) ! ANY => 0';
if ((idle > min) && (length(connected_players()) > ($login:max_connections() - threshold)))
notify(booted, "*** You've been idle too long and LambdaMOO is still too busy ***");
server_log(tostr("IDLE: ", booted.name, " (", booted, ") idle ", idle / 60));
boot_player(booted);
endif
endfork
endif
endif
endif
this:(verb)(@args);
endfork
this.boot_task = taskn;
"This is set up so that it forks the task first, and this.boot_task is the task_id of whatever is running the idle booter";
.
#24:28
":grant_object(what, towhom);";
"Ownership of the object changes as in @chown and :set_owner (i.e., .owner and all c properties change).  In addition all verbs and !c properties owned by the original owner change ownership as well.  Finally, for !c properties, instances on descendant objects change ownership (as in :set_property_owner).";
if (!caller_perms().wizard)
return E_PERM;
endif
{object, newowner} = args;
if (!is_player(newowner))
return E_INVARG;
endif
same = object.owner == newowner;
for vnum in [1..length(verbs(object))]
info = verb_info(object, vnum);
if (!((info[1] != object.owner) && (valid(info[1]) && is_player(info[1]))))
same = same && (info[1] == newowner);
set_verb_info(object, vnum, listset(info, newowner, 1));
endif
endfor
for prop in (properties(object))
$command_utils:suspend_if_needed(0);
info = property_info(object, prop);
if (!(index(info[2], "c") || (((info[1] != object.owner) && valid(info[1])) && is_player(info[1]))))
same = same && (info[1] == newowner);
$wiz_utils:set_property_owner(object, prop, newowner, 1);
endif
endfor
suspend(0);
$wiz_utils:set_owner(object, newowner, 1);
return same ? "nothing changed" | "grant changed";
.
#24:29
"connection_hash(forwhom, host [,seed])";
"Compute an encrypted hash of the host for 'forwhom', using 'crypt'.";
{forwhom, host, @seed} = args;
hash = toint(forwhom);
for i in [1..length(host)]
hash = (hash * 14) + index($string_utils.ascii, host[i]);
endfor
return crypt(tostr(hash), @seed);
.
#24:30
":newt_player(who [ , commentary] [, temporary])";
{who, ?comment = "", ?temporary = 0} = args;
if (!caller_perms().wizard)
$error:raise(E_PERM);
elseif (length(args) < 1)
$error:raise(E_ARGS);
elseif ((typeof(who = args[1]) != OBJ) || (!is_player(who)))
$error:raise(E_INVARG);
else
if (!comment)
player:notify("So why has this player been newted?");
comment = $command_utils:read();
endif
if (temporary)
comment = temporary + comment;
endif
$login.newted = setadd($login.newted, who);
if (msg = player:newt_victim_msg())
notify(who, msg);
endif
notify(who, $login:newt_registration_string());
boot_player(who);
player:notify(tostr(who.name, " (", who, ") has been turned into a newt."));
$mail_agent:send_message(player, $newt_log, tostr("@newt ", who.name, " (", who, ")"), {$string_utils:from_list(who.all_connect_places, " "), @comment ? {comment} | {}});
if ($object_utils:isa(who.location, $room) && (msg = player:newt_msg()))
who.location:announce_all_but({who}, msg);
endif
player:notify(tostr("Mail sent to ", $mail_agent:name($newt_log), "."));
endif
.
#24:31
":unset_programmer(victim[,reason[,start time,duration]]) => 1 or error.";
"Resets victim.programmer, adds victim to .programmer_restricted.";
"Put into temporary list if 3rd and 4th arguments are given. Which restricts the victim for uptime duration since start time. Must give a reason, though it can be blank, in this case.";
{victim, ?reason = "", ?start = 0, ?duration = 0} = args;
if (!caller_perms().wizard)
return E_PERM;
elseif (!valid(victim))
return E_INVARG;
elseif ((!victim.programmer) && this:check_prog_restricted(victim))
return E_NONE;
else
victim.programmer = 0;
if (is_player(victim) && $object_utils:isa(victim, $player))
this.programmer_restricted = setadd(this.programmer_restricted, victim);
if (start)
this.programmer_restricted_temp = setadd(this.programmer_restricted_temp, {victim, start, duration});
endif
endif
$mail_agent:send_message(caller_perms(), {$newt_log}, tostr("@deprogrammer ", victim.name, " (", victim, ")"), reason ? (typeof(reason) == STR) ? {reason} | reason | {});
return 1;
endif
.
#24:32
":is_wizard(who) => whether `who' is a wizard or is the .public_identity of some wizard.";
"This verb is used for permission checks on commands that should only be accessible to wizards or their ordinary-player counterparts.  It will return true for unadvertised wizards.";
who = args[1];
if (who.wizard)
return 1;
else
for w in ($object_utils:leaves($wiz))
if ((w.wizard && is_player(w)) && (who == `w.public_identity ! ANY'))
return 1;
endif
endfor
endif
return 0;
.
#24:33
if (!caller_perms().wizard)
return E_PERM;
endif
this:expire_mail_lists();
this:expire_mail_players();
.
#24:34
if (!caller_perms().wizard)
return E_PERM;
endif
fork (((7 * 24) * 60) * 60)
this:(verb)();
endfork
this:expire_mail();
.
#24:35
"Checks to see if args[1] is restricted from programmer either permanently or temporarily. Removes from temporary list if time is up";
if ((caller != this) && (!$perm_utils:controls(caller_perms(), this)))
return E_PERM;
endif
if ((who = args[1]) in this.programmer_restricted)
"okay, who is restricted. Now check to see if it is temporary";
if (entry = $list_utils:assoc(who, this.programmer_restricted_temp))
if ($login:uptime_since(entry[2]) > entry[3])
"It's temporary and the time is up, remove and return false";
this.programmer_restricted_temp = setremove(this.programmer_restricted_temp, entry);
this.programmer_restricted = setremove(this.programmer_restricted, who);
return 0;
else
"time is not up";
return 1;
endif
else
return 1;
endif
else
return 0;
endif
.
#24:36
if (!caller_perms().wizard)
return E_PERM;
endif
s = 0;
for p in (players())
this.expiration_progress = p;
if ((p.owner == p) && is_player(p))
s = s + (p:expire_old_messages() || 0);
endif
if (ticks_left() < 10000)
set_task_perms($wiz_utils:random_wizard());
suspend(0);
endif
endfor
$mail_agent:send_message(player, this.expiration_recipient, verb, tostr(s, " messages have been expired from players."));
return s;
.
#24:37
if (!caller_perms().wizard)
return E_PERM;
endif
sum = 0;
for x in ($object_utils:leaves_suspended($mail_recipient))
this.expiration_progress = x;
temp = x:expire_old_messages();
if (typeof(temp) == INT)
sum = sum + temp;
endif
"just suspend for every fucker, I'm tired of losing.";
set_task_perms($wiz_utils:random_wizard());
suspend(0);
endfor
$mail_agent:send_message(player, this.expiration_recipient, verb, tostr(sum, " messages have been expired from mailing lists."));
return sum;
.
#24:38
if (!caller_perms().wizard)
return E_PERM;
else
fork (86400 * 7)
this:(verb)();
endfork
player:tell("Flushing ancient editor sessions.");
for x in ({$verb_editor, $note_editor, $mail_editor})
x:do_flush(time() - (30 * 86400), 0);
$command_utils:suspend_if_needed(0);
endfor
endif
.
#24:39
"Put all your wizards in $wiz_utils.wizards.  Then various long-running tasks will cycle among the permissions, spreading out the scheduler-induced personal lag.";
w = this.wizards;
i = this.next_perm_index;
if (i >= length(w))
i = 1;
else
i = i + 1;
endif
this.next_perm_index = i;
return w[i];
.
#24:40
set_task_perms(caller_perms());
{who, email} = args;
if (typeof(who.email_address) == LIST)
who.email_address[1] = email;
else
who.email_address = email;
endif
.
#24:41
set_task_perms(caller_perms());
{who} = args;
if (typeof(who.email_address) == LIST)
return who.email_address[1];
else
return who.email_address;
endif
.
#25:0
return ((caller == this) || caller_perms().wizard) ? pass(@args) | E_PERM;
.
#25:1
":add(player,site)";
if (!caller_perms().wizard)
return E_PERM;
endif
{who, domain} = args;
if (this:domain_literal(domain))
"... just enter it...";
l = this:find_exact(domain);
if (l == $failed_match)
this:insert(domain, {who});
elseif (!(who in l))
this:insert(domain, setadd(l, who));
endif
else
"...an actual domain name; add player to list for that domain...";
"...then add domain itself to list for the next larger domain; repeat...";
"...  Example:  domain == foo.bar.edu:  ";
"...            enter #who  on foo.bar.edu list";
"...            enter `foo' on bar.edu list";
"...            enter `bar' on edu list";
if (!(dot = index(domain, ".")))
dot = length(domain) + 1;
domain = tostr(domain, ".", this.domain);
endif
prev = who;
while ($failed_match == (l = this:find_exact(domain)))
this:insert(domain, {prev});
if (dot)
prev = domain[1..dot - 1];
domain = domain[dot + 1..$];
else
return;
endif
dot = index(domain, ".");
endwhile
if (!(prev in l))
this:insert(domain, {@l, prev});
endif
return;
endif
.
#25:2
":load([start]) -- reloads site_db with the connection places of all players.";
"This routine calls suspend() if it runs out of time.";
"WIZARDLY";
"...needs to be able to read .all_connect_places";
if (!$perm_utils:controls(caller_perms(), this))
return E_PERM;
endif
plist = players();
if (!args)
this:clearall();
elseif (i = args[1] in plist)
plist[1..i - 1] = {};
else
return E_INVARG;
endif
for p in (plist)
if (valid(p) && (is_player(p) && (!$object_utils:isa(p, $guest))))
"... player may be recycled or toaded during the suspend(),...";
"... guests login from everywhere...";
for c in (p.all_connect_places)
this:add(p, c);
if ($command_utils:running_out_of_time())
player:tell("...", p);
suspend(0);
endif
endfor
endif
endfor
.
#25:3
":domain_literal(string)";
" => true iff string is a domain literal (i.e., numeric IP address).";
if (10 <= (len = length(hnum = strsub(args[1], ".", ""))))
return toint(hnum[1..9]) && toint(hnum[6..len]);
else
return toint(hnum);
endif
"SLEAZY CODE ALERT";
"... what I wanted to do was return toint(strsub(args[1],\".\",\"\"))";
"... but on a 32-bit machine, this has a 1 in 4294967296 chance of failing";
"... (e.g., on \"42.94.967.296\", though I'll grant this particular example";
"...  entails some very strange subnetting on net 42, to say the least).";
"... So we do something that is guaranteed to work so long as internet";
"... addresses stay under 32 bits --- a while yet...";
"";
"... As soon as we're sure match() is working, this will become a one-liner:";
return match(args[1], "[0-9]+%.[0-9]+%.[0-9]+%.[0-9]+");
.
#25:4
if (caller_perms().wizard)
pass(@args);
this:clearall();
this.domain = "localdomain";
this:prune_reset();
endif
.
#25:5
"Carefully loop through the db and delete items associated with !valid and !is_player objects.  If that results in no objects remaining for a site, delete that site.";
"Attempt to keep memory usage down by only asking for a small number of items at a time.  Should probably have some arguments to control this.";
"Another thing it should do is be clever about string typed items.  (What did I mean by this?)";
"New feature: If the site name contains `dialup', then, if none of the users who have connected from there still have it in their .all_connect_places, then consider it trashable.  Maybe this will get some space savings.";
"To run: call $site_db:prune_reset() then $site_db:prune_alpha().";
"or $site_db:prune_alpha(1) for verbose output";
verbose = args && args[1];
if (!caller_perms().wizard)
raise(E_PERM);
endif
this.prune_task = task_id();
probe = this.prune_progress;
while ((probe <= this.prune_stop) && (length(probe) == length(this.prune_stop)))
for sitename in (z = this:find_all_keys(probe))
items = this:find_exact(sitename);
orig = items;
dialup = index(sitename, "dialup");
"Don't keep around dialups.";
for y in (items)
if ((typeof(y) == OBJ) && (((!valid(y)) || (!is_player(y))) || (dialup && (!(sitename in y.all_connect_places)))))
verbose && player:tell("removing ", $string_utils:nn(y), " from ", sitename);
items = setremove(items, y);
endif
$command_utils:suspend_if_needed(0);
endfor
useless = 1;
"If no player has this site in eir .all_connect_places, nuke it anyway.";
for y in (items)
if ((typeof(y) != OBJ) || (sitename in y.all_connect_places))
useless = 0;
break;
"unfortunately this can get kinna O(n^2).";
endif
$command_utils:suspend_if_needed(0);
endfor
if (useless)
verbose && player:tell(sitename, " declared useless and nuked");
items = {};
endif
if (!items)
this:delete(sitename);
this.total_pruned_sites = this.total_pruned_sites + 1;
elseif (items == orig)
else
this:insert(sitename, items);
this.total_pruned_people = (this.total_pruned_people + length(orig)) - length(items);
endif
$command_utils:suspend_if_needed(0);
if (probe >= this.prune_stop)
return player:tell("Prune stopped at ", toliteral(this.prune_progress));
endif
endfor
probe = $string_utils:incr_alpha(probe, this.alphabet);
this.prune_progress = probe;
if ($command_utils:running_out_of_time())
set_task_perms($wiz_utils:random_wizard());
suspend(0);
endif
endwhile
player:tell("Prune stopped at ", toliteral(this.prune_progress));
.
#25:6
player:tell("Prune is up to ", toliteral(this.prune_progress), ".");
mine = 0;
if (typeof(this.prune_progress) == STR)
alphalen = length(this.alphabet);
total = (alphalen * alphalen) * alphalen;
for x in [1..3]
mine = ((mine * alphalen) + index(this.alphabet, this.prune_progress[x])) - 1;
endfor
else
total = 256 * 256;
mine = (this.prune_progress[1] * 256) + this.prune_progress[2];
endif
percent = (100.0 * tofloat(mine)) / tofloat(total);
player:tell("We have processed ", mine, " entries out of ", total, ", or ", toint(percent), ".", toint(10.0 * percent) % 10, "%.");
player:tell("There were ", this.total_pruned_people, " individual list entries removed, and ", this.total_pruned_sites, " whole sites removed.");
if ($code_utils:task_valid(this.prune_task))
player:tell("Prune task is ", this.prune_task, ".  Stacktrace:");
for x in (task_stack(this.prune_task, 1))
if (valid(x[4]))
player:tell(x[4], ":", x[2], " [", x[1], "]  ", x[3].name, "  (", x[6], ")");
endif
endfor
else
player:tell("The recorded task_id is no longer valid.");
endif
.
#25:7
if (!caller_perms().wizard)
raise(E_PERM);
endif
if (!args)
for x in ({"com", "edu", "us", "au", "net", "za", "uk", "at", "ca", "org", "il", "mil", "no", "gov", "se", "fi", "it", "be", "jp", "de", "pt", "sg", "ie", "br", "nl", "gr", "ch", "pl", "nz", "<none>", "<bad>", "ee", "dk", "fr", "si", "cz", "th", "tw", "hk", "su", "es", "kr", "hr", "is", "mx", "my", "ro", "kw", "cl", "ph", "cr", "tr", "in", "eg", "ec", "lv", "ve", "sk", "ar", "co", "pe", "hu", "jm", "ni", "ru", "id", "bm", "mt", "cn", "bg", "pk", "uy", "yu", "ae", "zw", "gi", "sm", "nu"})
this:prune_fixup(x);
endfor
return;
endif
root = args[1];
items = this:find_exact(root);
orig = items;
if (items == #-3)
return 1;
endif
$site_db.prune_progress = root;
$site_db.prune_task = task_id();
for item in (items)
if (typeof(item) == STR)
if (this:prune_fixup((item + ".") + root))
items = setremove(items, item);
endif
endif
if ($command_utils:running_out_of_time())
set_task_perms($wiz_utils:random_wizard());
suspend(0);
endif
endfor
if (!items)
this:delete(root);
this.total_pruned_sites = this.total_pruned_sites + 1;
return 1;
elseif (orig == items)
else
this:insert(root, items);
endif
.
#25:8
"Carefully loop through the db and delete items associated with !valid and !is_player objects.  If that results in no objects remaining for a site, delete that site.";
"Attempt to keep memory usage down by only asking for a small number of items at a time.  Should probably have some arguments to control this.";
"Another thing it should do is be clever about string typed items.";
"Rewriting this to do numerics now.";
if (!caller_perms().wizard)
raise(E_PERM);
endif
this.prune_task = task_id();
probe = this.prune_progress;
while (probe[1] <= this.prune_stop)
probestring = tostr(probe[1], ".", probe[2], ".");
for sitename in (z = this:find_all_keys(probestring))
items = this:find_exact(sitename);
orig = items;
for y in (items)
if ((typeof(y) == OBJ) && ((!valid(y)) || (!is_player(y))))
items = setremove(items, y);
endif
$command_utils:suspend_if_needed(0);
endfor
if (!items)
this:delete(sitename);
this.total_pruned_sites = this.total_pruned_sites + 1;
elseif (items == orig)
else
this:insert(sitename, items);
this.total_pruned_people = (this.total_pruned_people + length(orig)) - length(items);
endif
$command_utils:suspend_if_needed(0);
endfor
if (probe[2] == 255)
probe[1] = probe[1] + 1;
probe[2] = 0;
else
probe[2] = probe[2] + 1;
endif
this.prune_progress = probe;
if ($command_utils:running_out_of_time())
set_task_perms($wiz_utils:random_wizard());
suspend(0);
endif
endwhile
player:tell("Prune stopped at ", toliteral(this.prune_progress));
.
#25:9
if (!caller_perms().wizard)
return E_PERM;
endif
day = 24 * 3600;
hour_of_day_GMT = 9;
target = (((hour_of_day_GMT * 60) * 60) + day) - (time() % day);
if (target > 86400)
target = target - 86400;
endif
fork (target)
"Stop at 2am before checkpoint.";
if ($code_utils:task_valid(this.prune_task))
$site_db.prune_stop = "aaa";
"Restart after 3am.  Er, 4am.";
suspend(7500);
this:schedule_prune();
$site_db.prune_stop = "zzz";
"Just in case it didn't actually stop...";
if (!$code_utils:task_valid(this.prune_task))
$site_db:prune_alpha();
endif
endif
endfork
.
#25:10
if (!caller_perms().wizard)
raise(E_PERM);
endif
this:report_prune_progress();
player:tell("Resetting...");
this.total_pruned_sites = 0;
this.total_pruned_people = 0;
this.prune_progress = "aaa";
this.prune_stop = "zzz";
`kill_task(this.prune_task) ! ANY';
.
#26:0
"xsin(INT x) -- calculates the taylor approximation for the sine function";
if (typeof(x = args[1]) != INT)
return E_TYPE;
endif
if ((x * x) > this.taylor)
return ((this:xsin(x / 2) * this:xcos((x + 1) / 2)) + (this:xsin((x + 1) / 2) * this:xcos(x / 2))) / 10000;
else
return (x * (17453000 - ((x * x) * 886))) / 100000;
endif
.
#26:1
"xcos(INT x) -- calculates the taylor approximation for the cosine function";
if (typeof(x = args[1]) != INT)
return E_TYPE;
endif
if ((x * x) > this.taylor)
return ((this:xcos(x / 2) * this:xcos((x + 1) / 2)) - (this:xsin(x / 2) * this:xsin((x + 1) / 2))) / 10000;
else
return (1000000000 - ((x * x) * (152309 + ((4 * x) * x)))) / 100000;
endif
.
#26:2
"factorial(INT n) -- returns n factorial for 0 <= n (<= 12).";
if ((number = args[1]) < 0)
return E_INVARG;
elseif (typeof(number) != INT)
return E_TYPE;
endif
fact = 1;
for i in [2..number]
fact = fact * i;
endfor
return fact;
.
#26:3
"pow(INT|FLOAT x,(INT)|(INT|FLOAT) n) -- returns x raised to the nth power. n must be >= 0. If x is an integer, n must be an integer. If x is a floating point number, n can be either.";
"This verb was revised on 2006-03-16 by Gary (#110811) to allow for floating input of the second argument.  The help documentation had said this was allowed but actually it caused a traceback.  How many people are actually using this, I wonder? ";
{x, n} = args;
"if (n < 0)";
if (((typeof(n) == INT) && (n < 0)) || ((typeof(n) == FLOAT) && (n < 0.0)))
return E_INVARG;
elseif ((typeof(x) == INT) && (typeof(n) == FLOAT))
return E_TYPE;
endif
return x ^ n;
"old code below";
n = args[1];
if (power % 2)
ret = n;
else
ret = 1;
endif
while (power = power / 2)
n = n * n;
if (power % 2)
ret = ret * n;
endif
endwhile
return ret;
.
#26:4
"fibonacci(INT n) -- calculates the fibonacci numbers to the nth term";
"and returns them in a list. n must be >= 0.";
if (typeof(n = args[1]) != INT)
return E_TYPE;
elseif (n < 0)
return E_INVARG;
elseif (n == 0)
return {0};
else
x = {0, 1};
for i in [2..n]
x = {@x, x[$ - 1] + x[$]};
endfor
return x;
endif
.
#26:5
"geometric(INT|FLOAT x [,INT n]) -- calculates the value of the geometric series at x to the nth term. i.e., approximates 1/(1-x) when |x| < 1. This, of course, is impossible in MOO, but someone may find it useful in some way.";
"n defaults to 5. n must be >= 0.";
"This verb was revised on 2006-03-16 by Gary (#110811) to allow for floating point input of the first argument.  The help documentation had said this was allowed but actually it caused a traceback.  How many people are actually using this, I wonder? ";
{n, ?order = 5} = args;
if ((!(typeof(n) in {INT, FLOAT})) || (typeof(order) != INT))
return E_TYPE;
elseif (order <= 0)
return E_INVARG;
endif
x = (typeof(n) == FLOAT) ? 1.0 | 1;
for i in [1..order]
x = x + (n ^ i);
endfor
return x;
.
#26:6
"divmod(INT n, INT d) => {q,r} such that n = dq + r";
"  handles negative numbers correctly   0<=r<d if d>0, -d<r<=0 if d<0.";
{n, d} = args;
if ((typeof(n) != INT) && (typeof(d) != INT))
return E_TYPE;
endif
r = ((n % d) + d) % d;
q = (n - r) / d;
return {q, r};
.
#26:7
"combinations(INT n, INT r) -- returns the number of ways one can choose r";
"objects from n distinct choices.";
"C(n,r) = n!/[r!(n-r)!]";
"  overflow may occur if n>29...";
{n, r} = args;
if ((typeof(n) != INT) && (typeof(r) != INT))
return E_TYPE;
endif
if (0 > (r = min(r, n - r)))
return 0;
else
c = 1;
n = n + 1;
for i in [1..r]
c = (c * (n - i)) / i;
endfor
return c;
endif
.
#26:8
"permutations(INT n, INT r) -- returns the number of ways possible for one to";
"order r distinct objects given n locations.";
"P(n,r) = n!/(n-r)!";
{n, r} = args;
if ((typeof(n) != INT) && (typeof(r) != INT))
return E_TYPE;
endif
if ((r < 1) || ((diff = n - r) < 0))
return 0;
else
p = n;
for i in [diff + 1..n - 1]
p = p * i;
endfor
return p;
endif
.
#26:9
"simpson({a,b},{f(a),f((a+b)/2),f(b)} [,INT ret-float])";
" -- given two endpoints, a and b, and the functions value at a, (a+b)/2, and b, this will calculate a numerical approximation of the integral using simpson's rule.";
"Entries can either be all INT or all FLOAT. Don't mix!";
"If the optional 3rd argument is provided and true, the answer is returned as a floating point regardless of what the input was. Otherwise, if the input was all INT, the answer is returned as {integer,fraction}";
{point, fcn, ?retfloat = 0} = args;
if ((!retfloat) && (typeof(point[1]) == INT))
numer = (point[2] - point[1]) * ((fcn[1] + (4 * fcn[2])) + fcn[3]);
return this:parts(numer, 6);
else
numer = tofloat(point[2] - point[1]) * ((tofloat(fcn[1]) + (4.0 * tofloat(fcn[2]))) + tofloat(fcn[3]));
return numer / 6.0;
endif
.
#26:10
"parts(INT n, INT q [,INT i]) -- returns a decomposition of n by q into integer and floating point parts with i = the number of digits after the decimal.";
"i defaults to 5.";
"warning: it is quite easy to hit maxint which results in unpredictable";
"         results";
{n, q, ?i = 5} = args;
if (((typeof(n) != INT) && (typeof(q) != INT)) && (typeof(i) != INT))
return E_TYPE;
endif
parts = {n / q, n % q};
return {parts[1], (parts[2] * (10 ^ i)) / q};
.
#26:11
"sqrt(INT|FLOAT n) => largest integer <= square root of n. Returns the same type as the input. (Backwards compatibility)";
n = args[1];
return (typeof(n) == INT) ? toint(sqrt(tofloat(n))) | sqrt(n);
"Old code. Newton's method";
if (n < 0)
return E_RANGE;
elseif (n)
x1 = n;
while (x1 > (x2 = (x1 + (n / x1)) / 2))
x1 = x2;
endwhile
return x1;
else
return 0;
endif
.
#26:12
"div(INT n, INT d) => q such that n = dq + r and  (0<=r<d if d>0, -d<r<=0 if d<0).";
return this:divmod(@args)[1];
.
#26:13
"A correct mod function.";
"mod(INT n, INT d) => r such that n = dq + r and (0<=r<d if d>0 or -d<r<=0 if d<0).";
{n, d} = args;
if ((typeof(n) != INT) && (typeof(d) != INT))
return E_TYPE;
endif
return ((n % d) + d) % d;
.
#26:14
"exp(INT|FLOAT x[,INT n]) -- calculates an nth order taylor approximation for e^x.";
"n defaults to 5. Any n given must be >= 0. you need to divide the result";
"the answer will be returned as {integer part,fractional part} if the input x was an integer. If it is floating point, so will the answer (and this uses the builtin function.)";
{x, ?n = 5} = args;
if (typeof(x) == FLOAT)
return exp(x);
elseif ((typeof(x) != INT) && (typeof(n) != INT))
return E_TYPE;
endif
ex = nfact = 1;
for i in [0..n - 1]
j = n - i;
ex = (ex * x) + (nfact = nfact * j);
endfor
return this:parts(ex, nfact);
.
#26:15
"returns 10000 exp (x/10000)";
"The accuracy seems to be ~0.1% for 0<x<4";
x = args[1];
if (x < 0)
z = this:(verb)(-x);
return (100000000 + (z / 2)) / z;
elseif (x > 1000)
z = this:(verb)(x / 2);
if (z > 1073741823)
return $maxint;
"maxint for overflows";
elseif (z > 460000)
z = ((z + 5000) / 10000) * z;
elseif (z > 30000)
z = ((((z + 50) / 100) * z) + 50) / 100;
else
z = ((z * z) + 5000) / 10000;
endif
if (x % 2)
return z + ((z + 5000) / 10000);
else
return z;
endif
else
return ((10000 + x) + (((x * x) + 10000) / 20000)) + ((((x * x) * x) + 300000000) / 600000000);
endif
.
#26:16
"random(INT n): returns a random integer in the following manner:";
"random(n > 0) will return a integer in the range 0 to n";
"random(n < 0) will return a integer in the range n to 0";
if (typeof(prob = args[1]) != INT)
return E_TYPE;
endif
mod = (prob < 0) ? -1 | 1;
return (mod * random(abs(prob + mod))) - mod;
.
#26:17
"random_range(INT range [,INT mean]): returns a random integer within the given range from the mean. if the mean isn't given, it defaults to 0";
"e.g., random_range(10) => -10..10";
"      random_range(10,4) => -6..14";
{range, ?mean = 0} = args;
if ((typeof(range) != INT) && (typeof(mean) != INT))
return E_TYPE;
endif
return mean + (((random(2) == 1) ? -1 | 1) * this:random(range));
.
#26:18
"is_prime(INT number) returns 1 if the number is prime or 0 if it isn't.";
"of course, only positive numbers are candidates for primality.";
if (typeof(number = args[1]) != INT)
return E_TYPE;
endif
if (number == 2)
return 1;
elseif ((number < 2) || ((number % 2) == 0))
return 0;
else
max = toint(ceil(sqrt(tofloat(number))));
choice = 3;
while (choice <= max)
if ((seconds_left() < 2) || (ticks_left() < 25))
suspend(0);
endif
if ((number % choice) == 0)
return 0;
endif
choice = choice + 2;
endwhile
endif
return 1;
.
#26:19
"Only useful for integer input.";
{x, y} = args;
if ((typeof(x) != INT) && (typeof(y) != INT))
return E_TYPE;
endif
table = this.(verb);
if (xsgn = x < 0)
x = x + $minint;
endif
if (ysgn = y < 0)
y = y + $minint;
endif
power = 1;
z = 0;
while (x || y)
z = z + (power * table[1 + (x % 16)][1 + (y % 16)]);
x = x / 16;
y = y / 16;
power = power * 16;
endwhile
if (table[1 + xsgn][1 + ysgn])
return z + $minint;
else
return z;
endif
.
#26:20
return this:NOT(this:AND(this:NOT(args[1]), this:NOT(args[2])));
.
#26:21
return -(1 + args[1]);
"";
"... here's what it used to be ...";
bl1 = this:BLFromInt(args[1]);
blOut = {};
for i in [1..32]
blOut = {@blOut, !bl1[i]};
endfor
return this:IntFromBL(blOut);
.
#26:22
"BlFromInt(INT x) => converts the number provided into a 32 bit binary number, which is returned via a 32 element LIST of 1's and 0's. Note that this verb was originally written to be used with the $math_utils verbs: AND, NOT, OR, XOR, but has since been taken out of them.";
if (typeof(x = args[1]) != INT)
return E_TYPE;
endif
l = {};
firstbit = x < 0;
if (firstbit)
x = x + $minint;
endif
for i in [1..31]
l = {x % 2, @l};
x = x / 2;
endfor
return {firstbit, @l};
.
#26:23
"IntFromBl(LIST of 1's and 0's) => converts the 32 bit binary representation given by the list of 1's and 0's and converts it to a normal decimal number. Note that this verb was originally written to be used with the $math_utils verbs: AND, NOT, OR, XOR, but has since been taken out of them.";
bl = args[1];
x = 0;
for l in (bl)
x = x * 2;
x = x + l;
endfor
return x;
.
#26:24
"gcd(INT num1,INT num2): find the greatest common divisor of the two numbers";
"using the division algorithm. the absolute values of num1 and num2 are";
"used without loss of generality.";
num1 = abs(args[1]);
num2 = abs(args[2]);
max = max(num1, num2);
min = min(num1, num2);
if (r1 = max % min)
while (r2 = min % r1)
min = r1;
r1 = r2;
endwhile
return r1;
else
return min;
endif
.
#26:25
"lcm(INT num1,INT num2): find the least common multiple of the two numbers.";
"we shall use the positive lcm value without loss of generality.";
"since we have gcd already, we'll just use lcm*gcd = num1*num2";
num1 = abs(args[1]);
num2 = abs(args[2]);
return (num1 * num2) / this:gcd(num1, num2);
.
#26:26
"are_rel_prime(INT num1,INT num2): returns 1 if num1 and num2 are relatively";
"prime.";
"since we have gcd, this is pretty easy.";
if (this:gcd(args[1], args[2]) == 1)
return 1;
else
return 0;
endif
.
#26:27
"Synopsis:    :base_conversion(number, current_base, desired_base)";
"---";
"Call with first arg either a number or a string, being the number";
"desired for conversion. capital letters denote values from 10-35;";
"lowercase letters from 36 to 61. Maximal base is 62.";
"You will be unable to use the extra 26 lowercases as separate unless";
"you pass a nonzero fourth argument. Passing zero or none uses the";
"default value, which is to have AAAA=aaaa.";
"The second and third arguments should be the base of the number and";
"the base you want it in, respectively.";
"Any of the arguments can be strings or nums, but high-base numbers";
"will need to be strings. This returns a string.";
"Any problems, talk to Ozymandias.";
sensitive = 0;
if (length(args) < 3)
return E_INVARG;
elseif (length(args) == 4)
sensitive = toint(args[4]);
endif
result = 0;
thenum = tostr(args[1]);
origbase = toint(args[2]);
newbase = toint(args[3]);
if ((((origbase < 2) || (newbase < 2)) || (origbase > 62)) || (newbase > 62))
return E_INVARG;
endif
for which in [1..length(thenum)]
value = index(this.base_alphabet, thenum[which], sensitive);
if ((!value) || (value > origbase))
return E_INVARG;
endif
result = ((result * origbase) + value) - 1;
endfor
thestring = "";
if (result < 0)
return E_INVARG;
endif
while (result)
if ((which = (result % newbase) + 1) <= length(this.base_alphabet))
thestring = this.base_alphabet[which] + thestring;
else
return E_INVARG;
endif
result = result / newbase;
endwhile
return thestring ? thestring | "0";
.
#26:28
":norm(a,b,c,d...) => sqrt(a^2+b^2+c^2+...)";
m = max(max(@args), -min(@args));
logm = length(tostr(m));
if (logm <= 4)
s = 0;
for a in (args)
s = s + (a * a);
endfor
return toint(sqrt(tofloat(s)));
else
factor = toint("1" + "0000000"[1..logm - 4]);
s = 0;
for a in (args)
a = a / factor;
s = s + (a * a);
endfor
return toint(sqrt(tofloat(s))) * factor;
endif
.
#26:29
"Copied from Trig_Utils (#25800):sin by Obvious (#54879) Fri Nov 17 06:07:39 1995 PST";
theta = args[1];
if (typeof(theta) == FLOAT)
return sin(theta);
elseif (typeof(theta) == INT)
degtheta = theta % 360;
mintheta = 0;
elseif (typeof(theta) == LIST)
degtheta = theta[1] % 360;
mintheta = theta[2] % 60;
else
return E_INVARG;
endif
if (mintheta < 0)
mintheta = mintheta + 60;
degtheta = degtheta - 1;
endif
while (degtheta < 1)
degtheta = degtheta + 360;
endwhile
if (mintheta == 0)
return this.sines[degtheta];
endif
lim1 = this.sines[degtheta];
lim2 = this.sines[degtheta + 1];
delta = lim2 - lim1;
result = (((delta * mintheta) + 30) / 60) + lim1;
return result;
.
#26:30
"Copied from Trig_Utils (#25800):cos by Obvious (#54879) Fri Nov 17 06:07:50 1995 PST";
theta = args[1];
if (typeof(theta) == FLOAT)
return cos(theta);
elseif (typeof(theta) == INT)
degtheta = 90 - theta;
mintheta = 0;
elseif (typeof(theta) == LIST)
degtheta = 89 - theta[1];
mintheta = 60 - theta[2];
else
return;
endif
return this:sin({degtheta, mintheta});
.
#26:31
"Copied from Trig_Utils (#25800):tan by Obvious (#54879) Fri Nov 17 06:07:53 1995 PST";
{theta} = args;
if (typeof(theta) == FLOAT)
return tan(theta);
endif
sine = this:sin(theta);
cosine = this:cos(theta);
return ((sine * 10000) + ((cosine + 1) / 2)) / cosine;
.
#26:32
"Copied from Trig_Utils (#25800):arcsin by Obvious (#54879) Fri Nov 17 06:08:01 1995 PST";
{given} = args;
if (typeof(given) == FLOAT)
return asin(given);
endif
given = abs(given);
if (given > 10000)
return E_RANGE;
endif
i = 1;
while (given > this.sines[i])
i = i + 1;
endwhile
if (given == this.sines[i])
if (args[1] < 0)
return {-i, 0};
else
return {i, 0};
endif
endif
degrees = i - 1;
if (i == 1)
lower = 0;
else
lower = this.sines[i - 1];
endif
upper = this.sines[i];
delta1 = given - lower;
delta2 = upper - lower;
minutes = ((delta1 * 60) + ((delta2 + 1) / 2)) / delta2;
if (args[1] < 0)
degrees = -degrees;
minutes = -minutes;
endif
return {degrees, minutes};
.
#26:33
"Copied from Trig_Utils (#25800):arccos by Obvious (#54879) Fri Nov 17 06:08:08 1995 PST";
given = args[1];
if (typeof(given) == FLOAT)
return acos(given);
endif
arcsin = this:arcsin(given);
degrees = 89 - arcsin[1];
minutes = 60 - arcsin[2];
"//* Changed (minutes > 60) to (minutes >= 60) following bug report by Loufah (#116455).  2000-03-24 23:00 CST  Gary (#110811).";
if (minutes >= 60)
minutes = minutes - 60;
degrees = degrees + 1;
endif
return {degrees, minutes};
.
#26:34
"Copied from Trig_Utils (#25800):arctan by Obvious (#54879) Fri Nov 17 06:08:18 1995 PST";
given = args[1];
if (typeof(given) == FLOAT)
return atan(given);
endif
reciprocal = ((given * given) / 10000) + 10000;
reciprocal = sqrt(reciprocal * 10000);
cosine = 100000000 / reciprocal;
return this:arccos(cosine);
.
#26:35
":deg2rad(FLOAT Degrees) => FLOAT Radians";
return tofloat(args[1]) * 0.0174532925199433;
.
#26:36
":rads2deg(FLOAT Radians) => FLOAT Degrees";
return tofloat(args[1]) * 57.2957795130824;
.
#26:37
":precision(FLOAT Number, INT Digits of Precision) => FLOAT Number";
"Cuts the given number to the given digits of precision.  Uses rounding.";
{digits, pre} = args;
mult = 10.0 ^ pre;
return this:rint(digits * mult) / mult;
.
#26:38
"Usage: round(INT number, INT round)";
"Rounds 'number' off to the nearest multiple of 'round'.";
"Rounds UP numbers exactly half way in between two round possibilities.";
{what, round} = args;
low = (what / round) * round;
return (what < (low + (round / 2))) ? low | (low + round);
.
#26:39
"Usage: mean(INT, INT, ... )";
"       mean({INT, INT, ...})";
"Returns the average of all integers provided.";
return this:sum(rlist = (typeof(args[1]) == LIST) ? args[1] | args) / length(rlist);
.
#26:40
":sum_float(FLOAT num, num, num ...) => Total of all arguments added together.";
":sum_float({num, num, num, ...}) will also work.";
{?total = 0.0, @rest} = args;
if (typeof(total) == LIST)
{?total = 0.0, @rest} = total;
endif
for number in (rest)
total = total + number;
endfor
return total;
.
#26:41
":sum_int(INT num, num, num ...) => Total of all arguments added together.";
":sum_int({num, num, num, ...}) will also work.";
"(...also named :sum for backward compatibility).";
"Use :sum_float to sum a list of floats.";
{?total = 0, @rest} = args;
if (typeof(total) == LIST)
{?total = 0, @rest} = total;
endif
for number in (rest)
total = total + number;
endfor
return total;
"... N.B.  For the sake of backward compatibility this routine will also return the float sum of a non-empty lists of floats, but using it this way should not be encouraged.";
.
#26:42
":rint(FLOAT Number) => FLOAT Number";
"Returns the given floating-point number rounded to the nearest integer, as a floating-point number.  In case of ties, rounds away from 0.";
{f} = args;
return trunc((f > 0.0) ? f + 0.5 | (f - 0.5));
.
#27:0
"Returns the set union of all of the lists provided as arguments.";
if (!args)
return {};
endif
{set, @rest} = args;
for l in (rest)
for x in (l)
set = setadd(set, x);
endfor
endfor
return set;
.
#27:1
"Returns the set intersection of all the lists provided as arguments.";
if (!args)
return {};
endif
max = 0;
{result, @rest} = args;
for set in (rest)
if (length(result) < length(set))
set1 = result;
set2 = set;
else
set1 = set;
set2 = result;
endif
for x in (set1)
if (!(x in set2))
set1 = setremove(set1, x);
endif
endfor
result = set1;
endfor
return result;
.
#27:2
"Usage:  diff(set 1, set 2, ..., set n)";
"Returns all elements of set 1 that are not in sets 2..n";
{set, @rest} = args;
for l in (rest)
for x in (l)
set = setremove(set, x);
endfor
endfor
return set;
.
#27:3
"True if the first list given is a superset of all subsequent lists.";
"False otherwise.  {} is a superset of {} and nothing else; anything is";
"a superset of {}.  If only one list is given, return true.";
{?super = {}, @rest} = args;
for l in (rest)
for x in (l)
if (!(x in super))
return 0;
endif
endfor
endfor
return 1;
.
#27:4
"Usage:  exclusive_or(set, set, ...)";
"Return the set of all elements that are in exactly one of the input sets";
"For two sets, this is the equivalent of (A u B) - (A n B).";
if (!args)
return {};
endif
{set, @rest} = args;
so_far = set;
for l in (rest)
for x in (l)
if (x in so_far)
set = setremove(set, x);
else
set = setadd(set, x);
endif
endfor
so_far = {@so_far, @l};
endfor
return set;
.
#27:5
"Usage:  diff_suspended(set 1, set 2, ..., set n)";
"Returns all elements of set 1 that are not in sets 2..n";
"Suspends as needed if the lists are large.";
{set, @rest} = args;
for l in (rest)
for x in (l)
set = setremove(set, x);
$command_utils:suspend_if_needed(0);
endfor
endfor
return set;
.
#27:6
"True if the two lists given contain the same elements.";
"False otherwise.";
{set1, set2} = args;
while (set1)
{elt, @set1} = set1;
if (elt in set2)
set2 = setremove(set2, elt);
while (elt in set2)
set2 = setremove(set2, elt);
endwhile
while (elt in set1)
set1 = setremove(set1, elt);
endwhile
else
return 0;
endif
endwhile
if (set2)
return 0;
else
return 1;
endif
.
#27:7
"Copied from Fox (#54902):intersection Mon Dec 27 17:02:57 1993 PST";
"a version of $set_utils:intersection that maintains the property that everything in the return value is in the first argument, even considering case";
if (!args)
return {};
endif
{result, @rest} = args;
for s in (rest)
for x in (result)
if (!(x in s))
result = setremove(result, x);
endif
endfor
endfor
return result;
.
#29:0
if (caller_perms().wizard)
pass(@args);
this.mail_notify = {player};
player:set_current_message(this, 0, 0, 1);
this.moderated = 1;
else
return E_PERM;
endif
.
#29:1
if (!this:is_writable_by(caller_perms()))
return E_PERM;
else
if (msgs = this.messages)
new = msgs[$][1] + 1;
else
new = 1;
endif
if (rmsgs = this.messages_going)
lbrm = rmsgs[$][2];
new = max(new, lbrm[$][1] + 1);
endif
m = args[1];
if (index(m[4], "@programmer ") == 1)
m = {m[1], toobj(args[2]), o = $mail_agent:parse_address_field(m[4])[1], o.name};
endif
this.messages = {@msgs, {new, m}};
this.last_msg_date = m[1];
this.last_used_time = time();
return new;
endif
.
#29:2
":display_seq_headers(msg_seq[,cur])";
":display_seq_full(msg_seq[,cur]) => {cur}";
if (!this:ok(caller, caller_perms()))
return E_PERM;
endif
{msg_seq, ?cur = 0, ?read_date = $maxint} = args;
last = ldate = 0;
player:tell("       WHEN           ", $string_utils:left(this.keyword, -30), "BY");
for x in (msgs = this:messages_in_seq(args[1]))
msgnum = $string_utils:right(last = x[1], 4, (cur == x[1]) ? ">" | " ");
ldate = x[2][1];
if (typeof(x[2][2]) != OBJ)
hdr = this:msg_summary_line(@x[2]);
else
if (ldate < (time() - 31536000))
c = player:ctime(ldate);
date = c[5..11] + c[21..25];
else
date = player:ctime(ldate)[5..16];
endif
hdr = tostr(ctime(ldate)[5..16], "   ", $string_utils:left(tostr(x[2][4], " (", x[2][3], ")"), 30), valid(w = x[2][2]) ? w.name | "??", " (", x[2][2], ")");
endif
player:tell(msgnum, (ldate > read_date) ? ":+ " | ":  ", hdr);
$command_utils:suspend_if_needed(0);
endfor
if (verb == "display_seq_full")
return {last, ldate};
else
player:tell("----+");
endif
.
#29:3
":from_msg_seq(object or list[,mask])";
" => msg_seq of messages from any of these senders";
if (!this:ok(caller, caller_perms()))
return E_PERM;
endif
{plist, ?mask = {1}} = args;
if (typeof(plist) != LIST)
plist = {plist};
endif
i = 1;
fseq = {};
for msg in (this.messages)
if ((!mask) || (i < mask[1]))
elseif ((length(mask) < 2) || (i < mask[2]))
if (msg[2][2] in plist)
fseq = $seq_utils:add(fseq, i, i);
endif
else
mask = mask[3..$];
endif
i = i + 1;
$command_utils:suspend_if_needed(0);
endfor
return fseq || ("%f %<has> no messages from " + $string_utils:english_list($list_utils:map_arg(2, $string_utils, "pronoun_sub", "%n (%#)", plist), "no one", " or "));
.
#29:4
":to_msg_seq(object or list[,mask]) => msg_seq of messages to those people";
if (!this:ok(caller, caller_perms()))
return E_PERM;
endif
{plist, ?mask = {1}} = args;
if (typeof(plist) != LIST)
plist = {plist};
endif
i = 1;
fseq = {};
for msg in (this.messages)
if ((!mask) || (i < mask[1]))
elseif ((length(mask) < 2) || (i < mask[2]))
if (msg[2][3] in plist)
fseq = $seq_utils:add(fseq, i, i);
endif
else
mask = mask[3..$];
endif
i = i + 1;
$command_utils:suspend_if_needed(0);
endfor
return fseq || ("%f %<has> no messages about @programmer'ing " + $string_utils:english_list(plist, "no one", " or "));
.
#29:5
":%to_msg_seq/subject_msg_seq(string or list of strings[,mask])";
" => msg_seq of messages containing one of strings in the to line";
if (!this:ok(caller, caller_perms()))
return E_PERM;
endif
{nlist, ?mask = {1}} = args;
if (typeof(nlist) != LIST)
nlist = {nlist};
endif
i = 1;
fseq = {};
for msg in (this.messages)
if ((!mask) || (i < mask[1]))
elseif ((length(mask) < 2) || (i < mask[2]))
if (msg[2][4] in nlist)
fseq = $seq_utils:add(fseq, i, i);
endif
else
mask = mask[3..$];
endif
i = i + 1;
$command_utils:suspend_if_needed(0);
endfor
return fseq || ("%f %<has> no messages about @programmer'ing " + $string_utils:english_list(nlist, "no one", " or "));
.
#29:6
return this.name + " doesn't understand %%from:";
.
#30:0
"WIZARDLY";
if (args)
"...check for an exact match first...";
search = args[1];
if (`$object_utils:has_property(parent(this), search) ! ANY')
if ($object_utils:has_property(this, " " + search))
return {search};
endif
elseif ($object_utils:has_property(this, search))
return {search};
endif
"...search for partial matches, allowing for";
"...confusion between topics that do and don't start with @, and";
".. confusion between - and _ characters.";
props = properties(this);
topics = {};
if (search[1] == "@")
search = search[2..$];
endif
search = strsub(search, "-", "_");
if (!search)
"...don't try searching for partial matches if the string is empty or @";
"...we'd get *everything*...";
return {};
endif
for prop in (props)
if (((i = index(strsub(prop, "-", "_"), search)) == 1) || ((i == 2) && index(" @", prop[1])))
topics = {@topics, (prop[1] == " ") ? prop[2..$] | prop};
endif
endfor
return topics;
else
"...return list of all topics...";
props = setremove(properties(this), "");
for p in (`$object_utils:all_properties(parent(this)) ! ANY => {}')
if (i = (" " + p) in props)
props = {p, @listdelete(props, i)};
endif
endfor
return props;
endif
.
#30:1
"WIZARDLY";
{topic, ?dblist = {}} = args;
if (`$object_utils:has_property(parent(this), topic) ! ANY')
text = `this.(" " + topic) ! ANY';
else
text = `this.(topic) || this.(" " + topic) ! ANY';
endif
if (typeof(text) == LIST)
if (text && (text[1] == (("*" + (vb = strsub(text[1], "*", ""))) + "*")))
text = `this:(vb)(listdelete(text, 1), dblist) ! ANY';
endif
endif
return text;
.
#30:2
":sort_topics(list_of_topics) -- sorts the given list of strings, assuming that they're help-system topic names";
buckets = "abcdefghijklmnopqrstuvwxyz";
keys = names = $list_utils:make(length(buckets) + 1, {});
for name in (setremove(args[1], ""))
key = index(".@", name[1]) ? name[2..$] + " " | name;
k = index(buckets, key[1]) + 1;
bucket = keys[k];
i = $list_utils:find_insert(bucket, key);
keys[k] = listinsert(bucket, key, i);
names[k] = listinsert(names[k], name, i);
$command_utils:suspend_if_needed(0);
endfor
return $list_utils:append(@names);
.
#30:3
":columnize(@list_of_strings) -- prints the given list in a number of columns wide enough to accomodate longest entry. But no more than 4 columns.";
longest = $list_utils:longest(args);
for d in ({4, 3, 2, 1})
if ((79 / d) >= length(longest))
return $string_utils:columnize_suspended(0, args, d);
endif
endfor
.
#30:4
"{\"*forward*\", topic, @rest}  => text for topic from this help db.";
"{\"*pass*\",    topic, @rest}  => text for topic from next help db.";
"In both cases the text of @rest is appended.  ";
"@rest may in turn begin with a *<verb>*";
{text, ?dblist = {}} = args;
if (verb == "forward")
first = this:get_topic(text[1], dblist);
elseif ((result = $code_utils:help_db_search(text[1], dblist)) && ((db = result[1]) != $ambiguous_match))
first = db:get_topic(result[2], dblist[(db in dblist) + 1..$]);
else
first = {};
endif
if (2 <= length(text))
if (text[2] == (("*" + (vb = strsub(text[2], "*", ""))) + "*"))
return {@first, @`this:(vb)(text[3..$], dblist) ! ANY => {}'};
else
return {@first, @text[2..$]};
endif
else
return first;
endif
.
#30:5
"{\"*subst*\", @text} => text with the following substitutions:";
"  \"...%[expr]....\" => \"...\"+value of expr (assumed to be a string)+\"....\"";
"  \"%;expr\"         => @(value of expr (assumed to be a list of strings))";
newlines = {};
for old in (args[1])
new = "";
bomb = 0;
while ((prcnt = index(old, "%")) && (prcnt < length(old)))
new = new + old[1..prcnt - 1];
code = old[prcnt + 1];
old = old[prcnt + 2..$];
if (code == "[")
prog = "";
while ((b = index(old + "]", "]")) > (p = index(old + "%", "%")))
prog = (prog + old[1..p - 1]) + old[p + 1];
old = old[p + 2..$];
endwhile
prog = prog + old[1..b - 1];
old = old[b + 1..$];
value = $no_one:eval_d(prog);
if (value[1])
new = tostr(new, value[2]);
else
new = tostr(new, toliteral(value[2]));
bomb = 1;
endif
elseif ((code != ";") || new)
new = (new + "%") + code;
else
value = $no_one:eval_d(old);
if (value[1] && (typeof(r = value[2]) == LIST))
newlines = {@newlines, @r[1..$ - 1]};
new = tostr(r[$]);
else
new = tostr(new, toliteral(value[2]));
bomb = 1;
endif
old = "";
endif
endwhile
if (bomb)
newlines = {@newlines, new + old, tostr("@@@ Helpfile alert:  Previous line is messed up; notify ", this.owner.wizard ? "" | tostr(this.owner.name, " (", this.owner, ") or "), "a wizard. @@@")};
else
newlines = {@newlines, new + old};
endif
endfor
return newlines;
.
#30:6
"{\"*index*\" [, title]}";
"This produces a columnated list of topics in this help db, headed by title.";
$command_utils:suspend_if_needed(0);
title = args[1] ? args[1][1] | tostr(this.name, " (", this, ")");
su = $string_utils;
return {"", title, su:from_list($list_utils:map_arg(su, "space", su:explode(title), "-"), " "), @this:columnize(@this:sort_topics(this:find_topics()))};
.
#30:7
pass(@args);
if ($perm_utils:controls(caller_perms(), this))
this.r = 1;
this.f = 0;
endif
.
#30:8
"{\"*verbdoc*\", \"object\", \"verbname\"}  use documentation for this verb";
set_task_perms(this.owner);
if (!valid(object = $string_utils:match_object(args[1][1], player.location)))
return E_INVARG;
elseif (!(hv = $object_utils:has_verb(object, vname = args[1][2])))
return E_VERBNF;
else
return $code_utils:verb_documentation(hv[1], vname);
endif
.
#30:9
try
text = this.(fulltopic = args[1]);
return {tostr(";;", $code_utils:corify_object(this), ".(", toliteral(fulltopic), ") = $command_utils:read_lines()"), @$command_utils:dump_lines(text)};
except error (ANY)
return error[1];
endtry
.
#30:10
"{\"*objectdoc*\", \"object\"} => text for topic from object:help_msg";
if (!valid(object = $string_utils:literal_object(args[1][1])))
return E_INVARG;
elseif (!($object_utils:has_verb(object, "help_msg") || $object_utils:has_property(object, "help_msg")))
return E_VERBNF;
else
return $code_utils:verb_or_property(object, "help_msg");
endif
.
#30:11
":find_index_topic([search])";
"Return the list of index topics of this help DB";
"(i.e., those which contain an index (list of topics)";
"this DB, return it, otherwise return false.";
"If search argument is given and true,";
"we first remove any cached information concerning index topics.";
{?search = 0} = args;
if (this.index_cache && (!search))
"...make sure every topic listed in .index_cache really is an index topic";
for p in (this.index_cache)
if (!("*index*" in `this.(p) ! ANY => {}'))
search = 1;
endif
endfor
if (!search)
return this.index_cache;
endif
elseif ($generic_help == this)
return {};
endif
itopics = {};
for p in (properties(this))
if ((h = `this.(p) ! ANY') && ("*index*" in h))
itopics = {@itopics, p};
endif
endfor
this.index_cache = itopics;
return itopics;
.
#31:0
if (!caller_perms().wizard)
return;
endif
player = this;
this:notify(tostr("Sorry, but you've been here for ", $string_utils:from_seconds(connected_seconds(this)), " and someone else wants to be a guest now.  Feel free to come back", @$login:player_creation_enabled(player) ? {" or even create your own character if you want..."} | {" or type `create' to learn more about how to get a character of your own."}));
"boot_player(this)";
return;
"See #0:user_reconnected.";
.
#31:1
if ((((valid(cp = caller_perms()) && (caller != this)) && (!$perm_utils:controls(cp, this))) && (cp != this)) && (caller != #0))
return E_PERM;
endif
"Don't let another guest use this one until all this is done. See :defer, Ho_Yan 1/19/94";
this.free_to_use = 0;
this:log_disconnect();
this:erase_paranoid_data();
try
if (this.location != this.home)
this:room_announce(player.name, " has disconnected.");
this:room_announce($string_utils:pronoun_sub($housekeeper.take_away_msg, this, $housekeeper));
move(this, this.home);
this:room_announce($string_utils:pronoun_sub($housekeeper.drop_off_msg, this, $housekeeper));
endif
finally
this:do_reset();
this.free_to_use = 1;
endtry
.
#31:2
"Called by #0:connect_player when this object is about to be used as the next guest character.  Usually returns `this', but if for some reason some other guest character should be used, that player object is returned instead";
if (!caller_perms().wizard)
"...caller is not :do_login_command; doesn't matter what we return...";
return this;
elseif ($login:blacklisted($string_utils:connection_hostname(connection_name(player))))
return #-2;
elseif (!(this in connected_players()))
"...not logged in, no problemo...";
return this;
endif
longest = 900;
"...guests get 15 minutes before they can be dislodged...";
candidate = #-1;
free = {};
for g in ($object_utils:leaves($guest))
if (!is_player(g))
"...a toaded guest?...";
elseif ((!(con = g in connected_players())) && g.free_to_use)
"...yay; found an unused guest...and their last :disfunc is complete";
free = {@free, g};
elseif (con && ((t = connected_seconds(g)) > longest))
longest = t;
candidate = g;
endif
endfor
if (free)
candidate = free[random($)];
elseif (valid(candidate))
"...someone's getting bumped...";
candidate:boot();
endif
return candidate;
.
#31:3
return;
.
#31:4
if ($login:player_creation_enabled(player))
player:tell("First @quit, then connect to the MOO again and, rather than doing `connect guest' do `create <name> <password>'");
else
player:tell($login:registration_string());
endif
.
#31:5
return pass(@args);
.
#31:6
":log(islogin,time,where) adds an entry to the connection log for this guest.";
if (caller != this)
return E_PERM;
elseif (length(this.connect_log) < this.max_connect_log)
this.connect_log = {args, @this.connect_log};
else
this.connect_log = {args, @this.connect_log[1..this.max_connect_log - 1]};
endif
.
#31:7
if ((((valid(cp = caller_perms()) && (caller != this)) && (!$perm_utils:controls(cp, this))) && (cp != this)) && (caller != #0))
return E_PERM;
else
$guest_log:enter(1, time(), $string_utils:connection_hostname(connection_name(this)));
ret = pass(@args);
this:tell_lines(this:extra_confunc_msg());
return ret;
endif
.
#31:8
if (caller != this)
return E_PERM;
else
cname = `connection_name(this) ! ANY' || this.last_connect_place;
$guest_log:enter(0, time(), $string_utils:connection_hostname(cname));
endif
.
#31:9
if (!valid(caller_perms()))
player:tell("Sorry, that information is not available.");
endif
.
#31:10
if (caller_perms() != this)
return E_PERM;
else
return pass(@args);
endif
.
#31:11
return pass(@args);
.
#31:12
return pass(@args);
"only for setting permission";
.
#31:13
if (caller_perms().wizard)
pass(@args);
this.extra_confunc_msg = "";
endif
.
#31:14
"disallow guests from setting aliases on themselves";
if ($perm_utils:controls(caller_perms(), this))
return pass(@args);
else
return E_PERM;
endif
.
#31:15
return $string_utils:pronoun_sub(this.(verb));
.
#31:16
if (!caller_perms().wizard)
return E_PERM;
else
flush_input(this, 0);
for x in ({"paranoid", "lines", "responsible", "linelen", "linebuffer", "brief", "gaglist", "rooms", "pagelen", "current_message", "current_folder", "messages", "messages_going", "request", "mail_options", "edit_options", "home", "spurned_objects", "web_info"})
if ($object_utils:has_property(parent(this), x))
clear_property(this, x);
endif
endfor
this:set_description(this.default_description);
this:set_gender(this.default_gender);
for x in (this.contents)
this:eject(x);
endfor
for x in (this.features)
if (!(x in $guest.features))
this:remove_feature(x);
endif
endfor
for x in ($guest.features)
if (!(x in this.features))
this:add_feature(x);
endif
endfor
for x in ($object_utils:descendants($generic_editor))
if (loc = this in x.active)
x:kill_session(loc);
endif
endfor
endif
.
#31:17
"Usage:  @request <player-name> for <email-address>";
if (player != this)
return player:tell(E_PERM);
endif
if (this.request)
return player:tell("Sorry, you appear to have already requested a character.");
endif
name = dobjstr;
if ((prepstr != "for") || ((!dobjstr) || index(address = iobjstr, " ")))
return player:notify_lines($code_utils:verb_usage());
endif
if ($login:request_character(player, name, address))
this.request = 1;
endif
"Copied from Generic Guest (#5678):@request by Froxx (#49853) Mon Apr  4 10:49:26 1994 PDT";
.
#31:18
"Compute an encrypted hash of the guest's (last) connection, using 'crypt'. Basically, you can't tell where the guest came from, but it is unlikely that two guests will have the same hash";
"You can use guest:connection_name_hash(seed) as a string to identify whether two guests are from the same place.";
hash = toint(caller_perms());
host = $string_utils:connection_hostname(this.last_connect_place);
for i in [1..length(host)]
hash = (hash * 14) + index($string_utils.ascii, host[i]);
endfor
return crypt(tostr(hash), @args);
.
#31:19
if ((caller_perms() != $nothing) && (caller_perms() != player))
return E_PERM;
endif
if (!args)
all_mlists = {@$mail_agent.contents, @this.mail_lists};
if ((length(all_mlists) > 50) && (!$command_utils:yes_or_no(tostr("There are ", length(all_mlists), " mailing lists.  Are you sure you want the whole list?"))))
return player:tell("OK, aborting.");
endif
for c in (all_mlists)
$command_utils:suspend_if_needed(0);
if ((c:is_usable_by(this) || c:is_readable_by(this)) && (verb != "@unsubscribed"))
`c:look_self(1) ! ANY';
endif
endfor
player:tell("--End of List--");
else
player:tell("Sorry, Guests don't have full mailing privileges.  You may use @read and @peek for mailing lists.  Or try @request to get yourself a character.");
endif
"Paragraph (#122534) - Tue Nov 8, 2005 - Added to prevent a silly traceback from occuring, since Guests can't read their own .current_message.";
.
#31:20
if (caller_perms() in {this, this.owner})
return pass(@args);
else
return E_PERM;
endif
.
#31:21
if ((caller_perms().wizard || (caller_perms() in {this, this.owner})) || (caller == this))
return pass(@args);
else
return E_PERM;
endif
.
#32:0
return ((this.description + " There are ") + tostr(this.entries)) + " words in the online dictionary.";
.
#32:1
return (this:find_exact(args[1]) != $failed_match) || (args[1] in player.dict);
.
#32:2
set_task_perms(caller_perms());
source = args[1];
data = {};
ref = $code_utils:parse_propref(source);
if (ref)
"User entered a prop. Deal with it.";
{thing, prop} = ref;
thing = $string_utils:match_object(thing, player.location);
if (!valid(thing))
player:tell("No such object: ", ref[1]);
data = $failed_match;
elseif ((!prop) || (`thing.(tostr(prop)) ! ANY' == E_PROPNF))
player:tell("There is no such property `", prop, "' on object ", thing, ".");
data = $failed_match;
else
data = `thing.(tostr(prop)) ! ANY';
if (typeof(data) == STR)
data = {data};
endif
$command_utils:suspend_if_needed(3);
if (typeof(data) == ERR)
player:tell("Error: ", tostr(data));
data = $failed_match;
elseif (typeof(data) != LIST)
player:tell("Spellchecker needs a string or list as input.");
data = $failed_match;
endif
endif
else
ref = $code_utils:parse_verbref(source);
if (ref)
"User entered a verb. Deal with it.";
{thing, verb} = ref;
thing = $string_utils:match_object(thing, player.location);
if (!valid(thing))
player:tell("No such object: ", ref[1]);
data = $failed_match;
elseif (`verb_info(thing, verb) ! ANY' == E_VERBNF)
player:tell("There is no such verb `", verb, "' on object ", thing, ".");
data = $failed_match;
else
data = `verb_code(thing, verb) ! ANY => {}';
for i in [1..length(data)]
if (!index(data[i], "\""))
data[i] = "";
else
data[i] = data[i][index(data[i], "\"") + 1..$];
data[i] = data[i][1..rindex(data[i], "\"") - 1];
foo = "";
while (index(data[i], "\""))
foo = foo + data[i][1..index(data[i], "\"") - 1];
foo = foo + " ";
data[i] = data[i][index(data[i], "\"") + 1..$];
data[i] = data[i][index(data[i], "\"") + 1..$];
endwhile
if (foo == "")
foo = data[i];
else
foo = foo + data[i];
endif
data[i] = $string_utils:trim(foo);
endif
endfor
endif
else
"User entered word/phrase on command line.";
data = {argstr};
endif
endif
for i in [1..length(data)]
$command_utils:suspend_if_needed(1);
if (typeof(data[i]) != STR)
data[i] = "";
endif
data[i] = $string_utils:strip_chars(data[i], "!@#$%^&*()_+1234567890={}[]`<>?:;,./|\"~'");
endfor
return data;
.
#32:3
nastyword = args[1];
guesses = {};
"Transpose adjacent characters";
nastyword = nastyword + " ";
for i in [1..length(nastyword) - 1]
foo = ((nastyword[1..i - 1] + nastyword[i + 1]) + nastyword[i]) + nastyword[i + 2..$];
foo = $string_utils:trim(foo);
if (this:valid(foo))
guesses = listappend(guesses, foo);
endif
if ((ticks_left() < 500) || (seconds_left() < 2))
suspend(0);
endif
endfor
nastyword = $string_utils:trim(nastyword);
"Erase each character - check for an extra typoed character";
for i in [1..length(nastyword)]
foo = nastyword[1..i - 1] + nastyword[i + 1..$];
if (this:valid(foo))
guesses = listappend(guesses, foo);
endif
if ((ticks_left() < 500) || (seconds_left() < 2))
suspend(0);
endif
endfor
"Alter one character";
for i in [1..length(nastyword)]
for ii in ({"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "'", "-"})
foo = (nastyword[1..i - 1] + ii) + nastyword[i + 1..$];
if (this:valid(foo))
guesses = listappend(guesses, foo);
endif
endfor
if ((ticks_left() < 500) || (seconds_left() < 2))
suspend(0);
endif
endfor
"insert one character";
for i in [1..length(nastyword)]
for ii in ({"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "'", "-"})
foo = (nastyword[1..i - 1] + ii) + nastyword[i..$];
if (this:valid(foo))
guesses = listappend(guesses, foo);
endif
endfor
if ((ticks_left() < 500) || (seconds_left() < 2))
suspend(0);
endif
endfor
"Get some close matches from the database verbs themselves";
if ((foo = this:find_all(nastyword)) != ERR)
if ((foo != $failed_match) && (foo != $ambiguous_match))
if (length(foo) < 6)
for i in (foo)
guesses = listappend(guesses, i);
endfor
endif
endif
endif
"Clean up and go home";
guesses = $list_utils:remove_duplicates(guesses);
guesses = $list_utils:sort(guesses);
return guesses;
.
#32:4
if ((ticks_left() < 1000) || (seconds_left() < 3))
suspend(0);
endif
return pass(@args);
.
#32:5
"sort({x1,x3,x2},{1,3,2}) => {x1,x2,x3}";
lst = args[1];
unsorted_keys = (use_sorted_lst = length(args) >= 2) ? args[2] | lst;
sorted_lst = sorted_keys = {};
for e in (unsorted_keys)
l = $list_utils:find_insert(sorted_keys, e);
sorted_keys = listinsert(sorted_keys, e, l);
if (use_sorted_lst)
sorted_lst = listinsert(sorted_lst, lst[length(sorted_keys)], l);
endif
if ((ticks_left() < 500) || (seconds_left() < 2))
suspend(0);
endif
endfor
return sorted_lst || sorted_keys;
.
#32:6
info = this.(" " + args[1]);
prefix = args[1] + info[1];
r = info[3];
for i in [1..length(branches = info[2])]
for new in (this:_every_key(prefix + branches[i]))
r = setadd(r, new);
if ((ticks_left() < 500) || (seconds_left() < 2))
this:_suspend(0);
endif
endfor
endfor
return r;
.
#32:7
if (caller == this)
suspend(@args);
endif
.
#32:8
"N.B.  use :add_word/:remove_word to actually change the contents of this db";
":insert(string) -- see $generic_db:insert";
":delete(string) -- see $generic_db:delete";
":delete2(string) -- see $generic_db:delete2";
if (caller == this)
$command_utils:suspend_if_needed(0);
return pass(@args);
else
return E_PERM;
endif
.
#32:9
":add_word(string) -- adds word to the spell database";
"Returns true iff this word wasn't already there.";
cp = caller_perms();
if ((caller == this) || ((cp in this.trusted) || $perm_utils:controls(cp, this)))
result = this:insert(@args);
result || (this.entries = this.entries + 1);
return !result;
else
return E_PERM;
endif
.
#32:10
":remove_word(string) -- removes word from the spell database";
"Returns true iff word was actually there to be removed.";
cp = caller_perms();
if ((caller == this) || ((cp in this.trusted) || $perm_utils:controls(cp, this)))
result = this:delete(@args);
result && (this.entries = this.entries - 1);
return result;
else
return E_PERM;
endif
.
#32:11
":submit(word) -- add a word to this.submitted";
this.submitted = {@this.submitted, args[1]};
.
#32:12
"$spell:purge_entire_database - a nasty verb that will zap the whole dictionary.";
"usage: eval $spell:purge_entire_database()     ";
if (!($perm_utils:controls(caller_perms(), this) || (caller == this)))
return E_PERM;
endif
if (!player.wizard)
return E_PERM;
endif
player:tell("WARNING: This will ERASE all the entries in the online dictionary! IF YOU ARE SURE YOU WISH TO DO THIS, TYPE `PURGE' NOW. Any other input with abort the command.");
input = $command_utils:read();
if (input != "purge")
player:tell("ABORTED. Database left as is.");
else
this:clearall_big(@args);
endif
.
#32:13
"returns a random word from the dictionary. maybe useful for games and things";
"that need a unique word. accepts no arguments.";
word = "";
while (word == "")
x = random(26);
y = random(26);
if (seconds_left() < 2)
suspend(0);
endif
lettera = $string_utils.alphabet[x];
letterb = $string_utils.alphabet[y];
foo = $spell:find_all(lettera + letterb);
if (foo != {})
word = foo[random($)];
endif
endwhile
return word;
.
#32:14
return this.description;
.
#32:15
if (!caller_perms().wizard)
return;
endif
pass(@args);
$spell.trusted = {};
.
#32:16
if (!(player in this.trusted))
player:tell("Sorry, you can't do that.");
return E_PERM;
endif
this.submitted = {};
player:tell("$spell.submitted = {};");
.
#32:17
return this;
.
#33:0
"   add(seq,start[,end]) => seq with range added.";
"remove(seq,start[,end]) => seq with range removed.";
"  both assume start<=end.";
remove = verb == "remove";
seq = args[1];
start = args[2];
s = (start == $minint) ? 1 | $list_utils:find_insert(seq, start - 1);
if (length(args) < 3)
return {@seq[1..s - 1], @((s + remove) % 2) ? {start} | {}};
else
e = $list_utils:find_insert(seq, after = args[3] + 1);
return {@seq[1..s - 1], @((s + remove) % 2) ? {start} | {}, @((e + remove) % 2) ? {after} | {}, @seq[e..$]};
endif
.
#33:1
":contains(seq,elt) => true iff elt is in seq.";
return ($list_utils:find_insert(@args) + 1) % 2;
.
#33:2
":complement(seq[,lower[,upper]]) => the sequence containing all integers *not* in seq.";
"If lower/upper are given, the resulting sequence is restricted to the specified range.";
"Bad things happen if seq is not a subset of [lower..upper]";
{seq, ?lower = $minint, ?upper = $nothing} = args;
if (upper != $nothing)
if (seq[$] >= (upper = upper + 1))
seq[$..$] = {};
else
seq[$ + 1..$] = {upper};
endif
endif
if (seq && (seq[1] <= lower))
return listdelete(seq, 1);
else
return {lower, @seq};
endif
.
#33:3
":union(seq1,seq2,...)        => union of all sequences...";
if ({} in args)
args = $list_utils:setremove_all(args, {});
endif
if (length(args) <= 1)
return args ? args[1] | {};
endif
return this:_union(@args);
.
#33:4
"tostr(seq [,delimiter]) -- turns a sequence into a string, delimiting ranges with delimiter, defaulting to .. (e.g. 5..7)";
{seq, ?separator = ".."} = args;
if (!seq)
return "empty";
endif
e = tostr((seq[1] == $minint) ? "" | seq[1]);
len = length(seq);
for i in [2..len]
e = e + ((i % 2) ? tostr(", ", seq[i]) | ((seq[i] == (seq[i - 1] + 1)) ? "" | tostr(separator, seq[i] - 1)));
endfor
return e + ((len % 2) ? separator | "");
.
#33:5
":for([n,]seq,obj,verb,@args) => for s in (seq) obj:verb(s,@args); endfor";
set_task_perms(caller_perms());
if (typeof(n = args[1]) == INT)
args = listdelete(args, 1);
else
n = 1;
endif
{seq, object, vname, @args} = args;
if (seq[1] == $minint)
return E_RANGE;
endif
for r in [1..length(seq) / 2]
for i in [seq[(2 * r) - 1]..seq[2 * r] - 1]
if (typeof(object:(vname)(@listinsert(args, i, n))) == ERR)
return;
endif
endfor
endfor
if (length(seq) % 2)
i = seq[$];
while (1)
if (typeof(object:(vname)(@listinsert(args, i, n))) == ERR)
return;
endif
i = i + 1;
endwhile
endif
.
#33:6
"extract(seq,array) => list of elements of array with indices in seq.";
{seq, array} = args;
if (alen = length(array))
e = $list_utils:find_insert(seq, 1);
s = $list_utils:find_insert(seq, alen);
seq = {@(e % 2) ? {} | {1}, @seq[e..s - 1], @(s % 2) ? {} | {alen + 1}};
ret = {};
for i in [1..length(seq) / 2]
$command_utils:suspend_if_needed(0);
ret = {@ret, @array[seq[(2 * i) - 1]..seq[2 * i] - 1]};
endfor
return ret;
else
return {};
endif
.
#33:7
seq = args[1];
if (!seq)
return {};
else
if (length(seq) % 2)
seq = {@seq, $minint};
endif
l = {};
for i in [1..length(seq) / 2]
for j in [seq[(2 * i) - 1]..seq[2 * i] - 1]
l = {@l, j};
endfor
endfor
return l;
endif
.
#33:8
":fromlist(list) => corresponding sequence.";
return this:from_sorted_list($list_utils:sort(args[1]));
.
#33:9
":from_sorted_list(sorted_list) => corresponding sequence.";
if (!(lst = args[1]))
return {};
else
seq = {i = lst[1]};
next = i + 1;
for i in (listdelete(lst, 1))
if (i != next)
seq = {@seq, next, i};
endif
next = i + 1;
endfor
return (next == $minint) ? seq | {@seq, next};
endif
.
#33:10
return (seq = args[1]) ? seq[1] | E_NONE;
.
#33:11
return (seq = args[1]) ? (length(seq) % 2) ? $minint - 1 | (seq[$] - 1) | E_NONE;
.
#33:12
":size(seq) => number of elements in seq";
"  for sequences consisting of more than half of the 4294967298 available integers, this returns a negative number, which can either be interpreted as (cardinality - 4294967298) or -(size of complement sequence)";
n = 0;
for i in (seq = args[1])
n = i - n;
endfor
return (length(seq) % 2) ? $minint - n | n;
.
#33:13
":from_string(string) => corresponding sequence or E_INVARG";
"  string should be a comma separated list of numbers and";
"  number..number ranges";
su = $string_utils;
if (!(words = su:explode(su:strip_chars(args[1], " "), ",")))
return {};
endif
parts = {};
for word in (words)
to = index(word, "..");
if ((!to) && su:is_numeric(word))
part = {toint(word), toint(word) + 1};
elseif (to)
if (to == 1)
start = $minint;
elseif (su:is_numeric(start = word[1..to - 1]))
start = toint(start);
else
return E_INVARG;
endif
end = word[to + 2..length(word)];
if (!end)
part = {start};
elseif (!su:is_numeric(end))
return E_INVARG;
elseif ((end = toint(end)) >= start)
part = {start, end + 1};
else
part = {};
endif
else
return E_INVARG;
endif
parts = {@parts, part};
endfor
return this:union(@parts);
.
#33:14
":firstn(seq,n) => first n elements of seq as a sequence.";
if ((n = args[2]) <= 0)
return {};
endif
l = length(seq = args[1]);
s = 1;
while (s <= l)
n = n + seq[s];
if ((s >= l) || (n <= seq[s + 1]))
return {@seq[1..s], n};
endif
n = n - seq[s + 1];
s = s + 2;
endwhile
return seq;
.
#33:15
":lastn(seq,n) => last n elements of seq as a sequence.";
n = args[2];
if ((l = length(seq = args[1])) % 2)
return {$minint - n};
else
s = l;
while (s)
n = seq[s] - n;
if (n >= seq[s - 1])
return {n, @seq[s..l]};
endif
n = seq[s - 1] - n;
s = s - 2;
endwhile
return seq;
endif
.
#33:16
":range(start,end) => sequence corresponding to [start..end] range";
return ((start = args[1]) <= (end = args[2])) ? {start, end + 1} | {};
.
#33:17
":expand(seq,eseq[,include=0])";
"eseq is assumed to be a finite sequence consisting of intervals ";
"[f1..a1-1],[f2..a2-1],...  We map each element i of seq to";
"  i               if               i < f1";
"  i+(a1-f1)       if         f1 <= i < f2-(a1-f1)";
"  i+(a1-f1+a2-f2) if f2-(a1-f1) <= i < f3-(a2-f2)-(a1-f1)";
"  ...";
"returning the resulting sequence if include=0,";
"returning the resulting sequence unioned with eseq if include=1;";
{old, insert, ?include = 0} = args;
exclude = !include;
if (!insert)
return old;
elseif ((length(insert) % 2) || (insert[1] == $minint))
return E_TYPE;
endif
olast = length(old);
ilast = length(insert);
"... find first o for which old[o] >= insert[1]...";
ifirst = insert[i = 1];
o = $list_utils:find_insert(old, ifirst - 1);
if (o > olast)
return ((olast % 2) == exclude) ? {@old, @insert} | old;
endif
new = old[1..o - 1];
oe = old[o];
diff = 0;
while (1)
"INVARIANT: oe == old[o]+diff";
"INVARIANT: oe >= ifirst == insert[i]";
"... at this point we need to dispose of the interval ifirst..insert[i+1]";
if (oe == ifirst)
new = {@new, insert[i + ((o % 2) == exclude)]};
if (o >= olast)
return ((olast % 2) == exclude) ? {@new, @insert[i + 2..ilast]} | new;
endif
o = o + 1;
else
if ((o % 2) != exclude)
new = {@new, @insert[i..i + 1]};
endif
endif
"... advance i...";
diff = (diff + insert[i + 1]) - ifirst;
if ((i = i + 2) > ilast)
for oe in (old[o..olast])
new = {@new, oe + diff};
endfor
return new;
endif
ifirst = insert[i];
"... find next o for which old[o]+diff >= ifirst )...";
while ((oe = old[o] + diff) < ifirst)
new = {@new, oe};
if (o >= olast)
return ((olast % 2) == exclude) ? {@new, @insert[i..ilast]} | new;
endif
o = o + 1;
endwhile
endwhile
.
#33:18
":contract(seq,cseq)";
"cseq is assumed to be a finite sequence consisting of intervals ";
"[f1..a1-1],[f2..a2-1],...  From seq, we remove any elements that ";
"are in those ranges and map each remaining element i to";
"  i               if       i < f1";
"  i-(a1-f1)       if a1 <= i < f2";
"  i-(a1-f1+a2-f2) if a2 <= i < f3 ...";
"returning the resulting sequence.";
"";
"For any finite sequence cseq, the following always holds:";
"  :contract(:expand(seq,cseq,include),cseq)==seq";
{old, removed} = args;
if (!removed)
return old;
elseif (((rlen = length(removed)) % 2) || (removed[1] == $minint))
return E_TYPE;
endif
rfirst = removed[1];
ofirst = $list_utils:find_insert(old, rfirst - 1);
new = old[1..ofirst - 1];
diff = 0;
rafter = removed[r = 2];
for o in [ofirst..olast = length(old)]
while (old[o] > rafter)
if ((o - ofirst) % 2)
new = {@new, rfirst - diff};
ofirst = o;
endif
diff = (diff + rafter) - rfirst;
if (r >= rlen)
for oe in (old[o..olast])
new = {@new, oe - diff};
endfor
return new;
endif
rfirst = removed[r + 1];
rafter = removed[r = r + 2];
endwhile
if (old[o] < rfirst)
new = {@new, old[o] - diff};
ofirst = o + 1;
endif
endfor
return ((olast - ofirst) % 2) ? new | {@new, rfirst - diff};
.
#33:19
":_union(seq,seq,...)";
"assumes all seqs are nonempty and that there are at least 2";
nargs = length(args);
"args  -- list of sequences.";
"nexts -- nexts[i] is the index in args[i] of the start of the first";
"         interval not yet incorporated in the return sequence.";
"heap  -- a binary tree of indices into args/nexts represented as a list where";
"         heap[1] is the root and the left and right children of heap[i]";
"         are heap[2*i] and heap[2*i+1] respectively.  ";
"         Parent index h is <= both children in the sense of args[h][nexts[h]].";
"         heap[i]==0 indicates a nonexistant child; we fill out the array with";
"         zeros so that length(heap)>2*length(args).";
"...initialize heap...";
heap = {0, 0, 0, 0, 0};
nexts = {1, 1};
hlen2 = 2;
while (hlen2 < nargs)
nexts = {@nexts, @nexts};
heap = {@heap, @heap};
hlen2 = hlen2 * 2;
endwhile
for n in [-nargs..-1]
s1 = args[i = -n][1];
while ((hleft = heap[2 * i]) && (s1 > (m = min(la = args[hleft][1], (hright = heap[(2 * i) + 1]) ? args[hright][1] | $maxint))))
if (m == la)
heap[i] = hleft;
i = 2 * i;
else
heap[i] = hright;
i = (2 * i) + 1;
endif
endwhile
heap[i] = -n;
endfor
"...";
"...find first interval...";
h = heap[1];
rseq = {args[h][1]};
if (length(args[h]) < 2)
return rseq;
endif
current_end = args[h][2];
nexts[h] = 3;
"...";
while (1)
if (length(args[h]) >= nexts[h])
"...this sequence has some more intervals in it...";
else
"...no more intevals left in this sequence, grab another...";
h = heap[1] = heap[nargs];
heap[nargs] = 0;
if ((nargs = nargs - 1) > 1)
elseif (args[h][nexts[h]] > current_end)
return {@rseq, current_end, @args[h][nexts[h]..$]};
elseif ((i = $list_utils:find_insert(args[h], current_end)) % 2)
return {@rseq, current_end, @args[h][i..$]};
else
return {@rseq, @args[h][i..$]};
endif
endif
"...";
"...sink the top sequence...";
i = 1;
first = args[h][nexts[h]];
while ((hleft = heap[2 * i]) && (first > (m = min(la = args[hleft][nexts[hleft]], (hright = heap[(2 * i) + 1]) ? args[hright][nexts[hright]] | $maxint))))
if (m == la)
heap[i] = hleft;
i = 2 * i;
else
heap[i] = hright;
i = (2 * i) + 1;
endif
endwhile
heap[i] = h;
"...";
"...check new top sequence ...";
if (args[h = heap[1]][nexts[h]] > current_end)
"...hey, a new interval! ...";
rseq = {@rseq, current_end, args[h][nexts[h]]};
if (length(args[h]) <= nexts[h])
return rseq;
endif
current_end = args[h][nexts[h] + 1];
nexts[h] = nexts[h] + 2;
else
"...first interval overlaps with current one ...";
i = $list_utils:find_insert(args[h], current_end);
if (i % 2)
nexts[h] = i;
elseif (i > length(args[h]))
return rseq;
else
current_end = args[h][i];
nexts[h] = i + 1;
endif
endif
endwhile
.
#33:20
":intersection(seq1,seq2,...) => intersection of all sequences...";
if ((U = {$minint}) in args)
args = $list_utils:setremove_all(args, U);
endif
if (length(args) <= 1)
return args ? args[1] | U;
endif
return this:complement(this:_union(@$list_utils:map_arg(this, "complement", args)));
.
#34:0
if (caller_perms().wizard)
pass(@args);
this.mail_notify = {player};
player:set_current_message(this, 0, 0, 1);
this.moderated = 1;
else
raise(E_PERM);
endif
.
#35:0
"$you:verb_sub(STR verbspec) -> returns verbspec conjugated for singular use as if `you' were saying it.";
return $gender_utils:get_conj(args[1], this);
x = args[1];
len = length(x);
if ((len > 3) && (rindex(x, "n't") == (len - 3)))
return this:verb_sub(x[1..len - 3]) + "n't";
endif
for y in (this.conjugations)
if (x == y[1])
return y[2];
endif
endfor
for y in ({{"ches", "ch"}, {"ies", "y"}, {"sses", "ss"}, {"shes", "sh"}, {"s", ""}})
if ((len > length(y[1])) && (rindex(x, y[1]) == ((len - length(y[1])) + 1)))
return x[1..len - length(y[1])] + y[2];
endif
endfor
return x;
.
#35:1
"$you:say_action(message [,who [,thing, [,where [, excluding-whom]]]])";
"announce 'message' with pronoun substitution as if it were just ";
"  where:announce_all_but(excluding-whom, ";
"    $string_utils:pronoun_sub(message, who, thing, where));";
"except that who (player), dobj, and iobj get modified messages, with the appropriate use of 'you' instead of their name, and except that `excluding-whom' isn't really a valid variable name.";
"who       default player";
"thing     default object that called this verb";
"where     default who.location";
"excluding default {}";
{msg, ?who = player, ?thing = caller, ?where = who.location, ?excluding = {}} = args;
you = this;
if (typeof(msg) == LIST)
tell = "";
for x in (msg)
tell = tell + ((typeof(x) == STR) ? x | x[random(length(x))]);
endfor
else
tell = msg;
endif
if (!(who in excluding))
who:tell($string_utils:pronoun_sub(this:fixpos(tell, "%n"), you, thing, where));
endif
if ($object_utils:has_callable_verb(where, "announce_all_but"))
where:announce_all_but({dobj, who, iobj, @excluding}, $string_utils:pronoun_sub(tell, who, thing, where));
endif
if ((valid(dobj) && (dobj != who)) && (!(dobj in excluding)))
x = dobj;
dobj = you;
x:tell($string_utils:pronoun_sub(this:fixpos(tell, "%d"), who, thing, where));
dobj = x;
endif
if (valid(iobj) && (!(iobj in {who, dobj, @excluding})))
x = iobj;
iobj = you;
x:tell($string_utils:pronoun_sub(this:fixpos(tell, "%i"), who, thing, where));
iobj = x;
endif
.
#35:2
"This is horribly dwimmy.  E.g. %x's gets turned into your, %X's gets turned into Your, and %X'S gets turned into YOUR. --Nosredna";
upper = $string_utils:uppercase(args[2]);
allupper = upper + "'S";
upper = upper + "'s";
lower = $string_utils:lowercase(args[2]) + "'s";
return strsub(strsub(strsub(args[1], lower, "your", 1), upper, "Your", 1), allupper, "YOUR", 1);
.
#35:3
"Copied from you (#67923):reflexive [verb author Blob (#21528)] at Wed Jul 13 05:09:32 2005 PDT";
":reflexive(msg, %[di])";
"Make a message reflexive by replacing %d or %i with %r.";
{msg, pos} = args;
upper = $string_utils:uppercase(pos) + "'s";
lower = $string_utils:lowercase(pos) + "'s";
msg = strsub(msg, lower, "%p", 1);
msg = strsub(msg, upper, "%P", 1);
msg = strsub(msg, pos, "%r", 1);
msg = strsub(msg, $string_utils:uppercase(pos), "%R", 1);
return msg;
.
#35:4
"$you:say_action(message [,who [,thing, [,where [, excluding-whom]]]])";
"announce 'message' with pronoun substitution as if it were just ";
"  where:announce_all_but(excluding-whom, ";
"    $string_utils:pronoun_sub(message, who, thing, where));";
"except that who (player), dobj, and iobj get modified messages, with the appropriate use of 'you' instead of their name, and except that `excluding-whom' isn't really a valid variable name.";
"who       default player";
"thing     default object that called this verb";
"where     default who.location";
"excluding default {}";
{msg, ?who = player, ?thing = caller, ?where = who.location, ?excluding = {}} = args;
you = this;
if (typeof(msg) == LIST)
tell = "";
for x in (msg)
tell = tell + ((typeof(x) == STR) ? x | x[random(length(x))]);
endfor
else
tell = msg;
endif
if (who == dobj)
tell = this:reflexive(tell, "%d");
endif
if (who == iobj)
tell = this:reflexive(tell, "%i");
endif
if (!(who in excluding))
msg = tell;
x = dobj;
y = iobj;
dobj = (dobj == who) ? you | dobj;
iobj = (iobj == who) ? you | iobj;
who:tell($string_utils:pronoun_sub(this:fixpos(msg, "%n"), you, thing, where));
dobj = x;
iobj = y;
endif
if ($object_utils:has_callable_verb(where, "announce_all_but"))
where:announce_all_but({dobj, who, iobj, @excluding}, $string_utils:pronoun_sub(tell, who, thing, where));
endif
if ((valid(dobj) && (dobj != who)) && (!(dobj in excluding)))
x = dobj;
y = iobj;
msg = this:fixpos(tell, "%d");
if (dobj == iobj)
iobj = you;
msg = this:fixpos(msg, "%i");
endif
dobj = you;
x:tell($string_utils:pronoun_sub(msg, who, thing, where));
dobj = x;
iobj = y;
endif
if (valid(iobj) && (!(iobj in {who, dobj, @excluding})))
x = iobj;
iobj = you;
x:tell($string_utils:pronoun_sub(this:fixpos(tell, "%i"), who, thing, where));
iobj = x;
endif
.
#36:0
if (caller_perms().wizard)
pass(@args);
this.mail_forward = {$owner};
endif
.
#37:0
"find(string[,n]) => datum corresponding to string with the search starting at node \" \"+string[1..n], n defaults to 0 (root node), $ambiguous_match or $failed_match";
"find_key(string[,n]) is like :find but returns the full string key rather than the associated datum.  Note that if several string keys present in the db share a common prefix, :find_key(prefix) will return $ambiguous_match, but if there is a unique datum associated with all of these strings :find(prefix) will return it rather than $ambiguous_match.";
"Assumes n<=length(string)";
{search, ?sofar = 0} = args;
rest = search;
prefix = search[1..sofar];
rest[1..sofar] = "";
info = this.(" " + prefix);
data = (verb == "find") ? this.data | 3;
if (i = search in info[3])
"...exact match for one of the strings in this node...";
return info[data][i];
elseif (index(info[1], rest) == 1)
"...ambiguous iff there's more than one object represented in this node..";
return this:_only(prefix, data);
elseif (index(rest, info[1]) != 1)
"...search string doesn't agree with common portion...";
return $failed_match;
elseif (index(info[2], search[nsofar = (sofar + length(info[1])) + 1]))
"...search string follows one of continuations leading to other nodes...";
return this:(verb)(search, nsofar);
else
"...search string may partially match one of the strings in this node...";
for i in [1..length(exacts = info[3])]
if (index(exacts[i], search) == 1)
return info[data][i];
endif
endfor
return $failed_match;
endif
.
#37:1
{search, ?sofar = 0} = args;
rest = search;
prefix = search[1..sofar];
rest[1..sofar] = "";
info = this.(" " + prefix);
if (i = search in info[3])
return info[this.data][i];
elseif ((length(rest) <= (common = length(info[1]))) || (rest[1..common] != info[1]))
return $failed_match;
elseif (index(info[2], search[(sofar + common) + 1]))
return this:find_exact(search, (sofar + common) + 1);
else
return $failed_match;
endif
.
#37:2
":find_all(string [,n=0])";
"assumes n <= length(string)";
{search, ?sofar = 0} = args;
rest = search;
prefix = search[1..sofar];
rest[1..sofar] = "";
info = this.(" " + prefix);
data = (verb == "find_all") ? this.data | 3;
if (index(info[1], rest) == 1)
"...return entire subtree.";
return this:((data == 3) ? "_every_key" | "_every")(prefix);
elseif (index(rest, info[1]) != 1)
"...common portion doesn't agree.";
return {};
elseif (index(info[2], rest[1 + (common = length(info[1]))]))
"...matching strings are in a subnode.";
return this:(verb)(search, (sofar + common) + 1);
else
"...matching string is in info[3].  length(rest) > common,";
"...so there will be at most one matching string.";
for i in [1..length(info[3])]
if (index(info[3][i], search) == 1)
return {info[data][i]};
endif
endfor
return {};
endif
.
#37:3
":_only(prefix,data) => if all strings in this node have the same datum, return it, otherwise, return $ambiguous_match.";
if (caller != this)
raise(E_PERM);
endif
{prefix, data} = args;
info = this.(" " + prefix);
if (data == 3)
"... life is much simpler if there's no separate datum.";
"... if there's more than one string here, we barf.";
if (info[2] || (length(info[3]) > 1))
return $ambiguous_match;
elseif (info[3])
return info[3][1];
else
"..this can only happen with the root node of an empty db.";
return $failed_match;
endif
elseif (info[2])
what = this:_only(tostr(prefix, info[1], info[2][1]), data);
if (what == $ambiguous_match)
return what;
endif
elseif (info[data])
what = info[data][1];
info[data] = listdelete(info[data], 1);
else
"..this can only happen with the root node of an empty db.";
return $failed_match;
endif
for x in (info[data])
if (what != x)
return $ambiguous_match;
endif
endfor
for i in [2..length(info[2])]
if (what != this:_only(tostr(prefix, info[1], info[2][i]), data))
return $ambiguous_match;
endif
endfor
return what;
.
#37:4
if (caller != this)
raise(E_PERM);
endif
info = this.(" " + args[1]);
prefix = args[1] + info[1];
r = $list_utils:remove_duplicates(info[4]);
for i in [1..length(branches = info[2])]
for new in (this:_every(prefix + branches[i]))
r = setadd(r, new);
endfor
endfor
return r;
.
#37:5
if (caller != this)
raise(E_PERM);
endif
info = this.(" " + args[1]);
prefix = args[1] + info[1];
r = info[3];
for i in [1..length(branches = info[2])]
for new in (this:_every_key(prefix + branches[i]))
r = setadd(r, new);
$command_utils:suspend_if_needed(0);
endfor
$command_utils:suspend_if_needed(0);
endfor
return r;
.
#37:6
":insert([n,]string,datum) -- inserts <string,datum> correspondence into tree starting at node \" \"+string[1..n], n defaulting to 0 (root node).";
"Assumes length(string) >= n";
"Returns {old_datum} (or 1) if there was a <string,old_datum> correspondence there before, otherwise returns 0";
if (!($perm_utils:controls(caller_perms(), this) || (caller == this)))
return E_PERM;
endif
has_datum = this.data > 3;
if (typeof(sofar = args[1]) == INT)
search = args[2];
datum = has_datum ? args[3] | 0;
else
search = sofar;
sofar = 0;
datum = has_datum ? args[2] | 0;
endif
prefix = search[1..sofar];
info = this.(" " + prefix);
if (i = search in info[3])
"... exact match ...";
if (has_datum)
previous = {info[this.data][i]};
info[this.data][i] = datum;
this:set_node(prefix, @info);
return previous;
else
return 1;
endif
endif
rest = search;
rest[1..sofar] = "";
if (index(rest, info[1]) != 1)
"... find where new string disagrees with common portion...";
c = $string_utils:common(rest, info[1]) + 1;
"... make a new node with a shorter common portion....";
this:make_node(prefix + info[1][1..c], @listset(info, info[1][c + 1..$], 1));
this:set_node(prefix, info[1][1..c - 1], info[1][c], {search}, @has_datum ? {{datum}} | {});
return 0;
elseif (rest == info[1])
".. new string == common portion, insert...";
info[3] = {@info[3], search};
if (has_datum)
info[this.data] = {@info[this.data], datum};
endif
this:set_node(prefix, @info);
return 0;
elseif (index(info[2], search[nsofar = (sofar + length(info[1])) + 1]))
"... new string matches pre-existing continuation. insert in subnode....";
return this:insert(nsofar, search, datum);
else
"... new string may blow away one of the exact matches (i.e., matches one of them up to the first character beyond the common portion) in which case we need to create a new subnode....";
s = search[1..nsofar];
for m in (info[3])
if (index(m, s) == 1)
i = m in info[3];
"... we know m != search ...";
"... string m has been blown away.  create new node ...";
cbegin = cafter = length(s) + 1;
cend = $string_utils:common(search, m);
this:make_node(s, m[cbegin..cend], "", {search, m}, @has_datum ? {{datum, info[this.data][i]}} | {});
this:set_node(prefix, info[1], info[2] + s[nsofar], listdelete(info[3], i), @has_datum ? {listdelete(info[this.data], i)} | {});
return 0;
endif
endfor
"... new string hasn't blown away any of the exact matches, insert it as a new exact match...";
info[3] = {search, @info[3]};
if (has_datum)
info[this.data] = {datum, @info[this.data]};
endif
this:set_node(prefix, @info);
return 0;
endif
.
#37:7
":delete(string[,n]) deletes any <string,something> pair from the tree starting at node \" \"+string[1..n], n defaulting to 0 (root node)";
"Returns {something} if such a pair existed, otherwise returns 0";
"If that node is not the root node and ends up containing only one string and no subnodes, we kill it and return {something,string2,something2} where <string2,something2> is the remaining pair.";
if (!($perm_utils:controls(caller_perms(), this) || (caller == this)))
return E_PERM;
endif
{search, ?sofar = 0} = args;
rest = search;
prefix = search[1..sofar];
rest[1..sofar] = "";
info = this.(" " + prefix);
if (i = search in info[3])
previous = {info[this.data][i]};
info[3] = listdelete(info[3], i);
if (this.data > 3)
info[this.data] = listdelete(info[this.data], i);
endif
elseif ((rest == info[1]) || ((index(rest, info[1]) != 1) || (!index(info[2], search[d = (sofar + length(info[1])) + 1]))))
"... hmm string isn't in here...";
return 0;
elseif ((previous = this:delete(search, d)) && (length(previous) > 1))
i = index(info[2], search[d]);
info[2][i..i] = "";
info[3] = {previous[2], @info[3]};
if (this.data > 3)
info[this.data] = {previous[3], @info[this.data]};
endif
previous = previous[1..1];
else
return previous;
endif
if ((!prefix) || ((length(info[3]) + length(info[2])) != 1))
this:set_node(prefix, @info);
return previous;
elseif (info[3])
this:kill_node(prefix);
return {@previous, info[3][1], info[this.data][1]};
else
sub = this.(" " + (p = tostr(prefix, info[1], info[2])));
this:kill_node(p);
this:set_node(prefix, @listset(sub, tostr(info[1], info[2], sub[1]), 1));
return previous;
endif
.
#37:8
":delete2(string,datum[,n]) deletes the pair <string,datum> from the tree starting at node \" \"+string[1..n], n defaulting to 0 (root node)";
"Similar to :delete except that if the entry for that string has a different associated datum, it will not be removed.  ";
":delete2(string,datum) is equivalent to ";
" ";
"  if(this:find_exact(string)==datum) ";
"    this:delete(string); ";
"  endif";
if (!($perm_utils:controls(caller_perms(), this) || (caller == this)))
return E_PERM;
endif
{search, datum, ?sofar = 0} = args;
rest = search;
prefix = search[1..sofar];
rest[1..sofar] = "";
info = this.(" " + prefix);
if (i = search in info[3])
previous = {info[this.data][i]};
if (previous[1] != datum)
return previous;
endif
info[3] = listdelete(info[3], i);
if (this.data > 3)
info[this.data] = listdelete(info[this.data], i);
endif
elseif ((rest == info[1]) || ((index(rest, info[1]) != 1) || (!index(info[2], search[d = (sofar + length(info[1])) + 1]))))
"... hmm string isn't in here...";
return 0;
elseif ((previous = this:delete2(search, datum, d)) && (length(previous) > 1))
i = index(info[2], search[d]);
info[2][i..i] = "";
info[3] = {previous[2], @info[3]};
if (this.data > 3)
info[this.data] = {previous[3], @info[this.data]};
endif
previous = previous[1..1];
else
return previous;
endif
if ((!prefix) || ((length(info[3]) + length(info[2])) != 1))
this:set_node(prefix, @info);
return previous;
elseif (info[3])
this:kill_node(prefix);
return {@previous, info[3][1], info[this.data][1]};
else
sub = this.(" " + (p = tostr(prefix, info[1], info[2])));
this:kill_node(p);
this:set_node(prefix, @listset(sub, tostr(info[1], info[2], sub[1]), 1));
return previous;
endif
.
#37:9
return (caller != this) ? E_PERM | (this.(" " + args[1]) = listdelete(args, 1));
.
#37:10
"WIZARDLY";
return (caller != this) ? E_PERM | add_property(this, " " + args[1], listdelete(args, 1), {$generic_db.owner, this.node_perms});
.
#37:11
"WIZARDLY";
return (caller != this) ? E_PERM | delete_property(this, " " + args[1]);
.
#37:12
"WIZARDLY";
if (!($perm_utils:controls(caller_perms(), this) || (caller == this)))
return E_PERM;
endif
if (args && ((d = args[1]) in {3, 4}))
this.data = d;
endif
root = {"", "", {}, @(this.data > 3) ? {{}} | {}};
"...since the for loop contains a suspend, we want to keep people";
"...from getting at properties which are now garbage but which we";
"...haven't had a chance to wipe yet.  Somebody might yet succeed";
"...in adding something; thus we have the outer while loop.";
this:set_node("", 37);
while (this.(" ") != root)
this:set_node("", @root);
for p in (properties(this))
if ((p[1] == " ") && (p != " "))
delete_property(this, p);
endif
"...Bleah; db is inconsistent now....";
"...At worst someone will add something that references an";
"...existing property.  He will deserve to die...";
$command_utils:suspend_if_needed(0);
endfor
endwhile
.
#37:13
if (!($perm_utils:controls(caller_perms(), this) || (caller == this)))
return E_PERM;
endif
this:_kill_subtrees("", 0);
this:clearall(@args);
.
#37:14
":_kill_subtree(node,count)...wipes out all subtrees";
"...returns count + number of nodes removed...";
if (!($perm_utils:controls(caller_perms(), this) || (caller == this)))
return E_PERM;
endif
info = this.(" " + (prefix = args[1]));
count = args[2];
if ((ticks_left() < 500) || (seconds_left() < 2))
player:tell("...", count);
suspend(0);
endif
for i in [1..length(info[2])]
count = this:_kill_subtrees(n = tostr(prefix, info[1], info[2][i]), count) + 1;
this:kill_node(n);
endfor
return count;
.
#37:15
info = this.(" " + (prefix = (args || {""})[1]));
depth = 0;
string = prefix;
if ((ticks_left() < 500) || (seconds_left() < 2))
player:tell("...", prefix);
suspend(0);
endif
for i in [1..length(info[2])]
if ((r = this:depth(tostr(prefix, info[1], info[2][i])))[1] > depth)
depth = r[1];
string = r[2];
endif
endfor
return {depth + 1, string};
.
#37:16
info = this.(" " + (prefix = args[1]));
count = length(info[3]) + args[2];
if ((ticks_left() < 500) || (seconds_left() < 2))
player:tell("...", count);
suspend(0);
endif
for i in [1..length(info[2])]
count = this:count_entries(tostr(prefix, info[1], info[2][i]), count);
endfor
return count;
.
#37:17
info = this.(" " + (prefix = args[1]));
count = args[2];
for s in (info[3])
count = count + length(s);
endfor
if ((ticks_left() < 500) || (seconds_left() < 2))
player:tell("...", count);
suspend(0);
endif
for i in [1..length(info[2])]
count = this:count_chars(tostr(prefix, info[1], info[2][i]), count);
endfor
return count;
.
#37:18
"count [entries|chars] in <db>";
"  reports on the number of distinct string keys or the number of characters";
"  in all string keys in the db";
if (index("entries", dobjstr) == 1)
player:tell(this:count_entries("", 0), " strings in ", this.name, "(", this, ")");
elseif (index("chars", dobjstr) == 1)
player:tell(this:count_chars("", 0), " chars in ", this.name, "(", this, ")");
else
player:tell("Usage: ", verb, " entries|chars in <db>");
endif
.
#37:19
"Create a stand-in for the core-extraction process";
"  (rather than change the ownership on 80000 properties only to delete them).";
{core_variant, is_mcd} = args;
if (!is_mcd)
return this;
elseif (caller != #0)
raise(E_PERM);
elseif (children(this) || (length(properties(this)) < 100))
return this;
endif
proxy = $recycler:_create(parent(this), this.owner);
player:tell("Creating proxy object ", proxy, " for ", this.name, " (", this, ")");
for p in ({"name", "r", "w", "f"})
proxy.(p) = this.(p);
endfor
for p in ($object_utils:all_properties_suspended(parent(this)))
if (!is_clear_property(this, p))
$command_utils:suspend_if_needed(0, "...setting props from parent...");
proxy.(p) = this.(p);
endif
endfor
for p in (properties(this))
$command_utils:suspend_if_needed(0);
if ((p[1] == " ") && (p != " "))
continue;
endif
add_property(proxy, p, this.(p), property_info(this, p));
endfor
for v in [1..length(verbs(this))]
add_verb(proxy, verb_info(this, v), verb_args(this, v));
set_verb_code(proxy, v, verb_code(this, v));
$command_utils:suspend_if_needed(0);
endfor
proxy:clearall();
return proxy;
.
#38:0
"eval(code)";
"Evaluate code with $no_one's permissions (so you won't damage anything).";
"If code does not begin with a semicolon, set this = caller (in the code to be evaluated) and return the value of the first `line' of code.  This means that subsequent lines will not be evaluated at all.";
"If code begins with a semicolon, set this = caller and let the code decide for itself when to return a value.  This is how to do multi-line evals.";
exp = args[1];
if (this:bad_eval(exp))
return E_PERM;
endif
set_task_perms(this);
if (exp[1] != ";")
return eval(tostr("this=", caller, "; return ", exp, ";"));
else
return eval(tostr("this=", caller, ";", exp, ";"));
endif
.
#38:1
return 0;
.
#38:2
":eval_d(code)";
"exactly like :eval except that the d flag is unset";
"Evaluate code with $no_one's permissions (so you won't damage anything).";
"If code does not begin with a semicolon, set this = caller (in the code to be evaluated) and return the value of the first `line' of code.  This means that subsequent lines will not be evaluated at all.";
"If code begins with a semicolon, set this = caller and let the code decide for itself when to return a value.  This is how to do multi-line evals.";
exp = args[1];
if (this:bad_eval(exp))
return E_PERM;
endif
set_task_perms(this);
if (exp[1] != ";")
return $code_utils:eval_d(tostr("this=", caller, "; return ", exp, ";"));
else
return $code_utils:eval_d(tostr("this=", caller, ";", exp, ";"));
endif
.
#38:3
"call_verb(object, verb name, args)";
"Call verb with $no_one's permissions (so you won't damage anything).";
"One could do this with $no_one:eval, but ick.";
set_task_perms(this);
return args[1]:(args[2])(@args[3]);
.
#38:4
":bad_eval(exp)";
"  Returns 1 if the `exp' is inappropriate for use by $no_one.  In particular, if `exp' contains calls to `eval', `fork', `suspend', or `call_function' it is bad.  Similarly, if `player' is a nonvalid object (or a child of $garbage) the expression is considered `bad' because it is likely an attempt to anonymously spoof.";
"  At present, the checks for bad builtins are overzealous.  It should check for delimited uses of the above calls, in case someone has a variable called `prevalent'.";
{exp} = args;
if (((index(exp, "eval") || index(exp, "fork")) || index(exp, "suspend")) || index(exp, "call_function"))
"Well, they had one of the evil words in here.  See if it was in a quoted string or not -- we want to permit player:tell(\"Gentlemen use forks.\")";
for bad in ({"eval", "fork", "suspend", "call_function"})
tempindex = 1;
while (l = index(exp[tempindex..$], bad, 0))
if ($code_utils:inside_quotes(exp[1..(tempindex + l) - 1]))
tempindex = tempindex + l;
else
"it's there, bad unquoted string";
return 1;
endif
endwhile
endfor
endif
if ((!$recycler:valid(player)) && (player >= #0))
return 1;
endif
return 0;
.
#38:5
if (!caller_perms().wizard)
return E_PERM;
else
return pass(@args);
endif
.
#39:0
":load() -- reloads the player_db with the names of all existing players.";
"This routine calls suspend() if it runs out of time.";
".frozen is set to 1 while the load is in progress so that other routines are warned and don't try to do any updates.  Sometimes, an update is unavoidable (e.g., player gets recycled) in which case the offending routine should set .frozen to 2, causing the load to start over at the beginning.";
if ((caller != this) && (!$perm_utils:controls(caller_perms(), this)))
return E_PERM;
endif
"...N.B. clearall suspends, therefore we put the .frozen mark on FIRST...";
this.frozen = 1;
this:clearall();
for p in (players())
this:suspend_restart(p);
"... note that if a player is recycled or toaded during the suspension,...";
"... it won't be removed from the for loop iteration; thus this test:     ";
if (valid(p) && is_player(p))
if (typeof(po = this:find_exact(p.name)) == ERR)
player:tell(p.name, ":  ", po);
return;
elseif (po != p)
if (valid(po) && is_player(po))
player:tell("name `", p.name, "' for ", p, " subsumes alias for ", po.name, "(", po, ").");
endif
this:insert(p.name, p);
endif
for a in (p.aliases)
this:suspend_restart(p);
if (index(a, " ") || index(a, "	"))
"don't bother, space or tab";
elseif (typeof(ao = this:find_exact(a)) == ERR)
player:tell(a, ":  ", ao);
return;
elseif (!(valid(ao) && is_player(ao)))
this:insert(a, p);
elseif (ao != p)
player:tell("alias `", a, "' for ", p.name, "(", p, ") used by ", ao.name, "(", ao, ").");
endif
endfor
endif
endfor
this.frozen = 0;
.
#39:1
":check() -- checks for recycled and toaded players that managed not to get expunged from the db.";
for p in (properties($player_db))
if ((ticks_left() < 500) || (seconds_left() < 2))
player:tell("...", p);
suspend(0);
endif
if (p[1] == " ")
nlist = this.(p)[3];
olist = this.(p)[4];
for i in [1..length(nlist)]
if (valid(olist[i]) && (is_player(olist[i]) && (nlist[i] in olist[i].aliases)))
else
player:tell(".", p[2..$], " <- ", nlist[i], " ", olist[i]);
endif
endfor
endif
endfor
player:tell("done.");
.
#39:2
if (caller_perms().wizard)
pass(@args);
this.reserved = {};
this:load();
endif
.
#39:3
":available(name,who) => 1 if a name is available for use, or the object id of whoever is currently using it, or 0 if the name is otherwise forbidden.";
"If $player_db is not .frozen and :available returns 1, then $player:set_name will succeed.";
{name, ?target = valid(caller) ? caller | player} = args;
if ((name in this.stupid_names) || (name in this.reserved))
return 0;
elseif (target in $wiz_utils.rename_restricted)
return 0;
elseif (((((!name) || index(name, " ")) || index(name, "\\")) || index(name, "\"")) || index(name, "	"))
return 0;
elseif (index("*#()", name[1]))
return 0;
elseif (match(name, "(#[0-9]+)"))
return 0;
elseif (valid(who = this:find_exact(name)) && is_player(who))
return who;
elseif ($object_utils:has_callable_verb($local, "legal_name") && (!$local:legal_name(name, target)))
return 0;
else
return 1;
endif
.
#39:4
"used during :load to do the usual out-of-time check.";
"if someone makes a modification during the suspension (indicated by this.frozen being set to 2), we have to restart the entire load.";
if (caller != this)
return E_PERM;
elseif ($command_utils:running_out_of_time())
player:tell("...", args[1]);
set_task_perms($byte_quota_utils:task_perms());
suspend(0);
if (this.frozen != 1)
player:tell("...argh... restarting $player_db:load...");
fork (0)
this:load();
endfork
kill_task(task_id());
endif
endif
.
#39:5
":why_bad_name(player, namespec) => Returns a message explaining why a player name change is invalid.  Stolen from APHiD's #15411:name_okay.";
who = args[1];
name = $building_utils:parse_names(args[2])[1];
si = index(name, " ");
qi = index(name, "\"");
bi = index(name, "\\");
ti = index(name, "	");
if (((si || qi) || bi) || ti)
return tostr("You may not use a name containing ", $string_utils:english_list({@si ? {"spaces"} | {}, @qi ? {"quotation marks"} | {}, @bi ? {"backslashes"} | {}, @ti ? {"tabs"} | {}}, "ERROR", " or "), ".  Try \"", strsub(strsub(strsub(strsub(name, " ", "_"), "\"", "'"), "\\", "/"), "	", "___"), "\" instead.");
elseif (name == "")
return tostr("You may not use a blank name.");
elseif (i = index("*#()", name[1]))
return tostr("You may not begin a name with the \"", "*#()"[i], "\" character.");
elseif (match(name, "(#[0-9]+)"))
return tostr("A name can't contain a parenthesized object number.");
elseif (name in $player_db.stupid_names)
return tostr("The name \"", name, "\" would probably cause problems in command parsing or similar usage.");
elseif (name in $player_db.reserved)
return tostr("The name \"", name, "\" is reserved.");
elseif (length(name) > $login.max_player_name)
return tostr("The name \"", name, "\" is too long.  Maximum name length is ", $login.max_player_name, " characters.");
elseif ((valid(match = $player_db:find_exact(name)) && is_player(match)) && (who != match))
return tostr("The name \"", name, "\" is already being used by ", match.name, "(", match, ").");
elseif ($player_db.frozen)
return tostr("$player_db is not accepting new changes at the moment.");
elseif ($object_utils:has_callable_verb($local, "legal_name") && (!$local:legal_name(name, who)))
return "That name is reserved.";
elseif (who in $wiz_utils.rename_restricted)
return "This player is not allowed to change names.";
endif
.
#40:0
if (typeof(mf = this.(verb)) == STR)
return $string_utils:pronoun_sub(mf, @args);
else
return mf;
endif
.
#40:1
":receive_message(msg,from)";
if ((!$perm_utils:controls(caller_perms(), this)) && (caller != this))
return E_PERM;
endif
if (this:mail_option("no_dupcc", args[1][1], args[1][2]))
"pass to :mail_option the TEXT versions of who the message is from and to";
recipients = setremove($mail_agent:parse_address_field(args[1][3]), this);
for x in (recipients)
if (this:get_current_message(x))
return 0;
endif
endfor
endif
if (this:mail_option("netmail"))
msg = args[1];
message = {"Forwarded: " + msg[4], "Original-date: " + ctime(msg[1]), "Original-From: " + msg[2], "Original-To: " + msg[3], ((("Reply-To: " + $string_utils:substitute(args[2].name, {{"@", "%"}})) + "@") + $network.moo_name) + ".moo.mud.org"};
for x in (msg[5..$])
message = {@message, @$generic_editor:fill_string(x, this:linelen())};
endfor
if (this:send_self_netmail(message, @listdelete(args, 1)) == 0)
return 0;
endif
endif
set_task_perms(this.owner);
new = this:new_message_num();
ncur = (new <= 1) ? 0 | min(this:current_message(this), new);
this:set_current_message(this, ncur);
new = max(new, ncur + 1);
this.messages = {@this.messages, {new, args[1]}};
"... new-mail notification is now done directly by $mail_agent:raw_send";
"... see :notify_mail...";
return new;
.
#40:2
":display_message(preamble,msg) --- prints msg to player.";
vb = ((this._mail_task == task_id()) || (caller == $mail_editor)) ? "notify_lines_suspended" | "tell_lines_suspended";
preamble = args[1];
player:(vb)({@(typeof(preamble) == LIST) ? preamble | {preamble}, @args[2], "--------------------------"});
.
#40:3
"parse_message_seq(strings,cur)         => msg_seq";
"messages_in_seq(msg_seq);              => text of messages in msg_seq";
"display_seq_headers(msg_seq[,current]) :displays summary lines of those msgs";
"rmm_message_seq(msg_seq)               => string giving msg numbers removed";
"undo_rmm()    => msg_seq of restored messages";
"expunge_rmm() => number of messages expunged";
"list_rmm()    => number of messages awaiting expunge";
"renumber(cur) => {number of messages in folder, new_cur}";
"";
"See the corresponding routines on $mail_agent.";
if ((caller == $mail_agent) || $perm_utils:controls(caller_perms(), this))
set_task_perms(this.owner);
return $mail_agent:(verb)(@args);
else
return E_PERM;
endif
.
#40:4
return $mail_agent:msg_summary_line(@args);
.
#40:5
":msg_text(@msg) => list of strings.";
"msg is a mail message (in the usual transmission format) being read BY this player.";
"The default version of recipient:msg_full_text calls this to obtain the actual list of strings to display.  (this is a badly named verb).";
"returns the actual list of strings to display.";
return $mail_agent:to_text(@args);
.
#40:6
":notify_mail(from,recipients[,msgnums])";
" used by $mail_agent:raw_send to notify this player about mail being sent";
" from <from> to <recipients>.  <msgnums> if given gives the message number(s) assigned (in the event that the corresponding recipient actually kept the mail)";
if (!$object_utils:connected(this))
return;
elseif (!((caller in {this, $mail_agent}) || $perm_utils:controls(caller_perms(), this)))
return E_PERM;
else
{from, recipients, ?msgnums = {}} = args;
from_name = $mail_agent:name(from);
"... msgnums may be shorter than recipients or may have some slots filled";
"... with 0's if msg numbers are not available for some recipients.";
if ((t = this in recipients) && ((length(msgnums) >= t) && msgnums[t]))
"... you are getting the mail and moreover your :receive_message kept it.";
namelist = $string_utils:english_list($list_utils:map_arg($mail_agent, "name", setremove(recipients, this)), "");
this:notify(tostr("You have new mail (", msgnums[t], ") from ", from_name, namelist ? " which was also sent to " + namelist | "", "."));
if (!this:mail_option("expert"))
this:notify(tostr("Type `help mail' for info on reading it."));
endif
else
"... vanilla notification; somebody got sent mail and you're finding out.";
namelist = $string_utils:english_list({@t ? {"You"} | {}, @$list_utils:map_arg($mail_agent, "name", setremove(recipients, this))}, "");
this:tell(tostr(namelist, (length(recipients) == 1) ? " has" | " have", " just been sent new mail by ", from_name, "."));
endif
endif
.
#40:7
":current_message([recipient])";
" => current message number for the given recipient (defaults to this).";
" => 0 if we have no record of that recipient";
"      or current message happens to be 0.";
"This verb is mostly obsolete; consider using :get_current_message()";
if ((caller != this) && (!$perm_utils:controls(caller_perms(), this)))
raise(E_PERM);
elseif ((!args) || (args[1] == this))
return this.current_message[1];
elseif (a = $list_utils:assoc(args[1], this.current_message))
return a[2];
else
return 0;
endif
.
#40:8
":get_current_message([recipient])";
" => {msg_num, last_read_date} for the given recipient.";
" => 0 if we have no record of that recipient.";
if ((caller != this) && (!$perm_utils:controls(caller_perms(), this)))
raise(E_PERM);
elseif ((!args) || (args[1] == this))
if (length(this.current_message) < 2)
"Whoops, this got trashed---fix it up!";
this.current_message = {0, time(), @this.current_message};
endif
return this.current_message[1..2];
elseif (a = $list_utils:assoc(args[1], this.current_message))
return a[2..3];
else
return 0;
endif
.
#40:9
":set_current_message(recipient[,number[,date]])";
"Returns the new {number,last-read-date} pair for recipient.";
if ((caller != this) && (!$perm_utils:controls(caller_perms(), this)))
raise(E_PERM);
endif
{recip, ?number = E_NONE, ?date = 0, ?force = 0} = args;
cm = this.current_message;
if (recip == this)
this.current_message[2] = max(date, cm[2]);
if (number != E_NONE)
this.current_message[1] = number;
endif
return this.current_message[1..2];
elseif (i = $list_utils:iassoc(recip, cm))
if (force)
"`force' is assumed to come from `@unread'";
return (this.current_message[i] = {recip, number, date})[2..3];
else
return (this.current_message[i] = {recip, (number == E_NONE) ? cm[i][2] | number, max(date, cm[i][3])})[2..3];
endif
else
entry = {recip, (number != E_NONE) && number, date};
this.current_message = {@cm, entry};
return entry[2..3];
endif
.
#40:10
":make_current_message(recipient[,index])";
"starts a new current_message record for recipient.";
"index, if given, indicates where recipient is to be";
"  placed (n = at or after nth entry in .current_message).";
recip = args[1];
cm = this.current_message;
if (length(args) > 1)
i = max(2, min(args[2], length(cm)));
else
i = 0;
endif
if ((caller != this) && (!$perm_utils:controls(caller_perms(), this)))
raise(E_PERM);
elseif (recip == this)
"...self...";
elseif (j = $list_utils:iassoc(recip, cm))
"...already present...";
if (i)
if (j < i)
this.current_message = {@cm[1..j - 1], @cm[j + 1..i], cm[j], @cm[i + 1..$]};
elseif (j > (i + 1))
this.current_message = {@cm[1..i], cm[j], @cm[i + 1..j - 1], @cm[j + 1..$]};
endif
endif
else
this.current_message = listappend(cm, {recip, 0, 0}, @i ? {i} | {});
endif
.
#40:11
":kill_current_message(recipient)";
"entirely forgets current message for this recipient...";
"Returns true iff successful.";
if ((caller != this) && (!$perm_utils:controls(caller_perms(), this)))
raise(E_PERM);
else
return ((recip = args[1]) != this) && ((i = $list_utils:iassoc(recip, cm = this.current_message)) && (this.current_message = listdelete(cm, i)));
endif
.
#40:12
":current_folder() => default folder to use, always an object, usually `this'";
set_task_perms(caller_perms());
return ((!this:mail_option("sticky")) || this.current_folder) && this;
.
#40:13
set_task_perms(caller_perms());
return this.current_folder = args[1];
.
#40:14
":parse_folder_spec(verb,args,expected_preposition[,allow_trailing_args_p])";
" => {folder, msg_seq_args, trailing_args}";
set_task_perms(caller_perms());
folder = this:current_folder();
if (!prepstr)
return {folder, args[2], {}};
endif
{verb, args, prep, ?extra = 0} = args;
p = prepstr in args;
if (prepstr != prep)
"...unexpected preposition...";
if (extra && (!index(prepstr, " ")))
return {folder, args[1..p - 1], args[p..$]};
else
player:tell("Usage:  ", verb, " [<message numbers>] [", prep, " <folder/list-name>]");
endif
elseif (!((p < length(args)) && (fname = args[p + 1])))
"...preposition but no iobj...";
player:tell(verb, " ", $string_utils:from_list(args, " "), " WHAT?");
elseif ($mail_agent:match_failed(folder = $mail_agent:match_recipient(fname, this), fname))
"...bogus mail folder...";
else
return {folder, args[1..p - 1], args[p + 2..$]};
endif
return 0;
.
#40:15
":parse_mailread_cmd(verb,args,default,prep[,trailer])";
"  handles anything of the form  `VERB message_seq [PREP folder ...]'";
"    default is the default msg-seq to use if none given";
"    prep is the expected prepstr (assumes prepstr is set), usually `on'";
"    trailer, if present and true, indicates trailing args are permitted.";
"  returns {recipient object, message_seq, current_msg,\"...\"} or 0";
set_task_perms(caller_perms());
if (!(pfs = this:parse_folder_spec(@listdelete(args, 3))))
return 0;
endif
{verb, args, default, prep, ?extra = 0} = args;
folder = pfs[1];
cur = this:get_current_message(folder) || {0};
if (typeof(pms = folder:parse_message_seq(pfs[2], @cur)) == LIST)
rest = {@listdelete(pms, 1), @pfs[3]};
if ((!extra) && rest)
"...everything should have been gobbled by :parse_message_seq...";
player:tell("I don't understand `", rest[1], "'");
return 0;
elseif (pms[1])
"...we have a nonempty message sequence...";
return {folder, pms[1], cur, rest};
elseif (used = (length(pfs[2]) + 1) - length(pms))
"...:parse_message_seq used some words, but didn't get anything out of it";
pms = ("%f %<has> no `" + $string_utils:from_list(pfs[2][1..used], " ")) + "' messages.";
elseif (typeof(pms = folder:parse_message_seq(default, @cur)) == LIST)
"...:parse_message_seq used nothing, try the default; wow it worked";
return {folder, pms[1], cur, rest};
endif
elseif (typeof(pms) == ERR)
player:tell($mail_agent:name(folder), " is not readable by you.");
if (!$object_utils:isa(folder, $mail_recipient))
player:tell("Use * to indicate a non-player mail recipient.");
endif
return 0;
endif
if (folder == this)
subst = {{"%f's", "Your"}, {"%f", "You"}, {"%<has>", "have"}};
elseif (is_player(folder))
subst = {{"%f", folder.name}, {"%<has>", $gender_utils:get_conj("has", folder)}};
else
subst = {{"%f", $mail_agent:name(folder)}, {"%<has>", "has"}};
endif
player:tell($string_utils:substitute(pms, {@subst, {"%%", "%"}}));
return 0;
.
#40:16
"@mail <msg-sequence>                --- as in help @mail";
"@mail <msg-sequence> on <recipient> --- shows mail on mailing list or player.";
set_task_perms(valid(cp = caller_perms()) ? cp | player);
if (p = this:parse_mailread_cmd("@mail", args, this:mail_option("@mail") || $mail_agent.("player_default_@mail"), "on"))
this:set_current_folder(folder = p[1]);
msg_seq = p[2];
seq_size = $seq_utils:size(msg_seq);
if ((lim = player:mail_option("manymsgs")) && ((lim <= seq_size) && (!$command_utils:yes_or_no(tostr("You are about to see ", seq_size, " message headers.  Continue?")))))
player:notify(tostr("Aborted.  @mailoption manymsgs=", lim));
return;
endif
if (1 != seq_size)
player:notify(tostr(seq_size, " messages", (folder == this) ? "" | (" on " + $mail_agent:name(folder)), ":"));
endif
folder:display_seq_headers(msg_seq, @p[3]);
endif
.
#40:17
"@read <msg>...                  -- as in help @read";
"@read <msg>... on *<recipient>  -- reads messages on recipient.";
"@peek ...                       -- like @read, but don't set current message";
set_task_perms(valid(cp = caller_perms()) ? cp | player);
if (p = this:parse_mailread_cmd("@read", args, "", "on"))
this:set_current_folder(folder = p[1]);
msg_seq = p[2];
if ((lim = player:mail_option("manymsgs")) && ((lim <= (seq_size = $seq_utils:size(msg_seq))) && (!$command_utils:yes_or_no(tostr("You are about to see ", seq_size, " messages.  Continue?")))))
player:notify(tostr("Aborted.  @mailoption manymsgs=", lim));
return;
endif
this._mail_task = task_id();
if (cur = folder:display_seq_full(msg_seq, tostr("Message %d", (folder == this) ? "" | (" on " + $mail_agent:name(folder)), ":")))
if (verb != "@peek")
this:set_current_message(folder, @cur);
endif
endif
endif
.
#40:18
set_task_perms(player.owner);
if (dobjstr && (!(n = toint(dobjstr))))
player:notify(tostr("Usage:  ", verb, " [<number>] [on <recipient>]"));
elseif (dobjstr)
this:("@read")(tostr(verb[2..5], n), @listdelete(args, 1));
else
this:("@read")(verb[2..5], @args);
endif
.
#40:19
"@rmm <message-sequence> [from <recipient>].   Use @unrmm if you screw up.";
" Beware, though.  @unrmm can only undo the most recent @rmm.";
set_task_perms(player);
if (!(p = this:parse_mailread_cmd("@rmm", args, "cur", "from")))
"...parse failed, we've already complained...";
elseif ((!prepstr) && ((p[1] != this) && (!$command_utils:yes_or_no(("@rmmail from " + $mail_agent:name(p[1])) + ".  Continue?"))))
"...wasn't the folder player was expecting...";
player:notify("@rmmail aborted.");
else
this:set_current_folder(folder = p[1]);
e = folder:rm_message_seq(p[2]);
if (typeof(e) == ERR)
player:notify(tostr($mail_agent:name(folder), ":  ", e));
else
count = ((n = $seq_utils:size(p[2])) == 1) ? "." | tostr(" (", n, " messages).");
fname = (folder == this) ? "" | (" from " + $mail_agent:name(folder));
player:notify(tostr("Deleted ", e, fname, count));
endif
endif
.
#40:20
set_task_perms(player);
if (!dobjstr)
folder = this:current_folder();
elseif ($mail_agent:match_failed(folder = $mail_agent:match_recipient(dobjstr), dobjstr))
return;
endif
cur = this:current_message(folder);
fname = $mail_agent:name(folder);
if (typeof(h = folder:renumber(cur)) == ERR)
player:notify(tostr(h));
else
if (!h[1])
player:notify(tostr("No messages on ", fname, "."));
else
player:notify(tostr("Messages on ", fname, " renumbered 1-", h[1], "."));
this:set_current_folder(folder);
if (h[2] && this:set_current_message(folder, h[2]))
player:notify(tostr("Current message is now ", h[2], "."));
endif
endif
endif
.
#40:21
"@unrmm [on <recipient>]  -- undoes the previous @rmm on that recipient.";
set_task_perms(player);
if (!(p = this:parse_folder_spec("@unrmm", args, "on")))
return;
endif
dobjstr = $string_utils:from_list(p[2], " ");
keep = 0;
if ((!dobjstr) || (keep = index("keep", dobjstr) == 1))
do = "undo_rmm";
elseif (index("expunge", dobjstr) == 1)
do = "expunge_rmm";
elseif (index("list", dobjstr) == 1)
do = "list_rmm";
else
player:notify(tostr("Usage:  ", verb, " [expunge|list] [on <recipient>]"));
return;
endif
this:set_current_folder(folder = p[1]);
if (msg_seq = folder:(do)(@keep ? {keep} | {}))
if (do == "undo_rmm")
player:notify(tostr($seq_utils:size(msg_seq), " messages restored to ", $mail_agent:name(folder), "."));
folder:display_seq_headers(msg_seq, 0);
else
player:notify(tostr(msg_seq, " zombie message", (msg_seq == 1) ? " " | "s ", (do == "expunge_rmm") ? "expunged from " | "on ", $mail_agent:name(folder), "."));
endif
elseif (typeof(msg_seq) == ERR)
player:notify(tostr($mail_agent:name(folder), ":  ", msg_seq));
else
player:notify(tostr("No messages to ", (do == "expunge_rmm") ? "expunge from " | "restore to ", $mail_agent:name(folder)));
endif
.
#40:22
if (args && (args[1] == "to"))
args = listdelete(args, 1);
endif
subject = {};
for a in (args)
if (((i = index(a, "=")) > 3) && (index("subject", a[1..i - 1]) == 1))
args = setremove(args, a);
a[1..i] = "";
subject = {a};
endif
endfor
$mail_editor:invoke(args, verb, @subject);
.
#40:23
"@answer <msg> [on *<recipient>] [<flags>...]";
set_task_perms(who = valid(caller_perms()) ? caller_perms() | player);
if (p = this:parse_mailread_cmd(verb, args, "cur", "on", 1))
if ($seq_utils:size(p[2]) != 1)
player:notify("You can only answer *one* message at a time.");
elseif (LIST != typeof(flags_replytos = $mail_editor:check_answer_flags(@p[4])))
player:notify_lines({tostr("Usage:  ", verb, " [message-# [on <recipient>]] [flags...]"), "where flags include any of:", "  all        reply to everyone", "  sender     reply to sender only", "  include    include the original message in your reply", "  noinclude  don't include the original in your reply"});
else
this:set_current_folder(p[1]);
$mail_editor:invoke(2, verb, p[1]:messages_in_seq(p[2])[1][2], @flags_replytos);
endif
endif
.
#40:24
"@forward <msg> [on *<recipient>] to <recipient> [<recipient>...]";
set_task_perms(valid(cp = caller_perms()) ? cp | player);
if (!(p = this:parse_mailread_cmd(verb, args, "", "on", 1)))
"...lose...";
return;
elseif ($seq_utils:size(sequence = p[2]) != 1)
player:notify("You can only forward *one* message at a time.");
return;
elseif ((length(p[4]) < 2) || (p[4][1] != "to"))
player:notify(tostr("Usage:  ", verb, " [<message>] [on <folder>] to <recip>..."));
return;
endif
recips = {};
for rs in (listdelete(p[4], 1))
if ($mail_agent:match_failed(r = $mail_agent:match_recipient(rs), rs))
return;
endif
recips = {@recips, r};
endfor
this:set_current_folder(folder = p[1]);
m = folder:messages_in_seq(sequence)[1];
msgnum = m[1];
msgtxt = m[2];
from = msgtxt[2];
if (msgtxt[4] != " ")
subject = tostr("[", from, ":  ", msgtxt[4], "]");
elseif ((h = "" in msgtxt) && (h < length(msgtxt)))
subject = tostr("[", from, ":  `", msgtxt[h + 1][1..min(20, $)], "']");
else
subject = tostr("[", from, "]");
endif
result = $mail_agent:send_message(player, recips, subject, $mail_agent:to_text(@msgtxt));
if (!result)
player:notify(tostr(result));
elseif (result[1])
player:notify(tostr("Message ", msgnum, @(folder == this) ? {} | {" on ", $mail_agent:name(folder)}, " @forwarded to ", $mail_agent:name_list(@listdelete(result, 1)), "."));
else
player:notify("Message not sent.");
endif
.
#40:25
$mail_editor:invoke($gripe_recipients, "@gripe", "@gripe: " + argstr);
.
#40:26
subject = tostr($string_utils:capitalize(verb[2..$]), ":  ", (loc = this.location).name, "(", loc, ")");
if (this != player)
return E_PERM;
elseif (argstr)
result = $mail_agent:send_message(this, {loc.owner}, subject, argstr);
if (result && result[1])
player:notify(tostr("Your ", verb, " sent to ", $mail_agent:name_list(@listdelete(result, 1)), ".  Input is appreciated, as always."));
else
player:notify(tostr("Huh?  This room's owner (", loc.owner, ") is invalid?  Tell a wizard..."));
endif
return;
elseif (!($object_utils:isa(loc, $room) && loc.free_entry))
player:notify_lines({tostr("You need to make it a one-liner, i.e., `", verb, " something or other'."), "This room may not let you back in if you go to the Mail Room."});
elseif ($object_utils:isa(loc, $generic_editor))
player:notify_lines({tostr("You need to make it a one-liner, i.e., `", verb, " something or other'."), "Sending you to the Mail Room from an editor is usually a bad idea."});
else
$mail_editor:invoke({tostr(loc.owner)}, verb, subject);
endif
if (verb == "@bug")
player:notify("For a @bug report, be sure to mention exactly what it was you typed to trigger the error...");
endif
.
#40:27
"@skip [*<folder/mailing_list>...]";
"  sets your last-read time for the given lists to now, indicating your";
"  disinterest in any new messages that might have appeared recently.";
set_task_perms(player);
current_folder = this:current_folder();
for a in (args || {0})
if (a ? $mail_agent:match_failed(folder = $mail_agent:match_recipient(a), a) | (folder = this:current_folder()))
"...bogus folder name, done...  No, try anyway.";
if (this:kill_current_message(this:my_match_object(a)))
player:notify("Invalid folder, but found it subscribed anyway.  Removed.");
endif
else
lseq = folder:length_all_msgs();
unread = (n = this:get_current_message(folder)) ? folder:length_date_gt(n[2]) | lseq;
this:set_current_message(folder, lseq && folder:messages_in_seq({lseq, lseq + 1})[1][1], time());
player:notify(tostr(unread ? tostr("Ignoring ", unread) | "No", " unread message", (unread != 1) ? "s" | "", " on ", $mail_agent:name(folder)));
if (current_folder == folder)
this:set_current_folder(this);
endif
endif
endfor
.
#40:28
"@subscribe *<folder/mailing_list> [with notification] [before|after *<folder>]";
"  causes you to be notified when new mail arrives on this list";
"@subscribe";
"  just lists available mailing lists.";
"@unsubscribed";
"  prints out available mailing lists you aren't already subscribed to.";
"@subscribe-quick and @unsubscribed-quick";
"  prints out same as above except without mail list descriptions, just names.";
set_task_perms(player);
quick = 0;
if (qi = index(verb, "-q"))
verb = verb[1..qi - 1];
quick = 1;
endif
fname = {@args, 0}[1];
if (!fname)
ml = $list_utils:slice(this.current_message[3..$]);
all_mlists = {@$mail_agent.contents, @this.mail_lists};
if ((length(all_mlists) > 50) && (!$command_utils:yes_or_no(tostr("There are ", length(all_mlists), " mailing lists.  Are you sure you want the whole list?"))))
return player:tell("OK, aborting.");
endif
for c in (all_mlists)
$command_utils:suspend_if_needed(0);
if ((c:is_usable_by(this) || c:is_readable_by(this)) && ((verb != "@unsubscribed") || (!(c in ml))))
c:look_self(quick);
endif
endfor
player:notify(tostr("-------- end of ", verb, " -------"));
return;
elseif (verb == "@unsubscribed")
player:notify("@unsubscribed does not take arguments.");
return;
elseif ($mail_agent:match_failed(folder = $mail_agent:match_recipient(fname), fname))
return;
elseif (folder == this)
player:notify("You don't need to @subscribe to yourself");
return;
elseif ($object_utils:isa(folder, $mail_recipient) ? !folder:is_readable_by(this) | (!$perm_utils:controls(this, folder)))
player:notify("That mailing list is not readable by you.");
return;
endif
notification = this in folder.mail_notify;
i = 0;
beforeafter = 0;
while (length(args) >= 2)
if (length(args) < 3)
player:notify(args[2] + " what?");
return;
elseif (args[2] in {"with", "without"})
with = args[2] == "with";
if (index("notification", args[3]) != 1)
player:notify(tostr("with ", args[3], "?"));
return;
elseif (!$object_utils:isa(folder, $mail_recipient))
player:notify(tostr("You cannot use ", verb, " to change mail notification from a non-$mail_recipient."));
elseif ((!with) == (!notification))
"... nothing to do...";
elseif (with)
if (this in folder:add_notify(this))
notification = 1;
else
player:notify("This mail recipient does not allow immediate notification.");
endif
else
folder:delete_notify(this);
notification = 0;
endif
elseif (args[2] in {"before", "after"})
if (beforeafter)
player:notify((args[2] == beforeafter) ? tostr("two `", beforeafter, "'s?") | "Only use one of `before' or `after'");
return;
elseif ($mail_agent:match_failed(other = $mail_agent:match_recipient(args[3]), args[3]))
return;
elseif (other == this)
i = 2;
elseif (!(i = $list_utils:iassoc(other, this.current_message)))
player:notify(tostr("You aren't subscribed to ", $mail_agent:name(other), "."));
return;
endif
beforeafter = args[2];
i = i - (beforeafter == "before");
if (this:mail_option("rn_order") != "fixed")
player:notify("Warning:  Do `@mail-option rn_order=fixed' if you do not want your @rn listing reordered when you next login.");
endif
endif
args[2..3] = {};
endwhile
this:make_current_message(folder, @i ? {i} | {});
len = folder:length_all_msgs();
player:notify(tostr($mail_agent:name(folder), " has ", len, " message", (len == 1) ? "" | "s", ".", notification ? "  You will be notified immediately when new messages are posted." | "  Notification of new messages will be printed when you connect."));
this:set_current_folder(folder);
.
#40:29
set_task_perms((caller == this) ? this.owner | caller_perms());
this:set_current_folder(this);
dates = new_cm = head = {};
sort = this:mail_option("rn_order") || "read";
for n in (this.current_message)
$command_utils:suspend_if_needed(0);
if (typeof(n) != LIST)
head = {@head, n};
elseif ($object_utils:isa(folder = n[1], $mail_recipient) && folder:is_readable_by(this))
"...set current msg to be the last one you could possibly have read.";
if (n[3] < folder.last_msg_date)
i = folder:length_date_le(n[3]);
n[2] = i && folder:messages_in_seq(i)[1];
endif
if (sort == "fixed")
new_cm = {n, @new_cm};
elseif (sort == "send")
j = $list_utils:find_insert(dates, folder.last_msg_date - 1);
dates = listinsert(dates, folder.last_msg_date, j);
new_cm = listinsert(new_cm, n, j);
else
new_cm = listappend(new_cm, n, $list_utils:iassoc_sorted(n[3] - 1, new_cm, 3));
endif
endif
endfor
this.current_message = {@head, @$list_utils:reverse(new_cm)};
.
#40:30
set_task_perms((caller == this) ? this.owner | caller_perms());
which = {};
cm = this.current_message;
cm[1..2] = ((verb == "@rn") || (verb == "@rn-full")) ? {{this, @cm[1..2]}} | {};
all = verb == "@subscribed";
fast = this:mail_option("fast_check") && (verb != "@rn-full");
for n in (cm)
rcpt = n[1];
if (rcpt == $news)
"... $news is handled separately ...";
elseif ($mail_agent:is_recipient(rcpt))
if (fast)
if (rcpt == this)
nmsgs = ((m = this.messages) && (m[length(m)][2][1] > n[3])) ? $maxint | 0;
else
try
nmsgs = (n[1].last_msg_date > n[3]) ? $maxint | 0;
except (E_PERM, E_PROPNF)
player:notify(tostr("Bogus recipient ", rcpt, " removed from .current_message."));
this.current_message = setremove(this.current_message, n);
nmsgs = 0;
endtry
endif
else
nmsgs = n[1]:length_date_gt(n[3]);
endif
if (nmsgs || all)
which = {@which, {n[1], nmsgs}};
endif
else
player:notify(tostr("Bogus recipient ", rcpt, " removed from .current_message."));
this.current_message = setremove(this.current_message, n);
endif
$command_utils:suspend_if_needed(0);
endfor
if (which)
player:notify(tostr((verb == "@subscribed") ? "You are subscribed to the following" | "There is new activity on the following", (length(which) > 1) ? " lists:" | " list:"));
for w in (which)
name = (w[1] == this) ? " me" | $mail_agent:name(w[1]);
player:notify(tostr($string_utils:left("    " + name, 40), " ", (w[2] == $maxint) ? "has" | w[2], " new message", (w[2] == 1) ? "" | "s"));
$command_utils:suspend_if_needed(0);
endfor
if (verb != "check_mail_lists")
player:notify("-- End of listing");
endif
elseif ((verb == "@rn") || (verb == "@rn-full"))
player:notify("No new activity on any of your lists.");
elseif (verb == "@subscribed")
player:notify("You aren't subscribed to any mailing lists.");
endif
return which;
.
#40:31
":mail_option(name)";
"Returns the value of the specified mail option";
if ((caller in {this, $mail_editor, $mail_agent}) || $perm_utils:controls(caller_perms(), this))
return $mail_options:get(this.mail_options, args[1]);
else
return E_PERM;
endif
.
#40:32
"@unsubscribe [*<folder/mailing_list> ...]";
"entirely removes the record of your current message for the named folders,";
"indicating your disinterest in anything that might appear there in the future.";
set_task_perms(player);
unsubscribed = {};
current_folder = this:current_folder();
for a in (args || {0})
if (a != 0)
folder = $mail_agent:match_recipient(a);
if (folder == $failed_match)
folder = this:my_match_object(a);
endif
else
folder = current_folder;
endif
if (!valid(folder))
"...bogus folder name...  try removing it anyway.";
if (this:kill_current_message(folder))
player:notify("Invalid folder, but found it subscribed anyway.  Removed.");
else
$mail_agent:match_failed(folder, a);
endif
elseif (folder == this)
player:notify(tostr("You can't ", verb, " yourself."));
else
if (!this:kill_current_message(folder))
player:notify(tostr("You weren't subscribed to ", $mail_agent:name(folder)));
if ($object_utils:isa(folder, $mail_recipient))
result = folder:delete_notify(this);
if ((typeof(result) == LIST) && (result[1] == this))
player:notify("Removed you from the mail notifications list.");
endif
endif
else
unsubscribed = {@unsubscribed, folder};
if ($object_utils:isa(folder, $mail_recipient))
folder:delete_notify(this);
endif
endif
endif
endfor
if (unsubscribed)
player:notify(tostr("Forgetting about ", $string_utils:english_list($list_utils:map_arg($mail_agent, "name", unsubscribed))));
if (current_folder in unsubscribed)
this:set_current_folder(this);
endif
endif
.
#40:33
":send_self_netmail(msg [ ,from ])";
"return 0 if successful, otherwise error.";
if (!$perm_utils:controls(caller_perms(), this))
return E_PERM;
elseif (error = $network:invalid_email_address($wiz_utils:get_email_address(this)))
return "Invalid email address: " + error;
else
msg = args[1];
if (length(args) > 1)
from = args[2];
this:notify(tostr("Receiving mail from ", from:title(), " (", from, ") and forwarding it to your .email_address."));
endif
oplayer = player;
player = this;
error = $network:sendmail($wiz_utils:get_email_address(this), @msg);
if (error && (length(args) > 1))
this:notify(tostr("Mail sending failed: ", error));
endif
player = oplayer;
return error;
endif
.
#40:34
"@netforward <msg>...                  -- as in help on @netforward";
"@netforward <msg>... on *<recipient>  -- netforwards messages on recipient.";
"This command forwards mail-messages to your registered email-address.";
if (player != this)
return player:tell(E_PERM);
endif
if (reason = $network:email_will_fail(email = $wiz_utils:get_email_address(player)))
return player:notify(tostr("Cannot forward mail to your email address: ", reason));
endif
set_task_perms(valid(cp = caller_perms()) ? cp | player);
if (p = player:parse_mailread_cmd(verb, args, "", "on"))
player:set_current_folder(folder = p[1]);
msg_seq = p[2];
folderstr = (folder == player) ? "" | tostr(" from ", $mail_agent:name(folder));
if ((!this:mail_option("expert_netfwd")) && (!$command_utils:yes_or_no(tostr("You are about to forward ", seq_size = $seq_utils:size(msg_seq), " message(s)", folderstr, " to your registered email-address, ", email, ".  Continue?"))))
player:notify(tostr("@Netforward cancelled."));
return;
endif
player:notify("Attempting to send network mail...");
player._mail_task = task_id();
multiple_vals = this:format_for_netforward(folder:messages_in_seq(msg_seq), folderstr);
netmail = multiple_vals[1];
header = multiple_vals[2];
reason = player:send_self_netmail({header, @netmail});
player:notify((reason == 0) ? tostr("@netforward of ", header, " completed.") | tostr("@netforward failed: ", reason, "."));
endif
.
#40:35
"Syntax: @@sendmail";
"This is intended for use with client editors.  You probably don't want to try using this command manually.";
"Reads a formatted mail message, extracts recipients, subject line and/or reply-to header and sends message without going to the mailroom.  Example:";
"";
"@@send";
"To: Rog (#4292)";
"Subject: random";
"";
"first line";
"second line";
".";
"";
"Currently, header lines must have the same format as in an actual message.";
set_task_perms(player);
if (args)
player:notify(tostr("The ", verb, " command takes no arguments."));
$command_utils:read_lines();
return;
elseif (this != player)
player:notify(tostr("You can't use ", this.pp, " ", verb, " verb."));
$command_utils:read_lines();
return;
endif
msg = $command_utils:read_lines();
end_head = ("" in msg) || (length(msg) + 1);
from = this;
subject = "";
replyto = "";
rcpts = {};
body = msg[end_head + 1..$];
for i in [1..end_head - 1]
line = msg[i];
if (index(line, "Subject:") == 1)
subject = $string_utils:trim(line[9..$]);
elseif (index(line, "To:") == 1)
if (!(rcpts = $mail_agent:parse_address_field(line)))
player:notify("No recipients found in To: line");
return;
endif
elseif (index(line, "Reply-to:") == 1)
if ((!(replyto = $mail_agent:parse_address_field(line))) && $string_utils:trim(line[10..$]))
player:notify("No address found in Reply-to: line");
return;
endif
elseif (index(line, "From:") == 1)
"... :send_message() bombs if designated sender != player ...";
if (!(from = $mail_agent:parse_address_field(line)))
player:notify("No sender found in From: line");
return;
elseif (length(from) > 1)
player:notify("Multiple senders?");
return;
endif
from = from[1];
elseif (i = index(line, ":"))
player:notify(tostr("Unknown header \"", line[1..i], "\""));
return;
else
player:notify("Blank line must separate headers from body.");
return;
endif
endfor
if (!rcpts)
player:notify("No To: line found.");
elseif (!(subject || body))
player:notify("Blank message not sent.");
else
player:notify("Sending...");
result = $mail_agent:send_message(from, rcpts, replyto ? {subject, replyto} | subject, body);
if (e = result && result[1])
if (length(result) == 1)
player:notify("Mail actually went to no one.");
else
player:notify(tostr("Mail actually went to ", $mail_agent:name_list(@listdelete(result, 1)), "."));
endif
else
player:notify(tostr((typeof(e) == ERR) ? e | ("Bogus recipients:  " + $string_utils:from_list(result[2]))));
player:notify("Mail not sent.");
endif
endif
.
#40:36
"@keep-mail [<msg-sequence>|none] [on <recipient>]";
"marks the indicated messages as `kept'.";
set_task_perms(valid(cp = caller_perms()) ? cp | player);
if (!args)
return player:notify("Usage:  @keep-mail [<msg-sequence>|none] [on <recipient>]");
elseif (args[1] == "none")
args[1..1] = {};
if (!(pfs = this:parse_folder_spec(verb, args, "on", 0)))
return;
elseif (pfs[2])
player:notify(tostr(verb, " <message-sequence> or `none', but not both."));
return;
endif
this:set_current_folder(folder = pfs[1]);
if (e = folder:keep_message_seq({}))
player:notify(tostr("Messages on ", $mail_agent:name(folder), " are no longer marked as kept."));
else
player:notify(tostr(e));
endif
return;
elseif (p = this:parse_mailread_cmd(verb, args, "", "on"))
if ((folder = p[1]) != this)
"... maybe I'll take this clause out some day...";
player:notify(tostr(verb, " can only be used on your own mail collection."));
return;
endif
this:set_current_folder(folder);
if (e = folder:keep_message_seq(msg_seq = p[2]))
player:notify(tostr("Message", match(e, "[.,]") ? "s " | " ", e, " now marked as kept."));
elseif (typeof(e) == ERR)
player:notify(tostr(e));
else
player:notify(tostr(((seq_size = $seq_utils:size(msg_seq)) == 1) ? "That message is" | "Those messages are", " already marked as kept."));
endif
endif
.
#40:37
":my_match_recipient(string) => matches string against player's private mailing lists.";
if (!(string = args[1]))
return $nothing;
elseif (string[1] == "*")
string = string[2..$];
endif
return $string_utils:match(string, this.mail_lists, "aliases");
.
#40:38
set_task_perms(caller_perms());
if (!$perm_utils:controls(caller_perms(), this))
return E_PERM;
else
seq = this:expirable_msg_seq();
if (seq)
this:rm_message_seq(seq);
return this:expunge_rmm();
else
return 0;
endif
endif
.
#40:39
":msg_full_text(@msg) => list of strings.";
"msg is a mail message (in the usual transmission format).";
"display_seq_full calls this to obtain the actual list of strings to display.";
return player:msg_text(@args);
"default is to leave it up to the player how s/he wants it to be displayed.";
.
#40:40
"@resend <msg> [on *<recipient>] to <recipient> [<recipient>...]";
set_task_perms(valid(caller_perms()) ? caller_perms() | player);
"...";
"... parse command...";
"...";
if (!(p = this:parse_mailread_cmd(verb, args, "", "on", 1)))
"...lose...";
return;
elseif ($seq_utils:size(sequence = p[2]) != 1)
player:notify("You can only resend *one* message at a time.");
return;
elseif ((length(p[4]) < 2) || (p[4][1] != "to"))
player:notify(tostr("Usage:  ", verb, " [<message>] [on <folder>] to <recip>..."));
return;
endif
recips = {};
for rs in (listdelete(p[4], 1))
if ($mail_agent:match_failed(r = $mail_agent:match_recipient(rs), rs))
return;
endif
recips = {@recips, r};
endfor
this:set_current_folder(folder = p[1]);
"...";
"... retrieve original message...";
"...";
{msgnum, msgtxt} = folder:messages_in_seq(sequence)[1];
if (forward_style = this:mail_option("resend_forw"))
"...message will be from player...";
pmh = $mail_agent:parse_misc_headers(msgtxt, "Reply-To", "Original-Date", "Original-From");
orig_from = pmh[3][3] || msgtxt[2];
else
"...message will be from author...";
pmh = $mail_agent:parse_misc_headers(msgtxt, "Reply-To", "Original-Date", "Original-From", "Resent-By", "Resent-To");
orig_from = pmh[3][3];
from = $mail_agent:parse_address_field(msgtxt[2])[1];
to = $mail_agent:parse_address_field(msgtxt[3]);
endif
"...";
"... report bogus headers...";
"...";
if (bogus = pmh[2])
player:notify("Bogus headers stripped from original message:");
for b in (bogus)
player:notify("  " + b);
endfor
if (!$command_utils:yes_or_no("Continue?"))
player:notify("Message not resent.");
return;
endif
endif
"...";
"... subject, replyto, original-date, original-from ...";
"...";
hdrs = {msgtxt[4], pmh[3][1], {"Original-Date", pmh[3][2] || ctime(msgtxt[1])}, @orig_from ? {{"Original-From", orig_from}} | {}, @pmh[1]};
"...";
"... send it ...";
"...";
if (forward_style)
result = $mail_agent:send_message(player, recips, hdrs, pmh[4]);
else
"... resend inserts resent-to and resent-by...";
result = $mail_agent:resend_message(player, recips, from, to, hdrs, pmh[4]);
endif
"...";
"... report outcome...";
"...";
if (!result)
player:notify(tostr(result));
elseif (result[1])
player:notify(tostr("Message ", msgnum, @(folder == this) ? {} | {" on ", $mail_agent:name(folder)}, " @resent to ", $mail_agent:name_list(@listdelete(result, 1)), "."));
else
player:notify("Message not resent.");
endif
.
#40:41
"Return a sequence indicating the expirable messages for this player.";
set_task_perms(caller_perms());
if (!$perm_utils:controls(caller_perms(), this))
return E_PERM;
elseif (!(curmsg = this:get_current_message(this)))
"No messages!  Don't even try.";
return {};
elseif (0 >= (period = this:mail_option("expire") || $mail_agent.player_expire_time))
"...no expiration allowed here...";
return {};
else
return $seq_utils:remove(this:unkept_msg_seq(), 1 + this:length_date_le(min(time() - period, curmsg[2] - 86400)));
"... the 86400 is pure fudge...";
endif
.
#40:42
"Takes a message sequence (the actual messages, not just the sequence describing it) and grovels over it filling text etc.  Returns a two valued list: {formatted message, header for same}";
set_task_perms(caller_perms());
{message_seq, folderstr} = args;
netmail = {};
linelen = this:linelen();
maxmsg = minmsg = 0;
for msg in (message_seq)
minmsg = minmsg ? min(msg[1], minmsg) | msg[1];
maxmsg = maxmsg ? max(msg[1], maxmsg) | msg[1];
lines = {tostr("Message ", msg[1], folderstr, ":"), tostr("Date:     ", ctime(msg[2][1])), "From:     " + msg[2][2], "To:       " + msg[2][3], @(length(subj = msg[2][4]) > 1) ? {"Subject:  " + subj} | {}};
for line in (msg[2][5..$])
if (typeof(line) != STR)
"I don't know how this can happen, but apparently non-strings can end up in the mail message.  So, cope.";
line = tostr(line);
endif
lines = {@lines, @$generic_editor:fill_string(line, linelen)};
$command_utils:suspend_if_needed(0);
endfor
netmail = {@netmail, @lines, "", "--------------------------", "", ""};
endfor
header = tostr($network.MOO_name, " Message(s) ", minmsg, @(minmsg != maxmsg) ? {" - ", maxmsg} | {}, folderstr);
return {netmail, header};
.
#40:43
"Takes a message sequence (the actual messages, not just the sequence describing it) and grovels over it filling text etc.  Returns a two valued list: {formatted message, header for same}";
set_task_perms(caller_perms());
{message_seq, folderstr} = args;
netmail = {};
linelen = this:linelen();
maxmsg = minmsg = 0;
for msg in (message_seq)
minmsg = minmsg ? min(msg[1], minmsg) | msg[1];
maxmsg = maxmsg ? max(msg[1], maxmsg) | msg[1];
lines = {tostr("Message ", msg[1], folderstr, ":"), tostr("Date:     ", ctime(msg[2][1])), "From:     " + msg[2][2], "To:       " + msg[2][3], @(length(subj = msg[2][4]) > 1) ? {"Subject:  " + subj} | {}};
for line in (msg[2][5..$])
if (typeof(line) != STR)
"I don't know how this can happen, but apparently non-strings can end up in the mail message.  So, cope.";
line = tostr(line);
endif
lines = {@lines, @$generic_editor:fill_string(line, linelen)};
$command_utils:suspend_if_needed(0);
endfor
netmail = {@netmail, @lines, "", "--------------------------", "", ""};
endfor
header = tostr($network.MOO_name, " Message(s) ", minmsg, @(minmsg != maxmsg) ? {" - ", maxmsg} | {}, folderstr);
return {netmail, header};
.
#40:44
"@nn  -- reads the first new message on the first mail_recipient (in .current_message) where new mail exists.";
set_task_perms(valid(cp = caller_perms()) ? cp | player);
cm = this.current_message;
cm[1..2] = {{this, @cm[1..2]}};
for n in (cm)
if ($mail_agent:is_recipient(n[1]))
if (new = n[1]:length_date_gt(n[3]))
next = (n[1]:length_all_msgs() - new) + 1;
this:set_current_folder(folder = n[1]);
this._mail_task = task_id();
cur = folder:display_seq_full({next, next + 1}, tostr("Message %d", " on ", $mail_agent:name(folder), ":"));
this:set_current_message(folder, @cur);
return;
endif
else
player:notify(tostr("Bogus recipient ", n[1], " removed from .current_message."));
this.current_message = setremove(this.current_message, n);
endif
endfor
player:tell("No News (is good news)");
.
#40:45
"@unread <msg> [on *<recipient>]  -- resets last-read-date for recipient to just before the first of the indicated messages.";
set_task_perms(player);
if (p = this:parse_mailread_cmd("@unread", args, "cur", "on"))
this:set_current_folder(folder = p[1]);
msg_ord = $seq_utils:first(msg_seq = p[2]);
msgdate = folder:messages_in_seq(msg_ord)[2][1] - 1;
if ((!(cm = this:get_current_message(folder))) || (cm[2] < msgdate))
player:notify("Already unread.");
else
if (folder == this)
this.current_message[2] = msgdate - 1;
else
"this:kill_current_message(folder);";
this:set_current_message(folder, cm[1], min(cm[2], msgdate), 1);
endif
folder:display_seq_headers({msg_ord, msg_ord + 1}, cm[1], msgdate);
endif
endif
.
#40:46
"@refile/@copym*ail <msg-sequence> [on <recipient>] to <recipient>";
"@refile will delete the messages from the source folder.  @copym does not.";
"I'm not happy with this one, yet...";
set_task_perms(player);
if (!(p = this:parse_mailread_cmd("@refile", args, "cur", "on", 1)))
"...lose...";
elseif ((length(p[4]) != 2) || (p[4][1] != "to"))
player:notify(tostr("Usage:  ", verb, " [<message numbers>] [on <folder>] to <folder>"));
elseif ($mail_agent:match_failed(dest = $mail_agent:match_recipient(p[4][2]), p[4][2]))
"...bogus destination folder...";
else
source = p[1];
msg_seq = p[2];
for m in (source:messages_in_seq(msg_seq))
if (!(e = dest:receive_message(m[2], source)))
player:notify(tostr("Copying msg. ", m[1], ":  ", e));
return;
endif
$command_utils:suspend_if_needed(0);
endfor
if (refile = verb == "@refile")
if (typeof(e = source:rm_message_seq(msg_seq)) == ERR)
player:notify(tostr("Deleting from ", source, ":  ", e));
endif
endif
count = tostr(n = $seq_utils:size(msg_seq), " message", (n == 1) ? "" | "s");
fname = (source == this) ? "" | tostr(is_player(source) ? " from " | " from *", source.name, "(", source, ")");
suffix = tostr(is_player(dest) ? " to " | " to *", dest.name, "(", dest, ").");
player:notify(tostr(refile ? "Refiled " | "Copied ", count, fname, suffix));
endif
.
#40:47
"@qreply <msg> [on *<recipient>] [<flags>...]";
"like @reply only, as in @qsend, we prompt for the message text using ";
"$command_utils:read_lines() rather than invoking the $mail_editor.";
set_task_perms(who = valid(cp = caller_perms()) ? cp | player);
if (!(p = this:parse_mailread_cmd(verb, args, "cur", "on", 1)))
"...garbled...";
elseif ($seq_utils:size(p[2]) != 1)
player:notify("You can only answer *one* message at a time.");
elseif (LIST != typeof(flags_replytos = $mail_editor:check_answer_flags("noinclude", @p[4])))
player:notify_lines({tostr("Usage:  ", verb, " [message-# [on <recipient>]] [flags...]"), "where flags include any of:", "  all        reply to everyone", "  sender     reply to sender only", tostr("  include    include the original message in reply (can't do this for ", verb, ")"), "  noinclude  don't include the original in your reply"});
elseif ("include" in flags_replytos[1])
player:notify(tostr("Can't include message on a ", verb));
else
this:set_current_folder(p[1]);
if (to_subj = $mail_editor:parse_msg_headers(p[1]:messages_in_seq(p[2])[1][2], flags_replytos[1]))
player:notify(tostr("To:       ", $mail_agent:name_list(@to_subj[1])));
if (to_subj[2])
player:notify(tostr("Subject:  ", to_subj[2]));
endif
if (replytos = flags_replytos[2])
player:notify(tostr("Reply-to: ", $mail_agent:name_list(@replytos)));
endif
hdrs = {to_subj[2], replytos || {}};
player:notify("Enter lines of message:");
message = $command_utils:read_lines_escape((active = player in $mail_editor.active) ? {} | {"@edit"}, {tostr("You are composing mail to ", $mail_agent:name_list(@to_subj[1]), "."), @active ? {} | {"Type `@edit' to take this into the mail editor."}});
if (typeof(message) == ERR)
player:notify(tostr(message));
elseif (message[1] == "@edit")
$mail_editor:invoke(1, verb, to_subj[1], @hdrs, message[2]);
elseif (!message[2])
player:notify("Blank message not sent.");
else
result = $mail_agent:send_message(this, to_subj[1], hdrs, message[2]);
if (result && result[1])
player:notify(tostr("Message sent to ", $mail_agent:name_list(@listdelete(result, 1)), "."));
else
player:notify("Message not sent.");
endif
endif
endif
endif
.
#40:48
"@mail-all-new-mail";
" Prints headers for all new mail on every mail-recipient mentioned in .current_message.";
set_task_perms(valid(cp = caller_perms()) ? cp | player);
cm = this.current_message;
cm[1..2] = {{this, @cm[1..2]}};
this._mail_task = task_id();
nomail = 1;
new_cms = {};
for f in (cm)
if (!($object_utils:isa(folder = f[1], $player) || $object_utils:isa(folder, $mail_recipient)))
player:notify(tostr(folder, " is neither a $player nor a $mail_recipient"));
elseif (typeof(flen = folder:length_all_msgs()) == ERR)
player:notify(tostr($mail_agent:name(folder), " ", flen));
elseif (msg_seq = $seq_utils:range(folder:length_date_le(f[3]) + 1, flen))
nomail = 0;
player:notify("===== " + $string_utils:left(tostr($mail_agent:name(folder), " (", s = $seq_utils:size(msg_seq), " message", (s == 1) ? ") " | "s) "), 40, "="));
folder:display_seq_headers(msg_seq, @f[2..3]);
player:notify("");
$command_utils:suspend_if_needed(2);
endif
endfor
if (nomail)
player:notify("You don't have any new mail anywhere.");
else
player:notify("===== " + $string_utils:left("End of new mail ", 40, "="));
endif
.
#40:49
"@read-all-new-mail [yes]";
" Prints all new mail on every mail-recipient mentioned in .current_message";
" Generally this will spam you into next Tuesday.";
" You will be queried for whether you want your last-read dates updated";
"   but you can specify \"yes\" on the command line to suppress this.";
"   If you do so, last-read dates will be updated after each folder read.";
set_task_perms(valid(cp = caller_perms()) ? cp | player);
noconfirm = args && args[1];
if ((noconfirm && (noconfirm != "yes")) && (noconfirm != "no"))
player:notify("Unexpected argument(s): " + argstr);
return;
endif
cm = this.current_message;
cm[1..2] = {{this, @cm[1..2]}};
this._mail_task = task_id();
nomail = 1;
new_cms = {};
for f in (cm)
if (!($object_utils:isa(folder = f[1], $player) || $object_utils:isa(folder, $mail_recipient)))
player:notify(tostr(folder, " is neither a $player nor a $mail_recipient"));
elseif (typeof(flen = folder:length_all_msgs()) == ERR)
player:notify(tostr($mail_agent:name(folder), " ", flen));
elseif (msg_seq = $seq_utils:range(folder:length_date_le(f[3]) + 1, flen))
nomail = 0;
player:notify("===== " + $string_utils:left(tostr($mail_agent:name(folder), " (", s = $seq_utils:size(msg_seq), " message", (s == 1) ? ") " | "s) "), 40, "="));
player:notify("");
if (cur = folder:display_seq_full(msg_seq, tostr("Message %d", (folder == this) ? "" | (" on " + $mail_agent:name(folder)), ":")))
if (noconfirm == "yes")
this:set_current_message(folder, @cur);
this:set_current_folder(folder);
else
new_cms = {@new_cms, {folder, @cur}};
endif
player:notify("");
endif
endif
$command_utils:suspend_if_needed(1);
this._mail_task = task_id();
endfor
if (nomail)
player:notify("You don't have any new mail anywhere.");
elseif (player:notify("===== " + $string_utils:left("End of new mail ", 40, "=")) || (noconfirm ? noconfirm == "yes" | $command_utils:yes_or_no("Did you get all of that?")))
for n in (new_cms)
this:set_current_message(@n);
this:set_current_folder(n[1]);
endfor
player:notify("Last-read-dates updated");
else
player:notify("Last-read-dates not updated");
endif
.
#40:50
"Syntax: @quicksend <recipients(s)> [subj=<text>] [<message>]";
"Sends the recipients(s) a quick message, wit{out having to go to the mailroom. If there is more than one recipients, place them all in quotes. If the subj contains spaces, place it in quotes.";
"To put line breaks in the message, use a caret (^).";
"If no message is given, prompt for lines of message.";
"Examples:";
"@quicksend Alice subj=\"Wonderland is neat!\" Have you checked out the Wonderland scenario yet? I think you'd like it!";
"@quicksend \"Ethel Fred\" Have you seen Lucy around?^--Ricky";
set_task_perms($object_utils:isa(player, $guest) ? player.owner | player);
if (!args)
player:notify(tostr("Usage: ", verb, " <recipients(s)> [subj=<text>] [<message>]"));
return E_INVARG;
elseif (this != player)
player:notify(tostr("You can't use ", this.pp, " @quicksend verb."));
return E_PERM;
elseif (!(recipients = $mail_editor:parse_recipients({}, $string_utils:explode(args[1]))))
return;
else
if ((length(args) > 1) && ((eq = index(args[2], "=")) && (index("subject", args[2][1..eq - 1]) == 1)))
subject = $string_utils:trim(args[2][eq + 1..$]);
ws = $string_utils:word_start(argstr);
argstr = argstr[1..ws[1][2]] + argstr[ws[2][2] + 1..$];
args = listdelete(args, 2);
else
subject = "";
endif
if (length(args) > 1)
unbroken = argstr[(argstr[1] == "\"") ? length(args[1]) + 4 | (length(args[1]) + 2)..$] + "^";
message = {};
while (unbroken)
if (i = index(unbroken, "^"))
message = {@message, unbroken[1..i - 1]};
endif
unbroken = unbroken[i + 1..$];
endwhile
else
if (!(subject || player:mail_option("nosubject")))
player:notify("Subject:");
subject = $command_utils:read();
endif
player:notify("Enter lines of message:");
message = $command_utils:read_lines_escape((active = player in $mail_editor.active) ? {} | {"@edit"}, {tostr("You are composing mail to ", $mail_agent:name_list(@recipients), "."), @active ? {} | {"Type `@edit' to take this into the mail editor."}});
if (typeof(message) == ERR)
player:notify(tostr(message));
return;
elseif (message[1] == "@edit")
$mail_editor:invoke(1, verb, recipients, subject, {}, message[2]);
return;
elseif (!(message[2] || subject))
player:notify("Blank message not sent.");
return;
endif
message = message[2];
endif
result = $mail_agent:send_message(this, recipients, subject, message);
if (result && result[1])
player:notify(tostr("Message sent to ", $mail_agent:name_list(@listdelete(result, 1)), "."));
else
player:notify("Message not sent.");
endif
endif
.
#40:51
if (caller_perms().wizard)
pass(@args);
this.mail_options = {};
endif
.
#40:52
if (((valid(cp = caller_perms()) && (caller != this)) && (!$perm_utils:controls(cp, this))) && (caller != #0))
return E_PERM;
endif
this:check_mail();
this:mail_catch_up();
this:check_mail_lists();
pass(@args);
.
#40:53
"Ideally, in order for one person to be notified that another person has new mail, both the mail recipient and the notification recipient should agree that this is an OK transfer of information.";
"Usage:  @add-notify me to player";
"    Sends mail to player saying that I want to be added to their mail notification property.";
"Usage:  @add-notify player to me";
"    Makes sure that player wants to be notified, if so, adds them to my .mail_notify property.  (Deletes from temporary record.)";
if (this == dobj)
target = $string_utils:match_player(iobjstr);
if ($command_utils:player_match_failed(target, iobjstr))
return;
elseif (this in target.mail_notify[1])
player:tell("You already receive notifications when ", target.name, " receives mail.");
elseif (this in target.mail_notify[2])
player:tell("You already asked to be notified when ", target.name, " receives mail.");
else
$mail_agent:send_message(player, {target}, "mail notification request", {tostr($string_utils:nn(this), " would like to receive mail notifications when you get mail."), "Please type:", tostr("  @add-notify ", this.name, " to me"), "if you wish to allow this action."});
player:tell("Notifying ", $string_utils:nn(target), " that you would like to be notified when ", target.ps, " receives mail.");
target.mail_notify[2] = setadd(target.mail_notify[2], this);
endif
elseif (this == iobj)
target = $string_utils:match_player(dobjstr);
if ($command_utils:player_match_failed(target, dobjstr))
return;
elseif (target in this.mail_notify[2])
this.mail_notify[1] = setadd(this.mail_notify[1], target);
this.mail_notify[2] = setremove(this.mail_notify[2], target);
player:tell(target.name, " will be notified when you receive mail.");
else
player:tell("It doesn't look like ", target.name, " wants to be notified when you receive mail.");
endif
else
player:tell("Usage:  @add-notify me to player");
player:tell("        @add-notify player to me");
endif
.
#40:54
if ((length(this.mail_notify) > 0) && (typeof(this.mail_notify[1]) == LIST))
return this.mail_notify[1];
else
return this.mail_notify;
endif
.
#40:55
"USAGE: @unsend [message-sequence] from <player>";
"Attempts to unsend messages you sent to <player>. Per *B:Unsend, messages may not be unsent if they have been read, have been netforwarded to the player (@mail-option +netmail), or if the player has set emself so that mail may not be unsent from em (@mail-option +no_unsend). In addition, mail sent to multiple players may not be unsent unless it can be unsent from each recipient.";
"";
"The following message sequences are the only ones allowed:";
"";
"  before:<date>    - Strictly before the given date.";
"  after:<date>     - Strictly after the given date.";
"  since:<date>     - On or after the given date.";
"  until:<date>     - On or before the given date.";
"  subject:<string> - The subject contains the given string.";
"  body:<string>    - The message body contains the given string.";
"  last:<number>    - The last <number> messages you sent.";
"";
"If you do not specify a sequence, the default sequence stored in @mail-option @unsend will be used.";
base = (dobjstr || this:mail_option(verb)) || $mail_agent.("player_default_@unsend");
if (player != this)
return player:tell(E_PERM);
elseif (typeof(base) == STR)
seq = $string_utils:words(base);
else
seq = base;
endif
who = $string_utils:match_player(iobjstr);
fail_msg = "Message(s) were not removed as expected. As per *B:Unsend, I cannot elaborate on why.";
if ($command_utils:player_match_failed(who, iobjstr))
return;
elseif (typeof(res = $mail_options:parse({verb, @seq})) == STR)
return player:notify(res);
elseif (who:mail_option("no_unsend") || ($object_utils:has_callable_verb(who, "do_unsend") != {$mail_recipient_class}))
"Author's note: I'm not checking for +netmail. The player could have turned it on (or off) later. Netmailed messages are not saved on the player, so they can't be removed, anyway.";
return player:notify(fail_msg);
endif
"The following loop weeds out `last:#' references, which need to be proccessed in a specific way.";
newseq = otherpeople = {};
last = 0;
for x in (seq)
if (`x[1..5] == "last:" ! ANY')
last = toint(x[6..$]);
else
newseq = {@newseq, x};
endif
endfor
seq = {"new", "unkept:", tostr("from:", player), @newseq};
if (last > 0)
seq = {@seq, tostr("last:", last)};
endif
ok = who:parse_message_seq(seq, who:current_message());
if (typeof(ok) != LIST)
return player:notify(fail_msg);
endif
allmsgs = length($seq_utils:tolist(@ok));
count = missed = 0;
for position in ($list_utils:reverse($list_utils:range(allmsgs)))
time = time() + 60;
ok = (position == allmsgs) ? ok | who:parse_message_seq(seq, who:current_message());
if ((typeof(ok) == STR) || (!ok[1]))
break;
elseif (time() > time)
player:notify("Due to a mysterious time delay (probably incredible lag), your @unsend command has been aborted. Try again later.");
count && player:notify(tostr(count, "message", (count == 1) ? "" | "s", " were unsent before the command was aborted."));
return otherpeople && player:notify(tostr("Message(s) were also removed from ", $string_utils:nn(otherpeople), "."));
endif
x = $seq_utils:tolist(@ok)[$ - missed];
ok = {x, x + 1};
whomail = who.messages;
bad = 0;
possible = {};
"Check if a message was sent to multiple people and set them up for @unsend, too.";
if ((recips = $mail_agent:parse_address_field((msg = whomail[x][2])[3])) == {who})
who:do_unsend(ok);
"Leaving the zombie messages kinda defeats the purpose of @unsend. Since use of @unsend removes any old zombie mail, and since I can't find any nice, tidy way to save the old zombie mail, we're just going to delete the new zombie mail outright. Those who don't like this can set emselves +no_unsend.";
who.messages_going = {};
count = count + 1;
((ticks_left() < 5000) || (seconds_left() < 2)) && suspend(1);
continue;
else
if (((ticks_left() / 5000) < length(recips)) || (seconds_left() < 2))
suspend(1);
endif
"This runs on the principle that the same message text will be sent to each person. If their .messages is in a non-standard format, this will probably bomb. Such people should set themselves +no_unsend, anyway.";
for y in (setremove(recips, who))
time = time() + 60;
if (((((!is_player(y)) || y:mail_option("no_unsend")) || ($object_utils:has_callable_verb(y, "do_unsend") != {$mail_recipient_class})) || (typeof(z = y:parse_message_seq({"new", "unkept:"}, y:current_message())) == STR)) || (!z))
bad = 1;
elseif (time() > time)
player:notify("Due to a mysterious time delay (probably incredible lag), your @unsend command has been aborted. Try again later.");
count && player:notify(tostr(count, "message", (count == 1) ? "" | "s", " were unsent before the command was aborted."));
return otherpeople && player:notify(tostr("Message(s) were also removed from ", $string_utils:nn(otherpeople), "."));
else
ymail = y.messages;
numnum = 0;
for post in ($seq_utils:tolist(@z))
if (ymail[post][2] == msg)
numnum = post;
break;
endif
endfor
if (!numnum)
bad = 1;
else
z = {numnum, numnum + 1};
endif
endif
possible = bad ? {} | {@possible, {y, z}};
if (bad)
break;
endif
endfor
endif
if (bad)
missed = missed + 1;
else
for foo in ({{who, ok}, @possible})
{person, sequence} = foo;
person:do_unsend(sequence);
"Leaving the zombie messages kinda defeats the purpose of @unsend. Since use of @unsend removes any old zombie mail, and since I can't find any nice, tidy way to save the old zombie mail, we're just going to delete the new zombie mail outright. Those who don't like this can set emselves +no_unsend.";
person.messages_going = {};
if (person != who)
otherpeople = setadd(otherpeople, person);
endif
endfor
count = count + 1;
endif
endfor
if ((!count) || (count != allmsgs))
player:notify(fail_msg);
endif
count && player:notify(tostr(count, " message", (count == 1) ? "" | "s", " unsent."));
otherpeople && player:notify(tostr("Message(s) were also removed from ", $string_utils:nn(otherpeople), "."));
.
#40:56
":do_unsend(seq) -> Remove the specified messages. Used by @unsend. Cannot be overridden by players or player classes; @unsend won't bother to call the verb.";
if (!caller_perms().wizard)
return E_PERM;
endif
return $mail_agent:rm_message_seq(@args);
.
#40:57
"@annotate <msg-sequence> [on <recipient>] with \"annotation\"";
"prefix the specified messages with the given annotation.";
set_task_perms(player);
if (!(p = this:parse_mailread_cmd("@annotate", args, "cur", "on", 1)))
"...lose...";
elseif ((length(p[4]) != 2) || (p[4][1] != "with"))
player:notify(tostr("Usage:  ", verb, " [<message numbers>] [on <folder>] with <annotation>"));
else
{target, message_sequence, _, trailing_args} = p;
annotation = trailing_args[2..$];
annotation[1] = tostr("[", player.name, " (", player, "):  ", annotation[1], "]");
if (typeof(e = target:annotate_message_seq(annotation, "prepend", message_sequence)) in {ERR, STR})
player:notify(tostr("Annotation Failed:  ", e));
else
count = $seq_utils:size(message_sequence);
player:notify(tostr("Annotating ", count, " message", (count == 1) ? "" | "s", " on ", $mail_agent:name(target), " with:"));
player:notify_lines(annotation);
endif
endif
"Copied from annotatetest (#87053):@annotate [verb author Puff (#1449)] at Mon Feb 14 14:45:41 2005 PST";
.
#40:58
return "Cannot annotate player messages.";
.
#40:59
if ((caller == this) || $perm_utils:controls(caller_perms(), this))
nm = this:length_all_msgs() - this:length_date_le(this:get_current_message()[2]);
if (nm)
this:notify(tostr("You have new mail (", nm, " message", (nm == 1) ? "" | "s", ").", this:mail_option("expert") ? "" | "  Type 'help mail' for info on reading it."));
endif
endif
.
#41:0
"$gender_utils:set(object,gender) --- sets the pronoun properties of object.";
"gender is a string: one of the strings in $gender_utils.genders, the list of rcognized genders.  If the gender change is successful, the (full) name of the gender (e.g., \"male\") is returned.  E_NONE is returned if gender does not match any recognized gender.  Any other error encountered (e.g., E_PERM, E_PROPNF) is likewise returned and the object's pronoun properties are left unaltered.";
set_task_perms(caller_perms());
{object, gender} = args;
if (this == object)
return E_DIV;
elseif (gnum = $string_utils:find_prefix(gender, this.genders))
gender = this.genders[gnum];
else
return E_NONE;
endif
save = {};
prons = this.pronouns;
for p in (prons)
save = {@save, e = `object.(p) ! ANY'};
if ((typeof(e) != STR) || (typeof(e = `object.(p) = this.(p)[gnum] ! ANY') == ERR))
for i in [1..length(save) - 1]
object.(prons[i]) = save[i];
endfor
return e;
endif
endfor
return gender;
.
#41:1
"$gender_utils:add(object[,perms[,owner]])";
"--- adds pronoun properties to object if they're not already there.";
"    perms default to \"rc\", owner defaults to the object owner.";
set_task_perms(caller_perms());
{object, ?perms = "rc", ?owner = object.owner} = args;
prons = this.pronouns;
e = 1;
for p in (prons)
if (!$object_utils:has_property(object, p))
e = `add_property(object, p, "", {owner, perms}) ! ANY';
if (typeof(e) == ERR)
player:tell("Couldn't add ", object, ".", p, ":  ", e);
return;
endif
elseif ((typeof(object.(p)) != STR) && (typeof(e = `object.(p) = "" ! ANY') == ERR))
player:tell("Couldn't reset ", object, ".", p, ":  ", e);
return;
elseif (!object.(p))
e = 0;
endif
endfor
if ((!e) && (ERR == typeof(e = this:set(object, "neuter"))))
player:tell("Couldn't initialize pronouns:  ", e);
endif
.
#41:2
"get_pronoun(key,object) => pronoun corresponding to object.";
"key can be one of s,o,p,q,r,S,O,P,Q,R to refer to the pronoun properties relatively directly or it can be something of the form \"he/she\" or \"He/She\".";
"Next the object is checked for the desired pronoun property.  If that doesn't exist, we look at object.gender and infer the pronoun from the corresponding $gender_utils property.  If .gender doesn't exist or the object itself is invalid, we use the corresponding property on $player.";
{key, ?object = player} = args;
if (key[1] == ":")
key = key[2..$];
endif
if ((length(key) == 1) && (i = index("sopqrSOPQR", key, 1)))
prop = this.pronouns[i];
else
search = "$1:he$s:she$1:he/she$2:him$2:him/her$3:his/her$4:hers$4:his/hers$5:himself$5:herself$5:himself/herself";
i = index(search, (":" + key) + "$");
if (!i)
return "";
endif
cap = strcmp("a", key) > 0;
prop = this.pronouns[toint(search[i - 1]) + (5 * cap)];
endif
if (!valid(object))
return $player.(prop);
elseif (STR == typeof(p = `object.(prop) ! ANY'))
return p;
elseif ((STR == typeof(g = `object.gender ! ANY')) && (i = g in this.genders))
return this.(prop)[i];
else
return $player.(prop);
endif
.
#41:3
"get_conj(verbspec,object) => verb conjugated according to object.";
"verbspec can be one of \"singular/plural\", \"singular\", \"singular/\", or \"/plural\", e.g., \"is/are\", \"is\", \"is/\", or \"/are\".";
"The object is checked to see whether it is singular or plural.  This is inferred from its .gender property.  If .gender doesn't exist or the object itself is invalid, we assume singular.";
{spec, ?object = player} = args;
i = index(spec + "/", "/");
sing = spec[1..i - 1];
if (i < length(spec))
plur = spec[i + 1..$];
else
plur = "";
endif
cap = strcmp("a", (i == 1) ? spec[2] | spec) > 0;
if (((valid(object) && (STR == typeof(g = `object.gender ! ANY'))) && (i = g in this.genders)) && this.is_plural[i])
vb = plur || this:_verb_plural(sing, i);
else
vb = sing || this:_verb_singular(plur, i);
endif
if (cap)
return $string_utils:capitalize(vb);
else
return vb;
endif
.
#41:4
{st, idx} = args;
if (typeof(st) != STR)
return E_INVARG;
endif
len = length(st);
if ((len >= 3) && (rindex(st, "n't") == (len - 2)))
return this:_verb_plural(st[1..len - 3], idx) + "n't";
elseif (i = st in {"has", "is"})
return this.({"have", "be"}[i])[idx];
elseif (st == "was")
return (idx > 6) ? "were" | st;
elseif ((len <= 3) || (st[len] != "s"))
return st;
elseif (st[len - 1] != "e")
return st[1..len - 1];
"elseif ((r = (rindex(st, \"sses\") || rindex(st, \"zzes\"))) && (r == (len - 3)))";
elseif ((r = rindex(st, "zzes")) && (r == (len - 3)))
return st[1..len - 3];
elseif ((((st[len - 2] == "h") && index("cs", st[len - 3])) || index("ox", st[len - 2])) || (st[len - 3..len - 2] == "ss"))
return st[1..len - 2];
"washes => wash, belches => belch, boxes => box";
"used to have || ((st[len - 2] == \"s\") && (!index(\"aeiouy\", st[len - 3])))";
"so that <consonant>ses => <consonant>s";
"known examples: none";
"counterexample: browses => browse";
"update of sorts--put in code to handle passes => pass";
elseif (st[len - 2] == "i")
return st[1..len - 3] + "y";
else
return st[1..len - 1];
endif
.
#41:5
{st, ?idx = 1} = args;
if (typeof(st) != STR)
return E_INVARG;
endif
len = length(st);
if ((len >= 3) && (rindex(st, "n't") == (len - 2)))
return this:_verb_singular(st[1..len - 3], idx) + "n't";
elseif (i = st in {"have", "are"})
return this.({"have", "be"}[i])[idx];
elseif ((st[len] == "y") && (!index("aeiou", st[len - 1])))
return st[1..len - 1] + "ies";
elseif (index("sz", st[len]) && index("aeiou", st[len - 1]))
return (st + st[len]) + "es";
elseif (index("osx", st[len]) || ((len > 1) && (index("chsh", st[len - 1..len]) % 2)))
return st + "es";
else
return st + "s";
endif
.
#41:6
"_do(cap,object,modifiers...)";
{cap, object, modifiers} = args;
if (!modifiers)
if (typeof(object) != OBJ)
return tostr(object);
elseif (!valid(object))
return (cap ? "N" | "n") + "othing";
else
return cap ? object:titlec() | object:title();
endif
elseif (modifiers[1] == ".")
if (i = index(modifiers[2..$], "."))
i = i + 1;
elseif (!(i = (index(modifiers, ":") || index(modifiers, "#")) || index(modifiers, "!")))
i = length(modifiers) + 1;
endif
if (typeof(o = `object.(modifiers[2..i - 1]) ! ANY') == ERR)
return tostr("%(", o, ")");
else
return this:_do(cap || (strcmp("a", modifiers[2]) > 0), o, modifiers[i..$]);
endif
elseif (modifiers[1] == ":")
if (typeof(object) != OBJ)
return tostr("%(", E_TYPE, ")");
elseif (p = this:get_pronoun(modifiers, object))
return p;
else
return tostr("%(", modifiers, "??)");
endif
elseif (modifiers[1] == "#")
return tostr(object);
elseif (modifiers[1] == "!")
return this:get_conj(modifiers[2..$], object);
else
i = (((index(modifiers, ".") || index(modifiers, ":")) || index(modifiers, "#")) || index(modifiers, "!")) || (length(modifiers) + 1);
s = modifiers[1..i - 1];
if (j = s in {"dobj", "iobj", "this"})
return this:_do(cap, {dobj, iobj, callers()[2][1]}[j], modifiers[i..$]);
else
return tostr("%(", s, "??)");
endif
endif
.
#41:7
"Experimental pronoun substitution. The official version is on $string_utils.";
"syntax:  :pronoun_sub(text[,who])";
"experimental version that accomodates Aladdin's style...";
set_task_perms($no_one);
{old, ?who = player} = args;
if (typeof(old) == LIST)
plines = {};
for line in (old)
plines = {@plines, this:pronoun_sub(line, who)};
endfor
return plines;
endif
new = "";
here = valid(who) ? who.location | $nothing;
objspec = "nditl";
objects = {who, dobj, iobj, caller, here};
prnspec = "sopqrSOPQR";
prprops = {"ps", "po", "pp", "pq", "pr", "Ps", "Po", "Pp", "Pq", "Pr"};
oldlen = length(old);
while ((prcnt = index(old, "%")) && (prcnt < oldlen))
cp_args = {};
s = old[k = prcnt + 1];
if (brace = index("([{", s))
if (!(w = index(old[k + 1..oldlen], ")]}"[brace])))
return new + old;
elseif (brace == 3)
s = this:_do(0, who, old[prcnt + 2..(k = k + w) - 1]);
else
p = old[prcnt + 2..(k = k + w) - 1];
if (brace == 1)
cp_args = {who, p};
elseif (p[1] == "#")
s = (o = index(objspec, p[2])) ? tostr(objects[o]) | (("[" + p) + "]");
elseif (!(o = index(objspec, p[1])))
s = ("[" + p) + "]";
else
cp_args = {objects[o], p[2..w - 1], strcmp(p[1], "a") < 0};
endif
endif
elseif (o = index(objspec, s))
cp_args = {objects[o], "", strcmp(s, "a") < 0};
elseif (w = index(prnspec, s, 1))
cp_args = {who, prprops[w]};
elseif (s == "#")
s = tostr(who);
elseif (s != "%")
s = "%" + s;
endif
new = (new + old[1..prcnt - 1]) + ((!cp_args) ? s | ((typeof(sub = $string_utils:_cap_property(@cp_args)) != ERR) ? sub | (("%(" + tostr(sub)) + ")")));
old = old[k + 1..oldlen];
oldlen = oldlen - k;
endwhile
return new + old;
.
#42:0
"$perm_utils:controls(who, what)";
"Is WHO allowed to hack on WHAT?";
{who, what} = args;
return (valid(who) && valid(what)) && (who.wizard || (who == what.owner));
.
#42:1
":apply(permstring,mods) => new permstring.";
"permstring is a permissions string, mods is a concatenation of strings of the form +<letters>, !<letters>, or -<letters>, where <letters> is a string of letters as might appear in a permissions string (`+' adds the specified permissions, `-' or `!' removes them; `-' and `!' are entirely equivalent).";
{perms, mods} = args;
if ((!mods) || (!index("!-+", mods[1])))
return mods;
endif
i = 1;
while (i <= length(mods))
if (mods[i] == "+")
while (((i = i + 1) <= length(mods)) && (!index("!-+", mods[i])))
if (!index(perms, mods[i]))
perms = perms + mods[i];
endif
endwhile
else
"mods[i] must be ! or -";
while (((i = i + 1) <= length(mods)) && (!index("!-+", mods[i])))
perms = strsub(perms, mods[i], "");
endwhile
endif
endwhile
return perms;
.
#42:2
":caller([include line numbers])";
"  -- returns the first caller in the callers() stack distinct from `this'";
{?lineno = 0} = args;
c = callers(lineno);
{stage, lc, nono} = {1, length(c), {c[1][1], $nothing}};
while (((stage = stage + 1) <= lc) && (c[stage][1] in nono))
endwhile
return c[stage];
.
#42:3
"Syntax:  controls_prop(OBJ who, OBJ what, STR propname)   => 0 | 1";
"         controls_verb(OBJ who, OBJ what, STR verbname)   => 0 | 1";
"";
"Is WHO allowed to hack on WHAT's PROPNAME? Or VERBNAME?";
{who, what, name} = args;
bi = (verb == "controls_verb") ? "verb_info" | "property_info";
return who.wizard || (who == call_function(bi, what, name)[1]);
.
#43:0
"Given a time() or ctime()-style date, this returns the full name of the day.";
if (typeof(args[1]) == INT)
time = ctime(args[1]);
elseif (typeof(args[1]) == STR)
time = args[1];
else
return E_TYPE;
endif
dayabbr = $string_utils:explode(time)[1];
return this.days[dayabbr in this.dayabbrs];
.
#43:1
"Given a time() or ctime()-style date, this returns the full name";
"of the month.";
if (typeof(args[1]) == INT)
time = ctime(args[1]);
elseif (typeof(args[1]) == STR)
time = args[1];
else
return E_TYPE;
endif
monthabbr = $string_utils:explode(time)[2];
return this.months[monthabbr in this.monthabbrs];
.
#43:2
"Return a time in the form [h]h[:mm[:ss]] {a.m.|p.m.}.  Args are";
"[1]   either a time()- or a ctime()-style date, and";
"[2]   (optional) the precision desired--1 for hours, 2 for minutes,";
"        3 for seconds.  If not given, precision defaults to minutes";
{time, ?precision = 2} = args;
if (typeof(time) == INT)
time = ctime(time);
elseif (typeof(time) != STR)
return E_TYPE;
endif
time = $string_utils:explode(time)[4];
hour = toint(time[1..2]);
if (hour == 0)
time = ("12" + time[3..(precision * 3) - 1]) + " a.m.";
elseif (hour == 12)
time = time[1..(precision * 3) - 1] + " p.m.";
elseif (hour > 12)
time = (tostr(hour - 12) + time[3..(precision * 3) - 1]) + " p.m.";
else
time = (tostr(hour) + time[3..(precision * 3) - 1]) + " a.m.";
endif
return time;
.
#43:3
"Given string hh:mm:ss ($string_utils:explode(ctime(time))[4]), this returns";
"the number of seconds elapsed since 00:00:00.  I can't remember why I";
"created this verb, but I'm sure it serves some useful purpose.";
return (((60 * 60) * toint(args[1][1..2])) + (60 * toint(args[1][4..5]))) + toint(args[1][7..8]);
.
#43:4
{?time = time()} = args;
r = 10000;
h = (r * r) + (r / 2);
t = ((time + 120) % 86400) / 240;
s = (5 * ((time - 14957676) % 31556952)) / 438291;
phi = (s + t) + this.corr;
cs = $trig_utils:cos(s);
spss = ((($trig_utils:sin(phi) * $trig_utils:sin(s)) + h) / r) - r;
cpcs = ((($trig_utils:cos(phi) * cs) + h) / r) - r;
return (((((this.stsd * cs) - (this.ctcd * cpcs)) - (this.ct * spss)) + h) / r) - r;
.
#43:5
"Given a string such as returned by ctime(), return the corresponding time-in-seconds-since-1970 time returned by time(), or E_DIV if the format is wrong in some essential way.";
words = $string_utils:explode(args[1]);
if (length(words) == 5)
"Arrgh!  the old ctime() didn't return a time zone, yet it arbitrarily decides whether it's standard or daylight savings time.  URK!!!!!";
words = listappend(words, "PST");
endif
if ((((length(words) != 6) || (length(hms = $string_utils:explode(words[4], ":")) != 3)) || (!(month = words[2] in this.monthabbrs))) || (!(zone = $list_utils:assoc(words[6], this.timezones))))
return E_DIV;
endif
year = toint(words[5]);
day = ({-1, 30, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334}[month] + toint(words[3])) + (year * 366);
zone = zone[2];
return (((((((((((((day - ((day + 1038) / 1464)) - ((day + 672) / 1464)) - ((day + 306) / 1464)) - ((day + 109740) / 146400)) - ((day + 73140) / 146400)) - ((day + 36540) / 146400)) - 719528) * 24) + toint(hms[1])) + zone) * 60) + toint(hms[2])) * 60) + toint(hms[3]);
.
#43:6
s = args[1];
if (s < 0)
return "-" + this:(verb)(-s);
endif
m = s / 60;
s = s % 60;
if (m)
ss = tostr((s < 10) ? ":0" | ":", s);
h = m / 60;
m = m % 60;
if (h)
ss = tostr((m < 10) ? ":0" | ":", m, ss);
d = h / 24;
h = h % 24;
return tostr(@d ? {d, (h < 10) ? ":0" | ":"} | {}, h, ss);
else
return tostr(m, ss);
endif
else
return tostr(s);
endif
.
#43:7
"english_time(time [,reference time]): returns the time as a string of";
"years, months, days, hours, minutes and seconds using the reference time as";
"the start time and incrementing forwards. it can be given in either ctime()";
"or time() format. if a reference time is not given, it is set to time().";
{_time, ?reftime = time()} = args;
if (_time < 1)
return "0 seconds";
endif
_ctime = (typeof(reftime) == INT) ? ctime(reftime) | reftime;
seclist = {60, 60, 24};
units = {"year", "month", "day", "hour", "minute", "second"};
timelist = {};
for unit in (seclist)
timelist = {_time % unit, @timelist};
_time = _time / unit;
endfor
months = 0;
month = _ctime[5..7] in $time_utils.monthabbrs;
year = toint(_ctime[21..24]);
"attribution: the algorithm used is from the eminently eminent g7.";
while (_time >= (days = this.monthlens[month] + (((month == 2) && ((year % 4) == 0)) && (!((year % 400) in {100, 200, 300})))))
_time = _time - days;
months = months + 1;
if ((month = month + 1) > 12)
year = year + 1;
month = 1;
endif
$command_utils:suspend_if_needed(0);
endwhile
timelist = {months / 12, months % 12, _time, @timelist};
for unit in (units)
i = unit in units;
if (timelist[i] > 0)
units[i] = ((tostr(timelist[i]) + " ") + units[i]) + ((timelist[i] == 1) ? "" | "s");
else
units = listdelete(units, i);
timelist = listdelete(timelist, i);
endif
endfor
return $string_utils:english_list(units);
.
#43:8
"from_day(day_of_week,which [,reference time])";
"numeric time (seconds since 1970) corresponding to midnight (PST) of the given weekday.  Use either the name of the day or a 1..7 number (1==Sunday,...)";
"  which==-1 => use most recent such day.";
"  which==+1 => use first upcoming such day.";
"  which==0  => use closest such day.";
"larger (absolute) values for which specify a certain number of weeks into the future or past.";
{day, ?dir = 0, ?reftime = time()} = args;
if (!(toint(day) || (day = $string_utils:find_prefix(day, this.days))))
return E_DIV;
endif
delta = {288000, 374400, 460800, 547200, 28800, 115200, 201600}[toint(day)];
time = reftime - delta;
if (dir)
time = (time / 604800) + ((dir > 0) ? dir | (dir + 1));
else
time = (time + 302400) / 604800;
endif
return (time * 604800) + delta;
.
#43:9
"from_month(month,which[,d])";
"numeric time (seconds since 1970) corresponding to midnight (PST) of the dth (first) day of the given month.  Use either the month name or a 1..12 number (1==January,...)";
"  which==-1 => use most recent such month.";
"  which==+1 => use first upcoming such month.";
"  which==0  => use closest such month.";
"larger (absolute) values for which specify a certain number of years into the future or past.";
{month, ?dir = 0, ?dth = 1} = args;
if (!(toint(month) || (month = $string_utils:find_prefix(month, this.months))))
return E_DIV;
endif
delta = ({0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334}[month] + dth) - 1;
day = (time() - 28800) / 86400;
day = (day - ((day + 672) / 1461)) - delta;
if (dir)
day = ((day / 365) + dir) + (dir <= 0);
else
day = ((2 * day) + 365) / 730;
endif
day = (day * 365) + delta;
day = day + ((day + 671) / 1460);
return (day * 86400) + 28800;
.
#43:10
"Takes a time that is midnight PST and converts it to the nearest PDT midnight time if it's during that part of the year where we use PDT.";
time = args[1];
return time - (3600 * (((toint(ctime(time)[12..13]) + 12) % 24) - 12));
.
#43:11
"Works like pronoun substitution, but substitutes time stuff.";
"Call with time_sub(string, time). returns a string.";
"time is an optional integer in time() format.  If omitted, time() is used.";
"Macros which are unknown are ignored. $Q -> the empty string.";
"Terminal $ are ignored.";
"$H -> hour #. $M -> min #. $S -> second #. 24-hour format, fixed width.";
"$h, $m, $s same x/c have not-fixed format. 00:03:24 vs. 0:3:24";
"$O/$o -> numeric hour in 12-hour format.";
"$D -> long day name. $d -> short day name.";
"$N -> long month name. $n -> short month name.";
"$Y -> long year # (e.g. '1991'). $y -> short year # (e.g. '91')";
"$Z -> the time zone    (added in by r'm later)";
"$P/$p -> AM/PM, or am/pm.";
"$T -> date number. $t -> date number with no extra whitespace etc.";
"$1 -> Month in fixed-width numeric format (01-12)   (added by dpk)";
"$2 -> Month in nonfixed numeric format (1-12)";
"$3 -> Date in fixed-width format, 0-fill";
"$$ -> $.";
"";
"This verb stolen from Ozymandias's #4835:time_subst.";
res = "";
{thestr, ?thetime = time()} = args;
if ((typeof(thestr) != STR) || (typeof(thetime) != INT))
player:tell("Bad arguments to time_subst.");
return;
endif
itslength = length(thestr);
if (!itslength)
return "";
endif
done = 0;
cctime = ctime(thetime);
while (dollar = index(thestr, "$"))
res = res + thestr[1..dollar - 1];
if (dollar == length(thestr))
return res;
endif
thechar = thestr[dollar + 1];
thestr[1..dollar + 1] = "";
if (thechar == "$")
res = res + "$";
elseif (!strcmp(thechar, "h"))
res = res + $string_utils:trim(tostr(toint(cctime[12..13])));
elseif (thechar == "H")
res = res + cctime[12..13];
elseif (!strcmp(thechar, "m"))
res = res + $string_utils:trim(tostr(toint(cctime[15..16])));
elseif (thechar == "M")
res = res + cctime[15..16];
elseif (!strcmp(thechar, "s"))
res = res + $string_utils:trim(tostr(toint(cctime[18..19])));
elseif (thechar == "S")
res = res + cctime[18..19];
elseif (!strcmp(thechar, "D"))
res = res + $time_utils:day(thetime);
elseif (thechar == "d")
res = res + cctime[1..3];
elseif (!strcmp(thechar, "N"))
res = res + $time_utils:month(thetime);
elseif (thechar == "n")
res = res + cctime[5..7];
elseif (!strcmp(thechar, "T"))
res = res + cctime[9..10];
elseif (thechar == "t")
res = res + $string_utils:trim(cctime[9..10]);
elseif (!strcmp(thechar, "o"))
res = tostr(res, ((toint(cctime[12..13]) + 11) % 12) + 1);
elseif (thechar == "O")
res = res + $string_utils:right(tostr(((toint(cctime[12..13]) + 11) % 12) + 1), 2, "0");
elseif (!strcmp(thechar, "p"))
res = res + ((toint(cctime[12..13]) >= 12) ? "pm" | "am");
elseif (thechar == "P")
res = res + ((toint(cctime[12..13]) >= 12) ? "PM" | "AM");
elseif (!strcmp(thechar, "y"))
res = res + cctime[23..24];
elseif (thechar == "Y")
res = res + cctime[21..24];
elseif (thechar == "Z")
res = res + cctime[26..$];
elseif (thechar == "1")
res = res + $string_utils:right(tostr($string_utils:explode(cctime)[2] in this.monthabbrs), 2, "0");
elseif (thechar == "2")
res = res + tostr($string_utils:explode(cctime)[2] in this.monthabbrs);
elseif (thechar == "3")
res = res + $string_utils:subst(cctime[9..10], {{" ", "0"}});
endif
endwhile
return res + thestr;
.
#43:12
"Copied from Archer (#52775):mmddyy Tue Apr  6 17:04:26 1993 PDT";
"Given a time() or ctime()-style date and an optional separator, this returns the MM/DD/YY or DD/MM/YY form of the date (depending on the verb called.)  The default seperator is '/'";
{time, ?divstr = "/"} = args;
if (typeof(time) == INT)
time = ctime(time);
elseif (typeof(time) != STR)
return E_TYPE;
endif
date = $string_utils:explode(time);
day = toint(date[3]);
month = date[2] in $time_utils.monthabbrs;
year = date[5];
daystr = (day < 10) ? "0" + tostr(day) | tostr(day);
monthstr = (month < 10) ? "0" + tostr(month) | tostr(month);
yearstr = tostr(year)[3..4];
if (verb == "mmddyy")
return tostr(monthstr, divstr, daystr, divstr, yearstr);
else
return tostr(daystr, divstr, monthstr, divstr, yearstr);
endif
.
#43:13
"$time_utils:parse_english_time_interval(n1,u1,n2,u2,...)";
"or $time_utils:parse_english_time_interval(\"n1 u1[,] [and] n2[,] u2 [and] ...\")";
"There must be an even number of arguments, all of which must be strings,";
" or there must be just one argument which is the entire string to be parsed.";
"The n's are are numeric strings, and the u's are unit names.";
"The known units are in $time_utils.time_units,";
" which must be kept sorted with bigger times at the head.";
"Returns the time represented by those words.";
"For example,";
" $time_utils:parse_english_time_interval(\"30\",\"secs\",\"2\",\"minutes\",\"31\",\"seconds\") => 181";
if ((length(args) == 1) && index(args[1], " "))
return $time_utils:parse_english_time_interval(@$string_utils:words(args[1]));
endif
a = $list_utils:setremove_all(args, "and");
nargs = length(a);
if (nargs % 2)
return E_ARGS;
endif
nsec = 0;
n = 0;
for i in [1..nargs]
if ((i % 2) == 1)
if ($string_utils:is_numeric(a[i]))
n = toint(a[i]);
elseif (a[i] in {"a", "an"})
n = 1;
elseif (a[i] in {"no"})
n = 0;
else
return E_INVARG;
endif
else
unit = a[i];
if (unit[$] == ",")
unit = unit[1..$ - 1];
endif
ok = 0;
for entry in ($time_utils.time_units)
if ((!ok) && (unit in entry[2..$]))
nsec = nsec + (entry[1] * n);
ok = 1;
endif
endfor
if (!ok)
return E_INVARG;
endif
endif
endfor
return nsec;
.
#43:14
"Copied from Ballroom Complex (#29992):from_date by Keelah! (#30246) Tue Jul 13 19:42:32 1993 PDT";
":seconds_until_date(month,day,time,which)";
"month is a string or the numeric representation of the month, day is a number, time is a string in the following format, hh:mm:ss.";
"which==-1 => use most recent such month.";
"which==+1 => use first upcoming such month.";
"which==0 => use closest such month.";
"This will return the number of seconds until the month, day and time given to it.";
"Written by Keelah, on July 5, 1993.";
{month, day, time, which} = args;
converted = 0;
converted = converted + $time_utils:from_month(month, which, day);
current = this:seconds_until_time("12:00:00");
get_seconds = this:seconds_until_time(time);
if (get_seconds < 0)
get_seconds = (get_seconds + 39600) - current;
else
get_seconds = (get_seconds + 39600) - current;
endif
converted = (converted + get_seconds) - time();
return converted;
.
#43:15
"Copied from Ballroom Complex (#29992):seconds_until by Keelah! (#30246) Tue Jul 13 19:42:37 1993 PDT";
":seconds_until_time(hh:mm:ss)";
"Given the string hh:mm:ss, this returns the number of seconds until that hh:mm:ss. If the hh:mm:ss is before the current time(), the number returned is a negative, else the number is a positive.";
"Written by Keelah, on July 4, 1993.";
current = $time_utils:to_seconds(ctime()[12..19]);
time = $time_utils:to_seconds(args[1]);
return toint(time) - toint(current);
.
#43:16
"Just like ctime(), but rfc-822 compliant.  I hope.";
c = $string_utils:Explode(ctime(@args));
return tostr(c[1], ", ", c[3], " ", c[2], " ", c[5], " ", c[4], " ", c[6]);
"Last modified Fri Oct 17 23:17:25 1997 EDT by neuro (#3642) on opal moo.";
.
#43:17
"Given a time() or ctime()-style date and an optional separator, this returns the MM/DD/YYYY or DD/MM/YYYY form of the date (depending on the verb called.)  The default seperator is '/'";
{time, ?divstr = "/"} = args;
if (typeof(time) == INT)
time = ctime(time);
elseif (typeof(time) != STR)
return E_TYPE;
endif
date = $string_utils:explode(time);
day = toint(date[3]);
month = date[2] in $time_utils.monthabbrs;
year = date[5];
daystr = (day < 10) ? "0" + tostr(day) | tostr(day);
monthstr = (month < 10) ? "0" + tostr(month) | tostr(month);
yearstr = tostr(year);
if (verb == "mmddyyyy")
return tostr(monthstr, divstr, daystr, divstr, yearstr);
else
return tostr(daystr, divstr, monthstr, divstr, yearstr);
endif
.
#45:0
"For changing mailing list aliases, we check to make sure that none of the aliases match existing mailing list aliases.  Aliases containing spaces are not used in addresses and so are not subject to this restriction ($mail_agent:match will not match on them, however, so they only match if used in the immediate room, e.g., with match_object() or somesuch).";
"  => E_PERM   if you don't own this";
{newaliases} = args;
if ((caller != this) && (!$perm_utils:controls(caller_perms(), this)))
return E_PERM;
elseif (this.location != $mail_agent)
"... we don't care...";
return pass(@args);
elseif (length(newaliases) > $mail_agent.max_list_aliases)
return E_QUOTA;
else
for a in (aliases = newaliases)
if (index(a, " "))
"... we don't care...";
elseif (rp = $mail_agent:reserved_pattern(a))
player:tell("Mailing list name \"", a, "\" uses a reserved pattern: ", rp[1]);
aliases = setremove(aliases, a);
elseif (valid(p = $mail_agent:match(a, #-1)) && ((p != this) && (a in p.aliases)))
player:tell("Mailing list name \"", a, "\" in use on ", p.name, "(", p, ")");
aliases = setremove(aliases, a);
endif
endfor
return pass(aliases) && (newaliases == aliases);
endif
.
#45:1
"Returns full name and mail aliases for this list, read and write status by the player, and a short description. Calling :look_self(1) will omit the description.";
{?brief = 0} = args;
namelist = "*" + ((names = this:mail_names()) ? $string_utils:from_list(names, ", *") | tostr(this));
if (typeof(fwd = this:mail_forward()) != LIST)
fwd = {};
endif
if (this:is_writable_by(player))
if (player in fwd)
read = " [Writable/Subscribed]";
else
read = " [Writable]";
endif
elseif (this.readers == 1)
read = tostr(" [Public", (player in fwd) ? "/Subscribed]" | "]");
elseif (player in fwd)
read = " [Subscribed]";
elseif (this:is_readable_by(player))
read = " [Readable]";
else
read = "";
endif
if (this:is_usable_by($no_one))
mod = "";
elseif (this:is_usable_by(player))
mod = " [Approved]";
else
mod = " [Moderated]";
endif
player:tell(namelist, "  (", this, ")", read, mod);
if (!brief)
d = this:description();
if (typeof(d) == STR)
d = {d};
endif
for l in (d)
if (length(l) <= 75)
ls = {l};
else
ls = $generic_editor:fill_string(l, 76);
endif
for line in (ls)
player:tell("    ", line);
$command_utils:suspend_if_needed(0);
endfor
endfor
endif
.
#45:2
return $perm_utils:controls(who = args[1], this) || `who in this.writers ! E_TYPE';
.
#45:3
return (typeof(this.readers) != LIST) || (((who = args[1]) in this.readers) || (this:is_writable_by(who) || $mail_agent:sends_to(1, this, who)));
.
#45:4
who = args[1];
if (this.moderated)
return `who in this.moderated ! E_TYPE' || (this:is_writable_by(who) || who.wizard);
else
return this.guests_can_send_here || (!$object_utils:isa(who, $guest));
endif
.
#45:5
if ((args && (!this:is_usable_by(args[1]))) && (!args[1].wizard))
return this:moderator_notify(@args);
else
return this.(verb);
endif
.
#45:6
if ((args && (!this:is_usable_by(args[1]))) && (!args[1].wizard))
return this:moderator_forward(@args);
elseif (typeof(mf = this.(verb)) == STR)
return $string_utils:pronoun_sub(mf, @args);
else
return mf;
endif
.
#45:7
if (typeof(mf = this.(verb)) == STR)
return $string_utils:pronoun_sub(mf, args ? args[1] | $player);
else
return mf;
endif
.
#45:8
":add_forward(recip[,recip...]) adds new recipients to this list.  Returns a string error message or a list of results (recip => success, E_PERM => not allowed, E_INVARG => not a valid recipient, string => other kind of failure)";
if (caller == $mail_editor)
perms = player;
else
perms = caller_perms();
endif
result = {};
forward_self = (!this.mail_forward) || (this in this.mail_forward);
for recip in (args)
if ((!valid(recip)) || ((!is_player(recip)) && (!($mail_recipient in $object_utils:ancestors(recip)))))
r = E_INVARG;
elseif ($perm_utils:controls(perms, this) || ((typeof(this.readers) != LIST) && $perm_utils:controls(perms, recip)))
this.mail_forward = setadd(this.mail_forward, recip);
r = recip;
else
r = E_PERM;
endif
result = listappend(result, r);
endfor
if ((length(this.mail_forward) > 1) && ($nothing in this.mail_forward))
this.mail_forward = setremove(this.mail_forward, $nothing);
endif
if (forward_self)
this.mail_forward = setadd(this.mail_forward, this);
endif
return result;
.
#45:9
":delete_forward(recip[,recip...]) removes recipients to this list.  Returns a list of results (E_PERM => not allowed, E_INVARG => not on list)";
if (caller == $mail_editor)
perms = player;
else
perms = caller_perms();
endif
result = {};
forward_self = (!this.mail_forward) || (this in this.mail_forward);
for recip in (args)
if (!(recip in this.mail_forward))
r = E_INVARG;
elseif (((!valid(recip)) || $perm_utils:controls(perms, recip)) || $perm_utils:controls(perms, this))
if (recip == this)
forward_self = 0;
endif
this.mail_forward = setremove(this.mail_forward, recip);
r = recip;
else
r = E_PERM;
endif
result = listappend(result, r);
endfor
if (!(forward_self || this.mail_forward))
this.mail_forward = {$nothing};
elseif (this.mail_forward == {this})
this.mail_forward = {};
endif
return result;
.
#45:10
":add_notify(recip[,recip...]) adds new notifiees to this list.  Returns a list of results (recip => success, E_PERM => not allowed, E_INVARG => not a valid recipient)";
if (caller == $mail_editor)
perms = player;
else
perms = caller_perms();
endif
result = {};
for recip in (args)
if ((!valid(recip)) || (recip == this))
r = E_INVARG;
elseif ($perm_utils:controls(perms, this) || (this:is_readable_by(perms) && $perm_utils:controls(perms, recip)))
this.mail_notify = setadd(this.mail_notify, recip);
r = recip;
else
r = E_PERM;
endif
result = listappend(result, r);
endfor
return result;
.
#45:11
":delete_notify(recip[,recip...]) removes notifiees from this list.  Returns a list of results (E_PERM => not allowed, E_INVARG => not on list)";
if (caller == $mail_editor)
perms = player;
else
perms = caller_perms();
endif
result = {};
rmthis = 0;
for recip in (args)
if (!(recip in this.mail_notify))
r = E_INVARG;
elseif ((!valid(recip)) || ($perm_utils:controls(perms, recip) || $perm_utils:controls(perms, this)))
if (recip == this)
rmthis = 1;
endif
this.mail_notify = setremove(this.mail_notify, recip);
r = recip;
else
r = E_PERM;
endif
result = listappend(result, r);
endfor
return result;
.
#45:12
if (!this:ok_write(caller, caller_perms()))
return E_PERM;
else
this.messages = {@this.messages, {new = this:new_message_num(), args[1]}};
this.last_msg_date = args[1][1];
this.last_used_time = time();
return new;
endif
.
#45:13
":ok(caller,callerperms) => true iff caller can do read operations";
return (args[1] in {this, $mail_agent}) || (args[2].wizard || this:is_readable_by(args[2]));
.
#45:14
":ok_write(caller,callerperms) => true iff caller can do write operations";
return (args[1] in {this, $mail_agent}) || (args[2].wizard || this:is_writable_by(args[2]));
.
#45:15
":parse_message_seq(strings,cur) => {msg_seq,@unused_strings} or string error";
"";
":from_msg_seq(olist)     => msg_seq of messages from those people";
":%from_msg_seq(strings)  => msg_seq of messages with strings in the From: line";
":to_msg_seq(olist)       => msg_seq of messages to those people";
":%to_msg_seq(strings)    => msg_seq of messages with strings in the To: line";
":subject_msg_seq(target) => msg_seq of messages with target in the Subject:";
":body_msg_seq(target)    => msg_seq of messages with target in the body";
":new_message_num()    => number that the next incoming message will receive.";
":length_num_le(num)   => number of messages in folder numbered <= num";
":length_date_le(date) => number of messages in folder dated <= date";
":length_all_msgs()    => number of messages in folder";
":exists_num_eq(num)   => index of message in folder numbered == num, or 0";
"";
":display_seq_headers(msg_seq[,cur])   display message summary lines";
":display_seq_full(msg_seq[,preamble]) display entire messages";
"            => number of final message displayed";
":list_rmm() displays contents of .messages_going.";
"            => the number of messages in .messages_going.";
"";
":messages_in_seq(msg_seq) => list of messages in msg_seq on folder";
"";
"See the corresponding routines on $mail_agent for more detail.";
return this:ok(caller, caller_perms()) ? $mail_agent:(verb)(@args) | E_PERM;
.
#45:16
":length_date_le(date) => number of messages in folder dated > date";
"";
if (this:ok(caller, caller_perms()))
date = args[1];
return (this.last_msg_date <= date) ? 0 | $mail_agent:(verb)(date);
else
return E_PERM;
endif
.
#45:17
":rm_message_seq(msg_seq) removes the given sequence of from folder";
"               => string giving msg numbers removed";
"See the corresponding routine on $mail_agent.";
if (this:ok_write(caller, caller_perms()))
return $mail_agent:(verb)(@args);
elseif (this:ok(caller, caller_perms()) && (seq = this:own_messages_filter(caller_perms(), @args)))
return $mail_agent:(verb)(@listset(args, seq, 1));
else
return E_PERM;
endif
.
#45:18
":rm_message_seq(msg_seq) removes the given sequence of from folder";
"               => string giving msg numbers removed";
":list_rmm()    displays contents of .messages_going.";
"               => number of messages in .messages_going.";
":undo_rmm()    restores previously deleted messages from .messages_going.";
"               => msg_seq of restored messages";
":expunge_rmm() destroys contents of .messages_going once and for all.";
"               => number of messages in .messages_going.";
":renumber([cur])  renumbers all messages";
"               => {number of messages,new cur}.";
":set_message_body_by_index(i,newbody)";
"               changes the body of the i-th message.";
"";
"See the corresponding routines on $mail_agent.";
return this:ok_write(caller, caller_perms()) ? $mail_agent:(verb)(@args) | E_PERM;
.
#45:19
":own_messages_filter(who,msg_seq) => subsequence of msg_seq consisting of those messages that <who> is actually allowed to remove (on the assumption that <who> is not one of the allowed writers of this folder.";
if (!this.rmm_own_msgs)
return E_PERM;
elseif ((typeof(seq = this:from_msg_seq({args[1]}, args[2])) != LIST) || (seq != args[2]))
return {};
else
return seq;
endif
.
#45:20
"NOTE:  this routine is obsolete, use :messages_in_seq()";
":messages(num) => returns the message numbered num.";
":messages()    => returns the entire list of messages (can be SLOW).";
if (!this:ok(caller, caller_perms()))
return E_PERM;
elseif (!args)
return this:messages_in_seq({1, this:length_all_msgs() + 1});
elseif (!(n = this:exists_num_eq(args[1])))
return E_RANGE;
else
return this:messages_in_seq(n)[2];
endif
.
#45:21
if (!this:ok_write(caller, caller_perms()))
return E_PERM;
endif
date_seq = {};
for msg in (this.messages)
date_seq = {@date_seq, msg[2][1]};
endfor
msg_order = $list_utils:sort($list_utils:range(n = length(msgs = this.messages)), date_seq);
newmsgs = {};
for i in [1..n]
if ($command_utils:suspend_if_needed(0))
player:tell("...", i);
endif
newmsgs = {@newmsgs, {i, msgs[msg_order[i]][2]}};
endfor
if (length(this.messages) != n)
"...shit, new mail received,... start again...";
fork (0)
this:date_sort();
endfork
else
this.messages = newmsgs;
this.last_used_time = newmsgs[$][2][1];
endif
.
#45:22
mlen = this:length_all_msgs();
this.last_msg_date = mlen && this:messages_in_seq(mlen)[2][1];
.
#45:23
return this.(verb);
.
#45:24
return $mail_agent:msg_summary_line(@args);
.
#45:25
for m in (this.messages)
$mail_agent:__convert_new(@m[2]);
$command_utils:suspend_if_needed(0);
endfor
.
#45:26
if (!this:ok_write(caller, caller_perms()))
return E_PERM;
endif
msgs = {};
i = 1;
for m in (oldmsgs = this.messages)
msgs = {@msgs, {m[1], $mail_agent:__convert_new(@m[2])}};
if ($command_utils:running_out_of_time())
player:notify(tostr("...", i, " ", this));
suspend(0);
if (oldmsgs != this.messages)
return 0;
endif
endif
i = i + 1;
endfor
this.messages = msgs;
return 1;
.
#45:27
if (caller_perms().wizard)
pass(@args);
if (!(this in {$mail_recipient, $big_mail_recipient}))
"...generic mail recipients stay in #-1...";
move(this, $mail_agent);
this:rm_message_seq($seq_utils:range(1, this:length_all_msgs()));
this:expunge_rmm();
this:_fix_last_msg_date();
this.mail_forward = {};
for p in ({"mail_notify", "moderator_forward", "moderator_notify", "writers", "readers", "expire_period", "last_used_time"})
this.(p) = $mail_recipient.(p);
endfor
endif
endif
.
#45:28
if ((caller == this) || $perm_utils:controls(caller_perms(), this))
this.mail_forward = {};
return pass(@args);
endif
.
#45:29
return "*" + this.aliases[1];
.
#45:30
names = {};
for a in (this.aliases)
if (!index(a, " "))
names = setadd(names, strsub(a, "_", "-"));
endif
endfor
return names;
.
#45:31
if (this:ok_write(caller, caller_perms()))
if ($network.active)
"Passed security check...";
set_task_perms($wiz_utils:random_wizard());
for x in (this.mail_notify)
if (!$object_utils:has_verb(x, "notify_mail"))
"In theory I should call this:delete_notify but it's ugly and ticky as sin and I'm lazy.";
this.mail_notify = setremove(this.mail_notify, x);
endif
endfor
if (this.expire_period && (rmseq = $seq_utils:remove(this:unkept_msg_seq(), 1 + this:length_date_le(time() - this.expire_period))))
"... i.e., everything not marked kept that is older than expire_period";
if (this.registered_email && this.email_validated)
format = this.owner:format_for_netforward(this:messages_in_seq(rmseq), " expired from " + $mail_agent:name(this));
$network:sendmail(this.registered_email, @{format[2], @format[1]});
"Do nothing if it bounces, etc.";
endif
this:rm_message_seq(rmseq);
return this:expunge_rmm();
else
return 0;
endif
endif
else
return E_PERM;
endif
.
#45:32
if (this:is_writable_by(caller_perms()) || this:is_writable_by(caller))
pass(@args);
else
return E_PERM;
endif
.
#45:33
":msg_full_text(@msg) => list of strings.";
"msg is a mail message (in the usual transmission format).";
"display_seq_full calls this to obtain the actual list of strings to display.";
return player:msg_text(@args);
"default is to leave it up to the player how s/he wants it to be displayed.";
.
#45:34
"Syntax:  @set_expire <recipient> to <time>";
"         @set_expire <recipient> to";
"";
"Allows the list owner to set the expiration period of this mail recipient. This is the time messages will remain before they are removed from the list. The <time> given can be in english terms (e.g., 2 months, 45 days, etc.).";
"Non-wizard mailing list owners are limited to a maximum expire period of 180 days. They are also prohibited from setting the list to non-expiring.";
"Wizards may set the expire period to 0 for no expiration.";
"The second form, leaving off the time specification, will tell you what the recipient's expire period is currently set to.";
if ((caller_perms() != #-1) && (caller_perms() != player))
return player:tell(E_PERM);
elseif (!this:is_writable_by(player))
return player:tell(E_PERM);
elseif (!iobjstr)
return player:tell(this.expire_period ? tostr("Messages will automatically expire from ", this:mail_name(), " after ", $time_utils:english_time(this.expire_period), ".") | tostr("Messages will not expire from ", this:mail_name()));
elseif (typeof(time = $time_utils:parse_english_time_interval(iobjstr)) == ERR)
return player:tell(time);
elseif ((time == 0) && (!player.wizard))
return player:tell("Only wizards may set a mailing list to not expire.");
elseif ((time > (180 * 86400)) && (!player.wizard))
return player:tell("Only a wizard may set the expiration period on a mailing list to greater than 180 days.");
endif
this.expire_period = time;
player:tell("Messages will ", (time != 0) ? tostr("automatically expire from ", this:mail_name(), " after ", $time_utils:english_time(time)) | tostr("not expire from ", this:mail_name()), ".");
.
#45:35
"Syntax:   @register <recipient> to <email-address>";
"alias     @netregister <recipient> to <email-address>";
"          @register <recipient> to";
"";
"The list owner may use this command to set a registered email address for the mail recipient. When set, mail messages that expire off of the mail recipient will be mailed to that address.";
"If you leave the email address off of the command, it will return the current registration and expiration information for that recipient if you own it.";
"The owner may register a mail recipient to any email address. However, if the address does not match his registered email address, then a password will be generated and sent to the address specified when this command is used. Then, the owner may retrieve that password and verify the address with the command:";
"";
"  @validate <recipient> with <password>";
"";
"See *B:MailingListReform #98087 for full details.";
if ((caller_perms() != #-1) && (caller_perms() != player))
return player:tell(E_PERM);
elseif (!$perm_utils:controls(player, this))
return player:tell(E_PERM);
elseif (!iobjstr)
if (this.registered_email)
player:tell(this:mail_name(), " is registered to ", this.registered_email, ". Messages will be sent there when they expire after ", (this.expire_period == 0) ? "never" | $time_utils:english_time(this.expire_period), ".");
else
player:tell(this:mail_name(), " is not registered to any address. Messages will be deleted when they expire after ", (this.expire_period == 0) ? "never" | $time_utils:english_time(this.expire_period), ".");
player:tell("Usage:  @register <recipient> to <email-address>");
endif
return;
elseif (iobjstr == $wiz_utils:get_email_address(player))
this.registered_email = $wiz_utils:get_email_address(player);
this.email_validated = 1;
player:tell("Messages expired from ", this:mail_name(), " after ", (this.expire_period == 0) ? "never" | $time_utils:english_time(this.expire_period), " will be emailed to ", this.registered_email, " (which is your registered email address).");
elseif (reason = $network:invalid_email_address(iobjstr))
return player:tell(reason, ".");
elseif (!$network.active)
return player:tell("The network is not up at the moment. Please try again later or contact a wizard for help.");
else
password = $wiz_utils:random_password(5);
result = $network:sendmail(iobjstr, tostr($network.MOO_Name, " mailing list verification"), @$generic_editor:fill_string(tostr("The mailing list ", this:mail_name(), " on ", $network.MOO_Name, " has had this address designated as the recipient of expired mail messages. If this is not correct, then you need do nothing but ignore this message. If this is correct, you must log into the MOO and type:  `@validate ", this:mail_name(), " with ", password, "' to start receiving expired mail messages."), 75));
if (result != 0)
return player:tell("Mail sending did not work: ", result, ". Address not set.");
endif
this.registered_email = iobjstr;
this.email_validated = 0;
this.validation_password = password;
player:tell("Registration complete. Password sent to the address you specified. When you receive the email, log back in to validate it with the command:  @validate <recipient> with <password>. If you do not receive the password email, try again or notify a wizard if this is a recurring problem.");
endif
.
#45:36
"Syntax:  @validate <recipient> with <password>";
"";
"This command is used to validate an email address set to receive expired messages that did not match the list owner's registered email address. When using the @register command, a password was sent via email to the address specified. This command is to verify that the password was received properly.";
if ((caller_perms() != #-1) && (caller_perms() != player))
return player:tell(E_PERM);
elseif (!$perm_utils:controls(player, this))
return player:tell(E_PERM);
elseif (!this.registered_email)
return player:tell("No email address has even been set for ", this:mail_name(), ".");
elseif (this.email_validated)
return player:tell("The email address for ", this:mail_name(), " has already been validated.");
elseif (!iobjstr)
return player:tell("Usage:  @validate <recipient> with <password>");
elseif (iobjstr != this.validation_password)
return player:tell("That is not the correct password.");
else
this.email_validated = 1;
player:tell("Password validated. Messages that expire after ", (this.expire_period == 0) ? "never" | $time_utils:english_time(this.expire_period), " from ", this:mail_name(), " will be emailed to ", this.registered_email, ".");
endif
.
#45:37
{name} = args;
if ((caller != this) && (!$perm_utils:controls(caller_perms(), this)))
return E_PERM;
elseif (this.location != $mail_agent)
"... we don't care...";
return pass(@args);
elseif (index(name, " "))
"... we don't care...";
elseif (rp = $mail_agent:reserved_pattern(name))
player:tell("Mailing list name \"", a, "\" uses a reserved pattern: ", rp[1]);
return 0;
elseif (valid(p = $mail_agent:match(name, #-1)) && ((p != this) && (name in p.aliases)))
player:tell("Mailing list name \"", name, "\" in use on ", p.name, "(", p, ")");
return 0;
endif
return pass(name);
.
#45:38
":ok_annotate(caller,callerperms) => true iff caller can do annotations";
return (args[1] in {this, $mail_agent}) || (args[2].wizard || this:is_annotatable_by(args[2]));
.
#45:39
"annotate_message_seq(note, \"append\"|\"prepend\", message_seq) ;";
"";
"Prepend or append (default is prepend) note (a list of strings) to each message in message_seq";
"Recipient must be annotatable (:is_annotatable_by() returns 1) by the caller for this to work.";
{note, appendprepend, message_seq} = args;
if (!this:ok_annotate(caller, caller_perms()))
return E_PERM;
endif
for i in ($seq_utils:tolist(message_seq))
body = this:message_body_by_index(i);
if (appendprepend == "append")
body = {@body, "", @note};
else
body = {@note, "", @body};
endif
this:set_message_body_by_index(i, body);
endfor
return 1;
"Copied from annotatetest (#87053):annotate_message_seq [verb author Puff (#1449)] at Mon Feb 14 14:04:56 2005 PST";
.
#46:0
"resolve(name,from,seen,prevrcpts,prevnotifs) => {rcpts,notifs} or E_INVARG";
"resolve(list,from,seen,prevrcpts,prevnotifs) => {bogus,rcpts,notifs}";
"Given either an address (i.e., objectid) or a list of such, traces down all .mail_forward lists and .mail_notify to determine where a message should actually go and who should be told about it.  Both forms take previous lists of recipients/notifications and add only those addresses that weren't there before.  `seen' is the stack of addresses we are currently resolving (for detecting loops).  The first form returns E_INVARG if `name' is invalid.  The second form returns all invalid addresses in the `bogus' list but still does the appropriate search on the remaining addresses.";
{recip, from, ?seen = {}, ?prevrcpts = {}, ?prevnotifs = {}} = args;
sofar = {prevrcpts, prevnotifs};
if (typeof(recip) == LIST)
bogus = {};
for r in (recip)
result = this:resolve_addr(r, from, seen, @sofar);
if (result)
sofar = result;
else
bogus = setadd(bogus, r);
endif
endfor
return {bogus, @sofar};
else
fwd = include_recip = 0;
if ((recip == $nothing) || (recip in seen))
return sofar;
elseif ((!valid(recip)) || ((!(is_player(recip) || $object_utils:isa(recip, $mail_recipient))) || (typeof(fwd = recip:mail_forward(from)) != LIST)))
"recip is a non-player non-mailing-list/folder or forwarding is screwed.";
if (typeof(fwd) == STR)
player:tell(fwd);
endif
return E_INVARG;
elseif (is_player(recip) && `recip:refuses_action(from, "mail") ! E_VERBNF')
player:tell(recip:mail_refused_msg());
return E_INVARG;
elseif (fwd)
if (r = recip in fwd)
include_recip = 1;
fwd = listdelete(fwd, r);
endif
result = this:resolve_addr(fwd, recip, setadd(seen, recip), @sofar);
if (bogus = result[1])
player:tell(recip.name, "(", recip, ")'s .mail_forward list includes the following bogus entr", (length(bogus) > 1) ? "ies:  " | "y:  ", $string_utils:english_list(bogus));
endif
sofar = result[2..3];
else
include_recip = 1;
endif
if ((ticks_left() < 1000) || (seconds_left() < 2))
suspend(0);
endif
biffs = sofar[2];
for n in (this:mail_notify(recip, from))
if (valid(n))
if (i = $list_utils:iassoc_suspended(n, biffs))
biffs[i] = setadd(biffs[i], recip);
else
biffs = {{n, recip}, @biffs};
endif
endif
if ((ticks_left() < 1000) || (seconds_left() < 2))
suspend(0);
endif
endfor
return {include_recip ? setadd(sofar[1], recip) | sofar[1], biffs};
endif
.
#46:1
"sends_to(from,addr,rcpt[,seen]) ==> true iff mail sent to addr passes through rcpt.";
{from, addr, rcpt, ?seen = {}} = args;
if (addr == rcpt)
return 1;
elseif (!(addr in seen))
seen = {@seen, addr};
for a in ((typeof(fwd = this:mail_forward(addr, @from ? {} | {from})) == LIST) ? fwd | {})
if (this:sends_to(addr, a, rcpt, seen))
return 1;
endif
$command_utils:suspend_if_needed(0);
endfor
endif
return 0;
.
#46:2
"send_message(from,rcpt-list,hdrs,msg) -- formats and sends a mail message.  hders is either the text of the subject line, or a {subject,{reply-to,...}} list.";
"Return E_PERM if from isn't owned by the caller.";
"Return {0, @invalid_rcpts} if rcpt-list contains any invalid addresses.  No mail is sent in this case.";
"Return {1, @actual_rcpts} if successful.";
{from, to, orig_hdrs, msg} = args;
"...";
"... remove bogus Resent-To/Resent-By headers...";
"...";
if ((typeof(orig_hdrs) == LIST) && (length(orig_hdrs) > 2))
hdrs = orig_hdrs[1..2];
orig_hdrs[1..2] = {};
strip = {"Resent-To", "Resent-By"};
for h in (orig_hdrs)
(h[1] in strip) || (hdrs = {@hdrs, h});
endfor
else
hdrs = orig_hdrs;
endif
"...";
"... send it...";
"...";
if ($perm_utils:controls(caller_perms(), from))
text = $mail_agent:make_message(from, to, hdrs, msg);
return this:raw_send(text, to, from);
else
return E_PERM;
endif
.
#46:3
"Copied from Mail Distribution Center (#6418):raw_send by Nosredna (#2487) Mon Feb 24 10:46:26 1997 PST";
"WIZARDLY";
"raw_send(text,rcpts,sender) -- does the actual sending of a message.  Assumes that text has already been formatted correctly.  Decides who to send it to and who wants to be notified about it and does so.";
"Return {E_PERM} if the caller is not entitled to use this verb.";
"Return {0, @invalid_rcpts} if rcpts contains any invalid addresses.  No mail is sent in this case.";
"Return {1, @actual_rcpts} if successful.";
{text, rcpts, from} = args;
if (typeof(rcpts) != LIST)
rcpts = {rcpts};
endif
if (!(caller in {$mail_agent, $mail_editor}))
return {E_PERM};
elseif (bogus = (resolve = this:resolve_addr(rcpts, from))[1])
return {0, bogus};
else
set_task_perms($wiz_utils:random_wizard());
this:touch(rcpts);
actual_rcpts = resolve[2];
biffs = resolve[3];
results = {};
for recip in (actual_rcpts)
if ((ticks_left() < 10000) || (seconds_left() < 2))
player:notify(tostr("...", recip));
suspend(1);
endif
if (typeof(e = recip:receive_message(text, from)) in {ERR, STR})
"...receive_message bombed...";
player:notify(tostr(recip, ":receive_message:  ", e));
e = 0;
elseif ((!is_player(recip)) || (!e))
"...not a player or receive_message isn't giving out the message number";
"...no need to force a notification...";
elseif (i = $list_utils:iassoc(recip, biffs))
"...player-recipient was already getting a notification...";
"...make sure notification includes a mention of him/her/itself.";
if (!(recip in listdelete(biffs[i], 1)))
biffs[i][2..1] = {recip};
endif
else
"...player-recipient wasn't originally being notified at all...";
biffs = {{recip, recip}, @biffs};
endif
results = {@results, e};
endfor
"The following is because the scheduler can BITE ME. --Nosredna";
fork (0)
for b in (biffs)
if ((ticks_left() < 10000) || (seconds_left() < 2))
suspend(1);
endif
if ($object_utils:has_callable_verb(b[1], "notify_mail"))
mnums = {};
for r in (listdelete(b, 1))
mnums = {@mnums, (rn = r in actual_rcpts) && results[rn]};
endfor
b[1]:notify_mail(from, listdelete(b, 1), mnums);
endif
endfor
endfork
return {1, @actual_rcpts};
endif
.
#46:4
who = args[1];
if ($object_utils:has_verb(who, verb))
return who:(verb)(@listdelete(args, 1));
else
return {};
endif
.
#46:5
"touch(name or list,seen) => does .last_used_time = time() if we haven't already touched this in the last hour";
{recip, ?seen = {}} = args;
if (typeof(recip) == LIST)
for r in (recip)
result = this:touch(r, seen);
$command_utils:suspend_if_needed(0);
endfor
else
if (((!valid(recip)) || (recip in seen)) || ((!is_player(recip)) && (!($mail_recipient in $object_utils:ancestors(recip)))))
"recip is neither a player nor a mailing list/folder";
else
if (fwd = this:mail_forward(recip))
this:touch(fwd, {@seen, recip});
endif
if (!is_player(recip))
recip.last_used_time = time();
endif
endif
endif
.
#46:6
player:tell_lines(this.description);
for c in (this.contents)
$command_utils:suspend_if_needed(0);
c:look_self();
endfor
.
#46:7
"Only allow mailing lists/folders in here and only if their names aren't already taken.";
what = args[1];
return ($object_utils:isa(what, $mail_recipient) && this:check_names(what, @what.aliases)) && (what:description() != parent(what):description());
.
#46:8
"...make sure the list has at least one usable name.";
"...make sure none of the aliases are already taken.";
{object, @aliases} = args;
if (typeof(object) == STR)
"... legacy; old version of this verb did not take on OBJ argument";
aliases = args;
endif
ok = 0;
if (length(aliases) > this.max_list_aliases)
player:tell("Mailing lists may not have more than ", this.max_list_aliases, " aliases.");
return 0;
endif
for a in (aliases)
sub1 = strsub(a, "_", "-");
sub2 = strsub(a, "-", "_");
if (sub1 == sub2)
check = 0;
else
check = 1;
endif
if (index(a, " "))
elseif (rp = $mail_agent:reserved_pattern(a))
player:tell("Mailing list name \"", a, "\" uses a reserved pattern: ", rp[1]);
return 0;
elseif (valid(p = $mail_agent:match(a, #-1)) && ((p != object) && (a in p.aliases)))
player:tell("Mailing list name \"", a, "\" in use on ", p.name, "(", p, ")");
return 0;
elseif (check && (valid(p = $mail_agent:match(sub1, #-1)) && ((p != object) && (sub1 in p.aliases))))
player:tell("Mailing list name \"", sub1, "\" in use on ", p.name, "(", p, ")");
return 0;
elseif (check && (valid(p = $mail_agent:match(sub2, #-1)) && ((p != object) && (sub2 in p.aliases))))
player:tell("Mailing list name \"", sub2, "\" in use on ", p.name, "(", p, ")");
return 0;
else
ok = 1;
endif
endfor
return ok;
.
#46:9
":match(string) => mailing list object in here that matches string.";
":match(string,player) => similar but also matches against player's private mailing lists (as kept in .mail_lists).";
if (!(string = args[1]))
return $nothing;
elseif (string[1] == "*")
string = string[2..$];
endif
if (valid(o = $string_utils:literal_object(string)) && ($mail_recipient in $object_utils:ancestors(o)))
return o;
elseif (rp = this:reserved_pattern(string))
return rp[2]:match_mail_recipient(string);
else
if (valid(who = {@args, player}[2]) && (typeof(use = `who.mail_lists ! E_PROPNF, E_PERM') == LIST))
use = {@this.contents, @use};
else
use = this.contents;
endif
partial = 1;
string = strsub(string, "_", "-");
for l in (use)
if (string in l.aliases)
return l;
endif
if (partial != $ambiguous_match)
for a in (l.aliases)
if ((index(a, string) == 1) && (!index(a, " ")))
if (partial)
partial = l;
elseif (partial != l)
partial = $ambiguous_match;
endif
endif
$command_utils:suspend_if_needed(0);
endfor
endif
endfor
return partial && $failed_match;
endif
.
#46:10
":match_recipient(string[,meobj]) => $player or $mail_recipient object that matches string.  Optional second argument (defaults to player) is returned in the case string==\"me\" and is also used to obtain a list of private $mail_recipients to match against.";
{string, ?me = player} = args;
if (valid(me) && ($failed_match != (o = me:my_match_recipient(string))))
return o;
elseif (!string)
return $nothing;
elseif ((string[1] == "*") && (string != "*"))
return this:match(@args);
elseif (string[1] == "`")
args[1][1..1] = "";
return $string_utils:match_player(@args);
elseif (valid(o = $string_utils:match_player(@args)) || (o == $ambiguous_match))
return o;
else
return this:match(@args);
endif
.
#46:11
{match_result, string, ?cmd_id = ""} = args;
cmd_id = cmd_id || "";
if (match_result == $nothing)
player:tell(cmd_id, "You must specify a valid mail recipient.");
elseif (match_result == $failed_match)
player:tell(cmd_id, "There is no mail recipient called \"", string, "\".");
elseif (match_result == $ambiguous_match)
if ((nostar = index(string, "*") != 1) && (lst = $player_db:find_all(string)))
player:tell(cmd_id, "\"", string, "\" could refer to ", (length(lst) > 20) ? tostr("any of ", length(lst), " players") | $string_utils:english_list($list_utils:map_arg(2, $string_utils, "pronoun_sub", "%n (%#)", lst), "no one", " or "), ".");
else
player:tell(cmd_id, "I don't know which \"", nostar ? "*" | "", string, "\" you mean.");
endif
elseif (!valid(match_result))
player:tell(cmd_id, match_result, " does not exist.");
else
return 0;
endif
return 1;
.
#46:12
":make_message(sender,recipients,subject/replyto/additional-headers,body)";
" => message in the form as it will get sent.";
{from, recips, hdrs, body} = args;
try
fromowner = from.owner;
except (E_INVIND)
raise(E_PERM);
endtry
fromline = this:name_list(from);
if (typeof(recips) != LIST)
recips = {recips};
endif
recips = this:name_list(@recips);
others = {};
replyto = 0;
if (typeof(hdrs) != LIST)
hdrs = {hdrs};
endif
subj = hdrs[1];
if (!valid(from))
others = {"Probable-Sender:   " + this:name(fromowner)};
"  others = {'Possible-Sender:   ' + this:name(player)}";
"  if (caller_perms() != player)";
"    others = {@others, 'Possible-Sender:   ' + this:name(caller_perms())}";
"  endif";
elseif (!is_player(from))
others = {"Sender:   " + this:name(from.owner)};
endif
replyto = {@hdrs, 0}[2] && this:name_list(@hdrs[2]);
if (length(hdrs) > 2)
hdrs[1..2] = {};
for h in (hdrs)
if (match(h[1], "[a-z1-9-]+"))
others = {@others, $string_utils:left(h[1] + ": ", 15) + h[2]};
endif
endfor
endif
if (typeof(body) != LIST)
body = body ? {body} | {};
endif
return {this:time(), fromline, recips, subj || " ", @replyto ? {"Reply-to: " + replyto} | {}, @others, "", @body};
.
#46:13
what = args[1];
if (!valid(what))
name = "???";
elseif ((!is_player(what)) && $object_utils:has_callable_verb(what, "mail_name"))
name = what:mail_name();
else
name = what.name;
endif
while (m = match(name, "(#[0-9]+)"))
{s, e} = m[1..2];
name[s..e] = "";
endwhile
return tostr(name, " (", what, ")");
.
#46:14
return $string_utils:english_list($list_utils:map_arg(this, "name", args), "no one");
.
#46:15
":parse_address_field(string) => list of objects";
"This is the standard routine for parsing address lists that appear in From:, To: and Reply-To: lines";
objects = {};
string = args[1];
while (m = match(string, "(#[0-9]+)"))
{s, e} = m[1..2];
if (#0 != (o = toobj(string[s + 1..e - 1])))
objects = {@objects, o};
endif
string = string[e + 1..$];
endwhile
return objects;
.
#46:16
":display_seq_full(msg_seq[,preamble]) => {cur, last-read-date}";
"This is the default message display routine.";
"Prints entire messages on folder (caller) to player.  msg_seq is the handle returned by :parse_message_seq(...) and indicates which messages should be printed.  preamble, if given will precede the output of the message itself, in which case the message number will be substituted for \"%d\".  Returns the number of the final message in the sequence (which can be then used as the new current message number).";
set_task_perms(caller_perms());
{msg_seq, ?preamble = ""} = args;
cur = date = 0;
for x in (msgs = caller:messages_in_seq(msg_seq))
cur = x[1];
date = x[2][1];
player:display_message(preamble ? strsub(preamble, "%d", tostr(cur)) | {}, caller:msg_full_text(@x[2]));
if ((ticks_left() < 500) || (seconds_left() < 2))
suspend(0);
endif
endfor
return {cur, date};
.
#46:17
":display_seq_headers(msg_seq[,cur[,last_read_date]])";
"This is the default header display routine.";
"Prints a list of headers of messages on caller to player.  msg_seq is the handle returned by caller:parse_message_seq(...).  cur is the player's current message.  last_read_date is the date of the last of the already-read messages.";
set_task_perms(caller_perms());
{msg_seq, ?cur = 0, ?last_old = $maxint} = args;
keep_seq = {@$seq_utils:contract(caller:kept_msg_seq(), $seq_utils:complement(msg_seq, 1, caller:length_all_msgs())), $maxint};
k = 1;
mcount = 0;
width = player:linelen() || 79;
for x in (msgs = caller:messages_in_seq(msg_seq))
if (keep_seq[k] <= (mcount = mcount + 1))
k = k + 1;
endif
annot = ((d = x[2][1]) > last_old) ? "+" | ((k % 2) ? " " | "=");
line = tostr($string_utils:right(x[1], 4, (cur == x[1]) ? ">" | " "), ":", annot, " ", caller:msg_summary_line(@x[2]));
player:tell(line[1..min(width, $)]);
if ((ticks_left() < 500) || (seconds_left() < 2))
suspend(0);
endif
endfor
player:tell("----+");
.
#46:18
":rm_message_seq(msg_seq)  removes the given sequence of from folder (caller)";
"...removed messages are saved in .messages_going for possible restoration.";
set_task_perms(caller_perms());
old = caller.messages;
new = save = nums = {};
next = 1;
for i in [1..length(seq = args[1]) / 2]
if ($command_utils:running_out_of_time())
player:tell("... rmm ", old[next][1] - 1);
suspend(0);
endif
start = seq[(2 * i) - 1];
new = {@new, @old[next..start - 1]};
save = {@save, {start - next, old[start..(next = seq[2 * i]) - 1]}};
nums = {@nums, old[start][1], old[next - 1][1] + 1};
endfor
new = {@new, @old[next..$]};
$command_utils:suspend_if_needed(0, "... rmm ...");
save_kept = $seq_utils:intersection(caller.messages_kept, seq);
$command_utils:suspend_if_needed(0, "... rmm ...");
new_kept = $seq_utils:contract(caller.messages_kept, seq);
$command_utils:suspend_if_needed(0, "... rmm ...");
caller.messages_going = save_kept ? {save_kept, save} | save;
caller.messages = new;
caller.messages_kept = new_kept;
if ($object_utils:has_callable_verb(caller, "_fix_last_msg_date"))
caller:_fix_last_msg_date();
endif
return $seq_utils:tostr(nums);
.
#46:19
":undo_rmm()  restores previously deleted messages in .messages_going to .messages.";
set_task_perms(caller_perms());
old = caller.messages;
going = caller.messages_going;
new = seq = {};
last = 0;
next = 1;
"there are two possible formats here:";
"OLD: {{n,msgs},{n,msgs},...}";
"NEW: {kept_seq, {{n,msgs},{n,msgs},...}}";
if (going && ((!going[1]) || (typeof(going[1][2]) == INT)))
kept = going[1];
going = going[2];
else
kept = {};
endif
for s in (going)
new = {@new, @old[last + 1..last + s[1]], @s[2]};
last = last + s[1];
seq = {@seq, next + s[1], next = length(new) + 1};
endfor
caller.messages = {@new, @old[last + 1..$]};
caller.messages_going = {};
caller.messages_kept = $seq_utils:union(kept, $seq_utils:expand(caller.messages_kept, seq));
if ($object_utils:has_callable_verb(caller, "_fix_last_msg_date"))
caller:_fix_last_msg_date();
endif
return seq;
.
#46:20
":list_rmm()    displays contents of .messages_going.";
":expunge_rmm() destroys contents of .messages_going once and for all.";
"... both return the number of messages in .messages_going.";
set_task_perms(caller_perms());
cmg = caller.messages_going;
if (cmg && ((!cmg[1]) || (typeof(cmg[1][2]) == INT)))
kept = cmg[1];
cmg = cmg[2];
else
kept = {};
endif
if (verb == "expunge_rmm")
caller.messages_going = {};
count = 0;
for s in (cmg)
count = count + length(s[2]);
endfor
return count;
elseif (!cmg)
return 0;
else
msgs = seq = {};
next = 1;
for s in (cmg)
msgs = {@msgs, @s[2]};
seq = {@seq, next = next + s[1], next = next + length(s[2])};
endfor
kept = {@$seq_utils:contract(kept, $seq_utils:complement(seq, 1, $seq_utils:last(seq))), $maxint};
k = 1;
mcount = 0;
for x in (msgs)
if (kept[k] <= (mcount = mcount + 1))
k = k + 1;
endif
player:tell($string_utils:right(x[1], 4), ":", (k % 2) ? "  " | "= ", caller:msg_summary_line(@x[2]));
if ((ticks_left() < 500) || (seconds_left() < 2))
suspend(0);
endif
endfor
if (msgs)
player:tell("----+");
endif
return length(msgs);
endif
.
#46:21
":renumber([cur]) -- assumes caller is a $mail_recipient or a $player.";
"...renumbers caller.messages, doing a suspend() if necessary.";
"...returns {number of messages,new cur}.";
set_task_perms(caller_perms());
{?cur = 0} = args;
caller.messages_going = {};
"... blow away @rmm'ed messages since there's no way to tell what their new numbers should be...";
msgs = caller.messages;
if (cur)
cur = $list_utils:iassoc_sorted(cur, msgs);
endif
while (1)
"...find first out-of-sequence message...";
l = 0;
r = (len = length(msgs)) + 1;
while ((r - 1) > l)
if (msgs[i = (r + l) / 2][1] > i)
r = i;
else
l = i;
endif
endwhile
"... r == first out-of-sequence, l == last in-sequence, l+1 == r ...";
if (l >= len)
return {l, cur};
endif
"...renumber as many messages as we have time for...";
chunk = {};
while (((r <= len) && (ticks_left() > 3000)) && (seconds_left() > 2))
for x in (msgs[r..min(r + 9, len)])
chunk = {@chunk, {r, x[2]}};
r = r + 1;
endfor
endwhile
caller.messages = {@msgs[1..l], @chunk, @msgs[r..len]};
if (chunk)
player:tell("...(renumbering ", l + 1, " -- ", r - 1, ")");
suspend(0);
else
player:tell("You lose.  This message collection is just too big.");
return;
endif
"... have to be careful since new mail may be received at this point...";
msgs = caller.messages;
endwhile
.
#46:22
":msg_summary_line(@msg) => date/from/subject as a single string.";
body = ("" in {@args, ""}) + 1;
if ((body > length(args)) || (!(subject = args[body])))
subject = "(None.)";
endif
if (args[1] < (time() - 31536000))
c = player:ctime(args[1]);
date = c[5..11] + c[21..25];
else
date = player:ctime(args[1])[5..16];
endif
from = args[2];
if (args[4] != " ")
subject = args[4];
endif
return tostr(date, "   ", $string_utils:left(from, 20), "   ", subject);
.
#46:23
"parse_message_seq(strings,cur[,last_old])";
"This is the default <message-sequence> parsing routine for those mail commands that refer to sequences of messages (@mail, @read,...) on a folder.";
"  caller (the folder) is assumed to be a $mail_recipient or a player.";
"  strings is the <message-sequence> portion of the arg list.";
"  cur is the number of the player's current message for this folder.";
"Returns a string error message if the parse fails, otherwise";
"returns a list {msg_seq, @unused_strings}, where";
"   msg_seq is a handle understood by caller:display_seq_full/headers(), and ";
"   unused_strings is the list of remaining uninterpreted strings";
set_task_perms(caller_perms());
{strings, ?cur = 0, ?last_old = 0} = args;
if (!(nummsgs = caller:length_all_msgs()))
return "%f %<has> no messages.";
elseif (typeof(strings) != LIST)
strings = {strings};
endif
seq = result = {};
mode = #0;
"... changes to 0 if we start seeing message numbers, to 1 if we see masks...";
keywords = ":from:%from:to:%to:subject:body:before:after:since:until:first:last:kept:unkept";
keyalist = {{1, "from"}, {6, "%from"}, {12, "to"}, {15, "%to"}, {19, "subject"}, {27, "body"}, {32, "before"}, {39, "after"}, {45, "since"}, {51, "until"}, {57, "first"}, {63, "last"}, {68, "kept"}, {73, "unkept"}};
strnum = 0;
for string in (strings)
strnum = strnum + 1;
$command_utils:suspend_if_needed(0);
if (string && ((c = index(string, ":")) && ((k = index(keywords, ":" + string[1..c - 1])) && (k == rindex(keywords, ":" + string[1..c - 1])))))
"...we have a mask to apply...";
keywd = $list_utils:assoc(k, keyalist)[2];
if (mode == #0)
seq = {1, nummsgs + 1};
endif
mode = 1;
if (k <= 27)
"...from, subject, to, body...";
pattern = string[c + 1..$];
if (keywd in {"subject", "body"})
elseif (keywd[1] == "%")
pattern = $string_utils:explode(pattern, "|");
else
pattern = this:((keywd == "to") ? "_parse_to" | "_parse_from")(pattern);
if (typeof(pattern) == STR)
return pattern;
endif
endif
seq = caller:(keywd + "_msg_seq")(pattern, seq);
if (typeof(seq) == STR)
if (strnum == 1)
return seq;
else
seq = {};
endif
endif
elseif (k <= 51)
"...before, since, after, until...";
if (typeof(date = this:_parse_date(string[c + 1..$])) != INT)
return tostr("Bad date `", string, "':  ", date);
endif
s = caller:length_date_le((keywd in {"before", "since"}) ? date - 1 | (date + 86399));
if (keywd in {"before", "until"})
seq = $seq_utils:remove(seq, s + 1, nummsgs);
else
seq = $seq_utils:remove(seq, 1, s);
endif
elseif (k <= 63)
"...first, last...";
if (n = toint(string[c + 1..$]))
seq = $seq_utils:(keywd + "n")(seq, n);
else
return tostr("Bad number in `", string, "'");
endif
else
"...kept, unkept...";
if (c < length(string))
return tostr("Unexpected junk after `", keywd, ":'");
elseif ((!(seq = caller:(keywd + "_msg_seq")(seq))) && (strnum == 1))
return tostr("%f %<has> no ", keywd, " messages.");
endif
endif
else
"...continue building the present sequence...";
if (mode)
seq && (result = $seq_utils:union(result, seq));
seq = {};
endif
mode = 0;
if (!string)
"...default case for @read: get the current message but skip to the next one if it's not there...";
if (cur)
i = min(caller:length_num_le(cur - 1) + 1, nummsgs);
seq = $seq_utils:add(seq, i, i);
else
return "%f %<has> no current message.";
endif
elseif ((index(string, "next") == 1) && (!index(string, "-")))
string[1..4] = "";
if ((n = string ? toint(string) | 1) <= 0)
return tostr("Bad number `", string, "'");
elseif ((i = caller:length_num_le(cur) + 1) <= nummsgs)
seq = $seq_utils:add(seq, i, min((i + n) - 1, nummsgs));
else
return "%f %<has> no next message.";
endif
elseif ((index(string, "prev") == 1) && (!index(string, "-")))
string[1..4] = "";
if ((n = string ? toint(string) | 1) <= 0)
return tostr("Bad number `", string, "'");
elseif (i = caller:length_num_le(cur - 1))
seq = $seq_utils:add(seq, max(1, (i - n) + 1), i);
else
return "%f %<has> no previous message.";
endif
elseif (string == "new")
s = last_old ? caller:length_date_le(last_old) | caller:length_num_le(cur);
if (s < nummsgs)
seq = $seq_utils:add(seq, s + 1, nummsgs);
else
return "%f %<has> no new messages.";
endif
elseif (string == "first")
seq = $seq_utils:add(seq, 1, 1);
elseif (n = toint(string) || (((string in {"last", "$"}) && -1) || ((string == "cur") && cur)))
if (n <= 0)
seq = $seq_utils:add(seq, max(0, nummsgs + n) + 1, nummsgs);
elseif (i = caller:exists_num_eq(n))
seq = $seq_utils:add(seq, i, i);
else
return (string == "cur") ? "%f's current message has been removed." | tostr("%f %<has> no message numbered `", string, "'.");
endif
elseif (((i = index(string, "..")) > 1) || ((i = index(string, "-")) > 1))
if ((start = toint(sst = string[1..i - 1])) > 0)
s = caller:length_num_le(start - 1);
elseif (sst in {"next", "prev", "cur"})
s = max(0, caller:length_num_le(cur - (sst != "next")) - (sst == "prev"));
elseif (sst in {"last", "$"})
s = nummsgs - 1;
elseif (sst == "first")
s = 0;
else
return {$seq_utils:union(result, seq), @strings[strnum..$]};
endif
j = (string[i] == ".") ? i + 2 | (i + 1);
if ((end = toint(est = string[j..$])) > 0)
e = caller:length_num_le(end);
elseif (est in {"next", "prev", "cur"})
e = min(nummsgs, caller:length_num_le(cur - (est == "prev")) + (est == "next"));
elseif (est in {"last", "$"})
e = nummsgs;
elseif (est == "first")
e = 1;
else
return {$seq_utils:union(result, seq), @strings[strnum..$]};
endif
if (s < e)
seq = $seq_utils:add(seq, s + 1, e);
else
return tostr("%f %<has> no messages in range ", string, ".");
endif
elseif (string == "cur")
return "%f %<has> no current message.";
else
return {$seq_utils:union(result, seq), @strings[strnum..$]};
endif
endif
endfor
return {$seq_utils:union(result, seq)};
.
#46:24
":_parse_from(string with |'s in it) => object list";
":_parse_to(string with |'s in it) => object list";
"  for from:string and to:string items in :parse_message_seq";
if (verb == "_parse_to")
match_obj = fail_obj = this;
match_verb = "match_recipient";
fail_verb = "match_failed";
else
match_obj = $string_utils;
match_verb = "match_player";
fail_obj = $command_utils;
fail_verb = "player_match_failed";
endif
plist = {};
for w in ($string_utils:explode(args[1], "|"))
if (fail_obj:(fail_verb)(p = match_obj:(match_verb)(w), w))
p = $string_utils:literal_object(w);
if ((p == $failed_match) || (!$command_utils:yes_or_no("Continue? ")))
return "Bad address list:  " + args[1];
endif
endif
plist = setadd(plist, p);
endfor
return plist;
.
#46:25
words = $string_utils:explode(args[1], "-");
if (length(words) == 1)
if (index("yesterday", words[1]) == 1)
time = $time_utils:dst_midnight((time() - (time() % 86400)) - 86400);
elseif (index("today", words[1]) == 1)
time = $time_utils:dst_midnight(time() - (time() % 86400));
elseif (typeof(time = $time_utils:from_day(words[1], -1)) == ERR)
time = "weekday, `Today', `Yesterday', or date expected.";
endif
elseif ((!words) || ((length(words) > 3) || ((!toint(words[1])) || (E_TYPE == (year = $code_utils:toint({@words, "-1"}[3]))))))
time = "Date should be of the form `5-Jan', `5-Jan-92', `Wed',`Wednesday'";
else
day = toint(words[1]);
time = $time_utils:dst_midnight($time_utils:from_month(words[2], -1, day));
if (length(words) == 3)
thisyear = toint(ctime(time)[21..24]);
if (100 > year)
year = (thisyear + 50) - (((thisyear - year) + 50) % 100);
endif
time = $time_utils:dst_midnight($time_utils:from_month(words[2], (year - thisyear) - (year <= thisyear), day));
endif
endif
return time;
.
#46:26
":new_message_num() => number that the next incoming message will receive.";
set_task_perms(caller_perms());
new = (msgs = caller.messages) ? msgs[$][1] + 1 | 1;
if (rmsgs = caller.messages_going)
if ((!rmsgs[1]) || (typeof(rmsgs[1][2]) == INT))
rmsgs = rmsgs[2];
endif
lbrm = rmsgs[$][2];
return max(new, lbrm[$][1] + 1);
else
return new;
endif
.
#46:27
set_task_perms(caller_perms());
return length(caller.messages);
.
#46:28
set_task_perms(caller_perms());
date = args[1];
msgs = caller.messages;
if ((r = length(caller.messages)) < 25)
for l in [1..r]
if (msgs[l][2][1] > date)
return l - 1;
endif
endfor
return r;
else
l = 1;
while (l <= r)
if (date < msgs[i = (r + l) / 2][2][1])
r = i - 1;
else
l = i + 1;
endif
endwhile
return r;
endif
.
#46:29
set_task_perms(caller_perms());
date = args[1];
msgs = caller.messages;
if ((len = length(caller.messages)) < 25)
for r in [0..len - 1]
if (msgs[len - r][2][1] <= date)
return r;
endif
endfor
return len;
else
l = 1;
r = len;
while (l <= r)
if (date < msgs[i = (r + l) / 2][2][1])
r = i - 1;
else
l = i + 1;
endif
endwhile
return len - r;
endif
.
#46:30
":length_num_le(num) => number of messages in folder numbered <= num";
set_task_perms(caller_perms());
return $list_utils:iassoc_sorted(args[1], caller.messages);
.
#46:31
":exists_num_eq(num) => index of message in folder numbered == num";
set_task_perms(caller_perms());
return (i = $list_utils:iassoc_sorted(args[1], caller.messages)) && ((caller.messages[i][1] == args[1]) && i);
.
#46:32
":from_msg_seq(object or list[,mask])";
" => msg_seq of messages from any of these senders";
set_task_perms(caller_perms());
{plist, ?mask = {1}} = args;
if (typeof(plist) != LIST)
plist = {plist};
endif
i = 1;
fseq = {};
for msg in (caller.messages)
if ((!mask) || (i < mask[1]))
elseif ((length(mask) < 2) || (i < mask[2]))
fromline = msg[2][2];
for f in ($mail_agent:parse_address_field(fromline))
if (f in plist)
fseq = $seq_utils:add(fseq, i, i);
endif
endfor
else
mask = mask[3..$];
endif
i = i + 1;
$command_utils:suspend_if_needed(0);
endfor
return fseq || ("%f %<has> no messages from " + $string_utils:english_list($list_utils:map_arg(2, $string_utils, "pronoun_sub", "%n (%#)", plist), "no one", " or "));
.
#46:33
":%from_msg_seq(string or list of strings[,mask])";
" => msg_seq of messages with one of these strings in the from line";
set_task_perms(caller_perms());
{nlist, ?mask = {1}} = args;
if (typeof(nlist) != LIST)
nlist = {nlist};
endif
i = 1;
fseq = {};
for msg in (caller.messages)
if ((!mask) || (i < mask[1]))
elseif ((length(mask) < 2) || (i < mask[2]))
fromline = " " + msg[2][2];
for n in (nlist)
if (index(fromline, n))
fseq = $seq_utils:add(fseq, i, i);
endif
endfor
else
mask = mask[3..$];
endif
i = i + 1;
$command_utils:suspend_if_needed(0);
endfor
return fseq || ("%f %<has> no messages from " + $string_utils:english_list($list_utils:map_arg($string_utils, "print", nlist), "no one", " or "));
.
#46:34
":to_msg_seq(object or list[,mask]) => msg_seq of messages to those people";
set_task_perms(caller_perms());
{plist, ?mask = {1}} = args;
if (typeof(plist) != LIST)
plist = {plist};
endif
i = 1;
seq = {};
for msg in (caller.messages)
if ((!mask) || (i < mask[1]))
elseif ((length(mask) < 2) || (i < mask[2]))
toline = msg[2][3];
for r in ($mail_agent:parse_address_field(toline))
if (r in plist)
seq = $seq_utils:add(seq, i, i);
endif
endfor
else
mask = mask[3..$];
endif
i = i + 1;
$command_utils:suspend_if_needed(0);
endfor
return seq || ("%f %<has> no messages to " + $string_utils:english_list($list_utils:map_arg(2, $string_utils, "pronoun_sub", "%n (%#)", plist), "no one", " or "));
.
#46:35
":%to_msg_seq(string or list of strings[,mask])";
" => msg_seq of messages containing one of strings in the to line";
set_task_perms(caller_perms());
{nlist, ?mask = {1}} = args;
if (typeof(nlist) != LIST)
nlist = {nlist};
endif
i = 1;
seq = {};
for msg in (caller.messages)
if ((!mask) || (i < mask[1]))
elseif ((length(mask) < 2) || (i < mask[2]))
toline = " " + msg[2][3];
for n in (nlist)
if (index(toline, n))
seq = $seq_utils:add(seq, i, i);
endif
endfor
else
mask = mask[3..$];
endif
i = i + 1;
$command_utils:suspend_if_needed(0);
endfor
return seq || ("%f %<has> no messages to " + $string_utils:english_list($list_utils:map_arg($string_utils, "print", nlist), "no one", " or "));
.
#46:36
":subject_msg_seq(target) => msg_seq of messages with target in the Subject:";
set_task_perms(caller_perms());
{target, ?mask = {1}} = args;
i = 1;
seq = {};
for msg in (caller.messages)
if ((!mask) || (i < mask[1]))
elseif ((length(mask) < 2) || (i < mask[2]))
subject = msg[2][4];
if (index(subject, target))
seq = $seq_utils:add(seq, i, i);
endif
else
mask = mask[3..$];
endif
i = i + 1;
$command_utils:suspend_if_needed(0);
endfor
return seq || (("%f %<has> no messages with subjects containing `" + target) + "'");
.
#46:37
":body_msg_seq(target[,mask]) => msg_seq of messages with target in the body";
set_task_perms(caller_perms());
{target, ?mask = {1}} = args;
i = 1;
seq = {};
for msg in (caller.messages)
if ((!mask) || (i < mask[1]))
elseif ({@mask, $maxint}[2] <= i)
mask = mask[3..$];
"Old code follows. Lets save ticks and munge up the whole message body into one big string and index it. Don't need to know where target is in there, just that it is or isn't there";
elseif (((bstart = "" in (msg = msg[2])) && (length(msg) > bstart)) && index(tostr(@msg[bstart + 1..$]), target))
seq = $seq_utils:add(seq, i, i);
"elseif ((bstart = \"\" in (msg = msg[2])) && (l = length(msg)) > bstart)";
"while (!index(msg[l], target) && (l = l - 1) > bstart)";
"$command_utils:suspend_if_needed(0);";
"endwhile";
"if (l > bstart)";
"seq = $seq_utils:add(seq, i, i);";
"endif";
endif
i = i + 1;
$command_utils:suspend_if_needed(0);
endfor
return seq || tostr("%f %<has> no messages containing `", target, "' in the body.");
.
#46:38
":messages_in_seq(msg_seq) => list of messages in msg_seq on folder (caller)";
set_task_perms(caller_perms());
if (typeof(msgs = args[1]) != LIST)
return caller.messages[msgs];
elseif (length(msgs) == 2)
return caller.messages[msgs[1]..msgs[2] - 1];
else
return $seq_utils:extract(msgs, caller.messages);
endif
.
#46:39
":__convert_new(@msg) => msg in new format (if it isn't already)";
"               ^ don't forget the @ here.";
"If the msg is already in the new format it passes through unchanged.";
"If the msg format is unrecognizable, warnings are printed.";
if (typeof(date = args[1]) != INT)
date = 0;
start = 1;
else
start = 2;
if (!((colon = index(args[2], ":")) && (args[2][1..colon] in {"From:", "To:", "Subject:"})))
return args;
endif
endif
from = to = 0;
subject = " ";
blank = "" in {@args, ""};
newhdr = {};
for line in (args[start..blank - 1])
if (index(line, "Date:") == 1)
if (date)
player:notify("Warning: two dates?");
endif
date = $time_utils:from_ctime(line[6..$]);
elseif (index(line, "From:") == 1)
if (from)
player:notify("Warning: two from-lines?");
endif
from = $string_utils:triml(line[6..$]);
elseif (index(line, "To:") == 1)
if (to)
player:notify("Warning: two to-lines?");
endif
to = $string_utils:triml(line[6..$]);
elseif (index(line, "Subject:") == 1)
subject = $string_utils:triml(line[9..$]);
else
newhdr = {@newhdr, line};
endif
endfor
if (!from)
player:notify("Warning: no from-line.");
endif
if (!to)
player:notify("Warning: no to-line.");
endif
return {date, from, to, subject, @newhdr, @args[blank..$]};
.
#46:40
":to_text(@msg) => message in text form (suitable for printing)";
return {"Date:     " + player:ctime(args[1]), "From:     " + args[2], "To:       " + args[3], @(args[4] == " ") ? {} | {"Subject:  " + args[4]}, @args[5..$]};
.
#46:41
what = args[1];
if ($object_utils:isa(what, $mail_recipient))
return what:(verb)(@listdelete(args, 1));
else
"...it's a player:";
"...  anyone can send mail to it.";
"...  only the player itself or a wizard can read it.";
return (verb == "is_usable_by") || $perm_utils:controls(args[2], what);
endif
.
#46:42
":reserved_pattern(string)";
"  if string matches one of the reserved patterns for mailing list names, ";
"  we return that element of .reserved_patterns.";
string = args[1];
for p in (this.reserved_patterns)
if (match(string, p[1]))
return p;
endif
endfor
return 0;
.
#46:43
return valid(what = args[1]) && (($mail_recipient_class in (ances = $object_utils:ancestors(what))) || ($mail_recipient in ances));
.
#46:44
":keep_message_seq(msg_seq)";
"...If msg_seq nonempty {}, this marks the indicated messages on this folder (caller)";
"...as immune from expiration.";
"...If msg_seq == {}, this clears all such marks.";
set_task_perms(caller_perms());
msg_seq = args[1];
if (!msg_seq)
caller.messages_kept = {};
return 1;
endif
prev_kept = caller.messages_kept;
caller.messages_kept = new_kept = $seq_utils:union(prev_kept, msg_seq);
added = $seq_utils:intersection(new_kept, $seq_utils:complement(prev_kept));
if (!added)
return "";
endif
"... urk.  now we need to get the actual numbers of the messages being kept.";
nums = {};
start = 0;
for a in (added)
nums = {@nums, (start = !start) ? caller:messages_in_seq(a)[1] | (caller:messages_in_seq(a - 1)[1] + 1)};
endfor
return $seq_utils:tostr(nums);
.
#46:45
":kept_msg_seq([mask])";
" => msg_seq of messages that are marked kept";
":unkept_msg_seq([mask])";
" => msg_seq of messages that are not marked kept";
set_task_perms(caller_perms());
{?mask = {1}} = args;
if (k = verb == "kept_msg_seq")
kseq = $seq_utils:intersection(mask, caller.messages_kept);
else
kseq = $seq_utils:intersection(mask, $seq_utils:range(1, caller:length_all_msgs()), $seq_utils:complement(caller.messages_kept));
endif
return kseq;
.
#46:46
":msg_seq_to_msg_num_string(msg_seq) => string giving the corresponding message numbers";
set_task_perms(caller_perms());
return $seq_utils:tostr($seq_utils:from_list($list_utils:slice(caller:messages_in_seq(args[1]))));
.
#46:47
":msg_seq_to_msg_num_list(msg_seq) => list of corresponding message numbers";
set_task_perms(caller_perms());
return $list_utils:slice(caller:messages_in_seq(args[1]));
.
#46:48
"send_log_message(perms,from,rcpt-list,hdrs,msg) -- formats and sends a mail message. hders is either the text of the subject line, or a {subject,{reply-to,...}} list.";
"KLUDGE.  this may go away.";
"Send a message while supplying a different permission for use by :mail_forward to determine moderation action.";
"Return E_PERM unless called by a wizard.";
"Return {0, @invalid_rcpts} if rcpt-list contains any invalid addresses.  No mail is sent in this case.";
"Return {1, @actual_rcpts} if successful.";
{perms, from, to, hdrs, msg} = args;
if (caller_perms().wizard)
text = $mail_agent:make_message(from, to, hdrs, msg);
return this:raw_send(text, to, perms);
else
return E_PERM;
endif
.
#46:49
":parse_misc_headers(msg,@extract_names)";
"Extracts the miscellaneous (i.e., not including Date: From: To: Subject:)";
"from msg (a mail message in the usual transmission format).";
"Extract_names is a list of header names";
"=> {other_headers,bogus_headers,extract_texts,body}";
"where each element of extract_texts is a string or 0";
"  according as the corresponding header in extract_names is present.";
"bogus_headers is a list of those headers that are undecipherable";
"other_headers is a list of {header_name,header_text} for the remaining";
"  miscellaneous headers.";
"headers in msg";
msgtxt = args[1];
extract_names = listdelete(args, 1);
extract_texts = $list_utils:make(length(extract_names));
heads = bogus = {};
for h in (msgtxt[5..(bstart = "" in {@msgtxt, ""}) - 1])
if (m = match(h, "%([a-z1-9-]+%): +%(.*%)"))
hname = h[m[3][1][1]..m[3][1][2]];
htext = h[m[3][2][1]..m[3][2][2]];
if (i = hname in extract_names)
extract_texts[i] = htext;
else
heads = {@heads, {hname, htext}};
endif
else
bogus = {@bogus, h};
endif
endfor
return {heads, bogus, extract_texts, msgtxt[bstart + 1..$]};
.
#46:50
"resend_message(new_sender,new_rcpts,from,to,hdrs,body)";
" -- reformats and resends a previously sent message to new recipients.";
"msg is the previous message";
"Return E_PERM if new_sender isn't owned by the caller.";
"Return {0, @invalid_rcpts} if new_rcpts contains any invalid addresses.  No mail is sent in this case.";
"Return {1, @actual_rcpts} if successful.";
{new_sender, new_rcpts, from, to, hdrs, body} = args;
if (typeof(hdrs) != LIST)
hdrs = {hdrs, 0};
elseif (length(hdrs) < 2)
hdrs = {@hdrs || {""}, 0};
endif
hdrs[3..2] = {{"Resent-By", this:name_list(new_sender)}, {"Resent-To", this:name_list(@new_rcpts)}};
if ($perm_utils:controls(caller_perms(), new_sender))
text = $mail_agent:make_message(from, to, hdrs, body);
return this:raw_send(text, new_rcpts, new_sender);
else
return E_PERM;
endif
.
#46:51
if (caller_perms().wizard)
this.reserved_patterns = {};
this.last_mail_time = 0;
this.time_collisions = {0, 0};
pass(@args);
endif
.
#46:52
"This was inspired by Xeric's port 4632 on *Core-DB-Issues";
now = time();
return now;
"skipping the below for now because the mail system's clock is getting very out of sync. suspect someone's playing games to run up the clock. HTC 6 Jan 2003";
if (caller == this)
if (now > this.last_mail_time)
return this.last_mail_time = now;
else
this.time_collisions[2] = this.time_collisions[2] + 1;
return this.last_mail_time = this.last_mail_time + 1;
endif
else
return now;
endif
.
#46:53
":set_message_body_by_index(i,newbody)";
"Replaces the body of the i-th message on the (caller) recipient.";
"i must be a message index (not a message number) in the range 1 .. number of messages,";
"newbody must be a list of strings.";
set_task_perms(caller_perms());
{i, body} = args;
bstart = "" in caller.messages[i][2];
if (bstart)
caller.messages[i][2][bstart + 1..$] = body;
else
caller.messages[i][2][$ + 1..$] = {"", @body};
endif
.
#46:55
":message_body_by_index(i)";
"Return the body of the i-th message on the (caller) recipient.";
"i must be a message index (not a message number) in the range 1 .. number of messages,";
set_task_perms(caller_perms());
{i} = args;
msg = caller:messages_in_seq({i, i + 1})[1][2];
bstart = "" in msg;
return msg[bstart ? bstart + 1 | ($ + 1)..$];
.
#47:0
return this:ok(who = args[1]) && tostr("a letter ", this:sending(who) ? "(in transit) " | "", "to ", this:recipient_names(who), (subject = `this.subjects[who] ! ANY') && tostr(" entitled \"", subject, "\""));
.
#47:1
"invoke(rcptstrings,verb[,subject]) for a @send";
"invoke(1,verb,rcpts,subject,replyto,body) if no parsing is needed";
"invoke(2,verb,msg,flags,replytos) for an @answer";
if (!(which = args[1]))
player:tell_lines({tostr("Usage:  ", args[2], " <list-of-recipients>"), tostr("        ", args[2], "                      to continue with a previous draft")});
elseif (typeof(which) == LIST)
"...@send...";
if (rcpts = this:parse_recipients({}, which))
if (replyto = player:mail_option("replyto"))
replyto = this:parse_recipients({}, replyto, ".mail_options: ");
endif
if (0 == (subject = {@args, 0}[3]))
if (player:mail_option("nosubject"))
subject = "";
else
player:tell("Subject:");
subject = $command_utils:read();
endif
endif
return {rcpts, subject, replyto, {}};
endif
elseif (which == 1)
return args[3..6];
elseif (!(to_subj = this:parse_msg_headers(msg = args[3], flags = args[4])))
else
include = {};
if ("include" in flags)
prefix = ">            ";
for line in ($mail_agent:to_text(@msg))
if (!line)
prefix = ">  ";
include = {@include, prefix};
else
include = {@include, @this:fill_string(">  " + line, 70, prefix)};
endif
endfor
endif
return {@to_subj, args[5], include};
endif
return 0;
.
#47:2
{who, recip, subj, replyto, msg} = args;
if (this:ok(who))
this.sending[who] = 0;
this.recipients[who] = recip;
this.subjects[who] = subj;
this.replytos[who] = replyto || {};
this:load(who, msg);
this.active[who]:tell("Composing ", this:working_on(who));
p = this.active[who];
"if (p:mail_option(\"enter\") && !args[5])";
"Changed from above so that @reply can take advantage of @mailoption +enter. Ho_Yan 11/9/94";
if (p:mail_option("enter"))
if (typeof(lines = $command_utils:read_lines()) == ERR)
p:tell(lines);
else
this:insert_line(p in this.active, lines, 0);
endif
endif
endif
.
#47:3
if (!dobjstr)
plyr = player;
elseif ($command_utils:player_match_result(plyr = $string_utils:match_player(dobjstr), dobjstr)[1])
return;
endif
if ((plyr != player) && (!this:readable(plyr in this.active)))
player:tell(plyr.name, "(", plyr, ") has not published anything here.");
elseif (typeof(msg = this:message_with_headers(plyr in this.active)) != LIST)
player:tell(msg);
else
player:display_message({((plyr == player) ? "Your" | tostr(plyr.name, "(", plyr, ")'s")) + " message so far:", ""}, player:msg_text(@msg));
endif
.
#47:4
return (this:readable(who = args[1]) || this:ok(who)) && $mail_agent:make_message(this.active[who], this.recipients[who], {this.subjects[who], this.replytos[who]}, this:text(who));
.
#47:5
if (!(who = this:loaded(player)))
player:tell(this:nothing_loaded_msg());
elseif (!argstr)
player:tell(this.subjects[who]);
elseif (ERR == typeof(subj = this:set_subject(who, argstr)))
player:tell(subj);
else
player:tell(subj ? ("Setting the subject line for your message to \"" + subj) + "\"." | "Deleting the subject line for your message.");
endif
.
#47:6
if (!(fuckup = this:ok(who = args[1])))
return fuckup;
else
this.subjects[who] = subj = args[2];
this:set_changed(who, 1);
return subj;
endif
.
#47:7
if (!(fuckup = this:ok(who = args[1])))
return fuckup;
elseif ((!(task = this.sending[who])) || $code_utils:task_valid(task))
return task;
else
"... uh oh... sending task crashed...";
this:set_changed(who, 1);
return this.sending[who] = 0;
endif
.
#47:8
if (!(who = this:loaded(player)))
player:tell(this:nothing_loaded_msg());
elseif (!args)
player:tell("Your message is currently to ", this:recipient_names(who), ".");
else
this.recipients[who] = this:parse_recipients({}, args);
this:set_changed(who, 1);
player:tell("Your message is now to ", this:recipient_names(who), ".");
endif
.
#47:9
if (!(who = this:loaded(player)))
player:tell(this:nothing_loaded_msg());
else
this.recipients[who] = this:parse_recipients(this.recipients[who], args);
this:set_changed(who, 1);
player:tell("Your message is now to ", this:recipient_names(who), ".");
endif
.
#47:10
if (!(who = this:loaded(player)))
player:tell(this:nothing_loaded_msg());
else
recips = this.recipients[who];
nonmrs = {};
mrs = {};
for o in (recips)
if ($object_utils:isa(o, $mail_recipient))
mrs = {@mrs, o};
else
nonmrs = {@nonmrs, o};
endif
endfor
for a in (args)
if (!a)
player:tell("\"\"?");
return;
elseif (valid(aobj = $mail_agent:match_recipient(a)) && (aobj in recips))
elseif ($failed_match != (aobj = $string_utils:literal_object(a)))
if (!(aobj in recips))
player:tell(aobj, " was not a recipient.");
return;
endif
elseif ((a[1] == "*") && valid(aobj = $string_utils:match(a[2..$], mrs, "aliases")))
elseif ((a[1] != "*") && valid(aobj = $string_utils:match(a, nonmrs, "aliases")))
elseif (valid(aobj = $string_utils:match(a, recips, "aliases")))
else
player:tell("couldn't find \"", a, "\" in To: list.");
return;
endif
recips = setremove(recips, aobj);
endfor
this.recipients[who] = recips;
this:set_changed(who, 1);
player:tell("Your message is now to ", this:recipient_names(who), ".");
endif
.
#47:11
"parse_recipients(prev_list,list_of_strings) -- parses list of strings and adds any resulting player objects to prev_list.  Optional 3rd arg is prefixed to any mismatch error messages";
{recips, l, ?cmd_id = ""} = args;
cmd_id = cmd_id || "";
for s in ((typeof(l) == LIST) ? l | {l})
if (typeof(s) != STR)
if ($mail_agent:is_recipient(s))
recips = setadd(recips, s);
else
player:tell(cmd_id, s, " is not a valid mail recipient.");
endif
elseif (!$mail_agent:match_failed(md = $mail_agent:match_recipient(s), s, cmd_id))
recips = setadd(recips, md);
endif
endfor
return recips;
.
#47:12
return this:ok(who = args[1]) && $mail_agent:name_list(@this.recipients[who]);
.
#47:13
return $mail_agent:make_message(@args);
.
#47:14
"(obsolete verb... see $mail_agent:name_list)";
return $mail_agent:(verb)(@args[1]);
.
#47:15
"parse_msg_headers(msg,flags)";
"  parses msg to extract reply recipients and construct a subject line";
"  if the \"all\" flag is present, reply goes to all of the original recipients";
"  returns a list {recipients, subjectline} or 0 in case of error.";
{msg, flags} = args;
replyall = "all" in flags;
objects = {};
if ("followup" in flags)
"...look for first non-player recipient in To: line...";
for o in ($mail_agent:parse_address_field(msg[3]))
if (objects)
break o;
elseif ($object_utils:isa(o, $mail_recipient))
objects = {o};
endif
endfor
endif
objects = objects || $mail_agent:parse_address_field(msg[2] + (replyall ? msg[3] | ""));
for line in (msg[5..("" in {@msg, ""}) - 1])
if (rt = index(line, "Reply-to:") == 1)
objects = $mail_agent:parse_address_field(line);
endif
endfor
recips = {};
for o in (objects)
if (o == #0)
player:tell("Sorry, but I can't parse the header of that message.");
return 0;
elseif ((!valid(o)) || (!(is_player(o) || ($mail_recipient in $object_utils:ancestors(o)))))
player:tell(o, " is no longer a valid player or maildrop; ignoring that recipient.");
elseif (o != player)
recips = setadd(recips, o);
endif
endfor
subject = msg[4];
if (subject == " ")
subject = "";
elseif (subject && (index(subject, "Re: ") != 1))
subject = "Re: " + subject;
endif
return {recips, subject};
.
#47:16
flags = {};
for o in ({"all", "include", "followup"})
if (player:mail_option(o))
flags = {@flags, o};
endif
endfor
reply_to = player:mail_option("replyto") || {};
flaglist = "+1#include -1#noinclude +2#all -2#sender 0#replyto +3#followup ";
for a in (args)
if (i = index(a, "="))
value = a[i + 1..$];
a = a[1..i - 1];
else
value = "";
endif
if ((typeof(a) != STR) || ((i = index(flaglist, "#" + a)) < 3))
player:tell("Unrecognized answer/reply option:  ", a);
return 0;
elseif (i != rindex(flaglist, "#" + a))
player:tell("Ambiguous answer/reply option:  ", a);
return 0;
elseif (j = index("0123456789", flaglist[i - 1]) - 1)
if (value)
player:tell("Flag does not take a value:  ", a);
return 0;
endif
f = {"include", "all", "followup"}[j];
flags = (flaglist[i - 2] == "+") ? setadd(flags, f) | setremove(flags, f);
if (f == "all")
flags = setremove(flags, "followup");
endif
elseif ((!value) || (value = this:parse_recipients({}, $string_utils:explode(value), "replyto flag:  ")))
reply_to = value || {};
endif
endfor
return {flags, reply_to};
.
#47:17
if (!(who = this:loaded(player)))
player:tell(this:nothing_loaded_msg());
else
if (args)
this.replytos[who] = rt = this:parse_recipients({}, args);
this:set_changed(who, 1);
else
rt = this.replytos[who];
endif
player:tell(rt ? ("Replies will go to " + $mail_agent:name_list(@this.replytos[who])) + "." | "Reply-to field is empty.");
endif
.
#47:18
"WIZARDLY";
if (!(who = this:loaded(player)))
player:notify(this:nothing_loaded_msg());
elseif (!(recips = this.recipients[who]))
player:notify("Umm... your message isn't addressed to anyone.");
elseif (this:sending(who))
player:notify("Again? ... relax... it'll get there eventually.");
else
msg = this:message_with_headers(who);
this.sending[who] = old_sending = task_id();
this:set_changed(who, 0);
player:notify("Sending...");
"... this sucker can suspend BIG TIME...";
result = $mail_agent:raw_send(msg, recips, player);
"... the world changes...";
who = player in this.active;
if (who && (this.sending[who] == old_sending))
"... same editing session; no problemo...";
previous = "";
this.sending[who] = 0;
else
"... uh oh, different session... tiptoe quietly out...";
"... Don't mess with the session.";
previous = "(prior send) ";
endif
if (!(e = result[1]))
player:notify(tostr(previous, (typeof(e) == ERR) ? e | ("Bogus recipients:  " + $string_utils:from_list(result[2]))));
player:notify(tostr(previous, "Mail not sent."));
previous || this:set_changed(who, 1);
elseif (length(result) == 1)
player:notify(tostr(previous, "Mail not actually sent to anyone."));
previous || this:set_changed(who, 1);
else
player:notify(tostr(previous, "Mail actually sent to ", $mail_agent:name_list(@listdelete(result, 1))));
if (previous)
"...don't even think about it...";
elseif (player.location == this)
if (ticks_left() < 10000)
suspend(0);
endif
this:done();
elseif (!this:changed(who))
"... player is gone, no further edits...";
this:kill_session(who);
endif
endif
endif
.
#47:19
if (dobjstr)
if (!(recips = this:parse_recipients({}, args)))
"parse_recipients has already complained about anything it doesn't like";
return;
endif
elseif (caller != player)
return E_PERM;
elseif (!(who = this:loaded(player)))
player:tell(this:nothing_loaded_msg());
return;
else
recips = this.recipients[who];
endif
resolve = $mail_agent:resolve_addr(recips, player);
if (resolve[1])
player:tell("Bogus addresses:  ", $string_utils:english_list(resolve[1]));
else
player:tell(dobjstr ? ("Mail to " + $mail_agent:name_list(@recips)) + " actually goes to " | "Your mail will actually go to ", $mail_agent:name_list(@resolve[2]));
endif
.
#47:20
player:tell_lines({"Available aliases:", ""});
for c in ((dobjstr == "all") ? $object_utils:descendants($mail_recipient) | $mail_agent.contents)
if (c:is_usable_by(player) || c:is_readable_by(player))
c:look_self();
endif
endfor
.
#47:21
player:tell("This command is obsolete.  Use @subscribe instead.  See `help @subscribe'");
return;
if (!iobjstr)
player:tell("Usage:  ", verb, " [<list-of-people/lists>] to <list>");
return;
elseif ($mail_agent:match_failed(iobj = $mail_agent:match(iobjstr), iobjstr))
return;
endif
rstrs = dobjstr ? $string_utils:explode(dobjstr) | {"me"};
recips = this:parse_recipients({}, rstrs);
outcomes = iobj:add_forward(@recips);
if (typeof(outcomes) != LIST)
player:tell(outcomes);
return;
endif
added = {};
for r in [1..length(recips)]
if ((t = typeof(e = outcomes[r])) == OBJ)
added = setadd(added, recips[r]);
else
player:tell(verb, " ", recips[r].name, " to ", iobj.name, ":  ", e);
endif
endfor
if (added)
player:tell($string_utils:english_list($list_utils:map_arg(2, $string_utils, "pronoun_sub", "%(name) (%#)", added)), " added to ", iobj.name, " (", iobj, ")");
endif
.
#47:22
if (!iobjstr)
player:tell("Usage:  ", verb, " [<list-of-people/lists>] from <list>");
return;
elseif ($mail_agent:match_failed(iobj = $mail_agent:match(iobjstr), iobjstr))
return;
endif
rstrs = dobjstr ? $string_utils:explode(dobjstr) | {"me"};
recips = this:parse_recipients({}, rstrs);
outcomes = iobj:delete_forward(@recips);
if (typeof(outcomes) != LIST)
player:tell(outcomes);
return;
endif
removed = {};
for r in [1..length(recips)]
if (typeof(e = outcomes[r]) == ERR)
player:tell(verb, " ", recips[r].name, " from ", iobj.name, ":  ", (e == E_INVARG) ? "Not on list." | e);
else
removed = setadd(removed, recips[r]);
endif
endfor
if (removed)
player:tell($string_utils:english_list($list_utils:map_arg(2, $string_utils, "pronoun_sub", "%(name) (%#)", removed)), " removed from ", iobj.name, " (", iobj, ")");
endif
.
#47:23
return this:ok(who = args[1]) && (this:sending(who) || pass(@args));
.
#47:24
"recall that this only gets called if :retain_session_on_exit returns true";
return (this:ok(who = player in this.active) && (!this:changed(who))) ? {"Your message is in transit."} | this.(verb);
.
#47:25
lines = {"To:       " + (toline = $mail_agent:name_list(@args[1])), "Subject:  " + $string_utils:trim(subject = args[2])};
if (args[3])
lines = {@lines, "Reply-to: " + $mail_agent:name_list(@args[3])};
endif
lines = {@lines, "", @args[4]};
return {tostr("MOOMail", subject ? ("(" + subject) + ")" | (("-to(" + toline) + ")")), lines, "@@sendmail"};
.
#48:0
if (this:changed(who = player in this.active))
player:tell("You are still editing ", this:working_on(who), ".  Please type ABORT or SAVE first.");
elseif (spec = this:parse_invoke(dobjstr, verb))
this:init_session(who, @spec);
endif
.
#48:1
if (!(who = this:loaded(player)))
player:tell(this:nothing_loaded_msg());
return;
endif
if (!dobjstr)
note = this.objects[who];
elseif (1 == (note = this:note_match_failed(dobjstr)))
return;
else
this.objects[who] = note;
endif
text = this:text(who);
strmode = (length(text) <= 1) && this.strmode[who];
if (strmode)
text = text ? text[1] | "";
endif
if (ERR == typeof(result = this:set_note_text(note, text)))
player:tell("Text not saved to ", this:working_on(who), ":  ", result);
if ((result == E_TYPE) && (typeof(note) == OBJ))
player:tell("Do `mode list' and try saving again.");
elseif (!dobjstr)
player:tell("Use `save' with an argument to save the text elsewhere.");
endif
else
player:tell("Text written to ", this:working_on(who), strmode ? " as a single string." | ".");
this:set_changed(who, 0);
endif
.
#48:2
if (this:ok(who = args[1]))
this.strmode[who] = strmode = typeof(text = args[3]) == STR;
this:load(who, strmode ? text ? {text} | {} | text);
this.objects[who] = args[2];
player:tell("Now editing ", this:working_on(who), ".", strmode ? "  [string mode]" | "");
endif
.
#48:3
if (!(who = args[1]))
return "????";
endif
spec = this.objects[who];
if (typeof(spec) == LIST)
object = spec[1];
prop = spec[2];
else
object = spec;
prop = 0;
endif
return valid(object) ? tostr("\"", object.name, "\"(", object, ")", prop ? "." + prop | "") | tostr(prop ? ("." + prop) + " on " | "", "invalid object (", object, ")");
.
#48:4
":parse_invoke(string,verb)";
" string is the actual commandline string indicating what we are to edit";
" verb is the command verb that is attempting to invoke the editor";
if (caller != this)
raise(E_PERM);
elseif (!(string = args[1]))
player:tell_lines({("Usage:  " + args[2]) + " <note>   (where <note> is some note object)", ("        " + args[2]) + "          (continues editing an unsaved note)"});
elseif (1 == (note = this:note_match_failed(string)))
elseif (ERR == typeof(text = this:note_text(note)))
player:tell("Couldn't retrieve text:  ", text);
else
return {note, text};
endif
return 0;
.
#48:5
"WIZARDLY";
if ((caller != $note_editor) || (caller_perms() != $note_editor.owner))
return E_PERM;
endif
set_task_perms(player);
if (typeof(spec = args[1]) == OBJ)
text = spec:text();
else
text = `spec[1].(spec[2]) ! ANY';
endif
if (((tt = typeof(text)) in {ERR, STR}) || ((tt == LIST) && ((!text) || (typeof(text[1]) == STR))))
return text;
else
return E_TYPE;
endif
.
#48:6
"WIZARDLY";
if ((caller != $note_editor) || (caller_perms() != $note_editor.owner))
return E_PERM;
endif
set_task_perms(player);
attempt = E_NONE;
if (typeof(spec = args[1]) == OBJ)
return spec:set_text(args[2]);
elseif ($object_utils:has_callable_verb(spec[1], "set_" + spec[2]))
attempt = spec[1]:("set_" + spec[2])(args[2]);
endif
if (typeof(attempt) == ERR)
return `spec[1].(spec[2]) = args[2] ! ANY';
else
return attempt;
endif
.
#48:7
if (pp = $code_utils:parse_propref(string = args[1]))
object = pp[1];
prop = pp[2];
else
object = string;
prop = 0;
endif
if ($command_utils:object_match_failed(note = player:my_match_object(object, this:get_room(player)), object))
elseif (prop)
if (!$object_utils:has_property(note, prop))
player:tell(object, " has no \".", prop, "\" property.");
else
return {note, prop};
endif
elseif ((!$object_utils:has_callable_verb(note, "text")) || (!$object_utils:has_callable_verb(note, "set_text")))
return {note, "description"};
"... what we used to do.  but why barf?   that's no fun...";
player:tell(object, "(", note, ") doesn't look like a note.");
else
return note;
endif
return 1;
.
#48:8
pass(@args);
if ((who = this:loaded(player)) && this.strmode[who])
player:tell("Text will be stored as a single string instead of a list when possible.");
endif
.
#48:9
"mode [string|list]";
if (!(who = this:loaded(player)))
player:tell(this:nothing_loaded_msg());
return;
endif
if (dobjstr && (index("string", dobjstr) == 1))
this.strmode[who] = mode = 1;
player:tell("Now in string mode:");
elseif (dobjstr && (index("list", dobjstr) == 1))
this.strmode[who] = mode = 0;
player:tell("Now in list mode:");
elseif (dobjstr)
player:tell("Unrecognized mode:  ", dobjstr);
player:tell("Should be one of `string' or `list'");
return;
else
player:tell("Currently in ", (mode = this.strmode[who]) ? "string " | "list ", "mode:");
endif
if (mode)
player:tell("  store text as a single string instead of a list when possible.");
else
player:tell("  always store text as a list of strings.");
endif
.
#48:10
{what, text} = args;
cmd = (typeof(text) == STR) ? "@set-note-string" | "@set-note-text";
name = (typeof(what) == OBJ) ? what.name | tostr(what[1].name, ".", what[2]);
note = (typeof(what) == OBJ) ? what | tostr(what[1], ".", what[2]);
return {name, text, tostr(cmd, " ", note)};
.
#48:11
if ($perm_utils:controls(caller_perms(), this))
return pass(@args);
else
return E_PERM;
endif
.
#49:0
if (!args)
player:tell("edit what?");
else
this:invoke(argstr, verb);
endif
.
#49:1
pas = {{}, {}};
if (!(who = this:loaded(player)))
player:tell(this:nothing_loaded_msg());
return;
elseif (!args)
object = this.objects[who];
vname = this.verbnames[who];
if (typeof(vname) == LIST)
vargs = listdelete(vname, 1);
vname = vname[1];
else
vargs = {};
endif
changeverb = 0;
elseif ((args[1] != "as") || ((length(args) < 2) || ((!(spec = $code_utils:parse_verbref(args[2]))) || ((typeof(pas = $code_utils:parse_argspec(@args[3..$])) != LIST) || pas[2]))))
if (typeof(pas) != LIST)
player:tell(pas);
elseif (pas[2])
player:tell("I don't understand \"", $string_utils:from_list(pas[2], " "), "\"");
endif
player:tell("Usage: ", verb, " [as <object>:<verb>]");
return;
elseif ($command_utils:object_match_failed(object = player:my_match_object(spec[1], this:get_room(player)), spec[1]))
return;
else
vname = spec[2];
vargs = pas[1] && {@pas[1], "none", "none"}[1..3];
if (vargs)
vargs[2] = $code_utils:full_prep(vargs[2]) || vargs[2];
endif
changeverb = 1;
endif
if (vargs)
vnum = $code_utils:find_verb_named(object, vname);
while (vnum && (this:fetch_verb_args(object, vnum) != vargs))
vnum = $code_utils:find_verb_named(object, vname, vnum + 1);
endwhile
if (!vnum)
player:tell("There is no ", object, ":", vname, " verb with args (", $string_utils:from_list(vargs, " "), ").");
if (!changeverb)
player:tell("Use 'compile as ...' to write your code to another verb.");
endif
return;
endif
objverbname = tostr(object, ":", vname, " (", $string_utils:from_list(vargs, " "), ")");
else
vnum = 0;
objverbname = tostr(object, ":", ($code_utils:toint(vname) == E_TYPE) ? vname | this:verb_name(object, vname));
endif
"...";
"...perform eval_subs on verb code if necessary...";
"...";
if (player.eval_subs && player:edit_option("eval_subs"))
verbcode = {};
for x in (this:text(who))
verbcode = {@verbcode, $code_utils:substitute(x, player.eval_subs)};
endfor
else
verbcode = this:text(who);
endif
"...";
"...write it out...";
"...";
if (result = this:set_verb_code(object, vnum ? vnum | vname, verbcode))
player:tell(objverbname, " not compiled because:");
for x in (result)
player:tell("  ", x);
endfor
elseif (typeof(result) == ERR)
player:tell({result, ("You do not have write permission on " + objverbname) + ".", ("The verb " + objverbname) + " does not exist (!?!)", ("The object " + tostr(object)) + " does not exist (!?!)"}[1 + (result in {E_PERM, E_VERBNF, E_INVARG})]);
if (!changeverb)
player:tell("Do 'compile as <object>:<verb>' to write your code to another verb.");
endif
changeverb = 0;
else
player:tell(objverbname, verbcode ? " successfully compiled." | " verbcode removed.");
this:set_changed(who, 0);
endif
if (changeverb)
this.objects[who] = object;
this.verbnames[who] = vargs ? {vname, @vargs} | vname;
endif
.
#49:2
if (!(fuckup = this:ok(who = args[1])))
return fuckup;
else
object = this.objects[who];
verbname = this.verbnames[who];
if (typeof(verbname) == LIST)
return tostr(object, ":", verbname[1], " (", $string_utils:from_list(listdelete(verbname, 1), " "), ")");
else
return tostr(object, ":", this:verb_name(object, verbname), " (", this:verb_args(object, verbname), ")");
endif
endif
"return this:ok(who = args[1]) && tostr(this.objects[who]) + \":\" + this.verbnames[who];";
.
#49:3
{who, object, vname, vcode} = args;
if (this:ok(who))
this:load(who, vcode);
this.verbnames[who] = vname;
this.objects[who] = object;
this.active[who]:tell("Now editing ", this:working_on(who), ".");
"this.active[who]:tell(\"Now editing \", object, \":\", vname, \".\");";
endif
.
#49:4
":parse_invoke(string,v,?code)";
"  string is the commandline string to parse to obtain the obj:verb to edit";
"  v is the actual command verb used to invoke the editor";
" => {object, verbname, verb_code} or error";
if (caller != this)
raise(E_PERM);
endif
vref = $string_utils:words(args[1]);
if ((!vref) || (!(spec = $code_utils:parse_verbref(vref[1]))))
player:tell("Usage: ", args[2], " object:verb");
return;
endif
if (argspec = listdelete(vref, 1))
if (typeof(pas = $code_utils:parse_argspec(@argspec)) == LIST)
if (pas[2])
player:tell("I don't understand \"", $string_utils:from_list(pas[2], " "), "\"");
return;
endif
argspec = {@pas[1], "none", "none"}[1..3];
argspec[2] = $code_utils:full_prep(argspec[2]) || argspec[2];
else
player:tell(pas);
return;
endif
endif
if (!$command_utils:object_match_failed(object = player:my_match_object(spec[1], this:get_room(player)), spec[1]))
vnum = $code_utils:find_verb_named(object, vname = spec[2]);
if (argspec)
while (vnum && (this:fetch_verb_args(object, vnum) != argspec))
vnum = $code_utils:find_verb_named(object, vname, vnum + 1);
endwhile
endif
if (length(args) > 2)
code = args[3];
elseif (vnum)
code = this:fetch_verb_code(object, vnum);
else
code = E_VERBNF;
endif
if (typeof(code) == ERR)
player:tell((code != E_VERBNF) ? code | "That object does not define that verb", argspec ? " with those args." | ".");
return code;
else
return {object, argspec ? {vname, @argspec} | vname, code};
endif
endif
return 0;
.
#49:5
"WIZARDLY";
if ((caller != $verb_editor) || (caller_perms() != $verb_editor.owner))
return E_PERM;
else
set_task_perms(player);
return `verb_code(args[1], args[2], !player:edit_option("no_parens")) ! ANY';
endif
.
#49:6
"WIZARDLY";
if ((caller != $verb_editor) || (caller_perms() != $verb_editor.owner))
return E_PERM;
else
set_task_perms(player);
return `set_verb_code(args[1], args[2], args[3]) ! ANY';
endif
.
#49:7
if (caller == $verb_editor)
set_task_perms(player);
endif
{object, vname, code} = args;
if (typeof(vname) == LIST)
if (vname[3] != "none")
vname[3] = $code_utils:short_prep(vname[3]);
endif
vargs = tostr(" ", vname[2], " ", vname[3], " ", vname[4]);
vname = vname[1];
else
vargs = "";
endif
name = tostr(object.name, ":", vname);
"... so the next 2 lines are actually wrong, since verb_info won't";
"... necessarily retrieve the correct verb if we have more than one";
"... matching the given same name; anyway, if parse_invoke understood vname,";
"... so will @program.  I suspect these were put here because in the";
"... old scheme of things, vname was always a number.";
"vname = strsub($string_utils:explode(verb_info(object, vname)[3])[1], \"*\", \"\")";
"vargs = verb_args(object, vname)";
"";
return {name, code, tostr("@program ", object, ":", vname, vargs)};
.
#49:8
"verb_name(object, vname)";
"Find vname on object and return its full name (quoted).";
"This is useful for when we're working with verb numbers.";
if ((caller != $verb_editor) || (caller_perms() != $verb_editor.owner))
return E_PERM;
else
set_task_perms(player);
given = args[2];
if (typeof(info = `verb_info(args[1], given) ! ANY') == ERR)
return tostr(given, "[", info, "]");
elseif (info[3] == given)
return given;
else
return tostr(given, "/\"", info[3], "\"");
endif
endif
.
#49:9
"verb_name(object, vname)";
"Find vname on object and return its full name (quoted).";
"This is useful for when we're working with verb numbers.";
if ((caller != $verb_editor) || (caller_perms() != $verb_editor.owner))
return E_PERM;
else
set_task_perms(player);
return $string_utils:from_list(`verb_args(args[1], args[2]) ! ANY', " ");
endif
.
#49:10
"Syntax: comment [<range>]";
"";
"Turns the specified range of lines, into comments.";
if ((caller != player) && (caller_perms() != player))
return E_PERM;
elseif (!(who = this:loaded(player)))
player:tell(this:nothing_loaded_msg());
elseif (typeof(range = this:parse_range(who, {"."}, @args)) != LIST)
player:tell(tostr(range));
elseif (range[3])
player:tell_lines($code_utils:verb_documentation());
else
text = this.texts[who];
{from, to, crap} = range;
cut = $maxint;
for line in [from..to]
cut = min(cut, `match(text[line], "[^ ]")[1] ! E_RANGE => 1');
endfor
for line in [from..to]
text[line] = toliteral(text[line][cut..$]) + ";";
endfor
this.texts[who] = text;
player:tell((to == from) ? "Line" | "Lines", " changed.");
this.changes[who] = 1;
this.times[who] = time();
endif
.
#49:11
"Syntax: uncomment [<range>]";
"";
"Turns the specified range of lines from comments to, uh, not comments.";
if ((caller != player) && (caller_perms() != player))
return E_PERM;
elseif (!(who = this:loaded(player)))
player:tell(this:nothing_loaded_msg());
elseif (typeof(range = this:parse_range(who, {"."}, @args)) != LIST)
player:tell(tostr(range));
elseif (range[3])
player:tell_lines($code_utils:verb_documentation());
else
text = this.texts[who];
{from, to, crap} = range;
bogus = {};
for line in [from..to]
if (match(text[line], "^ *\"%([^\\\"]%|\\.%)*\";$"))
"check from $code_utils:verb_documentation";
if (!bogus)
text[line] = $no_one:eval(text[line])[2];
endif
else
bogus = setadd(bogus, line);
endif
endfor
if (bogus)
player:tell((length(bogus) == 1) ? "Line" | "Lines", " ", $string_utils:english_list(bogus), " ", (length(bogus) == 1) ? "is" | "are", " not comments.");
player:tell("No changes.");
return;
endif
this.texts[who] = text;
player:tell((to == from) ? "Line" | "Lines", " changed.");
this.changes[who] = 1;
this.times[who] = time();
endif
.
#49:12
"WIZARDLY";
if ((caller != $verb_editor) || (caller_perms() != $verb_editor.owner))
raise(E_PERM);
else
set_task_perms(player);
return `verb_args(args[1], args[2]) ! ANY';
endif
.
#50:0
if ((caller != player) && (caller_perms() != player))
return E_PERM;
endif
if (!(who = this:loaded(player)))
player:tell(this:nothing_loaded_msg());
else
this:insert_line(who, argstr);
endif
.
#50:1
if ((caller != player) && (caller_perms() != player))
return E_PERM;
endif
if (!(who = this:loaded(player)))
player:tell(this:nothing_loaded_msg());
else
this:append_line(who, argstr);
endif
.
#50:2
if (!this:loaded(player))
player:tell(this:nothing_loaded_msg());
else
lines = $command_utils:read_lines();
if (typeof(lines) == ERR)
player:notify(tostr(lines));
return;
endif
this:insert_line(this:loaded(player), lines, 0);
endif
.
#50:3
nonum = 0;
if (verb == "view")
if (!args)
l = {};
for i in [1..length(this.active)]
if (this.readable[i])
l = {@l, this.active[i]};
endif
endfor
if (l)
player:tell("Players having readable texts in this editor:  ", $string_utils:names_of(l));
else
player:tell("No one has published anything in this editor.");
endif
return;
elseif ($command_utils:player_match_result(plyr = $string_utils:match_player(args[1]), args[1])[1])
"...no such player";
return;
elseif ((!(who = this:loaded(plyr))) || (!this:readable(who)))
player:tell(plyr.name, "(", plyr, ") has not published anything in this editor.");
return;
endif
args = listdelete(args, 1);
elseif (!(who = this:loaded(player)))
player:tell(this:nothing_loaded_msg());
return;
endif
len = length(this.texts[who]);
ins = this.inserting[who];
window = 8;
if (len < (2 * window))
default = {"1-$"};
elseif (ins <= window)
default = {tostr("1-", 2 * window)};
else
default = {tostr(window, "_-", window, "^"), tostr(2 * window, "$-$")};
endif
if (typeof(range = this:parse_range(who, default, @args)) != LIST)
player:tell(tostr(range));
elseif (range[3] && (!(nonum = "nonum" == $string_utils:trim(range[3]))))
player:tell("Don't understand this:  ", range[3]);
elseif (nonum)
player:tell_lines(this.texts[who][range[1]..range[2]]);
else
for line in [range[1]..range[2]]
this:list_line(who, line);
if ($command_utils:running_out_of_time())
suspend(0);
if (!(who = this:loaded(player)))
player:tell("ack!  something bad happened during a suspend...");
return;
endif
endif
endfor
if ((ins > len) && (len == range[2]))
player:tell("^^^^");
endif
endif
.
#50:4
if (i = index(argstr, "\""))
text = argstr[i + 1..$];
argstr = argstr[1..i - 1];
else
text = 0;
endif
spec = $string_utils:trim(argstr);
if (index("next", verb) == 1)
verb = "next";
spec = "+" + (spec || "1");
elseif (index("prev", verb) == 1)
verb = "prev";
spec = "-" + (spec || "1");
else
spec = spec || ".";
endif
if (!(who = this:loaded(player)))
player:tell(this:nothing_loaded_msg());
elseif (ERR == typeof(number = this:parse_insert(who, spec)))
if (verb in {"next", "prev"})
player:tell("Argument must be a number.");
else
player:tell("You must specify an integer or `$' for the last line.");
endif
elseif ((number > (max = length(this.texts[who]) + 1)) || (number < 1))
player:tell("That would take you out of range (to line ", number, "?).");
else
this.inserting[who] = number;
if (typeof(text) == STR)
this:insert_line(who, text);
else
if (verb != "next")
(number > 1) ? this:list_line(who, number - 1) | player:tell("____");
endif
if (verb != "prev")
(number < max) ? this:list_line(who, number) | player:tell("^^^^");
endif
endif
endif
.
#50:5
if (!(who = this:loaded(player)))
player:tell(this:nothing_loaded_msg());
elseif (typeof(range = this:parse_range(who, {"_", "1"}, @args)) != LIST)
player:tell(range);
elseif (range[3])
player:tell("Junk at end of cmd:  ", range[3]);
else
player:tell_lines((text = this.texts[who])[from = range[1]..to = range[2]]);
player:tell("---Line", (to > from) ? "s" | "", " deleted.  Insertion point is before line ", from, ".");
this.texts[who] = {@text[1..from - 1], @text[to + 1..$]};
if (!this.changes[who])
this.changes[who] = 1;
this.times[who] = time();
endif
this.inserting[who] = from;
endif
.
#50:6
if (callers() && (caller != this))
return E_PERM;
endif
if (!(who = this:loaded(player)))
player:tell(this:nothing_loaded_msg());
elseif (typeof(subst = this:parse_subst(argstr && (argstr[1] + argstr), "c", "Empty search string?")) != LIST)
player:tell(tostr(subst));
elseif (typeof(start = subst[4] ? this:parse_insert(who, subst[4]) | this.inserting[who]) == ERR)
player:tell("Starting from where?", subst[4] ? ("  (can't parse " + subst[4]) + ")" | "");
else
search = subst[2];
case = !index(subst[3], "c", 1);
text = this.texts[who];
tlen = length(text);
while ((start <= tlen) && (!index(text[start], search, case)))
start = start + 1;
endwhile
if (start > tlen)
player:tell("`", search, "' not found.");
else
this.inserting[who] = start + 1;
this:list_line(who, start);
endif
endif
.
#50:7
verb = (is_move = verb[1] == "m") ? "move" | "copy";
if (!(who = this:loaded(player)))
player:tell(this:nothing_loaded_msg());
return;
endif
wargs = args;
t = to_pos = 0;
while (t = "to" in (wargs = wargs[t + 1..$]))
to_pos = to_pos + t;
endwhile
range_args = args[1..to_pos - 1];
if ((!to_pos) || (ERR == typeof(dest = this:parse_insert(who, $string_utils:from_list(wargs, " ")))))
player:tell(verb, " to where? ");
elseif ((dest < 1) || (dest > ((last = length(this.texts[who])) + 1)))
player:tell("Destination (", dest, ") out of range.");
elseif (("from" in range_args) || ("to" in range_args))
player:tell("Don't use that kind of range specification with this command.");
elseif (typeof(range = this:parse_range(who, {"_", "^"}, @args[1..to_pos - 1])) != LIST)
player:tell(range);
elseif (range[3])
player:tell("Junk before `to':  ", range[3]);
elseif ((is_move && (dest >= range[1])) && (dest <= (range[2] + 1)))
player:tell("Destination lies inside range of lines to be moved.");
else
from = range[1];
to = range[2];
ins = this.inserting[who];
text = this.texts[who];
if (!is_move)
this.texts[who] = {@text[1..dest - 1], @text[from..to], @text[dest..last]};
if (ins >= dest)
this.inserting[who] = ((ins + to) - from) + 1;
endif
else
"oh shit... it's a move";
if (dest < from)
newtext = {@text[1..dest - 1], @text[from..to], @text[dest..from - 1], @text[to + 1..last]};
if ((ins >= dest) && (ins <= to))
ins = (ins > from) ? (ins - from) + dest | (((ins + to) - from) + 1);
endif
else
newtext = {@text[1..from - 1], @text[to + 1..dest - 1], @text[from..to], @text[dest..last]};
if ((ins > from) && (ins < dest))
ins = (ins <= to) ? ((ins + dest) - to) - 1 | (((ins - to) + from) - 1);
endif
endif
this.texts[who] = newtext;
this.inserting[who] = ins;
endif
if (!this.changes[who])
this.changes[who] = 1;
this.times[who] = time();
endif
player:tell("Lines ", is_move ? "moved." | "copied.");
endif
.
#50:8
if (!(who = this:loaded(player)))
player:tell(this:nothing_loaded_msg());
elseif (typeof(range = this:parse_range(who, {"_-^", "_", "^"}, @args)) != LIST)
player:tell(range);
elseif (range[3])
player:tell("Junk at end of cmd:  ", range[3]);
elseif (!(result = this:join_lines(who, @range[1..2], length(verb) <= 4)))
player:tell((result == 0) ? "Need at least two lines to join." | result);
else
this:list_line(who, range[1]);
endif
.
#50:9
fill_column = 70;
if (!(who = this:loaded(player)))
player:tell(this:nothing_loaded_msg());
elseif (typeof(range = this:parse_range(who, {"_", "1"}, @args)) != LIST)
player:tell(range);
elseif (range[3] && ((range[3][1] != "@") || ((fill_column = toint(range[3][2..$])) < 10)))
player:tell("Usage:  fill [<range>] [@ column]   (where column >= 10).");
else
join = this:join_lines(who, @range[1..2], 1);
newlines = this:fill_string((text = this.texts[who])[from = range[1]], fill_column);
if (fill = ((nlen = length(newlines)) > 1) || (newlines[1] != text[from]))
this.texts[who] = {@text[1..from - 1], @newlines, @text[from + 1..$]};
if (((insert = this.inserting[who]) > from) && (nlen > 1))
this.inserting[who] = (insert + nlen) - 1;
endif
endif
if (fill || join)
for line in [from..(from + nlen) - 1]
this:list_line(who, line);
endfor
else
player:tell("No changes.");
endif
endif
.
#50:10
if (!(who = this:loaded(player)))
player:tell(this:nothing_loaded_msg());
return;
endif
if (typeof(e = this:set_readable(who, index("publish", verb) == 1)) == ERR)
player:tell(e);
elseif (e)
player:tell("Your text is now globally readable.");
else
player:tell("Your text is read protected.");
endif
.
#50:11
if (!(this:ok(who = player in this.active) && (typeof(this.texts[who]) == LIST)))
player:tell(this:nothing_loaded_msg());
else
player:tell("You are editing ", this:working_on(who), ".");
player:tell("Your insertion point is ", (this.inserting[who] > length(this.texts[who])) ? "after the last line: next line will be #" | "before line ", this.inserting[who], ".");
player:tell(this.changes[who] ? this:change_msg() | this:no_change_msg());
if (this.readable[who])
player:tell("Your text is globally readable.");
endif
endif
.
#50:12
if (!this.changes[who = player in this.active])
player:tell("No changes to throw away.  Editor cleared.");
else
player:tell("Throwing away session for ", this:working_on(who), ".");
endif
this:reset_session(who);
if (this.exit_on_abort)
this:done();
endif
.
#50:13
if (!(caller in {this, player}))
return E_PERM;
elseif (!(who = player in this.active))
player:tell("You are not actually in ", this.name, ".");
return;
elseif (!valid(origin = this.original[who]))
player:tell("I don't know where you came here from.");
else
player:moveto(origin);
if (player.location == this)
player:tell("Hmmm... the place you came from doesn't want you back.");
else
if (msg = this:return_msg())
player.location:announce($string_utils:pronoun_sub(msg));
endif
return;
endif
endif
player:tell("You'll have to use 'home' or a teleporter.");
.
#50:14
"This catches subst and find commands that don't fit into the usual model, e.g., s/.../.../ without the space after the s, and find commands without the verb `find'.  Still behaves in annoying ways (e.g., loses if the search string contains multiple whitespace), but better than before.";
set_task_perms(caller_perms());
if ((c = callers()) && ((c[1][1] != this) || (length(c) > 1)))
return pass(@args);
endif
verb = args[1];
v = 1;
vmax = min(length(verb), 5);
while ((v <= vmax) && (verb[v] == "subst"[v]))
v = v + 1;
endwhile
argstr = $code_utils:argstr(verb, args[2]);
if (((v > 1) && (v <= length(verb))) && (((vl = verb[v]) < "A") || (vl > "Z")))
argstr = (verb[v..$] + (argstr && " ")) + argstr;
return this:subst();
elseif ("/" == verb[1])
argstr = (verb + (argstr && " ")) + argstr;
return this:find();
else
pass(@args);
endif
.
#50:15
return this:ok(who = args[1]) && this.inserting[who];
.
#50:16
return this:ok(who = args[1]) && ((((ins = toint(args[2])) < 1) ? E_INVARG | ((ins <= (max = length(this.texts[who]) + 1)) || (ins = max))) && (this.inserting[who] = ins));
.
#50:17
return this:ok(who = args[1]) && this.changes[who];
.
#50:18
return this:ok(who = args[1]) && (((unchanged = !args[2]) || (this.times[who] = time())) && (this.changes[who] = !unchanged));
.
#50:19
return this:ok(who = args[1]) && this.original[who];
.
#50:20
return this:ok(who = args[1]) && (((valid(origin = args[2]) && (origin != this)) || ((origin == $nothing) || E_INVARG)) && (this.original[who] = origin));
.
#50:21
return (((who = args[1]) < 1) || (who > length(this.active))) ? E_RANGE | this.readable[who];
.
#50:22
return this:ok(who = args[1]) && (this.readable[who] = !(!args[2]));
.
#50:23
{?who = player in this.active} = args;
return (this:readable(who) || this:ok(who)) && this.texts[who];
.
#50:24
texts = args[2];
if (!(fuckup = this:ok(who = args[1])))
return fuckup;
elseif (typeof(texts) == STR)
texts = {texts};
elseif ((typeof(texts) != LIST) || (length(texts) && (typeof(texts[1]) != STR)))
return E_TYPE;
endif
this.texts[who] = texts;
this.inserting[who] = length(texts) + 1;
this.changes[who] = 0;
this.readable[who] = 0;
this.times[who] = time();
.
#50:25
"Dummy routine.  The child editor should provide something informative";
return this:ok(who = args[1]) && (("something [in " + this.name) + "]");
.
#50:26
who = args[1];
if ((who < 1) || (who > length(this.active)))
return E_RANGE;
elseif ((length(c = callers()) < 2) ? player == this.active[who] | ((c[2][1] == this) || ($perm_utils:controls(c[2][3], this.active[who]) || (c[2][3] == $generic_editor.owner))))
return 1;
else
return E_PERM;
endif
.
#50:27
return ((who = args[1] in this.active) && (typeof(this.texts[who]) == LIST)) && who;
.
#50:28
if (this:ok(who = args[1]))
f = 1 + ((line = args[2]) in {(ins = this.inserting[who]) - 1, ins});
player:tell($string_utils:right(line, 3, " _^"[f]), ":_^"[f], " ", this.texts[who][line]);
endif
.
#50:29
":insert_line([who,] line or list of lines [,quiet])";
"  inserts the given text at the insertion point.";
"  returns E_NONE if the session has no text loaded yet.";
if (typeof(args[1]) != INT)
args = {player in this.active, @args};
endif
{who, lines, ?quiet = this.active[who]:edit_option("quiet_insert")} = args;
if (!(fuckup = this:ok(who)))
return fuckup;
elseif (typeof(text = this.texts[who]) != LIST)
return E_NONE;
else
if (typeof(lines) != LIST)
lines = {lines};
endif
p = this.active[who];
insert = this.inserting[who];
this.texts[who] = {@text[1..insert - 1], @lines, @text[insert..$]};
this.inserting[who] = insert + length(lines);
if (lines)
if (!this.changes[who])
this.changes[who] = 1;
this.times[who] = time();
endif
if (!quiet)
if (length(lines) != 1)
p:tell("Lines ", insert, "-", (insert + length(lines)) - 1, " added.");
else
p:tell("Line ", insert, " added.");
endif
endif
else
p:tell("No lines added.");
endif
endif
.
#50:30
":append_line([who,] string)";
"  appends the given string to the line before the insertion point.";
"  returns E_NONE if the session has no text loaded yet.";
if (typeof(args[1]) != INT)
args = {player in this.active, @args};
endif
{who, string} = args;
if (!(fuckup = this:ok(who)))
return fuckup;
elseif ((append = this.inserting[who] - 1) < 1)
return this:insert_line(who, {string});
elseif (typeof(text = this.texts[who]) != LIST)
return E_NONE;
else
this.texts[who][append] = text[append] + string;
if (!this.changes[who])
this.changes[who] = 1;
this.times[who] = time();
endif
p = this.active[who];
if (!p:edit_option("quiet_insert"))
p:tell("Appended to line ", append, ".");
endif
endif
.
#50:31
{who, from, to, english} = args;
if (!(fuckup = this:ok(who)))
return fuckup;
elseif (from >= to)
return 0;
else
nline = "";
for line in ((text = this.texts[who])[from..to])
if (!english)
nline = nline + line;
else
len = length(line) + 1;
while ((len = len - 1) && (line[len] == " "))
endwhile
if (len > 0)
nline = (nline + line) + (index(".:", line[len]) ? "  " | " ");
endif
endif
endfor
this.texts[who] = {@text[1..from - 1], nline, @text[to + 1..$]};
if ((insert = this.inserting[who]) > from)
this.inserting[who] = (insert <= to) ? from + 1 | ((insert - to) + from);
endif
if (!this.changes[who])
this.changes[who] = 1;
this.times[who] = time();
endif
return to - from;
endif
.
#50:32
"parse_number(who,string,before)   interprets string as a line number.  In the event that string is `.', `before' tells us which line to use.  Return 0 if string is bogus.";
{who, string, before} = args;
if (!(fuckup = this:ok(who)))
return fuckup;
endif
last = length(this.texts[who]);
ins = this.inserting[who] - 1;
after = !before;
if (!string)
return 0;
elseif ("." == string)
return ins + after;
elseif (!(i = index("_^$", string[slen = length(string)])))
return toint(string);
else
start = {ins + 1, ins, last + 1}[i];
n = 1;
if ((slen > 1) && (!(n = toint(string[1..slen - 1]))))
return 0;
elseif (i % 2)
return start - n;
else
return start + n;
endif
endif
.
#50:33
"parse_range(who,default,@args) => {from to rest}";
numargs = length(args);
if (!(fuckup = this:ok(who = args[1])))
return fuckup;
elseif (!(last = length(this.texts[who])))
return this:no_text_msg();
endif
default = args[2];
r = 0;
while (default && (LIST != typeof(r = this:parse_range(who, {}, default[1]))))
default = listdelete(default, 1);
endwhile
if (typeof(r) == LIST)
from = r[1];
to = r[2];
else
from = to = 0;
endif
saw_from_to = 0;
not_done = 1;
a = 2;
while (((a = a + 1) <= numargs) && not_done)
if (args[a] == "from")
if ((a == numargs) || (!(from = this:parse_number(who, args[a = a + 1], 0))))
return "from ?";
endif
saw_from_to = 1;
elseif (args[a] == "to")
if ((a == numargs) || (!(to = this:parse_number(who, args[a = a + 1], 1))))
return "to ?";
endif
saw_from_to = 1;
elseif (saw_from_to)
a = a - 1;
not_done = 0;
elseif (i = index(args[a], "-"))
from = this:parse_number(who, args[a][1..i - 1], 0);
to = this:parse_number(who, args[a][i + 1..$], 1);
not_done = 0;
elseif (f = this:parse_number(who, args[a], 0))
from = f;
if ((a == numargs) || (!(to = this:parse_number(who, args[a + 1], 1))))
to = from;
else
a = a + 1;
endif
not_done = 0;
else
a = a - 1;
not_done = 0;
endif
endwhile
if (from < 1)
return tostr("from ", from, "?  (out of range)");
elseif (to > last)
return tostr("to ", to, "?  (out of range)");
elseif (from > to)
return tostr("from ", from, " to ", to, "?  (backwards range)");
else
return {from, to, $string_utils:from_list(args[a..numargs], " ")};
endif
.
#50:34
"parse_ins(who,string)  interprets string as an insertion point, i.e., a position between lines and returns the number of the following line or 0 if bogus.";
if (!(fuckup = this:ok(who = args[1])))
return fuckup;
endif
{who, string} = args;
if (length(string) == 0)
return E_INVARG;
endif
last = length(this.texts[who]) + 1;
ins = this.inserting[who];
if (i = index("-+", string[1]))
rest = string[2..$];
return ((n = toint(rest)) || (rest == "0")) ? {ins - n, ins + n}[i] | E_INVARG;
else
if (!(j = index(string, "^") || index(string, "_")))
offset = 0;
else
offset = (j == 1) || toint(string[1..j - 1]);
if (!offset)
return E_INVARG;
elseif (string[j] == "^")
offset = -offset;
endif
endif
rest = string[j + 1..$];
if (i = rest in {".", "$"})
return offset + {ins, last}[i];
elseif (!(n = toint(rest)))
return E_INVARG;
else
return (offset + (j && (string[j] == "^"))) + n;
endif
endif
.
#50:35
{cmd, ?recognized_flags = "gcr", ?null_subst_msg = "Null substitution?"} = args;
if (!cmd)
return "s*ubst/<str1>/<str2>[/[g][c][r][<range>]] expected...";
endif
bchar = cmd[1];
cmd = cmd[2..$];
fromstr = cmd[1..(b2 = index(cmd + bchar, bchar, 1)) - 1];
cmd = cmd[b2 + 1..$];
tostr = cmd[1..(b2 = index(cmd + bchar, bchar, 1)) - 1];
cmd = cmd[b2 + 1..$];
cmdlen = length(cmd);
b2 = 0;
while (((b2 = b2 + 1) <= cmdlen) && index(recognized_flags, cmd[b2]))
endwhile
return ((fromstr == "") && (tostr == "")) ? null_subst_msg | {fromstr, tostr, cmd[1..b2 - 1], cmd[b2..$]};
.
#50:36
":invoke(...)";
"to find out what arguments this verb expects,";
"see this editor's parse_invoke verb.";
new = args[1];
if ((!(caller in {this, player})) && (!$perm_utils:controls(caller_perms(), player)))
"...non-editor/non-player verb trying to send someone to the editor...";
return E_PERM;
endif
if ((who = this:loaded(player)) && this:changed(who))
if (!new)
if (this:suck_in(player))
player:tell("You are working on ", this:working_on(who));
endif
return;
elseif (player.location == this)
player:tell("You are still working on ", this:working_on(who));
if (msg = this:previous_session_msg())
player:tell(msg);
endif
return;
endif
"... we're not in the editor and we're about to start something new,";
"... but there's still this pending session...";
player:tell("You were working on ", this:working_on(who));
if (!$command_utils:yes_or_no("Do you wish to delete that session?"))
if (this:suck_in(player))
player:tell("Continuing with ", this:working_on(player in this.active));
if (msg = this:previous_session_msg())
player:tell(msg);
endif
endif
return;
endif
"... note session number may have changed => don't trust `who'";
this:kill_session(player in this.active);
endif
spec = this:parse_invoke(@args);
if (typeof(spec) == LIST)
if ((player:edit_option("local") && $object_utils:has_verb(this, "local_editing_info")) && (info = this:local_editing_info(@spec)))
this:invoke_local_editor(@info);
elseif (this:suck_in(player))
this:init_session(player in this.active, @spec);
endif
endif
.
#50:37
"The correct way to move someone into the editor.";
if (((loc = (who_obj = args[1]).location) != this) && (caller == this))
this.invoke_task = task_id();
who_obj:moveto(this);
if (who_obj.location == this)
try
"...forked, just in case loc:announce is broken...";
"changed to a try-endtry. Lets reduce tasks..Ho_Yan 12/20/96";
if (valid(loc) && (msg = this:depart_msg()))
loc:announce($string_utils:pronoun_sub(msg));
endif
except (ANY)
"Just drop it and move on";
endtry
else
who_obj:tell("For some reason, I can't move you.   (?)");
this:exitfunc(who_obj);
endif
this.invoke_task = 0;
endif
return who_obj.location == this;
.
#50:38
"WIZARDLY";
{who_obj, from} = args;
if ($object_utils:isa(from, $generic_editor))
"... never put an editor in .original, ...";
if (w = who_obj in from.active)
from = from.original[w];
else
from = #-1;
endif
endif
if (caller != this)
return E_PERM;
elseif (who = who_obj in this.active)
"... edit in progress here...";
if (valid(from))
this.original[who] = from;
endif
return -1;
else
for p in ({{"active", who_obj}, {"original", valid(from) ? from | $nothing}, {"times", time()}, @this.stateprops})
this.(p[1]) = {@this.(p[1]), p[2]};
endfor
return length(this.active);
endif
.
#50:39
"WIZARDLY";
if (!(fuckup = this:ok(who = args[1])))
return fuckup;
else
for p in ({@this.stateprops, {"original"}, {"active"}, {"times"}})
this.(p[1]) = listdelete(this.(p[1]), who);
endfor
return who;
endif
.
#50:40
"WIZARDLY";
if (!(fuckup = this:ok(who = args[1])))
return fuckup;
else
for p in (this.stateprops)
this.(p[1])[who] = p[2];
endfor
this.times[who] = time();
return who;
endif
.
#50:41
"WIZARDLY";
if ((caller != this) && (!caller_perms().wizard))
return E_PERM;
else
for victim in (this.contents)
victim:tell("Sorry, ", this.name, " is going down.  Your editing session is hosed.");
victim:moveto(((who = victim in this.active) && valid(origin = this.original[who])) ? origin | (valid(victim.home) ? victim.home | $player_start));
endfor
for p in ({@this.stateprops, {"original"}, {"active"}, {"times"}})
this.(p[1]) = {};
endfor
return 1;
endif
.
#50:42
return is_player(who_obj = args[1]) && (who_obj.wizard || pass(@args));
.
#50:43
who_obj = args[1];
if (who_obj.wizard && (!(who_obj in this.active)))
this:accept(who_obj);
endif
pass(@args);
if (this.invoke_task == task_id())
"Means we're about to load something, so be quiet.";
this.invoke_task = 0;
elseif (who = this:loaded(who_obj))
who_obj:tell("You are working on ", this:working_on(who), ".");
elseif (msg = this:nothing_loaded_msg())
who_obj:tell(msg);
endif
.
#50:44
if (!(who = (who_obj = args[1]) in this.active))
elseif (this:retain_session_on_exit(who))
if (msg = this:no_littering_msg())
who_obj:tell_lines(msg);
endif
else
this:kill_session(who);
endif
pass(@args);
.
#50:45
"@flush <editor>";
"@flush <editor> at <month> <day>";
"@flush <editor> at <weekday>";
"The first form removes all sessions from the editor; the other two forms remove everything older than the given date.";
if ((caller_perms() != #-1) && (caller_perms() != player))
raise(E_PERM);
elseif (!$perm_utils:controls(player, this))
player:tell("Only the owner of the editor can do a ", verb, ".");
return;
endif
if (!prepstr)
player:tell("Trashing all sessions.");
this:kill_all_sessions();
elseif (prepstr != "at")
player:tell("Usage:  ", verb, " ", dobjstr, " [at [mon day|weekday]]");
else
p = prepstr in args;
if (t = $time_utils:from_day(iobjstr, -1))
elseif (t = $time_utils:from_month(args[p + 1], -1))
if (length(args) > (p + 1))
if (!(n = toint(args[p + 2])))
player:tell(args[p + 1], " WHAT?");
return;
endif
t = t + ((n - 1) * 86400);
endif
else
player:tell("couldn't parse date");
return;
endif
this:do_flush(t, "noisy");
endif
player:tell("Done.");
.
#50:46
if (!$perm_utils:controls(player, this))
player:tell(E_PERM);
return;
endif
if (i = index(dobjstr, "="))
default = dobjstr[i + 1..$];
prop = dobjstr[1..i - 1];
if (argstr[1 + index(argstr, "=")] == "\"")
elseif (default[1] == "#")
default = toobj(default);
elseif (index("0123456789", default[1]))
default = toint(default);
elseif (default == "{}")
default = {};
endif
else
default = 0;
prop = dobjstr;
endif
if (typeof(result = this:set_stateprops(prop, default)) == ERR)
player:tell((result == E_RANGE) ? tostr(".", prop, " needs to hold a list of the same length as .active (", length(this.active), ").") | ((result != E_NACC) ? result | (prop + " is already a property on an ancestral editor.")));
else
player:tell("Property added.");
endif
.
#50:47
if (!$perm_utils:controls(player, this))
player:tell(E_PERM);
elseif (typeof(result = this:set_stateprops(dobjstr)) == ERR)
player:tell((result != E_NACC) ? result | (dobjstr + " is already a property on an ancestral editor."));
else
player:tell("Property removed.");
endif
.
#50:48
if ($perm_utils:controls(caller_perms(), this))
pass(@args);
this:kill_all_sessions();
endif
.
#50:49
if (caller_perms().wizard)
pass(@args);
this:kill_all_sessions();
if (this == $generic_editor)
this.help = $editor_help;
endif
if ($object_utils:defines_verb(this, "is_not_banned"))
delete_verb(this, "is_not_banned");
endif
endif
.
#50:50
remove = length(args) < 2;
if ((caller != this) && (!$perm_utils:controls(caller_perms(), this)))
return E_PERM;
elseif (!(length(args) in {1, 2}))
return E_ARGS;
elseif (typeof(prop = args[1]) != STR)
return E_TYPE;
elseif (i = $list_utils:iassoc(prop, this.stateprops))
if (!remove)
this.stateprops[i] = {prop, args[2]};
elseif ($object_utils:has_property(parent(this), prop))
return E_NACC;
else
this.stateprops = listdelete(this.stateprops, i);
endif
elseif (remove)
elseif (prop in `properties(this) ! ANY => {}')
if (this:_stateprop_length(prop) != length(this.active))
return E_RANGE;
endif
this.stateprops = {{prop, args[2]}, @this.stateprops};
else
return $object_utils:has_property(this, prop) ? E_NACC | E_PROPNF;
endif
return 0;
.
#50:51
is_look_self = 1;
for c in (callers())
if (is_look_self && (c[2] in {"enterfunc", "confunc"}))
return {"", "Do a 'look' to get the list of commands, or 'help' for assistance.", "", @this.description};
elseif ((c[2] != "look_self") && (c[2] != "pass"))
is_look_self = 0;
endif
endfor
d = {"Commands:", ""};
col = {{}, {}};
for c in [1..2]
for cmd in (this.commands2[c])
cmd = this:commands_info(cmd);
col[c] = {cmdargs = $string_utils:left(cmd[1] + " ", 12) + cmd[2], @col[c]};
endfor
endfor
i1 = length(col[1]);
i2 = length(col[2]);
right = 0;
while (i1 || i2)
if (!((i1 && (length(col[1][i1]) > 35)) || (i2 && (length(col[2][i2]) > 35))))
d = {@d, $string_utils:left(i1 ? col[1][i1] | "", 40) + (i2 ? col[2][i2] | "")};
i1 && (i1 = i1 - 1);
i2 && (i2 = i2 - 1);
right = 0;
elseif (right && i2)
d = {@d, (length(col[2][i2]) > 35) ? $string_utils:right(col[2][i2], 75) | ($string_utils:space(40) + col[2][i2])};
i2 = i2 - 1;
right = 0;
elseif (i1)
d = {@d, col[1][i1]};
i1 = i1 - 1;
right = 1;
else
right = 1;
endif
endwhile
return {@d, "", "----  Do `help <cmdname>' for help with a given command.  ----", "", "  <ins> ::= $ (the end) | [^]n (above line n) | _n (below line n) | . (current)", "<range> ::= <lin> | <lin>-<lin> | from <lin> | to <lin> | from <lin> to <lin>", "  <lin> ::= n | [n]$ (n from the end) | [n]_ (n before .) | [n]^ (n after .)", "`help insert' and `help ranges' describe these in detail.", @this.description};
.
#50:52
cmd = args[1];
if (pc = $list_utils:assoc(cmd, this.commands))
return pc;
elseif (this == $generic_editor)
return {cmd, "<<<<<======= Need to add this to .commands"};
else
return parent(this):commands_info(cmd);
endif
.
#50:53
{objstr, ?who = player} = args;
origin = this;
while ((where = player in origin.active) && ($recycler:valid(origin = origin.original[where]) && (origin != this)))
if (!$object_utils:isa(origin, $generic_editor))
return origin:match_object(objstr, who);
endif
endwhile
return who:my_match_object(objstr, #-1);
.
#50:54
who = args[1];
where = {#-1, @this.original}[1 + (who in this.active)];
wherestr = `where:who_location_msg(who) ! ANY => "An Editor"';
if (typeof(wherestr) != STR)
wherestr = "broken who_location_msg";
endif
return strsub(this.who_location_msg, "%L", wherestr);
return $string_utils:pronoun_sub(this.who_location_msg, who, this, where);
.
#50:55
return $code_utils:verb_or_property(player, verb, this) || this.(verb);
.
#50:56
return;
.
#50:57
"fill(string [, width [, prefix]])";
"tries to cut <string> into substrings of length < <width> along word boundaries.  Prefix, if supplied, will be prefixed to the 2nd..last substrings.";
{string, ?width = 1 + player:linelen(), ?prefix = ""} = args;
width = width + 1;
if (width < (3 + length(prefix)))
return E_INVARG;
endif
string = ("$" + string) + " $";
len = length(string);
if (len <= width)
last = len - 1;
next = len;
else
last = rindex(string[1..width], " ");
if (last < ((width + 1) / 2))
last = width + index(string[width + 1..len], " ");
endif
next = last;
while (string[next = next + 1] == " ")
endwhile
endif
while (string[last = last - 1] == " ")
endwhile
ret = {string[2..last]};
width = width - length(prefix);
minlast = (width + 1) / 2;
while (next < len)
string = "$" + string[next..len];
len = (len - next) + 2;
if (len <= width)
last = len - 1;
next = len;
else
last = rindex(string[1..width], " ");
if (last < minlast)
last = width + index(string[width + 1..len], " ");
endif
next = last;
while (string[next = next + 1] == " ")
endwhile
endif
while (string[last = last - 1] == " ")
endwhile
if (last > 1)
ret = {@ret, prefix + string[2..last]};
endif
endwhile
return ret;
.
#50:58
"This catches subst and find commands that don't fit into the usual model, e.g., s/.../.../ without the space after the s, and find commands without the verb `find'.  Still behaves in annoying ways (e.g., loses if the search string contains multiple whitespace), but better than before.";
if ((caller != this) && (caller_perms() != player))
return E_PERM;
endif
{verb, args} = args;
v = 1;
vmax = min(length(verb), 5);
while ((v <= vmax) && (verb[v] == "subst"[v]))
v = v + 1;
endwhile
argstr = $code_utils:argstr(verb, args);
if ((v > 1) && ((v <= length(verb)) && (((vl = verb[v]) < "A") || (vl > "Z"))))
argstr = (verb[v..$] + (argstr && " ")) + argstr;
this:subst();
return 1;
elseif ("/" == verb[1])
argstr = (verb + (argstr && " ")) + argstr;
this:find();
return 1;
else
return 0;
endif
.
#50:59
return $failed_match;
.
#50:60
":get_room([player])  => correct room to match in on invocation.";
{?who = player} = args;
if (who.location != this)
return who.location;
else
origin = this;
while ((where = player in origin.active) && (valid(origin = origin.original[where]) && (origin != this)))
if (!$object_utils:isa(origin, $generic_editor))
return origin;
endif
endwhile
return this;
endif
.
#50:61
":invoke_local_editor(name, text, upload)";
"Spits out the magic text that invokes the local editor in the player's client.";
"NAME is a good human-readable name for the local editor to use for this particular piece of text.";
"TEXT is a string or list of strings, the initial body of the text being edited.";
"UPLOAD, a string, is a MOO command that the local editor can use to save the text when the user is done editing.  The local editor is going to send that command on a line by itself, followed by the new text lines, followed by a line containing only `.'.  The UPLOAD command should therefore call $command_utils:read_lines() to get the new text as a list of strings.";
if (caller != this)
return;
endif
{name, text, upload} = args;
if (typeof(text) == STR)
text = {text};
endif
notify(player, tostr("#$# edit name: ", name, " upload: ", upload));
":dump_lines() takes care of the final `.' ...";
for line in ($command_utils:dump_lines(text))
notify(player, line);
endfor
.
#50:62
"+c properties on children cannot necessarily be read, so we need this silliness...";
if (caller != this)
return E_PERM;
else
return length(this.(args[1]));
endif
.
#50:63
txt = this:text(player in this.active);
if (typeof(txt) == LIST)
player:tell_lines(txt);
else
player:tell("Text unreadable:  ", txt);
endif
player:tell("--------------------------");
.
#50:64
return this:acceptable(who_obj = args[1]) && this:new_session(who_obj, who_obj.location);
.
#50:65
"Usage: yank from <note>";
"       yank <message-sequence> from <mail-recipient>";
"       yank from <object>:<verb>";
"       yank from <object>.<property>";
"Grabs the specified text and inserts it at the cursor.";
set_task_perms(player);
if (dobjstr)
"yank <message-sequence> from <mail-recipient>";
if (!(p = player:parse_mailread_cmd(verb, args, "", "from")))
return;
elseif ($seq_utils:size(sequence = p[2]) != 1)
player:notify(tostr("You can only ", verb, " one message at a time"));
return;
else
m = (folder = p[1]):messages_in_seq(sequence);
msg = m[1];
header = tostr("Message ", msg[1]);
if (folder != player)
header = tostr(header, " on ", $mail_agent:name(folder));
endif
header = tostr(header, ":");
lines = {header, @player:msg_full_text(@msg[2])};
this:insert_line(this:loaded(player), lines, 0);
endif
elseif (pr = $code_utils:parse_propref(iobjstr))
o = player:my_match_object(pr[1]);
if ($command_utils:object_match_failed(o, pr[1]))
return;
elseif ((lines = `o.(pr[2]) ! ANY') == E_PROPNF)
player:notify(tostr("There is no `", pr[2], "' property on ", $string_utils:nn(o), "."));
return;
elseif (lines == E_PERM)
player:notify(tostr("Error: Permission denied reading ", iobjstr));
return;
elseif (typeof(lines) == ERR)
player:notify(tostr("Error: ", lines, " reading ", iobjstr));
return;
elseif (typeof(lines) == STR)
this:insert_line(this:loaded(player), lines, 0);
return;
elseif (typeof(lines) == LIST)
for x in (lines)
if (typeof(x) != STR)
player:notify(tostr("Error: ", iobjstr, " does not contain a ", verb, "-able value."));
return;
endif
endfor
this:insert_line(this:loaded(player), lines, 0);
return;
else
player:notify(tostr("Error: ", iobjstr, " does not contain a ", verb, "-able value."));
return;
endif
elseif (pr = $code_utils:parse_verbref(iobjstr))
o = player:my_match_object(pr[1]);
if ($command_utils:object_match_failed(o, pr[1]))
return;
elseif (lines = `verb_code(o, pr[2], !player:edit_option("no_parens")) ! ANY')
this:insert_line(this:loaded(player), lines, 0);
return;
elseif (lines == E_PERM)
player:notify(tostr("Error: Permission denied reading ", iobjstr));
return;
elseif (lines == E_VERBNF)
player:notify(tostr("There is no `", pr[2], "' verb on ", $string_utils:nn(o), "."));
else
player:notify(tostr("Error: ", lines, " reading ", iobjstr));
return;
endif
elseif ($command_utils:object_match_failed(iobj = player:my_match_object(iobjstr), iobjstr))
return;
elseif ((lines = `iobj:text() ! ANY') == E_PERM)
player:notify(tostr("Error: Permission denied reading ", iobjstr));
return;
elseif (lines == E_VERBNF)
player:notify(tostr($string_utils:nn(iobj), " doesn't seem to be a note."));
elseif (typeof(lines) == ERR)
player:notify(tostr("Error: ", lines, " reading ", iobjstr));
return;
else
this:insert_line(this:loaded(player), lines, 0);
endif
.
#50:66
"Flushes editor sessions older than args[1].  If args[2] is true, prints status as it runs.  If args[2] is false, runs silently.";
if (!$perm_utils:controls(caller_perms(), this))
return E_PERM;
else
{t, noisy} = args;
for i in [-length(this.active)..-1]
if (this.times[-i] < t)
if (noisy)
player:tell($string_utils:nn(this.active[-i]), ctime(this.times[-i]));
endif
this:kill_session(-i);
endif
endfor
endif
.
#50:67
if (callers() && (caller != this))
return E_PERM;
elseif (!(who = this:loaded(player)))
player:tell(this:nothing_loaded_msg());
elseif (typeof(subst = this:parse_subst(argstr)) != LIST)
player:tell(tostr(subst));
elseif (typeof(range = this:parse_range(who, {"_", "1"}, @$string_utils:explode(subst[4]))) != LIST)
player:tell(range);
elseif (range[3])
player:tell("Junk at end of cmd:  ", range[3]);
else
{fromstr, tostr, specs, dummy} = subst;
global = index(specs, "g", 1);
regexp = index(specs, "r", 1);
case = !index(specs, "c", 1);
munged = {};
text = this.texts[who];
changed = {};
{from, to} = range[1..2];
for line in [from..to]
t = t0 = text[line];
if (!fromstr)
t = tostr + t;
elseif (global)
if (regexp)
while (new = this:subst_regexp(t, fromstr, tostr, case))
t = new;
endwhile
else
t = strsub(t, fromstr, tostr, case);
endif
else
if (regexp)
(new = this:subst_regexp(t, fromstr, tostr, case)) && (t = new);
else
(i = index(t, fromstr, case)) && (t = (t[1..i - 1] + tostr) + t[i + length(fromstr)..length(t)]);
endif
endif
if (strcmp(t0, t))
changed = {@changed, line};
endif
munged = {@munged, t};
endfor
if (!changed)
player:tell("No changes in line", (from == to) ? tostr(" ", from) | tostr("s ", from, "-", to), ".");
else
this.texts[who] = {@text[1..from - 1], @munged, @text[to + 1..$]};
if (!this.changes[who])
this.changes[who] = 1;
this.times[who] = time();
endif
for line in (changed)
this:list_line(who, line);
endfor
endif
endif
.
#50:68
"Copied from Domain (#8111):subst_regexp by Mooshie (#106469) Mon Jan  5 19:27:26 1998 PST";
"Usage: subst_regexp(STR text, STR from string, STR to string, INT case)";
{text, from, to, case} = args;
if (m = match(text, from, case))
{start, end} = m[1..2];
text[start..end] = substitute(to, m);
return text;
else
return m;
endif
.
#50:69
return (this == $generic_editor) ? {"owner"} | {};
.
#51:0
":match(string, object-list)";
"Return object in 'object-list' aliased to 'string'.";
"Matches on a wide variety of syntax, including:";
" \"5th axe\" -- The fifth object matching \"axe\" in the object list.";
" \"where's sai\" -- The only object contained in 'where' matching \"sai\" (possible $ambiguous_match).";
" \"where's second staff\" -- The second object contained in 'where' matching \"staff\".";
" \"my third dagger\" -- The third object in your inventory matching \"dagger\".";
"Ordinal matches are determined according to the match's position in 'object-list' or, if a possessive (such as \"where\" above) is given, then the ordinal is the nth match in that object's inventory.";
"In the matching room (#3879@LambdaMOO), the 'object-list' consists of first the player's contents, then the room's, and finally all exits leading from the room.";
{string, olist} = args;
if (!string)
return $nothing;
elseif (string == "me")
return player;
elseif (string == "here")
return player.location;
elseif (valid(object = $string_utils:literal_object(string)))
return object;
elseif (valid(object = $string_utils:match(string, olist, "aliases")))
return object;
elseif (parsed = this:parse_ordinal_reference(string))
return this:match_nth(parsed[2], olist, parsed[1]);
elseif (parsed = this:parse_possessive_reference(string))
{whostr, objstr} = parsed;
if (valid(whose = this:match(whostr, olist)))
return this:match(objstr, whose.contents);
else
return whose;
endif
else
return object;
endif
"Profane (#30788) - Sat Jan  3, 1998 - Changed so literals get returned ONLY if in the passed object list.";
"Profane (#30788) - Sat Jan  3, 1998 - OK, that broke lots of stuff, so changed it back.";
.
#51:1
":match_nth(string, objlist, n)";
"Find the nth object in 'objlist' that matches 'string'.";
{what, where, n} = args;
for v in (where)
z = 0;
for q in (v.aliases)
z = z || (index(q, what) == 1);
endfor
if (z && (!(n = n - 1)))
return v;
endif
endfor
return $failed_match;
.
#51:2
"$match_utils:match_verb(verbname, object) => Looks for a command-line style verb named <verbname> on <object> with current values of prepstr, dobjstr, dobj, iobjstr, and iobj.  If a match is made, the verb is called with @args[3] as arguments and 1 is returned.  Otherwise, 0 is returned.";
{vrb, what, rest} = args;
if (where = $object_utils:has_verb(what, vrb))
if ((vargs = verb_args(where[1], vrb)) != {"this", "none", "this"})
if (((((((vargs[2] == "any") || ((!prepstr) && (vargs[2] == "none"))) || index(("/" + vargs[2]) + "/", ("/" + prepstr) + "/")) && (((vargs[1] == "any") || ((!dobjstr) && (vargs[1] == "none"))) || ((dobj == what) && (vargs[1] == "this")))) && (((vargs[3] == "any") || ((!iobjstr) && (vargs[3] == "none"))) || ((iobj == what) && (vargs[3] == "this")))) && index(verb_info(where[1], vrb)[2], "x")) && verb_code(where[1], vrb))
set_task_perms(caller_perms());
what:(vrb)(@rest);
return 1;
endif
endif
endif
.
#51:3
":match_list(string, object_list) -> List of all matches.";
{what, where} = args;
if (!what)
return {};
endif
r = {};
for v in (where)
if (!(v in r))
z = 0;
for q in (v.aliases)
z = z || (q && (index(q, what) == 1));
endfor
if (z)
"r = listappend(r, v);";
r = {@r, v};
endif
endif
endfor
return r;
"Hydros (#106189) - Sun Jul 3, 2005 - Changed listappend to a splice to save ticks. Old code commented above.";
.
#51:4
":parse_ordref(string)";
"Parses strings referring to an 'nth' object.";
"=> {INT n, STR object} Where 'n' is the number the ordinal represents, and 'object' is the rest of the string.";
"=> 0 If the given string is not an ordinal reference.";
"  Example:";
":parse_ordref(\"second broadsword\") => {2, \"broadsword\"}";
":parse_ordref(\"second\") => 0";
"  Note that there must be more to the string than the ordinal alone.";
if (m = match(args[1], ("^" + this.ordinal_regexp) + " +%([^ ].+%)$"))
o = substitute("%1", m);
n = (o in this.ordn) || (o in this.ordw);
return n && {n, substitute("%2", m)};
else
return 0;
endif
.
#51:5
":parse_possessive_reference(string)";
"Parses strings in a possessive format.";
"=> {STR whose, STR object}  Where 'whose' is the possessor of 'object'.";
"If the string consists only of a possessive string (ie: \"my\", or \"yduJ's\"), then 'object' will be an empty string.";
"=> 0 If the given string is not a possessive reference.";
"  Example:";
":parse_possessive_reference(\"joe's cat\") => {\"joe\", \"cat\"}";
":parse_possessive_reference(\"sis' fish\") => {\"sis\", \"fish\"}";
"  Strings are returned as a value suitable for a :match routine, thus 'my' becoming 'me'.";
":parse_possessive_reference(\"my dog\") => {\"me\", \"dog\"}";
string = args[1];
if (m = match(string, "^my$%|^my +%(.+%)?"))
return {"me", substitute("%1", m)};
elseif (m = match(string, "^%(.+s?%)'s? *%(.+%)?"))
return {substitute("%1", m), substitute("%2", m)};
else
return 0;
endif
"Profane (#30788) - Sun Jun 21, 1998 - changed first parenthetical match bit from %([^ ]+s?%) to %(.+s?%)";
.
#51:6
"Usage: object_match_failed(object, string[, ambigs])";
"Prints a message if string does not match object.  Generally used after object is derived from a :match_object(string).";
"ambigs is an optional list of the objects that were matched upon.  If given, the message printed will list the ambiguous among them as choices.";
{match_result, string, ?ambigs = 0} = args;
tell = (0 && $perm_utils:controls(caller_perms(), player)) ? "notify" | "tell";
if ((index(string, "#") == 1) && ($code_utils:toobj(string) != E_TYPE))
"...avoid the `I don't know which `#-2' you mean' message...";
if (!valid(match_result))
player:(tell)(tostr("There is no \"", string, "\" that you can see."));
endif
return !valid(match_result);
elseif (match_result == $nothing)
player:(tell)("You must give the name of some object.");
elseif (match_result == $failed_match)
player:(tell)(tostr("There is no \"", string, "\" that you can see."));
elseif (match_result == $ambiguous_match)
if (typeof(ambigs) != LIST)
player:(tell)(tostr("I don't know which \"", string, "\" you mean."));
return 1;
endif
ambigs = $match_utils:match_list(string, ambigs);
ambigs = $list_utils:map_property(ambigs, "name");
if ((length($list_utils:remove_duplicates(ambigs)) == 1) && $object_utils:isa(player.location, this.matching_room))
player:(tell)(tostr("I don't know which \"", string, "\" you mean.  Try using \"first ", string, "\", \"second ", string, "\", etc."));
else
player:(tell)(tostr("I don't know which \"", string, "\" you mean: ", $string_utils:english_list(ambigs, "nothing", " or "), "."));
endif
return 1;
elseif (!valid(match_result))
player:(tell)(tostr("The object you specified does not exist.  Seeing ghosts?"));
else
return 0;
endif
return 1;
.
#51:7
if (caller_perms().wizard)
pass(@args);
this.matching_room = $nothing;
endif
.
#52:0
"Syntax:  has_property(OBJ, STR) => INT 0|1";
"";
"Does object have the specified property? Returns true if it is defined on the object or a parent.";
{object, prop} = args;
try
object.(prop);
return 1;
except (E_PROPNF, E_INVIND)
return 0;
endtry
"Old code...Ho_Yan 10/22/96";
if (prop in $code_utils.builtin_props)
return valid(object);
else
return !(!property_info(object, prop));
endif
.
#52:1
"Syntax:  all_properties (OBJ what)";
"         all_verbs      (OBJ what)";
"";
"Returns all properties or verbs defined on `what' and all of its ancestors. Uses wizperms to get properties or verbs if the caller of this verb owns what, otherwise, uses caller's perms.";
what = args[1];
if (what.owner != caller_perms())
set_task_perms(caller_perms());
endif
bif = (verb == "all_verbs") ? "verbs" | "properties";
res = `call_function(bif, what) ! E_PERM => {}';
while (valid(what = parent(what)))
res = {@`call_function(bif, what) ! E_PERM => {}', @res};
endwhile
return res;
.
#52:2
":has_verb(OBJ object, STR verbname)";
"Find out if an object has a verb matching the given verbname.";
"Returns {location} if so, 0 if not, where location is the object or the ancestor on which the verb is actually defined.";
{object, verbname} = args;
while (valid(object))
try
if (verb_info(object, verbname))
return {object};
endif
except (E_VERBNF)
object = parent(object);
endtry
endwhile
return 0;
"OLD CODE BELOW:";
while (E_VERBNF == (vi = `verb_info(object, verbname) ! E_VERBNF, E_INVARG'))
object = parent(object);
endwhile
return vi ? {object} | 0;
.
#52:3
"Usage:  has_callable_verb(object, verb)";
"See if an object has a verb that can be called by another verb (i.e., that has its x permission bit set).";
"Return {location}, where location is the object that defines the verb, or 0 if the object doesn't have the verb.";
{object, verbname} = args;
while (valid(object))
if (`index(verb_info(object, verbname)[2], "x") ! E_VERBNF => 0' && verb_code(object, verbname))
"Don't need to catch E_VERBNF in verb_code(), since it will never get there with the 0 &&";
return {object};
endif
object = parent(object);
endwhile
return 0;
.
#52:4
":match_verb(OBJ object, STR verb)";
"Find out if an object has a given verb, and some information about it.";
"Returns {OBJ location, STR verb} if matched, 0 if not.";
"Location is the object on which it is actually defined, verb is a name";
"for the verb which can subsequently be used in verb_info (i.e., no";
"asterisks).";
verbname = strsub(args[2], "*", "");
object = args[1];
while (E_VERBNF == (info = `verb_info(object, verbname) ! E_VERBNF, E_INVARG'))
object = parent(object);
endwhile
return info ? {object, verbname} | 0;
.
#52:5
":isa(x,y) == valid(x) && (y==x || y in :ancestors(x))";
{what, targ} = args;
while (valid(what))
if (what == targ)
return 1;
endif
what = parent(what);
endwhile
return 0;
.
#52:6
"Usage:  ancestors(object[, object...])";
"Return a list of all ancestors of the object(s) in args, with no duplicates.";
"If called with a single object, the result will be in order ascending up the inheritance hierarchy.  If called with multiple objects, it probably won't.";
ret = {};
for o in (args)
what = o;
while (valid(what = parent(what)))
ret = setadd(ret, what);
endwhile
endfor
return ret;
.
#52:7
r = {what = args[1]};
for k in (children(what))
if (children(k))
r = {@r, @this:(verb)(k)};
else
r = {@r, k};
endif
endfor
return r;
.
#52:8
"$object_utils:contains(obj1, obj2) -- does obj1 contain obj2?";
"";
"Return true iff obj2 is under obj1 in the containment hierarchy; that is, if obj1 is obj2's location, or its location's location, or ...";
{loc, what} = args;
while (valid(what))
what = what.location;
if (what == loc)
return valid(loc);
endif
endwhile
return 0;
.
#52:9
"all_contents(object)";
"Return a list of all objects contained (at some level) by object.";
for y in (res = args[1].contents)
y.contents && (res = {@res, @this:all_contents(y)});
endfor
return res;
.
#52:10
"findable_properties(object)";
"Return a list of properties on those members of object's ancestor list that are readable or are owned by the caller (or all properties if the caller is a wizard).";
what = args[1];
props = {};
who = caller_perms();
while (what != $nothing)
if ((what.r || (who == what.owner)) || who.wizard)
props = {@properties(what), @props};
endif
what = parent(what);
endwhile
return props;
.
#52:11
"owned_properties(what[, who])";
"Return a list of all properties on WHAT owned by WHO.";
"Only wizardly verbs can specify WHO; mortal verbs can only search for properties owned by their own owners.  For more information, talk to Gary_Severn.";
what = anc = args[1];
who = ((c = caller_perms()).wizard && (length(args) > 1)) ? args[2] | c;
props = {};
while (anc != $nothing)
for k in (properties(anc))
if (property_info(what, k)[1] == who)
props = listappend(props, k);
endif
endfor
anc = parent(anc);
endwhile
return props;
.
#52:12
":property_conflicts(object,newparent)";
"Looks for propertyname conflicts that would keep chparent(object,newparent)";
"  from working.";
"Returns a list of elements of the form {<propname>, @<objectlist>}";
"where <objectlist> is list of descendents of object defining <propname>.";
if (!valid(object = args[1]))
return E_INVARG;
elseif (!valid(newparent = args[2]))
return (newparent == #-1) ? {} | E_INVARG;
elseif (!($perm_utils:controls(caller_perms(), object) && (newparent.f || $perm_utils:controls(caller_perms(), newparent))))
"... if you couldn't chparent anyway, you don't need to know...";
return E_PERM;
endif
"... properties existing on newparent";
"... cannot be present on object or any descendent...";
props = conflicts = {};
for o in ({object, @$object_utils:descendents_suspended(object)})
for p in (properties(o))
if (`property_info(newparent, p) ! E_PROPNF => 0')
if (i = p in props)
conflicts[i] = {@conflicts[i], o};
else
props = {@props, p};
conflicts = {@conflicts, {p, o}};
endif
endif
$command_utils:suspend_if_needed(0);
endfor
$command_utils:suspend_if_needed(0);
endfor
return conflicts;
.
#52:13
":descendants_with_property_suspended(object,property)";
" => list of descendants of object on which property is defined.";
"calls suspend(0) as needed";
{object, prop} = args;
if ((caller == this) || (object.w || $perm_utils:controls(caller_perms(), object)))
$command_utils:suspend_if_needed(0);
if (`property_info(object, prop) ! E_PROPNF => 0')
return {object};
endif
r = {};
for c in (children(object))
r = {@r, @this:descendants_with_property_suspended(c, prop)};
endfor
return r;
else
return E_PERM;
endif
.
#52:14
"Usage:  locations(object)";
"Return a listing of the location hierarchy above object.";
ret = {};
what = args[1];
while (valid(what = what.location))
ret = {@ret, what};
endwhile
return ret;
.
#52:15
"Syntax:  all_properties_suspended (OBJ what)";
"         all_verbs_suspended      (OBJ what)";
"";
"Returns all properties or verbs defined on `what' and all of its ancestors. Uses wizperms to get properties or verbs if the caller of this verb owns what, otherwise, uses caller's perms. Suspends as necessary";
what = args[1];
if (what.owner != caller_perms())
set_task_perms(caller_perms());
endif
bif = (verb == "all_verbs_suspended") ? "verbs" | "properties";
res = `call_function(bif, what) ! E_PERM => {}';
while (valid(what = parent(what)))
res = {@`call_function(bif, what) ! E_PERM => {}', @res};
$command_utils:suspend_if_needed(0);
endwhile
return res;
.
#52:16
":connected(object) => true if object is a connected player.";
"equivalent to (object in connected_players()) for valid players, perhaps with less server overhead.";
"use object:is_listening() if you want to allow for puppets and other non-player objects that still 'care' about what's said.";
return typeof(`connected_seconds(@args) ! E_INVARG') == INT;
.
#52:17
":isoneof(x,y) = x isa z, for some z in list y";
{what, targ} = args;
while (valid(what))
if (what in targ)
return 1;
endif
what = parent(what);
endwhile
return 0;
.
#52:18
"Returns 1 if the verb is actually *defined* on this object, 0 else.";
"Use this instead of :has_verb if your aim is to manipulate that verb code or whatever.";
return `verb_info(@args) ! ANY => 0' && 1;
"Old code below...Ho_Yan 10/22/96";
info = verb_info(@args);
return typeof(info) != ERR;
.
#52:19
":defines_property(OBJ object, STR property name) => Returns 1 if the property is actually *defined* on the object given";
if (!valid(o = args[1]))
return 0;
elseif (!valid(p = parent(o)))
return this:has_property(o, args[2]);
else
return (!this:has_property(p, args[2])) && this:has_property(o, args[2]);
endif
.
#52:20
":has_any_verb(object) / :has_any_property(object)";
" -- does `object' have any verbs/properties?";
return !(!`(verb == "has_any_verb") ? verbs(args[1]) | properties(args[1]) ! E_INVARG => 0');
.
#52:21
":has_readable_property(OBJ object, STR property name) => 1 if property exists and is publically readable (has the r flag set true).";
{object, prop} = args;
try
pinfo = property_info(object, prop);
return index(pinfo[2], "r") != 0;
except (E_PROPNF)
return (prop in $code_utils.builtin_props) > 0;
endtry
.
#52:22
":descendants (OBJ object) => {OBJs} all nested children of <object>";
r = children(args[1]);
i = 1;
while (i <= length(r))
if (kids = children(r[i]))
r = {@r, @kids};
endif
i = i + 1;
endwhile
return r;
.
#52:23
":leaves (OBJ object) => {OBJs} descendants of <object> that have no children";
r = {args[1]};
i = 1;
while (i <= length(r))
if (kids = children(r[i]))
r[i..i] = kids;
else
i = i + 1;
endif
endwhile
return r;
.
#52:24
":branches (OBJ object) => {OBJs} descendants of <object> that have children";
r = args[1..1];
i = 1;
while (i <= length(r))
if (kids = children(r[i]))
r[i + 1..i] = kids;
i = i + 1;
else
r[i..i] = {};
endif
endwhile
return r;
.
#52:25
":descendants_suspended (OBJ object) => {OBJs} all nested children of <object>";
set_task_perms(caller_perms());
r = children(args[1]);
i = 1;
while (i <= length(r))
if (kids = children(r[i]))
r = {@r, @kids};
endif
i = i + 1;
$command_utils:suspend_if_needed(0);
endwhile
return r;
.
#52:26
":leaves_suspended (OBJ object) => {OBJs} descendants of <object> that have";
"                                         no children";
set_task_perms(caller_perms());
r = {args[1]};
i = 1;
while (i <= length(r))
if (kids = children(r[i]))
r[i..i] = kids;
else
i = i + 1;
endif
$command_utils:suspend_if_needed(0);
endwhile
return r;
.
#52:27
":branches_suspended (OBJ object) => {OBJs} all descendants of <object> that";
"                                           have children.";
set_task_perms(caller_perms());
r = args[1..1];
i = 1;
while (i <= length(r))
if (kids = children(r[i]))
r[i + 1..i] = kids;
i = i + 1;
else
r[i..i] = {};
endif
$command_utils:suspend_if_needed(0);
endwhile
return r;
.
#52:28
":disown(object) / :disinherit(object)";
" => 1 (for a successful disinheritance)";
" raises E_PERM, E_INVARG, E_ARGS";
cp = caller_perms();
"     no set_task_perms() because we need to be able to";
"     chparent() an object we don't own";
{victim} = args;
parent = parent(victim);
if ($perm_utils:controls(cp, victim))
raise(E_INVARG, tostr(victim.name, " (", victim, ") is yours.  Use @chparent."));
elseif (!valid(parent))
raise(E_INVARG, tostr(victim.name, " (", victim, ") is already an orphan."));
elseif (!$perm_utils:controls(cp, parent))
raise(E_PERM, tostr(parent.name, " (", parent, "), the parent of ", victim.name, " (", victim, "), is not yours."));
elseif (!valid(grandparent = parent(parent)))
"... still not sure about this... do we care?  --Rog...";
raise(E_INVARG, tostr(victim.name, " (", victim, ") has no grandparent to take custody."));
else
chparent(victim, grandparent);
return 1;
endif
.
#52:29
"  accessible_verbs(object)   => a list of verb names (or E_PERM) regardless of readability of object";
{thing} = args;
valid(thing) || raise(E_INVARG, "Invalid object argument");
{num_verbs, verbs} = {length(verbs(thing)), {}};
set_task_perms(caller_perms());
"... caching num of verbs before for loop saves us ticks ...";
for i in [1..num_verbs]
verbs = {@verbs, `verb_info(thing, i)[3] ! E_PERM'};
endfor
return verbs;
.
#52:30
" :accessible_props(object)   => a list of property names (or E_PERM), regardless of the readability of the object.";
thing = args[1];
all = properties(thing);
props = {};
set_task_perms(caller_perms());
for i in (all)
$command_utils:suspend_if_needed(0);
if ((info = `property_info(thing, i) ! ANY') != E_PROPNF)
props = {@props, info ? i | E_PERM};
endif
endfor
return props;
"Last modified Mon Nov 28 06:19:35 2005 PST, by Roebare (#109000).";
.
#53:0
this.input_string = args[1];
this.input_length = length(args[1]);
this.input_index = 1;
this.index_incremented = 0;
.
#53:1
string = this.input_string;
len = this.input_length;
i = this.input_index;
while ((i <= len) && (string[i] == " "))
i = i + 1;
endwhile
if (i > len)
this.index_incremented = 0;
return "";
elseif ((ch = string[i]) in {"(", ")", "!", "?"})
this.input_index = i + 1;
this.index_incremented = 1;
return ch;
elseif (ch in {"&", "|"})
this.input_index = i = i + 1;
this.index_incremented = 1;
if ((i <= len) && (string[i] == ch))
this.input_index = i + 1;
this.index_incremented = 2;
endif
return ch + ch;
else
start = i;
while ((i <= len) && (!((ch = string[i]) in {"(", ")", "!", "?", "&", "|"})))
i = i + 1;
endwhile
this.input_index = i;
i = i - 1;
while (string[i] == " ")
i = i - 1;
endwhile
this.index_incremented = (i - start) + 1;
return this:canonicalize_spaces(string[start..i]);
endif
.
#53:2
name = args[1];
while (index(name, "  "))
name = strsub(name, "  ", " ");
endwhile
return name;
.
#53:3
"parse_keyexp(STRING keyexpression, OBJ player) => returns a list containing the coded key, or a string containing an error message if the attempt failed.";
"";
"Grammar for key expressions:";
"";
"    E ::= A       ";
"       |  E || A  ";
"       |  E && A  ";
"    A ::= ( E )   ";
"       |  ! A     ";
"       |  object  ";
"       |  ? object  ";
this:init_scanner(args[1]);
this.player = args[2];
return this:parse_E();
.
#53:4
exp = this:parse_A();
if (typeof(exp) != STR)
while ((token = this:scan_token()) in {"&&", "||"})
rhs = this:parse_A();
if (typeof(rhs) == STR)
return rhs;
endif
exp = {token, exp, rhs};
endwhile
"The while loop above always eats a token. Reset it back so the iteration can find it again. Always losing `)'. Ho_Yan 3/9/95";
this.input_index = this.input_index - this.index_incremented;
endif
return exp;
.
#53:5
token = this:scan_token();
if (token == "(")
exp = this:parse_E();
if ((typeof(exp) != STR) && (this:scan_token() != ")"))
return "Missing ')'";
else
return exp;
endif
elseif (token == "!")
exp = this:parse_A();
if (typeof(exp) == STR)
return exp;
else
return {"!", exp};
endif
elseif (token == "?")
next = this:scan_token();
if (next in {"(", ")", "!", "&&", "||", "?"})
return ("Missing object-name before '" + token) + "'";
elseif (next == "")
return "Missing object-name at end of key expression";
else
what = this:match_object(next);
if (typeof(what) == OBJ)
return {"?", this:match_object(next)};
else
return what;
endif
endif
elseif (token in {"&&", "||"})
return ("Missing expression before '" + token) + "'";
elseif (token == "")
return "Missing expression at end of key expression";
else
return this:match_object(token);
endif
.
#53:6
"eval_key(LIST|OBJ coded key, OBJ testobject) => returns true if testobject will solve the provided key.";
{key, who} = args;
type = typeof(key);
if (!(type in {LIST, OBJ}))
return 1;
elseif (typeof(key) == OBJ)
return (who == key) || $object_utils:contains(who, key);
endif
op = key[1];
if (op == "!")
return !this:eval_key(key[2], who);
elseif (op == "?")
return key[2]:is_unlocked_for(who);
elseif (op == "&&")
return this:eval_key(key[2], who) && this:eval_key(key[3], who);
elseif (op == "||")
return this:eval_key(key[2], who) || this:eval_key(key[3], who);
else
raise(E_DIV);
endif
.
#53:7
"used by $lock_utils to unparse a key expression so one can use `here' and `me' as well as doing the regular object matching.";
token = args[1];
if (token == "me")
return this.player;
elseif (token == "here")
if (valid(this.player.location))
return this.player.location;
else
return ("'here' has no meaning where " + this.player.name) + " is";
endif
else
what = this.player.location:match_object(token);
if (what == $failed_match)
return ("Can't find an object named '" + token) + "'";
elseif (what == $ambiguous_match)
return ("Multiple objects named '" + token) + "'";
else
return what;
endif
endif
.
#53:8
":unparse_key(LIST|OBJ coded key) => returns a string describing the key in english/moo-code terms.";
"Example:";
"$lock_utils:unparse_key({\"||\", $hacker, $housekeeper}) => \"#18105[Hacker] || #36830[housekeeper]\"";
key = args[1];
type = typeof(key);
if (!(type in {LIST, OBJ}))
return "(None.)";
elseif (type == OBJ)
if (valid(key))
return tostr(key, "[", key.name, "]");
else
return tostr(key);
endif
else
op = key[1];
arg1 = this:unparse_key(key[2]);
if (op == "?")
return "?" + arg1;
elseif (op == "!")
if (typeof(key[2]) == LIST)
return ("!(" + arg1) + ")";
else
return "!" + arg1;
endif
elseif (op in {"&&", "||"})
other = (op == "&&") ? "||" | "&&";
lhs = arg1;
rhs = this:unparse_key(key[3]);
if ((typeof(key[2]) == OBJ) || (key[2][1] != other))
exp = lhs;
else
exp = ("(" + lhs) + ")";
endif
exp = ((exp + " ") + op) + " ";
if ((typeof(key[3]) == OBJ) || (key[3][1] != other))
exp = exp + rhs;
else
exp = ((exp + "(") + rhs) + ")";
endif
return exp;
else
raise(E_DIV);
endif
endif
.
#53:9
set_task_perms($no_one);
{key, who} = args;
type = typeof(key);
if (!(type in {LIST, OBJ}))
return 1;
elseif (typeof(key) == OBJ)
return (who == key) || $object_utils:contains(who, key);
endif
op = key[1];
if (op == "!")
return !this:eval_key(key[2], who);
elseif (op == "?")
return key[2]:is_unlocked_for(who);
elseif (op == "&&")
return this:eval_key(key[2], who) && this:eval_key(key[3], who);
elseif (op == "||")
return this:eval_key(key[2], who) || this:eval_key(key[3], who);
elseif (op == ".")
if ($object_utils:has_property(who, key[2]) && who.(key[2]))
return 1;
else
for thing in ($object_utils:all_contents(who))
if ($object_utils:has_property(thing, key[2]) && thing.(key[2]))
return 1;
endif
endfor
endif
return 0;
elseif (op == ":")
if ($object_utils:has_verb(who, key[2]) && who:(key[2])())
return 1;
else
for thing in ($object_utils:all_contents(who))
if ($object_utils:has_verb(thing, key[2]) && thing:(key[2])())
return 1;
endif
endfor
endif
return 0;
else
raise(E_DIV);
endif
.
#53:10
token = this:scan_token();
if (token == "(")
exp = this:parse_E();
if ((typeof(exp) != STR) && (this:scan_token() != ")"))
return "Missing ')'";
else
return exp;
endif
elseif (token == "!")
exp = this:parse_A();
if (typeof(exp) == STR)
return exp;
else
return {"!", exp};
endif
elseif (token == "?")
next = this:scan_token();
if (next in {":", ".", "(", ")", "!", "&&", "||", "?"})
return ("Missing object-name before '" + token) + "'";
elseif (next == "")
return "Missing object-name at end of key expression";
else
what = this:match_object(next);
if (typeof(what) == OBJ)
return {"?", this:match_object(next)};
else
return what;
endif
endif
elseif (token in {":", "."})
next = this:scan_token();
if (next in {":", ".", "(", ")", "!", "&&", "||", "?"})
return ("Missing verb-or-property-name before '" + token) + "'";
elseif (next == "")
return "Missing verb-or-property-name at end of key expression";
elseif (typeof(next) != STR)
return "Non-string verb-or-property-name at end of key expression";
else
return {token, next};
endif
elseif (token in {"&&", "||"})
return ("Missing expression before '" + token) + "'";
elseif (token == "")
return "Missing expression at end of key expression";
else
return this:match_object(token);
endif
.
#54:0
who = valid(caller_perms()) ? caller_perms() | player;
if ($perm_utils:controls(who, this) || this:is_readable_by(who))
result = this:do_burn();
else
result = 0;
endif
player:tell(result ? this:burn_succeeded_msg() | this:burn_failed_msg());
if (msg = result ? this:oburn_succeeded_msg() | this:oburn_failed_msg())
player.location:announce(player.name, " ", msg);
endif
.
#54:1
return (msg = this.(verb)) ? $string_utils:pronoun_sub(msg) | "";
.
#54:2
if ((this != $letter) && ((caller == this) || $perm_utils:controls(caller_perms(), this)))
fork (0)
$recycler:_recycle(this);
endfork
return 1;
else
return E_PERM;
endif
.
#55:0
":make(n[,elt]) => a list of n elements, each of which == elt. elt defaults to 0.";
{n, ?elt = 0} = args;
if (n < 0)
return E_INVARG;
endif
ret = {};
build = {elt};
while (1)
if (n % 2)
ret = {@ret, @build};
endif
if (n = n / 2)
build = {@build, @build};
else
return ret;
endif
endwhile
.
#55:1
":range([m,]n) => {m,m+1,...,n}";
{?m = 1, n} = args;
ret = {};
for k in [m..n]
ret = {@ret, k};
endfor
return ret;
.
#55:2
set_task_perms(caller_perms());
{objs, prop} = args;
if (length(objs) > 50)
return {@this:map_prop(objs[1..$ / 2], prop), @this:map_prop(objs[($ / 2) + 1..$], prop)};
endif
strs = {};
for foo in (objs)
strs = {@strs, foo.(prop)};
endfor
return strs;
.
#55:3
set_task_perms(caller_perms());
{objs, vrb, @rest} = args;
if (length(objs) > 50)
return {@this:map_verb(@listset(args, objs[1..$ / 2], 1)), @this:map_verb(@listset(args, objs[($ / 2) + 1..$], 1))};
endif
strs = {};
for o in (objs)
strs = {@strs, o:(vrb)(@rest)};
endfor
return strs;
.
#55:4
"map_arg([n,]object,verb,@args) -- assumes the nth element of args is a list, calls object:verb(@args) with each element of the list substituted in turn, returns the list of results.  n defaults to 1.";
"map_verb_arg(o,v,{a...},a2,a3,a4,a5)={o:v(a,a2,a3,a4,a5),...}";
"map_verb_arg(4,o,v,a1,a2,a3,{a...},a5)={o:v(a1,a2,a3,a,a5),...}";
set_task_perms(caller_perms());
if (n = args[1])
{object, verb, @rest} = args[2..$];
else
object = n;
n = 1;
{verb, @rest} = args[2..$];
endif
results = {};
for a in (rest[n])
results = listappend(results, object:(verb)(@listset(rest, a, n)));
endfor
return results;
.
#55:5
":map_builtin(objectlist,func) applies func to each of the objects in turn and returns the corresponding list of results.  This function is mainly here for completeness -- in the vast majority of situations, a simple for loop is better.";
set_task_perms(caller_perms());
{objs, builtin} = args;
if (!`function_info(builtin) ! E_INVARG => 0')
return E_INVARG;
endif
if (length(objs) > 100)
return {@this:map_builtin(objs[1..$ / 2], builtin), @this:map_builtin(objs[($ / 2) + 1..$], builtin)};
endif
strs = {};
for foo in (objs)
strs = {@strs, call_function(builtin, foo)};
endfor
return strs;
.
#55:6
"find_insert(sortedlist,key) => index of first element in sortedlist > key";
"  sortedlist is assumed to be sorted in increasing order and the number returned is anywhere from 1 to length(sortedlist)+1, inclusive.";
{lst, key} = args;
if ((r = length(lst)) < 25)
for l in [1..r]
if (lst[l] > key)
return l;
endif
endfor
return r + 1;
else
l = 1;
while (r >= l)
if (key < lst[i = (r + l) / 2])
r = i - 1;
else
l = i + 1;
endif
endwhile
return l;
endif
.
#55:7
"remove_duplicates(list) => list as a set, i.e., all repeated elements removed.";
out = {};
for x in (args[1])
out = setadd(out, x);
endfor
return out;
.
#55:8
"arrayset(list,value,pos1,...,posn) -- returns list modified such that";
"  list[pos1][pos2][...][posn] == value";
if (length(args) > 3)
return listset(@listset(args[1..3], this:arrayset(@listset(listdelete(args, 3), args[1][args[3]], 1)), 2));
"... Rog's entry in the Obfuscated MOO-Code Contest...";
else
return listset(@args);
endif
.
#55:9
":setremove_all(set,elt) => set with *all* occurences of elt removed";
{set, what} = args;
while (w = what in set)
set[w..w] = {};
endwhile
return set;
.
#55:10
"append({a,b,c},{d,e},{},{f,g,h},...) =>  {a,b,c,d,e,f,g,h}";
if (length(args) > 50)
return {@this:append(@args[1..$ / 2]), @this:append(@args[($ / 2) + 1..$])};
endif
l = {};
for a in (args)
l = {@l, @a};
endfor
return l;
.
#55:11
"reverse(list) => reversed list";
return this:_reverse(@args[1]);
.
#55:12
":_reverse(@list) => reversed list";
if (length(args) > 50)
return {@this:_reverse(@args[($ / 2) + 1..$]), @this:_reverse(@args[1..$ / 2])};
endif
l = {};
for a in (args)
l = listinsert(l, a);
endfor
return l;
.
#55:13
"compress(list) => list with consecutive repeated elements removed, e.g.,";
"compress({a,b,b,c,b,b,b,d,d,e}) => {a,b,c,b,d,e}";
if (l = args[1])
out = {last = l[1]};
for x in (listdelete(l, 1))
if (x != last)
out = listappend(out, x);
last = x;
endif
endfor
return out;
else
return l;
endif
.
#55:14
"sort(list[,keys]) => sorts keys (assumed to be all numbers or strings) and returns list with the corresponding permutation applied to it.  keys defaults to the list itself.";
"sort({x1,x3,x2},{1,3,2}) => {x1,x2,x3}";
lst = args[1];
unsorted_keys = (use_sorted_lst = length(args) >= 2) ? args[2] | lst;
sorted_lst = sorted_keys = {};
for e in (unsorted_keys)
l = this:find_insert(sorted_keys, e);
sorted_keys = listinsert(sorted_keys, e, l);
if (use_sorted_lst)
sorted_lst = listinsert(sorted_lst, lst[length(sorted_keys)], l);
endif
endfor
return sorted_lst || sorted_keys;
.
#55:15
":sort_suspended(interval,list[,keys]) => sorts keys (assumed to be all numbers or strings) and returns list with the corresponding permutation applied to it.  keys defaults to the list itself.";
"does suspend(interval) as needed.";
set_task_perms(caller_perms());
interval = args[1];
if (typeof(interval) != INT)
return E_ARGS;
endif
lst = args[2];
unsorted_keys = (use_sorted_lst = length(args) >= 3) ? args[3] | lst;
sorted_lst = sorted_keys = {};
for e in (unsorted_keys)
l = this:find_insert(sorted_keys, e);
sorted_keys[l..l - 1] = {e};
if (use_sorted_lst)
sorted_lst[l..l - 1] = {lst[length(sorted_keys)]};
endif
$command_utils:suspend_if_needed(interval);
endfor
return sorted_lst || sorted_keys;
.
#55:16
"slice(alist[,index]) returns a list of the index-th elements of the elements of alist, e.g., ";
"    slice({{\"z\",1},{\"y\",2},{\"x\",5}},2) => {1,2,5}.";
"index defaults to 1 and may also be a nonempty list, e.g., ";
"    slice({{\"z\",1,3},{\"y\",2,4}},{2,1}) => {{1,\"z\"},{2,\"y\"}}";
{thelist, ?ind = 1} = args;
slice = {};
if (typeof(ind) == LIST)
for elt in (thelist)
s = {elt[ind[1]]};
for i in (listdelete(ind, 1))
s = {@s, elt[i]};
endfor
slice = {@slice, s};
endfor
else
for elt in (thelist)
slice = {@slice, elt[ind]};
endfor
endif
return slice;
.
#55:17
"assoc(target,list[,index]) returns the first element of `list' whose own index-th element is target.  Index defaults to 1.";
"returns {} if no such element is found";
{target, thelist, ?indx = 1} = args;
for t in (thelist)
if ((typeof(t) == LIST) && `t[indx] == target ! E_RANGE => 0')
return t;
endif
endfor
return {};
.
#55:18
"Copied from Moo_tilities (#332):iassoc by Mooshie (#106469) Wed Mar 18 19:27:51 1998 PST";
"Usage: iassoc(ANY target, LIST list [, INT index ]) => Returns the index of the first element of `list' whose own index-th element is target.  Index defaults to 1.";
"Returns 0 if no such element is found.";
{target, thelist, ?indx = 1} = args;
for element in (thelist)
if (`element[indx] == target ! E_RANGE, E_TYPE => 0')
if (typeof(element) == LIST)
return element in thelist;
endif
endif
endfor
return 0;
.
#55:19
"Copied from Moo_tilities (#332):iassoc_suspended by Mooshie (#106469) Wed Mar 18 19:27:53 1998 PST";
"Usage: iassoc_suspended(ANY target, LIST list [, INT index [, INT suspend-for ]]) => Returns the index of the first element of `list' whose own index-th element is target. Index defaults to 1.";
"Returns 0 if no such element is found.";
"Suspends as needed. Suspend length defaults to 0.";
set_task_perms(caller_perms());
{target, thelist, ?indx = 1, ?suspend_for = 0} = args;
cu = $command_utils;
for element in (thelist)
if (`element[indx] == target ! E_RANGE, E_TYPE => 0' && (typeof(element) == LIST))
return element in thelist;
endif
cu:suspend_if_needed(suspend_for);
endfor
return 0;
"Mooshie (#106469) - Tue Feb 10, PST - :assoc_suspended does a set_task_perms, why shouldn't this?";
.
#55:20
"assoc_prefix(target,list[,index]) returns the first element of `list' whose own index-th element has target as a prefix.  Index defaults to 1.";
{target, thelist, ?indx = 1} = args;
for t in (thelist)
if ((typeof(t) == LIST) && ((length(t) >= indx) && (index(t[indx], target) == 1)))
return t;
endif
endfor
return {};
.
#55:21
"iassoc_prefix(target,list[,index]) returns the index of the first element of `list' whose own index-th element has target as a prefix.  Index defaults to 1.";
{target, lst, ?indx = 1} = args;
for i in [1..length(lst)]
if ((typeof(lsti = lst[i]) == LIST) && ((length(lsti) >= indx) && (index(lsti[indx], target) == 1)))
return i;
endif
endfor
return 0;
.
#55:22
"iassoc_sorted(target,sortedlist[,i]) => index of last element in sortedlist whose own i-th element is <= target.  i defaults to 1.";
"  sortedlist is assumed to be sorted in increasing order and the number returned is anywhere from 0 to length(sortedlist), inclusive.";
{target, lst, ?indx = 1} = args;
if ((r = length(lst)) < 25)
for l in [1..r]
if (target < lst[l][indx])
return l - 1;
endif
endfor
return r;
else
l = 0;
r = r + 1;
while ((r - 1) > l)
if (target < lst[i = (r + l) / 2][indx])
r = i;
else
l = i;
endif
endwhile
return l;
endif
.
#55:23
":sort_alist(alist[,n]) sorts a list of tuples by n-th (1st) element.";
{alist, ?sort_on = 1} = args;
if ((alist_length = length(alist)) < 25)
"use insertion sort on short lists";
return this:sort(alist, this:slice(@args));
endif
left_index = alist_length / 2;
right_index = (alist_length + 1) / 2;
left_sublist = this:sort_alist(alist[1..left_index], sort_on);
right_sublist = this:sort_alist(alist[left_index + 1..alist_length], sort_on);
"...";
"... merge ...";
"...";
left_key = left_sublist[left_index][sort_on];
right_key = right_sublist[right_index][sort_on];
if (left_key > right_key)
merged_list = {};
else
"... alist_length >= 25 implies right_index >= 2...";
"... move right_index downward until left_key > right_key...";
r = right_index - 1;
while (left_key <= (right_key = right_sublist[r][sort_on]))
if (r = r - 1)
else
return {@left_sublist, @right_sublist};
endif
endwhile
merged_list = right_sublist[r + 1..right_index];
right_index = r;
endif
while (l = left_index - 1)
"... left_key > right_key ...";
"... move left_index downward until left_key <= right_key...";
while ((left_key = left_sublist[l][sort_on]) > right_key)
if (l = l - 1)
else
return {@right_sublist[1..right_index], @left_sublist[1..left_index], @merged_list};
endif
endwhile
merged_list[1..0] = left_sublist[l + 1..left_index];
left_index = l;
"... left_key <= right_key ...";
if (r = right_index - 1)
"... move right_index downward until left_key > right_key...";
while (left_key <= (right_key = right_sublist[r][sort_on]))
if (r = r - 1)
else
return {@left_sublist[1..left_index], @right_sublist[1..right_index], @merged_list};
endif
endwhile
merged_list[1..0] = right_sublist[r + 1..right_index];
right_index = r;
else
return {@left_sublist[1..left_index], right_sublist[1], @merged_list};
endif
endwhile
return {@right_sublist[1..right_index], left_sublist[1], @merged_list};
.
#55:24
"sort_alist_suspended(interval,alist[,n]) sorts a list of tuples by n-th element.  n defaults to 1.  Calls suspend(interval) as necessary.";
set_task_perms(caller_perms());
"... so it can be killed...";
{interval, alist, ?sort_on = 1} = args;
if ((alist_length = length(alist)) < 10)
"insertion sort on short lists";
$command_utils:suspend_if_needed(interval);
return this:sort(alist, this:slice(@listdelete(args, 1)));
endif
"variables specially expanded for the anal-retentive";
left_index = alist_length / 2;
right_index = (alist_length + 1) / 2;
left_sublist = this:sort_alist_suspended(interval, alist[1..left_index], sort_on);
right_sublist = this:sort_alist_suspended(interval, alist[left_index + 1..alist_length], sort_on);
left_element = left_sublist[left_index];
right_element = right_sublist[right_index];
merged_list = {};
while (1)
$command_utils:suspend_if_needed(interval);
if (left_element[sort_on] > right_element[sort_on])
merged_list = {left_element, @merged_list};
if (left_index = left_index - 1)
left_element = left_sublist[left_index];
else
return {@right_sublist[1..right_index], @merged_list};
endif
else
merged_list = {right_element, @merged_list};
if (right_index = right_index - 1)
right_element = right_sublist[right_index];
else
return {@left_sublist[1..left_index], @merged_list};
endif
endif
endwhile
.
#55:25
":randomly_permute(list) => list with its elements randomly permuted";
"  each of the length(list)! possible permutations is equally likely";
plist = {};
for i in [1..length(ulist = args[1])]
plist = listinsert(plist, ulist[i], random(i));
endfor
return plist;
.
#55:26
"$list_utils:count(item, list)";
"Returns the number of occurrences of item in list.";
{x, xlist} = args;
if (typeof(xlist) != LIST)
return E_INVARG;
endif
counter = 0;
while (loc = x in xlist)
counter = counter + 1;
xlist = xlist[loc + 1..$];
endwhile
return counter;
.
#55:27
"Copied from $quinn_utils (#34283):unroll by Quinn (#19845) Mon Mar  8 09:29:03 1993 PST";
":flatten(LIST list_of_lists) => LIST of all lists in given list `flattened'";
newlist = {};
for elm in (args[1])
if (typeof(elm) == LIST)
newlist = {@newlist, @this:flatten(elm)};
else
newlist = {@newlist, elm};
endif
endfor
return newlist;
.
#55:28
"Copied from APHiD (#33119):longest Sun May  9 21:00:18 1993 PDT";
"$list_utils:longest(<list>)";
"$list_utils:shortest(<list>)";
"             - Returns the shortest or longest element in the list.  Elements may be either strings or lists.  Returns E_TYPE if passed a non-list or a list containing non-string/list elements.  Returns E_RANGE if passed an empty list.";
if (typeof(all = args[1]) != LIST)
return E_TYPE;
elseif (all == {})
return E_RANGE;
else
result = all[1];
for things in (all)
if ((typeof(things) != LIST) && (typeof(things) != STR))
return E_TYPE;
else
result = (((verb == "longest") && (length(result) < length(things))) || ((verb == "shortest") && (length(result) > length(things)))) ? things | result;
endif
endfor
endif
return result;
.
#55:29
"check_nonstring_tell_lines(lines)";
if (caller_perms().wizard)
"don't let a nonwizard mess up our stats";
for line in (args[1])
if (typeof(line) != STR)
this.nonstring_tell_lines = listappend(this.nonstring_tell_lines, callers());
return;
endif
endfor
endif
.
#55:30
"reverse(list) => reversed list.  Does suspend(0) as necessary.";
set_task_perms(caller_perms());
"^^^For suspend task.";
return this:_reverse_suspended(@args[1]);
.
#55:31
":_reverse(@list) => reversed list";
set_task_perms(caller_perms());
$command_utils:suspend_if_needed(0);
if (length(args) > 50)
return {@this:_reverse_suspended(@args[($ / 2) + 1..$]), @this:_reverse_suspended(@args[1..$ / 2])};
endif
l = {};
for a in (args)
l = listinsert(l, a);
endfor
return l;
.
#55:32
":randomly_permute_suspended(list) => list with its elements randomly permuted";
"  each of the length(list)! possible permutations is equally likely";
set_task_perms(caller_perms());
plist = {};
for i in [1..length(ulist = args[1])]
plist = listinsert(plist, ulist[i], random(i));
$command_utils:suspend_if_needed(0);
endfor
return plist;
.
#55:33
"swap_elements -- exchange two elements in a list";
"Usage:  $list_utils:swap_elements(<list/LIST>,<index/INT>,<index/INT>)";
"        $list_utils:swap_elements({\"a\",\"b\"},1,2);";
{l, i, j} = args;
if (((typeof(l) == LIST) && (typeof(i) == INT)) && (typeof(j) == INT))
ll = length(l);
if (((i > 0) && (i <= ll)) && ((j > 0) && (j <= ll)))
t = l[i];
l[i] = l[j];
l[j] = t;
return l;
else
return E_RANGE;
endif
else
return E_TYPE;
endif
.
#55:34
"random_item -- returns a random element of the input list.";
if (length(args) == 1)
if (typeof(l = args[1]) == LIST)
if (length(l) > 0)
return l[random($)];
else
return E_RANGE;
endif
else
return E_TYPE;
endif
else
return E_ARGS;
endif
.
#55:35
"Copied from Moo_tilities (#332):assoc_suspended by Mooshie (#106469) Wed Mar 18 19:27:54 1998 PST";
"Usage: assoc_suspended(ANY target, LIST list [, INT index [, INT suspend-for ])) => Returns the first element of `list' whose own index-th element is target.  Index defaults to 1.";
"Returns {} if no such element is found.";
"Suspends as necessary. Suspend length defaults to 0.";
set_task_perms(caller_perms());
{target, thelist, ?indx = 1, ?suspend_for = 0} = args;
cu = $command_utils;
for t in (thelist)
if (`t[indx] == target ! E_TYPE => 0')
if ((typeof(t) == LIST) && (length(t) >= indx))
return t;
endif
endif
cu:suspend_if_needed(suspend_for);
endfor
return {};
.
#55:36
"Copied from Uther's_Ghost (#93141):amerge Tue May 27 20:28:18 1997 PDT";
"amerge(list[,tindex[,dindex]]) returns an associated list such that all the tuples in the original list with the same tindex-th element are merged. Useful for merging alists ( amerge({@alist1, @alist2, ...}) ) and for ensuring that each tuple has a unique index. Tindex defaults to 1. Dindex defaults to 1 and refers to the position in the tuple where the tindex-th element will land in the new tuple.";
{alist, ?tidx = 1, ?didx = 1} = args;
if (alist)
alist = this:sort_alist(alist, tidx);
i = 1;
res = {{cur = alist[1][tidx]}};
for tuple in (alist)
if (tuple[tidx] == cur)
res[i] = {@res[i], @listdelete(tuple, tidx)};
else
if (didx != 1)
res[i] = this:swap_elements(res[i], 1, min(didx, length(res[i])));
endif
i = i + 1;
res = {@res, {cur = tuple[tidx], @listdelete(tuple, tidx)}};
endif
endfor
return res;
endif
return alist;
.
#55:37
"passoc -- essentially a hashtable lookup for parallel lists.  Parallel lists are an efficient way to store and access key/value pairs.";
"Usage:  $list_utils:passoc(<key>,<key-list>,<value-list>)";
"        avalue=$list_utils:passoc(\"akey\",keys,values)";
return args[3][args[1] in args[2]];
.
#55:38
"Copied from Moo_tilities (#332):setmove by Mooshie (#106469) Mon Sep 22 21:07:25 1997 PDT";
"Usage: setmove(LIST elements, INT from, INT to)";
"Moves element in list from one position in list to another.";
"";
"Example: setmove({x, y, z}, 1, 3) => {y, z, x}";
"         setmove({x, y, z}, 2, 1} => {y, x, z}";
{start, from, to} = args;
what = start[from];
return listinsert(listdelete(start, from), what, to);
"  Written by Mooshie (#106469) @ Lambda - Mon Sep 22 21:03:26 1997 PDT -  ";
.
#55:39
"Copied from Moo_tilities (#332):iassoc_new by Mooshie (#106469) Wed Mar 18 19:27:52 1998 PST";
"Usage: iassoc_new(ANY target, LIST list [, INT index ]) => Returns the index of the first element of `list' whose own index-th element is target.  Index defaults to 1.";
"Returns 0 if no such element is found.";
"NOTE: expects that each index in the given list will be a list with at least as many elements as the indicated `index' argument. Otherwise will return E_RANGE";
{target, thelist, ?indx = 1} = args;
try
for element in (thelist)
if (element[indx] == target)
if (typeof(element) == LIST)
return element in thelist;
endif
endif
endfor
except e (ANY)
return e[1];
endtry
return 0;
.
#55:40
"Syntax:  build_alist(list, N) =>";
"{list[1..N], list[N+1..N*2], list[N*2+1..N*3], ..., list[N*(N-1)+1..N*N]}";
"";
"Creates an associated list from a flat list at every Nth interval. If the list doesn't have a multiple of N elements, E_RANGE is returned.";
"Example:  build_alist({a,b,c,d,e,f,g,h,i},3)=>{{a,b,c},{d,e,f},{g,h,i}}";
{olist, interval} = args;
if ((tot = length(olist)) % interval)
return E_RANGE;
endif
nlist = {};
d = 1;
while (d <= tot)
nlist = {@nlist, olist[1..interval]};
olist[1..interval] = {};
d = d + interval;
endwhile
return nlist;
.
#55:41
"Copied from list utilities (#372):flatten [verb author Hacker (#18105)] at Sun Jul  3 07:46:47 2011 PDT";
"Copied from $quinn_utils (#34283):unroll by Quinn (#19845) Mon Mar  8 09:29:03 1993 PST";
":flatten(LIST list_of_lists) => LIST of all lists in given list `flattened'";
newlist = {};
for elm in (args[1])
if (typeof(elm) == LIST)
$command_utils:suspend_if_needed(0);
newlist = {@newlist, @this:flatten_suspended(elm)};
else
$command_utils:suspend_if_needed(0);
newlist = {@newlist, elm};
endif
endfor
return newlist;
.
#56:0
"Usage: object_match_failed(object, string)";
"Prints a message if string does not match object.  Generally used after object is derived from a :match_object(string).";
{match_result, string} = args;
tell = $perm_utils:controls(caller_perms(), player) ? "notify" | "tell";
if ((index(string, "#") == 1) && ($code_utils:toobj(string) != E_TYPE))
"...avoid the `I don't know which `#-2' you mean' message...";
if (!valid(match_result))
player:(tell)(tostr(string, " does not exist."));
endif
return !valid(match_result);
elseif (match_result == $nothing)
player:(tell)("You must give the name of some object.");
elseif (match_result == $failed_match)
player:(tell)(tostr("I see no \"", string, "\" here."));
elseif (match_result == $ambiguous_match)
player:(tell)(tostr("I don't know which \"", string, "\" you mean."));
elseif (!valid(match_result))
player:(tell)(tostr(match_result, " does not exist."));
else
return 0;
endif
return 1;
.
#56:1
":player_match_failed(result,string)";
"  is exactly like :object_match_failed(result,string)";
"  except that its messages are more suitable for player searches.";
":player_match_result(results,strings)";
"  handles a list of results, also presumably from $string_utils:match_player(strings), printing messages to player for *each* of the nonmatching strings.  It returns a list, an overall result (true if some string didn't match --- just like player_match_failed), followed by the list players that matched.";
"";
"An optional 3rd arg gives an identifying string to prefix to each of the nasty messages.";
if (valid(player))
tell = $perm_utils:controls(caller_perms(), player) ? "notify" | "tell";
plyr = player;
else
tell = "notify";
plyr = $login;
endif
"...";
{match_results, strings, ?cmdid = ""} = args;
pmf = verb == "player_match_failed";
if (typeof(match_results) == OBJ)
match_results = {match_results};
strings = {strings};
endif
pset = {};
bombed = 0;
for i in [1..length(match_results)]
if (valid(result = match_results[i]))
pset = setadd(pset, match_results[i]);
elseif (result == $nothing)
"... player_match_result quietly skips over blank strings";
if (pmf)
plyr:(tell)("You must give the name of some player.");
bombed = 1;
endif
elseif (result == $failed_match)
plyr:(tell)(tostr(cmdid, "\"", strings[i], "\" is not the name of any player."));
bombed = 1;
elseif (result == $ambiguous_match)
lst = $player_db:find_all(strings[i]);
plyr:(tell)(tostr(cmdid, "\"", strings[i], "\" could refer to ", (length(lst) > 20) ? tostr("any of ", length(lst), " players") | $string_utils:english_list($list_utils:map_arg(2, $string_utils, "pronoun_sub", "%n (%#)", lst), "no one", " or "), "."));
bombed = 1;
else
plyr:(tell)(tostr(result, " does not exist."));
bombed = 1;
endif
endfor
if ((!bombed) && (!pset))
"If there were NO valid results, but not any actual 'error', fail anyway.";
plyr:(tell)("You must give the name of some player.");
bombed = 1;
endif
return pmf ? bombed | {bombed, @pset};
.
#56:2
"$command_utils:read() -- read a line of input from the player and return it";
"Optional argument is a prompt portion to replace `a line of input' in the prompt.";
"";
"Returns E_PERM if the current task is not the most recent task spawned by a command from player.";
{?prompt = "a line of input"} = args;
c = callers();
p = c[$][5];
p:notify(tostr("[Type ", prompt, " or `@abort' to abort the command.]"));
try
ans = read();
if ($string_utils:trim(ans) == "@abort")
p:notify(">> Command Aborted <<");
kill_task(task_id());
endif
return ans;
except error (ANY)
return error[1];
endtry
.
#56:3
"$command_utils:read_lines([max]) -- read zero or more lines of input";
"";
"Returns a list of strings, the (up to MAX, if given) lines typed by the player.  Returns E_PERM if the current task is not a command task that has never called suspend().";
"In order that one may enter arbitrary lines, including \"@abort\" or \".\", if the first character in an input line is `.' and there is some nonwhitespace afterwords, the `.' is dropped and the rest of the line is taken verbatim, so that, e.g., \".@abort\" enters as \"@abort\" and \"..\" enters as \".\".";
{?max = 0} = args;
c = callers();
p = c[$][5];
p:notify(tostr("[Type", max ? tostr(" up to ", max) | "", " lines of input; use `.' to end or `@abort' to abort the command.]"));
ans = {};
while (1)
try
line = read();
if ((line[1..min(6, $)] == "@abort") && ((tail = line[7..$]) == $string_utils:space(tail)))
p:notify(">> Command Aborted <<");
kill_task(task_id());
elseif ((!line) || (line[1] != "."))
ans = {@ans, line};
elseif ((tail = line[2..$]) == $string_utils:space(tail))
return ans;
else
ans = {@ans, tail};
endif
if (max && (length(ans) >= max))
return ans;
endif
except error (ANY)
return error[1];
endtry
endwhile
.
#56:4
":yes-or-no([prompt]) -- prompts the player for a yes or no answer and returns a true value iff the player enters a line of input that is some prefix of \"yes\"";
"";
"Returns E_NONE if the player enters a blank line, E_INVARG, if the player enters something that isn't a prefix of \"yes\" or \"no\", and E_PERM if the current task is not a command task that has never called suspend().";
c = callers();
p = c[$][5];
p:notify(tostr(args ? args[1] + " " | "", "[Enter `yes' or `no']"));
try
ans = read(@((caller == p) || $perm_utils:controls(caller_perms(), p)) ? {p} | {});
if (ans = $string_utils:trim(ans))
if (ans == "@abort")
p:notify(">> Command Aborted <<");
kill_task(task_id());
endif
return (index("yes", ans) == 1) || ((index("no", ans) != 1) && E_INVARG);
else
return E_NONE;
endif
except error (ANY)
return error[1];
endtry
.
#56:5
"$command_utils:read_lines_escape(escapes[,help]) -- read zero or more lines of input";
"";
"Similar to :read_lines() except that help is available and one may specify other escape sequences to terminate the read.";
"  escapes should be either a string or list of strings; this specifies which inputs other from `.' or `@abort' should terminate the read (... don't use anything beginning with a `.').";
"  help should be a string or list of strings to be printed in response to the player typing `?'; the first line of the help text should be a general comment about what the input text should be used for.  Successive lines should describe the effects of the alternative escapes.";
"Returns {end,list-of-strings-input} where end is the particular line that terminated this input or 0 if input terminated normally with `.'.  Returns E_PERM if the current task is not a command task that has never called suspend().  ";
"@abort and lines beginning with `.' are treated exactly as with :read_lines()";
{escapes, ?help = "You are currently in a read loop."} = args;
c = callers();
p = c[$][5];
escapes = {".", "@abort", @(typeof(escapes) == LIST) ? escapes | {escapes}};
p:notify(tostr("[Type lines of input; `?' for help; end with `", $string_utils:english_list(escapes, "", "' or `", "', `", ""), "'.]"));
ans = {};
escapes[1..0] = {"?"};
"... set up the help text...";
if (typeof(help) != LIST)
help = {help};
endif
help[2..1] = {"Type `.' on a line by itself to finish.", "Anything else with a leading period is entered with the period removed.", "Type `@abort' to abort the command completely."};
while (1)
try
line = read();
if ((trimline = $string_utils:trimr(line)) in escapes)
if (trimline == ".")
return {0, ans};
elseif (trimline == "@abort")
p:notify(">> Command Aborted <<");
kill_task(task_id());
elseif (trimline == "?")
p:notify_lines(help);
else
return {trimline, ans};
endif
else
if (line && (line[1] == "."))
line[1..1] = "";
endif
ans = {@ans, line};
endif
except error (ANY)
return error[1];
endtry
endwhile
.
#56:6
"Suspend, using output_delimiters() in case a client needs to keep track";
"of the output of the current command.";
"Args are TIME, amount of time to suspend, and optional (misnamed) OUTPUT.";
"If given no OUTPUT, just do a suspend.";
"If OUTPUT is neither list nor string, suspend and return output_delimiters";
"If OUTPUT is a list, it should be in the output_delimiters() format:";
"  {PREFIX, SUFFIX}.  Use these to handle that client stuff.";
"If OUTPUT is a string, it should be SUFFIX (output_delimiters[2])";
"";
"Proper usage:";
"The first time you want to suspend, use";
"  output_delimiters = $command_utils:suspend(time, x);";
"where x is some non-zero number.";
"Following, use";
"  $command_utils:suspend(time, output_delimiters);";
"To wrap things up, use";
"  $command_utils:suspend(time, output_delimiters[2]);";
"You'll probably want time == 0 most of the time.";
"Note: Using this from verbs called by other verbs could get pretty weird.";
{time, ?output = 0} = args;
set_task_perms(caller_perms());
value = 0;
if (!output)
suspend(time);
else
if (typeof(output) == LIST)
PREFIX = output[1];
SUFFIX = output[2];
if (PREFIX)
player:tell(output[2]);
endif
suspend(time);
if (SUFFIX)
player:tell(output[1]);
endif
elseif (typeof(output) == STR)
if (output)
player:tell(output);
endif
else
output = output_delimiters(player);
suspend(time);
if (output != {"", ""})
player:tell(output[1]);
endif
value = output;
endif
endif
return output;
.
#56:7
"Return true if we're running out of ticks or seconds.";
return (ticks_left() < 4000) || (seconds_left() < 2);
"If this verb is changed make sure to change :suspend_if_needed as well.";
.
#56:8
"Usage:  $command_utils:suspend_if_needed(<time>[, @<announcement>])";
"See if we're running out of ticks or seconds, and if so suspend(<time>) and return true.  If more than one arg is given, print the remainder with player:tell.";
if ((ticks_left() < 4000) || (seconds_left() < 2))
"Note: above computation should be the same as :running_out_of_time.";
{?time = 10, @ann} = args;
if (ann && valid(player))
player:tell(tostr(@ann));
endif
amount = max(time, min($login:current_lag(), 10));
set_task_perms(caller_perms());
"this is trying to back off according to lag...";
suspend(amount);
return 1;
endif
.
#56:9
":dump_lines(text) => text `.'-quoted for :read_lines()";
"  text is assumed to be a list of strings";
"Returns a corresponding list of strings which, when read via :read_lines, ";
"produces the original list of strings (essentially, any strings beginning ";
"with a period \".\" have the period doubled).";
"The list returned includes a final \".\"";
text = args[1];
newtext = {};
i = lasti = 0;
for line in (text)
if (match(line, "^%(%.%| *@abort *$%)"))
newtext = {@newtext, @(i > lasti) ? text[lasti + 1..i] | {}, "." + line};
lasti = i = i + 1;
else
i = i + 1;
endif
endfor
return {@newtext, @(i > lasti) ? text[lasti + 1..i] | {}, "."};
.
#56:10
":explain_syntax(here,verb,args)";
verb = args[2];
for x in ({player, args[1], @valid(dobj) ? {dobj} | {}, @valid(iobj) ? {iobj} | {}})
what = x;
while (hv = $object_utils:has_verb(what, verb))
what = hv[1];
i = 1;
while (i = $code_utils:find_verb_named(what, verb, i))
if (evs = $code_utils:explain_verb_syntax(x, verb, @verb_args(what, i)))
player:tell("Try this instead:  ", evs);
return 1;
endif
i = i + 1;
endwhile
what = parent(what);
endwhile
endfor
return 0;
.
#56:11
":do_huh(verb,args)  what :huh should do by default.";
{verb, args} = args;
if ($perm_utils:controls(caller_perms(), player) || (caller_perms() == player))
this.feature_task = {task_id(), verb, args, argstr, dobj, dobjstr, prepstr, iobj, iobjstr};
endif
set_task_perms(cp = caller_perms());
notify = $perm_utils:controls(cp, player) ? "notify" | "tell";
if (verb == "")
"should only happen if a player types backslash";
player:(notify)("I don't understand that.");
return;
endif
if (player:my_huh(verb, args))
"... the player found something funky to do ...";
elseif (caller:here_huh(verb, args))
"... the room found something funky to do ...";
elseif (player:last_huh(verb, args))
"... player's second round found something to do ...";
elseif (dobj == $ambiguous_match)
if (iobj == $ambiguous_match)
player:(notify)(tostr("I don't understand that (\"", dobjstr, "\" and \"", iobjstr, "\" are both ambiguous names)."));
else
player:(notify)(tostr("I don't understand that (\"", dobjstr, "\" is an ambiguous name)."));
endif
elseif (iobj == $ambiguous_match)
player:(notify)(tostr("I don't understand that (\"", iobjstr, "\" is an ambiguous name)."));
else
player:(notify)("I don't understand that.");
player:my_explain_syntax(caller, verb, args) || (caller:here_explain_syntax(caller, verb, args) || this:explain_syntax(caller, verb, args));
endif
.
#56:12
"task_info(task id)";
"Return info (the same info supplied by queued_tasks()) about a given task id, or E_INVARG if there's no such task queued.";
"WIZARDLY";
set_task_perms(caller_perms());
tasks = queued_tasks();
task_id = args[1];
for task in (tasks)
if (task[1] == task_id)
return task;
endif
endfor
return E_INVARG;
.
#56:13
if (caller_perms().wizard)
pass(@args);
this.lag_samples = {};
this.feature_task = "hey, neat, no feature verbs have been run yet!";
endif
.
#56:14
"Kills this task if the current lag is greater than args[1].  Args[2..n] will be passed to player:tell.";
cutoff = args[1];
if ($login:current_lag() > cutoff)
player:tell(@listdelete(args, 1));
kill_task(task_id());
endif
.
#56:15
":validate_feature(verb, args)";
"  (where `verb' and `args' are the arguments passed to :my_huh)";
"  returns true or false based on whether this is the same command typed by the user (comparing it against $command_utils.feature_task, set by $command_utils:do_huh).";
"  assumes that the :my_huh parsing has not suspended";
return {task_id(), @args, argstr, dobj, dobjstr, prepstr, iobj, iobjstr} == this.feature_task;
.
#57:0
if ((!player.wizard) || (player != this))
player:notify("Sorry.");
return;
endif
set_task_perms(player);
args = setremove(args, "to");
if ((length(args) != 2) || (!args[2]))
player:notify(tostr("Usage:  ", verb, " <object-or-property-or-verb> <owner>"));
return;
endif
what = args[1];
owner = $string_utils:match_player(args[2]);
bynumber = verb == "@chown#";
if ($command_utils:player_match_result(owner, args[2])[1])
elseif (spec = $code_utils:parse_verbref(what))
object = this:my_match_object(spec[1]);
if (!$command_utils:object_match_failed(object, spec[1]))
vname = spec[2];
if (bynumber)
vname = $code_utils:toint(vname);
if (vname == E_TYPE)
return player:notify("Verb number expected.");
elseif ((vname < 1) || (vname > length(verbs(object))))
return player:notify("Verb number out of range.");
endif
endif
info = `verb_info(object, vname) ! ANY';
if (info == E_VERBNF)
player:notify("That object does not define that verb.");
elseif (typeof(info) == ERR)
player:notify(tostr(info));
else
try
result = set_verb_info(object, vname, listset(info, owner, 1));
player:notify("Verb owner set.");
except e (ANY)
player:notify(e[2]);
endtry
endif
endif
elseif (bynumber)
player:notify("@chown# can only be used with verbs.");
elseif (index(what, ".") && (spec = $code_utils:parse_propref(what)))
object = this:my_match_object(spec[1]);
if (!$command_utils:object_match_failed(object, spec[1]))
pname = spec[2];
e = $wiz_utils:set_property_owner(object, pname, owner);
if (e == E_NONE)
player:notify("+c Property owner set.  Did you really want to do that?");
else
player:notify(tostr(e && "Property owner set."));
endif
endif
else
object = this:my_match_object(what);
if (!$command_utils:object_match_failed(object, what))
player:notify(tostr($wiz_utils:set_owner(object, owner) && "Object ownership changed."));
endif
endif
.
#57:1
if (caller != this)
raise(E_PERM);
endif
set_task_perms(player);
if ((length(args) == 1) && (argstr[1] == "\""))
argstr = args[1];
endif
shout = $gender_utils:get_conj("shouts", player);
for person in (connected_players())
if (person != player)
person:notify(tostr(player.name, " ", shout, ", \"", argstr, "\""));
endif
endfor
player:notify(tostr("You shout, \"", argstr, "\""));
.
#57:2
"@grant <object> to <player>";
"@grants <object> to <player>   --- same as @grant but may suspend.";
"@transfer <expression> to <player> -- like 'grant', but evalutes a possible list of objects to transfer, and modifies quota.";
"Ownership of the object changes as in @chown and :set_owner (i.e., .owner and all c properties change).  In addition all verbs and !c properties owned by the original owner change ownership as well.  Finally, for !c properties, instances on descendant objects change ownership (as in :set_property_owner).";
if ((!player.wizard) || (player != this))
player:notify("Sorry.");
return;
endif
set_task_perms(player);
if ((!iobjstr) || (!dobjstr))
return player:notify(tostr("Usage:  ", verb, " <object> to <player>"));
endif
if ($command_utils:player_match_failed(newowner = $string_utils:match_player(iobjstr), iobjstr))
"...newowner is bogus...";
return;
endif
if (verb == "@transfer")
objlist = player:eval_cmd_string(dobjstr, 0);
if (!objlist[1])
player:notify(tostr("Had trouble reading `", dobjstr, "': "));
player:notify_lines(@objlist[2]);
return;
elseif (typeof(objlist[2]) == OBJ)
objlist = objlist[2..2];
elseif (typeof(objlist[2]) != LIST)
player:notify(tostr("Value of `", dobjstr, "' is not an object or list:  ", toliteral(objlist[2])));
return;
else
objlist = objlist[2];
endif
elseif ($command_utils:object_match_failed(object = this:my_match_object(dobjstr), dobjstr))
"...object is bogus...";
return;
else
objlist = {object};
endif
"Used to check for quota of newowner, but doesn't anymore, cuz the quota check doesn't work";
suspendok = verb != "@grant";
player:tell("Transferring ", toliteral(objlist), " to ", $string_utils:nn(newowner));
for object in (objlist)
$command_utils:suspend_if_needed(0);
same = object.owner == newowner;
for vnum in [1..length(verbs(object))]
info = verb_info(object, vnum);
if (!((info[1] != object.owner) && (valid(info[1]) && is_player(info[1]))))
same = same && (info[1] == newowner);
set_verb_info(object, vnum, listset(info, newowner, 1));
endif
endfor
for prop in (properties(object))
if (suspendok && ((ticks_left() < 5000) || (seconds_left() < 2)))
suspend(0);
endif
info = property_info(object, prop);
if (!(index(info[2], "c") || (((info[1] != object.owner) && valid(info[1])) && is_player(info[1]))))
same = same && (info[1] == newowner);
$wiz_utils:set_property_owner(object, prop, newowner, suspendok);
endif
endfor
if (suspendok)
suspend(0);
endif
$wiz_utils:set_owner(object, newowner, suspendok);
if (same)
player:notify(tostr(newowner.name, " already owns everything ", newowner.ps, " is entitled to on ", object.name, "."));
else
player:notify(tostr("Ownership changed on ", $string_utils:nn(object), ", verb, properties and descendants' properties."));
endif
endfor
player:notify(tostr(verb, " complete."));
.
#57:3
set_task_perms(player);
dobj = $string_utils:match_player(dobjstr);
if (dobj == $nothing)
player:notify(tostr("Usage:  ", verb, " <playername>"));
elseif ($command_utils:player_match_result(dobj, dobjstr)[1])
elseif ($wiz_utils:check_prog_restricted(dobj))
return player:notify(tostr("Sorry, ", dobj.name, " is not allowed to be a programmer."));
elseif ((dobj.description == $player.description) && (!$command_utils:yes_or_no($string_utils:pronoun_sub("@Programmer %d despite %[dpp] lack of description?"))))
player:notify(tostr("Okay, leaving ", dobj.name, " !programmer."));
return;
elseif (result = $wiz_utils:set_programmer(dobj))
player:notify(tostr(dobj.name, " (", dobj, ") is now a programmer.  ", dobj.ppc, " quota is currently ", $quota_utils:get_quota(dobj), "."));
player:notify(tostr(dobj.name, " and the other wizards have been notified."));
if (msg = this:programmer_victim_msg())
dobj:notify(msg);
endif
if ($object_utils:isa(dobj.location, $room) && (msg = this:programmer_msg()))
dobj.location:announce_all_but({dobj}, msg);
endif
elseif (result == E_NONE)
player:notify(tostr(dobj.name, " (", dobj, ") is already a programmer..."));
else
player:notify(tostr(result));
endif
.
#57:4
{?core_variant_name = ""} = args;
if (!player.wizard)
player:notify("Nice try, but permission denied.");
return;
elseif (length(connected_players()) > 1)
player:notify("You need to @boot everybody else before I'll believe this isn't the real MOO.");
abort = 1;
elseif (`boot_player(open_network_connection("localhost", 666)) ! ANY' != E_PERM)
player:notify("Why are outbound connections enabled?  I bet this is the real MOO.");
abort = 1;
else
abort = (!$command_utils:yes_or_no("Continuing with this command will destroy all but the central core of the database.  Are you sure you want to do this?  ")) || (!$command_utils:yes_or_no("Really sure? "));
endif
if (abort)
player:notify("Core database extraction aborted.");
return;
endif
"----------------------------------------";
player:notify("Messing with server options...");
spi = {};
for p in ({"protect_recycle", "protect_set_property_info", "protect_add_property", "protect_chparent", "bg_ticks"})
spi = {@spi, {p, $server_options.(p)}};
$server_options.(p) = 0;
endfor
$server_options.bg_ticks = 1000000;
add_property($server_options, "bg_seconds", 7, {player, "r"});
`load_server_options() ! ANY';
add_property($server_options, "__mcd__savesopt", spi, {player, "r"});
"----------------------------------------";
player:notify("Killing all queued tasks ...");
for t in (queued_tasks())
kill_task(t[1]);
endfor
suspend(0);
"----------------------------------------";
player:notify(tostr("Identifying objects to be saved", @core_variant_name ? {" for core variant '", core_variant_name, "'"} | {}, " ..."));
"... TODO --- core variant name lookup?";
core_variant = {{"name", core_variant_name}};
{saved, saved_props, skipped_parents, proxy_original, proxy_incore} = $core_object_info(core_variant, 1);
if (!(player in saved))
player:notify("Sorry, but this won't work unless you yourself are on the list of objects to be saved.");
player:notify("Core database extraction aborted.");
return;
endif
for ops in (saved_props)
{o, o_props} = ops;
for p in (o_props)
if (i = o.(p) in proxy_original)
o.(p) = proxy_incore[i];
endif
endfor
endfor
"... TODO --- why isn't this on #0:init_for_core ? --Rog";
$player_class = $mail_recipient_class;
"----------------------------------------";
player:notify("Stripping you of any personal verbs and/or properties ...");
for i in [1..length(verbs(player))]
delete_verb(player, 1);
endfor
for p in (properties(player))
delete_property(player, p);
endfor
chparent(player, $wiz);
for p in ($object_utils:all_properties(player))
clear_property(player, p);
endfor
player:set_name("Wizard");
player:set_aliases({"Wizard"});
player.description = "";
player.key = 0;
player.ownership_quota = 100;
player.password = 0;
player.last_password_time = 0;
$gender_utils:set(player, "neuter");
"----------------------------------------";
suspend(0);
owners_original = owners_incore = {};
for i in [1..length(proxy_original)]
o = proxy_original[i];
if (is_player(o) && (o != $no_one))
owners_original = {@owners_original, o};
owners_incore = {@owners_incore, proxy_incore[i]};
endif
endfor
for o in (saved)
if (is_player(o) && (o != $no_one))
owners_original = {@owners_original, o};
owners_incore = {@owners_incore, o};
endif
endfor
player:notify(tostr("Chowning every saved object, verb and property to one of ", $string_utils:nn(owners_incore), "..."));
for o in (saved)
$command_utils:suspend_if_needed(0, "... ", length(saved) - (o in saved), " to go");
if (i = o.owner in owners_original)
o.owner = owners_incore[i];
elseif (valid(o.owner) && o.owner.wizard)
o.owner = player;
else
o.owner = $hacker;
endif
old_verbs = {};
for j in [1..length(verbs(o))]
$command_utils:suspend_if_needed(0, "... ", length(saved) - (o in saved), " to go");
info = verb_info(o, j);
if (i = info[1] in owners_original)
info[1] = owners_incore[i];
elseif (valid(info[1]) && info[1].wizard)
info[1] = player;
else
info[1] = $hacker;
endif
set_verb_info(o, j, info);
if (index(info[3], "(old)"))
old_verbs = {j, @old_verbs};
endif
endfor
for vname in (old_verbs)
delete_verb(o, vname);
endfor
for p in ($object_utils:all_properties(o))
$command_utils:suspend_if_needed(0, "... ", length(saved) - (o in saved), " to go");
info = property_info(o, p);
if (i = info[1] in owners_original)
info[1] = owners_incore[i];
elseif (valid(info[1]) && info[1].wizard)
info[1] = player;
else
info[1] = $hacker;
endif
set_property_info(o, p, info);
endfor
endfor
"----------------------------------------";
player:notify("Removing all unsaved :recycle and :exitfunc verbs ...");
for o in [#0..max_object()]
$command_utils:suspend_if_needed(0, "... ", o);
if (valid(o) && (!(o in saved)))
for v in ({"recycle", "exitfunc"})
while ($object_utils:defines_verb(o, v))
delete_verb(o, v);
endwhile
endfor
endif
endfor
"----------------------------------------";
player:notify("Recycling unsaved objects ...");
add_property(this, "__mcd__pos", toint(max_object()), {player, "r"});
add_property(this, "__mcd__save", {core_variant, saved, saved_props, skipped_parents}, {player, "r"});
suspend(0);
try
this:mcd_2(core_variant, saved, saved_props, skipped_parents);
finally
if ((!queued_tasks()) && `this.__mcd__save ! E_PROPNF => 0')
"...use raw notify since we have no idea what will be b0rken";
notify(player, "Core database extraction failed.");
endif
endtry
.
#57:5
if (!player.wizard)
player:notify("Sorry.");
return;
elseif ($code_utils:task_valid($shutdown_task))
player:notify(tostr("Shutdown already in progress.  The MOO will be shut down in ", $time_utils:english_time($shutdown_time - time()), ", by ", $shutdown_message));
return;
endif
if (s = match(argstr, "^in +%([0-9]+%)%( +%|$%)"))
bounds = s[3][1];
delay = toint(argstr[bounds[1]..bounds[2]]);
argstr = argstr[s[2] + 1..$];
else
delay = 2;
endif
if (!$command_utils:yes_or_no(tostr("Do you really want to shut down the server in ", delay, " minutes?")))
player:notify("Aborted.");
return;
endif
announce_times = {};
if (delay > 0)
while (delay > 0)
announce_times = {@announce_times, delay * 60};
delay = delay / 2;
endwhile
announce_times = {@announce_times, 30, 10};
$shutdown_time = time() + announce_times[1];
endif
$shutdown_message = tostr(player.name, " (", player, "): ", argstr);
$shutdown_task = task_id();
for i in [1..length(announce_times)]
base_msg = tostr("*** The server will be shut down by ", player.name, " (", player, ") in ", $time_utils:english_time(announce_times[i]), ":");
msg = {base_msg, @$generic_editor:fill_string("*** " + argstr, length(base_msg) - 4, "*** ")};
"...use raw notify() since :notify() verb could be broken...";
for p in (connected_players())
for line in (msg)
notify(p, line);
endfor
$command_utils:suspend_if_needed(0);
endfor
suspend(announce_times[i] - {@announce_times, 0}[i + 1]);
endfor
for p in (connected_players())
notify(p, tostr("*** Server shutdown by ", $shutdown_message, " ***"));
boot_player(p);
endfor
suspend(0);
$shutdown_task = E_NONE;
set_task_perms(player);
shutdown(argstr);
.
#57:6
set_task_perms(player);
dump_database();
player:notify("Dumping...");
.
#57:7
set_task_perms(player);
if (argstr[1] != ":")
argstr = ":" + argstr;
endif
player:notify(tostr("Searching for verbs that appear to call ", argstr, " ..."));
player:notify("");
$code_utils:find_verbs_containing(argstr + "(");
.
#57:8
if (!caller_perms().wizard)
return;
elseif (length(connected_players()) > 1)
return;
elseif (`boot_player(open_network_connection("localhost", 666)) ! ANY' != E_PERM)
return;
elseif (!("__mcd__pos" in properties(this)))
return;
endif
end = this.__mcd__pos;
{core_variant, saved, saved_props, skipped_parents} = args;
player:notify(tostr("*** Recycling from #", end, " ..."));
suspend(0);
fork (0)
try
this:mcd_2(core_variant, saved, saved_props, skipped_parents);
finally
if ((!queued_tasks()) && `this.__mcd__save ! E_PROPNF => 0')
"...use raw notify since we have no idea what will be b0rken";
notify(player, "Core database extraction failed.");
endif
endtry
endfork
for i in [0..end]
this.__mcd__pos = end - i;
o = toobj(end - i);
if ($command_utils:running_out_of_time())
return;
endif
if (valid(o) && (!(o in saved)))
for x in (o.contents)
move(x, #-1);
endfor
if (is_player(o))
"o.features = {}";
set_player_flag(o, 0);
endif
if (!(o in skipped_parents))
chparent(o, #-1);
endif
recycle(o);
endif
endfor
delete_property(this, "__mcd__pos");
spi = $server_options.__mcd__savesopt;
delete_property($server_options, "__mcd__savesopt");
delete_property($server_options, "bg_seconds");
for pv in (spi)
$server_options.(pv[1]) = pv[2];
endfor
load_server_options();
"----------------------------------------";
suspend(0);
player:notify("Killing queued tasks ...");
for t in (queued_tasks())
kill_task(t[1]);
endfor
"----------------------------------------";
player:notify("Compacting object numbers ...");
old_oids = new_oids = {player};
for o_ps in (saved_props)
$command_utils:suspend_if_needed(0);
{o, o_props} = o_ps;
for p in (o_props)
if ((p == "owner") || (p == "location"))
"...renumber() takes care of these";
elseif (i = (old = o.(p)) in old_oids)
o.(p) = new_oids[i];
elseif (valid(old))
new_oids[1..0] = {o.(p) = renumber(old)};
old_oids[1..0] = {old};
endif
endfor
endfor
for o in (saved)
if (valid(o) && (o != player))
renumber(o);
endif
endfor
reset_max_object();
"...rebuild saved list so that parents come before children...";
saved = {};
for o in [#0..max_object()]
os = {};
while (valid(o) && (!(o in saved)))
os = {o, @os};
o = parent(o);
endwhile
saved = {@saved, @os};
endfor
"----------------------------------------";
player:notify("Performing miscellaneous cleanups ...");
succeeded = 1;
for o in [#0..max_object()]
$command_utils:suspend_if_needed(0);
try
move(o, #-1);
except e (ANY)
player:notify(tostr("Couldn't move ", o, " => ", e[2]));
player:notify(toliteral(e[4]));
succeeded = 0;
endtry
endfor
for o in (saved)
$command_utils:suspend_if_needed(0);
if ($object_utils:has_callable_verb(o, "init_for_core"))
try
o:init_for_core(core_variant);
except e (ANY)
player:notify(tostr("Error from ", o, ":init_for_core => ", e[2]));
player:notify(toliteral(e[4]));
succeeded = 0;
endtry
endif
endfor
player:notify("Re-measuring everything ...");
for o in [#0..max_object()]
$command_utils:suspend_if_needed(0);
if (valid(o))
$byte_quota_utils:object_bytes(o);
endif
endfor
$wiz_utils:initialize_owned();
$byte_quota_utils:summarize_one_user(player);
delete_property(this, "__mcd__save");
player:notify("Core database extraction " + (succeeded ? "is complete." | "failed."));
if (succeeded)
boot_player(player);
shutdown();
endif
.
#57:9
"@toad[!][!] <player> [blacklist|redlist|graylist] [commentary]";
whostr = args[1];
comment = $string_utils:first_word(argstr)[2];
if (verb == "@toad!!")
listname = "redlist";
elseif (verb == "@toad!")
listname = "blacklist";
elseif ((ln = {@args, ""}[2]) && (index(listname = $login:listname(ln), ln) == 1))
"...first word of coment is one of the magic words...";
comment = $string_utils:first_word(comment)[2];
else
listname = "";
endif
if ((!player.wizard) || (player != this))
player:notify("Yeah, right... you wish.");
return;
elseif ($command_utils:player_match_failed(who = $string_utils:match_player(whostr), whostr))
return;
elseif (((whostr != who.name) && (!(whostr in who.aliases))) && (whostr != tostr(who)))
player:notify(tostr("Must be a full name or an object number:  ", who.name, "(", who, ")"));
return;
elseif (who == player)
player:notify("If you want to toad yourself, you have to do it by hand.");
return;
endif
dobj = who;
if (msg = player:toad_victim_msg())
notify(who, msg);
endif
if ($wiz_utils:rename_all_instances(who, "disfunc", "toad_disfunc"))
player:notify(tostr(who, ":disfunc renamed."));
endif
if ($wiz_utils:rename_all_instances(who, "recycle", "toad_recycle"))
player:notify(tostr(who, ":recycle renamed."));
endif
"MOO-specific cleanup while still a player object.";
this:toad_cleanup(who);
e = $wiz_utils:unset_player(who, $hacker);
player:notify(e ? tostr(who.name, "(", who, ") is now a toad.") | tostr(e));
if (e && ($object_utils:isa(who.location, $room) && (msg = player:toad_msg())))
who.location:announce_all_but({who}, msg);
endif
if (listname && (!$login:(listname + "ed")(cname = $string_utils:connection_hostname(who.last_connect_place))))
$login:(listname + "_add")(cname);
player:notify(tostr("Site ", cname, " ", listname, "ed."));
else
cname = "";
endif
if (!comment)
player:notify("So why is this person being toaded?");
comment = $command_utils:read();
endif
$mail_agent:send_message(player, $toad_log, tostr("@toad ", who.name, " (", who, ")"), {$string_utils:from_list(who.all_connect_places, " "), @cname ? {$string_utils:capitalize(listname + "ed:  ") + cname} | {}, @comment ? {comment} | {}});
player:notify(tostr("Mail sent to ", $mail_agent:name($toad_log), "."));
`$local.waitlist:note_reapee(who, tostr("@toaded by ", player.name)) ! ANY';
.
#57:10
"@untoad <object> [as namespec]";
"Turns object into a player.  Anything that isn't a guest is chowned to itself.";
if (!player.wizard)
player:notify("Yeah, right... you wish.");
elseif (prepstr && (prepstr != "as"))
player:notify(tostr("Usage:  ", verb, " <object> [as name,alias,alias...]"));
elseif ($command_utils:object_match_failed(dobj, dobjstr))
elseif (prepstr && (!(e = $building_utils:set_names(dobj, iobjstr))))
player:notify(tostr("Initial rename failed:  ", e));
elseif (e = $wiz_utils:set_player(dobj, g = $object_utils:isa(dobj, $guest)))
player:notify(tostr(dobj.name, "(", dobj, ") is now a ", g ? "usable guest." | "player."));
elseif (e == E_INVARG)
player:notify(tostr(dobj.name, "(", dobj, ") is not of an appropriate player class."));
player:notify("@chparent it to $player or some descendant.");
elseif (e == E_NONE)
player:notify(tostr(dobj.name, "(", dobj, ") is already a player."));
elseif (e == E_NACC)
player:notify("Wait until $player_db is finished updating...");
elseif (e == E_RECMOVE)
player:notify(tostr("The name `", dobj.name, "' is currently unavailable."));
player:notify(tostr("Try again with   ", verb, " ", dobj, " as <newname>"));
else
player:notify(tostr(e));
endif
.
#57:11
"@quota <player> is [public] <number> [<reason>]";
"  changes a player's quota.  sends mail to the wizards.";
if (player != this)
return player:notify("Permission denied.");
endif
set_task_perms(player);
dobj = $string_utils:match_player(dobjstr);
if ($command_utils:player_match_result(dobj, dobjstr)[1])
return;
elseif (!valid(dobj))
player:notify("Set whose quota?");
return;
endif
if (iobjstr[1..min(7, $)] == "public ")
iobjstr[1..7] = "";
if ($object_utils:has_property($local, "public_quota_log"))
recipients = {$quota_log, $local.public_quota_log};
else
player:tell("No public quota log.");
return E_INVARG;
endif
else
recipients = {$quota_log};
endif
old = $quota_utils:get_quota(dobj);
qstr = iobjstr[1..(n = index(iobjstr + " ", " ")) - 1];
new = $code_utils:toint((qstr[1] == "+") ? qstr[2..$] | qstr);
reason = iobjstr[n + 1..$] || "(none)";
if (typeof(new) != INT)
player:notify(tostr("Set ", dobj.name, "'s quota to what?"));
return;
elseif (qstr[1] == "+")
new = old + new;
endif
result = $quota_utils:set_quota(dobj, new);
if (typeof(result) == ERR)
player:notify(tostr(result));
else
player:notify(tostr(dobj.name, "'s quota set to ", new, "."));
endif
$mail_agent:send_message(player, recipients, tostr("@quota ", dobj.name, " (", dobj, ") ", new, " (from ", old, ")"), tostr("Reason for quota ", ((new - old) < 0) ? "decrease: " | "increase: ", reason, index("?.!", reason[$]) ? "" | "."));
.
#57:12
set_task_perms(player);
"The time below is Oct. 1, 1990, roughly the birthdate of the LambdaMOO server.";
start = 654768000;
now = time();
day = (24 * 60) * 60;
week = 7 * day;
month = 30 * day;
days_objects = days_players = {0, 0, 0, 0, 0, 0, 0};
weeks_objects = weeks_players = {0, 0, 0, 0};
months_objects = months_players = {};
nonplayer_objects = invalid_objects = 0;
always_objects = always_players = 0;
never_objects = never_players = 0;
numo = 0;
if (argstr)
if (((!dobjstr) && (prepstr == "with")) && (index("objects", iobjstr) == 1))
with_objects = 1;
else
player:notify(tostr("Usage:  ", verb, " [with objects]"));
return;
endif
else
with_objects = 0;
players = players();
endif
for i in [1..with_objects ? toint(max_object()) + 1 | length(players)]
if (with_objects)
o = toobj(i - 1);
else
o = players[i];
endif
if ($command_utils:running_out_of_time())
player:notify(tostr("... ", o));
suspend(0);
endif
if (valid(o))
numo = numo + 1;
p = is_player(o) ? o | o.owner;
if (!valid(p))
invalid_objects = invalid_objects + 1;
elseif (!$object_utils:isa(p, $player))
nonplayer_objects = nonplayer_objects + 1;
else
seconds = now - p.last_connect_time;
days = seconds / day;
weeks = seconds / week;
months = seconds / month;
if (seconds < 0)
if (is_player(o))
always_players = always_players + 1;
else
always_objects = always_objects + 1;
endif
elseif (seconds > (now - start))
if (is_player(o))
never_players = never_players + 1;
else
never_objects = never_objects + 1;
endif
elseif (months > 0)
while (months > length(months_players))
months_players = {@months_players, 0};
months_objects = {@months_objects, 0};
endwhile
if (is_player(o))
months_players[months] = months_players[months] + 1;
endif
months_objects[months] = months_objects[months] + 1;
elseif (weeks > 0)
if (is_player(o))
weeks_players[weeks] = weeks_players[weeks] + 1;
endif
weeks_objects[weeks] = weeks_objects[weeks] + 1;
else
if (is_player(o))
days_players[days + 1] = days_players[days + 1] + 1;
endif
days_objects[days + 1] = days_objects[days + 1] + 1;
endif
endif
endif
endfor
player:notify("");
player:notify(tostr("Last connected"));
player:notify(tostr("at least this     Num.     Cumul.   Cumul. %", with_objects ? "     Num.     Cumul.   Cumul. %" | ""));
player:notify(tostr("long ago        players   players   players ", with_objects ? "   objects   objects   objects" | ""));
player:notify(tostr("---------------------------------------------", with_objects ? "--------------------------------" | ""));
su = $string_utils;
col1 = 14;
col2 = 7;
col3 = 10;
col4 = 9;
col5 = 11;
col6 = 11;
col7 = 10;
nump = length(players());
totalp = totalo = 0;
for x in ({{days_players, days_objects, "day", 1}, {weeks_players, weeks_objects, "week", 0}, {months_players, months_objects, "month", 0}})
pcounts = x[1];
ocounts = x[2];
unit = x[3];
offset = x[4];
for i in [1..length(pcounts)]
$command_utils:suspend_if_needed(0);
j = i - offset;
player:notify(tostr(su:left(tostr(j, " ", unit, (j == 1) ? ":" | "s:"), col1), su:right(pcounts[i], col2), su:right(totalp = totalp + pcounts[i], col3), su:right((totalp * 100) / nump, col4), "%", with_objects ? tostr(su:right(ocounts[i], col5), su:right(totalo = totalo + ocounts[i], col6), su:right((totalo * 100) / numo, col7), "%") | ""));
endfor
player:notify("");
endfor
player:notify(tostr(su:left("Never:", col1), su:right(never_players, col2), su:right(totalp = totalp + never_players, col3), su:right((totalp * 100) / nump, col4), "%", with_objects ? tostr(su:right(never_objects, col5), su:right(totalo = totalo + never_objects, col6), su:right((totalo * 100) / numo, col7), "%") | ""));
player:notify(tostr(su:left("Always:", col1), su:right(always_players, col2), su:right(totalp = totalp + always_players, col3), su:right((totalp * 100) / nump, col4), "%", with_objects ? tostr(su:right(always_objects, col5), su:right(totalo = totalo + always_objects, col6), su:right((totalo * 100) / numo, col7), "%") | ""));
with_objects && player:notify(tostr(su:left("Non-player owner:", (((col1 + col2) + col3) + col4) + 1), su:right(nonplayer_objects, col5), su:right(totalo = totalo + nonplayer_objects, col6), su:right((totalo * 100) / numo, col7), "%"));
with_objects && player:notify(tostr(su:left("Invalid owner:", (((col1 + col2) + col3) + col4) + 1), su:right(invalid_objects, col5), su:right(totalo = totalo + invalid_objects, col6), su:right((totalo * 100) / numo, col7), "%"));
player:notify("");
.
#57:13
"Auxiliary verb for parsing @kill soon [#-of-seconds] [player | everyone]";
"Args[1] is either # of seconds or player/everyone.";
"Args[2], if it exists, is player/everyone, and forces args[1] to have been # of seconds.";
"Return value: {# of seconds [default 60] , 1 for all, object for player.}";
set_task_perms(caller_perms());
nargs = length(args);
soon = toint(args[1]);
if (nargs > 1)
everyone = args[2];
elseif (soon <= 0)
everyone = args[1];
else
everyone = 0;
endif
if (everyone == "everyone")
everyone = 1;
elseif (typeof(everyone) == STR)
result = $string_utils:match_player(everyone);
if ($command_utils:player_match_failed(result, everyone))
player:notify(tostr("Usage:  ", callers()[1][2], " soon [number of seconds] [\"everyone\" | player name]"));
return {-1, -1};
else
return {soon ? soon | 60, result};
endif
endif
return {soon ? soon | 60, everyone ? everyone | player};
.
#57:14
set_task_perms(player);
if (!args)
player:notify(tostr("Usage:  ", verb, " <pattern>"));
return;
endif
pattern = argstr;
regexp = verb == "@egrepcore";
player:notify(tostr("Searching for core verbs ", regexp ? "matching the regular expression " | "containing the string ", toliteral(pattern), " ..."));
player:notify("");
$code_utils:(regexp ? "find_verbs_matching" | "find_verbs_containing")(pattern, $core_objects());
.
#57:15
"@net-who prints all connected users and hosts.";
"@net-who player player player prints specified users and current or most recent connected host.";
"@net-who from hoststring prints all players who have connected from that host or host substring.  Substring can include *'s, e.g. @net-who from *.foo.edu.";
set_task_perms(player);
su = $string_utils;
if ((prepstr == "from") && dobjstr)
player:notify(tostr("Usage:  ", verb, " from <host string>"));
elseif (((prepstr != "from") || dobjstr) || (!iobjstr))
"Not parsing 'from' here...  Instead printing connected/recent users.";
if (!(pstrs = args))
unsorted = connected_players();
else
unsorted = listdelete($command_utils:player_match_result(su:match_player(pstrs), pstrs), 1);
endif
if (!unsorted)
return;
endif
$wiz_utils:show_netwho_listing(player, unsorted);
else
$wiz_utils:show_netwho_from_listing(player, iobjstr);
endif
.
#57:16
"Creates a player.";
"Syntax:  @make-player name email-address comments....";
"Generates a random password for the player.";
if ((!player.wizard) || callers())
return E_PERM;
elseif (length(args) < 2)
player:tell("Syntax:  @make-player name email-address comments....");
return;
elseif (args[2] == "for")
"common mistake: @make-player <name> for <email-address> ...";
args = listdelete(args, 2);
endif
return $wiz_utils:do_make_player(@args);
.
#57:17
if (!player.wizard)
player:notify("Sorry.");
elseif (!$code_utils:task_valid($shutdown_task))
player:notify("No server shutdown in progress.");
$shutdown_task = E_NONE;
else
"... Reset time so that $login:check_for_shutdown shuts up...";
kill_task($shutdown_task);
$shutdown_task = E_NONE;
$shutdown_time = time() - 1;
for p in (connected_players())
notify(p, tostr("*** Server shutdown ABORTED by ", player.name, " (", player, ")", argstr && (":  " + argstr), " ***"));
endfor
endif
.
#57:18
"This is the canonical doing-something-to-somebody message.";
"The corresponding property can either be";
"   string             msg for all occasions";
"   list of 2 strings  {we-are-there-msg,we-are-elsewhere-msg}";
m = this.(verb);
if (typeof(m) != LIST)
return $string_utils:pronoun_sub(m);
elseif ((this.location == dobj.location) || (length(m) < 2))
return $string_utils:pronoun_sub(m[1]);
else
return $string_utils:pronoun_sub(m[2]);
endif
.
#57:19
set_task_perms((caller in {this, $generic_editor, $verb_editor, $mail_editor, $note_editor}) ? this.owner | caller_perms());
return `move(this, args[1]) ! ANY';
.
#57:20
"@newt <player> [commentary]";
"turns a player into a newt.  It can get better...";
"adds player to $login.newted, they will not be allowed to log in.";
"Sends mail to $newt_log giving .all_connect_places and commentary.";
whostr = args[1];
comment = $string_utils:first_word(argstr)[2];
if (!player.wizard)
player:notify("Yeah, right.");
elseif ($command_utils:player_match_failed(who = $string_utils:match_player(whostr), whostr))
return;
elseif (((whostr != who.name) && (!(whostr in who.aliases))) && (whostr != tostr(who)))
player:notify(tostr("Must be a full name or an object number:  ", who.name, "(", who, ")"));
return;
elseif (who == player)
player:notify("If you want to newt yourself, you have to do it by hand.");
return;
elseif (who in $login.newted)
player:notify(tostr(who.name, " appears to already be a newt."));
return;
else
$wiz_utils:newt_player(who, comment);
endif
.
#57:21
"@denewt <player> [commentary]";
"Remove the player from $Login.newted";
"Sends mail to $newt_log with commentary.";
whostr = args[1];
comment = $string_utils:first_word(argstr)[2];
if (!player.wizard)
player:notify("Yeah, right.");
elseif ($command_utils:player_match_failed(who = $string_utils:match_player(whostr), whostr))
return;
else
"Should parse email address and register user in some clever way.  Ick.";
if (!(who in $login.newted))
player:notify(tostr(who.name, " does not appear to be a newt."));
else
$login.newted = setremove($login.newted, who);
if (entry = $list_utils:assoc(who, $login.temporary_newts))
$login.temporary_newts = setremove($login.temporary_newts, entry);
endif
player:notify(tostr(who.name, " (", who, ") got better."));
$mail_agent:send_message(player, $newt_log, tostr("@denewt ", who.name, " (", who, ")"), comment ? {comment} | {});
endif
endif
.
#57:22
"Registers a player.";
"Syntax:  @register name email-address [additional commentary]";
"Email-address is stored in $registration_db and on the player object.";
if (!player.wizard)
return player:tell(E_PERM);
endif
$wiz_utils:do_register(@args);
.
#57:23
"@newpassword player is [string]";
"Set's a player's password; omit string to have one randomly generated.";
"Offer to email the password.";
if (!player.wizard)
return E_PERM;
elseif ($command_utils:player_match_failed(dobj = $string_utils:match_player(dobjstr), dobjstr))
return;
elseif (!(dobjstr in {@dobj.aliases, tostr(dobj)}))
player:notify(tostr("Must be a full name or an object number: ", dobj.name, " (", dobj, ")"));
else
$wiz_utils:do_new_password(dobj, iobjstr);
endif
.
#57:24
"@log [<string>]    enters a comment in the server log.";
"If no string is given, you are prompted to enter one or more lines for an extended comment.";
set_task_perms(player);
whostr = tostr("from ", player.name, " (", player, ")");
if ((!player.wizard) || (player != caller))
player:notify("Yeah, right.");
elseif (argstr)
server_log(tostr("COMMENT: [", whostr, "]  ", argstr));
player:notify("One-line comment logged.");
elseif (lines = $command_utils:read_lines())
server_log(tostr("COMMENT: [", whostr, "]"));
for l in (lines)
server_log(l);
endfor
server_log(tostr("END_COMMENT."));
player:notify(tostr(length(lines), " lines logged as extended comment."));
endif
.
#57:25
set_task_perms(player);
n = (dobjstr == "all") ? 0 | $code_utils:toint(dobjstr || "20");
if (caller != this)
player:notify("You lose.");
elseif ((n == E_TYPE) && (index("now", dobjstr) != 1))
player:notify(tostr("Usage:  ", verb, " <number>  (where <number> indicates how many entries to look at in the guest log)"));
player:notify(tostr("Usage:  ", verb, " now (to see information about currently connected guests only)"));
elseif ((!dobjstr) || (index("now", dobjstr) != 1))
$guest_log:last(n);
else
"*way* too much copied code in here from @who...  Sorry.  --yduJ";
su = $string_utils;
conn = connected_players();
unsorted = {};
for g in ($object_utils:leaves($guest))
if (g in conn)
unsorted = {@unsorted, g};
endif
endfor
if (!unsorted)
player:tell("No guests found.");
return;
endif
footnotes = {};
alist = {};
nwidth = length("Player name");
for u in (unsorted)
pref = u.programmer ? "% " | "  ";
u.programmer && (footnotes = setadd(footnotes, "prog"));
u3 = {tostr(pref, u.name, " (", u, ")"), su:from_seconds(connected_seconds(u)), su:from_seconds(idle_seconds(u)), where = $string_utils:connection_hostname(connection_name(u))};
nwidth = max(length(u3[1]), nwidth);
if ($login:blacklisted(where))
where = "(*) " + where;
footnotes = setadd(footnotes, "black");
elseif ($login:graylisted(where))
where = "(+) " + where;
footnotes = setadd(footnotes, "gray");
endif
alist = {@alist, u3};
$command_utils:suspend_if_needed(0);
endfor
alist = $list_utils:sort_alist_suspended(0, alist, 3);
$command_utils:suspend_if_needed(0);
headers = {"Player name", "Connected", "Idle Time", "From Where"};
time_width = length("59 minutes") + 2;
before = {0, w1 = nwidth + 3, w2 = w1 + time_width, w3 = w2 + time_width};
tell1 = "  " + headers[1];
tell2 = "  " + su:space(headers[1], "-");
for j in [2..4]
tell1 = su:left(tell1, before[j]) + headers[j];
tell2 = su:left(tell2, before[j]) + su:space(headers[j], "-");
endfor
player:notify(tell1);
player:notify(tell2);
active = 0;
for a in (alist)
$command_utils:suspend_if_needed(0);
tell1 = a[1];
for j in [2..4]
tell1 = su:left(tell1, before[j]) + tostr(a[j]);
endfor
player:notify(tell1[1..min($, 79)]);
endfor
if (footnotes)
player:notify("");
if ("prog" in footnotes)
player:notify(" %  == programmer.");
endif
if ("black" in footnotes)
player:notify("(*) == blacklisted site.");
endif
if ("gray" in footnotes)
player:notify("(+) == graylisted site.");
endif
endif
player:tell("@guests display complete.");
endif
.
#57:26
if (caller != this)
set_task_perms(valid(caller_perms()) ? caller_perms() | player);
endif
use = this.mail_identity;
if (valid(use) && (use != this))
return use:(verb)(@args);
else
return pass(@args);
endif
.
#57:27
"@[un]blacklist [<site or subnet>  [for <duration>] [commentary]]";
"@[un]graylist  [<site or subnet>  [for <duration>] [commentary]]";
"@[un]redlist   [<site or subnet>  [for <duration>] [commentary]]";
"@[un]spooflist [<site of subnet>  [for <duration>] [commentary]]";
"The `for <duration>' is for temporary colorlisting a site only. The duration should be in english time units:  for 1 hour, for 1 day 2 hours 15 minutes, etc. The commentary should be after all durations. Note, if you are -not- using a duration, do not start your commentary with the word `for'.";
set_task_perms(player);
if ((player != this) || (!player.wizard))
player:notify("Ummm.  no.");
return;
endif
undo = verb[2..3] == "un";
which = $login:listname(verb[undo ? 4 | 2]);
downgrade = {"", "graylist", "blacklist"}[1 + index("br", which[1])];
if (!(fw = $string_utils:first_word(argstr)))
"... Just print the list...";
this:display_list(which);
return;
endif
target = fw[1];
if (fw[2] && (parse = this:parse_templist_duration(fw[2]))[1])
if ((typeof(parse[3]) == ERR) || (!parse[3]))
player:notify(tostr("Could not parse the duration for @", which, "ing site \"", target, "\""));
return;
endif
start = parse[2];
duration = parse[3];
comment = parse[4] ? {parse[4]} | {};
comment = {tostr("for ", $time_utils:english_time(duration)), @comment};
elseif (fw[2])
comment = {fw[2]};
else
"Get the right vars set up as though parse had been called";
parse = {0, ""};
comment = {};
endif
player:tell("comment is currently ", toliteral(comment));
if (is_literal = $site_db:domain_literal(target))
if (target[$] == ".")
target = target[1..$ - 1];
endif
fullname = "subnet " + target;
else
if (target[1] == ".")
target[1..1] = "";
endif
fullname = ("domain `" + target) + "'";
endif
entrylist = $login.(which)[1 + (!is_literal)];
if ((!undo) && (target in entrylist))
player:notify(tostr(fullname, " is already ", which, "ed."));
return;
endif
entrylist = setremove(entrylist, target);
if (!(result = this:check_site_entries(undo, which, target, is_literal, entrylist))[1])
return;
endif
rm = result[2];
namelist = $string_utils:english_list(rm);
downgraded = {};
if (rm)
ntries = (length(rm) == 1) ? "ntry" | "ntries";
if ($command_utils:yes_or_no(tostr("Remove e", ntries, " for ", namelist, "?")))
dg = undo && (downgrade && $command_utils:yes_or_no(downgrade + " them?"));
for s in (rm)
$login:(which + "_remove")(s);
dg && ($login:(downgrade + "_add")(s) && (downgraded = {@downgraded, s}));
endfor
player:notify(tostr("E", ntries, " removed", @dg ? {" and ", downgrade, "ed."} | {"."}));
else
player:notify(tostr(namelist, " will continue to be ", which, "ed."));
rm = {};
endif
endif
if (downgraded)
comment[1..0] = {tostr(downgrade, "ed ", $string_utils:english_list(downgraded), ".")};
endif
tempentrylist = $login.("temporary_" + which)[1 + (!is_literal)];
if ((!undo) && (target in $list_utils:slice(tempentrylist)))
player:notify(tostr(fullname, " is already temporarily ", which, "ed."));
return;
endif
if (en = $list_utils:assoc(target, tempentrylist))
tempentrylist = setremove(tempentrylist, en);
endif
if (!(result = this:check_site_entries(undo, which, target, is_literal, $list_utils:slice(tempentrylist)))[1])
return;
endif
rmtemp = result[2];
tempnamelist = $string_utils:english_list(rmtemp);
tempdowngraded = {};
if (rmtemp)
ntries = (length(rmtemp) == 1) ? "ntry" | "ntries";
if ($command_utils:yes_or_no(tostr("Remove e", ntries, " for ", tempnamelist, "?")))
dg = undo && (downgrade && $command_utils:yes_or_no(downgrade + " them?"));
for s in (rmtemp)
old = $list_utils:assoc(s, tempentrylist);
$login:(which + "_remove_temp")(s);
dg && ($login:(downgrade + "_add_temp")(s, old[2], old[3]) && (tempdowngraded = {@tempdowngraded, s}));
endfor
player:notify(tostr("E", ntries, " removed", @dg ? {" and ", downgrade, "ed with durations transferred."} | {"."}));
else
player:notify(tostr(tempnamelist, " will continue to be temporarily ", which, "ed."));
rmtemp = {};
endif
endif
if (tempdowngraded)
comment[1..0] = {tostr(downgrade, "ed ", $string_utils:english_list(tempdowngraded), ".")};
endif
if (!undo)
if (parse[1])
$login:(which + "_add_temp")(target, start, duration);
player:notify(tostr(fullname, " ", which, "ed for ", $time_utils:english_time(duration)));
else
$login:(which + "_add")(target);
player:notify(tostr(fullname, " ", which, "ed."));
endif
if (rm)
comment[1..0] = {tostr("Subsumes ", which, "ing for ", namelist, ".")};
endif
if (rmtemp)
comment[1..0] = {tostr("Subsumes temporary ", which, "ing for ", tempnamelist, ".")};
endif
elseif ($login:(which + "_remove")(target))
player:notify(tostr(fullname, " un", which, "ed."));
if (!downgrade)
elseif ($command_utils:yes_or_no(downgrade + " it?"))
$login:(downgrade + "_add")(target) && (downgraded = {target, @downgraded});
player:notify(tostr(fullname, " ", downgrade, "ed."));
else
player:notify(tostr(fullname, " not ", downgrade, "ed."));
endif
if (downgraded)
player:tell("Comment currently: ", toliteral(comment), " ; downgrade = ", toliteral(downgrade), " ; downgraded = ", toliteral(downgraded));
comment[1..0] = {tostr(downgrade, "ed ", $string_utils:english_list(downgraded), ".")};
endif
if (rm)
comment[1..0] = {tostr("Also removed ", namelist, ".")};
endif
elseif ((old = $list_utils:assoc(target, $login.("temporary_" + which)[1 + (!is_literal)])) && $login:(which + "_remove_temp")(target))
player:notify(tostr(fullname, " un", which, "ed."));
if (!downgrade)
elseif ($command_utils:yes_or_no(downgrade + " it?"))
$login:(downgrade + "_add_temp")(target, old[2], old[3]) && (tempdowngraded = {target, @tempdowngraded});
player:notify(tostr(fullname, " ", downgrade, "ed, currently for ", $time_utils:english_time(old[3]), " from ", $time_utils:time_sub("$1/$3", old[2])));
else
player:notify(tostr(fullname, " not ", downgrade, "ed."));
endif
if (tempdowngraded)
comment[1..0] = {tostr(downgrade, "ed ", $string_utils:english_list(tempdowngraded), "with durations transferred.")};
endif
if (rmtemp)
comment[1..0] = {tostr("Also removed ", tempnamelist, ".")};
endif
elseif (rm || rmtemp)
player:notify(tostr(fullname, " itself was never actually ", which, "ed."));
comment[1..0] = {tostr("Removed ", namelist, " from regular and ", tempnamelist, " from temporary.")};
else
player:notify(tostr(fullname, " was not ", which, "ed before."));
return;
endif
subject = tostr(undo ? "@un" | "@", which, " ", fullname);
$mail_agent:send_message(player, $site_log, subject, comment);
"...";
"... make sure we haven't screwed ourselves...";
uhoh = {};
for site in (player.all_connect_places)
if (index(site, target) && $login:(which + "ed")(site))
uhoh = {@uhoh, site};
endif
endfor
if (uhoh)
player:notify(tostr("WARNING:  ", $string_utils:english_list(uhoh), " are now ", which, "ed!"));
endif
.
#57:28
"Usage:  @corify <object> as <propname>";
"Adds <object> to the core, as $<propname>";
"Reminds the wizard to write an :init_for_core verb, if there isn't one already.";
if (!player.wizard)
player:tell("Sorry, the core is wizardly territory.");
return;
endif
if (dobj == $failed_match)
dobj = player:my_match_object(dobjstr);
endif
if ($command_utils:object_match_failed(dobj, dobjstr))
return;
endif
if (!iobjstr)
player:tell("Usage:  @corify <object> as <propname>");
return;
elseif (iobjstr[1] == "$")
iobjstr = iobjstr[2..$];
endif
try
add_property(#0, iobjstr, dobj, {player, "r"});
except e (ANY)
return player:tell(e[1], ":", e[2]);
endtry
if (!("init_for_core" in verbs(dobj)))
player:tell(dobj:titlec(), " has no :init_for_core verb.  Strongly consider adding one before doing anything else.");
else
player:tell("Corified ", $string_utils:nn(dobj), " as $", iobjstr, ".");
endif
.
#57:29
"Usage:  @make-guest <guestname>";
"Creates a player called <guestname>_Guest owned by $hacker and a child of $guest. Or, if $local.guest exists, make a child of that, assuming that all other guests are children of it too.";
if (!player.wizard)
player:tell("If you think this MOO needs more guests, you should contact a wizard.");
return E_PERM;
endif
if (length(args) != 1)
player:tell("Usage: ", verb, " <guest name>");
return;
endif
guest_parent = (($object_utils:has_property($local, "guest") && valid($local.guest)) && $object_utils:isa($local.guest, $guest)) ? $local.guest | $guest;
i = length(children(guest_parent));
while (!$player_db:available(guestnum = tostr("Guest", i = i + 1)))
endwhile
guestname = args[1] + "_Guest";
guestaliases = {guestname, adj = args[1], guestnum};
if (!player.wizard)
return;
elseif ($player_db.frozen)
player:tell("Sorry, the player db is frozen, so no players can be made right now.  Please try again in a few minutes.");
return;
elseif (!$player_db:available(guestname))
player:tell("\"", guestname, "\" is not an available name.");
return;
elseif (!$player_db:available(adj))
player:Tell("\"", adj, "\" is not an available name.");
return;
else
new = $quota_utils:bi_create(guest_parent, $hacker);
new:set_name(guestname);
new:set_aliases(guestaliases);
if (!(e = $wiz_utils:set_player(new, 1)))
player:Tell("Unable to make ", new.name, " (", new, ") a player.");
player:Tell(tostr(e));
else
player:Tell("Guest: ", new.name, " (", new, ") made.");
new.default_description = {"By definition, guests appear nondescript."};
new.description = new.default_description;
new.last_connect_time = $maxint;
new.last_disconnect_time = time();
new.password = 0;
new.size_quota = new.size_quota;
new:set_gender(new.default_gender);
move(new, $player_start);
player:tell("Now don't forget to @describe ", new, " as something.");
endif
endif
.
#57:30
if (!player.wizard)
return player:tell("Permission denied.");
elseif (!valid(who = $string_utils:match_player(dobjstr)))
return $command_utils:player_match_failed(who, dobjstr);
elseif (((dobjstr != who.name) && (!(dobjstr in who.aliases))) && (dobjstr != tostr(who)))
return player:tell(tostr("Must be a full name or an object number:  ", who.name, "(", who, ")"));
elseif (who == player)
player:notify("If you want to newt yourself, you have to do it by hand.");
return;
elseif (!(howlong = $time_utils:parse_english_time_interval(iobjstr)))
return player:tell("Can't parse time: ", howlong);
else
if (who in $login.newted)
player:notify(tostr(who.name, " appears to already be a newt."));
else
$wiz_utils:newt_player(who, "", ("For " + iobjstr) + ".  ");
endif
if (index = $list_utils:iassoc(who, $login.temporary_newts))
$login.temporary_newts[index][2] = time();
$login.temporary_newts[index][3] = howlong;
else
$login.temporary_newts = {@$login.temporary_newts, {who, time(), howlong}};
endif
player:tell(who.name, " (", who, ") will be a newt until ", ctime(time() + howlong));
endif
.
#57:31
"@deprogrammer victim [for <duration>] [reason]";
"";
"Removes the prog-bit from victim.  If a duration is specified (see help $time_utils:parse_english_time_interval), then the victim is put into the temporary list. He will be automatically removed the first time he asks for a progbit after the duration expires.  Either with or without the duration you can specify a reason, or you will be prompted for one. However, if you don't have a duration, don't start the reason with the word `For'.";
set_task_perms(player);
if ((player != this) || (!player.wizard))
player:notify("No go.");
return;
endif
if (!args)
player:notify(tostr("Usage:  ", verb, " <playername> [for <duration>] [reason]"));
endif
fw = $string_utils:first_word(argstr);
if (fw[2] && (parse = this:parse_templist_duration(fw[2]))[1])
if ((typeof(parse[3]) == ERR) || (!parse[3]))
player:notify(tostr("Could not parse the duration for restricting programming for ", fw[1], "."));
return;
endif
start = parse[2];
duration = parse[3];
reason = parse[4] ? {parse[4]} | {};
else
start = duration = 0;
reason = fw[2] ? {fw[2]} | {};
endif
if (!reason)
reason = {$command_utils:read("reason for resetting programmer flag")};
endif
if (duration)
reason = {tostr("for ", $time_utils:english_time(duration)), @reason};
endif
if ($command_utils:player_match_failed(victim = $string_utils:match_player(fw[1]), fw[1]))
"...done...";
elseif (result = $wiz_utils:unset_programmer(victim, reason, @start ? {start, duration} | {}))
player:notify(tostr(victim.name, " (", victim, ") is no longer a programmer.", duration ? tostr("  This restriction will be lifted in ", $string_utils:from_seconds(duration), ".") | ""));
elseif (result == E_NONE)
player:notify(tostr(victim.name, " (", victim, ") was already a nonprogrammer..."));
else
player:notify(tostr(result));
endif
.
#57:32
if ((caller != this) && (!caller_perms().wizard))
return E_PERM;
endif
which = args[1];
slist = {};
if (s = $login.(which)[1])
slist = {@slist, "--- Subnets ---", @s};
endif
if (s = $login.(which)[2])
slist = {@slist, "--- Domains ---", @s};
endif
if (s = $login.("temporary_" + which)[1])
slist = {@slist, "--- Temporary Subnets ---"};
for d in (s)
slist = {@slist, tostr(d[1], " until ", $time_utils:time_sub("$1/$3 $H:$M", d[2] + d[3]))};
$command_utils:suspend_if_needed(2);
endfor
endif
if (s = $login.("temporary_" + which)[2])
slist = {@slist, "--- Temporary Domains ---"};
for d in (s)
slist = {@slist, tostr(d[1], " until ", $time_utils:time_sub("$1/$3 $H:$M", d[2] + d[3]))};
$command_utils:suspend_if_needed(2);
endfor
endif
if (slist)
player:notify_lines($string_utils:columnize(slist, 2));
else
player:notify(tostr("The ", which, " is empty."));
endif
.
#57:33
"parses out the time interval at the beginning of the args[1], assumes rest is commentary.";
if ((fw = $string_utils:first_word(args[1]))[1] == "for")
words = $string_utils:words(fw[2]);
try_ = {};
ind = cont = 1;
while (cont)
word = words[ind];
cont = ind;
if (toint(word))
try_ = {@try_, word};
ind = ind + 1;
else
for set in ($time_utils.time_units)
if (word in set)
try_ = {@try_, word};
ind = ind + 1;
endif
endfor
endif
if ((cont == ind) || (ind > length(words)))
cont = 0;
endif
endwhile
dur = $time_utils:parse_english_time_interval(@try_);
rest = $string_utils:from_list(words[ind..$], " ");
return {1, time(), dur, rest};
else
return {0, argstr};
endif
.
#57:34
"Called by @[un]<color>list to check existence of the target site.";
"=> {done okay, LIST of sites to remove}";
if (caller != this)
return E_PERM;
endif
{undo, which, target, is_literal, entrylist} = args;
rm = {};
confirm = 0;
if (is_literal)
for s in (entrylist)
if ((i = index(s, target + ".")) == 1)
"... target is a prefix of s, s should probably go...";
rm = {@rm, s};
elseif (index(target + ".", s + ".") != 1)
"... s is not a prefix of target...";
elseif (undo)
player:notify(tostr("You will need to un", which, " subnet ", s, " as well."));
elseif (confirm)
player:notify(tostr("...Subnet ", s, " already ", which, "ed..."));
else
player:notify(tostr("Subnet ", s, " already ", which, "ed."));
if (!(confirm = $command_utils:yes_or_no(tostr(which, " ", target, " anyway?"))))
return {0, {}};
endif
endif
endfor
else
for s in (entrylist)
if ((i = rindex(s, "." + target)) && (i == (length(s) - length(target))))
"... target is a suffix of s, s should probably go...";
rm = {@rm, s};
elseif ((!(i = rindex("." + target, "." + s))) || (i < ((length(target) - length(s)) + 1)))
"... s is not a suffix of target...";
elseif (undo)
player:notify(tostr("You will need to un", which, " domain `", s, "' as well."));
elseif (confirm)
player:notify(tostr("...Domain `", s, "' already ", which, "ed..."));
else
player:notify(tostr("Domain `", s, "' already ", which, "ed."));
if (!(confirm = $command_utils:yes_or_no(tostr(which, " ", target, " anyway?"))))
return {0, {}};
endif
endif
endfor
endif
return {1, rm};
.
#57:35
"Syntax:  @lock-login <message>";
"         @lock-login! <message>";
"         @unlock-login";
"";
"The @lock-login calls prevent all non-wizard users from logging in, displaying <message> to them when they try.  (The second syntax, with @lock-login!, additionally boots any nonwizards who are already connected.)  @unlock-login turns this off.";
if (caller != this)
raise(E_PERM);
elseif (verb[2] == "u")
$no_connect_message = 0;
player:notify("Login restrictions removed.");
elseif (!argstr)
player:notify("You must provide some message to display to users who attempt to login:  @lock-login <message>");
else
$no_connect_message = argstr;
player:notify(tostr("Logins are now blocked for non-wizard players.  Message displayed when attempted:  ", $no_connect_message));
if (verb == "@lock-login!")
wizards = $wiz_utils:all_wizards_unadvertised();
for x in (connected_players())
if (!(x in wizards))
boot_player(x);
endif
endfor
player:notify("All nonwizards have been booted.");
endif
endif
.
#57:36
"...was on $player, now archived here for posterity...";
"Runs the old->new format conversion on every message in this.messages.";
" => 1 if successful";
" => 0 if anything toward happened during a suspension";
"      (e.g., new message received, someone deleted stuff) ";
"      in which case this.messages is left as if this routine were never run.";
if (!$perm_utils:controls(caller_perms(), this))
return E_PERM;
endif
msgs = {};
i = 1;
for m in (oldmsgs = this.messages)
msgs = {@msgs, {m[1], $mail_agent:__convert_new(@m[2])}};
if ($command_utils:running_out_of_time())
player:notify(tostr("...", i, " ", this));
suspend(0);
if (oldmsgs != this.messages)
return 0;
endif
endif
i = i + 1;
endfor
this.messages = msgs;
return 1;
.
#57:37
if ((!player.wizard) || (caller != this))
raise(E_PERM);
endif
"Noop. Placeholder verb for MOO-specific cleanups.";
.
#58:0
set_task_perms(player);
if (!player.programmer)
player:notify("You need to be a programmer to do this.");
player:notify("If you want to become a programmer, talk to a wizard.");
return;
elseif (!$quota_utils:property_addition_permitted(player))
player:tell("Property addition not permitted because quota exceeded.");
return;
endif
nargs = length(args);
usage = tostr("Usage:  ", verb, " <object>.<prop-name> [<init_value> [<perms> [<owner>]]]");
if ((nargs < 1) || (!(spec = $code_utils:parse_propref(args[1]))))
player:notify(usage);
return;
endif
object = player:my_match_object(spec[1]);
name = spec[2];
if ($command_utils:object_match_failed(object, spec[1]))
return;
endif
if (nargs < 2)
value = 0;
else
q = $string_utils:prefix_to_value(argstr[$string_utils:word_start(argstr)[2][1]..$]);
if (q[1] == 0)
player:notify(tostr("Syntax error in initial value:  ", q[2]));
return;
endif
value = q[2];
args = {args[1], value, @$string_utils:words(q[1])};
nargs = length(args);
endif
default = player:prog_option("@prop_flags");
if (!default)
default = "rc";
endif
perms = (nargs < 3) ? default | $perm_utils:apply(default, args[3]);
if (nargs < 4)
owner = player;
else
owner = $string_utils:match_player(args[4]);
if ($command_utils:player_match_result(owner, args[4])[1])
return;
endif
endif
if (nargs > 4)
player:notify(usage);
return;
endif
try
add_property(object, name, value, {owner, perms});
player:notify(tostr("Property added with value ", toliteral(object.(name)), "."));
except (E_INVARG)
if ($object_utils:has_property(object, name))
player:notify(tostr("Property ", object, ".", name, " already exists."));
else
for i in [1..length(perms)]
if (!index("rcw", perms[i]))
player:notify(tostr("Unknown permission bit:  ", perms[i]));
return;
endif
endfor
"...the only other possibility...";
player:notify("Property is already defined on one or more descendents.");
player:notify(tostr("Try @check-prop ", args[1]));
endif
except e (ANY)
player:notify(e[2]);
endtry
.
#58:1
set_task_perms(player);
bynumber = verb == "@chmod#";
if (length(args) != 2)
player:notify(tostr("Usage:  ", verb, " <object-or-property-or-verb> <permissions>"));
return;
endif
{what, perms} = args;
if (spec = $code_utils:parse_verbref(what))
if (!player.programmer)
player:notify("You need to be a programmer to do this.");
player:notify("If you want to become a programmer, talk to a wizard.");
return;
endif
if (valid(object = player:my_match_object(spec[1])))
vname = spec[2];
if (bynumber)
vname = $code_utils:toint(vname);
if (vname == E_TYPE)
return player:notify("Verb number expected.");
elseif ((vname < 1) || `vname > length(verbs(object)) ! E_PERM => 0')
return player:notify("Verb number out of range.");
endif
endif
try
info = verb_info(object, vname);
if (!valid(owner = info[1]))
player:notify(tostr("That verb is owned by an invalid object (", owner, "); it needs to be @chowned."));
elseif (!is_player(owner))
player:notify(tostr("That verb is owned by a non-player object (", owner.name, ", ", owner, "); it needs to be @chowned."));
else
info[2] = perms = $perm_utils:apply(info[2], perms);
try
result = set_verb_info(object, vname, info);
player:notify(tostr("Verb permissions set to \"", perms, "\"."));
except (E_INVARG)
player:notify(tostr("\"", perms, "\" is not a valid permissions string for a verb."));
except e (ANY)
player:notify(e[2]);
endtry
endif
except (E_VERBNF)
player:notify("That object does not define that verb.");
except error (ANY)
player:notify(error[2]);
endtry
return;
endif
elseif (bynumber)
return player:notify("@chmod# can only be used for verbs.");
elseif (index(what, ".") && (spec = $code_utils:parse_propref(what)))
if (valid(object = player:my_match_object(spec[1])))
pname = spec[2];
try
info = property_info(object, pname);
info[2] = perms = $perm_utils:apply(info[2], perms);
try
result = set_property_info(object, pname, info);
player:notify(tostr("Property permissions set to \"", perms, "\"."));
except (E_INVARG)
player:notify(tostr("\"", perms, "\" is not a valid permissions string for a property."));
except error (ANY)
player:notify(error[2]);
endtry
except (E_PROPNF)
player:notify("That object does not have that property.");
except error (ANY)
player:notify(error[2]);
endtry
return;
endif
elseif (valid(object = player:my_match_object(what)))
perms = $perm_utils:apply(((object.r ? "r" | "") + (object.w ? "w" | "")) + (object.f ? "f" | ""), perms);
r = w = f = 0;
for i in [1..length(perms)]
if (perms[i] == "r")
r = 1;
elseif (perms[i] == "w")
w = 1;
elseif (perms[i] == "f")
f = 1;
else
player:notify(tostr("\"", perms, "\" is not a valid permissions string for an object."));
return;
endif
endfor
try
object.r = r;
object.w = w;
object.f = f;
player:notify(tostr("Object permissions set to \"", perms, "\"."));
except (E_PERM)
player:notify("Permission denied.");
endtry
return;
endif
$command_utils:object_match_failed(object, what);
.
#58:2
if (player != caller)
return;
endif
set_task_perms(player);
if (!player.programmer)
player:notify("You need to be a programmer to do this.");
player:notify("If you want to become a programmer, talk to a wizard.");
return;
endif
if (!(args && (spec = $code_utils:parse_verbref(args[1]))))
player:notify(tostr(args ? ("\"" + args[1]) + "\"?  " | "", "<object>:<verb>  expected."));
elseif ($command_utils:object_match_failed(object = player:my_match_object(spec[1]), spec[1]))
"...can't find object...";
else
if (verb == "@args#")
name = $code_utils:toint(spec[2]);
if (name == E_TYPE)
return player:notify("Verb number expected.");
elseif ((name < 1) || `name > length(verbs(object)) ! E_PERM => 0')
return player:notify("Verb number out of range.");
endif
else
name = spec[2];
endif
try
info = verb_args(object, name);
if (typeof(pas = $code_utils:parse_argspec(@listdelete(args, 1))) != LIST)
"...arg spec is bogus...";
player:notify(tostr(pas));
elseif (!(newargs = pas[1]))
player:notify($string_utils:from_list(info, " "));
elseif (pas[2])
player:notify(tostr("\"", pas[2][1], "\" unexpected."));
else
info[2] = info[2][1..index(info[2] + "/", "/") - 1];
info = {@newargs, @info[length(newargs) + 1..$]};
try
result = set_verb_args(object, name, info);
player:notify("Verb arguments changed.");
except (E_INVARG)
player:notify(tostr("\"", info[2], "\" is not a valid preposition (?)"));
except error (ANY)
player:notify(error[2]);
endtry
endif
except (E_VERBNF)
player:notify("That object does not have a verb with that name.");
except error (ANY)
player:notify(error[2]);
endtry
endif
.
#58:3
"A MOO-code evaluator.  Type `;CODE' or `eval CODE'.";
"Calls player:eval_cmd_string to first transform CODE in any way appropriate (e.g., prefixing .eval_env) and then do the actual evaluation.  See documentation for this:eval_cmd_string";
"If you set your .eval_time property to 1, you find out how many ticks and seconds you used.";
"If eval-d is used, the evaluation is performed as if the debug flag were unset.";
if (player != this)
player:tell("I don't understand that.");
return;
elseif (!player.programmer)
player:tell("You need to be a programmer to eval code.");
return;
endif
set_task_perms(player);
result = player:eval_cmd_string(argstr, verb != "eval-d");
if (result[1])
player:notify(this:eval_value_to_string(result[2]));
if (player:prog_option("eval_time") && (!`output_delimiters(player)[2] ! ANY'))
player:notify(tostr("[used ", result[3], " tick", (result[3] != 1) ? "s, " | ", ", result[4], " second", (result[4] != 1) ? "s" | "", ".]"));
endif
else
player:notify_lines(result[2]);
nerrors = length(result[2]);
player:notify(tostr(nerrors, " error", (nerrors == 1) ? "." | "s."));
endif
.
#58:4
set_task_perms(player);
if ((length(args) != 1) || (!(spec = $code_utils:parse_propref(args[1]))))
player:notify(tostr("Usage:  ", verb, " <object>.<property>"));
return;
endif
object = player:my_match_object(spec[1]);
pname = spec[2];
if ($command_utils:object_match_failed(object, spec[1]))
return;
endif
try
result = delete_property(object, pname);
player:notify("Property removed.");
except (E_PROPNF)
player:notify("That object does not define that property.");
except res (ANY)
player:notify(res[2]);
endtry
.
#58:5
set_task_perms(player);
if (!player.programmer)
player:notify("You need to be a programmer to do this.");
player:notify("If you want to become a programmer, talk to a wizard.");
return;
elseif (!$quota_utils:verb_addition_permitted(player))
player:tell("Verb addition not permitted because quota exceeded.");
return;
endif
if (!(args && (spec = $code_utils:parse_verbref(args[1]))))
player:notify(tostr("Usage:  ", verb, " <object>:<verb-name(s)> [<dobj> [<prep> [<iobj> [<permissions> [<owner>]]]]]"));
return;
elseif ($command_utils:object_match_failed(object = player:my_match_object(spec[1]), spec[1]))
return;
endif
name = spec[2];
"...Adding another verb of the same name is often a mistake...";
namelist = $string_utils:explode(name);
for n in (namelist)
if (i = index(n, "*"))
n = n[1..i - 1] + n[i + 1..$];
endif
if ((hv = $object_utils:has_verb(object, n)) && (hv[1] == object))
player:notify(tostr("Warning:  Verb `", n, "' already defined on that object."));
endif
endfor
if (typeof(pas = $code_utils:parse_argspec(@listdelete(args, 1))) != LIST)
player:notify(tostr(pas));
return;
endif
verbargs = pas[1] || (player:prog_option("verb_args") || {});
verbargs = {@verbargs, "none", "none", "none"}[1..3];
rest = pas[2];
if (verbargs == {"this", "none", "this"})
perms = "rxd";
else
perms = "rd";
endif
if (rest)
perms = $perm_utils:apply(perms, rest[1]);
endif
if (length(rest) < 2)
owner = player;
elseif (length(rest) > 2)
player:notify(tostr("\"", rest[3], "\" unexpected."));
return;
elseif ($command_utils:player_match_result(owner = $string_utils:match_player(rest[2]), rest[2])[1])
return;
elseif (owner == $nothing)
player:notify("Verb can't be owned by no one!");
return;
endif
try
x = add_verb(object, {owner, perms, name}, verbargs);
player:notify(tostr("Verb added (", (x > 0) ? x | length($object_utils:accessible_verbs(object)), ")."));
except (E_INVARG)
player:notify(tostr(rest ? tostr("\"", perms, "\" is not a valid set of permissions.") | tostr("\"", verbargs[2], "\" is not a valid preposition (?)")));
except e (ANY)
player:notify(e[2]);
endtry
.
#58:6
set_task_perms(player);
if (!(args && (spec = $code_utils:parse_verbref(args[1]))))
player:notify(tostr("Usage:  ", verb, " <object>:<verb>"));
elseif ($command_utils:object_match_failed(object = player:my_match_object(spec[1]), spec[1]))
"...bogus object...";
elseif (typeof(argspec = $code_utils:parse_argspec(@listdelete(args, 1))) != LIST)
player:notify(tostr(argspec));
elseif (argspec[2])
player:notify($string_utils:from_list(argspec[2], " ") + "??");
elseif (length(argspec = argspec[1]) in {1, 2})
player:notify({"Missing preposition", "Missing iobj specification"}[length(argspec)]);
else
verbname = spec[2];
if (verb == "@rmverb#")
loc = $code_utils:toint(verbname);
if (loc == E_TYPE)
return player:notify("Verb number expected.");
elseif ((loc < 1) || (loc > `length(verbs(object)) ! E_PERM => 0'))
return player:notify("Verb number out of range.");
endif
else
if (index(verbname, "*") > 1)
verbname = strsub(verbname, "*", "");
endif
loc = $code_utils:find_last_verb_named(object, verbname);
if (argspec)
argspec[2] = $code_utils:full_prep(argspec[2]) || argspec[2];
while ((loc != -1) && (`verb_args(object, loc) ! ANY' != argspec))
loc = $code_utils:find_last_verb_named(object, verbname, loc - 1);
endwhile
endif
if (loc < 0)
player:notify(tostr("That object does not define that verb", argspec ? " with those args." | "."));
return;
endif
endif
info = `verb_info(object, loc) ! ANY';
vargs = `verb_args(object, loc) ! ANY';
vcode = `verb_code(object, loc, 1, 1) ! ANY';
try
delete_verb(object, loc);
if (info)
player:notify(tostr("Verb ", object, ":", info[3], " (", loc, ") {", $string_utils:from_list(vargs, " "), "} removed."));
if (player:prog_option("rmverb_mail_backup"))
$mail_agent:send_message(player, player, tostr(object, ":", info[3], " (", loc, ") {", $string_utils:from_list(vargs, " "), "}"), vcode);
endif
else
player:notify(tostr("Unreadable verb ", object, ":", loc, " removed."));
endif
except e (ANY)
player:notify(e[2]);
endtry
endif
.
#58:7
"Syntax:  @forked [player]";
"         @forked all wizards";
"";
"For a normal player, shows all the tasks you have waiting in your queue, especially those forked or suspended. A wizard will see all the tasks of all the players unless the optional argument is provided. @forked-v*erbose will show the full callers() stack for each task that has suspended (not a fresh fork).";
"The second form is only usable by wizards and provides an output of all tasks owned by characters who are .wizard=1. Useful to find a task that may get put in a random queue due to $wiz_utils:random_wizard. Or even finding verbs that run with wizard permissions that shouldn't be.";
set_task_perms(player);
verbose = $code_utils:verbname_match("@forked-v*erbose", verb);
if (!dobjstr)
tasks = queued_tasks();
elseif ((dobjstr == "all wizards") && player.wizard)
tasks = {};
for t in (queued_tasks())
if (valid(t[5]) && t[5].wizard)
tasks = {@tasks, t};
endif
$command_utils:suspend_if_needed(1);
endfor
elseif ($command_utils:player_match_result(dobj = $string_utils:match_player(dobjstr), dobjstr)[1])
return;
elseif (typeof(tasks = $wiz_utils:queued_tasks(dobj)) != LIST)
player:notify(tostr(verb, " ", dobj.name, "(", dobj, "):  ", tasks));
return;
endif
if (tasks)
su = $string_utils;
player:notify("Queue ID    Start Time            Owner         {Size} Verb (Line) [This]");
player:notify("--------    ----------            -----         -----------------");
now = time();
for task in (tasks)
$command_utils:suspend_if_needed(0);
{q_id, start, nu, nu2, owner, vloc, vname, lineno, this, ?size = 0} = task;
time = (start >= now) ? ctime(start)[5..24] | su:left((start == -1) ? "Reading input ..." | tostr(now - start, " seconds ago..."), 20);
owner_name = valid(owner) ? owner.name | tostr("Dead ", owner);
player:notify(tostr(su:left(tostr(q_id), 10), "  ", time, "  ", su:left(owner_name, 12), "  {", $building_utils:size_string(size), "} ", vloc, ":", vname, " (", lineno, ")", (this != vloc) ? tostr(" [", this, "]") | ""));
if (verbose || (index(vname, "suspend") && (vloc == $command_utils)))
"Display the first (or, if verbose, every) line of the callers() list, which is gotten by taking the second through last elements of task_stack().";
stack = `task_stack(q_id, 1) ! E_INVARG => {}';
for frame in (stack[2..verbose ? $ | 2])
{sthis, svname, sprogger, svloc, splayer, slineno} = frame;
player:notify(tostr("                    Called By...  ", su:left(valid(sprogger) ? sprogger.name | tostr("Dead ", sprogger), 19), "  ", svloc, ":", svname, (sthis != svloc) ? tostr(" [", sthis, "]") | "", " (", slineno, ")"));
endfor
endif
endfor
player:notify("-----------------------------------------------------------------");
else
player:notify("No tasks.");
endif
.
#58:8
"Kills one or more tasks.";
"Arguments:";
"   object:verb -- kills all tasks which were started from that object and verb.";
"   all -- kills all tasks owned by invoker";
"   all player-name -- wizard variant:  kills all tasks owned by player.";
"   all everyone -- wizard variant:  really kills all tasks.";
"   Integer taskid -- kills the specifically named task.";
"   soon [integer] -- kills all tasks scheduled to run in the next [integer] seconds, which defaults to 60.";
"   %integer -- kills all tasks which end in the digits contained in integer.";
"   The @killquiet alias kills tasks without the pretty printout if more than one task is being killed.";
set_task_perms(player);
quiet = index(verb, "q");
if (length(args) == 0)
player:notify_lines({tostr("Usage:  ", verb, " [object]:[verb]"), tostr("        ", verb, " task_id"), tostr("        ", verb, " soon [number-of-seconds]", player.wizard ? " [everyone|<player name>]" | ""), tostr("        ", verb, " all", player.wizard ? " [everyone|<player name>]" | "")});
return;
elseif (taskid = toint(args[1]))
elseif (all = args[1] == "all")
everyone = 0;
realplayer = player;
if (player.wizard && (length(args) > 1))
realplayer = $string_utils:match_player(args[2]);
everyone = args[2] == "everyone";
if ((!valid(realplayer)) && (!everyone))
$command_utils:player_match_result(realplayer, args[2]);
return;
elseif (!everyone)
set_task_perms(realplayer);
endif
endif
elseif (soon = args[1] == "soon")
realplayer = player;
if (length(args) > 1)
soon = toint(args[2]);
if ((soon <= 0) && (!player.wizard))
player:notify(tostr("Usage:  ", verb, " soon [positive-number-of-seconds]"));
return;
elseif (player.wizard)
result = this:kill_aux_wizard_parse(@args[2..$]);
soon = result[1];
if (result[1] < 0)
"already gave them an error message";
return;
elseif (result[2] == 1)
everyone = 1;
else
everyone = 0;
set_task_perms(result[2]);
realplayer = result[2];
endif
endif
else
soon = 60;
everyone = 0;
endif
elseif (percent = args[1][1] == "%")
l = length(args[1]);
digits = toint(args[1][2..l]);
percent = toint("1" + "0000000000"[1..l - 1]);
elseif (colon = index(argstr, ":"))
whatstr = argstr[1..colon - 1];
vrb = argstr[colon + 1..$];
if (whatstr)
what = player:my_match_object(whatstr);
endif
else
player:notify_lines({tostr("Usage:  ", verb, " [object]:[verb]"), tostr("        ", verb, " task_id"), tostr("        ", verb, " soon [number-of-seconds]", player.wizard ? " [everyone|<player name>]" | ""), tostr("        ", verb, " all", player.wizard ? " [\"everyone\"|<player name>]" | "")});
return;
endif
"OK, parsed the line, and punted them if it was bogus.  This verb could have been a bit shorter at the expense of readability.  I think it's getting towards unreadable as is.  At this point we've set_task_perms'd, and set up an enormous number of local variables.  Evaluate them in the order we set them, and we should never get var not found.";
queued_tasks = queued_tasks();
killed = 0;
if (taskid)
try
kill_task(taskid);
player:notify(tostr("Killed task ", taskid, "."));
killed = 1;
except error (ANY)
player:notify(tostr("Can't kill task ", taskid, ": ", error[2]));
endtry
elseif (all)
for task in (queued_tasks)
if (everyone || (realplayer == task[5]))
`kill_task(task[1]) ! ANY';
killed = killed + 1;
if (!quiet)
this:_kill_task_message(task);
endif
endif
$command_utils:suspend_if_needed(3, "... killing tasks");
endfor
elseif (soon)
now = time();
for task in (queued_tasks)
if (((task[2] - now) < soon) && ((!player.wizard) || (everyone || (realplayer == task[5]))))
`kill_task(task[1]) ! ANY';
killed = killed + 1;
if (!quiet)
this:_kill_task_message(task);
endif
endif
$command_utils:suspend_if_needed(3, "... killing tasks");
endfor
elseif (percent)
for task in (queued_tasks)
if (digits == (task[1] % percent))
`kill_task(task[1]) ! ANY';
killed = killed + 1;
if (!quiet)
this:_kill_task_message(task);
endif
endif
$command_utils:suspend_if_needed(3, "... killing tasks");
endfor
elseif ((colon || vrb) || whatstr)
for task in (queued_tasks)
if ((((((whatstr == "") || (valid(task[6]) && (index(task[6].name, whatstr) == 1))) || (valid(task[9]) && (index(task[9].name, whatstr) == 1))) || (task[9] == what)) || (task[6] == what)) && ((vrb == "") || (index(" " + strsub(task[7], "*", ""), " " + vrb) == 1)))
`kill_task(task[1]) ! ANY';
killed = killed + 1;
if (!quiet)
this:_kill_task_message(task);
endif
endif
$command_utils:suspend_if_needed(3, "... killing tasks");
endfor
else
player:notify("Something is funny; I didn't understand your @kill command.  You shouldn't have gotten here.  Please send yduJ mail saying you got this message from @kill, and what you had typed to @kill.");
endif
if (!killed)
player:notify("No tasks killed.");
elseif (quiet)
player:notify(tostr("Killed ", killed, " tasks."));
endif
.
#58:9
"Usage:  @copy source:verbname to target[:verbname]";
"  the target verbname, if not given, defaults to that of the source.  If the target verb doesn't already exist, a new verb is installed with the same args, names, code, and permission flags as the source.  Otherwise, the existing target's verb code is overwritten and no other changes are made.";
"This the poor man's version of multiple inheritance... the main problem is that someone may update the verb you're copying and you'd never know.";
"  if @copy-x is used, makes an unusable copy (!x, this none this).  If @copy-move is used, deletes the source verb as well.";
set_task_perms(player);
if (!player.programmer)
player:notify("You need to be a programmer to do this.");
player:notify("If you want to become a programmer, talk to a wizard.");
return;
elseif ((verb != "@copy-move") && (!$quota_utils:verb_addition_permitted(player)))
player:notify("Verb addition not permitted because quota exceeded.");
return;
elseif ((!(from = $code_utils:parse_verbref(dobjstr))) || (!iobjstr))
player:notify(tostr("Usage:  ", verb, " obj:verb to obj:verb"));
player:notify(tostr("        ", verb, " obj:verb to obj"));
player:notify(tostr("        ", verb, " obj:verb to :verb"));
return;
elseif ($command_utils:object_match_failed(fobj = player:my_match_object(from[1]), from[1]))
return;
elseif (iobjstr[1] == ":")
to = {fobj, iobjstr[2..$]};
elseif (!(to = $code_utils:parse_verbref(iobjstr)))
iobj = player:my_match_object(iobjstr);
if ($command_utils:object_match_failed(iobj, iobjstr))
return;
endif
to = {iobj, from[2]};
elseif ($command_utils:object_match_failed(tobj = player:my_match_object(to[1]), to[1]))
return;
else
to[1] = tobj;
endif
from[1] = fobj;
if (verb == "@copy-move")
if ((!$perm_utils:controls(player, fobj)) && (!$quota_utils:verb_addition_permitted(player)))
player:notify("Won't be able to delete old verb.  Quota exceeded, so unable to continue.  Aborted.");
return;
elseif ($perm_utils:controls(player, fobj))
"only try to move if the player controls the verb. Otherwise, skip and treat as regular @copy";
if (typeof(result = $code_utils:move_verb(@from, @to)) == ERR)
player:notify(tostr("Unable to move verb from ", from[1], ":", from[2], " to ", to[1], ":", to[2], " --> ", result));
else
player:notify(tostr("Moved verb from ", from[1], ":", from[2], " to ", result[1], ":", result[2]));
endif
return;
else
player:notify("Won't be able to delete old verb.  Treating this as regular @copy.");
endif
endif
to_firstname = strsub(to[2][1..index(to[2] + " ", " ") - 1], "*", "") || "*";
if ((!(hv = $object_utils:has_verb(to[1], to_firstname))) || (hv[1] != to[1]))
if ((!(info = `verb_info(@from) ! ANY')) || (!(vargs = `verb_args(@from) ! ANY')))
player:notify(tostr("Retrieving ", from[1], ":", from[2], " --> ", info && vargs));
return;
endif
if (!player.wizard)
info[1] = player;
endif
if (verb == "@copy-x")
"... make sure this is an unusable copy...";
info[2] = strsub(info[2], "x", "");
vargs = {"this", "none", "this"};
endif
if (from[2] != to[2])
info[3] = to[2];
endif
if (ERR == typeof(e = `add_verb(to[1], info, vargs) ! ANY'))
player:notify(tostr("Adding ", to[1], ":", to[2], " --> ", e));
return;
endif
endif
code = `verb_code(@from) ! ANY';
owner = `verb_info(@from)[1] ! ANY';
if (typeof(code) == ERR)
player:notify(tostr("Couldn't retrieve code from ", from[1].name, " (", from[1], "):", from[2], " => ", code));
return;
endif
if (owner != player)
comment = tostr("Copied from ", $string_utils:nn(from[1]), ":", from[2], (from[1] == owner) ? "" | tostr(" [verb author ", $string_utils:nn(owner), "]"), " at ", ctime());
code = {$string_utils:print(comment) + ";", @code};
if (!player:prog_option("copy_expert"))
player:notify("Use of @copy is discouraged.  Please do not use @copy if you can use inheritance or features instead.  Use @copy carefully, and only when absolutely necessary, as it is wasteful of database space.");
endif
endif
e = `set_verb_code(to[1], to_firstname, code) ! ANY';
if (ERR == typeof(e))
player:notify(tostr("Copying ", from[1], ":", from[2], " to ", to[1], ":", to[2], " --> ", e));
elseif ((typeof(e) == LIST) && e)
player:notify(tostr("Copying ", from[1], ":", from[2], " to ", to[1], ":", to[2], " -->"));
player:notify_lines(e);
else
player:notify(tostr(to[1], ":", to[2], " code set."));
endif
.
#58:10
set_task_perms(caller_perms());
task = args[1];
player:notify(tostr("Killed: ", $string_utils:right(tostr("task ", task[1]), 17), ", verb ", task[6], ":", task[7], ", line ", task[8], (task[9] != task[6]) ? ", this==" + tostr(task[9]) | ""));
.
#58:11
"This version of @program deals with multiple verbs having the same name.";
"... @program <object>:<verbname> <dobj> <prep> <iobj>  picks the right one.";
if (player != caller)
return;
endif
set_task_perms(player);
"...";
"...catch usage errors first...";
"...";
punt = "...set punt to 0 only if everything works out...";
if (!(args && (spec = $code_utils:parse_verbref(args[1]))))
player:notify(tostr("Usage: ", verb, " <object>:<verb> [<dobj> <prep> <iobj>]"));
elseif ($command_utils:object_match_failed(object = player:my_match_object(spec[1]), spec[1]))
"...bogus object...";
elseif (typeof(argspec = $code_utils:parse_argspec(@listdelete(args, 1))) != LIST)
player:notify(tostr(argspec));
elseif (verb == "@program#")
verbname = $code_utils:toint(spec[2]);
if (verbname == E_TYPE)
player:notify("Verb number expected.");
elseif (length(args) > 1)
player:notify("Don't give args for @program#.");
elseif ((verbname < 1) || `verbname > length(verbs(object)) ! E_PERM')
player:notify("Verb number out of range.");
else
argspec = 0;
punt = 0;
endif
elseif (argspec[2])
player:notify($string_utils:from_list(argspec[2], " ") + "??");
elseif (length(argspec = argspec[1]) in {1, 2})
player:notify({"Missing preposition", "Missing iobj specification"}[length(argspec)]);
else
punt = 0;
verbname = spec[2];
if (index(verbname, "*") > 1)
verbname = strsub(verbname, "*", "");
endif
endif
"...";
"...if we have an argspec, we'll need to reset verbname...";
"...";
if (punt)
elseif (argspec)
if (!(argspec[2] in {"none", "any"}))
argspec[2] = $code_utils:full_prep(argspec[2]);
endif
loc = $code_utils:find_verb_named(object, verbname);
while ((loc > 0) && (`verb_args(object, loc) ! ANY' != argspec))
loc = $code_utils:find_verb_named(object, verbname, loc + 1);
endwhile
if (!loc)
punt = "...can't find it....";
player:notify("That object has no verb matching that name + args.");
else
verbname = loc;
endif
else
loc = 0;
endif
"...";
"...get verb info...";
"...";
if (punt || (!(punt = "...reset punt to TRUE...")))
else
try
info = verb_info(object, verbname);
punt = 0;
aliases = info[3];
if (!loc)
loc = aliases in (verbs(object) || {});
endif
except (E_VERBNF)
player:notify("That object does not have that verb definition.");
except error (ANY)
player:notify(error[2]);
endtry
endif
"...";
"...read the code...";
"...";
if (punt)
player:notify(tostr("Now ignoring code for ", args ? args[1] | "nothing in particular", "."));
$command_utils:read_lines();
player:notify("Verb code ignored.");
else
player:notify(tostr("Now programming ", object.name, ":", aliases, "(", (!loc) ? "??" | loc, ")."));
lines = $command_utils:read_lines_escape((active = player in $verb_editor.active) ? {} | {"@edit"}, {tostr("You are editing ", $string_utils:nn(object), ":", verbname, "."), @active ? {} | {"Type `@edit' to take this into the verb editor."}});
if (lines[1] == "@edit")
$verb_editor:invoke(args[1], "@program", lines[2]);
return;
endif
try
if (result = set_verb_code(object, verbname, lines[2]))
player:notify_lines(result);
player:notify(tostr(length(result), " error(s)."));
player:notify("Verb not programmed.");
else
player:notify("0 errors.");
player:notify("Verb programmed.");
endif
except error (ANY)
player:notify(error[2]);
player:notify("Verb not programmed.");
endtry
endif
.
#58:12
"Usage: @setenv <environment string>";
"Set your .eval_env property.";
set_task_perms(player);
if (!argstr)
player:notify(tostr("Usage:  ", verb, " <environment string>"));
return;
endif
player:notify(tostr("Current eval environment is: ", player.eval_env));
result = player:set_eval_env(argstr);
if (typeof(result) == ERR)
player:notify(tostr(result));
return;
endif
player:notify(tostr(".eval_env set to \"", player.eval_env, "\" (", player.eval_ticks, " ticks)."));
.
#58:13
"Usage: @prospectus <player> [from <start>] [to <end>]";
set_task_perms((caller_perms() == $nothing) ? player | caller_perms());
dobj = dobjstr ? $string_utils:match_player(dobjstr) | player;
if ($command_utils:player_match_result(dobj, dobjstr)[1])
return;
endif
dobjwords = $string_utils:words(dobjstr);
if (args[1..length(dobjwords)] == dobjwords)
args = args[length(dobjwords) + 1..$];
endif
if (!(parse_result = $code_utils:_parse_audit_args(@args)))
player:notify(tostr("Usage:  ", verb, " player [from <start>] [to <end>]"));
return;
endif
return $building_utils:do_prospectus(dobj, @parse_result);
.
#58:14
"@display <object>[.[property]]*[,[inherited_property]]*[:[verb]]*[;[inherited_verb]]*";
if (player != this)
player:notify(tostr("Sorry, you can't use ", this:title(), "'s `", verb, "' command."));
return E_PERM;
endif
"null names for properties and verbs are interpreted as meaning all of them.";
opivu = {{}, {}, {}, {}, {}};
string = "";
punc = 1;
literal = 0;
set_task_perms(player);
for jj in [1..length(argstr)]
j = argstr[jj];
if (literal)
string = string + j;
literal = 0;
elseif (j == "\\")
literal = 1;
elseif (y = index(".,:;", j))
opivu[punc] = {@opivu[punc], string};
punc = 1 + y;
string = "";
else
string = string + j;
endif
endfor
opivu[punc] = {@opivu[punc], string};
objname = opivu[1][1];
it = this:my_match_object(objname);
if ($command_utils:object_match_failed(it, objname))
return;
endif
readable = (it.owner == this) || (it.r || this.wizard);
cant = {};
if ("" in opivu[2])
if (readable)
prop = properties(it);
else
prop = {};
cant = setadd(cant, it);
endif
if (!this:display_option("thisonly"))
what = it;
while ((!prop) && valid(what = parent(what)))
if ((what.owner == this) || (what.r || this.wizard))
prop = properties(what);
else
cant = setadd(cant, what);
endif
endwhile
endif
else
prop = opivu[2];
endif
if ("" in opivu[3])
inh = {};
for what in ({it, @$object_utils:ancestors(it)})
if (((what.owner == this) || what.r) || this.wizard)
inh = {@inh, @properties(what)};
else
cant = setadd(cant, what);
endif
endfor
else
inh = opivu[3];
endif
for q in (inh)
if (q in `properties(it) ! ANY => {}')
prop = setadd(prop, q);
inh = setremove(inh, q);
endif
endfor
vrb = {};
if ("" in opivu[4])
if (readable)
vrbs = verbs(it);
else
vrbs = $object_utils:accessible_verbs(it);
cant = setadd(cant, it);
endif
what = it;
if (!this:display_option("thisonly"))
while ((!vrbs) && valid(what = parent(what)))
if ((what.owner == this) || (what.r || this.wizard))
vrbs = verbs(what);
else
cant = setadd(cant, what);
endif
endwhile
endif
for n in [1..length(vrbs)]
vrb = setadd(vrb, {what, n});
endfor
else
for w in (opivu[4])
if (y = $object_utils:has_verb(it, w))
vrb = setadd(vrb, {y[1], w});
else
this:notify(tostr("No such verb, \"", w, "\""));
endif
endfor
endif
if ("" in opivu[5])
for z in ({it, @$object_utils:ancestors(it)})
if (((this == z.owner) || z.r) || this.wizard)
for n in [1..length(verbs(z))]
vrb = setadd(vrb, {z, n});
endfor
else
cant = setadd(cant, z);
endif
endfor
else
for w in (opivu[5])
if (typeof(y = $object_utils:has_verb(it, w)) == LIST)
vrb = setadd(vrb, {y[1], w});
else
this:notify(tostr("No such verb, \"", w, "\""));
endif
endfor
endif
if (({""} in opivu) || (opivu[2..5] == {{}, {}, {}, {}}))
this:notify(tostr(it.name, " (", it, ") [ ", it.r ? "readable " | "", it.w ? "writeable " | "", it.f ? "fertile " | "", is_player(it) ? "(player) " | "", it.programmer ? "programmer " | "", it.wizard ? "wizard " | "", "]"));
if (it.owner != (is_player(it) ? it | this))
this:notify(tostr("  Owned by ", valid(p = it.owner) ? p.name | "** extinct **", " (", p, ")."));
endif
this:notify(tostr("  Child of ", valid(p = parent(it)) ? p.name | "** none **", " (", p, ")."));
if (it.location != $nothing)
this:notify(tostr("  Location ", valid(p = it.location) ? p.name | "** unplace (tell a wizard, fast!) **", " (", p, ")."));
endif
if ($quota_utils.byte_based && $object_utils:has_property(it, "object_size"))
this:notify(tostr("  Size: ", $string_utils:group_number(it.object_size[1]), " bytes at ", this:ctime(it.object_size[2])));
endif
endif
blankargs = this:display_option("blank_tnt") ? {"this", "none", "this"} | #-1;
for b in (vrb)
$command_utils:suspend_if_needed(0);
where = b[1];
q = b[2];
short = (typeof(q) == INT) ? q | strsub(y = index(q, " ") ? q[1..y - 1] | q, "*", "");
inf = `verb_info(where, short) ! ANY';
if ((typeof(inf) == LIST) || (inf == E_PERM))
name = (typeof(inf) == LIST) ? index(inf[3], " ") ? ("\"" + inf[3]) + "\"" | inf[3] | q;
line = $string_utils:left(tostr($string_utils:right(tostr(where), 6), ":", name, " "), 32);
if (inf == E_PERM)
line = line + "   ** unreadable **";
else
line = $string_utils:left(tostr(line, inf[1].name, " (", inf[1], ") "), 53) + ((i = inf[2] in {"x", "xd", "d", "rd"}) ? {" x", " xd", "  d", "r d"}[i] | inf[2]);
vargs = `verb_args(where, short) ! ANY';
if (vargs != blankargs)
if (this:display_option("shortprep") && (!(vargs[2] in {"any", "none"})))
vargs[2] = $code_utils:short_prep(vargs[2]);
endif
line = $string_utils:left(line + " ", 60) + $string_utils:from_list(vargs, " ");
endif
endif
this:notify(line);
elseif (inf == E_VERBNF)
this:notify(tostr(inf));
this:notify(tostr("  ** no such verb, \"", short, "\" **"));
else
this:notify("This shouldn't ever happen. @display is buggy.");
endif
endfor
all = {@prop, @inh};
max = (length(all) < 4) ? 999 | (this:linelen() - 56);
depth = (length(all) < 4) ? -1 | 1;
truncate_owner_names = length(all) > 1;
for q in (all)
$command_utils:suspend_if_needed(0);
inf = `property_info(it, q) ! ANY';
if (inf == E_PROPNF)
if (q in $code_utils.builtin_props)
this:notify(tostr($string_utils:left("," + q, 25), "Built in property            ", $string_utils:abbreviated_value(it.(q), max, depth)));
else
this:notify(tostr("  ** property not found, \"", q, "\" **"));
endif
else
pname = $string_utils:left(tostr((q in `properties(it) ! ANY => {}') ? "." | (`is_clear_property(it, q) ! ANY' ? " " | ","), q, " "), 25);
if (inf == E_PERM)
this:notify(pname + "   ** unreadable **");
else
oname = inf[1].name;
truncate_owner_names && ((length(oname) > 12) && (oname = oname[1..12]));
`inf[2][1] != "r" ! E_RANGE => 1' && (inf[2][1..0] = " ");
`inf[2][2] != "w" ! E_RANGE => 1' && (inf[2][2..1] = " ");
this:notify($string_utils:left(tostr($string_utils:left(tostr(pname, oname, " (", inf[1], ") "), 47), inf[2], " "), 54) + $string_utils:abbreviated_value(it.(q), max, depth));
endif
endif
endfor
if (cant)
failed = {};
for k in (cant)
failed = listappend(failed, tostr(k.name, " (", k, ")"));
endfor
this:notify($string_utils:centre(tostr(" no permission to read ", $string_utils:english_list(failed, ", ", " or ", " or "), ". "), 75, "-"));
else
this:notify($string_utils:centre(" finished ", 75, "-"));
endif
.
#58:15
set_task_perms(player);
"Let 'em @kill it.";
count = 0;
for i in [#0..max_object()]
if ($command_utils:running_out_of_time())
player:notify(tostr("Counting... [", count, "/", i, "]"));
suspend(0);
endif
if (valid(i))
count = count + 1;
endif
endfor
player:notify(tostr("There are ", count, " valid objects out of ", toint(max_object()) + 1, " allocated object numbers."));
.
#58:16
"@gethelp [<topic>] [from <db or dblist>]";
"  Prints the raw text of topic from the appropriate help db.";
"  With no argument, gets the blank (\"\") topic from wherever it lives";
"  Text is printed as a script for changing this help topic ";
"  (somewhat like @dump...)";
if (!prepstr)
topic = argstr;
dblist = $code_utils:help_db_list();
elseif (prepstr != "from")
player:notify("Usage:  ", verb, " [<topic>] [from <db>]");
return;
elseif (!(e = $no_one:eval_d(iobjstr = argstr[$string_utils:word_start(argstr)[(prepstr in args) + 1][1]..$])))
player:notify(tostr(e));
return;
elseif (!e[1])
player:notify_lines(e[2]);
return;
elseif (!(typeof(dblist = e[2]) in {OBJ, LIST}))
player:notify(tostr(iobjstr, " => ", dblist, " -- not an object or a list"));
return;
else
topic = dobjstr;
if (typeof(dblist) == OBJ)
dblist = {dblist};
endif
endif
search = $code_utils:help_db_search(topic, dblist);
if (!search)
player:notify("Topic not found.");
elseif (search[1] == $ambiguous_match)
player:notify(tostr("Topic `", topic, "' ambiguous:  ", $string_utils:english_list(search[2], "none", " or ")));
elseif (typeof(text = (db = search[1]):dump_topic(fulltopic = search[2])) == ERR)
"...ok...shoot me.  This is a -d verb...";
player:notify(tostr("Cannot retrieve `", fulltopic, "' on ", $code_utils:corify_object(db), ":  ", text));
else
player:notify_lines(text);
endif
.
#58:17
set_task_perms(player);
if (prepstr == "in")
pattern = dobjstr;
objlist = player:eval_cmd_string(iobjstr, 0);
if (!objlist[1])
player:notify(tostr("Had trouble reading `", iobjstr, "':  "));
player:notify_lines(@objlist[2]);
return;
elseif (typeof(objlist[2]) == OBJ)
objlist = {objlist[2..2]};
elseif (typeof(objlist[2]) != LIST)
player:notify(tostr("Value of `", iobjstr, "' is not an object or list:  ", toliteral(objlist[2])));
return;
else
objlist = objlist[2..2];
endif
elseif ((prepstr == "from") && (player.wizard && (n = toint(toobj(iobjstr)))))
pattern = dobjstr;
objlist = {n};
elseif (args && player.wizard)
pattern = argstr;
objlist = {};
else
player:notify(tostr("Usage:  ", verb, " <pattern> ", player.wizard ? "[in {<objectlist>} | from <number>]" | "in {<objectlist>}"));
return;
endif
player:notify(tostr("Searching for verbs ", @prepstr ? {prepstr, " ", iobjstr, " "} | {}, (verb == "@egrep") ? "matching the pattern " | "containing the string ", toliteral(pattern), " ..."));
player:notify("");
egrep = verb[2] == "e";
all = index(verb, "a");
$code_utils:(all ? egrep ? "find_verb_lines_matching" | "find_verb_lines_containing" | (egrep ? "find_verbs_matching" | "find_verbs_containing"))(pattern, @objlist);
.
#58:18
set_task_perms(player);
if (dobjstr == "")
player:notify(tostr("Usage:  ", verb, " <object-or-property-or-verb>"));
return;
endif
if (index(dobjstr, ".") && (spec = $code_utils:parse_propref(dobjstr)))
if (valid(object = player:my_match_object(spec[1])))
return $code_utils:show_property(object, spec[2]);
endif
elseif (spec = $code_utils:parse_verbref(dobjstr))
if (valid(object = player:my_match_object(spec[1])))
return $code_utils:show_verbdef(object, spec[2]);
endif
elseif (((dobjstr[1] == "$") && ((pname = dobjstr[2..$]) in properties(#0))) && (typeof(#0.(pname)) == OBJ))
if (valid(object = #0.(pname)))
return $code_utils:show_object(object);
endif
elseif ((dobjstr[1] == "$") && (spec = $code_utils:parse_propref(dobjstr)))
return $code_utils:show_property(#0, spec[2]);
else
if (valid(object = player:my_match_object(dobjstr)))
return $code_utils:show_object(object);
endif
endif
$command_utils:object_match_failed(object, dobjstr);
.
#58:19
"@check-prop object.property";
"  checks for descendents defining the given property.";
set_task_perms(player);
if (!(spec = $code_utils:parse_propref(dobjstr)))
player:notify(tostr("Usage:  ", verb, " <object>.<prop-name>"));
elseif ($command_utils:object_match_failed(object = player:my_match_object(spec[1]), spec[1]))
"...bogus object...";
elseif (!($perm_utils:controls(player, object) || object.w))
player:notify("You can't create a property on that object anyway.");
elseif ($object_utils:has_property(object, prop = spec[2]))
player:notify("That object already has that property.");
elseif (olist = $object_utils:descendants_with_property_suspended(object, prop))
player:notify("The following descendents have this property defined:");
player:notify("  " + $string_utils:from_list(olist, " "));
else
player:notify("No property name conflicts found.");
endif
.
#58:20
"set_eval_env(string);";
"Run <string> through eval.  If it doesn't compile, return E_INVARG.  If it crashes, well, it crashes.  If it works okay, set .eval_env to it and set .eval_ticks to the amount of time it took.";
if (is_player(this) && $perm_utils:controls(caller_perms(), this))
program = args[1];
value = $no_one:eval_d((";ticks = ticks_left();" + program) + ";return ticks - ticks_left() - 2;");
if (!value[1])
return E_INVARG;
elseif (typeof(value[2]) == ERR)
return value[2];
endif
try
ok = this.eval_env = program;
this.eval_ticks = value[2];
return 1;
except error (ANY)
return error[1];
endtry
endif
.
#58:21
"@clearproperty <obj>.<prop>";
"Set the value of <obj>.<prop> to `clear', making it appear to be the same as the property on its parent.";
set_task_perms(player);
if (!(l = $code_utils:parse_propref(dobjstr)))
player:notify(tostr("Usage:  ", verb, " <object>.<property>"));
elseif ($command_utils:object_match_failed(dobj = player:my_match_object(l[1]), l[1]))
"... bogus object...";
endif
try
if (is_clear_property(dobj, prop = l[2]))
player:notify(tostr("Property ", dobj, ".", prop, " is already clear!"));
return;
endif
clear_property(dobj, prop);
player:notify(tostr("Property ", dobj, ".", prop, " cleared; value is now ", toliteral(dobj.(prop)), "."));
except (E_INVARG)
player:notify(tostr("You can't clear ", dobj, ".", prop, "; none of the ancestors define that property."));
except error (ANY)
player:notify(error[2]);
endtry
.
#58:22
"Syntax: @disown <object> [from <object>]";
"This command is used to remove unwanted children of objects you control. If you control an object, and there is a child of that object you do not want, this command will chparent() the object to its grandparent.";
set_task_perms(player);
if (prepstr)
if (prepstr != "from")
player:notify("Usage:  ", verb, " <object> [from <object>]");
return;
elseif ($command_utils:object_match_failed(iobj = player:my_match_object(iobjstr), iobjstr))
"... from WHAT?..";
return;
elseif (valid(dobj = $string_utils:literal_object(dobjstr)))
"... literal object number...";
if (parent(dobj) != iobj)
player:notify(tostr(dobj, " is not a child of ", iobj.name, " (", iobj, ")"));
return;
endif
elseif ($command_utils:object_match_failed(dobj = $string_utils:match(dobjstr, children(iobj), "name", children(iobj), "aliases"), dobjstr))
"... can't match dobjstr against any children of iobj";
return;
endif
elseif ($command_utils:object_match_failed(dobj = player:my_match_object(dobjstr), dobjstr))
"... can't match dobjstr...";
return;
endif
try
if ($object_utils:disown(dobj))
player:notify(tostr(dobj.name, " (", dobj, ")'s parent is now ", (grandparent = parent(dobj)).name, " (", grandparent, ")."));
else
"this should never happen";
endif
except e (E_PERM, E_INVARG)
{code, message, value, traceback} = e;
player:notify(message);
endtry
.
#58:23
":eval_cmd_string(string[,debug])";
"Evaluates the string the way this player would normally expect to see it evaluated if it were typed on the command line.  debug (defaults to 1) indicates how the debug flag should be set during the evaluation.";
" => {@eval_result, ticks, seconds}";
"where eval_result is the result of the actual eval() call.";
"";
"For the case where string is an expression, we need to prefix `return ' and append `;' to string before passing it to eval().  However this is not appropriate for statements, where it is assumed an explicit return will be provided somewhere or that the return value is irrelevant.  The code below assumes that string is an expression unless it either begins with a semicolon `;' or one of the MOO language statement keywords.";
"Next, the substitutions described by this.eval_subs, which should be a list of pairs {string, sub}, are performed on string";
"Finally, this.eval_env is prefixed to the beginning while this.eval_ticks is subtracted from the eventual tick count.  This allows string to refer to predefined variables like `here' and `me'.";
set_task_perms(caller_perms());
{program, ?debug = 1} = args;
program = program + ";";
debug = debug ? 38 | 0;
if (!match(program, "^ *%(;%|%(if%|fork?%|return%|while%|try%)[^a-z0-9A-Z_]%)"))
program = "return " + program;
endif
program = tostr(this.eval_env, ";", $code_utils:substitute(program, this.eval_subs));
ticks = ((ticks_left() - 53) - this.eval_ticks) + debug;
seconds = seconds_left();
value = debug ? eval(program) | $code_utils:eval_d(program);
seconds = seconds - seconds_left();
ticks = ticks - ticks_left();
return {@value, ticks, seconds};
.
#58:24
"@dump something [with [id=...] [noprops] [noverbs] [create]]";
"This spills out all properties and verbs on an object, calling suspend at appropriate intervals.";
"   id=#nnn -- specifies an idnumber to use in place of the object's actual id (for porting to another MOO)";
"   noprops -- don't show properties.";
"   noverbs -- don't show verbs.";
"   create  -- indicates that a @create command should be generated and all of the verbs be introduced with @verb rather than @args; the default assumption is that the object already exists and you're just doing this to have a look at it.";
set_task_perms(player);
dobj = player:my_match_object(dobjstr);
if ($command_utils:object_match_failed(dobj, dobjstr))
return;
endif
if (prepstr && (prepstr != "with"))
player:notify(tostr("Usage:  ", verb, " something [with [id=...] [noprops] [noverbs] [create]]"));
return;
endif
targname = tostr(dobj);
options = {"props", "verbs"};
create = 0;
if (iobjstr)
for o in ($string_utils:explode(iobjstr))
if (index(o, "id=") == 1)
targname = o[4..$];
elseif (o in {"noprops", "noverbs"})
options = setremove(options, o[3..$]);
elseif (o in {"create"})
create = 1;
else
player:notify(tostr("`", o, "' not understood as valid option."));
player:notify(tostr("Usage:  ", verb, " something [with [id=...] [noprops] [noverbs] [create]]"));
return;
endif
endfor
endif
if (create)
player:notify($code_utils:dump_preamble(dobj));
endif
if ("props" in options)
player:notify_lines_suspended($code_utils:dump_properties(dobj, create, targname));
endif
if (!("verbs" in options))
player:notify("\"***finished***");
return;
endif
player:notify("");
player:notify_lines_suspended($code_utils:dump_verbs(dobj, create, targname));
player:notify("\"***finished***");
.
#58:25
"Copied from Player Class hacked with eval that does substitutions and assorted stuff (#8855):# by Geust (#24442) Sun May  9 20:19:05 1993 PDT";
"#<string>[.<property>|.parent] [exit|player|inventory] [for <code>] returns information about the object (we'll call it <thing>) named by string.  String is matched in the current room unless one of exit|player|inventory is given.";
"If neither .<property>|.parent nor <code> is specified, just return <thing>.";
"If .<property> is named, return <thing>.<property>.  .parent returns parent(<thing>).";
"If <code> is given, it is evaluated, with the value returned by the first part being substituted for %# in <code>.";
"For example, the command";
"  #JoeFeedback.parent player for toint(%#)";
"will return 26026 (unless Joe has chparented since writing this).";
set_task_perms(player);
if (!(whatstr = verb[2..dot = min(index(verb + ".", "."), index(verb + ":", ":")) - 1]))
player:notify("Usage:  #string [exit|player|inventory]");
return;
elseif (!args)
what = player:my_match_object(whatstr);
elseif (index("exits", args[1]) == 1)
what = player.location:match_exit(whatstr);
elseif (index("inventory", args[1]) == 1)
what = player:match(whatstr);
elseif (index("players", args[1]) == 1)
what = $string_utils:match_player(whatstr);
if ($command_utils:player_match_failed(what, whatstr))
return;
endif
else
what = player:my_match_object(whatstr);
endif
if ((!valid(what)) && match(whatstr, "^[0-9]+$"))
what = toobj(whatstr);
endif
if ($command_utils:object_match_failed(what, whatstr))
return;
endif
while (index(verb, ".parent") == (dot + 1))
what = parent(what);
dot = dot + 7;
endwhile
if (dot >= length(verb))
val = what;
elseif ((value = $code_utils:eval_d(tostr("return ", what, verb[dot + 1..$], ";")))[1])
val = value[2];
else
player:notify_lines(value[2]);
return;
endif
if (prepstr)
program = strsub(iobjstr + ";", "%#", toliteral(val));
end = 1;
"while (\"A\" <= (l = argstr[end]) && l <= \"Z\")";
while (("A" <= (l = program[end])) && (l <= "Z"))
end = end + 1;
endwhile
if ((program[1] == ";") || (program[1..end - 1] in {"if", "for", "fork", "return", "while", "try"}))
program = $code_utils:substitute(program, this.eval_subs);
else
program = $code_utils:substitute("return " + program, this.eval_subs);
endif
if ((value = eval(program))[1])
player:notify(this:eval_value_to_string(value[2]));
else
player:notify_lines(value[2]);
nerrors = length(value[2]);
player:notify(tostr(nerrors, " error", (nerrors == 1) ? "." | "s."));
endif
else
player:notify(this:eval_value_to_string(val));
endif
.
#58:26
set_task_perms(caller_perms());
if (typeof(val = args[1]) == OBJ)
return tostr("=> ", val, "  ", valid(val) ? ("(" + val.name) + ")" | ((a = $list_utils:assoc(val, {{#-1, "<$nothing>"}, {#-2, "<$ambiguous_match>"}, {#-3, "<$failed_match>"}})) ? a[2] | "<invalid>"));
elseif (typeof(val) == ERR)
return tostr("=> ", toliteral(val), "  (", val, ")");
else
return tostr("=> ", toliteral(val));
endif
.
#58:27
"@<what>-option <option> [is] <value>   sets <option> to <value>";
"@<what>-option <option>=<value>        sets <option> to <value>";
"@<what>-option +<option>     sets <option>   (usually equiv. to <option>=1";
"@<what>-option -<option>     resets <option> (equiv. to <option>=0)";
"@<what>-option !<option>     resets <option> (equiv. to <option>=0)";
"@<what>-option <option>      displays value of <option>";
set_task_perms(player);
what = "prog";
options = what + "_options";
option_pkg = #0.(options);
set_option = ("set_" + what) + "_option";
if (!args)
player:notify_lines({("Current " + what) + " options:", "", @option_pkg:show(this.(options), option_pkg.names)});
return;
elseif (typeof(presult = option_pkg:parse(args)) == STR)
player:notify(presult);
return;
else
if (length(presult) > 1)
if (typeof(sresult = this:(set_option)(@presult)) == STR)
player:notify(sresult);
return;
elseif (!sresult)
player:notify("No change.");
return;
endif
endif
player:notify_lines(option_pkg:show(this.(options), presult[1]));
endif
.
#58:28
":prog_option(name)";
"Returns the value of the specified prog option";
if ((caller == this) || $perm_utils:controls(caller_perms(), this))
return $prog_options:get(this.prog_options, args[1]);
else
return E_PERM;
endif
.
#58:29
":set_prog_option(oname,value)";
"Changes the value of the named option.";
"Returns a string error if something goes wrong.";
if (!((caller == this) || $perm_utils:controls(caller_perms(), this)))
return tostr(E_PERM);
endif
"...this is kludgy, but it saves me from writing the same verb 3 times.";
"...there's got to be a better way to do this...";
verb[1..4] = "";
foo_options = verb + "s";
"...";
if (typeof(s = #0.(foo_options):set(this.(foo_options), @args)) == STR)
return s;
elseif (s == this.(foo_options))
return 0;
else
this.(foo_options) = s;
return 1;
endif
.
#58:30
"@list <obj>:<verb> [<dobj> <prep> <iobj>] [with[out] paren|num] [all] [ranges]";
set_task_perms(player);
bynumber = verb == "@list#";
pflag = player:prog_option("list_all_parens");
nflag = !player:prog_option("list_no_numbers");
permflag = player:prog_option("list_show_permissions");
aflag = 0;
argspec = {};
range = {};
spec = args ? $code_utils:parse_verbref(args[1]) | E_INVARG;
args = spec ? listdelete(args, 1) | E_INVARG;
while (args)
if (args[1] && ((index("without", args[1]) == 1) || (args[1] == "wo")))
"...w,wi,wit,with => 1; wo,witho,withou,without => 0...";
fval = !index(args[1], "o");
if (`index("parentheses", args[2]) ! ANY' == 1)
pflag = fval;
args[1..2] = {};
elseif (`index("numbers", args[2]) ! ANY' == 1)
nflag = fval;
args[1..2] = {};
else
player:notify(tostr(args[1], " WHAT?"));
args = E_INVARG;
endif
elseif (index("all", args[1]) == 1)
if (bynumber)
player:notify("Don't use `all' with @list#.");
args = E_INVARG;
else
aflag = 1;
args[1..1] = {};
endif
elseif (index("0123456789", args[1][1]) || (index(args[1], "..") == 1))
if (E_INVARG == (s = $seq_utils:from_string(args[1])))
player:notify(tostr("Garbled range:  ", args[1]));
args = E_INVARG;
else
range = $seq_utils:union(range, s);
args = listdelete(args, 1);
endif
elseif (bynumber)
player:notify("Don't give args with @list#.");
args = E_INVARG;
elseif (argspec)
"... second argspec?  Not likely ...";
player:notify(tostr(args[1], " unexpected."));
args = E_INVARG;
elseif (typeof(pas = $code_utils:parse_argspec(@args)) == LIST)
argspec = pas[1];
if (length(argspec) < 2)
player:notify(tostr("Argument `", @argspec, "' malformed."));
args = E_INVARG;
else
argspec[2] = $code_utils:full_prep(argspec[2]) || argspec[2];
args = pas[2];
endif
else
"... argspec is bogus ...";
player:notify(tostr(pas));
args = E_INVARG;
endif
endwhile
if (args == E_INVARG)
if (bynumber)
player:notify(tostr("Usage:  ", verb, " <object>:<verbnumber> [with|without parentheses|numbers] [ranges]"));
else
player:notify(tostr("Usage:  ", verb, " <object>:<verb> [<dobj> <prep> <iobj>] [with|without parentheses|numbers] [all] [ranges]"));
endif
return;
elseif ($command_utils:object_match_failed(object = player:my_match_object(spec[1]), spec[1]))
return;
endif
shown_one = 0;
for what in ({object, @$object_utils:ancestors(object)})
if (bynumber)
vname = $code_utils:toint(spec[2]);
if (vname == E_TYPE)
return player:notify("Verb number expected.");
elseif ((vname < 1) || `vname > length(verbs(what)) ! E_PERM => 0')
return player:notify("Verb number out of range.");
endif
code = `verb_code(what, vname, pflag) ! ANY';
elseif (argspec)
vnum = $code_utils:find_verb_named(what, spec[2]);
while (vnum && (`verb_args(what, vnum) ! ANY' != argspec))
vnum = $code_utils:find_verb_named(what, spec[2], vnum + 1);
endwhile
vname = vnum;
code = (!vnum) ? E_VERBNF | `verb_code(what, vnum, pflag) ! ANY';
else
vname = spec[2];
code = `verb_code(what, vname, pflag) ! ANY';
endif
if (code != E_VERBNF)
if (shown_one)
player:notify("");
elseif (what != object)
player:notify(tostr("Object ", object, " does not define that verb", argspec ? " with those args" | "", ", but its ancestor ", what, " does."));
endif
if (typeof(code) == ERR)
player:notify(tostr(what, ":", vname, " -- ", code));
else
info = verb_info(what, vname);
vargs = verb_args(what, vname);
fullname = info[3];
if (index(fullname, " "))
fullname = toliteral(fullname);
endif
if (index(vargs[2], "/"))
vargs[2] = tostr("(", vargs[2], ")");
endif
player:notify(tostr(what, ":", fullname, "   ", $string_utils:from_list(vargs, " "), permflag ? " " + info[2] | ""));
if (code == {})
player:notify("(That verb has not been programmed.)");
else
lineseq = {1, length(code) + 1};
range && (lineseq = $seq_utils:intersection(range, lineseq));
if (!lineseq)
player:notify("(No lines in that range.)");
endif
for k in [1..length(lineseq) / 2]
for i in [lineseq[(2 * k) - 1]..lineseq[2 * k] - 1]
if (nflag)
player:notify(tostr(" "[1..i < 10], i, ":  ", code[i]));
else
player:notify(code[i]);
endif
$command_utils:suspend_if_needed(0);
endfor
endfor
endif
endif
shown_one = 1;
endif
if (shown_one && (!aflag))
return;
endif
endfor
if (!shown_one)
player:notify(tostr("That object does not define that verb", argspec ? " with those args." | "."));
endif
.
#58:31
"Copied from Player Class hacked with eval that does substitutions and assorted stuff (#8855):set_eval_subs by Geust (#24442) Fri Aug  5 13:18:59 1994 PDT";
if (!$perm_utils:controls(caller_perms(), this))
return E_PERM;
elseif (typeof(subs = args[1]) != LIST)
return E_TYPE;
else
for pair in (subs)
if (((length(pair) != 2) || typeof(pair[1] != STR)) || typeof(pair[2] != STR))
return E_INVARG;
endif
endfor
endif
return `this.eval_subs = subs ! ANY';
.
#58:32
set_task_perms(player);
if (!dobjstr)
try
if ((verb[7] != "(") && (verb[$] != ")"))
player:tell("Usage:  @verbs <object>");
return;
else
dobjstr = verb[8..$ - 1];
endif
except (E_RANGE)
return player:tell("Usage:  @verbs <object>");
endtry
endif
thing = player:my_match_object(dobjstr);
if (!$command_utils:object_match_failed(thing, dobjstr))
verbs = $object_utils:accessible_verbs(thing);
player:tell(";verbs(", thing, ") => ", toliteral(verbs));
endif
.
#58:33
"Syntax:  @forked-v*erbose [player]";
"         @forked-v*erbose all wizards";
"";
"For a normal player, shows all the tasks you have waiting in your queue, especially those forked or suspended. A wizard will see all the tasks of all the players unless the optional argument is provided. For a task which has suspended, and not a fresh fork, shows the full callers() stack.";
"The second form is only usable by wizards and provides an output of all tasks owned by characters who are .wizard=1. Useful to find a task that may get put in a random queue due to $wiz_utils:random_wizard. Or even finding verbs that run with wizard permissions that shouldn't be.";
set_task_perms(player);
if (!dobjstr)
tasks = queued_tasks();
elseif ((dobjstr == "all wizards") && player.wizard)
tasks = {};
for t in (queued_tasks())
if (valid(t[5]) && t[5].wizard)
tasks = {@tasks, t};
endif
$command_utils:suspend_if_needed(1);
endfor
elseif ($command_utils:player_match_result(dobj = $string_utils:match_player(dobjstr), dobjstr)[1])
return;
elseif (typeof(tasks = $wiz_utils:queued_tasks(dobj)) != LIST)
player:notify(tostr(verb, " ", dobj.name, "(", dobj, "):  ", tasks));
return;
endif
if (tasks)
su = $string_utils;
player:notify("Queue ID    Start Time            Owner         Verb (Line) [This]");
player:notify("--------    ----------            -----         -----------------");
now = time();
for task in (tasks)
$command_utils:suspend_if_needed(0);
{q_id, start, nu, nu2, owner, vloc, vname, lineno, this, ?size = 0} = task;
time = (start >= now) ? ctime(start)[5..24] | su:left((start == -1) ? "Reading input ..." | tostr(now - start, " seconds ago..."), 20);
owner_name = valid(owner) ? owner.name | tostr("Dead ", owner);
player:notify(tostr(su:left(tostr(q_id), 10), "  ", time, "  ", su:left(owner_name, 12), "  ", vloc, ":", vname, " (", lineno, ")", (this != vloc) ? tostr(" [", this, "]") | ""));
if (stack = `task_stack(q_id, 1) ! E_INVARG => 0')
for frame in (listdelete(stack, 1))
{sthis, svname, sprogger, svloc, splayer, slineno} = frame;
player:notify(tostr("                    Called By...  ", su:left(valid(sprogger) ? sprogger.name | tostr("Dead ", sprogger), 12), "  ", svloc, ":", svname, (sthis != svloc) ? tostr(" [", sthis, "]") | "", " (", slineno, ")"));
endfor
endif
endfor
player:notify("-----------------------------------------------------------------");
else
player:notify("No tasks.");
endif
.
#58:34
"Usage: @properties <object>";
"Alias: @props";
"Displays all properties defined on <object>. Properties unreadable by you display as `E_PERM'.";
if (player != this)
return player:tell(E_PERM);
endif
set_task_perms(player);
ob = this:my_match_object(argstr);
if (!$command_utils:object_match_failed(ob, argstr))
this:notify(tostr(";properties(", $code_utils:corify_object(ob), ") => ", toliteral($object_utils:accessible_props(ob))));
endif
"Last modified Mon Nov 28 06:21:21 2005 PST, by Roebare (#109000).";
.
#59:0
":eval_d(code...) => {compiled?,result}";
"This works exactly like the builtin eval() except that the code is evaluated ";
"as if the d flag were unset.";
code = {"set_verb_code(this,\"eval_d_util\",{\"\\\"Do not remove this verb!  This is an auxiliary verb for :eval_d().\\\";\"});", "dobj=iobj=this=#-1;", "dobjstr=iobjstr=prepstr=argstr=verb=\"\";", tostr("caller=", caller, ";"), "set_task_perms(caller_perms());", @args};
if (!caller_perms().programmer)
return E_PERM;
elseif ((caller_perms() == $no_one) && $no_one:bad_eval(tostr(@args)))
return E_PERM;
elseif (svc = set_verb_code(this, "eval_d_util", code))
lines = {};
for line in (svc)
if ((index(line, "Line ") == 1) && (n = toint(line[6..(colon = index(line + ":", ":")) - 1])))
lines = {@lines, tostr("Line ", n - 5, line[colon..$])};
else
lines = {@lines, line};
endif
endfor
return {0, lines};
else
set_task_perms(caller_perms());
return {1, this:eval_d_util()};
endif
.
#59:1
":toint(STR)";
"=> toint(s) if STR is numeric";
"=> E_TYPE if it isn't";
return match(s = args[1], "^ *[-+]?[0-9]+ *$") ? toint(s) | E_TYPE;
.
#59:2
":toobj(objectid as string) => objectid";
return match(s = args[1], "^ *#[-+]?[0-9]+ *$") ? toobj(s) | E_TYPE;
.
#59:3
"toerr(n), toerr(\"E_FOO\"), toerr(\"FOO\") => E_FOO.";
if (typeof(s = args[1]) != STR)
n = toint(s) + 1;
if (n > length(this.error_list))
return 1;
endif
elseif (!(n = (s in this.error_names) || (("E_" + s) in this.error_names)))
return 1;
endif
return this.error_list[n];
.
#59:4
"error_name(E_FOO) => \"E_FOO\"";
return toliteral(@args);
return this.error_names[toint(args[1]) + 1];
.
#59:5
set_task_perms(caller_perms());
{object, ?what = {"props", "verbs"}} = args;
player:notify(tostr("Object ID:  ", object));
player:notify(tostr("Name:       ", object.name));
names = {"Parent", "Location", "Owner"};
vals = {parent(object), object.location, object.owner};
for i in [1..length(vals)]
if (!valid(vals[i]))
val = "*** NONE ***";
else
val = ((vals[i].name + " (") + tostr(vals[i])) + ")";
endif
player:notify(tostr(names[i], ":      "[1..12 - length(names[i])], val));
endfor
line = "Flags:     ";
if (is_player(object))
line = line + " player";
endif
for flag in ({"programmer", "wizard", "r", "w", "f"})
if (object.(flag))
line = (line + " ") + flag;
endif
endfor
player:notify(line);
if (player.programmer && ((player.wizard || (player == object.owner)) || object.r))
if (("verbs" in what) && (vs = verbs(object)))
player:notify("Verb definitions:");
for v in (vs)
$command_utils:suspend_if_needed(0);
player:notify(tostr("    ", v));
endfor
endif
if ("props" in what)
if (ps = properties(object))
player:notify("Property definitions:");
for p in (ps)
$command_utils:suspend_if_needed(0);
player:notify(tostr("    ", p));
endfor
endif
all_props = $object_utils:all_properties(object);
if (all_props != {})
player:notify("Properties:");
for p in (all_props)
$command_utils:suspend_if_needed(0);
strng = `toliteral(object.(p)) ! E_PERM => "(Permission denied.)"';
player:notify(tostr("    ", p, ": ", strng));
endfor
endif
endif
elseif (player.programmer)
player:notify("** Can't list properties or verbs: permission denied.");
endif
if (object.contents)
player:notify("Contents:");
for o in (object.contents)
$command_utils:suspend_if_needed(0);
player:notify(tostr("    ", o.name, " (", o, ")"));
endfor
endif
.
#59:6
set_task_perms(caller_perms());
{object, pname} = args;
if (pname in this.builtin_props)
player:notify(tostr(object, ".", pname));
player:notify("Built-in property.");
else
try
{owner, perms} = property_info(object, pname);
except error (ANY)
player:notify(error[2]);
return;
endtry
player:notify(tostr(object, ".", pname));
player:notify(tostr("Owner:        ", valid(owner) ? tostr(owner.name, " (", owner, ")") | "*** NONE ***"));
player:notify(tostr("Permissions:  ", perms));
endif
player:notify(tostr("Value:        ", $string_utils:print(object.(pname))));
.
#59:7
set_task_perms(caller_perms());
{object, vname} = args;
if (!(hv = $object_utils:has_verb(object, vname)))
player:notify("That object does not define that verb.");
return;
elseif (hv[1] != object)
player:notify(tostr("Object ", object, " does not define that verb, but its ancestor ", hv[1], " does."));
object = hv[1];
endif
try
{owner, perms, names} = verb_info(object, vname);
except error (ANY)
player:notify(error[2]);
return;
endtry
arg_specs = verb_args(object, vname);
player:notify(tostr(object, ":", names));
player:notify(tostr("Owner:            ", valid(owner) ? tostr(owner.name, " (", owner, ")") | "*** NONE ***"));
player:notify(tostr("Permissions:      ", perms));
player:notify(tostr("Direct Object:    ", arg_specs[1]));
player:notify(tostr("Preposition:      ", arg_specs[2]));
player:notify(tostr("Indirect Object:  ", arg_specs[3]));
.
#59:8
if (args[4..5] == {"none", "this"})
return 0;
endif
{thisobj, verb, adobj, aprep, aiobj} = args;
prep_part = (aprep == "any") ? "to" | this:short_prep(aprep);
".........`any' => `to' (arbitrary),... `none' => empty string...";
if ((adobj == "this") && (dobj == thisobj))
dobj_part = dobjstr;
iobj_part = ((!prep_part) || (aiobj == "none")) ? "" | ((aiobj == "this") ? dobjstr | iobjstr);
elseif ((aiobj == "this") && (iobj == thisobj))
dobj_part = (adobj == "any") ? dobjstr | ((adobj == "this") ? iobjstr | "");
iobj_part = iobjstr;
elseif (!("this" in args[3..5]))
dobj_part = (adobj == "any") ? dobjstr | "";
iobj_part = (prep_part && (aiobj == "any")) ? iobjstr | "";
else
return 0;
endif
return tostr(verb, dobj_part ? " " + dobj_part | "", prep_part ? " " + prep_part | "", iobj_part ? " " + iobj_part | "");
.
#59:9
"returns the permissions of the current verb (either the owner or the result of the most recent set_task_perms()).";
return caller_perms();
.
#59:10
"returns the object where the current verb is defined.";
return callers()[1][4];
.
#59:11
":verb_documentation([object,verbname]) => documentation at beginning of verb code, if any";
"default is the calling verb";
set_task_perms(caller_perms());
c = callers()[1];
{?object = c[4], ?vname = c[2]} = args;
try
code = verb_code(object, vname);
except error (ANY)
return error[2];
endtry
doc = {};
for line in (code)
if (match(line, "^\"%([^\\\"]%|\\.%)*\";$"))
"... now that we're sure `line' is just a string, eval() is safe...";
doc = {@doc, $no_one:eval("; return " + line)[2]};
else
return doc;
endif
endfor
return doc;
.
#59:12
":set_verb_documentation(object,verbname,text)";
"  changes documentation at beginning of verb code";
"  text is either a string or a list of strings";
"  returns a non-1 value if anything bad happens...";
set_task_perms(caller_perms());
{object, vname, text} = args;
if (typeof(code = `verb_code(object, vname) ! ANY') == ERR)
return code;
elseif (typeof(vd = $code_utils:verb_documentation(object, vname)) == ERR)
return vd;
elseif (!(typeof(text) in {LIST, STR}))
return E_INVARG;
else
newdoc = {};
for l in ((typeof(text) == LIST) ? text | {text})
if (typeof(l) != STR)
return E_INVARG;
endif
newdoc = {@newdoc, $string_utils:print(l) + ";"};
endfor
if (ERR == typeof(svc = `set_verb_code(object, vname, {@newdoc, @code[length(vd) + 1..$]}) ! ANY'))
"... this shouldn't happen.  I'm not setting this code -d just yet...";
return svc;
else
return 1;
endif
endif
.
#59:13
"$code_utils:parse_propref(string)";
"Parses string as a MOO-code property reference, returning {object-string, prop-name-string} for a successful parse and false otherwise.  It always returns the right object-string to pass to, for example, this-room:match_object.";
s = args[1];
if (dot = index(s, "."))
object = s[1..dot - 1];
prop = s[dot + 1..$];
if ((object == "") || (prop == ""))
return 0;
elseif (object[1] == "$")
object = `#0.(object[2..$]) ! ANY';
if (typeof(object) != OBJ)
return 0;
endif
object = tostr(object);
endif
elseif (index(s, "$") == 1)
object = "#0";
prop = s[2..$];
else
return 0;
endif
return {object, prop};
.
#59:14
"$code_utils:parse_verbref(string)";
"Parses string as a MOO-code verb reference, returning {object-string, verb-name-string} for a successful parse and false otherwise.  It always returns the right object-string to pass to, for example, this-room:match_object().";
s = args[1];
if (colon = index(s, ":"))
object = s[1..colon - 1];
verbname = s[colon + 1..$];
if (!(object && verbname))
return 0;
elseif (object[1] == "$")
pname = object[2..$];
if ((!(pname in properties(#0))) || (typeof(object = #0.(pname)) != OBJ))
return 0;
endif
object = tostr(object);
endif
return {object, verbname};
else
return 0;
endif
.
#59:15
":parse_arg_spec(@args)";
"  attempts to parse the given sequence of args into a verb_arg specification";
"returns {verb_args,remaining_args} if successful.";
"  e.g., :parse_arg_spec(\"this\",\"in\",\"front\",\"of\",\"any\",\"foo\"..)";
"           => {{\"this\",\"in front of\",\"any\"},{\"foo\"..}}";
"returns a string error message if parsing fails.";
nargs = length(args);
if (nargs < 1)
return {{}, {}};
elseif ((ds = args[1]) == "tnt")
return {{"this", "none", "this"}, listdelete(args, 1)};
elseif (!(ds in {"this", "any", "none"}))
return tostr("\"", ds, "\" is not a valid direct object specifier.");
elseif ((nargs < 2) || (args[2] in {"none", "any"}))
verbargs = args[1..min(3, nargs)];
rest = args[4..nargs];
elseif (!(gp = $code_utils:get_prep(@args[2..nargs]))[1])
return tostr("\"", args[2], "\" is not a valid preposition.");
else
verbargs = {ds, @gp[1..min(2, nargs = length(gp))]};
rest = gp[3..nargs];
endif
if ((length(verbargs) >= 3) && (!(verbargs[3] in {"this", "any", "none"})))
return tostr("\"", verbargs[3], "\" is not a valid indirect object specifier.");
endif
return {verbargs, rest};
.
#59:16
if (server_version() != this._version)
this:_fix_preps();
endif
return this.prepositions;
.
#59:17
":short_prep(p) => shortest preposition equivalent to p";
"p may be a single word or one of the strings returned by verb_args().";
if (server_version() != this._version)
this:_fix_preps();
endif
word = args[1];
word = word[1..index(word + "/", "/") - 1];
if (p = word in this._other_preps)
return this._short_preps[this._other_preps_n[p]];
elseif (word in this._short_preps)
return word;
else
return "";
endif
.
#59:18
if (server_version() != this._version)
this:_fix_preps();
endif
prep = args[1];
if (p = prep in this._short_preps)
return this.prepositions[p];
elseif (p = prep in this._other_preps)
return this.prepositions[this._other_preps_n[p]];
else
return "";
endif
.
#59:19
":get_prep(@args) extracts the prepositional phrase from the front of args, returning a list consisting of the preposition (or \"\", if none) followed by the unused args.";
":get_prep(\"in\",\"front\",\"of\",...) => {\"in front of\",...}";
":get_prep(\"inside\",...)          => {\"inside\",...}";
":get_prep(\"frabulous\",...}       => {\"\", \"frabulous\",...}";
prep = "";
allpreps = {@this._short_preps, @this._other_preps};
rest = 1;
for i in [1..length(args)]
accum = (i == 1) ? args[1] | tostr(accum, " ", args[i]);
if (accum in allpreps)
prep = accum;
rest = i + 1;
endif
if (!(accum in this._multi_preps))
return {prep, @args[rest..$]};
endif
endfor
return {prep, @args[rest..$]};
.
#59:20
":_fix_preps() updates the properties on this having to do with prepositions.";
"_fix_preps should be called whenever we detect that a new server version has been installed.";
orig_args = verb_args(this, verb);
multis = nothers = others = shorts = longs = {};
i = 0;
while (typeof(`set_verb_args(this, verb, {"this", tostr(i), "this"}) ! ANY') != ERR)
l = verb_args(this, verb)[2];
all = $string_utils:explode(l, "/");
s = all[1];
for p in (listdelete(all, 1))
if (length(p) <= length(s))
s = p;
endif
endfor
for p in (all)
while (j = rindex(p, " "))
multis = {p = p[1..j - 1], @multis};
endwhile
endfor
longs = {@longs, l};
shorts = {@shorts, s};
others = {@others, @setremove(all, s)};
nothers = {@nothers, @$list_utils:make(length(all) - 1, length(shorts))};
i = i + 1;
endwhile
set_verb_args(this, verb, orig_args);
this.prepositions = longs;
this._short_preps = shorts;
this._other_preps = others;
this._other_preps_n = nothers;
this._multi_preps = multis;
this._version = server_version();
return;
.
#59:21
":find_verb_named(object,name[,n])";
"  returns the *number* of the first verb on object matching the given name.";
"  optional argument n, if given, starts the search with verb n,";
"  causing the first n verbs (1..n-1) to be ignored.";
"  0 is returned if no verb is found.";
"  This routine does not find inherited verbs.";
{object, name, ?start = 1} = args;
for i in [start..length(verbs(object))]
verbinfo = verb_info(object, i);
if (this:verbname_match(verbinfo[3], name))
return i;
endif
endfor
return 0;
.
#59:22
":find_last_verb_named(object,name[,n])";
"  returns the *number* of the last verb on object matching the given name.";
"  optional argument n, if given, starts the search with verb n-1,";
"  causing verbs (n..length(verbs(object))) to be ignored.";
"  -1 is returned if no verb is found.";
"  This routine does not find inherited verbs.";
{object, name, ?last = -1} = args;
if (last < 0)
last = length(verbs(object));
endif
for i in [0..last - 1]
verbinfo = verb_info(object, last - i);
if (this:verbname_match(verbinfo[3], name))
return last - i;
endif
endfor
return -1;
.
#59:23
":find_callable_verb_named(object,name[,n])";
"  returns the *number* of the first verb on object that matches the given";
"  name and has the x flag set.";
"  optional argument n, if given, starts the search with verb n,";
"  causing the first n verbs (0..n-1) to be ignored.";
"  0 is returned if no verb is found.";
"  This routine does not find inherited verbs.";
{object, name, ?start = 1} = args;
for i in [start..length(verbs(object))]
verbinfo = verb_info(object, i);
if (index(verbinfo[2], "x") && this:verbname_match(verbinfo[3], name))
return i;
endif
endfor
return 0;
.
#59:24
":verbname_match(fullverbname,name) => TRUE iff `name' is a valid name for a verb with the given `fullname'";
verblist = (" " + args[1]) + " ";
if (index(verblist, (" " + (name = args[2])) + " ") && (!match(name, "[ *]")))
"Note that if name has a * or a space in it, then it can only match one of the * verbnames";
return 1;
else
namelen = length(name);
while (m = match(verblist, "[^ *]*%(%*%)[^ ]*"))
vlast = m[2];
if ((namelen >= (m[3][1][1] - m[1])) && ((!(v = strsub(verblist[m[1]..vlast], "*", ""))) || (index(v, (verblist[vlast] == "*") ? name[1..min(namelen, length(v))] | name) == 1)))
return 1;
endif
verblist = verblist[vlast + 1..$];
endwhile
endif
return 0;
.
#59:25
"$code_utils:find_verbs_containing(pattern[,object|object-list[,casematters]])";
"$code_utils:find_verbs_matching(pattern[,object|object-list[,casematters]])";
"$code_utils:find_verb_lines_containing(pattern[,object|object-list[,casematters]])";
"$code_utils:find_verb_lines_matching(pattern[,object|object-list[,casematters]])";
"";
"Print (to player) the name and owner of every verb in the database whose code";
"  (find_verbs_containing) contains PATTERN as a substring ";
"  (find_verbs_matching)   has a substring matches the regular expression PATTERN .";
"Optional second argument limits the search to the specified object or objects.";
"Optional third argument if true specifies case-sensitive matching.";
":find_verbs_*() prints the first matching line in a verb while";
":find_verb_lines_*() prints all matching lines";
"";
"Because it searches the entire database, this function may suspend the task several times before returning.";
"";
set_task_perms(caller_perms());
"... puts the task in a player's own job queue and prevents someone from learning about verbs that are otherwise unreadable to him/her.";
{pattern, ?where = 0, ?casematters = 0} = args;
count = 0;
_find_verbs = "_" + verb;
if (typeof(where) == INT)
for o in [toobj(where)..max_object()]
count = count + this:(_find_verbs)(pattern, o, casematters);
endfor
elseif (typeof(where) == LIST)
for o in (where)
count = count + this:(_find_verbs)(pattern, o, casematters);
endfor
else
"...typeof(where) == OBJ...";
count = this:(_find_verbs)(pattern, where, casematters);
endif
player:notify("");
player:notify(tostr("Total: ", count, " verb", (count != 1) ? "s." | "."));
.
#59:26
":_find_verbs_containing(pattern,object[,casematters])";
":_find_verbs_matching(regexp,object[,casematters])";
"number of verbs in object with code having a line containing pattern or matching regexp";
"prints verbname and offending line to player";
set_task_perms(caller_perms());
{pattern, o, ?casematters = 0} = args;
if ($command_utils:running_out_of_time())
player:notify(tostr("...", o));
suspend(0);
endif
if (!valid(o))
return 0;
endif
count = 0;
verbs = $object_utils:accessible_verbs(o);
_grep_verb_code = (verb == "_find_verbs_matching") ? "_egrep_verb_code" | "_grep_verb_code";
if (typeof(verbs) != LIST)
return player:notify(tostr("verbs(", o, ") => ", tostr(verbs)));
endif
for vnum in [1..length(verbs)]
if (l = this:(_grep_verb_code)(pattern, o, vnum, casematters))
owner = verb_info(o, vnum)[1];
player:notify(tostr(o, ":", verbs[vnum], " [", valid(owner) ? owner.name | "Recycled Player", " (", owner, ")]:  ", l));
count = count + 1;
endif
if ($command_utils:running_out_of_time())
player:notify(tostr("...", o));
suspend(0);
endif
endfor
return count;
.
#59:27
":_grep_verb_code(pattern,object,verbname[,casematters]) => line number or 0";
"  returns line number on which pattern occurs in code for object:verbname";
set_task_perms(caller_perms());
{pattern, object, vname, ?casematters = 0} = args;
"The following gross kluge is due to Quade (#82589).  tostr is fast, and so we can check for nonexistence of a pattern very quickly this way rather than checking line by line.  MOO needs a compiler.  --Nosredna";
vc = `verb_code(object, vname) ! ANY';
if ((typeof(vc) == ERR) || (!index(tostr(@vc), pattern, casematters)))
return 0;
else
for line in (vc)
if (index(line, pattern, casematters))
return line;
endif
endfor
return 0;
endif
.
#59:28
":_egrep_verb_code(regexp,object,verbname[,casematters]) => 0 or line number";
"  returns line number of first line matching regexp in object:verbname code";
set_task_perms(caller_perms());
{pattern, object, vname, ?casematters = 0} = args;
try
for line in (vc = `verb_code(object, vname) ! ANY => {}')
if (match(line, pattern, casematters))
return line;
endif
endfor
except (E_INVARG)
raise(E_INVARG, "Malformed regular expression.");
endtry
return 0;
.
#59:29
"Parse [from <start>] [to <end>] [for <name>].";
"Takes a series of strings, most likely @args with dobjstr removed.";
"Returns a list {INT start, INT end, STR name}, or {} if there is an error.";
fail = length(args) % 2;
start = 0;
end = toint(max_object());
match = "";
while (args && (!fail))
prep = args[1];
if (prep == "from")
if ((start = player.location:match_object(args[2])) >= #0)
start = toint(start);
else
start = toint(args[2]);
endif
elseif (prep == "to")
if ((end = player.location:match_object(args[2])) >= #0)
end = toint(end);
else
end = toint(args[2]);
endif
elseif (prep == "for")
match = args[2];
else
fail = 1;
endif
args = args[3..length(args)];
endwhile
return fail ? {} | {start, end, match};
.
#59:30
":help_db_list([player]) => list of help dbs";
"in the order that they are consulted by player";
{?who = player} = args;
olist = {who, @$object_utils:ancestors(who)};
if (valid(who.location))
olist = {@olist, who.location, @$object_utils:ancestors(who.location)};
endif
dbs = {};
for o in (olist)
h = `o.help ! ANY => 0';
if (typeof(h) == OBJ)
h = {h};
endif
if (typeof(h) == LIST)
for db in (h)
if ((typeof(db) == OBJ) && (valid(db) && (!(db in dbs))))
dbs = {@dbs, db};
endif
endfor
endif
endfor
return setadd(dbs, $help);
.
#59:31
":help_db_search(string,dblist)";
"  searches each of the help db's in dblist for a topic matching string.";
"  Returns  {db,topic}  or  {$ambiguous_match,{topic...}}  or {}";
{what, dblist} = args;
topics = {};
help = 1;
for db in (dblist)
$command_utils:suspend_if_needed(0);
if ({what} == (ts = `db:find_topics(what) ! ANY => 0'))
return {db, ts[1]};
elseif (ts && (typeof(ts) == LIST))
if (help)
help = db;
endif
for t in (ts)
topics = setadd(topics, t);
endfor
endif
endfor
if (length(topics) > 1)
return {$ambiguous_match, topics};
elseif (topics)
return {help, topics[1]};
else
return {};
endif
.
#59:32
":corify_object(object)  => string representing object";
"  usually just returns tostr(object), but in the case of objects that have";
"  corresponding #0 properties, return the appropriate $-string.";
object = args[1];
"Just in case #0 is !r on some idiot core.";
for p in (`properties(#0) ! ANY => {}')
"And if for some reason, some #0 prop is !r.";
if (`#0.(p) ! ANY' == object)
return "$" + p;
endif
endfor
return tostr(object);
.
#59:33
"See if the end of the string passed as args[1] ends 'inside' a doublequote.  Used by $code_utils:substitute.";
{string} = args;
quoted = 0;
while (i = index(string, "\""))
if ((!quoted) || ((i == 1) || (string[i - 1] != "\\")))
quoted = !quoted;
endif
string = string[i + 1..$];
endwhile
return quoted;
.
#59:34
"verb_or_property(<obj>, <name> [, @<args>])";
"Looks for a callable verb or property named <name> on <obj>.";
"If <obj> has a callable verb named <name> then return <obj>:(<name>)(@<args>).";
"If <obj> has a property named <name> then return <obj>.(<name>).";
"Otherwise return E_PROPNF, or E_PERM if you don't have permission to read the property.";
set_task_perms(caller_perms());
{object, name, @rest} = args;
return `object:(name)(@rest) ! E_VERBNF, E_INVIND => `object.(name) ! ANY'';
.
#59:35
"task_valid(INT id)";
"Return true iff there is currently a valid task with the given id.";
set_task_perms($no_one);
{id} = args;
t = $list_utils:slice(queued_tasks(), 1);
return ((id == task_id()) || (id in t)) || (E_PERM == `kill_task(id) ! ANY');
.
#59:36
":task_owner(INT task_id) => returns the owner of the task belonging to the id.";
if (a = $list_utils:assoc(args[1], queued_tasks()))
return a[5];
else
return E_INVARG;
endif
.
#59:37
":argstr(verb,args[,argstr]) => what argstr should have been.  ";
"Recall that the command line is parsed into a sequence of words; `verb' is";
"assigned the first word, `args' is assigned the remaining words, and argstr";
"is assigned a substring of the command line, which *should* be the one";
"starting first nonblank character after the verb, but is instead (because";
"the parser is BROKEN!) the one starting with the first nonblank character";
"after the first space in the line, which is not necessarily after the verb.";
"Clearly, if the verb contains spaces --- which can happen if you use";
"backslashes and quotes --- this loses, and argstr will then erroneously";
"have extra junk at the beginning.  This verb, given verb, args, and the";
"actual argstr, returns what argstr should have been.";
verb = args[1];
argstr = {@args, argstr}[3];
n = length(args = args[2]);
if (!index(verb, " "))
return argstr;
elseif (!args)
return "";
endif
"space in verb => two possible cases:";
"(1) first space was not in a quoted string.";
"    first word of argstr == rest of verb unless verb ended on this space.";
if ((nqargs = $string_utils:words(argstr)) == args)
return argstr;
elseif (((nqn = length(nqargs)) == (n + 1)) && (nqargs[2..nqn] == args))
return argstr[$string_utils:word_start(argstr)[2][1]..length(argstr)];
else
"(2) first space was in a quoted string.";
"    argstr starts with rest of string";
qs = $string_utils:word_start("\"" + argstr);
return argstr[qs[(length(qs) - length(args)) + 1][1] - 1..length(argstr)];
endif
.
#59:38
":verbname_match(fullverbname,name) => TRUE iff `name' is a valid name for a verb with the given `fullname'";
verblist = (" " + args[1]) + " ";
if (index(verblist, (" " + (name = args[2])) + " ") && (!(index(name, "*") || index(name, " "))))
"Note that if name has a * or a space in it, then it can only match one of the * verbnames";
return 1;
else
namelen = length(name);
while (star = index(verblist, "*"))
vstart = rindex(verblist[1..star], " ") + 1;
vlast = (vstart + index(verblist[vstart..$], " ")) - 2;
if ((namelen >= (star - vstart)) && ((!(v = strsub(verblist[vstart..vlast], "*", ""))) || (index(v, (verblist[vlast] == "*") ? name[1..min(namelen, length(v))] | name) == 1)))
return 1;
endif
verblist = verblist[vlast + 1..$];
endwhile
endif
return 0;
.
#59:39
"$code_utils:substitute(string,subs) => new line";
"Subs are a list of lists, {{\"target\",\"sub\"},{...}...}";
"Substitutes targets for subs in a delimited string fashion, avoiding substituting anything inside quotes, e.g. player:tell(\"don't sub here!\")";
{s, subs} = args;
lets = "abcdefghijklmnopqrstuvwxyz0123456789";
for x in (subs)
len = length(sub = x[1]);
delimited = index(lets, sub[1]) && index(lets, sub[len]);
prefix = "";
while (i = index(s, sub))
prefix = prefix + s[1..i - 1];
if ((((prefix == "") || ((!delimited) || (!index(lets, prefix[$])))) && ((!delimited) || (((i + len) > length(s)) || (!index(lets, s[i + len]))))) && (!this:inside_quotes(prefix)))
prefix = prefix + x[2];
else
prefix = prefix + s[i..(i + len) - 1];
endif
s = s[i + len..length(s)];
endwhile
s = prefix + s;
endfor
return s;
.
#59:40
":show_who_listing(players[,more_players])";
" prints a listing of the indicated players.";
" For players in the first list, idle/connected times are shown if the player is logged in, otherwise the last_disconnect_time is shown.  For players in the second list, last_disconnect_time is shown, no matter whether the player is logged in.";
{plist, ?more_plist = {}} = args;
idles = itimes = offs = otimes = {};
argstr = dobjstr = iobjstr = prepstr = "";
for p in (more_plist)
if (!valid(p))
caller:notify(tostr(p, " <invalid>"));
elseif (typeof(t = `p.last_disconnect_time ! E_PROPNF') == INT)
if (!(p in offs))
offs = {@offs, p};
otimes = {@otimes, {-t, -t, p}};
endif
elseif (is_player(p))
caller:notify(tostr(p.name, " (", p, ") ", (t == E_PROPNF) ? "is not a $player." | "has a garbled .last_disconnect_time."));
else
caller:notify(tostr(p.name, " (", p, ") is not a player."));
endif
endfor
for p in (plist)
if (p in offs)
elseif (!valid(p))
caller:notify(tostr(p, " <invalid>"));
elseif (typeof(i = `idle_seconds(p) ! ANY') != ERR)
if (!(p in idles))
idles = {@idles, p};
itimes = {@itimes, {i, connected_seconds(p), p}};
endif
elseif (typeof(t = `p.last_disconnect_time ! E_PROPNF') == INT)
offs = {@offs, p};
otimes = {@otimes, {-t, -t, p}};
elseif (is_player(p))
caller:notify(tostr(p.name, " (", p, ") not logged in.", (t == E_PROPNF) ? "  Not a $player." | "  Garbled .last_disconnect_time."));
else
caller:notify(tostr(p.name, " (", p, ") is not a player."));
endif
endfor
if (!(idles || offs))
return 0;
endif
idles = $list_utils:sort_alist(itimes);
offs = $list_utils:sort_alist(otimes);
"...";
"... calculate widths...";
"...";
headers = {"Player name", @idles ? {"Connected", "Idle time"} | {"Last disconnect time", ""}, "Location"};
total_width = `caller:linelen() ! ANY => 0' || 79;
max_name = total_width / 4;
name_width = length(headers[1]);
names = locations = {};
for lst in ({@idles, @offs})
$command_utils:suspend_if_needed(0);
p = lst[3];
namestr = tostr(p.name[1..min(max_name, $)], " (", p, ")");
name_width = max(length(namestr), name_width);
names = {@names, namestr};
if (typeof(wlm = `p.location:who_location_msg(p) ! ANY') != STR)
wlm = valid(p.location) ? p.location.name | tostr("** Nowhere ** (", p.location, ")");
endif
locations = {@locations, wlm};
endfor
time_width = 3 + (offs ? 12 | length("59 minutes"));
before = {0, w1 = 3 + name_width, w2 = w1 + time_width, w2 + time_width};
"...";
"...print headers...";
"...";
su = $string_utils;
tell1 = headers[1];
tell2 = su:space(tell1, "-");
for j in [2..4]
tell1 = su:left(tell1, before[j]) + headers[j];
tell2 = su:left(tell2, before[j]) + su:space(headers[j], "-");
endfor
caller:notify(tell1[1..min($, total_width)]);
caller:notify(tell2[1..min($, total_width)]);
"...";
"...print lines...";
"...";
active = 0;
for i in [1..total = (ilen = length(idles)) + length(offs)]
if (i <= ilen)
lst = idles[i];
if (lst[1] < (5 * 60))
active = active + 1;
endif
l = {names[i], su:from_seconds(lst[2]), su:from_seconds(lst[1]), locations[i]};
else
lct = offs[i - ilen][3].last_connect_time;
ldt = offs[i - ilen][3].last_disconnect_time;
ctime = `caller:ctime(ldt) ! ANY => 0' || ctime(ldt);
l = {names[i], (lct <= time()) ? ctime | "Never", "", locations[i]};
if ((i == (ilen + 1)) && idles)
caller:notify(su:space(before[2]) + "------- Disconnected -------");
endif
endif
tell1 = l[1];
for j in [2..4]
tell1 = su:left(tell1, before[j]) + l[j];
endfor
caller:notify(tell1[1..min($, total_width)]);
if ($command_utils:running_out_of_time())
if ($login:is_lagging())
"Check lag two ways---global lag, but we might still fail due to individual lag of the queue this runs in, so check again later.";
caller:notify(tostr("Plus ", total - i, " other players (", total, " total; out of time and lag is high)."));
return;
endif
now = time();
suspend(0);
if ((time() - now) > 10)
caller:notify(tostr("Plus ", total - i, " other players (", total, " total; out of time and lag is high)."));
return;
endif
endif
endfor
"...";
"...epilogue...";
"...";
caller:notify("");
if (total == 1)
active_str = ", who has" + ((active == 1) ? "" | " not");
else
if (active == total)
active_str = (active == 2) ? "s, both" | "s, all";
elseif (active == 0)
active_str = "s, none";
else
active_str = tostr("s, ", active);
endif
active_str = tostr(active_str, " of whom ha", (active == 1) ? "s" | "ve");
endif
caller:notify(tostr("Total: ", total, " player", active_str, " been active recently."));
return total;
.
#59:41
":_egrep_verb_code_all(regexp,object,verbname[,casematters]) => list of lines number";
"  returns list of all lines matching regexp in object:verbname code";
set_task_perms(caller_perms());
{pattern, object, vname, ?casematters = 0} = args;
lines = {};
for line in (vc = `verb_code(object, vname, 1, 0) ! ANY => {}')
if (match(line, pattern, casematters))
lines = {@lines, line};
endif
endfor
return lines;
.
#59:42
":_grep_verb_code_all(pattern,object,verbname[,casematters]) => list of lines";
"  returns list of lines on which pattern occurs in code for object:verbname";
set_task_perms(caller_perms());
{pattern, object, vname, ?casematters = 0} = args;
lines = {};
for line in (vc = `verb_code(object, vname) ! ANY => {}')
if (index(line, pattern, casematters))
lines = {@lines, line};
endif
endfor
return lines;
.
#59:43
":verb_usage([object,verbname]) => usage string at beginning of verb code, if any";
"default is the calling verb";
set_task_perms(caller_perms());
c = callers()[1];
{?object = c[4], ?vname = c[2]} = args;
if (typeof(code = `verb_code(object, vname) ! ANY') == ERR)
return code;
else
doc = {};
indent = "^$";
for line in (code)
if (match(line, "^\"%([^\\\"]%|\\.%)*\";$"))
"... now that we're sure `line' is just a string, eval() is safe...";
e = $no_one:eval(line)[2];
if (subs = match(e, "^%(%(Usage%|Syntax%): +%)%([^ ]+%)%(.*$%)"))
"Server is broken, hence the next three lines:";
if (subs[3][4][1] > subs[3][4][2])
subs[3][4] = {0, -1};
endif
indent = ("^%(" + $string_utils:space(length(substitute("%1", subs)))) + " *%)%([^ ]+%)%(.*$%)";
docverb = substitute("%3", subs);
if (match(vname, "^[0-9]+$"))
vname = docverb;
endif
doc = {@doc, (substitute("%1", subs) + vname) + substitute("%4", subs)};
elseif (subs = match(e, indent))
if (substitute("%3", subs) == docverb)
doc = {@doc, (substitute("%1", subs) + vname) + substitute("%4", subs)};
else
doc = {@doc, e};
endif
elseif (indent)
return doc;
endif
else
return doc;
endif
endfor
return doc;
endif
.
#59:44
"returns the callers() frame for the current verb.";
return callers()[1];
.
#59:45
"returns {this:verb_frame(), @callers()}.";
return callers();
.
#59:46
":move_verb(OBJ from, STR verb name, OBJ to, [STR new verb name]) -> Moves the specified verb from one object to another. Returns {OBJ, Full verb name} where the verb now resides if successful, error if not. To succeed, caller_perms() must control both objects and own the verb, unless called with wizard perms. Supplying a fourth argument moves the verb to a new name.";
"Should handle verbnames with aliases and wildcards correctly.";
who = caller_perms();
{from, origverb, to, ?destverb = origverb} = args;
if ((((typeof(from) != OBJ) || (typeof(to) != OBJ)) || (typeof(origverb) != STR)) || (typeof(destverb) != STR))
"check this first so we can parse out long verb names next";
return E_TYPE;
endif
origverb_first = strsub(origverb[1..index(origverb + " ", " ") - 1], "*", "") || "*";
destverb_first = strsub(destverb[1..index(destverb + " ", " ") - 1], "*", "") || "*";
if ((!valid(from)) || (!valid(to)))
return E_INVARG;
elseif ((from == to) && (destverb == origverb))
"Moving same origverb onto the same object puts the verbcode in the wrong one. Just not allow";
return E_NACC;
elseif (((!$perm_utils:controls(who, from)) && (!from.w)) || ((!$perm_utils:controls(who, to)) && (!to.w)))
"caller_perms() is not allowed to hack on either object in question";
return E_PERM;
elseif (!$object_utils:defines_verb(from, origverb_first))
"verb is not defined on the from object";
return E_VERBNF;
elseif ((vinfo = verb_info(from, origverb_first)) && (!$perm_utils:controls(who, vinfo[1])))
"caller_perms() is not permitted to add a verb with the existing verb owner";
return E_PERM;
elseif (!who.programmer)
return E_PERM;
else
"we now know that the caller's perms control the objects or the objects are writable, and we know that the caller's perms control the prospective verb owner (by more traditional means)";
vcode = verb_code(from, origverb_first);
vargs = verb_args(from, origverb_first);
vinfo[3] = (destverb == origverb) ? vinfo[3] | destverb;
if (typeof(res = `add_verb(to, vinfo, vargs) ! ANY') == ERR)
return res;
else
set_verb_code(to, destverb_first, vcode);
delete_verb(from, origverb_first);
return {to, vinfo[3]};
endif
endif
.
#59:47
":move_prop(OBJ from, STR prop name, OBJ to, [STR new prop name]) -> Moves the specified property and its contents from one object to another. Returns {OBJ, property name} where the property now resides if successful, error if not. To succeed, caller_perms() must control both objects and own the property, unless called with wizard perms. Supplying a fourth argument gives the property a new name on the new object.";
who = caller_perms();
{from, origprop, to, ?destprop = origprop} = args;
if ((((typeof(from) != OBJ) || (typeof(to) != OBJ)) || (typeof(origprop) != STR)) || (typeof(destprop) != STR))
return E_TYPE;
elseif ((!valid(from)) || (!valid(to)))
return E_INVARG;
elseif ((from == to) && (destprop == origprop))
"Moving same prop onto the same object puts the contents in the wrong one. Just not allow";
return E_NACC;
elseif (((!$perm_utils:controls(who, from)) && (!from.w)) || ((!$perm_utils:controls(who, to)) && (!to.w)))
"caller_perms() is not allowed to hack on either object in question";
return E_PERM;
elseif (!$object_utils:defines_property(from, origprop))
"property is not defined on the from object";
return E_PROPNF;
elseif ((pinfo = property_info(from, origprop)) && (!$perm_utils:controls(who, pinfo[1])))
"caller_perms() is not permitted to add a property with the existing property owner";
return E_PERM;
elseif (!who.programmer)
return E_PERM;
else
"we now know that the caller's perms control the objects or the objects are writable, and we know that the caller's perms control the prospective property owner (by more traditional means)";
pdata = from.(origprop);
pname = (destprop == origprop) ? origprop | destprop;
if (typeof(res = `add_property(to, pname, pdata, pinfo) ! ANY') == ERR)
return res;
else
delete_property(from, origprop);
return {to, pname};
endif
endif
.
#59:48
"Do not remove this verb!  This is an auxiliary verb for :eval_d().";
.
#59:49
":display_callers([callers() style list]) - displays the output of the given argument, assumed to be a callers() output. See `help callers()' for details. Will use callers() explicitly if no argument is passed.";
call = (caller_perms() == player) ? "notify_lines" | "tell_lines";
player:(call)(this:callers_text(@args));
.
#59:50
":callers_text([callers() style list]) - returns the output of the given argument, assumed to be a callers() output. See `help callers()' for details. Will use callers() explicitly if no argument is passed.";
linelen = min(player:linelen(), 200);
text = {};
su = $string_utils;
lu = $list_utils;
verbwidth = 0;
{?match = callers(1)} = args;
for verbitem in (lu:slice(match, 2))
verbwidth = max(verbwidth, length(verbitem));
endfor
verbwidth = 3 + verbwidth;
numwidth = ((linelen - verbwidth) / 4) - 1;
widths = {numwidth, verbwidth, numwidth, numwidth, numwidth};
top = l = between = "";
for x in [1..5]
top = (top + between) + su:left({"This", "Verb", "Permissions", "VerbLocation", "Player"}[x], -widths[x]);
l = (l + between) + su:space(widths[x], "-");
between = " ";
endfor
text = listappend(text, top);
text = listappend(text, l);
for line in (match)
output = {};
for bit in [1..5]
$command_utils:suspend_if_needed(3);
"bit == 2 below for verb: append line number.";
output = {@output, su:left((typeof(word = line[bit]) == STR) ? (bit == 2) ? tostr(word, "(", `line[6] ! ANY => 0', ")") | word | tostr(word, "(", valid(word) ? lu:shortest({word.name, @word.aliases}) | ((word == $nothing) ? "invalid" | ((word == $ambiguous_match) ? "ambiguous match" | "Error")), ")"), -widths[bit]), " "};
endfor
text = listappend(text, su:trimr(tostr(@output)));
endfor
text = listappend(text, l);
return text;
.
#59:51
":set_property_value(object, property, value)";
" set_verb_or_property(same) -- similar to `verb_or_property'";
"  -- attempts to set <object>.<property> to <value>.  If there exists <object>:set_<property>, then it is called and its returned value is returned.  If not, we try to set the property directly; the result of this is returned.";
set_task_perms(caller_perms());
if (length(args) != 3)
return E_ARGS;
elseif (typeof(o = args[1]) != OBJ)
return E_INVARG;
elseif (!$recycler:valid(o))
return E_INVIND;
elseif (typeof(p = args[2]) != STR)
return E_INVARG;
elseif ($object_utils:has_callable_verb(o, v = "set_" + p))
return o:(v)(args[3]);
else
return o.(p) = args[3];
endif
.
#59:52
"$code_utils:owns_task(task_id, who)";
"The purpose of this is to be faster than $code_utils:task_owner(task_id) in those cases where you are interested in whether a certain person owns the task rather than in determining the owner of a task where you have no preconceived notion of the owner.";
return $list_utils:assoc(args[1], $wiz_utils:queued_tasks(args[2]));
.
#59:53
"Syntax:  $code_utils:dflag_on()   => 0|1";
"";
"Returns true if the verb calling the verb that called this verb has the `d' flag set true. Returns false if it is !d. If there aren't that many callers, or the calling verb was a builtin such as eval, assume the debug flag is on for traceback purposes and return true.";
"This is useful for determining whether the calling verb should return or raise an error to the verb that called it.";
return (length(c = callers()) >= 2) ? `index(verb_info(c[2][4], c[2][2])[2], "d") && 1 ! E_INVARG => 1' | 1;
.
#59:54
"type_str -- returns a string describing the type of args[1]";
x = args[1];
type_data = {1, 3.14, "", #0, E_NONE, {}};
type_strs = {"INT", "FLOAT", "STR", "OBJ", "ERR", "LIST"};
for i in [1..length(type_data)]
if (typeof(type_data[i]) == typeof(x))
return type_strs[i];
endif
endfor
return "NONE";
.
#59:55
":dump_properties (object, create_flag): returns the list of strings representing the property information for this object and its ancestor objects in @dump format.";
set_task_perms(caller_perms());
{dobj, create, ?targname = tostr(dobj)} = args;
result = {};
for p in (`properties(dobj) ! ANY => {}')
pquoted = toliteral(p);
try
info = property_info(dobj, p);
value = dobj.(p);
except error (ANY)
result = {@result, tostr("\"", targname, ".(", pquoted, ") => ", toliteral(error[1]), " (", error[2], ")")};
continue p;
endtry
if (create)
uvalue = (typeof(value) == LIST) ? "{}" | 0;
result = {@result, tostr("@prop ", targname, ".", pquoted, " ", uvalue || toliteral(value), " ", info[2] || "\"\"", (info[1] == dobj.owner) ? "" | tostr(" ", info[1]))};
if (uvalue && value)
result = {@result, tostr(";;", targname, ".(", pquoted, ") = ", toliteral(value))};
endif
else
if (info[2] != "rc")
result = {@result, tostr("@chmod ", targname, ".", pquoted, " ", info[2])};
endif
if (info[1] != dobj.owner)
result = {@result, tostr("@chown ", targname, ".", pquoted, " ", info[1])};
endif
result = {@result, tostr(";;", targname, ".(", pquoted, ") = ", toliteral(value))};
endif
$command_utils:suspend_if_needed(0);
endfor
for a in ($object_utils:ancestors(dobj))
for p in (`properties(a) ! ANY => {}')
$command_utils:suspend_if_needed(1);
pquoted = toliteral(p);
try
value = dobj.(p);
except error (ANY)
result = {@result, tostr("\"", targname, ".(", pquoted, ") => ", toliteral(error[1]), " (", error[2], ")")};
continue p;
endtry
avalue = `a.(p) ! ANY';
if ((typeof(avalue) == ERR) || (value != avalue))
result = {@result, tostr(";;", targname, ".(", pquoted, ") = ", toliteral(value))};
endif
endfor
$command_utils:suspend_if_needed(1);
endfor
return result;
.
#59:56
":dump_preamble(object): produces the @create command necessary to dump this object.";
dobj = args[1];
parent = parent(dobj);
pstring = tostr(parent);
for p in (properties(#0))
if (#0.(p) == parent)
pstring = "$" + p;
endif
endfor
return tostr("@create ", pstring, " named ", dobj.name, ":", $string_utils:from_list(dobj.aliases, ","));
.
#59:57
":dump_verbs (object, create_flag): returns the list of strings representing the verb information for this object in @dump format.";
set_task_perms(caller_perms());
{dobj, create, ?targname = tostr(dobj)} = args;
result = {};
v = 1;
while ((info = `verb_info(dobj, v) ! ANY') || (info == E_PERM))
if (`index(info[3], "(old)") ! ANY' && 0)
"Thought about skipping (old) verbs...";
player:tell("Skipping ", dobj, ":\"", info[3], "\"...");
else
if (typeof(info) == ERR)
result = {@result, tostr("\"", dobj, ":", v, " --- ", info, "\";")};
else
if (i = index(vname = info[3], " "))
vname = vname[1..i - 1];
endif
if (vname[1] != "*")
vname = strsub(vname, "*", "");
endif
args = verb_args(dobj, v);
prep = (args[2] in {"any", "none"}) ? args[2] | $code_utils:short_prep(args[2]);
perms = (info[2] != ((args == {"this", "none", "this"}) ? "rxd" | "rd")) ? info[2] || "\"\"" | "";
if (create)
if (info[1] == dobj.owner)
tail = perms ? tostr(" ", perms) | "";
else
tail = tostr(" ", perms || info[2], " ", info[1]);
endif
result = {@result, tostr("@verb ", targname, ":\"", info[3], "\" ", args[1], " ", prep, " ", args[3], tail)};
else
result = {@result, tostr("@args ", targname, ":\"", info[3], "\" ", args[1], " ", prep, " ", args[3])};
if (info[1] != dobj.owner)
result = {@result, tostr("@chown ", targname, ":", vname, " ", info[1])};
endif
if (perms)
result = {@result, tostr("@chmod ", targname, ":", vname, " ", perms)};
endif
endif
if (code = verb_code(dobj, v, 1, 1))
result = {@result, tostr("@program ", targname, ":", vname), @code, ".", ""};
endif
endif
endif
if (`index(tostr(" ", info[3], " "), " * ") ! ANY')
"... we have a * verb.  may as well forget trying to list...";
"... the rest; they're invisible.  set v to something nonstring.";
v = E_TYPE;
else
v = v + 1;
endif
$command_utils:suspend_if_needed(0);
endwhile
return result;
.
#59:58
":_find_verb_lines_containing(pattern,object[,casematters])";
":_find_verb_lines_matching(regexp,object[,casematters])";
"number of verbs in object with code having a line containing pattern or matching regexp";
"prints verbname and all offending lines to player";
set_task_perms(caller_perms());
{pattern, o, ?casematters = 0} = args;
if ($command_utils:running_out_of_time())
player:notify(tostr("...", o));
suspend(0);
endif
if (!valid(o))
return 0;
endif
count = 0;
verbs = $object_utils:accessible_verbs(o);
if (typeof(verbs) != LIST)
return player:notify(tostr("verbs(", o, ") => ", tostr(verbs)));
endif
_grep_verb_code_all = (verb == "_find_verb_lines_matching") ? "_egrep_verb_code_all" | "_grep_verb_code_all";
for vnum in [1..length(verbs)]
found = 0;
for l in (this:(_grep_verb_code_all)(pattern, o, vnum, casematters))
owner = verb_info(o, vnum)[1];
player:notify(tostr(o, ":", verbs[vnum], " [", valid(owner) ? owner.name | "Recycled Player", " (", owner, ")]:  ", l));
found = 1;
$command_utils:suspend_if_needed(0);
endfor
if (found)
count = count + 1;
endif
if ($command_utils:running_out_of_time())
player:notify(tostr("...", o));
suspend(0);
endif
endfor
return count;
.
#60:0
return $player.ownership_quota;
.
#60:1
return $prog.ownership_quota;
.
#60:2
text = pass(@args);
object = $string_utils:match_object(what = args[1], player.location);
if ((text != E_PROPNF) || (!valid(object)))
return text;
elseif (ohelp = `object:help_msg() ! ANY' || `object.help_msg ! ANY')
return {tostr(object.name, " (", object, "):"), "----", @(typeof(ohelp) == LIST) ? ohelp | {ohelp}};
else
about = $object_utils:has_verb(object, "about");
return {tostr("Sorry, but no help is available on ", object.name, " (", object, ")."), tostr("Try `examine ", what, "'", @about ? {" or `about ", what, "'"} | {}, ".")};
endif
.
#60:3
topiclist = pass(@args);
if (topiclist || (!args))
return topiclist;
elseif (valid(o = $string_utils:match_object(what = args[1], player.location)))
return {what};
else
return {};
endif
.
#60:4
text = {};
for db in ($code_utils:help_db_list())
if ($object_utils:has_callable_verb(db, "index"))
text = {@text, @db:index({tostr(db.name, " (", db, ")")})};
endif
endfor
return text;
.
#60:5
hdr = "Available Help Indices";
text = {"", hdr, $string_utils:space(hdr, "-")};
for db in ($code_utils:help_db_list())
try
for p in (db:find_index_topics())
text = {@text, tostr($string_utils:left(p, 14), " -- ", `db.(p)[2] ! ANY' || db.name, " (", db, ")")};
endfor
except (ANY)
"generally it will be E_TYPE when :find_index_topics returns an ERR. Just skip";
continue db;
endtry
endfor
if (full = this:find_full_index_topic())
text = {@text, "", tostr($string_utils:left(full, 14), " -- ", "EVERYTHING")};
endif
return text;
.
#60:6
wizzes = {};
for w in ($object_utils:leaves($wiz))
if (w.wizard && (w.advertised && is_player(w)))
wizzes = {@wizzes, w};
endif
endfor
wizzes = {#2, @$list_utils:randomly_permute(setremove(wizzes, #2))};
numwiz = length(wizzes);
hlist = {"ArchWizard:", "Wizard" + ((numwiz == 2) ? ":" | "s:"), @$list_utils:make(max(0, numwiz - 2), "")};
slist = {};
su = $string_utils;
for i in [1..numwiz]
wiz = wizzes[i];
slist = {@slist, tostr(su:left(hlist[i], 13), su:left(wiz.name, 16), (wpi = `wiz.public_identity.name ! ANY') ? (" (a.k.a. " + wpi) + ")" | "")};
endfor
return slist;
.
#60:7
if (((text = pass(@args)) != E_PROPNF) || ((!valid(object = $string_utils:match_object(what = args[1], player.location))) || (!$object_utils:has_property(object, "help_msg"))))
return text;
else
return {tostr(";;", $code_utils:corify_object(object), ".help_msg = $command_utils:read_lines()"), @$command_utils:dump_lines((typeof(text = object.help_msg) == LIST) ? text | {text})};
endif
.
#60:8
":find_full_index_topic([search])";
"Return the *full_index* topic or 0";
"If search argument is given and true, we don't depend on cached info.";
{?search = 0} = args;
"... N.B.  There is no cached info; it turns out that";
"... full-index is near enough to the beginning of $help's property list";
"... that there's no point to doing this.  --Rog";
for p in (`properties(this) ! E_PERM => {}')
if (`this.(p)[1] ! ANY' == "*full_index*")
return p;
endif
endfor
return 0;
.
#61:0
raw = ctime(this.last_news_time);
"         111111111122222";
"123456789012345678901234";
"Fri Nov 30 14:31:21 1990";
date = (raw[1..10] + ",") + raw[20..24];
return strsub(this.description, "%d", date);
.
#61:1
return pass(@args) || (args[1] in $list_utils:map_prop($object_utils:descendants($wiz), "mail_identity"));
.
#61:2
if (this:ok_write(caller, caller_perms()))
seq = args[1];
this.current_news_going = $seq_utils:intersection(this.current_news, seq);
this.current_news = $seq_utils:contract(this.current_news, seq);
return $mail_agent:(verb)(@args);
else
return E_PERM;
endif
.
#61:3
if (!this:ok_write(caller, caller_perms()))
return E_PERM;
endif
seq = $mail_agent:(verb)(@args);
this.current_news = $seq_utils:union(this.current_news_going, $seq_utils:expand(this.current_news, seq));
this.current_news_going = {};
return seq;
.
#61:4
if (!this:ok_write(caller, caller_perms()))
return E_PERM;
endif
this.current_news_going = {};
return $mail_agent:(verb)(@args);
.
#61:5
if (!this:ok_write(caller, caller_perms()))
return E_PERM;
else
this.current_news = new = args[1];
if (new)
newlast = $seq_utils:last(new);
newlasttime = this:messages_in_seq(newlast)[2][1];
if (newlasttime > this.last_news_time)
"... only notify people if there exists a genuinely new item...";
this.last_news_time = newlasttime;
this:touch();
endif
else
"...flush everything...";
this.last_news_time = 0;
endif
endif
.
#61:6
if (!this:ok_write(caller, caller_perms()))
return E_PERM;
else
return this:set_current_news($seq_utils:union(this.current_news, args[1]));
endif
.
#61:7
if (!this:ok_write(caller, caller_perms()))
return E_PERM;
else
return this:set_current_news($seq_utils:intersection(this.current_news, $seq_utils:complement(args[1])));
endif
.
#61:8
":news_display_seq_full(msg_seq) => {cur, last-read-date}";
"Display the given msg_seq as a collection of news items";
set_task_perms(caller_perms());
desc = this:description();
player:notify((typeof(desc) == LIST) ? desc[1] | desc);
player:notify("");
msgs = this:messages_in_seq(args[1]);
for i in [-(n = length(msgs))..-1]
x = msgs[-i];
player:notify_lines(this:to_text(@x[2]));
player:notify("");
$command_utils:suspend_if_needed(0);
endfor
player:notify("(end)");
return {msgs[n][1], msgs[n][2][1]};
.
#61:9
":to_text(@msg) => message in text form -- formatted like a $news entry circa October, 1993";
date = args[1];
by = args[2];
"by = by[1..index(by, \"(\") - 2]";
subject = (args[4] == " ") ? "-*-NEWS FLASH-*-" | $string_utils:uppercase(args[4]);
text = args[("" in {@args, ""}) + 1..$];
ctime = $time_utils:time_sub("$D, $N $3, $Y", date);
return {ctime, subject, @text};
return {subject, tostr("  by ", by, " on ", ctime), "", @text};
.
#61:10
set_task_perms(caller_perms());
if ((player:get_current_message(this) || {0, 0})[2] < this.last_news_time)
if ((n = player:mail_option("news")) in {0, "all"})
player:tell("There is new news.  Type `news' to read all news or `news new' to read just new news.");
elseif (n == "contents")
player:tell("There is new news.  Type `news all' to read all news or `news new' to read just new news.");
elseif (n == "new")
player:tell("There is new news.  Type `news' to read new news, or `news all' to read all news.");
endif
endif
.
#61:11
if (!this:ok_write(caller, valid(who = caller_perms()) ? who | player))
player:notify("Permission denied.");
return;
endif
fork (0)
for p in (connected_players())
$command_utils:suspend_if_needed(0);
if ((p:get_current_message(this) || {0, 0})[2] < this.last_news_time)
p:notify("There's a new edition of the newspaper.  Type 'news new' to see the new article(s).");
endif
endfor
endfork
.
#61:12
if ((caller_perms() != #-1) && (caller_perms() != player))
raise(E_PERM);
endif
set_task_perms(player);
if (!this:is_writable_by(player))
player:notify("You can't write the news.");
elseif (typeof(result = this:add_news(args[1..(prepstr in args) - 1], player:get_current_message(this) || {0, 0})) == STR)
player:notify(result);
else
new = this.current_news;
if (new)
player:notify("Current newspaper set.");
this:display_seq_headers(new);
else
player:notify("Current newspaper is now empty.");
endif
endif
.
#61:13
if ((caller_perms() != #-1) && (caller_perms() != player))
raise(E_PERM);
endif
set_task_perms(player);
if (!this:is_writable_by(player))
player:notify("You can't write the news.");
elseif (typeof(result = this:rm_news(args[1..(prepstr in args) - 1], player:get_current_message(this) || {0, 0})) == STR)
player:notify(result);
else
new = this.current_news;
if (new)
player:notify("Current newspaper set.");
this:display_seq_headers(new);
else
player:notify("Current newspaper is now empty.");
endif
endif
.
#61:14
set_task_perms(player);
if (!this:is_writable_by(player))
player:notify("You can't write the news.");
elseif (typeof(seq = this:_parse(strings = args[(prepstr in args) + 1..$], @player:get_current_message(this) || {0, 0})) == STR)
player:notify(seq);
else
old = this.current_news;
if (old == seq)
player:notify("No change.");
else
this:set_current_news(seq);
if (seq)
player:notify("Current newspaper set.");
this:display_seq_headers(seq);
else
player:notify("Current newspaper is now empty.");
endif
endif
endif
.
#61:15
if (!(strings = args[1]))
return "You need to specify a message sequence";
elseif (typeof(pms = this:parse_message_seq(@args)) == STR)
return $string_utils:substitute(pms, {{"%f", "The news"}, {"%<has>", "has"}, {"%%", "%"}});
elseif (typeof(pms) != LIST)
return tostr(pms);
elseif (length(pms) > 1)
return tostr("I don't understand `", pms[2], "'.");
elseif (!(seq = pms[1]))
return tostr("The News (", this, ") has no `", $string_utils:from_list(strings, " "), "' messages.");
else
return seq;
endif
.
#61:16
if (caller_perms().wizard)
pass(@args);
this.description = "It's the current issue of the News, dated %d.";
this.moderated = 1;
this.last_news_time = 0;
this.readers = 1;
this.expire_period = 0;
this.archive_news = {};
$mail_agent:send_message(#2, this, "Welcome to LambdaCore", $wiz_utils.new_core_message);
this:add_news("$");
else
return E_PERM;
endif
.
#61:17
if (!this:ok_write(caller, caller_perms()))
$error:raise(E_PERM);
endif
{specs, ?cur = {0, 0}} = args;
seq = this:_parse(specs, @cur);
if (typeof(seq) == STR)
return seq;
endif
old = this.current_news;
new = $seq_utils:union(old, seq);
if (old == new)
return "Those messages are already in the news.";
endif
this:set_current_news(new);
return 1;
.
#61:18
if (!this:ok_write(caller, caller_perms()))
raise(E_PERM);
endif
{specs, ?cur = {0, 0}} = args;
seq = this:_parse(specs, @cur);
if (typeof(seq) == STR)
return seq;
endif
old = this.current_news;
new = $seq_utils:intersection(old, $seq_utils:complement(seq));
if (old == new)
return "Those messages were not in the news.";
endif
this:set_current_news(new);
return 1;
.
#61:19
player:notify("The following articles are currently in the newspaper:");
this:display_seq_headers(this.current_news);
.
#61:20
set_task_perms(player);
if (this:is_writable_by(player))
this:set_current_news({});
player:notify("Current newspaper is now empty.");
else
player:notify("You can't write the news.");
endif
.
#62:0
"Copied from The Coat Closet (#11):disfunc by Haakon (#2) Mon May  8 10:41:04 1995 PDT";
if ((((cp = caller_perms()) == (who = args[1])) || $perm_utils:controls(cp, who)) || (caller == this))
"need the first check since guests don't control themselves";
if (who.home == this)
move(who, $limbo);
this:announce("You hear a quiet popping sound; ", who.name, " has disconnected.");
else
pass(who);
endif
endif
.
#62:1
"Copied from The Coat Closet (#11):enterfunc by Haakon (#2) Mon May  8 10:41:38 1995 PDT";
who = args[1];
if ($limbo:acceptable(who))
move(who, $limbo);
else
pass(who);
endif
.
#62:2
"Copied from The Coat Closet (#11):match by Lambda (#50) Mon May  8 10:42:01 1995 PDT";
m = pass(@args);
if (m == $failed_match)
"... it might be a player off in the body bag...";
m = $string_utils:match_player(args[1]);
if (valid(m) && (!(m.location in {this, $limbo})))
return $failed_match;
endif
endif
return m;
.
#62:3
"Copied from The Coat Closet (#11):init_for_core by Nosredna (#2487) Mon May  8 10:42:52 1995 PDT";
if (!caller_perms().wizard)
return E_PERM;
endif
for v in ({"announce*", "emote", "button", "knob"})
if (`verb_info($player_start, v) ! E_VERBNF => 0')
delete_verb($player_start, v);
endif
endfor
for p in ({"out", "quiet", "button"})
if (p in properties($player_start))
delete_property($player_start, p);
endif
endfor
for p in ($object_utils:all_properties($room))
clear_property($player_start, p);
endfor
$player_start.name = "The First Room";
$player_start.aliases = {};
$player_start.description = "This is all there is right now.";
$player_start.exits = $player_start.entrances = {};
"... at the end since $room:init_for_core moves stuff in";
pass(@args);
.
#62:4
"Copied from The Coat Closet (#11):keep_clean by Haakon (#2) Mon May  8 10:47:08 1995 PDT";
if ($perm_utils:controls(caller_perms(), this))
junk = {};
while (1)
for x in (junk)
$command_utils:suspend_if_needed(0);
if (x in this.contents)
"This is old junk that's still around five minutes later.  Clean it up.";
if (!valid(x.owner))
move(x, $nothing);
#2:tell(">**> Cleaned up orphan object `", x.name, "' (", x, "), owned by ", x.owner, ", to #-1.");
elseif (!$object_utils:contains(x, x.owner))
move(x, x.owner);
x.owner:tell("You shouldn't leave junk in ", this.name, "; ", x.name, " (", x, ") has been moved to your inventory.");
#2:tell(">**> Cleaned up `", x.name, "' (", x, "), owned by `", x.owner.name, "' (", x.owner, "), to ", x.owner, ".");
endif
endif
endfor
junk = {};
for x in (this.contents)
if ((seconds_left() < 2) || (ticks_left() < 1000))
suspend(0);
endif
if (!is_player(x))
junk = {@junk, x};
endif
endfor
suspend(5 * 60);
endwhile
endif
.
#63:0
"Return a toad (child of #1, owned by $hacker) from this.contents.  Move it to #-1.  Recreate as a child of args[1], or of #1 if no args are given.  Chown to caller_perms() or args[2] if present.";
{?what = #1, ?who = caller_perms()} = args;
if (!(caller_perms().wizard || (who == caller_perms())))
return E_PERM;
elseif (!(valid(what) && is_player(who)))
return E_INVARG;
elseif ((((who != what.owner) && (!what.f)) && (!who.wizard)) && (!caller_perms().wizard))
return E_PERM;
endif
for potential in (this.contents)
if (((potential.owner == $hacker) && (parent(potential) == $garbage)) && (!children(potential)))
return this:setup_toad(potential, who, what);
endif
endfor
return E_NONE;
.
#63:1
"Take the object in args[1], and turn it into a child of #1 owned by $hacker.";
"If the object is a player, decline.";
item = args[1];
if (!$perm_utils:controls(caller_perms(), item))
raise(E_PERM);
elseif (is_player(item))
raise(E_INVARG);
endif
this:addhist(caller_perms(), item);
"...recreate can fail (:recycle can crash)...";
this:add_orphan(item);
this:kill_all_tasks(item);
$quota_utils:preliminary_reimburse_quota(item.owner, item);
$building_utils:recreate(item, $garbage);
this:remove_orphan(item);
"...";
$wiz_utils:set_owner(item, $hacker);
item.name = tostr("Recyclable ", item);
`move(item, this) ! ANY => 0';
.
#63:2
e = `set_task_perms(caller_perms()) ! ANY';
if (typeof(e) == ERR)
return e;
else
val = this:_recreate(@args);
return (val == E_NONE) ? $quota_utils:bi_create(@args) | val;
endif
.
#63:3
if (caller == this)
h = this.history;
if ((len = length(h)) > this.nhist)
h = h[len - this.nhist..len];
endif
this.history = {@h, args};
endif
.
#63:4
if ($perm_utils:controls(valid(caller_perms()) ? caller_perms() | player, this))
for x in (this.history)
pname = valid(x[1]) ? x[1].name | "A recycled player";
oname = valid(x[2]) ? x[2].name | "recycled";
player:notify(tostr(pname, " (", x[1], ") recycled ", x[2], " (now ", oname, ")"));
endfor
else
player:tell("Sorry.");
endif
.
#63:5
"added check that obj is already $garbage - Bits 12/16/5";
if (!(caller_perms() in {player, #-1}))
raise(E_PERM);
endif
dobj = valid(dobj) ? dobj | $string_utils:match_object(dobjstr, player.location);
if (!valid(dobj))
dobj = (n = toint(dobjstr)) ? toobj(n) | #-1;
endif
if (!valid(dobj))
player:tell("Couldn't parse ", dobjstr, " as a valid object number.");
elseif (!(dobj in this.contents))
player:tell("Couldn't find ", dobj, " in ", this.name, ".");
elseif (!$object_utils:isa(dobj, $garbage))
player:tell("Sorry, that isn't recyclable.");
elseif ($object_utils:has_callable_verb(this, "request_refused") && (msg = this:request_refused(player, dobj)))
player:tell("Sorry, can't do that:  ", msg);
else
if (typeof(emsg = this:setup_toad(dobj, player, $root_class)) != ERR)
dobj:moveto(player);
dobj.aliases = {dobj.name = "Object " + tostr(dobj)};
player:tell("You now have ", dobj, " ready for @recreation.");
if (this.announce_removal_msg)
player.location:announce($string_utils:pronoun_sub(this.announce_removal_msg));
endif
else
player:tell(emsg);
endif
endif
.
#63:6
"this:setup_toad(objnum,new_owner,parent)";
"Called by :_create and :request.";
if (caller != this)
return E_PERM;
endif
{potential, who, what} = args;
if (!$quota_utils:creation_permitted(who))
return E_QUOTA;
else
$wiz_utils:set_owner(potential, who);
move(potential, #-1);
set_task_perms({@callers(), {#-1, "", player}}[2][3]);
"... if :initialize crashes...";
this:add_orphan(potential);
$building_utils:recreate(potential, what);
this:remove_orphan(potential);
"... if we don't get this far, the object stays on the orphan list...";
"... orphan list should be checked periodically...";
return potential;
endif
.
#63:7
if (caller == this)
this.orphans = setadd(this.orphans, args[1]);
endif
.
#63:8
if (caller == this)
this.orphans = setremove(this.orphans, args[1]);
endif
.
#63:9
"Usage:  valid(object)";
"True if object is valid and not $garbage.";
return valid(args[1]) && (parent(args[1]) != $garbage);
.
#63:10
if (caller_perms().wizard)
this.orphans = {};
this.history = {};
this.lost_souls = {};
pass(@args);
endif
.
#63:11
who = caller_perms();
if (!valid(parent = {@args, $garbage}[1]))
return E_INVARG;
elseif (!who.wizard)
return E_PERM;
elseif (typeof(o = renumber($quota_utils:bi_create(parent, $hacker))) == ERR)
"..death...";
elseif (parent == $garbage)
$recycler:_recycle(o);
else
o.aliases = {o.name = tostr("Resurrectee ", o)};
$wiz_utils:set_owner(o, who);
move(o, who);
endif
reset_max_object();
return o;
.
#63:12
if (!caller_perms().wizard)
raise(E_PERM);
endif
fork (1800)
this:(verb)();
endfork
for x in (this.lost_souls)
this.lost_souls = setremove(this.lost_souls, x);
if ((valid(x) && (typeof(x.owner.owned_objects) == LIST)) && (!(x in x.owner.owned_objects)))
x.owner.owned_objects = setadd(x.owner.owned_objects, x);
$quota_utils:summarize_one_user(x.owner);
endif
$command_utils:suspend_if_needed(0);
endfor
.
#63:13
if (prepstr in {"in", "inside", "into"})
recycler = this;
linelen = ((linelen = abs(player.linelen)) < 20) ? 78 | linelen;
intercolumn_gap = 2;
c_width = length(tostr(max_object())) + intercolumn_gap;
n_columns = (linelen + (c_width - 1)) / c_width;
things = $list_utils:sort_suspended(0, this.contents);
header = tostr(this.name, " (", this, ") contains:");
player:tell_lines({header, @$string_utils:columnize_suspended(0, things, n_columns)});
else
return pass(@args);
endif
"This code contributed by Mickey.";
.
#63:14
who = args[1];
if ($quota_utils.byte_based && (is_clear_property(who, "size_quota") || is_clear_property(who, "owned_objects")))
raise(E_QUOTA);
endif
cheater = 0;
other_cheaters = {};
for x in (this.lost_souls)
if (((valid(x) && ((owner = x.owner) != $hacker)) && (typeof(owner.owned_objects) == LIST)) && (!(x in owner.owned_objects)))
if (owner == who)
who.owned_objects = setadd(who.owned_objects, x);
cheater = 1;
else
"it's someone else's quota scam we're detecting...";
other_cheaters = setadd(other_cheaters, owner);
owner.owned_objects = setadd(owner.owned_objects, x);
this.lost_souls = setremove(this.lost_souls, x);
endif
endif
this.lost_souls = setremove(this.lost_souls, x);
endfor
if ($quota_utils.byte_based)
if (cheater)
$quota_utils:summarize_one_user(who);
endif
if (other_cheaters)
fork (0)
for x in (other_cheaters)
$quota_utils:summarize_one_user(x);
endfor
endfork
endif
endif
.
#63:15
for x in (this.orphans)
if ((!valid(x)) || ((x.owner != $hacker) && (x in x.owner.owned_objects)))
this.orphans = setremove(this.orphans, x);
endif
endfor
.
#63:16
pass(#-1);
.
#63:17
"kill_all_tasks ( object being recycled )";
" -- kill all tasks involving this now-recycled object";
((caller == this) || (caller == #0)) || raise(E_PERM);
{object} = args;
(typeof(object) == OBJ) || raise(E_INVARG);
if ((!valid(object)) || (parent(object) != $garbage))
fork (0)
for t in (queued_tasks())
for c in (`task_stack(t[1]) ! E_INVARG => {}')
if (object in c)
kill_task(t[1]);
continue t;
endif
endfor
endfor
endfork
endif
.
#64:0
return ("Garbage object " + tostr(this)) + ".";
.
#64:1
player:tell(this:description());
.
#64:2
return tostr("Recyclable ", this);
.
#64:3
return;
.
#64:4
args[1]:notify(tostr(this, " is a garbage object, ready for reuse."));
.
#65:0
if (i = args[1] in {"noinclude", "sender"})
return {{{"include", "all"}[i], !args[2]}};
else
return {args};
endif
.
#65:1
"... we'll take anything...";
raw = args[2];
if (raw == 1)
"...+@mail => @mailo=new";
return {args[1], "new"};
else
return args[1..2];
endif
.
#65:2
{oname, raw, data} = args;
if (typeof(raw) == LIST)
if (length(raw) > 1)
return "Too many arguments.";
endif
raw = raw[1];
elseif (typeof(raw) == INT)
return {oname, raw && ((oname == "manymsgs") ? 20 | 1)};
endif
if ((value = $code_utils:toint(raw)) == E_TYPE)
return tostr("`", raw, "'?  Number expected.");
endif
return {oname, value};
.
#65:3
{oname, raw, data} = args;
if (typeof(raw) == STR)
raw = $string_utils:explode(raw, ",");
elseif (typeof(raw) == INT)
return raw ? "You need to give one or more recipients." | {oname, 0};
endif
value = $mail_editor:parse_recipients({}, raw);
if (value)
return {oname, value};
else
return "No valid recipients in list.";
endif
.
#65:4
value = this:get(@args);
if (value)
return {tostr(value), {tostr("Query when asking for ", value, " or more messages.")}};
else
return {0, {"Willing to be spammed with arbitrarily many messages/headers"}};
endif
.
#65:5
value = this:get(@args);
if (value)
return {value, {"Sticky folders:  mail commands default to whatever", "mail collection the previous successful command looked at."}};
else
return {0, {"Teflon folders:  mail commands always default to `on me'."}};
endif
.
#65:6
if (value = this:get(@args))
return {"", {tostr("Default message sequence for @mail:  ", (typeof(value) == STR) ? value | $string_utils:from_list(value, " "))}};
else
default = $mail_agent.("player_default_@mail");
return {0, {tostr("Default message sequence for @mail:  ", (typeof(default) == STR) ? default | $string_utils:from_list(default, " "))}};
endif
.
#65:7
if (value = this:get(@args))
return {"", {tostr("Default Reply-to:  ", $mail_agent:name_list(@value))}};
else
return {0, {"No default Reply-to: field"}};
endif
.
#65:8
if (o = (name = args[2]) in {"sender", "noinclude"})
args[2] = {"all", "include"}[o];
return {@pass(@args), tostr("(", name, " is a synonym for -", args[2], ")")};
else
return pass(@args);
endif
.
#65:9
"... must be object, list of objects, or false...";
value = args[1];
if (typeof(value) == OBJ)
return {{value}};
elseif (!this:istype(value, {{OBJ}}))
return $string_utils:capitalize("Object or list of objects expected.");
else
return {value};
endif
.
#65:10
if (value = this:get(@args))
return {value, {"Have MOO-mail automatically forwarded to me at", "my registered email-address."}};
else
return {value, {"Receive MOO-mail here on the MOO."}};
endif
"Last modified Tue Jun  1 02:10:08 1993 EDT by Edison@OpalMOO (#200).";
.
#65:11
":check_netmail(value) => Makes sure the email-address is one that can actually be used by $network:sendmail().";
"The actual value sent is not checked since it can only be a boolean flag.  The player's email_address property is what is checked.";
"Possible situations where the address would be unusable are when the address is invalid or we can't connect to the site to send mail.";
"Returns a string error message if unusable or {value} otherwise.";
if (caller != this)
return E_PERM;
endif
if (args[1] && (reason = $network:email_will_fail($wiz_utils:get_email_address(player))))
return tostr("Invalid registered email_address: ", reason);
endif
return args;
.
#65:12
value = this:get(args[1], "expire");
if (value < 0)
return {1, {"Messages will not expire."}};
else
return {value, {tostr("Unkept messages expire in ", $time_utils:english_time(value || $mail_agent.player_expire_time), value ? "" | " (default)")}};
endif
.
#65:13
{oname, value, data} = args;
if ((typeof(value) == STR) && index(value, " "))
value = $string_utils:explode(value, " ");
if (!value)
return {oname, 0};
endif
endif
if (value == 1)
return {oname, -1};
elseif (typeof(value) == LIST)
if (length(value) > 1)
nval = $time_utils:parse_english_time_interval(@value);
if (typeof(nval) == ERR)
return "Time interval should be of a form like \"30 days, 10 hours and 43 minutes\".";
else
return {oname, nval};
endif
endif
value = value[1];
endif
if ((nval = $code_utils:toint(value)) || (nval == 0))
return {oname, (nval < 0) ? -1 | nval};
elseif (value == "Never")
return {oname, -1};
else
return "Number, time interval (e.g., \"30 days\"), or \"Never\" expected";
endif
.
#65:14
if (caller_perms().wizard)
for x in ({"fast_check", "idle_check", "idle_threshold"})
this:remove_name(x);
for y in ({"show", "check", "parse"})
delete_verb(this, (y + "_") + x);
delete_property(this, (y + "_") + x);
endfor
endfor
pass(@args);
endif
.
#65:15
if ((what = args[1]) in {"new", "contents", "all"})
return {what};
else
return "Error: `news' option must be one of `new' or `contents' or `all'";
endif
.
#65:16
if (typeof(args[2]) == INT)
return tostr(strsub(verb, "parse_", ""), " is not a boolean option.");
else
return {args[1], (typeof(args[2]) == STR) ? args[2] | $string_utils:from_list(args[2], " ")};
endif
.
#65:17
if ((value = this:get(@args)) == "all")
return {value, {"the `news' command will show all news"}};
elseif (value == "contents")
return {value, {"the `news' command will show the titles of all articles"}};
elseif (value == "new")
return {value, {"the `news' command will show only new news"}};
else
return {0, {"the `news' command will show all news"}};
endif
.
#65:18
{name, value, bleh} = args;
if (typeof(value) == INT)
return tostr(name, " is not a boolean option.");
elseif (typeof(value) == STR)
value = {value};
endif
ok = this.unsend_sequences;
for x in (value)
if ((!(pos = index(x, ":"))) || (!(x[1..pos - 1] in ok)))
return tostr("Invalid sequence - ", x);
elseif (pos != rindex(x, ":"))
return tostr("As a preventative measure, you may not use more than one : in a sequence. The following sequence is therefore invalid - ", x);
endif
endfor
return {name, value};
.
#65:19
if (value = this:get(@args))
return {"", {tostr("Default message sequence for @unsend:  ", (typeof(value) == STR) ? value | $string_utils:from_list(value, " "))}};
else
default = $mail_agent.("player_default_@unsend");
return {0, {tostr("Default message sequence for @unsend:  ", (typeof(default) == STR) ? default | $string_utils:from_list(default, " "))}};
endif
.
#66:0
if (i = args[1] in {"parens", "noisy_insert"})
return {{{"no_parens", "quiet_insert"}[i], !args[2]}};
else
return {args};
endif
.
#66:1
if (o = (name = args[2]) in {"parens", "noisy_insert"})
args[2] = {"no_parens", "quiet_insert"}[o];
return {@pass(@args), tostr("(", name, " is a synonym for -", args[2], ")")};
else
return pass(@args);
endif
.
#68:0
":get(options,name) => returns the value of the option specified by name";
"i.e., if {name,value} is present in options, return value";
"      if name is present, return 1";
"      otherwise return 0";
{options, name} = args;
if (name in options)
return 1;
elseif (a = $list_utils:assoc(name, options))
return a[2];
else
return 0;
endif
.
#68:1
":set(optionlist,oname,value) => revised optionlist or string error message.";
"oname must be the full name of an option in .names or .extras.";
"Note that values must not be of type ERR.  ";
"FALSE (0, blank string, or empty list) is always a legal value.";
"If a verb :check_foo is defined on this, it will be used to typecheck any";
"non-false or object-type value supplied as a new value for option `foo'.";
"";
"   :check_foo(value) => string error message or {value to use}";
"";
"If instead there is a property .check_foo, that will give either the expected ";
"type or a list of allowed types.";
"Otherwise, the option is taken to be a boolean flag and all non-false, ";
"non-object values map to 1.";
"";
{options, oname, value} = args;
if (!((oname in this.names) || (oname in this.extras)))
return "Unknown option:  " + oname;
elseif (typeof(value) == ERR)
"... no option should have an error value...";
return "Error value";
elseif ((!value) && (typeof(value) != OBJ))
"... always accept FALSE (0, blankstring, emptylist)...";
elseif ($object_utils:has_callable_verb(this, check = "check_" + oname))
"... a :check_foo verb exists; use it to typecheck the value...";
if (typeof(c = this:(check)(value)) == STR)
return c;
endif
value = c[1];
elseif ($object_utils:has_property(this, tprop = "type_" + oname))
"... a .type_foo property exists...";
"... property value should be a type or list of types...";
if (!this:istype(value, t = this.(tprop)))
return $string_utils:capitalize(this:desc_type(t) + " value expected.");
endif
elseif ($object_utils:has_property(this, cprop = "choices_" + oname))
"... a .choices_foo property exists...";
"... property value should be a list of {value,docstring} pairs...";
if (!$list_utils:assoc(value, c = this.(cprop)))
return tostr("Allowed values: ", $string_utils:english_list($list_utils:slice(c, 1), "(??)", " or "));
endif
else
"... value is considered to be boolean...";
if (!value)
"... must be an object.  oops.";
return tostr("Non-object value expected.");
endif
value = 1;
endif
"... We now have oname and a value.  However, if oname is one of the extras,";
"... then we need to call :actual to see what it really means.";
if (oname in this.names)
nvlist = {{oname, value}};
elseif ((typeof(nvlist = this:actual(oname, value)) != LIST) || (!nvlist))
return nvlist || "Not implemented.";
endif
"... :actual returns a list of pairs...";
for nv in (nvlist)
{oname, value} = nv;
if (i = (oname in options) || $list_utils:iassoc(oname, options))
if ((!value) && (typeof(value) != OBJ))
"value == 0, blank string, empty list";
options[i..i] = {};
elseif (value == 1)
options[i] = oname;
else
options[i] = {oname, value};
endif
elseif (value || (typeof(value) == OBJ))
options[1..0] = {(value == 1) ? oname | {oname, value}};
endif
endfor
return options;
.
#68:2
":parse(args[,...]) => {oname [,value]} or string error message";
"additional arguments are fed straight through to :parse_* routines.";
" <option> <value>     => {option, value}";
" <option>=<value>     => {option, value}";
" <option> is <value>  => {option, value}";
" +<option>            => {option, 1}";
" -<option>            => {option, 0}";
" !<option>            => {option, 0}";
" <option>             => {option}";
if (!(words = args[1]))
return "";
endif
option = words[1];
words[1..1] = {};
if (flag = option && index("-+!", option[1]))
option[1..1] = "";
endif
if (i = index(option, "="))
rawval = option[i + 1..$];
option = option[1..i - 1];
if (i == 1)
"... =bar ...";
return "Blank option name?";
elseif (flag)
"... +foo=bar";
return "Don't give a value if you use +, -, or !";
elseif (words)
"... foo=bar junk";
return $string_utils:from_list(words, " ") + "??";
endif
elseif (!option)
return "Blank option name?";
elseif (flag)
if (words)
"... +foo junk";
return "Don't give a value if you use +, -, or !";
endif
rawval = (flag - 1) % 2;
else
words && ((words[1] == "is") && (words[1..1] = {}));
rawval = words;
endif
"... do we know about this option?...";
if (!(oname = this:_name(strsub(option, "-", "_"))))
return tostr((oname == $failed_match) ? "Unknown" | "Ambiguous", " option:  ", option);
endif
"... determine new value...";
if (!rawval)
"... `@option foo is' or `@option foo=' ...";
return (rawval == {}) ? {oname} | {oname, 0};
elseif ($object_utils:has_callable_verb(this, pverb = "parse_" + oname))
return this:(pverb)(oname, rawval, args[2..$]);
elseif ($object_utils:has_property(this, cprop = "choices_" + oname))
return this:parsechoice(oname, rawval, this.(cprop));
elseif (rawval in {0, "0", {"0"}})
return {oname, 0};
elseif (rawval in {1, "1", {"1"}})
return {oname, 1};
else
return tostr("Option is a flag, use `+", option, "' or `-", option, "' (or `!", option, "')");
endif
.
#68:3
":_name(string) => full option name corresponding to string ";
"               => $failed_match or $ambiguous_match as appropriate.";
if (((string = args[1]) in this.names) || (string in this.extras))
return string;
endif
char = (namestr = this._namelist)[1];
if (!(i = index(namestr, char + string)))
return $failed_match;
elseif (i != rindex(namestr, char + string))
return $ambiguous_match;
else
j = index(namestr[i + 1..$], char);
return namestr[i + 1..(i + j) - 1];
endif
.
#68:4
":add_name(name[,isextra]) adds name to the list of options recognized.";
"name must be a nonempty string and must not contain spaces, -, +, !, or =.";
"isextra true means that name isn't an actual option (recognized by :get) but merely a name that the option setting command should recognize to set a particular combination of options.  Actual options go in .names; others go in .extras";
{name, ?isextra = 0} = args;
if (!$perm_utils:controls(caller_perms(), this))
return E_PERM;
elseif ((!name) || match(name, "[-!+= ]"))
"...name is blank or contains a forbidden character";
return E_INVARG;
elseif (name in this.names)
"...name is already in option list";
if (isextra)
this.names = setremove(this.names, name);
this.extras = setadd(this.extras, name);
return 1;
else
return 0;
endif
elseif (name in this.extras)
if (isextra)
return 0;
else
this.names = setadd(this.names, name);
this.extras = setremove(this.extras, name);
return 1;
endif
else
char = this._namelist[1];
if (isextra)
this.extras = setadd(this.extras, name);
else
this.names = setadd(this.names, name);
endif
if (!index(this._namelist, (char + name) + char))
this._namelist = tostr(this._namelist, name, char);
endif
return 1;
endif
.
#68:5
":remove_name(name) removes name from the list of options recognized.";
if (!$perm_utils:controls(caller_perms(), this))
return E_PERM;
elseif (!(((name = args[1]) in this.names) || (name in this.extras)))
"...hmm... already gone...";
return 0;
else
char = this._namelist[1];
this._namelist = strsub(this._namelist, (char + name) + char, char);
this.names = setremove(this.names, name);
this.extras = setremove(this.extras, name);
return 1;
endif
.
#68:6
":show(options,name or list of names)";
" => text describing current value of option and what it means";
name = args[2];
if (typeof(name) == LIST)
text = {};
for n in (name)
text = {@text, @this:show(@listset(args, n, 2))};
endfor
return text;
elseif (!((name in this.names) || (name in this.extras)))
return {"Unknown option:  " + name};
elseif ($object_utils:has_callable_verb(this, sverb = "show_" + name))
r = this:(sverb)(@args);
value = r[1];
desc = r[2];
elseif ($object_utils:has_property(this, sverb) && ((value = this:get(args[1], name)) in {0, 1}))
desc = this.(sverb)[value + 1];
if (typeof(desc) == STR)
desc = {desc};
endif
elseif ($object_utils:has_property(this, cprop = "choices_" + name))
if (!(value = this:get(args[1], name)))
desc = this.(cprop)[1][2];
elseif (!(a = $list_utils:assoc(value, this.(cprop))))
return {(name + " has unexpected value ") + toliteral(value)};
else
desc = a[2];
endif
elseif (name in this.extras)
return {name + " not documented (complain)"};
else
value = this:get(args[1], name);
desc = {"not documented (complain)"};
if (typeof(value) in {LIST, STR})
desc[1..0] = toliteral(value);
value = "";
endif
endif
if (value in {0, 1})
which = "-+"[value + 1] + name;
elseif ((typeof(value) in {OBJ, STR, INT}) && (value != ""))
which = tostr(" ", name, "=", value);
else
which = " " + name;
endif
show = {$string_utils:left(which + "  ", this.namewidth) + desc[1]};
for i in [2..length(desc)]
show = {@show, $string_utils:space(this.namewidth) + desc[i]};
endfor
return show;
.
#68:7
":actual(<name>,<value>) => list of {<name>,<value>} pairs or string errormsg";
" corresponding to what setting option <name> to <value> actually means";
" e.g., :actual(\"unfoo\",1) => {{\"foo\",0}}";
" e.g., :actual(\"g7mode\",1) => {{\"splat\",37},{\"baz\",#3}}";
return "Not implemented.";
.
#68:8
":istype(value,types) => whether value is one of the given types";
if ((vtype = typeof(value = args[1])) in (types = args[2]))
return 1;
elseif (vtype != LIST)
return 0;
else
for t in (types)
if ((typeof(t) == LIST) && this:islistof(value, t))
return 1;
endif
endfor
endif
return 0;
.
#68:9
":islistof(value,types) => whether value (a list) has each element being one of the given types";
types = args[2];
for v in (value = args[1])
if (!this:istype(v, types))
return 0;
endif
endfor
return 1;
.
#68:10
":desc_type(types) => string description of types";
nlist = {};
for t in (types = args[1])
if (typeof(t) == LIST)
if (length(t) > 1)
nlist = {@nlist, tostr("(", this:desc_type(t), ")-list")};
else
nlist = {@nlist, tostr(this:desc_type(t), "-list")};
endif
elseif (t in {INT, OBJ, STR, LIST})
nlist = {@nlist, {"number", "object", "string", "?", "list"}[t + 1]};
else
return "Bad type list";
endif
endfor
return $string_utils:english_list(nlist, "nothing", " or ");
.
#68:11
":parsechoice(oname,rawval,assoclist)";
which = {};
oname = args[1];
rawval = args[2];
choices = $list_utils:slice(args[3], 1);
errmsg = tostr("Allowed values for this flag: ", $string_utils:english_list(choices, "(??)", " or "));
if (typeof(rawval) == LIST)
if (length(rawval) > 1)
return errmsg;
endif
rawval = rawval[1];
elseif (typeof(rawval) != STR)
return errmsg;
endif
for c in (choices)
if (index(c, rawval) == 1)
which = {@which, c};
endif
endfor
if (!which)
return errmsg;
elseif (length(which) > 1)
return tostr(rawval, " is ambiguous.");
else
return {oname, which[1]};
endif
.
#69:0
raise(@args);
"this:(this.names[tonum(args[1]) + 1])()";
.
#69:1
"... hmmm... don't know how to raise E_NONE...";
return E_NONE;
.
#69:2
"...raise E_TYPE ...";
1[2];
.
#69:3
"...raise E_DIV ...";
1 / 0;
.
#69:4
"...raise E_PERM ...";
this.owner.password;
.
#69:5
"...raise E_PROPNF ...";
this.a;
.
#69:6
"...raise E_VERBNF ...";
this:a();
.
#69:7
"...raise E_VARNF ...";
a;
.
#69:8
"...raise E_INVIND ...";
#-1.a;
.
#69:9
move(this, this);
.
#69:10
"...raise E_MAXREC ...";
this:(verb)();
.
#69:11
"...raise E_RANGE ...";
{}[1];
.
#69:12
"...raise E_ARGS ...";
toint();
.
#69:13
"...raise E_NACC ...";
move($hacker, this);
.
#69:14
"...raise E_INVARG ...";
parent(#-1);
.
#69:15
set_task_perms($no_one);
"...raise E_QUOTA ...";
create($thing);
.
#69:16
return 0;
.
#69:17
return toliteral(args[1]);
"return this.names[tonum(args[1]) + 1];";
.
#69:18
"toerr -- given a string or a number, return the corresponding ERR.";
"If not found or an execution error, return -1.";
if (typeof(string = args[1]) == STR)
for e in (this.all_errors)
if (tostr(e) == string)
return e;
endif
endfor
elseif (typeof(number = args[1]) == INT)
for e in (this.all_errors)
if (toint(e) == number)
return e;
endif
endfor
endif
return -1;
.
#69:19
"match_error -- searches for tostr(E_WHATEVER) in a string, returning the ERR, returns -1 if no error string is found.";
string = args[1];
for e in (this.all_errors)
if (index(string, tostr(e)))
return e;
endif
endfor
return -1;
.
#70:0
if (caller_perms().wizard)
pass(@args);
this.mail_notify = {player};
player:set_current_message(this, 0, 0, 1);
this.moderated = 1;
else
return E_PERM;
endif
.
#71:0
player:tell_lines(this:description());
player:tell($string_utils:pronoun_sub("%S %<is> moving around from room to room, cleaning up.", this));
.
#71:1
"$housekeeper:cleanup([insist]) => clean up player's objects. Argument is 'up' or 'up!' for manually requested cleanups (notify player differently)";
if (caller_perms() != this)
return E_PERM;
endif
for object in (this.clean)
x = object in this.clean;
if (this.requestors[x] == player)
if (result = this:replace(object, @args))
player:tell(result, ".");
endif
endif
$command_utils:suspend_if_needed(0);
endfor
player:tell("The housekeeper has finished cleaning up your objects.");
.
#71:2
"replace the object given to its proper spot (if there is one).";
{object, ?insist = 0} = args;
i = object in this.clean;
if (!i)
return tostr(object, " is not on the ", this.name, "'s cleanup list");
endif
place = this.destination[i];
if (!((($recycler:valid(object) && ($recycler:valid(r = this.requestors[i]) && is_player(r))) && ($recycler:valid(place) || (place == #-1))) && (!(object.location in this.recycle_bins))))
"object no longer valid (recycled or something), remove it.";
this.clean = listdelete(this.clean, i);
this.requestors = listdelete(this.requestors, i);
this.destination = listdelete(this.destination, i);
return tostr(object) + " is no longer valid, removed from cleaning list";
endif
oldloc = loc = object.location;
if (object.location == place)
"already in its place";
return "";
endif
requestor = $recycler:valid(tr = this.requestors[i]) ? tr | $no_one;
if (insist != "up!")
if ($code_utils:verb_or_property(object, "in_use"))
return ("Not returning " + object.name) + " because it claims to be in use";
endif
for thing in (object.contents)
if (thing:is_listening())
return ((("Not returning " + object.name) + " because ") + thing.name) + " is inside";
endif
$command_utils:suspend_if_needed(0);
endfor
if (valid(loc) && (loc != $limbo))
if (loc:is_listening())
return ((("Not returning " + object.name) + " because ") + loc.name) + " is holding it";
endif
for y in (loc:contents())
if ((y != object) && y:is_listening())
return (((("Not returning " + object.name) + " because ") + y.name) + " is in ") + loc.name;
endif
$command_utils:suspend_if_needed(0);
endfor
endif
endif
if (valid(place) && (!place:acceptable(object)))
return (place.name + " won't accept ") + object.name;
endif
try
requestor:tell("As you requested, the housekeeper tidies ", $string_utils:nn(object), " from ", $string_utils:nn(loc), " to ", $string_utils:nn(place), ".");
if ($object_utils:has_verb(loc, "announce_all_but"))
loc:announce_all_but({requestor, object}, "At ", requestor.name, "'s request, the ", this.name, " sneaks in, picks up ", object.name, " and hurries off to put ", ($object_utils:has_property(object, "po") && (typeof(object.po) == STR)) ? object.po | "it", " away.");
endif
except (ANY)
"Ignore errors";
endtry
fork (0)
this:moveit(object, place, requestor);
if ((loc = object.location) == oldloc)
return (object.name + " wouldn't go; ") + ((!place:acceptable(object)) ? (" perhaps " + $string_utils:nn(place)) + " won't let it in" | ((" perhaps " + $string_utils:nn(loc)) + " won't let go of it"));
endif
try
object:tell("The housekeeper puts you away.");
if ($object_utils:isa(loc, $room))
loc:announce_all_but({object}, "At ", requestor.name, "'s request, the housekeeper sneaks in, deposits ", object:title(), " and leaves.");
else
loc:tell("You notice the housekeeper sneak in, give you ", object:title(), " and leave.");
endif
except (ANY)
"Ignore errors";
endtry
endfork
return "";
.
#71:3
if (args)
if (!valid(who = args[1]))
return;
endif
player:tell(who.name, "'s personal cleanup list:");
else
who = 0;
player:tell("Housekeeper's complete cleanup list:");
endif
player:tell("------------------------------------------------------------------");
printed_anything = 0;
objs = this.clean;
reqs = this.requestors;
dest = this.destination;
objfieldwid = length(tostr(max_object())) + 1;
for i in [1..length(objs)]
$command_utils:suspend_if_needed(2);
req = $recycler:valid(tr = reqs[i]) ? tr | $no_one;
ob = objs[i];
place = dest[i];
if (((who == 0) || (req == who)) || (ob.owner == who))
if (!valid(ob))
player:tell($string_utils:left(tostr(ob), objfieldwid), $string_utils:left("** recycled **", 50), "(", req.name, ")");
else
player:tell($string_utils:left(tostr(ob), objfieldwid), $string_utils:left(ob.name, 26), "=>", $string_utils:left(tostr(place), objfieldwid), (valid(place) ? place.name | "nowhere") || "nowhere", " (", req.name, ")");
endif
printed_anything = 1;
endif
endfor
if (!printed_anything)
player:tell("** The housekeeper has nothing in the cleanup list.");
endif
player:tell("------------------------------------------------------------------");
.
#71:4
if (!$perm_utils:controls(caller_perms(), this))
return E_PERM;
endif
{what, ?who = player, ?where = what.location} = args;
if ((what < #1) || (!valid(what)))
return "invalid object";
endif
if ($object_utils:isa(who, $guest))
return tostr("Guests can't use the ", this.name, ".");
endif
if (!is_player(who))
return tostr("Non-players can't use the ", this.name, ".");
endif
if (!valid(where))
return tostr("The ", this.name, " doesn't know how to find ", where, " in order to put away ", what.name, ".");
endif
if (is_player(what))
return ("The " + this.name) + " doesn't do players, except to cart them home when they fall asleep.";
endif
for x in (this.eschews)
if ($object_utils:isa(what, x[1]))
ok = 0;
for y in [3..length(x)]
if ($object_utils:isa(what, x[y]))
ok = 1;
endif
endfor
if (!ok)
return tostr("The ", this.name, " doesn't do ", x[2], "!");
endif
endif
endfor
if ($object_utils:has_callable_verb(where, "litterp") ? where:litterp(what) | ((where in this.public_places) && (!(what in where.residents))))
return tostr("The ", this.name, " won't litter ", where.name, "!");
endif
if (i = what in this.clean)
if ((!this:controls(i, who)) && valid(this.destination[i]))
return tostr($recycler:valid(tr = this.requestors[i]) ? tr.name | "Someone", " already asked that ", what.name, " be kept at ", this.destination[i].name, "!");
endif
this.requestors[i] = who;
this.destination[i] = where;
else
this.clean = {what, @this.clean};
this.requestors = {who, @this.requestors};
this.destination = {where, @this.destination};
endif
return tostr("The ", this.name, " will keep ", what.name, " (", what, ") at ", valid(where) ? ((where.name + " (") + tostr(where)) + ")" | where, ".");
.
#71:5
if (!$perm_utils:controls(caller_perms(), this))
return E_PERM;
endif
{what, ?who = player} = args;
if (i = what in this.clean)
if (!this:controls(i, who))
return tostr("You may remove an object from ", this.name, " list only if you own the object, the place it is kept, or if you placed the original cleaning order.");
endif
this.clean = listdelete(this.clean, i);
this.destination = listdelete(this.destination, i);
this.requestors = listdelete(this.requestors, i);
return tostr(what.name, " (", what, ") removed from cleanup list.");
else
return tostr(what.name, " not in cleanup list.");
endif
.
#71:6
"does player control entry I?";
{i, who} = args;
if ((who in {this.owner, @this.owners}) || who.wizard)
return "Yessir.";
endif
cleanable = this.clean[i];
if (this.requestors[i] == who)
return "you asked for the previous result, you can change this one.";
elseif (((who == cleanable.owner) || (!valid(dest = this.destination[i]))) || (who == dest.owner))
return "you own the object or the place where it is being cleaned to, or the destination is no longer valid.";
else
return "";
endif
.
#71:7
"start the housekeeper cleaning continuously. Kill any previous continuous";
"task. Not meant to be called interactively.";
if (!$perm_utils:controls(caller_perms(), this))
return E_PERM;
endif
if ($code_utils:task_valid(this.task))
taskn = this.task;
this.task = 0;
kill_task(taskn);
endif
fork taskn (0)
while (1)
index = 1;
while (index <= length(this.clean))
this.cleaning = x = this.clean[index];
this.cleaning_index = index;
index = index + 1;
fork (0)
`this:replace(x) ! ANY';
endfork
suspend(this.testing ? 2 | this:time());
endwhile
suspend(5);
this:litterbug();
endwhile
endfork
this.task = taskn;
.
#71:8
for room in (this.public_places)
for thingy in (room.contents)
suspend(10);
if (((thingy.location == room) && this:is_litter(thingy)) && (!this:is_watching(thingy, $nothing)))
"if it is litter and no-one is watching";
fork (0)
this:send_home(thingy);
endfork
suspend(0);
endif
endfor
endfor
.
#71:9
return valid(thing = args[1]) && thing:is_listening();
.
#71:10
if (caller != this)
return E_PERM;
endif
litter = args[1];
littering = litter.location;
this:ejectit(litter, littering);
home = litter.location;
if ($object_utils:isa(home, $room))
home:announce_all("The ", this.name, " sneaks in, deposits ", litter:title(), " and leaves.");
else
home:tell("You notice the ", this.name, " sneak in, give you ", litter:title(), " and leave.");
endif
if ($object_utils:has_callable_verb(littering, "announce_all_but"))
littering:announce_all_but({litter}, "The ", this.name, " sneaks in, picks up ", litter:title(), " and rushes off to put it away.");
endif
.
#71:11
"Wizardly verb to move object with requestor's permission";
if (caller != this)
return E_PERM;
else
set_task_perms(player = args[3]);
return args[1]:moveto(args[2]);
endif
.
#71:12
"this:ejectit(object,room): Eject args[1] from args[2].  Callable only by housekeeper's quarters verbs.";
if (caller == this)
args[2]:eject(args[1]);
endif
.
#71:13
what = args[1];
if (!(where = what in this.clean))
return 0;
else
return {this.destination[where], this.requestors[where]};
endif
.
#71:14
thingy = args[1];
for x in (this.litter)
if ($object_utils:isa(thingy, x[1]) && (!$object_utils:isa(thingy, x[2])))
return 1;
endif
endfor
return 0;
.
#71:15
if (caller_perms().wizard)
this.password = "Impossible password to type";
this.last_password_time = 0;
this.litter = {};
this.public_places = {};
this.requestors = {};
this.destination = {};
this.clean = {};
this.eschews = {};
this.recycle_bins = {};
this.cleaning = #-1;
this.task = 0;
this.owners = {#2};
this.mail_forward = {#2};
this.player_queue = {};
this.move_player_task = 0;
this.moveto_task = 0;
pass(@args);
endif
.
#71:16
count = 0;
for i in (this.requestors)
if (i == player)
count = count + 1;
endif
$command_utils:suspend_if_needed(1);
endfor
player:tell("Number of items in cleanup list: ", tostr(length(this.clean)));
player:tell("Number of items you requested to be tidied: ", tostr(count));
player:tell("Number of requestors: ", tostr(length($list_utils:remove_duplicates(this.requestors))));
player:tell("Time to complete one cleaning circuit: ", $time_utils:english_time(length(this.clean) * this:time()));
player:tell("The Housekeeper is in " + (($housekeeper.testing == 0) ? "normal, non-testing mode." | "testing mode. "));
if (!$code_utils:task_valid($housekeeper.task))
player:tell("The Housekeeper task has died. Restarting...");
$housekeeper:continuous();
else
player:tell("The Housekeeper is actively cleaning.");
endif
.
#71:17
"return a string status if the hosuekeeper is cleaning this object";
cleanable = args[1];
info = this:is_object_cleaned(cleanable);
if (info == 0)
return tostr(cleanable.name, " is not cleaned by the ", this.name, ".");
else
return tostr(cleanable.name, " is kept tidy at ", $string_utils:nn(info[1]), " at the request of ", $string_utils:nn(info[2]), ".");
endif
.
#71:18
"Returns the amount of time to suspend between objects while continuous cleaning.";
"Currently set to try to complete cleaning circuit in one hour, but not exceed one object every 20 seconds.";
return max(20 + $login:current_lag(), length(this.clean) ? 3600 / length(this.clean) | 0);
.
#71:19
return caller == this;
.
#71:20
if (!$perm_utils:controls(caller_perms(), this))
"perms don't control the $housekeeper; probably not called by $room:disfunc then. Used to let args[1] call this. No longer.";
return E_PERM;
endif
this.player_queue = {@this.player_queue, {args[1], time() + 300}};
if ($code_utils:task_valid(this.move_player_task))
"the move-players-home task is already running";
return;
endif
fork tid (10)
while (this.player_queue)
if ((mtime = this.player_queue[1][2]) < (time() + 10))
who = this.player_queue[1][1];
"Remove from queue first so that if they do something malicious, like put a kill_task in a custom :accept_for_abode, they won't be in the queue when the task restarts with the next player disconnect. Ho_Yan 12/3/98";
this.player_queue = listdelete(this.player_queue, 1);
if (is_player(who) && (!$object_utils:connected(who)))
dest = `who.home:accept_for_abode(who) ! ANY => 0' ? who.home | $player_start;
if (who.location != dest)
player = who;
this:move_em(who, dest);
endif
endif
else
suspend(mtime - time());
endif
$command_utils:suspend_if_needed(1);
endwhile
endfork
this.move_player_task = tid;
.
#71:21
if (caller == this)
{who, dest} = args;
set_task_perms(who);
fork (0)
fork (0)
"This is forked so that it's protected from aborts due to errors in the player's :moveto verb.";
if (who.location != dest)
"Unfortunately, if who is -already- at $player_start, move() won't call :enterfunc and the sleeping body never goes to $limbo. Have to call explicitly for that case. Ho_Yan 11/2/95";
if (who.location == $player_start)
$player_start:enterfunc(who);
else
"Nosredna, 5/4/01: but wait, why don't we just moved them straight to limbo?";
move(who, $limbo);
endif
endif
endfork
start = who.location;
this:set_moveto_task();
who:moveto(dest);
if (who.location != start)
start:announce(this:take_away_msg(who));
endif
if (who.location == dest)
dest:announce(this:drop_off_msg(who));
endif
endfork
else
return E_PERM;
endif
.
#71:22
return $string_utils:pronoun_sub(this.(verb), args[1], this);
.
#71:23
"sets $housekeeper.moveto_task to the current task_id() so player:moveto's can check for validity.";
if (caller != this)
return E_PERM;
endif
this.moveto_task = task_id();
.
#72:0
"Given an email address, return {userid, site}.";
"Valid addresses are of the form `userid[@site]'.";
"At least for now, if [@site] is left out, site will be returned as blank.";
"Should be a default address site, or something, somewhere.";
address = args[1];
return (at = index(address, "@")) ? {address[1..at - 1], address[at + 1..$]} | {address, ""};
.
#72:1
"given a site, try to figure out what the `local' domain is.";
"if site has a @ or a % in it, give up and return E_INVARG.";
"blank site is returned as is; try this:local_domain(this.localhost) for the answer you probably want.";
site = args[1];
if (index(site, "@") || index(site, "%"))
return E_INVARG;
elseif (match(site, "^[0-9.]+$"))
return E_INVARG;
elseif (!site)
return "";
elseif (!(dot = rindex(site, ".")))
dot = rindex(site = this.site, ".");
endif
if ((!dot) || (!(dot = rindex(site[1..dot - 1], "."))))
return site;
else
domain = site[dot + 1..$];
site = site[1..dot - 1];
while (site && (domain in this.large_domains))
if (dot = rindex(site, "."))
domain = tostr(site[dot + 1..$], ".", domain);
site = site[1..dot - 1];
else
return tostr(site, ".", domain);
endif
endwhile
return domain;
endif
.
#72:2
":open(address, port, [connect-connection-to])";
"Open a network connection to address/port.  If the connect-connection-to is passed, then the connection will be connected to that object when $login gets ahold of it.  If not, then the connection is just ignored by $login, i.e. not bothered by it with $welcome_message etc.";
"The object specified by connect-connection-to has to be a player (though it need not be a $player).";
"Returns the (initial) connection or an error, as in open_network_connection";
if (!this:trust(caller_perms()))
return E_PERM;
endif
{address, port, ?connect_to} = args;
if (length(args) < 3)
connect_to = $nothing;
elseif (((typeof(connect_to) == OBJ) && valid(connect_to)) && is_player(connect_to))
if (!$perm_utils:controls(caller_perms(), connect_to))
return E_PERM;
endif
else
return E_INVARG;
endif
if (typeof(connection = `open_network_connection(address, port) ! ANY') != ERR)
if (valid(connect_to))
this.connect_connections_to = {@this.connect_connections_to, {connection, connect_to}};
endif
endif
return connection;
.
#72:3
if (!this:trust(caller_perms()))
return E_PERM;
endif
con = args[1];
if (!index(`connection_name(con) ! ANY => ""', " to "))
return E_INVARG;
endif
boot_player(con);
if (i = $list_utils:iassoc(con, $network.connect_connections_to))
$network.connect_connections_to = listdelete($network.connect_connections_to, i);
endif
return 1;
.
#72:4
"sendmail(to, subject, line1, line2, ...)";
"  sends mail to internet address 'to', with given subject.";
"  It fills in various fields, such as date, from (from player), etc.";
"  the rest of the arguments are remaining lines of the message, and may begin with additional header fields.";
"  (must match RFC822 specification).";
"Requires $network.trust to call (no anonymous mail from MOO).";
"Returns 0 if successful, or else error condition or string saying why not.";
if (!this:trust(caller_perms()))
return E_PERM;
endif
mooname = this.MOO_name;
mooinfo = tostr(mooname, " (", this.site, " ", this.port, ")");
if (reason = this:invalid_email_address(to = args[1]))
return reason;
endif
"took out Envelope-from:  + this.errors_to_address";
tries = 4;
result = "unknown";
while ((tries > 0) && (result != 0))
tries = tries - 1;
result = this:raw_sendmail(to, "Date: " + $time_utils:rfc822_ctime(), "From: " + this:return_address_for(player), "To: " + to, "Subject: " + args[2], "Errors-to: " + this.errors_to_address, "X-Mail-Agent: " + mooinfo, @args[3..$]);
endwhile
return result;
.
#72:5
return (who = args[1]).wizard || (who in this.trusts);
.
#72:6
if (caller_perms().wizard)
pass(@args);
this.active = 0;
this.errors_to_address = "moomailerrors@yourhost";
this.site = "yoursite";
this.postmaster = "postmastername@yourhost";
this.usual_postmaster = "postmastername@yourhost";
this.password_postmaster = "postmastername@yourhost";
this.envelope_from = "postmastername@yourhost";
this.blank_envelope = 0;
this.MOO_name = "YourMOO";
this.maildrop = "localhost";
this.port = 7777;
this.large_domains = {};
this.trusts = {$hacker};
this.connect_connections_to = {};
endif
.
#72:7
"Copied from sendmail fix (#88079):raw_sendmail by Lineman (#108318) Mon Feb  1 19:29:43 1999 PST";
"rawsendmail(to, @lines)";
"sends mail without processing. Returns 0 if successful, or else reason why not.";
if (!caller_perms().wizard)
return E_PERM;
endif
if (!this.active)
return "Networking is disabled.";
endif
if (typeof(this.debugging) == LIST)
"who to notify";
debugging = this.debugging;
else
"notify this owner";
debugging = this.debugging && {this.owner};
endif
address = args[1];
body = listdelete(args, 1);
data = {"HELO " + this.site, ("MAIL FROM:<" + this.postmaster) + ">", ("RCPT TO:<" + address) + ">", "DATA"};
blank = 0;
for x in (body)
this:suspend_if_needed(0);
if (!(blank || match(x, "^[!-9;-~]+: ")))
if (x)
data = {@data, ""};
endif
blank = 1;
endif
data = {@data, (x && (x[1] == ".")) ? "." + x | x};
endfor
data = {@data, ".", "QUIT", ""};
suspend(0);
target = E_NONE;
for maildrop in ((typeof(this.maildrop) == LIST) ? this.maildrop | {this.maildrop})
target = $network:open(maildrop, 25);
if (typeof(target) != ERR)
break;
endif
endfor
if (typeof(target) == ERR)
return tostr(@(target == E_NONE) ? {"No maildrop specified"} | {"Cannot open connection to maildrop ", maildrop, ": ", target});
endif
set_connection_option(target, "hold-input", 1);
blast = 0;
msg = 0;
expects = {"220", "250", "250", "250%|251", "354", "250", "221"};
for line in (data)
if (!blast)
reply = this:tcp_wait(target);
if (typeof(reply) == ERR)
msg = "Connection dropped or timed out.";
break;
elseif (!match(reply[1..3], expects[1]))
msg = (("Expected " + expects[1]) + " but got ") + reply;
break;
endif
debugging && notify(debugging[1], "GET: " + reply);
expects[1..1] = {};
if (reply[1..3] == "221")
"Service closing transmission channel";
break;
elseif (reply[1..3] == "354")
"Start mail input; end with <CRLF>.<CRLF>";
blast = 1;
endif
elseif (line == ".")
blast = 0;
endif
debugging && notify(debugging[1], "SEND:" + line);
while (((ticks_left() < 4000) || (seconds_left() < 2)) || (!notify(target, line, 1)))
suspend(0);
endwhile
endfor
$network:close(target);
debugging && notify(debugging[1], "EXIT:" + (msg || "Mail sent successfully."));
return msg;
.
#72:8
"invalid_email_address(email) -- check to see if email looks like a valid email address. Return reason why not.";
address = args[1];
if (!address)
return "no email address supplied";
endif
if (!(at = rindex(address, "@")))
return ("'" + address) + "' doesn't look like a valid internet email address";
endif
name = address[1..at - 1];
host = address[at + 1..$];
if (match(name, "^in%%") || match(name, "^smtp%%"))
return tostr("'", name, "' doesn't look like a valid username (try removing the 'in%' or 'smtp%')");
endif
if (!match(host, $network.valid_host_regexp))
return tostr("'", host, "' doesn't look like a valid internet host");
endif
if (!match(name, $network.valid_email_regexp))
return tostr("'", name, "' doesn't look like a valid user name for internet mail");
endif
return "";
.
#72:9
return match(args[1], this.valid_host_regexp) ? "" | tostr("'", args[1], "' doesn't look like a valid internet host name");
.
#72:10
":email_will_fail(email-address[, display?]) => Makes sure the email-address is one that can actually be used by $network:sendmail().";
{email, ?display = 0} = args;
reason = this:invalid_email_address(email);
if (reason && display)
player:tell("Invalid email address: ", reason);
endif
return reason;
"following is code from OpalMOO, not used here";
"Possible situations where the address would be unusable are when the address is invalid or we can't connect to the site to send mail.";
"If <display> is true, error messages are displayed to the player and 1 is returned when address is unuable.  If <display> is false and address is unusable, the error message is returned.  If the address is usable, 0 is always returned.";
if (!this:approved_for_network(caller_perms()))
return E_PERM;
endif
if (!this:valid_email_address(email))
msg = tostr("Your email address (", email, ") is not a usable account.");
elseif ((result = this:verify_email_address(email)) == E_INVARG)
msg = tostr("Unable to connect to ", this:parse_address(email)[2], ".");
elseif (typeof(result) == STR)
msg = tostr("The site ", (parse = this:parse_address(email))[2], " does not recognize ", parse[1], " as a valid account.");
else
return 0;
endif
if (display)
player:tell(msg);
return 1;
else
return msg;
endif
"Last modified Tue Jun 15 00:19:01 1993 EDT by Ranma (#200).";
.
#72:11
"for trusted players, they can read from objects they own or open connections";
if (!this:trust(caller_perms()))
return E_PERM;
elseif (valid(x = args[1]))
if ((x.owner == x) || (x.owner != caller_perms()))
return E_INVARG;
endif
"elseif (!this:is_outgoing_connection(x) return E_PERM";
endif
return `read(@args) ! ANY';
.
#72:12
":is_open(object)";
"return true if the object is somehow connected, false otherwise.";
return typeof(`idle_seconds(@args) ! ANY') == INT;
"Relies on test in idle_seconds, and the error catching";
.
#72:13
"Peer at an incoming connection.  Decide if it should be connected to something, return that object. If it should be ignored (outbound connection), return 1. Called only by #0:do_login_command";
if (caller != #0)
return;
endif
what = args[1];
"this code for unix servers >= 1.7.5 only";
if (index(`connection_name(what) ! ANY => ""', " to "))
"outbound connection";
if (ct = $list_utils:assoc(what, this.connect_connections_to))
this.connect_connections_to = setremove(this.connect_connections_to, ct);
return ct[2];
else
return 1;
endif
else
return 0;
endif
.
#72:14
":return_address_for(player) => string of 'return address'. Currently inbound mail doesn't work, so this is a bogus address.";
who = args[1];
if (valid(who) && is_player(who))
return tostr(toint(who), "@", this.site, " (", who.name, ")");
else
return tostr($login.registration_address, " (non-player ", who, ")");
endif
.
#72:15
"called when restarting to clean out state.";
if (caller != #0)
return E_PERM;
endif
this.connect_connections_to = {};
.
#72:16
return index(`connection_name(args[1]) ! ANY => ""', " to ");
.
#72:17
"for trusted players, they can write to connections";
if (!this:trust(caller_perms()))
return E_PERM;
elseif (valid(x = args[1]))
return E_INVARG;
elseif (!this:is_outgoing_connection(x))
return E_PERM;
endif
return notify(x, args[2]);
.
#72:18
"$command_utils:suspend_if_needed but chowned to player";
if ($command_utils:running_out_of_time())
set_task_perms(caller_perms().wizard ? player | caller_perms());
return $command_utils:suspend_if_needed(@args);
endif
.
#72:19
":error(ERN, host, port) interpret open_network_connection(host, port) error";
{msg, host, port} = args;
if (msg == E_PERM)
return "Networking not enabled in server, or else user doesn't have permission to call o_n_c();";
elseif (msg == E_INVARG)
return tostr("The host/port ", toliteral(host), "/", toliteral(port), " is invalid or is not responding.");
elseif (msg == E_QUOTA)
return tostr("The connection to ", toliteral(host), "/", toliteral(port), " cannot be made at this time.");
else
return tostr("Unusual error: ", toliteral(msg));
endif
.
#72:20
"'cause this doesn't have a $_utils name";
return this:description();
.
#72:21
"adjust_postmaster_for_password(enter_or_exit): permits the MOO to have two different postmasters for different kinds of bounces.  If entering password (argument \"enter\"), change to $network.password_postmaster, else (argument \"exit\") change to $network.usual_postmaster.";
if (args[1] == "enter")
$network.postmaster = $network.password_postmaster;
$network.errors_to_address = $network.password_postmaster;
$network.envelope_from = $network.password_postmaster;
else
$network.postmaster = $network.usual_postmaster;
$network.errors_to_address = $network.usual_postmaster;
$network.envelope_from = $network.blank_envelope ? "" | $network.usual_postmaster;
endif
.
#72:22
"$network:add_queued_mail( mail message )";
"  -- where `mail message' is in the same format as passed to :raw_sendmail";
if (caller == this)
this.queued_mail = {@this.queued_mail, {time(), args}};
if (!$code_utils:task_valid(this.queued_mail_task))
fork fid (3600)
this:send_queued_mail();
endfork
this.queued_mail_task = fid;
endif
return 1;
else
return E_PERM;
endif
.
#72:23
"$network:send_queued_mail()";
"  -- tries to send the mail stored in the .queued_mail property";
while (queued_mail = this.queued_mail)
message = queued_mail[1];
if (!this:raw_sendmail(@message[2]))
this.queued_mail = setremove(this.queued_mail, message);
else
"wait an hour";
suspend(3600);
endif
endwhile
.
#72:24
"Copied from sendmail fix (#88079):tcp_wait by Lineman (#108318) Mon Feb  1 19:28:18 1999 PST";
{conn, ?timeout = 0} = args;
if (!caller_perms().wizard)
return E_PERM;
elseif (timeout)
fork task (timeout)
boot_player(conn);
endfork
endif
while (1)
if (typeof(line = `read(conn) ! ANY') == ERR)
break;
elseif (match(line, "^[0-9][0-9][0-9] "))
timeout && `kill_task(task) ! ANY';
break;
endif
endwhile
return line;
.
#73:0
":_make(...) => new node with value {...}";
if (!(caller in {this._mgr, this}))
return E_PERM;
endif
prop = this:_genprop();
add_property(this, prop, args, {$generic_biglist_home.owner, ""});
return prop;
.
#73:1
":_kill(node) destroys the given node.";
if (!(caller in {this, this._mgr}))
return E_PERM;
endif
delete_property(this, args[1]);
.
#73:2
return (caller == this._mgr) ? this.(args[1]) | E_PERM;
.
#73:3
return (caller == this._mgr) ? this.(args[1]) = listdelete(args, 1) | E_PERM;
.
#73:4
gp = this._genprop;
ngp = "";
for i in [1..length(gp)]
if (gp[i] != "z")
ngp = (ngp + "bcdefghijklmnopqrstuvwxyz"[strcmp(gp[i], "`")]) + gp[i + 1..$];
return " " + (this._genprop = ngp);
endif
ngp = ngp + "a";
endfor
return " " + (this._genprop = ngp + "a");
.
#73:5
"this is a dummy. You have to decide what your leaves are going to look like and then write this verb accordingly.  It should, given a leaf/list-element, return the corresponding key value.  So for an ordinary alist, where all of the leaves are of the form {key,datum}, you want:";
return args[1][1];
.
#73:6
if (!caller_perms().wizard)
return E_PERM;
endif
pass(@args);
this.mowner = $hacker;
this._mgr = $biglist;
.
#74:0
all_help = this.help_msg;
if (typeof(all_help) == STR)
all_help = {all_help};
endif
helpless = {};
for vrb in (this.feature_verbs)
if (loc = $object_utils:has_verb(this, vrb))
loc = loc[1];
help = $code_utils:verb_documentation(loc, vrb);
if (help)
all_help = {@all_help, "", tostr(loc, ":", verb_info(loc, vrb)[3]), @help};
else
helpless = {@helpless, vrb};
endif
endif
endfor
if (helpless)
all_help = {@all_help, "", ("No help found on " + $string_utils:english_list(helpless, "nothing", " or ")) + "."};
endif
return {@all_help, "----"};
.
#74:1
"Definition from #1";
desc = this:description();
if (desc)
player:tell_lines(desc);
else
player:tell("You see nothing special.");
endif
player:tell("Please type \"help ", this, "\" for more information.");
.
#74:2
"Proper usage for the Generic Feature Object:";
"";
"First of all, the Generic Feature Object is constructed with the idea";
"that its children will be @moved to #24300, which is kind of a warehouse";
"for feature objects.  If there's enough interest, I'll try to make the";
"stuff that works with that in mind optional.";
"";
"Make a short description.  This is so I can continue to have looking at";
"#24300 give the descriptions of each of the objects in its .contents.";
"The :look_msg automatically includes a pointer to `help <this object>',";
"so you don't have to.";
"";
"Put a list of the commands you want people to use in";
"<this object>.feature_verbs.  (You need to use the :set_feature_verbs";
"verb to do this.)";
"";
"When someone types `help <this object>', they will be told the comment";
"strings from each of the verbs named in .feature_verbs.";
.
#74:3
return this in args[1].features;
.
#74:4
if ($perm_utils:controls(caller_perms(), this) || (caller == this))
return this.feature_ok = args[1];
else
return E_PERM;
endif
.
#74:5
"Can't see `get' unless it's in the room; can't see `drop' unless it's in the player.  Should possibly go on $thing.";
"Should use :contents, but I'm in a hurry.";
hidden = pass(@args);
if (this.location != args[1])
hidden = setadd(hidden, {$thing, verb_info($thing, "drop")[3], {"this", "none", "none"}});
hidden = setadd(hidden, {$thing, verb_info($thing, "give")[3], {"this", "at/to", "any"}});
endif
if (this.location != args[1].location)
hidden = setadd(hidden, {$thing, verb_info($thing, "get")[3], {"this", "none", "none"}});
endif
return hidden;
.
#74:6
if ($perm_utils:controls(caller_perms(), this) || (caller == this))
return this.feature_verbs = args[1];
else
return E_PERM;
endif
.
#74:7
if ((caller == this) || $perm_utils:controls(caller_perms(), this))
pass(@args);
this.feature_verbs = {};
else
return E_PERM;
endif
.
#74:8
if (($code_utils:verb_location() == this) && caller_perms().wizard)
this.warehouse = $feature_warehouse;
`delete_property(this, "guest_ok") ! ANY';
`delete_verb(this, "set_ok_for_guest_use") ! ANY';
pass(@args);
endif
.
#74:9
"This is just a blank verb definition to encourage others to use this verb name if they care when a user is no longer using that feature.";
.
#74:10
return;
.
#74:11
":has_feature_verb(verb, dlist, plist, ilist)";
"If this feature has a feature verb that matches <verb> and whose {dobj, prep, iobj} arguments match the possibilities listed in <dlist>, <plist> and <ilist>, then return the name of that verb, otherwise return false.";
"Note: Individual FOs may over-ride this the method to redirect particular feature verbs to different verbs on the object. For example, 'sit with <any>' and 'sit on <any>' could be directed to separate :sit_with() and :sit_on() verbs -- which is something that the code below cannot do.";
{vrb, dlist, plist, ilist} = args;
if (`valid(loc = $object_utils:has_callable_verb(this, vrb)[1]) ! ANY => 0')
vargs = verb_args(loc, vrb);
if ((vargs[2] in plist) && ((vargs[1] in dlist) && (vargs[3] in ilist)))
return vrb;
endif
endif
return 0;
.
#75:0
"Usage:  get_now(site, port, message)";
"Returns a list of strings, or an error if we couldn't connect.";
{host, port, message, ?extra = {0}} = args;
if (!this:trusted(caller_perms()))
return E_PERM;
elseif ((!match(host, $network.valid_host_regexp)) && (!match(host, "[0-9]+%.[0-9]+%.[0-9]+%.[0-9]+")))
"allow either welformed internet hosts or explicit IP addresses.";
return E_INVARG;
elseif ((port < 100) && (!(port in {13, 70, 80, 81, 79})))
"I added port 13, which is used for atomic clock servers. -Krate";
"disallow connections to low number ports; necessary?";
return E_INVARG;
endif
opentime = time();
con = $network:open(host, port);
opentime = time() - opentime;
if (typeof(con) == ERR)
return con;
endif
notify(con, message);
results = {};
count = this.limit;
"perhaps this isn't necessary, but if a gopher source is slowly spewing things, perhaps we don't want to hang forever -- perhaps this should just fork a process to close the connection instead?";
now = time();
timeout = 30;
end = "^%.$";
if (extra[1] == "2")
end = "^[2-9]";
endif
while ((((typeof(string = `read(con) ! ANY') == STR) && (!match(string, end))) && ((count = count - 1) > 0)) && ((now + timeout) > (now = time())))
if (string && (string[1] == "."))
string = string[2..$];
endif
results = {@results, string};
endwhile
$network:close(con);
if (opentime > 0)
"This is to keep repeated calls to $network:open to 'slow responding hosts' from totally spamming.";
suspend(0);
endif
return results;
.
#75:1
"parse gopher result line:";
"return {host, port, tag, label}";
"host/port/tag are what you send to the gopher server to get that line";
"label is <type>/human readable entry";
{string} = args;
tab = index(string, "	");
label = string[1..tab - 1];
string = string[tab + 1..$];
tab = index(string, "	");
tag = string[1..tab - 1];
string = string[tab + 1..$];
tab = index(string, "	");
host = string[1..tab - 1];
if (host[$] == ".")
host = host[1..$ - 1];
endif
string = string[tab + 1..$];
tab = index(string, "	");
port = toint(tab ? string[1..tab - 1] | string);
return {host, port, tag, label};
"ignore extra material after port, if any";
.
#75:2
"$gopher:show_text(who, start, end, ..node..)";
"like who:notify_lines($gopher:get(..node..)[start..end]), but pipelined";
if (!caller_perms().wizard)
return E_PERM;
endif
{who, start, end, @args} = args;
con = $network:open(who, start);
if (typeof(con) == ERR)
player:tell("Sorry, can't get this information now.");
return;
endif
notify(con, end);
line = 0;
sent = 0;
end = end || this.limit;
while (((string = `read(con) ! ANY') != ".") && (typeof(string) == STR))
line = line + 1;
if ((line >= start) && ((!end) || (line <= end)))
sent = sent + 1;
if (valid(who))
if (string && (string[1] == "."))
string = string[2..$];
endif
who:notify(string);
else
notify(who, string);
endif
endif
endwhile
$network:close(con);
return sent;
.
#75:3
type = args[1];
if (type == "1")
return "menu";
elseif (type == "?")
return "menu?";
elseif (type == "0")
return "text";
elseif (type == "7")
return "search";
elseif (type == "9")
return "binary";
elseif (type == "2")
return "phone directory";
elseif (type == "4")
return "binhex";
elseif (type == "8")
return "telnet";
elseif (type == "I")
return "image";
elseif (type == " ")
"not actually gopher protocol: used by 'goto'";
return "";
else
return "unknown";
endif
"not done, need to fill out";
.
#75:4
"return a 'nice' string showing the information in a gopher node";
if (typeof(parse = args[1]) == STR)
parse = this:parse(parse);
endif
if (parse[1] == "!")
return {"[remembered set]", "", ""};
endif
if (length(parse) > 3)
label = parse[4];
if (label)
type = $gopher:type(label[1]);
label = label[2..$];
if (type == "menu")
elseif (type == "search")
label = (("<" + parse[3][rindex(parse[3], "	") + 1..$]) + "> ") + label;
else
label = (type + ": ") + label;
endif
else
label = "(top)";
endif
else
label = parse[3] + " (top)";
endif
port = "";
if (parse[2] != 70)
port = tostr(" ", parse[2]);
endif
return {tostr("[", parse[1], port, "]"), label, parse[3]};
.
#75:5
"Usage: get(site, port, selection)";
"returns a list of strings, or an error if it couldn't connect. Results are cached.";
if (this.frozen)
return E_QUOTA;
endif
request = args[1..3];
while ((index = request in this.cache_requests) && (this.cache_times[index] > time()))
if (typeof(result = this.cache_values[index]) != INT)
return result;
endif
if ($code_utils:task_valid(result))
"spin, let other process getting same data win, or timeout";
suspend(1);
else
"well, other process crashed, or terminated, or whatever.";
this.cache_times[index] = 0;
endif
endwhile
if (!this:trusted(caller_perms()))
return E_PERM;
endif
while (this.cache_times && (this.cache_times[1] < time()))
$command_utils:suspend_if_needed(0);
this.cache_times = listdelete(this.cache_times, 1);
this.cache_values = listdelete(this.cache_values, 1);
this.cache_requests = listdelete(this.cache_requests, 1);
"caution: don't want to suspend between test and removal";
endwhile
$command_utils:suspend_if_needed(0);
this:cache_entry(@request);
value = this:get_now(@args);
$command_utils:suspend_if_needed(0);
index = this:cache_entry(@request);
this.cache_times[index] = time() + ((typeof(value) == ERR) ? 120 | 1800);
this.cache_values[index] = value;
return value;
.
#75:6
if (!this:trusted(caller_perms()))
return E_PERM;
endif
if (!args)
this.cache_values = this.cache_times = this.cache_requests = {};
elseif (index = args[1..3] in this.cache_requests)
this.cache_requests = listdelete(this.cache_requests, index);
this.cache_times = listdelete(this.cache_times, index);
this.cache_values = listdelete(this.cache_values, index);
endif
.
#75:7
"unparse(host, port, tag, label) => string";
{host, port, tag, label} = args;
if (tab = index(tag, "	"))
"remove search terms from search nodes";
tag = tag[1..tab - 1];
endif
return tostr(label, "	", tag, "	", host, "	", port);
.
#75:8
"return an explanation for a 'false' $gopher:get result";
value = args[1];
if (value == E_INVARG)
return "That gopher server is not reachable or is not responding.";
elseif (value == E_QUOTA)
return "Gopher connections cannot be made at this time because of system resource limitations!";
elseif (typeof(value) == ERR)
return tostr("The gopher request results in an error: ", value);
else
return "The gopher request has no results.";
endif
.
#75:9
"default -- gopher trusts everybody";
return 1;
.
#75:10
"_textp(parsed node)";
"Return true iff the parsed info points to a text node.";
return index("02", args[1][4][1]);
.
#75:11
"_mail_text(parsed node)";
"Return the text to be mailed out for the given node.";
where = args[1];
if (this:_textp(where))
return $gopher:get(@where);
else
text = {};
for x in ($gopher:get(@where))
parse = $gopher:parse(x);
sel = parse[4];
text = {@text, "Type=" + sel[1], "Name=" + sel[2..$], "Path=" + parse[3], "Host=" + parse[1], "Port=" + tostr(parse[2]), "#"};
endfor
return text;
endif
.
#75:12
if (caller_perms().wizard)
this:clear_cache();
pass(@args);
endif
.
#75:13
"Just for debugging -- shows what's in the gopher cache";
req = this.cache_requests;
tim = this.cache_times;
val = this.cache_values;
"save values in case cache changes while printing";
player:tell("size -- expires -- host (port) ------ selector ------------");
for i in [1..length(req)]
re = req[i];
host = $string_utils:left(re[1] + ((re[2] == 70) ? "" | tostr(" (", re[2], ")")), 24);
expires = $string_utils:right($time_utils:dhms(tim[i] - time()), 8);
va = val[i];
if (typeof(va) == LIST)
va = length(va);
elseif (typeof(va) == ERR)
va = toliteral(va);
else
va = tostr(va);
endif
selector = re[3];
if (length(selector) > 40)
selector = "..." + selector[$ - 37..$];
endif
player:tell($string_utils:right(va, 8), expires, " ", host, selector);
endfor
player:tell("--- end cache display -------------------------------------");
.
#75:14
"Usage: get_cache(site, port, selection)";
"return current cache";
request = args[1..3];
if (index = request in this.cache_requests)
if (this.cache_times[index] > now)
return this.cache_values[index];
endif
endif
return 0;
.
#75:15
if (index = args in this.cache_requests)
return index;
else
this.cache_times = {@this.cache_times, time() + 240};
this.cache_values = {@this.cache_values, task_id()};
this.cache_requests = {@this.cache_requests, args};
return length(this.cache_requests);
endif
.
#75:16
return this:description();
.
#75:17
if (caller_perms().wizard)
day = 24 * 3600;
hour_of_day_GMT = 10;
fork ((((hour_of_day_GMT * 60) * 60) + day) - (time() % day))
this:daily();
endfork
"  this.frozen = 1";
this:clear_cache();
"  suspend(3900)";
this.frozen = 0;
endif
.
#75:18
"Copied from Sleeper (#98232):get_now Thu Oct  2 17:15:49 2003 PDT";
"Copied from Gopher utilities (#15357):get_now by Retired-Wizard-1 (#49853) Thu Oct  2 16:57:12 2003 PDT";
"Usage:  get_now(site, port, message)";
"Returns a list of strings, or an error if we couldn't connect.";
{host, port, message, ?extra = {0}} = args;
if (!this:trusted(caller_perms()))
return E_PERM;
elseif ((!match(host, $network.valid_host_regexp)) && (!match(host, "[0-9]+%.[0-9]+%.[0-9]+%.[0-9]+")))
"allow either welformed internet hosts or explicit IP addresses.";
return E_INVARG;
elseif ((port < 100) && (!(port in {13, 70, 80, 81, 79})))
"I added port 13, which is used for atomic clock servers. -Krate";
"disallow connections to low number ports; necessary?";
return E_INVARG;
endif
opentime = time();
con = $network:open(host, port);
opentime = time() - opentime;
if (typeof(con) == ERR)
return con;
endif
if (typeof(message) == LIST)
for line in (message)
notify(con, line);
endfor
else
notify(con, message);
endif
results = {};
count = this.limit;
"perhaps this isn't necessary, but if a gopher source is slowly spewing things, perhaps we don't want to hang forever -- perhaps this should just fork a process to close the connection instead?";
now = time();
timeout = 30;
end = "^%.$";
if (extra[1] == "2")
end = "^[2-9]";
endif
while ((((typeof(string = `read(con) ! ANY') == STR) && (!match(string, end))) && ((count = count - 1) > 0)) && ((now + timeout) > (now = time())))
if (string && (string[1] == "."))
string = string[2..$];
endif
results = {@results, string};
endwhile
$network:close(con);
if (opentime > 0)
"This is to keep repeated calls to $network:open to 'slow responding hosts' from totally spamming.";
suspend(0);
endif
return results;
.
#76:0
if (i = args[1] in {"list_numbers"})
return {{{"list_no_numbers"}[i], !args[2]}};
else
return {args};
endif
.
#76:1
if (o = (name = args[2]) in {"list_numbers"})
args[2] = {"list_no_numbers"}[o];
return {@pass(@args), tostr("(", name, " is a synonym for -", args[2], ")")};
else
return pass(@args);
endif
.
#76:2
if (value = this:get(@args))
return {value, {tostr("Default args for @verb:  ", $string_utils:from_list(value, " "))}};
else
return {0, {"Default args for @verb:  none none none"}};
endif
.
#76:3
value = args[1];
if (typeof(value) != LIST)
return "List expected";
elseif (length(value) != 3)
return "List of length 3 expected";
elseif (!(value[1] in {"this", "none", "any"}))
return tostr("Invalid dobj specification:  ", value[1]);
elseif (!((p = $code_utils:short_prep(value[2])) || (value[2] in {"none", "any"})))
return tostr("Invalid preposition:  ", value[2]);
elseif (!(value[3] in {"this", "none", "any"}))
return tostr("Invalid iobj specification:  ", value[3]);
else
if (p)
value[2] = p;
endif
return {value};
endif
.
#76:4
{oname, raw, data} = args;
if (typeof(raw) == STR)
raw = $string_utils:explode(raw, " ");
elseif (typeof(raw) == INT)
return raw ? {oname, {"this", "none", "this"}} | {oname, 0};
endif
value = $code_utils:parse_argspec(@raw);
if (typeof(value) != LIST)
return tostr(value);
elseif (value[2])
return tostr("I don't understand \"", $string_utils:from_list(value[2], " "), "\"");
else
value = {@value[1], "none", "none", "none"}[1..3];
return {oname, (value == {"none", "none", "none"}) ? 0 | value};
endif
.
#76:5
value = this:get(@args);
if (value)
return {value, {tostr("Default permissions for @property=`", value, "'.")}};
else
return {0, {"Default permissions for @property=`rc'."}};
endif
.
#76:7
{oname, raw, data} = args;
if (typeof(raw) != STR)
return "Must be a string composed of the characters `rwc'.";
endif
len = length(raw);
for x in [1..len]
if (!(raw[x] in {"r", "w", "c"}))
return "Must be a string composed of the characters `rwc'.";
endif
endfor
return {oname, raw};
.
#77:0
value = args[1];
if (m = match(value, "[^rwf]"))
return tostr("Unknown object flag:  ", value[m[1]]);
else
return {tostr(index(value, "r") ? "r" | "", index(value, "w") ? "w" | "", index(value, "f") ? "f" | "")};
endif
.
#77:1
if (value = this:get(@args))
return {value, {tostr("Object flags for @create:  ", value)}};
else
return {0, {tostr("@create leaves all object flags reset")}};
endif
.
#77:2
raw = args[2];
if (raw == 1)
"...+create_flags => create_flags=r";
return {args[1], "r"};
elseif (typeof(raw) == STR)
return args[1..2];
elseif (typeof(raw) != LIST)
return "???";
elseif (length(raw) > 1)
return tostr("I don't understand \"", $string_utils:from_list(listdelete(raw, 1), " "), "\"");
else
return {args[1], raw[1]};
endif
.
#77:3
name = args[2];
what = (verb == "show_dig_room") ? "room" | "exit";
if ((value = this:get(args[1], name)) == 0)
return {0, {tostr("@dig ", what, "s are children of $", what, ".")}};
else
return {value, {tostr("@dig ", what, "s are children of ", value, " (", valid(value) ? value.name | "invalid", ").")}};
endif
.
#77:4
{oname, raw, data} = args;
if (typeof(raw) == LIST)
if (length(raw) > 1)
return tostr("I don't understand \"", $string_utils:from_list(listdelete(raw, 1), " "), "\".");
endif
raw = raw[1];
endif
if (typeof(raw) != STR)
return "You need to give an object id.";
elseif ($command_utils:object_match_failed(value = player:my_match_object(raw), raw))
return "Option unchanged.";
endif
what = (verb == "parse_dig_room") ? "room" | "exit";
generic = #0.(what);
if (value == generic)
return {oname, 0};
else
if (!$object_utils:isa(value, generic))
player:tell("Warning: ", value, " is not a descendant of $", what, ".");
endif
return {oname, value};
endif
.
#79:0
if (!caller_perms().wizard)
return E_PERM;
else
args[1].size_quota = this.default_quota;
args[1].ownership_quota = this.large_negative_number;
endif
.
#79:1
if (!caller_perms().wizard)
return E_PERM;
else
pass(@args);
this.exempted = {};
this.working = #2;
this.task_time_limit = 500;
this.repeat_cycle = 0;
this.large_objects = {};
this.report_recipients = {#2};
this.default_quota = {100000, 0, 0, 1};
$quota_utils = this;
endif
.
#79:2
return 0;
.
#79:3
set_task_perms(caller_perms());
who = this:parse_create_args(@args);
"Because who can be E_INVARG, need to catch E_TYPE. Let $recycler:_create deal with returning E_PERM since that's what's going to happen. Ho_Yan 11/19/96.";
if ((!`who.wizard ! E_TYPE => 0') && $recycler.contents)
return $recycler:_create(@args);
elseif (this:creation_permitted(who))
this:enable_create(who);
value = `create(@args) ! ANY';
this:disable_create(who);
if (typeof(value) != ERR)
this:charge_quota(who, value);
if ((typeof(who.owned_objects) == LIST) && (!(value in who.owned_objects)))
this:add_owned_object(who, value);
endif
endif
return value;
else
return E_QUOTA;
endif
.
#79:4
if ((caller != this) && (!caller_perms().wizard))
return E_PERM;
else
args[1].ownership_quota = 1;
endif
.
#79:5
if ((caller != this) && (!caller_perms().wizard))
return E_PERM;
else
args[1].ownership_quota = this.large_negative_number;
endif
.
#79:6
"This figures out who is gonna own the stuff @create does.  If one arg, return caller_perms().  If two args, then if caller_perms().wizard, args[2].";
{what, ?who = #-1} = args;
if (!valid(who))
return caller_perms();
elseif ($perm_utils:controls(caller_perms(), who))
return who;
else
return E_INVARG;
endif
.
#79:7
"Here's the tricky one.  Collect all the user's characters' cached usage data and total quotas.  Compare same.  If usage bigger than quotas, return 0.  Else, add up the total number of objects that haven't been measured recently.  If greater than the allowed, return 0.  Else, reluctantly, return 1.";
who = args[1];
if (who.wizard || (who == $hacker))
"... sorry folks --Rog";
return 1;
endif
if ((!$object_utils:has_property(who, "size_quota")) || is_clear_property(who, "size_quota"))
return 0;
endif
$recycler:check_quota_scam(who);
allwho = this:all_characters(who);
quota = 0;
usage = 0;
unmeasured = 0;
for x in (allwho)
quota = quota + x.size_quota[1];
usage = usage + x.size_quota[2];
unmeasured = unmeasured + x.size_quota[4];
endfor
if (usage >= quota)
return 0;
elseif (unmeasured >= this.max_unmeasured)
return 0;
else
return 1;
endif
.
#79:8
{who} = args;
if ((caller != this) && (!this:can_peek(caller_perms(), who)))
return E_PERM;
elseif ($object_utils:has_property($local, "second_char_registry"))
seconds = $local.second_char_registry:all_second_chars(who);
if (seconds == E_INVARG)
return {who};
else
return seconds;
endif
else
return {who};
endif
.
#79:9
who = args[1];
if (this:can_peek(caller_perms(), who) && (length(all = this:all_characters(who)) > 1))
many = 1;
else
many = 0;
all = {who};
endif
if (many)
tquota = 0;
tusage = 0;
ttime = $maxint;
tunmeasured = 0;
tunmeasurable = 0;
endif
for x in (all)
{quota, usage, timestamp, unmeasured} = x.size_quota;
unmeasurable = 0;
if (unmeasured >= 100)
unmeasurable = unmeasured / 100;
unmeasured = unmeasured % 100;
endif
if (many)
player:tell(x.name, " quota: ", $string_utils:group_number(quota), "; usage: ", $string_utils:group_number(usage), "; unmeasured: ", unmeasured, "; no .object_size: ", unmeasurable, ".");
tquota = tquota + quota;
tusage = tusage + usage;
ttime = min(ttime, timestamp);
tunmeasured = tunmeasured + unmeasured;
tunmeasurable = tunmeasurable + unmeasurable;
endif
endfor
if (many)
this:display_quota_summary(who, tquota, tusage, ttime, tunmeasured, tunmeasurable);
else
this:display_quota_summary(who, quota, usage, timestamp, unmeasured, unmeasurable);
endif
.
#79:10
return args[1].size_quota[1];
.
#79:11
"Charge args[1] for the quota required to own args[2]";
{who, what} = args;
if ((caller == this) || caller_perms().wizard)
usage_index = 2;
unmeasured_index = 4;
object_size = $object_utils:has_property(what, "object_size") ? what.object_size[1] | -1;
if (object_size <= 0)
who.size_quota[unmeasured_index] = who.size_quota[unmeasured_index] + 1;
else
who.size_quota[usage_index] = who.size_quota[usage_index] + object_size;
endif
else
return E_PERM;
endif
.
#79:12
"reimburse args[1] for the quota required to own args[2]";
"If it is a $garbage, then if who = $hacker, then we mostly ignore everything.  Who cares what $hacker's quota looks like.";
{who, what} = args;
if ((caller == this) || caller_perms().wizard)
usage_index = 2;
unmeasured_index = 4;
if (parent(what) == $garbage)
return 0;
elseif (((valid(who) && is_player(who)) && $object_utils:has_property(what, "object_size")) && (!is_clear_property(who, "size_quota")))
object_size = what.object_size[1];
if (object_size <= 0)
who.size_quota[unmeasured_index] = who.size_quota[unmeasured_index] - 1;
else
who.size_quota[usage_index] = who.size_quota[usage_index] - object_size;
endif
endif
else
return E_PERM;
endif
.
#79:13
"Set args[1]'s quota to args[2]";
if ((caller_perms().wizard || (caller == this)) || this:can_touch(caller_perms()))
"Size_quota[1] is the total quota permitted.";
return args[1].size_quota[1] = args[2];
else
return E_PERM;
endif
.
#79:14
"Return args[1]'s quotas.  second arg of 1 means add all second chars.";
{who, ?all = 0} = args;
if (all && ((caller == this) || this:can_peek(caller_perms(), who)))
all = this:all_characters(who);
else
all = {who};
endif
baseline = {0, 0, 0, 0};
for x in (all)
baseline[1] = baseline[1] + x.size_quota[1];
baseline[2] = baseline[2] + x.size_quota[2];
baseline[3] = min(baseline[3], x.size_quota[3]) || x.size_quota[3];
baseline[4] = baseline[4] + x.size_quota[4];
endfor
return baseline;
.
#79:15
{who, quota, usage, timestamp, unmeasured, unmeasurable} = args;
player:tell(who.name, " has a total building quota of ", $string_utils:group_number(quota), " bytes.");
player:tell($gender_utils:get_pronoun("P", who), " total usage was ", $string_utils:group_number(usage), " as of ", player:ctime(timestamp), ".");
if (usage > quota)
player:tell(who.name, " is over quota by ", $string_utils:group_number(usage - quota), " bytes.");
else
player:tell(who.name, " may create up to ", $string_utils:group_number(quota - usage), " more bytes of objects, properties, or verbs.");
endif
if (unmeasured)
plural = unmeasured != 1;
player:tell("There ", plural ? tostr("are ", unmeasured, " objects") | "is 1 object", " which ", plural ? "are" | "is", " not yet included in the tally; this tally may thus be inaccurate.");
if (unmeasured >= this.max_unmeasured)
player:tell("The number of unmeasured objects is too large; no objects may be created until @measure new is used.");
endif
endif
if (unmeasurable)
plural = unmeasurable != 1;
player:tell("There ", plural ? tostr("are ", unmeasurable, " objects") | "is 1 object", " which do", plural ? "" | "es", " not have a .object_size property and will thus prevent additional building.", (who == player) ? "  Contact a wizard for assistance in having this situation repaired." | "");
endif
.
#79:16
"This wants to only be called by a wizard cuz I'm lazy.  This is just for @second-char anyway.";
if (caller_perms().wizard)
q = this:get_size_quota(args[1], 1);
return q[1] - q[2];
endif
.
#79:17
"This does the reimbursement work of the recycler, since we ignore $garbage in ordinary reimbursement.";
if (caller_perms().wizard)
this:reimburse_quota(@args);
else
return E_PERM;
endif
.
#79:18
return value_bytes(args[1]);
set_task_perms(caller_perms());
v = args[1];
t = typeof(v);
if (t == LIST)
b = ((length(v) + 1) * 2) * 4;
for vv in (v)
$command_utils:suspend_if_needed(2);
b = b + this:value_bytes(vv);
endfor
return b;
elseif (t == STR)
return length(v) + 1;
else
return 0;
endif
.
#79:19
"No need for lengthy algorithms to measure an object, we have a builtin now. Ho_Yan 10/31/96";
set_task_perms($wiz_utils:random_wizard());
o = args[1];
if (((($object_utils:has_property(o, "object_size") && (o.object_size[1] > this.too_large)) && (!caller_perms().wizard)) && (caller_perms() != this.owner)) && (caller_perms() != $hacker))
return o.object_size[1];
endif
b = object_bytes(o);
if ($object_utils:has_property(o, "object_size"))
oldsize = is_clear_property(o, "object_size") ? 0 | o.object_size[1];
if ($object_utils:has_property(o.owner, "size_quota"))
"Update quota cache.";
if (oldsize)
o.owner.size_quota[2] = o.owner.size_quota[2] + (b - oldsize);
else
o.owner.size_quota[2] = o.owner.size_quota[2] + b;
if (o.owner.size_quota[4] > 0)
o.owner.size_quota[4] = o.owner.size_quota[4] - 1;
endif
endif
endif
o.object_size = {b, time()};
endif
if (b > this.too_large)
this.large_objects = setadd(this.large_objects, o);
endif
return b;
.
#79:20
who = args[1];
results = this:summarize_one_user(who);
{total, nuncounted, nzeros, oldest, eldest} = results;
player:tell(who.name, " statistics:");
player:tell("  ", $string_utils:group_number(total), " bytes of storage measured.");
player:tell("  Oldest measurement date ", ctime(oldest), " (", $string_utils:from_seconds(time() - oldest), " ago) of object ", eldest, " (", valid(eldest) ? eldest.name | "$nothing", ")");
if (nzeros || nuncounted)
player:tell("  Number of objects with no statistics recorded:  ");
player:tell("      ", nzeros, " recently created, ", nuncounted, " not descendents of #1");
endif
.
#79:21
"Summarizes total space usage by one user (args[1]).  Optional second argument is a flag to say whether to re-measure all objects for this user; specify the number of seconds out of date you are willing to accept.  If negative, will only re-measure objects which have no recorded data.";
"Returns a list of four values:";
"  total : total measured space in bytes";
"  uncounted : Number of objects that were not counted because they aren't descendents of #1";
"  zeros : Number of objects which have been created too recently to have any measurement data at all (presumably none if re-measuring)";
"  most-out-of-date : the time() the oldest actual measurement was taken";
"  object-thereof: the object who had this time()'d measurement";
who = args[1];
if (length(args) == 2)
if (args[2] < 0)
earliest = 1;
else
earliest = time() - args[2];
endif
else
earliest = 0;
endif
nzeros = 0;
oldest = time();
eldest = #-1;
nuncounted = 0;
total = 0;
for x in ((typeof(who.owned_objects) == LIST) ? who.owned_objects | {})
if (x.owner == who)
"Bulletproofing against recycling during suspends!";
"Leaves us open to unsummarized creation during this period, which is unfortunate.";
if ($object_utils:has_property(x, "object_size"))
size = x.object_size[1];
time = x.object_size[2];
if (time < earliest)
"Re-measure.  This side-effects x.object_size.";
this:object_bytes(x);
size = x.object_size[1];
time = x.object_size[2];
endif
if (time && (time <= oldest))
oldest = time;
eldest = x;
elseif (!time)
nzeros = nzeros + 1;
endif
if (size >= 0)
total = total + size;
endif
else
nuncounted = nuncounted + 1;
endif
endif
$command_utils:suspend_if_needed(0);
endfor
if (!is_clear_property(who, "size_quota"))
"Cache the data, but only if they aren't scamming.";
who.size_quota[2] = total;
who.size_quota[3] = oldest;
who.size_quota[4] = (nuncounted * this.unmeasured_multiplier) + nzeros;
endif
return {total, nuncounted, nzeros, oldest, eldest};
.
#79:22
":recent_object_bytes(x, n) -- return object size of x, guaranteed to be no more than n days old.  N defaults to this.cycle_days.";
{object, ?since = this.cycle_days} = args;
if (!valid(object))
return 0;
elseif (`object.object_size[2] ! ANY => 0' > (time() - (((since * 24) * 60) * 60)))
"Trap error when doesn't have .object_size for some oddball reason ($garbage). Ho_Yan 11/19/96";
return object.object_size[1];
else
return this:object_bytes(object);
endif
.
#79:23
if (!caller_perms().wizard)
return E_PERM;
else
start_time = time();
{num_processed, num_repetitions} = this:measurement_task_body(args[1]);
players = players();
lengthp = length(players);
if ((!num_repetitions) && (num_processed < (lengthp / 2)))
"Add this in because we aren't getting people summarized like we should.  We're going to work for way longer now, cuz we're going to do a second pass, but we really need to get those summaries done.  Only do this if we hardly did any work.  Note the -1 here: measure all newly created objects as well.  More work, sigh.";
extra_end = time() + (3600 * 3);
for x in (players)
if (is_player(x) && (time() < extra_end))
"Robustness as above, plus don't run all day.  My kingdom for a break statement";
this:summarize_one_user(x, -1);
endif
$command_utils:suspend_if_needed(0);
endfor
endif
$mail_agent:send_message(player, this.report_recipients, "quota-utils report", {tostr("About to measure objects of player ", this.working.name, " (", this.working, "), ", $string_utils:ordinal(this.working in players), " out of ", lengthp, ".  We processed ", num_processed + (lengthp * num_repetitions), " players in this run in ", num_repetitions, " time", (num_repetitions == 1) ? "" | "s", " through all players.  Total time spent:  ", $time_utils:dhms(time() - start_time), ".")});
endif
.
#79:24
return (args[1] == this.owner) || $perm_utils:controls(args[1], args[2]);
.
#79:25
return args[1].wizard;
.
#79:26
dobj = args[1];
who = valid(caller_perms()) ? caller_perms() | player;
if (!this:can_peek(who, dobj.owner))
return E_PERM;
endif
props = $object_utils:all_properties_suspended(dobj);
grand_total = obj_over = this:object_overhead_bytes(dobj);
output = {tostr("Object overhead:  ", obj_over)};
if (props)
total = 0;
lines = {};
output = {@output, "Properties, defined and inherited, sorted by size:"};
for x in (props)
$command_utils:suspend_if_needed(0, "...One moment. Working on the breakdown...");
if (!is_clear_property(dobj, x))
size = value_bytes(dobj.(x));
total = total + size;
if (size)
lines = {@lines, {x, size}};
endif
endif
endfor
lines = $list_utils:reverse_suspended($list_utils:sort_suspended(0, lines, $list_utils:slice(lines, 2)));
for x in (lines)
$command_utils:suspend_if_needed(0, "...One moment. Working on the breakdown...");
text = tostr("  ", x[1], ":  ", x[2]);
output = {@output, text};
endfor
output = {@output, tostr("Total size of properties:  ", total)};
grand_total = grand_total + total;
endif
prop_over = this:property_overhead_bytes(dobj, props);
output = {@output, tostr("Property overhead:  ", prop_over)};
grand_total = grand_total + prop_over;
if (verbs(dobj))
output = {@output, "Verbs, sorted by size:"};
total = 0;
lines = {};
for x in [1..length(verbs(dobj))]
$command_utils:suspend_if_needed(0, "...One moment. Working on the breakdown...");
vname = verb_info(dobj, x)[3];
size = (value_bytes(verb_code(dobj, x, 0, 0)) + length(vname)) + 1;
total = total + size;
lines = {@lines, {vname, size}};
endfor
lines = $list_utils:reverse_suspended($list_utils:sort_suspended(0, lines, $list_utils:slice(lines, 2)));
for x in (lines)
$command_utils:suspend_if_needed(0, "...One moment. Working on the breakdown...");
text = tostr("  ", x[1], ":  ", x[2]);
output = {@output, text};
endfor
output = {@output, tostr("Total size of verbs:  ", total)};
grand_total = grand_total + total;
verb_over = this:verb_overhead_bytes(dobj);
output = {@output, tostr("Verb overhead:  ", verb_over)};
grand_total = grand_total + verb_over;
endif
output = {@output, tostr("Grand total:  ", grand_total)};
return output;
"Last modified Sun Dec 31 10:12:14 2006 PST, by Roebare (#109000) @ LM.";
.
#79:27
object = args[1];
return ((13 * 4) + length(object.name)) + 1;
.
#79:28
{o, ?ps = $object_utils:all_properties_suspended(o)} = args;
return (value_bytes(properties(o)) - 4) + ((length(ps) * 4) * 4);
.
#79:29
o = args[1];
vs = verbs(o);
return (length(vs) * 5) * 4;
.
#79:30
":add_owned_object(who, what) -- adds what to whose .owned_objects.";
{who, what} = args;
if ((typeof(who.owned_objects) == LIST) && (what.owner == who))
who.owned_objects = setadd(who.owned_objects, what);
endif
.
#79:31
"This is a one-shot run of the measurement task, as opposed to :measurement_task, which will fork once per day.";
if (!caller_perms().wizard)
return E_PERM;
else
{num_processed, num_repetitions} = this:measurement_task_body();
$mail_agent:send_message(player, player, "quota-utils report", {"finished one shot run of measurement task: processed ", num_processed, " players in ", num_repetitions, " runs through all players."});
endif
.
#79:32
if (!caller_perms().wizard)
return E_PERM;
else
num_processed = 0;
num_repetitions = 0;
usage_index = 2;
time_index = 3;
unmeasured_index = 4;
players = setremove(players(), $hacker);
lengthp = length(players);
index = this.working in players;
keep_going = 1;
if (!index)
"Uh, oh, our guy got reaped while we weren't looking.  Better look for someone else.";
index = 1;
while ((this.working > players[index]) && (index < lengthp))
$command_utils:suspend_if_needed(0);
index = index + 1;
endwhile
this.working = players[index];
endif
day = (60 * 60) * 24;
stop = time() + args[1];
early = time() - (day * this.cycle_days);
tooidle = day * this.cycle_days;
"tooidletime is only used if !this.repeat_cycle.";
tooidletime = time() - tooidle;
local_per_player_hack = $object_utils:has_verb($local, "per_player_daily_scan");
while ((time() < stop) && keep_going)
who = players[index];
if (is_player(who) && $object_utils:has_property(who, "size_quota"))
"Robustness in the face of reaping...";
if ((!this.repeat_cycle) || ((who.last_disconnect_time > tooidletime) && (who.last_disconnect_time != $maxint)))
"only measure people who login regularly if we're a big moo.";
usage = 0;
unmeasured = 0;
earliest = time();
for o in (who.owned_objects)
if ((valid(o) && (o.owner == who)) && (!(o in this.exempted)))
"sanity check: might have recycled while we suspended!";
if ($object_utils:has_property(o, "object_size"))
if (o.object_size[2] < early)
usage = usage + this:object_bytes(o);
else
usage = usage + o.object_size[1];
earliest = min(earliest, o.object_size[2]);
endif
else
unmeasured = unmeasured + 1;
endif
endif
$command_utils:suspend_if_needed(3);
endfor
if (!is_clear_property(who, "size_quota"))
who.size_quota[usage_index] = usage;
who.size_quota[unmeasured_index] = this.unmeasured_multiplier * unmeasured;
who.size_quota[time_index] = earliest;
else
$mail_agent:send_message(player, player, "Quota Violation", {tostr(who, " has a clear .size_quota property."), $string_utils:names_of({who, @$object_utils:ancestors(who)})});
endif
elseif (who.size_quota[unmeasured_index])
"If they managed to create an object *despite* being too idle (presumably programmatically), measure it.";
this:summarize_one_user(who, -1);
endif
elseif (is_player(who))
"They don't have a size_quota property.  Whine.";
$mail_agent:send_message(player, player, "Quota Violation", {tostr(who, " doesn't seem to have a .size_quota property."), $string_utils:names_of({who, @$object_utils:ancestors(who)})});
endif
if (local_per_player_hack)
$local:per_player_daily_scan(who);
endif
if (index >= lengthp)
index = 1;
else
index = index + 1;
endif
num_processed = num_processed + 1;
if (num_processed > lengthp)
if (this.repeat_cycle)
"If we've gotten everyone up to threshold, try measuring some later than that.";
early = early + ((24 * 60) * 60);
tooidle = tooidle * 4;
tooidletime = tooidletime - tooidle;
num_repetitions = num_repetitions + 1;
num_processed = 0;
if (early > time())
"Don't spin our wheels when we've measured everything!";
keep_going = 0;
endif
else
keep_going = 0;
endif
endif
this.working = players[index];
endwhile
return {num_processed, num_repetitions};
endif
.
#79:33
if ((caller == this) || caller_perms().wizard)
day = 24 * 3600;
hour_of_day_GMT = 8;
fork ((((hour_of_day_GMT * 60) * 60) + day) - (time() % day))
this:schedule_measurement_task();
this.measurement_task_running = task_id();
this:measurement_task(this.task_time_limit);
this.measurement_task_running = 0;
endfork
endif
.
#79:34
"Put all your wizards in $byte_quota_utils.wizards.  Then various long-running tasks will cycle among the permissions, spreading out the scheduler-induced personal lag.";
$wiz_utils.old_task_perms_user = setadd($wiz_utils.old_task_perms_user, caller);
return $wiz_utils:random_wizard();
.
#79:35
"this:property_exists(object, property)";
" => does the specified property exist?";
return !(!`property_info(@args) ! ANY');
.
#80:0
"*Must* be called with PDATA first, and LINES second.";
if ((caller != this) && (!caller_perms().wizard))
return E_PERM;
else
try
this.(args[2]);
except (E_PROPNF)
add_property(this, args[2], {}, {$hacker, ""});
endtry
try
this.(args[3]);
except (E_PROPNF)
add_property(this, args[3], 5, {$hacker, ""});
endtry
endif
.
#80:1
if (!caller_perms().wizard)
return;
else
for x in (properties(this))
if (x[1] == "#")
delete_property(this, x);
endif
$command_utils:suspend_if_needed(0);
endfor
pass(@args);
endif
.
#80:2
{who, newdata} = args;
if (is_player(who) && caller_perms().wizard)
"if ($perm_utils:controls(caller_perms(), who) && is_player(who))";
d = tostr(who, "pdata");
l = tostr(who, "lines");
this:ensure_props_exist(who, d, l);
data = this.(d);
lines = this.(l);
"Icky G7 code copied straight out of $player:tell.";
if (((len = length(this.(d) = {@data, newdata})) * 2) > (lines * 3))
this.(d) = this.(d)[(len - lines) + 1..len];
endif
else
return E_PERM;
endif
.
#80:3
who = args[1];
if ($perm_utils:controls(caller_perms(), who))
d = tostr(who, "pdata");
if (typeof(`this.(d) ! ANY') == LIST)
return this.(d);
else
return {};
endif
else
return E_PERM;
endif
.
#80:4
who = args[1];
if ($perm_utils:controls(caller_perms(), who))
d = tostr(who, "pdata");
"OK if this would toss its cookies if no prop, no damage.";
`this.(d) = {} ! ANY';
else
return E_PERM;
endif
.
#80:5
maximum = this.max_lines;
who = args[1];
if ($perm_utils:controls(caller_perms(), who) && is_player(who))
l = tostr(who, "lines");
this:ensure_props_exist(who, l, l);
kept = min(args[2], maximum);
this.(l) = kept;
return kept;
else
return E_PERM;
endif
.
#80:6
if ((((caller != this) && (caller_perms() != #-1)) && (caller_perms() != player)) || (!player.wizard))
$error:raise(E_PERM);
endif
threshold = ((60 * 60) * 24) * 3;
for x in (properties(this))
if (x[1] == "#")
l = length(x);
who = toobj(x[1..l - 5]);
if (((!valid(who)) || (!is_player(who))) || (!this:is_paranoid(who)))
delete_property(this, x);
else
if (index(x, "lines"))
if (typeof(this.(x)) != INT)
this.(x) = 10;
endif
elseif (index(x, "pdata"))
if (((!$object_utils:connected(who)) && (who.last_disconnect_time < (time() - threshold))) && (who.last_connect_time < (time() - threshold)))
this.(x) = {};
endif
if (typeof(this.(x)) != LIST)
this.(x) = {};
endif
endif
endif
endif
$command_utils:suspend_if_needed(0);
endfor
.
#80:7
return this:description();
.
#80:8
if (!caller_perms().wizard)
return E_PERM;
else
threedays = (3 * 24) * 3600;
fork ((((7 * 60) * 60) + threedays) - (time() % threedays))
this:(verb)();
endfork
this:gc();
endif
.
#80:9
"Some people make their .paranoid !r.  Wizardly verb to retrieve value.";
return `args[1].paranoid ! ANY';
.
#81:0
if (!caller_perms().wizard)
return E_PERM;
else
args[1].ownership_quota = $wiz_utils.default_player_quota;
endif
.
#81:1
if (!caller_perms().wizard)
return E_PERM;
else
pass(@args);
"Uncomment this if you want to send the core out with object quota.";
"  $quota_utils = this";
endif
.
#81:2
if (!caller_perms().wizard)
return E_PERM;
else
victim = args[1];
oldquota = victim.ownership_quota;
if ($object_utils:has_property($local, "second_char_registry") && $local.second_char_registry:is_second_char(victim))
"don't increment quota for 2nd chars when programmering";
victim.ownership_quota = oldquota;
else
victim.ownership_quota = oldquota + ($wiz_utils.default_programmer_quota - $wiz_utils.default_player_quota);
endif
endif
.
#81:3
"Calls built-in create.";
set_task_perms(caller_perms());
return `create(@args) ! ANY';
.
#81:4
$recycler:check_quota_scam(args[1]);
return args[1].ownership_quota > 0;
.
#81:5
return 1;
.
#81:6
who = args[1];
if (caller_perms() == who)
q = who.ownership_quota;
total = (typeof(who.owned_objects) == LIST) ? length(setremove(who.owned_objects, who)) | 0;
if (q == 0)
player:tell(tostr("You can't create any more objects", (total < 1) ? "." | tostr(" until you recycle some of the ", total, " you already own.")));
else
player:tell(tostr("You can create ", q, " new object", (q == 1) ? "" | "s", (total == 0) ? "." | tostr(" without recycling any of the ", total, " that you already own.")));
endif
else
if ($perm_utils:controls(caller_perms(), who))
player:tell(tostr(who.name, "'s quota is currently ", who.ownership_quota, "."));
else
player:tell("Permission denied.");
endif
endif
.
#81:7
if ($perm_utils:controls(caller_perms(), args[1]) || (caller == this))
return args[1].ownership_quota;
else
return E_PERM;
endif
.
#81:8
"Charge args[1] for the quota required to own args[2]";
{who, what} = args;
if ((caller == this) || caller_perms().wizard)
who.ownership_quota = who.ownership_quota - 1;
else
return E_PERM;
endif
.
#81:9
"Reimburse args[1] for the quota required to own args[2]";
{who, what} = args;
if ((caller == this) || caller_perms().wizard)
who.ownership_quota = who.ownership_quota + 1;
else
return E_PERM;
endif
.
#81:10
"Set args[1]'s quota to args[2]";
{who, quota} = args;
if (caller_perms().wizard || (caller == this))
return who.ownership_quota = quota;
else
return E_PERM;
endif
.
#81:11
return 0;
.
#81:12
"Is args[1] permitted to examine args[2]'s quota information?";
return $perm_utils:controls(args[1], args[2]);
.
#81:13
"Is args[1] permitted to examine args[2]'s quota information?";
return args[1].wizard;
.
#82:0
output = {"On $server_options, the following settings have been established by the wizards:", ""};
wizonly = {};
etc = {};
mentioned = {};
for x in (setremove(properties(this), "help_msg"))
if (index(x, "protect_") == 1)
mentioned = {@mentioned, x[9..$]};
wizonly = {@wizonly, tostr(x[9..$], "() is ", this.(x) ? "" | "not ", "wizonly.")};
else
etc = {@etc, tostr("$server_options.", x, " = ", $string_utils:print(this.(x)))};
endif
endfor
if ("set_verb_code" in wizonly)
wizonly = {@wizonly, "", "Note: since the 'set_verb_code' built-in function is wiz-only, then the '.program' built-in command is wiz-only too."};
endif
if (bf = $set_utils:intersection(verbs(#0), mentioned))
bf = $list_utils:sort(bf);
etc = {@etc, "", "In your code, #0:(built-in)(@args) should be called rather than built-in(@args) when you would use one of the following built-in functions:", $string_utils:english_list(bf) + ".", ((("Example: #0:" + bf[1]) + "(@args) should be used instead of ") + bf[1]) + "(@args)"};
endif
return {@this.help_msg, @output, @wizonly, "", @etc};
.
#82:1
if (!caller_perms().wizard)
raise(E_PERM);
endif
this.support_numeric_verbname_strings = 0;
pass(@args);
.
#83:0
"Copied from Features Feature Object (#24300):list by Joe (#2612) Mon Oct 10 21:07:35 1994 PDT";
if (this.contents)
player:tell(".features objects:");
player:tell("----------------------");
first = 1;
for thing in (this.contents)
$command_utils:kill_if_laggy(10, "Sorry, the MOO is very laggy, and there are too many feature objects in here to list!");
$command_utils:suspend_if_needed(0);
if (!first)
player:tell();
endif
player:tell($string_utils:nn(thing), ":");
`thing:look_self() ! ANY => player:tell("<<Error printing description>>")';
first = 0;
endfor
player:tell("----------------------");
else
player:tell("No objects in ", this.name, ".");
endif
.
#84:0
if (!caller_perms().wizard)
raise(E_PERM);
endif
pass(@args);
this.("@quota") = {"*forward*", "object-quota"};
.
#86:0
if (!this:trusted(caller_perms()))
return E_PERM;
endif
{host, ?user = "", ?pass = ""} = args;
if (typeof(conn = $network:open(host, this.port)) == ERR)
return {"Unable to connect to host."};
endif
this.connections = {@this.connections, {conn, caller_perms(), {}, 0, {}}};
if (((!this:wait_for_response(conn)) || (user && (!this:do_command(conn, "USER " + user)))) || (pass && (!this:do_command(conn, "PASS " + pass))))
messages = this:get_messages(conn);
this.connections = listdelete(this.connections, $list_utils:iassoc(conn, this.connections));
$network:close(conn);
return messages;
endif
return conn;
.
#86:1
conn = args[1];
if (!this:controls(caller_perms(), conn))
return E_PERM;
endif
this:do_command(conn, "QUIT");
info = $list_utils:assoc(conn, this.connections);
this.connections = setremove(this.connections, info);
$network:close(conn);
if ($network:is_open(info[4]))
$network:close(info[4]);
endif
return info[3];
.
#86:2
{conn, cmd, ?nowait = 0} = args;
if (!this:controls(caller_perms(), conn))
return E_PERM;
endif
$network:notify(conn, cmd);
return nowait ? 1 | this:wait_for_response(conn);
.
#86:3
{conn, ?first_only = 0} = args;
if (!this:controls(caller_perms(), conn))
return E_PERM;
endif
matchstr = first_only ? "^[1-9][0-9][0-9] " | "^[2-9][0-9][0-9] ";
messages = {};
result = "";
while ((typeof(result) == STR) && (!match(result, matchstr)))
result = $network:read(conn);
messages = {@messages, result};
endwhile
i = $list_utils:iassoc(conn, this.connections);
this.connections[i][3] = {@this.connections[i][3], @messages};
if (typeof(result) == STR)
if (result[1] in {"4", "5"})
player:tell(result);
return E_NONE;
else
return 1;
endif
else
return result;
endif
.
#86:4
return args[1].wizard || ({@$list_utils:assoc(args[2], this.connections), 0, 0}[2] == args[1]);
.
#86:5
{conn, ?keep = 0} = args;
if (!this:controls(caller_perms(), conn))
return E_PERM;
endif
i = $list_utils:iassoc(conn, this.connections);
messages = this.connections[i][3];
if (!keep)
this.connections[i][3] = {};
endif
return messages;
.
#86:6
conn = args[1];
if (!this:controls(caller_perms(), conn))
return E_PERM;
endif
i = $list_utils:iassoc(conn, this.connections);
if (!$network:is_open(this.connections[i][4]))
this:do_command(conn, "PASV");
msg = (msg = this:get_messages(conn, 1))[$];
if (msg[1..3] != "227")
return E_TYPE;
elseif (!(match = match(msg, "(%([0-9]+%),%([0-9]+%),%([0-9]+%),%([0-9]+%),%([0-9]+%),%([0-9]+%))")))
return E_TYPE;
elseif (typeof(dconn = $network:open(substitute("%1.%2.%3.%4", match), (toint(substitute("%5", match)) * 256) + toint(substitute("%6", match)))) == ERR)
return dconn;
else
this.connections[i][4] = dconn;
endif
this.connections[i][5] = E_INVARG;
set_task_perms(caller_perms());
fork (0)
this:listen(conn, dconn);
endfork
endif
return 1;
.
#86:7
{conn, ?nowait = 0} = args;
if (!this:controls(caller_perms(), conn))
return E_PERM;
endif
i = $list_utils:iassoc(conn, this.connections);
while ((!nowait) && (this.connections[i][5] == E_INVARG))
suspend(0);
endwhile
return this.connections[i][5];
.
#86:8
{conn, data} = args;
if (!this:controls(caller_perms(), conn))
return E_PERM;
endif
i = $list_utils:iassoc(conn, this.connections);
dconn = this.connections[i][4];
if (!$network:is_open(dconn))
return E_INVARG;
else
for line in (data)
notify(dconn, line);
$command_utils:suspend_if_needed(0);
endfor
this:close_data(conn);
this.connections[i][4] = 0;
endif
.
#86:9
return args[1].wizard || ((typeof(this.trusted) == LIST) ? args[1] in this.trusted | this.trusted);
.
#86:10
if (caller != this)
return E_PERM;
endif
{conn, dconn} = args;
data = {};
line = `read(dconn) ! ANY';
while (typeof(line) == STR)
data = {@data, line};
line = read(dconn);
$command_utils:suspend_if_needed(0);
endwhile
if (i = $list_utils:iassoc(conn, this.connections))
this.connections[i][5] = data;
endif
.
#86:11
conn = args[1];
if (!this:controls(caller_perms(), conn))
return E_PERM;
endif
if (!$network:is_open(dconn = $list_utils:assoc(conn, this.connections)[4]))
return E_INVARG;
else
$network:close(dconn);
"...let the reading task come to terms with its abrupt superfluousness...";
suspend(0);
return 1;
endif
.
#86:12
":get(host, username, password, filename)";
if (!this:trusted(caller_perms()))
return E_PERM;
endif
if (typeof(conn = this:open(@args[1..3])) != OBJ)
return E_NACC;
else
result = (this:open_data(conn) && this:do_command(conn, "RETR " + args[4])) && this:get_data(conn);
this:close(conn);
return result;
endif
.
#86:13
if (caller_perms().wizard)
this.connections = {};
this.trusted = 1;
pass(@args);
endif
.
#86:14
":put(host, username, password, filename, data)";
if (!this:trusted(caller_perms()))
return E_PERM;
endif
if (typeof(conn = this:open(@args[1..3])) != OBJ)
return E_NACC;
else
result = (this:open_data(conn) && this:do_command(conn, "STOR " + args[4], 1)) && this:put_data(conn, args[5]);
this:close(conn);
return result;
endif
.
#86:15
"return the data connection associated with the control connection args[1]";
conn = args[1];
i = $list_utils:iassoc(conn, this.connections);
return this.connections[i][4];
.
#87:0
if (typeof(base = this.(verb)) == STR)
base = {base};
endif
base = {@base, "", tostr(".minimum_password_length = ", toliteral(x = this.minimum_password_length)), x ? tostr("Passwords are required to be a minimum of ", $string_utils:english_number(x), " characters in length.") | "There is no minimum length requirement for passwords."};
base = {@base, "", tostr(".check_against_moo = ", toliteral(x = this.check_against_moo)), tostr("Passwords ", x ? "may not" | "may", " be variants on the MOO's name (", $network.MOO_name, ").")};
base = {@base, "", tostr(".check_against_name = ", toliteral(x = this.check_against_name)), tostr("Passwords ", x ? "may not" | "may", " be variants on the player's MOO name and/or aliases.")};
base = {@base, "", tostr(".check_against_email = ", toliteral(x = this.check_against_email)), x ? "Passwords may not be variants on the player's email address." | "Passwords are not checked against the player's email address."};
base = {@base, "", tostr(".check_against_hosts = ", toliteral(x = this.check_against_hosts)), x ? "Passwords may not be variants on the player's hostname(s)." | "Passwords are not checked against the player's hostname(s)."};
base = {@base, "", tostr(".check_against_dictionary = ", toliteral(x = this.check_against_dictionary)), tostr("Passwords ", (typeof(x) in {LIST, OBJ}) ? "may not" | "may", " be dictionary words.", (x && (!$network.active)) ? "  (This option is set but unavailable.)" | "")};
base = {@base, "", tostr(".require_funky_characters = ", toliteral(x = this.require_funky_characters)), tostr("Non-alphabetic characters are ", x ? "" | "not ", "required in passwords.")};
base = {@base, "", tostr(".check_obscure_stuff = ", toliteral(x = this.check_obscure_stuff)), x ? "Misc. obscure checks enabled" | "No obscure checks in use."};
return base;
.
#87:1
":reject_password ( STR password [ , OBJ for-whom ] );";
"=> string value [if the password is rejected, why?]";
"=> false value [if the password isn't rejected]";
if (length(args) == 1)
trust = 0;
else
if ($perm_utils:controls(caller_perms(), args[2]))
trust = 1;
else
return "Permissions don't permit setting of that password.";
endif
endif
"this is gonna be huge";
return (((((((this:trivial_check(@args) || (this.minimum_password_length && this:check_length(@args))) || ((this.check_against_name && trust) && this:check_name(@args))) || ((this.check_against_email && trust) && this:check_email(@args))) || ((this.check_against_hosts && trust) && this:check_hosts(@args))) || ((typeof(this.check_against_dictionary) in {LIST, OBJ}) && this:check_dictionary(@args))) || (this.require_funky_characters && this:check_for_funky_characters(@args))) || (this.check_against_moo && this:check_against_moo(@args))) || (this.check_obscure_stuff && this:check_obscure_combinations(@args));
.
#87:2
if (typeof(pwd = args[1]) != STR)
return "Passwords must be strings.";
elseif (index(pwd, " "))
return "Passwords may not contain spaces.";
elseif (length(args) == 2)
if (((typeof(who = args[2]) != OBJ) || (!valid(who))) || (!is_player(who)))
return "That's not a player.";
elseif (!$perm_utils:controls(caller_perms(), who))
return "You can't set the password for that player.";
elseif ($object_utils:isa(who, $guest))
return "Sorry, but guest characters are not allowed to change their passwords.";
endif
endif
.
#87:3
if ((l = this.minimum_password_length) && (length(args[1]) < l))
return tostr("Passwords must be a minimum of ", $string_utils:english_number(l), (l == 1) ? " character " | " characters ", "long.");
endif
.
#87:4
pwd = args[1];
if (valid($player_db:find_exact(pwd)))
return "Passwords may not be close to a player's name/alias pair.";
elseif (valid($player_db:find($string_utils:reverse(pwd))))
return "Passwords ought not be the reverse of a player's name/alias.";
endif
.
#87:5
{pwd, who} = args;
if (!$perm_utils:controls(caller_perms(), who))
return "Permission denied.";
endif
email = $wiz_utils:get_email_address(who);
if (!email)
"can't check";
return;
endif
if (index(email, pwd))
return "Passwords can't match your registered email address.";
endif
.
#87:6
{pwd, who} = args;
if (!$perm_utils:controls(caller_perms(), who))
return "Permission denied.";
endif
hosts = who.all_connect_places;
for x in (hosts)
if (index(x, pwd))
return "Passwords may not match hostnames.";
endif
endfor
.
#87:7
pwd = args[1];
if ((typeof(dict = this.check_against_dictionary) == LIST) && $network.active)
"assume we're checking an on-line dictionary";
dict[3] = dict[3] + pwd;
result = $gopher:get(@dict);
if (typeof(result) == ERR)
"we probably can't check the dictionary anyway";
return;
elseif ((result[1] && (result[1][1] != "0")) && (!this:_is_funky_case(pwd)))
return "Dictionary words are not permitted for passwords.";
endif
elseif (typeof(dict) == OBJ)
"assume we're checking mr spell";
try
if (dict:find_exact(pwd) && (!this:_is_funky_case(pwd)))
return "Dictionary words are not permitted for passwords.";
endif
except (ANY)
"in case this is messed up. Just let it go and return 0;";
endtry
endif
.
#87:8
if (this:_is_funky_case(pwd = args[1]))
return;
endif
alphabet = $string_utils.alphabet;
for i in [1..length(pwd)]
if (!index(alphabet, pwd[i]))
return;
endif
endfor
return "At least one unusual capitalization and/or numeric or punctuation character is required.";
.
#87:9
pwd = args[1];
moo = $network.MOO_Name;
if (this:_is_funky_case(pwd))
return;
endif
if (pwd == moo)
return "The MOO's name is not secure as a password.";
endif
if (moo[$ - 2..$] == "MOO")
if (pwd == moo[1..$ - 3])
return "The MOO's name is not secure as a password.";
endif
endif
.
#87:10
pwd = args[1];
if (!strcmp(pwd, u = $string_utils:uppercase(pwd)))
return 0;
elseif (!strcmp(pwd, l = $string_utils:lowercase(pwd)))
return 0;
elseif (!strcmp(pwd, tostr(u[1], l[2..$])))
return 0;
else
return 1;
endif
.
#87:11
pwd = args[1];
if (match(pwd, "^[0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9]$"))
return "Social security numbers are potentially insecure passwords.";
elseif (match(pwd, "^[0-9]+/[0-9]+/[0-9]+$"))
return "Passwords which look like dates are potentially insecure passwords.";
endif
.
#87:12
if (caller_perms().wizard)
pass(@args);
this.minimum_password_length = this.check_against_name = this.check_against_email = this.check_against_hosts = this.check_against_dictionary = this.require_funky_characters = this.check_against_moo = this.check_obscure_stuff = 0;
endif
.
#88:0
"'@rooms' - List the rooms which are known by name.";
line = "";
for item in (this.rooms)
line = (((line + item[1]) + "(") + tostr(item[2])) + ")   ";
endfor
player:tell(line);
.
#88:1
"Return a string giving the names of the objects in a list. Now on $string_utils";
return $string_utils:names_of(@args);
.
#88:2
"'@go <place>' - Teleport yourself somewhere. Example: '@go liv' to go to the living room.";
dest = this:lookup_room(dobjstr);
if (dest == $failed_match)
player:tell("There's no such place known.");
else
this:teleport(player, dest);
endif
.
#88:3
"Look up a room in your personal database of room names, returning its object number. If it's not in your database, it checks to see if it's a number or a nearby object.";
room = args[1];
if (room == "home")
return player.home;
elseif (room == "me")
return player;
elseif (room == "here")
return player.location;
elseif (!room)
return $failed_match;
endif
index = this:index_room(room);
if (index)
return this.rooms[index][2];
else
return this:my_match_object(room);
"old code no longer used, 2/11/96 Heathcliff";
source = player.location;
if (!(valid(source) && ($room in $object_utils:ancestors(source))))
source = $room;
endif
return source:match_object(room);
endif
.
#88:4
"Teleport a player or object. For printing messages, there are three cases: (1) teleport self (2) teleport other player (3) teleport object. There's a spot of complexity for handling the invalid location #-1.";
set_task_perms((caller == this) ? this | $no_one);
{thing, dest} = args;
source = thing.location;
if (valid(dest))
dest_name = dest.name;
else
dest_name = tostr(dest);
endif
if (source == dest)
player:tell(thing.name, " is already at ", dest_name, ".");
return;
endif
thing:moveto(dest);
if (thing.location == dest)
tsd = {thing, source, dest};
if (thing == player)
this:teleport_messages(@tsd, this:self_port_msg(@tsd), this:oself_port_msg(@tsd), this:self_arrive_msg(@tsd), "");
elseif (is_player(thing))
this:teleport_messages(@tsd, this:player_port_msg(@tsd), this:oplayer_port_msg(@tsd), this:player_arrive_msg(@tsd), this:victim_port_msg(@tsd));
else
this:teleport_messages(@tsd, this:thing_port_msg(@tsd), this:othing_port_msg(@tsd), this:thing_arrive_msg(@tsd), this:object_port_msg(@tsd));
endif
elseif (thing.location == source)
if ($object_utils:contains(thing, dest))
player:tell("Ooh, it's all twisty. ", dest_name, " is inside ", thing.name, ".");
else
if ($object_utils:has_property(thing, "po"))
pronoun = thing.po;
else
pronoun = "it";
endif
player:tell("Either ", thing.name, " doesn't want to go, or ", dest_name, " didn't accept ", pronoun, ".");
endif
else
thing_name = (thing == player) ? "you" | thing.name;
player:tell("A strange force deflects ", thing_name, " from the destination.");
endif
.
#88:5
"Send teleport messages. There's a slight complication in that the source and dest need not be valid objects.";
{thing, source, dest, pmsg, smsg, dmsg, tmsg} = args;
if (pmsg)
"The player's own message.";
player:tell(pmsg);
endif
if (smsg)
`source:room_announce_all_but({thing, player}, smsg) ! E_VERBNF, E_INVIND';
endif
if (dmsg)
`dest:room_announce_all_but({thing, player}, dmsg) ! E_VERBNF, E_INVIND';
endif
if (tmsg)
"A message to the victim being teleported.";
thing:tell(tmsg);
endif
.
#88:6
"'@move <object> to <place>' - Teleport an object. Example: '@move trash to #11' to move trash to the closet.";
here = player.location;
if ((prepstr != "to") || (!iobjstr))
player:tell("Usage: @move <object> to <location>");
return;
endif
if ((!dobjstr) || (dobjstr == "me"))
thing = this;
else
thing = `here:match_object(dobjstr) ! E_VERBNF, E_INVIND => $failed_match';
if (thing == $failed_match)
thing = player:my_match_object(dobjstr);
endif
endif
if ($command_utils:object_match_failed(thing, dobjstr))
return;
endif
if ((!player.programmer) && ((thing.owner != player) && (thing != player)))
player:tell("You can only move your own objects.");
return;
endif
dest = this:lookup_room(iobjstr);
if ((dest == #-1) || (!$command_utils:object_match_failed(dest, iobjstr)))
this:teleport(thing, dest);
endif
.
#88:7
"'index_room (<room name>)' - Look up a room in your personal database of room names, returning its index in the list. Return 0 if it is not in the list. If the room name is the empty string, then only exact matches are considered; otherwise, a leading match is good enough.";
room = tostr(args[1]);
size = length(room);
index = 1;
match = 0;
for item in (this.rooms)
item_name = item[1];
if (room == item_name)
return index;
elseif ((size && (length(item_name) >= size)) && (room == item_name[1..size]))
match = index;
endif
index = index + 1;
endfor
return match;
.
#88:8
"'@addroom <name> <object>', '@addroom <object> <name>', '@addroom <name>', '@addroom <object>', '@addroom' - Add a room to your personal database of teleport destinations. Example: '@addroom Kitchen #24'. Reasonable <object>s are numbers (#17) and 'here'. If you leave out <object>, the object is the current room. If you leave out <name>, the name is the specified room's name. If you leave out both, you get the current room and its name.";
if (((!caller) && (player != this)) || (caller && (callers()[1][3] != this)))
if (!caller)
player:tell(E_PERM);
endif
return E_PERM;
endif
if (!dobjstr)
object = this.location;
name = valid(object) ? object.name | "Nowhere";
elseif (command = this:parse_out_object(dobjstr))
name = command[1];
object = command[2];
else
name = dobjstr;
object = this.location;
endif
if (!valid(object))
player:tell("This is not a valid location.");
return E_INVARG;
endif
player:tell("Adding ", name, "(", tostr(object), ") to your database of rooms.");
this.rooms = {@this.rooms, {name, object}};
.
#88:9
"'@rmroom <roomname>' - Remove a room from your personal database of teleport destinations. Example: '@rmroom library'.";
if (((!caller) && (player != this)) || (caller && (callers()[1][3] != this)))
if (!caller)
player:tell(E_PERM);
endif
return E_PERM;
endif
index = this:index_room(dobjstr);
if (index)
player:tell("Removing ", this.rooms[index][1], "(", this.rooms[index][2], ").");
this.rooms = listdelete(this.rooms, index);
else
player:tell("That room is not in your database of rooms. Check '@rooms'.");
endif
.
#88:10
"'@join <player>' - Teleport yourself to the location of any player, whether connected or not.";
if (dobjstr == "")
player:tell("Usage: @join <player>. For example, '@join frand'.");
return;
endif
target = $string_utils:match_player(dobjstr);
$command_utils:player_match_result(target, dobjstr);
if (valid(target))
if (target == this)
if (player == this)
player:tell("There is little need to join yourself, unless you are split up.");
else
player:tell("No thank you. Please get your own join verb.");
endif
return;
endif
dest = target.location;
msg = this:enlist(this:join_msg());
editing = $object_utils:isa(dest, $generic_editor);
if (editing)
dest = dest.original[target in dest.active];
editing_msg = "%N is editing at the moment. You can wait here until %s is done.";
if (player.location == dest)
msg = {editing_msg};
else
msg = {@msg, editing_msg};
endif
endif
if (msg && ((player.location != dest) || editing))
player:tell_lines($string_utils:pronoun_sub(msg, target));
elseif (player.location == dest)
player:tell("OK, you're there. You didn't need to actually move, though.");
return;
endif
this:teleport(player, dest);
endif
.
#88:11
"'@find #<object>', '@find <player>', '@find :<verb>' '@find .<property>' - Attempt to locate things. Verbs and properties are found on any object in the player's vicinity, and some other places.  '@find ?<help>' looks for a help topic on any available help database.";
if (!dobjstr)
player:tell("Usage: '@find #<object>' or '@find <player>' or '@find :<verb>' or '@find .<property>' or '@find ?<help topic>'.");
return;
endif
if (dobjstr[1] == ":")
name = dobjstr[2..$];
this:find_verb(name);
return;
elseif (dobjstr[1] == ".")
name = dobjstr[2..$];
this:find_property(name);
return;
elseif (dobjstr[1] == "#")
target = toobj(dobjstr);
if (!valid(target))
player:tell(target, " does not exist.");
endif
elseif (dobjstr[1] == "?")
name = dobjstr[2..$];
this:find_help(name);
return;
else
target = $string_utils:match_player(dobjstr);
$command_utils:player_match_result(target, dobjstr);
endif
if (valid(target))
player:tell(target.name, " (", target, ") is at ", valid(target.location) ? target.location.name | "Nowhere", " (", target.location, ").");
endif
.
#88:12
"'find_verb (<name>)' - Search for a verb with the given name. The objects searched are those returned by this:find_verbs_on(). The printing order relies on $list_utils:remove_duplicates to leave the *first* copy of each duplicated element in a list; for example, {1, 2, 1} -> {1, 2}, not to {2, 1}.";
name = args[1];
results = "";
objects = $list_utils:remove_duplicates(this:find_verbs_on());
for thing in (objects)
if (valid(thing) && (mom = $object_utils:has_verb(thing, name)))
results = ((((results + "   ") + thing.name) + "(") + tostr(thing)) + ")";
mom = mom[1];
if (thing != mom)
results = ((((results + "--") + mom.name) + "(") + tostr(mom)) + ")";
endif
endif
endfor
if (results)
this:tell("The verb :", name, " is on", results);
else
this:tell("The verb :", name, " is nowhere to be found.");
endif
.
#88:13
"'@ways', '@ways <room>' - List any obvious exits from the given room (or this room, if none is given).";
if (dobjstr)
room = dobj;
else
room = this.location;
endif
if ((!valid(room)) || (!($room in $object_utils:ancestors(room))))
player:tell("You can only pry into the exits of a room.");
return;
endif
exits = {};
if ($object_utils:has_verb(room, "obvious_exits"))
exits = room:obvious_exits();
endif
exits = this:checkexits(this:obvious_exits(), room, exits);
exits = this:findexits(room, exits);
this:tell_ways(exits, room);
.
#88:14
"Add to the 'exits' list any exits in the room which have a single-letter alias.";
{room, exits} = args;
alphabet = "abcdefghijklmnopqrstuvwxyz0123456789";
for i in [1..length(alphabet)]
found = room:match_exit(alphabet[i]);
if (valid(found) && (!(found in exits)))
exits = {@exits, found};
endif
endfor
return exits;
.
#88:15
"Check a list of exits to see if any of them are in the given room.";
{to_check, room, exits} = args;
for word in (to_check)
found = room:match_exit(word);
if (valid(found) && (!(found in exits)))
exits = {@exits, found};
endif
endfor
return exits;
.
#88:16
"This verb returns messages that go only to you. You don't need to have your name tacked on to the beginning of these. Heh.";
msg = this.(verb);
if (msg && (length(args) >= 3))
msg = this:msg_sub(msg, @args);
endif
return msg;
.
#88:17
"This verb returns messages that go to other players. It does pronoun substitutions; if your name is not included in the final string, it adds the name in front.";
msg = this.(verb);
if (!msg)
msg = $frand_class.(verb);
endif
if (length(args) >= 3)
msg = this:msg_sub(msg, @args);
endif
if (!$string_utils:index_delimited(msg, player.name))
msg = (player.name + " ") + msg;
endif
return msg;
.
#88:18
"Do pronoun and other substitutions on the teleport messages. The arguments are: 1. The original message, before any substitutions; 2. object being teleported; 3. from location; 4. to location. The return value is the final message.";
{msg, thing, from, to} = args;
msg = $string_utils:substitute(msg, $string_utils:pronoun_quote({{"%<from room>", valid(from) ? from.name | "Nowhere"}, {"%<to room>", valid(to) ? to.name | "Nowhere"}}));
msg = $string_utils:pronoun_sub(msg, thing);
return msg;
.
#88:19
"'obvious_exits()' - Return a list of common exit names which are obviously worth looking for in a room.";
return {"n", "ne", "e", "se", "s", "sw", "w", "nw", "north", "northeast", "east", "southeast", "south", "southwest", "west", "northwest", "u", "d", "up", "down", "out", "exit", "leave", "enter"};
.
#88:20
":tell_ways (<list of exits>)' - Tell yourself a list of exits, for @ways. You can override it to print the exits in any format.";
exits = args[1];
answer = {};
for e in (exits)
answer = {@answer, ((e.name + " (") + $string_utils:english_list(e.aliases)) + ")"};
endfor
player:tell("Obvious exits: ", $string_utils:english_list(answer), ".");
.
#88:21
"Return the name and number of an object, e.g. 'Root Class (#1)'.";
o = args[1];
return (((valid(o) ? o.name | "Nothing") + " (") + tostr(o)) + ")";
.
#88:22
"'parse_out_object (<string>)' -> {<name>, <object>}, or 0. Given a string, attempt to find an object at its beginning or its end. An object can be either an object number, or 'here'. If this succeeds, return a list of the object and the unmatched part of the string, called the name. If it fails, return 0.";
words = $string_utils:words(args[1]);
if (!length(words))
return 0;
endif
word1 = words[1];
wordN = words[$];
if (length(word1) && (word1[1] == "#"))
start = 2;
finish = length(words);
what = toobj(word1);
elseif (word1 == "here")
start = 2;
finish = length(words);
what = this.location;
elseif (length(wordN) && (wordN[1] == "#"))
start = 1;
finish = length(words) - 1;
what = toobj(wordN);
elseif (wordN == "here")
start = 1;
finish = length(words) - 1;
what = this.location;
else
return 0;
endif
"toobj() has the nasty property that invalid strings get turned into #0. Here we just pretend that all references to #0 are actually meant for #-1.";
if (what == #0)
what = $nothing;
endif
name = $string_utils:from_list(words[start..finish], " ");
if (!name)
name = valid(what) ? what.name | "Nowhere";
endif
return {name, what};
.
#88:23
"'enlist (<x>)' - If x is a list, just return it; otherwise, return {x}. The purpose here is to turn message strings into lists, so that lines can be added. It is not guaranteed to work for non-string non-lists.";
x = args[1];
if (!x)
return {};
elseif (typeof(x) == LIST)
return x;
else
return {x};
endif
.
#88:24
"@spellproperties <object>";
"@spellmessages <object>";
"Spell checks the string properties of an object, or the subset of said properties which are suffixed _msg, respectively.";
set_task_perms(player);
if (!dobjstr)
player:notify(tostr("Usage: ", verb, " <object>"));
return;
elseif ($command_utils:object_match_failed(dobj = player:my_match_object(dobjstr), dobjstr))
return;
elseif (typeof(props = $object_utils:all_properties(dobj)) == ERR)
player:notify("Permission denied to read properties on that object.");
return;
endif
props = setremove(props, "messages");
if (verb[1..7] == "@spellm")
spell = {};
for prop in (props)
if ((index(prop, "_msg") == (length(prop) - 3)) && index(prop, "_msg"))
spell = {@spell, prop};
endif
endfor
props = spell;
endif
if (props == {})
player:notify(tostr("No ", (verb[1..7] == "@spellm") ? "messages" | "properties", " found to spellcheck on ", dobj, "."));
return;
endif
for data in (props)
if (typeof(dd = `dobj.(data) ! ANY') == LIST)
text = {};
for linenum in (dd)
text = listappend(text, linenum);
endfor
elseif ((((typeof(dd) == OBJ) || (typeof(dd) == INT)) || (typeof(dd) == ERR)) || (typeof(dd) == FLOAT))
text = "";
elseif (typeof(dd) == STR)
text = dd;
endif
if (typeof(text) == STR)
text = {text};
endif
linenumber = 0;
for thisline in (text)
$command_utils:suspend_if_needed(0);
linenumber = linenumber + 1;
if (((((typeof(thisline) != LIST) && (typeof(thisline) != OBJ)) && (typeof(thisline) != INT)) && (typeof(thisline) != FLOAT)) && (typeof(thisline) != ERR))
i = $string_utils:strip_chars(thisline, "!@#$%^&*()_+1234567890={}[]<>?:;,./|\"~'");
if (i)
i = $string_utils:words(i);
for ii in [1..length(i)]
$command_utils:suspend_if_needed(0);
if (!$spell:valid(i[ii]))
if ((rindex(i[ii], "s") == length(i[ii])) && $spell:valid(i[ii][1..$ - 1]))
msg = "Possible match: " + i[ii];
elseif ((rindex(i[ii], "'s") == (length(i[ii]) - 1)) && $spell:valid(i[ii][1..$ - 2]))
msg = "Possible match: " + i[ii];
else
msg = "Unknown word: " + i[ii];
endif
if (length(text) == 1)
foo = ": ";
else
foo = (" (line " + tostr(linenumber)) + "): ";
endif
player:notify(tostr(dobj, ".", data, foo, msg));
endif
endfor
endif
endif
endfor
endfor
player:notify(tostr("Done spellchecking ", dobj, "."));
.
#88:25
"'@at' - Find out where everyone is. '@at <player>' - Find out where <player> is, and who else is there. '@at <obj>' - Find out who else is at the same place as <obj>. '@at <place>' - Find out who is at the place. The place can be given by number, or it can be a name from your @rooms list. '@at #-1' - Find out who is at #-1. '@at me' - Find out who is in the room with you. '@at home' - Find out who is at your home.";
this:internal_at(argstr);
.
#88:26
"'at_players ()' - Return a list of players to be displayed by @at.";
return connected_players();
.
#88:27
"'do_at_all ()' - List where everyone is, sorted by popularity of location. This is called when you type '@at'.";
locations = {};
parties = {};
counts = {};
for who in (this:at_players())
loc = who.location;
if (i = loc in locations)
parties[i] = setadd(parties[i], who);
counts[i] = counts[i] - 1;
else
locations = {@locations, loc};
parties = {@parties, {who}};
counts = {@counts, 0};
endif
endfor
locations = $list_utils:sort(locations, counts);
parties = $list_utils:sort(parties, counts);
this:print_at_items(locations, parties);
.
#88:28
"'do_at (<location>)' - List the players at a given location.";
loc = args[1];
party = {};
for who in (this:at_players())
if (who.location == loc)
party = setadd(party, who);
endif
endfor
this:print_at_items({loc}, {party});
.
#88:29
"'print_at_items (<locations>, <parties>)' - Print a list of locations and people, for @at. Override this if you want to make a change to @at's output that you can't make in :at_item.";
{locations, parties} = args;
for i in [1..length(locations)]
$command_utils:suspend_if_needed(0);
player:tell_lines(this:at_item(locations[i], parties[i]));
endfor
.
#88:30
"'at_item (<location>, <party>)' - Given a location and a list of the people there, return a string displaying the information. Override this if you want to change the format of each line of @at's output.";
{loc, party} = args;
su = $string_utils;
if (this.at_number)
number = su:right(tostr(loc), 7) + " ";
else
number = "";
endif
room = su:left(valid(loc) ? loc.name | "[Nowhere]", this.at_room_width);
if (length(room) > this.at_room_width)
room = room[1..this.at_room_width];
endif
text = (number + room) + " ";
if (party)
filler = su:space(length(text) - 2);
line = text;
text = {};
for who in (party)
name = " " + (valid(who) ? who.name | "[Nobody]");
if ((length(line) + length(name)) > this:linelen())
text = {@text, line};
line = filler + name;
else
line = line + name;
endif
endfor
text = {@text, line};
else
text = text + " [deserted]";
endif
return text;
.
#88:31
"'internal_at (<argument string>)' - Perform the function of @at. The argument string is whatever the user typed after @at. This is factored out so that other verbs can call it.";
where = $string_utils:trim(args[1]);
if (where)
if (where[1] == "#")
result = toobj(where);
if ((!valid(result)) && (result != #-1))
player:tell("That object does not exist.");
return;
endif
else
result = this:lookup_room(where);
if (!valid(result))
result = $string_utils:match_player(where);
if (!valid(result))
player:tell("That is neither a player nor a room name.");
return;
endif
endif
endif
if (valid(result) && (!$object_utils:isa(result, $room)))
result = result.location;
endif
this:do_at(result);
else
this:do_at_all();
endif
.
#88:32
"'confunc ()' - Besides the inherited behavior, notify the player's feature objects that the player has connected.";
if ((valid(cp = caller_perms()) && (caller != this)) && (!$perm_utils:controls(cp, this)))
return E_PERM;
endif
pass(@args);
set_task_perms(this);
for feature in (this.features)
try
feature:player_connected(player, @args);
except (E_VERBNF)
continue feature;
except id (ANY)
player:tell("Feature initialization failure for ", feature, ": ", id[2], ".");
endtry
$command_utils:suspend_if_needed(0);
endfor
.
#88:33
"'disfunc ()' - Besides the inherited behavior, notify the player's feature objects that the player has disconnected.";
if ((valid(cp = caller_perms()) && (caller != this)) && (!$perm_utils:controls(cp, this)))
return E_PERM;
endif
pass(@args);
"This is forked off to protect :disfunc from buggy :player_disconnected verbs.";
set_task_perms(this);
fork (max(0, $login:current_lag()))
for feature in (this.features)
try
feature:player_disconnected(player, @args);
except (ANY)
continue feature;
endtry
endfor
endfork
.
#88:34
set_task_perms(player);
if ((verb == "@adddict") && (!((player in $spell.trusted) || player.wizard)))
player:tell("You may not add to the master dictionary. The following words will instead by put in a list of words to be approved for later addition to the dictionary. Thanks for your contribution.");
endif
if (!argstr)
player:notify(tostr("Usage: ", verb, " one or more words"));
player:notify(tostr("       ", verb, " object:verb"));
player:notify(tostr("       ", verb, " object.prop"));
elseif (!$perm_utils:controls(player, player))
player:notify("Cannot modify dictionary on players who do not own themselves.");
elseif (data = $spell:get_input(argstr))
num_learned = 0;
for i in [1..length(data)]
line = $string_utils:words(data[i]);
for ii in [1..length(line)]
if (seconds_left() < 2)
suspend(0);
endif
if (verb == "@adddict")
result = $spell:add_word(line[ii]);
if (result == E_PERM)
if ($spell:find_exact(line[ii]) == $failed_match)
player:notify(tostr("Submitted for approval:  ", line[ii]));
$spell:submit(line[ii]);
else
player:notify(tostr("Already in dictionary:  " + line[ii]));
endif
elseif (typeof(result) == ERR)
player:notify(tostr(result));
elseif (result)
player:notify(tostr("Word added:  ", line[ii]));
num_learned = num_learned + 1;
else
player:notify(tostr("Already in dictionary:  " + line[ii]));
endif
elseif (!$spell:valid(line[ii]))
player.dict = listappend(player.dict, line[ii]);
player:notify(tostr("Word added:  ", line[ii]));
num_learned = num_learned + 1;
endif
endfor
endfor
player:notify(tostr(num_learned ? num_learned | "No", " word", (num_learned != 1) ? "s " | " ", "added to ", (verb == "@adddict") ? "main " | "personal ", "dictionary."));
endif
.
#88:35
"@spell a word or phrase  -- Spell check a word or phrase.";
"@spell thing.prop  -- Spell check a property. The value must be a string or a list of strings.";
"@spell thing:verb  -- Spell check a verb. Only the quoted strings in the verb are checked.";
"@cspell word  -- Spell check a word, and if it is not in the dictionary, offset suggestions about what the right spelling might be. This actually works with thing.prop and thing:verb too, but it is too slow to be useful--it takes maybe 30 seconds per unknown word.";
"@complete prefix  -- List all the word in the dictionary which begin with the given prefix. For example, `@complete zoo' lists zoo, zoologist, zoology, and zoom.";
"";
"Mr. Spell was written by waffle (waffle@euclid.humboldt.edu), for use by";
"MOOers all over this big green earth. (....and other places....)";
"This monstrosity programmed Sept-Oct 1991, when I should have been studying.";
set_task_perms(player);
if (!argstr)
if (verb == "@complete")
player:notify(tostr("Usage: ", verb, " word-prefix"));
else
player:notify(tostr("Usage: ", verb, " object.property"));
player:notify(tostr("       ", verb, " object:verb"));
player:notify(tostr("       ", verb, " one or more words"));
endif
elseif (verb == "@complete")
if ((foo = $string_utils:from_list($spell:sort($spell:find_all(argstr)), " ")) == "")
player:notify(tostr("No words found that begin with `", argstr, "'"));
else
player:notify(tostr(foo));
endif
else
"@spell or @cspell.";
corrected_words = {};
data = $spell:get_input(argstr);
if (data)
misspelling = 0;
for i in [1..length(data)]
line = $string_utils:words(data[i]);
for ii in [1..length(line)]
$command_utils:suspend_if_needed(0);
if (!$spell:valid(line[ii]))
if ((rindex(line[ii], "s") == length(line[ii])) && $spell:valid(line[ii][1..$ - 1]))
msg = "Possible match: " + line[ii];
msg = (msg + " ") + ((length(data) != 1) ? ("(line " + tostr(i)) + ")  " | "  ");
elseif ((rindex(line[ii], "'s") == (length(line[ii]) - 1)) && $spell:valid(line[ii][1..$ - 2]))
msg = "Possible match: " + line[ii];
msg = (msg + " ") + ((length(data) != 1) ? ("(line " + tostr(i)) + ")  " | "  ");
else
misspelling = misspelling + 1;
msg = ("Unknown word: " + line[ii]) + ((length(data) != 1) ? (" (line " + tostr(i)) + ")  " | "  ");
if ((verb == "@cspell") && (!(line[ii] in corrected_words)))
corrected_words = listappend(corrected_words, line[ii]);
guesses = $string_utils:from_list($spell:guess_words(line[ii]), " ");
if (guesses == "")
msg = msg + "-No guesses";
else
msg = msg + "-Possible correct spelling";
msg = msg + (index(guesses, " ") ? "s: " | ": ");
msg = msg + guesses;
endif
endif
endif
player:notify(tostr(msg));
endif
endfor
endfor
player:notify(tostr("Found ", misspelling ? misspelling | "no", " misspelled word", (misspelling == 1) ? "." | "s."));
elseif (data != $failed_match)
player:notify(tostr("Nothing found to spellcheck!"));
endif
endif
.
#88:36
set_task_perms(player);
if (argstr in player.dict)
player.dict = setremove(player.dict, argstr);
player:notify(tostr("`", argstr, "' removed from personal dictionary."));
else
player:notify(tostr("`", argstr, "' not found in personal dictionary."));
endif
.
#88:37
set_task_perms(player);
result = $spell:remove_word(argstr);
if (result == E_PERM)
player:notify("You may not remove words from the main dictionary. Use `@rmword' to remove words from your personal dictionary.");
elseif (typeof(result) == ERR)
player:notify(tostr(result));
elseif (result)
player:notify(tostr("`", argstr, "' removed."));
else
player:notify(tostr("`", argstr, "' not found in dictionary."));
endif
.
#88:38
"'find_property (<name>)' - Search for a property with the given name. The objects searched are those returned by this:find_properties_on(). The printing order relies on $list_utils:remove_duplicates to leave the *first* copy of each duplicated element in a list; for example, {1, 2, 1} -> {1, 2}, not to {2, 1}.";
name = args[1];
results = "";
objects = $list_utils:remove_duplicates(this:find_properties_on());
for thing in (objects)
if (valid(thing) && (mom = $object_utils:has_property(thing, name)))
results = ((((results + "   ") + thing.name) + "(") + tostr(thing)) + ")";
mom = this:property_inherited_from(thing, name);
if (thing != mom)
if (valid(mom))
results = ((((results + "--") + mom.name) + "(") + tostr(mom)) + ")";
else
results = results + "--built-in";
endif
endif
endif
endfor
if (results)
this:tell("The property .", name, " is on", results);
else
this:tell("The property .", name, " is nowhere to be found.");
endif
.
#88:39
"'find_verbs_on ()' -> list of objects - Return the objects that @find searches when looking for a verb. The objects are searched (and the results printed) in the order returned. Feature objects are included in the search. Duplicate entries are removed by the caller.";
return {this, this.location, @valid(this.location) ? this.location:contents() | {}, @this:contents(), @this.features};
.
#88:40
"'find_properties_on ()' -> list of objects - Return the objects that @find searches when looking for a property. The objects are searched (and the results printed) in the order returned. Feature objects are *not* included in the search. Duplicate entries are removed by the caller.";
return {this, this.location, @valid(this.location) ? this.location:contents() | {}, @this:contents()};
.
#88:41
"'property_inherited_from (<object>, <property name>)' -> object - Return the ancestor of <object> on which <object>.<property> is originally defined. If <object>.<property> is not actually defined, return 0. The property is taken as originally defined on the earliest ancestor of <object> which has it. If the property is built-in, return $nothing.";
{what, prop} = args;
if (!$object_utils:has_property(what, prop))
return 0;
elseif (prop in $code_utils.builtin_props)
return $nothing;
endif
ancestor = what;
while ($object_utils:has_property(parent(ancestor), prop))
ancestor = parent(ancestor);
endwhile
return ancestor;
.
#88:42
"'@refuse <action(s)> [ from <player> ] [ for <time> ]' - Refuse all of a list of one or more actions. If a player is given, refuse actions from the player; otherwise, refuse all actions. If a time is specified, refuse the actions for the given amount of time; otherwise, refuse them for a week. If the actions are already refused, then the only their times are adjusted.";
if (!argstr)
player:tell("@refuse <action(s)> [ from <player> ] [ for <time> ]");
return;
endif
stuff = this:parse_refuse_arguments(argstr);
if (stuff)
if (((typeof(who = stuff[1]) == OBJ) && (who != $nothing)) && (!is_player(who)))
player:tell("You must give the name of some player.");
else
"'stuff' is now in the form {<origin>, <actions>, <duration>}.";
if ((stuff[3] < 0) || (stuff[3] > (($maxint - time()) - 2)))
stuff[3] = ($maxint - time()) - 2;
player:tell("That amount of time is too large.  It has been capped at ", $time_utils:english_time(stuff[3]), ".");
endif
this:add_refusal(@stuff);
player:tell("Refusal of ", this:refusal_origin_to_name(stuff[1]), " for ", $time_utils:english_time(stuff[3]), " added.");
endif
endif
.
#88:43
"'@unrefuse <action(s)> [ from <player> ]' - Stop refusing all of a list of actions. If a player is given, stop refusing actions by the player; otherwise, stop refusing all actions of the given kinds. '@unrefuse everything' - Remove all refusals.";
if (argstr == "everything")
if ($command_utils:yes_or_no("Do you really want to erase all your refusals?"))
this:clear_refusals();
player:tell("OK, they are gone.");
else
player:tell("OK, no harm done.");
endif
return;
endif
stuff = this:parse_refuse_arguments(argstr);
if (!stuff)
return;
endif
"'stuff' is now in the form {<origin>, <actions>, <duration>}.";
origins = stuff[1];
actions = stuff[2];
if (typeof(origins) != LIST)
origins = {origins};
endif
n = 0;
for origin in (origins)
n = n + this:remove_refusal(origin, actions);
endfor
plural = ((n == 1) && (length(origins) == 1)) ? "" | "s";
if (n)
player:tell("Refusal", plural, " removed.");
else
player:tell("You have no such refusal", plural, ".");
endif
.
#88:44
"'@refusals' - List your refusals. '@refusals for <player>' - List the given player's refusals.";
if (iobjstr)
who = $string_utils:match_player(iobjstr);
if ($command_utils:player_match_failed(who, iobjstr))
return;
endif
if (!$object_utils:has_verb(who, "refusals_text"))
player:tell("That player does not have the refusal facility.");
return;
endif
else
who = player;
endif
who:remove_expired_refusals();
player:tell_lines(this:refusals_text(who));
.
#88:45
"'@refusal-reporting' - See if refusal reporting is on. '@refusal-reporting on', '@refusal-reporting off' - Turn it on or off..";
if (!argstr)
player:tell("Refusal reporting is ", this.report_refusal ? "on" | "off", ".");
elseif (argstr in {"on", "yes", "y", "1"})
this.report_refusal = 1;
player:tell("Refusals will be reported to you as they happen.");
elseif (argstr in {"off", "no", "n", "0"})
this.report_refusal = 0;
player:tell("Refusals will happen silently.");
else
player:tell("@refusal-reporting on     - turn on refusal reporting");
player:tell("@refusal-reporting off    - turn it off");
player:tell("@refusal-reporting        - see if it's on or off");
endif
.
#88:46
"'parse_refuse_arguments (<string>)' -> {<who>, <actions>, <duration>} - Parse the arguments of a @refuse or @unrefuse command. <who> is the player requested, or $nothing if none was. <actions> is a list of the actions asked for. <duration> is how long the refusal should last, or 0 if no expiration is given. <errors> is a list of actions (or other words) which are wrong. If there are any errors, this prints an error message and returns 0.";
words = $string_utils:explode(args[1]);
possible_actions = this:refusable_actions();
who = $nothing;
actions = {};
until = this.default_refusal_time;
errors = {};
skip_to = 0;
for i in [1..length(words)]
word = words[i];
if (i <= skip_to)
elseif (which = $string_utils:find_prefix(word, possible_actions))
actions = setadd(actions, possible_actions[which]);
elseif ((word[$] == "s") && (which = $string_utils:find_prefix(word[1..$ - 1], possible_actions)))
"The word seems to be the plural of an action.";
actions = setadd(actions, possible_actions[which]);
elseif (results = this:translate_refusal_synonym(word))
actions = $set_utils:union(actions, results);
elseif ((word == "from") && (i < length(words)))
"Modified to allow refusals from all guests at once. 5-27-94, Gelfin";
if (words[i + 1] == "guests")
who = "all guests";
elseif (!(typeof(who = $code_utils:toobj(words[i + 1])) == OBJ))
who = $string_utils:match_player(words[i + 1]);
if ($command_utils:player_match_failed(who, words[i + 1]))
return 0;
endif
endif
skip_to = i + 1;
elseif ((word == "for") && (i < length(words)))
n_words = this:parse_time_length(words[i + 1..$]);
until = this:parse_time(words[i + 1..i + n_words]);
if (!until)
return 0;
endif
skip_to = i + n_words;
else
errors = {@errors, word};
endif
endfor
if (errors)
player:tell((length(errors) > 1) ? "These parts of the command were not understood: " | "This part of the command was not understood: ", $string_utils:english_list(errors, 0, " ", " ", " "));
return 0;
endif
return {this:player_to_refusal_origin(who), actions, until};
.
#88:47
"'time_word_to_seconds (<string>)' - The <string> is expected to be a time word, 'second', 'minute', 'hour', 'day', 'week', or 'month'. Return the number of seconds in that amount of time (a month is taken to be 30 days). If <string> is not a time word, return 0. This is used both as a test of whether a word is a time word and as a converter.";
return $time_utils:parse_english_time_interval("1", args[1]);
.
#88:48
"'parse_time_length (<words>)' -> n - Given a list of words which is expected to begin with a time expression, return how many of them belong to the time expression. A time expression can be a positive integer, a time word, or a positive integer followed by a time word. A time word is anything that this:time_word_to_seconds this is one. The return value is 0, 1, or 2.";
words = {@args[1], "dummy"};
n = 0;
if (toint(words[1]) || this:time_word_to_seconds(words[1]))
n = 1;
endif
if (this:time_word_to_seconds(words[n + 1]))
n = n + 1;
endif
return n;
.
#88:49
"'parse_time (<words>)' -> <seconds> - Given a list of zero or more words, either empty or a valid time expression, return the number of seconds that the time expression refers to. This is a duration, not an absolute time.";
words = args[1];
"If the list is empty, return the default refusal time.";
if (!words)
return this.default_refusal_time;
endif
"If the list has one word, either <units> or <n>.";
"If it is a unit, like 'hour', return the time for 1 <unit>.";
"If it is a number, return the time for <n> days.";
if (length(words) == 1)
return this:time_word_to_seconds(words[1]) || (toint(words[1]) * this:time_word_to_seconds("days"));
endif
"The list must contain two words, <n> <units>.";
return toint(words[1]) * this:time_word_to_seconds(words[2]);
.
#88:50
"'clear_refusals ()' - Erase all of this player's refusals.";
if ((caller != this) && (!$perm_utils:controls(caller_perms(), this)))
return E_PERM;
endif
this.refused_origins = {};
this.refused_actions = {};
this.refused_until = {};
this.refused_extra = {};
.
#88:51
"'set_default_refusal_time (<seconds>)' - Set the length of time that a refusal lasts if its duration isn't specified.";
if ((caller != this) && (!$perm_utils:controls(caller_perms(), this)))
return E_PERM;
endif
this.default_refusal_time = toint(args[1]);
.
#88:52
"'refusable_actions ()' -> {'page', 'whisper', ...} - Return a list of the actions that can be refused. This is a verb, rather than a property, so that it can be inherited properly. If you override this verb to add new refusable actions, write something like 'return {@pass (), 'action1', 'action2', ...}'. That way people can add new refusable actions at any level of the player class hierarchy, without clobbering any that were added higher up.";
return {"page", "whisper", "move", "join", "accept", "mail"};
.
#88:53
"'translate_refusal_synonym (<word>)' -> list - If the <word> is a synonym for some set of refusals, return the list of those refusals. Otherwise return the empty list, {}. Programmers can override this verb to provide more synonyms.";
word = args[1];
if (word == "all")
return this:refusable_actions();
endif
return {};
.
#88:54
"'default_refusals_text_filter (<origin>, <actions>)' - Return any actions by this <origin> which should be included in the text returned by :refusals_text. This is the default filter, which includes all actions.";
return args[2];
.
#88:55
"'refusals_text (<player>, [<filter verb name>])' - Return text describing the given player's refusals. The filter verb name is optional; if it is given, this verb takes an origin and a list of actions and returns any actions which should be included in the refusals text. This verb works only if <player> is a player who has the refusals facility; it does not check for this itself.";
who = args[1];
"Used to allow you to supply the filter verb name, but that introduced a security hole. --Nosredna";
filter_verb = "default_refusals_text_filter";
text = {};
for i in [1..length(who.refused_origins)]
origin = who.refused_origins[i];
actions = this:(filter_verb)(origin, who.refused_actions[i]);
if (actions)
line = "";
for action in (actions)
line = (line + " ") + action;
endfor
line = (this:refusal_origin_to_name(origin) + ": ") + line;
line = (ctime(who.refused_until[i]) + " ") + line;
text = {@text, line};
endif
endfor
if (!text)
text = {"No refusals."};
endif
return text;
.
#88:56
"'player_to_refusal_origin (<player>)' -> <origin> - Convert a player to a unique identifier called the player's 'refusal origin'. For most players, it's just their object number. For guests, it is a hash of the site they are connecting from. Converting an origin to an origin is a safe no-op--the code relies on this.";
set_task_perms(caller_perms());
{who} = args;
if (((typeof(who) == OBJ) && valid(who)) && (parent(who) == `$local.guest ! E_PROPNF, E_INVIND => $guest'))
return who:connection_name_hash("xx");
else
return who;
endif
.
#88:57
"'refusal_origin_to_name (<origin>)' -> string - Convert a refusal origin to a name.";
origin = args[1];
if (origin in {"all guests", "everybody"})
return origin;
elseif ((typeof(origin) == STR) && (origin == "Permission denied"))
return "an errorful origin";
elseif (typeof(origin) != OBJ)
return "a certain guest";
elseif (origin == #-1)
return "Everybody";
else
return $string_utils:name_and_number(origin);
endif
.
#88:58
"'check_refusal_actions (<actions>)' - Check a list of refusal actions, and return whether they are all legal.";
actions = args[1];
legal_actions = this:refusable_actions();
for action in (actions)
if (!(action in legal_actions))
return 0;
endif
endfor
return 1;
.
#88:59
"'add_refusal (<origin>, <actions> [, <duration> [, <extra>]])' - Add refusal(s) to this player's list. <Actions> is a list of the actions to be refused. The list should contain only actions, no synonyms. <Origin> is the actor whose actions are to be refused. <Until> is the time that the actions are being refused until, in the form returned by time(). It is optional; if it's not given, it defaults to .default_refusal_time. <Extra> is any extra information; it can be used for comments, or to make finer distinctions about the actions being refused, or whatever. If it is not given, it defaults to 0. The extra information is per-action; that is, it is stored separately for each action that it applies to.";
if (caller != this)
return E_PERM;
endif
{orig, actions, ?duration = this.default_refusal_time, ?extra = 0} = args;
origins = this:player_to_refusal_origin(orig);
if (typeof(origins) != LIST)
origins = {origins};
endif
if (typeof(actions) != LIST)
actions = {actions};
endif
if (!this:check_refusal_actions(actions))
return E_INVARG;
endif
until = time() + duration;
for origin in (origins)
if (i = origin in this.refused_origins)
this.refused_until[i] = until;
for action in (actions)
if (j = action in this.refused_actions[i])
this.refused_extra[i][j] = extra;
else
this.refused_actions[i] = {@this.refused_actions[i], action};
this.refused_extra[i] = {@this.refused_extra[i], extra};
endif
endfor
else
this.refused_origins = {@this.refused_origins, origin};
this.refused_actions = {@this.refused_actions, actions};
this.refused_until = {@this.refused_until, until};
this.refused_extra = {@this.refused_extra, $list_utils:make(length(actions), extra)};
endif
endfor
.
#88:60
"'remove_refusal (<origin>, <actions>)' - Remove any refused <actions> by <origin>. The <actions> list should contain only actions, no synonyms. Return the number of such refusals found (0 if none).";
if (caller != this)
return E_PERM;
endif
{origin, actions} = args;
if (typeof(actions) != LIST)
actions = {actions};
endif
count = 0;
i = origin in this.refused_origins;
if (i)
for action in (actions)
if (j = action in this.refused_actions[i])
this.refused_actions[i] = listdelete(this.refused_actions[i], j);
this.refused_extra[i] = listdelete(this.refused_extra[i], j);
count = count + 1;
endif
endfor
if (!this.refused_actions[i])
this.refused_origins = listdelete(this.refused_origins, i);
this.refused_actions = listdelete(this.refused_actions, i);
this.refused_until = listdelete(this.refused_until, i);
this.refused_extra = listdelete(this.refused_extra, i);
endif
endif
return count;
.
#88:61
"'remove_expired_refusals ()' - Remove refusal entries which are past their time limits.";
origins = {};
"Before removing any refusals, figure out which ones to remove. Removing one changes the indices and invalidates the loop invariant.";
for i in [1..length(this.refused_origins)]
if ((time() >= this.refused_until[i]) || ((typeof(this.refused_origins[i]) == OBJ) && (!$recycler:valid(this.refused_origins[i]))))
origins = {@origins, this.refused_origins[i]};
endif
endfor
for origin in (origins)
this:remove_refusal(origin, this:refusable_actions());
endfor
.
#88:62
"'refuses_action (<origin>, <action>, ...)' - Return whether this object refuses the given <action> by <origin>. <Origin> is typically a player. Extra arguments after <origin>, if any, are used to further describe the action.";
"Modified by Diopter (#98842) at LambdaMOO";
{origin, action, @extra_args} = args;
extra_args = {origin, @extra_args};
rorigin = this:player_to_refusal_origin(origin);
if (((which = rorigin in this.refused_origins) && (action in this.refused_actions[which])) && this:("refuses_action_" + action)(which, @extra_args))
return 1;
elseif (((((typeof(rorigin) == OBJ) && valid(rorigin)) && (which = rorigin.owner in this.refused_origins)) && (action in this.refused_actions[which])) && this:("refuses_action_" + action)(which, @extra_args))
return 1;
elseif ((((which = $nothing in this.refused_origins) && (rorigin != this)) && (action in this.refused_actions[which])) && this:("refuses_action_" + action)(which, @extra_args))
return 1;
elseif ((((which = "all guests" in this.refused_origins) && $object_utils:isa(origin, $guest)) && (action in this.refused_actions[which])) && this:("refuses_action_" + action)(which, @extra_args))
return 1;
endif
return 0;
.
#88:63
"'refuses_action_* (<which>, <origin>, ...)' - The action (such as 'whisper' for the verb :refuses_action_whisper) is being considered for refusal. Return whether the action should really be refused. <Which> is an index into this.refused_origins. By default, always refuse non-outdated actions that get this far.";
{which, @junk} = args;
if (time() >= this.refused_until[which])
fork (0)
"This <origin> is no longer refused. Remove any outdated refusals.";
this:remove_expired_refusals();
endfork
return 0;
else
return 1;
endif
.
#88:64
"'report_refusal (<player>, <message>, ...)' - If refusal reporting is turned on, print the given <message> to report the refusal of some action by <player>. The message may take more than one argument. You can override this verb to do more selective reporting.";
if (this.report_refusal)
this:tell(@listdelete(args, 1));
endif
.
#88:65
"'whisper <message> to <this player>' - Whisper a message to this player which nobody else can see.";
if (this:refuses_action(player, "whisper"))
player:tell(this:whisper_refused_msg());
this:report_refusal(player, "You just refused a whisper from ", player.name, ".");
else
pass(@args);
endif
.
#88:66
"'receive_page (<message>)' - Receive a page. If the page is accepted, pass(@args) shows it to the player.";
if (this:refuses_action(player, "page"))
this.page_refused = task_id();
return 0;
endif
this.page_refused = 0;
return pass(@args);
.
#88:67
"'page_echo_msg ()' - Return a message to inform the pager what happened to their page.";
if (task_id() == this.page_refused)
this:report_refusal(player, "You just refused a page from ", player.name, ".");
return this:page_refused_msg();
else
return pass(@args);
endif
.
#88:68
"'moveto (<destination>)', 'accept (<object>)' - Check whether this :moveto or :accept is allowed or refused. If it is allowed, do it. This code is slightly modified from an original verb by Grump.  Upgraded by Bits to account for forthcoming 1.8.0 behavior of callers().";
by = callers();
"Ignore all the verbs on this.";
while (((y = by[1])[1] == this) && (y[2] == verb))
by = listdelete(by, 1);
endwhile
act = (verb == "moveto") ? "move" | "accept";
if ((player != this) && this:refuses_action(player, act, args[1]))
"check player";
return 0;
endif
last = #-1;
for k in (by)
if ((((perms = k[3]) == #-1) && (k[2] != "")) && (k[1] == #-1))
elseif ((!perms.wizard) && (perms != this))
if (perms != last)
"check for possible malicious programmer";
if (this:refuses_action(perms, act, args[1]))
return 0;
endif
last = perms;
endif
endif
endfor
"Coded added 11/8/98 by TheCat, to refuse spurned objects.";
if ((act == "accept") && (typeof(this.spurned_objects) == LIST))
for item in (this.spurned_objects)
if ($object_utils:isa(args[1], item))
return 0;
endif
endfor
endif
"(end of code added by TheCat)";
return pass(@args);
.
#88:69
"'receive_message (<message>, <sender>)' - Receive the given mail message from the given sender. This version handles refusal of the message.";
if ((!$perm_utils:controls(caller_perms(), this)) && (caller != this))
return E_PERM;
elseif (this:refuses_action(args[2], "mail"))
return this:mail_refused_msg();
else
return pass(@args);
endif
.
#88:70
"'whisper_refused_msg()', 'page_refused_msg()', etc. - Return a message string.";
return $string_utils:pronoun_sub(this.(verb), this);
.
#88:71
set_task_perms(caller_perms());
if (pass(@args))
return 1;
endif
{verb, args} = args;
if (valid(dobj = $string_utils:literal_object(dobjstr)) && (r = $match_utils:match_verb(verb, dobj, args)))
return r;
elseif (valid(iobj = $string_utils:literal_object(iobjstr)) && (r = $match_utils:match_verb(verb, iobj, args)))
return r;
else
return 0;
endif
.
#88:72
":ping_features()";
" -- cleans up the .features list to remove !valid objects";
" ==> cleaned-up .features list";
features = this.features;
for x in (features)
if (!$recycler:valid(x))
features = setremove(features, x);
endif
endfor
return this.features = features;
.
#88:73
":set_owned_objects( LIST owned-objects list )";
"  -- set your .owned_objects, ordered as you please";
"  -- no, it will NOT let you set to to anything you want";
if ((caller == this) || $perm_utils:controls(caller_perms(), this))
new = args[1];
old = this.owned_objects;
"make sure they're the same";
if (length(new) != length(old))
return E_INVARG;
endif
for i in (new)
old = setremove(old, i);
endfor
if (old)
"something's funky";
return E_INVARG;
endif
return this.owned_objects = new;
else
return E_PERM;
endif
.
#88:74
if (caller_perms().wizard)
pass(@args);
if ($code_utils:verb_location() == this)
this.rooms = {};
else
clear_property(this, "rooms");
endif
this.features = {$pasting_feature, $stage_talk};
endif
.
#88:75
"'find_help (<name>[, databases])'";
"Search for a help topic with the given name. [<databases>] defaults to the ones returned by $code_utils:help_db_list().";
{name, ?databases = $code_utils:help_db_list()} = args;
if (!name)
this:tell("What topic do you want to search for?");
elseif (result = $code_utils:help_db_search(name, databases))
{object, realname} = result;
if (object == $ambiguous_match)
this:tell("The help topic \"", name, "\" could refer to any of the following:  ", $string_utils:english_list(realname));
elseif (((object == $help) && (!$object_utils:has_property(object, realname))) && valid(o = $string_utils:match_object(name, player.location)))
if ($object_utils:has_callable_verb(o, "help_msg"))
this:tell("That help topic was returned by ", $string_utils:nn(o), ":help_msg().");
elseif ($object_utils:has_property(o, "help_msg"))
this:tell("That help topic is located in ", $string_utils:nn(o), ".help_msg.");
else
this:tell("That help topic was matched by $help but there doesn't seem to be any help available for it.");
endif
elseif (object == $verb_help)
if (((what = $code_utils:parse_verbref(realname)) && valid(what[1] = $string_utils:match_object(what[1], player.location))) && $object_utils:has_verb(@what))
this:tell("That help topic is located at the beginning of the verb ", $string_utils:nn(what[1]), ":", what[2], ".");
else
this:tell("That help topic was matched by $verb_help but there doesn't seem to be any help available for it.");
endif
else
where = {};
for x in (databases)
if ({realname} == x:find_topics(realname))
where = setadd(where, x);
endif
endfor
asname = (name == realname) ? "" | ((" as \"" + realname) + "\"");
if (where)
this:tell("That help topic is located on ", $string_utils:nn(where), asname, ".");
else
"...this shouldn't happen unless $code_utils:help_db_search finds a match we weren't expecting";
this:tell("That help topic appears to be located on ", $string_utils:nn(object), asname, ", although this command could not find it.");
endif
endif
else
this:tell("The help topic \"", name, "\" could not be found.");
endif
.
#88:76
"Prevent an object or any of its descendents from going into your inventory, regardless of whose player perms sent it there.";
"Syntax:  @spurn <object>";
"         @spurn !<object>";
"The second form removes an object from your list of spurned objects.";
"Verb created by TheCat, 11/8/98";
if (caller != this)
return E_PERM;
endif
if (!argstr)
this:tell("Spurn what?");
elseif (argstr[1] == "!")
"Stop spurning something.";
item = this:my_match_object(argstr[2..$]);
if (item in this.spurned_objects)
this.spurned_objects = $list_utils:setremove_all(this.spurned_objects, item);
this:tell(("You are no longer spurning " + $string_utils:nn(item)) + " or any kids of it.");
else
this:tell(("You are not spurning " + $string_utils:nn(item)) + ".");
endif
else
"Spurn something.";
item = this:my_match_object(argstr);
if (!$command_utils:object_match_failed(item, argstr))
if (item in this.spurned_objects)
this:tell(("You are already spurning " + $string_utils:nn(item)) + " plus any and all kids of it.");
else
this.spurned_objects = setadd(this.spurned_objects, item);
this:tell(("You are now spurning " + $string_utils:nn(item)) + " plus any and all kids of it.");
endif
endif
endif
.
#88:77
"Displays a list of spurned objects.";
"Verb created by TheCat, 11/8/98";
if (this.spurned_objects)
this:tell("You are spurning the following objects, including any and all descendents:  " + $string_utils:nn(this.spurned_objects));
else
this:tell("You are not spurning any objects.");
endif
.
#88:78
"Permits programmatic setting of .spurned_objects, which is -c.";
{spurned_objects} = args;
if ($perm_utils:controls(caller_perms(), this))
"Note, the final result must be a list of objects, otherwise there's no point.";
if (typeof(spurned_objects) != LIST)
spurned_objects = {spurned_objects};
endif
this.spurned_objects = spurned_objects;
endif
.
#88:79
"Copied from Roebare (#109000):@submitted at Sat Feb 26 19:41:37 2005 PST";
"Usage: @addsubmitted => Process submissions to the global spelling dictionary";
"       @rmsubmitted  => Reject a submission";
"       @submitted    => Review outstanding submissions";
if (!((player in $spell.trusted) || player.wizard))
return player:tell("You may not process submissions to the master dictionary.");
endif
"...clean-up first...";
$spell.submitted = pending = $list_utils:remove_duplicates($spell.submitted);
"...nothing to do...";
if (!pending)
return player:notify("No submissions to the global spelling dictionary are pending.");
endif
"...do the work...";
if (!(cmd = verb[2..index(verb, "submitted") - 1]))
player:notify(tostr("The following ", length($spell.submitted), " words have been submitted to the master dictionary and await approval:"));
player:notify_lines($string_utils:columnize($list_utils:sort($spell.submitted), abs(player.linelen) / (length($list_utils:longest($spell.submitted)) + 1)));
elseif (cmd == "add")
player:notify(tostr("A total of ", length($spell.submitted), " words have been submitted to the master dictionary and await approval."));
if ($command_utils:yes_or_no("Do you wish to review the list first?"))
return player:notify_lines($string_utils:columnize($list_utils:sort($spell.submitted), abs(player.linelen) / (length($list_utils:longest($spell.submitted)) + 1)));
else
num_learned = num_skipped = num_errors = num_rejects = 0;
if ($command_utils:yes_or_no("Do you wish to process each word individually? Recommended, but may take a couple minutes."))
for candidate in ($spell.submitted)
$command_utils:suspend_if_needed(0);
if (!$command_utils:yes_or_no(tostr("Submitted: `", candidate, "'. Add this word?")))
num_skipped = num_skipped + 1;
player:notify(tostr("The word `", candidate, "' was skipped."));
else
if (result = $spell:add_word(candidate))
player:notify(tostr("Word added: ", candidate));
num_learned = num_learned + 1;
$spell.submitted = setremove($spell.submitted, candidate);
elseif (result == E_PERM)
return player:notify("Permissions error. Command cancelled.");
elseif (typeof(result) == ERR)
num_errors = num_errors + 1;
player:notify(tostr(result));
else
player:notify(tostr("Already in dictionary: ", candidate));
num_rejects = num_rejects + 1;
$spell.submitted = setremove($spell.submitted, candidate);
endif
endif
if ($command_utils:yes_or_no(tostr("Remove `", candidate, "' from the submission list?")))
$spell.submitted = setremove($spell.submitted, candidate);
player:notify(tostr("The word `", candidate, "' has been removed."));
endif
if (!$command_utils:yes_or_no("Continue on to the next word?"))
return player:notify_lines({"Command aborted.", tostr(" ", num_learned, " words added"), tostr(" ", num_skipped, " words skipped"), tostr(" ", num_errors, " words errored"), tostr(" ", num_rejects, " words rejected")});
endif
endfor
player:notify_lines({"End of submissions.", tostr(" ", num_learned, " words added"), tostr(" ", num_skipped, " words skipped"), tostr(" ", num_errors, " words errored"), tostr(" ", num_rejects, " words rejected")});
else
if ($command_utils:yes_or_no("Last chance. Do you wish to cancel?"))
return player:notify(tostr("Command cancelled. ", $network.MOO_name, "'s lexicographers thank you."));
else
for candidate in ($spell.submitted)
$command_utils:suspend_if_needed(0);
result = $spell:add_word(candidate);
if (result)
num_learned = num_learned + 1;
player:notify(tostr("Word added: ", candidate));
else
num_errors = num_errors + 1;
player:notify(tostr(result));
player:notify(tostr("The word `", candidate, "' was not added."));
endif
endfor
player:notify_lines({"End of submissions.", tostr(" ", num_learned, " words added"), tostr(" ", num_errors, " words errored"), ""});
if ($command_utils:yes_or_no("Clear the submission list?"))
"...framing required for `-' call...";
"$spell:(\"clear-submitted\")()";
"...incomplete perms check, do it the long way...";
$spell.submitted = {};
player:notify("List cleared.");
else
player:notify("List unchanged. Please review and prune the submission list manually.");
endif
endif
endif
endif
elseif (cmd == "rm")
player:tell("Which word do you want removed from the submission list?");
if ((reject = $command_utils:read()) in $spell.submitted)
$spell.submitted = setremove($spell.submitted, reject);
player:notify(tostr("The word `", reject, "' was rejected from the submission list."));
else
player:notify(tostr("The word `", reject, "' was not found in the submission list."));
endif
endif
"Created Sat Feb 19 16:57:27 2005 PST, by CherLouis (#109000).";
"Last modified Sat Feb 26 09:46:36 2005 PST, by CherLouis (#109000).";
.
#89:0
"Say something out loud, directed at someone or something.";
"Usage:";
"  `target message";
"Example:";
"  Munchkin is talking to Kenneth, who's in the same room with him.  He types:";
"      `kenneth What is the frequency?";
"  The room sees:";
"       Munchkin [to Kenneth]: What is the frequency?";
name = verb[2..$];
who = player.location:match_object(name);
if ($command_utils:object_match_failed(who, name))
return;
endif
player.location:announce_all(player.name, " [to ", who.name, "]: ", argstr);
.
#89:1
"Say something out loud, in some specific way.";
"Usage:";
"  [how]: message";
"Example:";
"  Munchkin decideds to sing some lyrics.  He types:";
"      [sings]: I am the eggman";
"  The room sees:";
"      Munchkin [sings]: I am the eggman";
player.location:announce_all((((player.name + " ") + verb) + " ") + argstr);
.
#89:2
"Perform some physical, non-verbal, action.";
"Usage:";
"  ]third person action";
"Example:";
"  Munchkin has annoyed some would-be tough guy.  He types:";
"      ]hides behind the reactor.";
"  The room sees:";
"      [Munchkin hides behind the reactor.]";
player.location:announce_all("[", (((player.name + " ") + verb[2..$]) + (argstr ? " " + argstr | "")) + "]");
.
#89:3
name = verb[2..$];
argstr = $code_utils:argstr(verb, args, argstr);
player.location:announce_all(player.name, " [", name, "]: ", argstr);
.
#89:4
"Point to yourself.";
"Usage:";
"  <message";
"Example:";
"  Muchkin decides he's being strange. He types:";
"    <being strange.";
"  The room sees:";
"    Munchkin <- being strange.";
player.location:announce_all((((player.name + " <- ") + verb[2..$]) + " ") + argstr);
.
#90:0
"Usage: @paste <prefix> <suffix>";
"Announce a series of entered lines to the room the player is in.";
"Before the lines are quoted, player.paste_header is run through";
"$string_utils:pronoun_sub(), and if the result contains the player's";
"name, it is used as a header.  Otherwise player.name centered in a";
"line of dashes is used.";
"A footer comes afterwards, likewise derived from player.paste_footer.";
"<prefix> and <suffix> are placed before and after each line.";
"";
"This verb is, as one might guess, designed for pasting text to MOO using";
"GnuEmacs or a windowing system.  You should remember that after you";
"have pasted the lines in, you must type . on a line by itself, or you'll";
"sit around waiting for $command_utils:read_lines() to finish _forever_.";
{?prefix = "", ?suffix = ""} = args;
lines = $command_utils:read_lines();
header = $string_utils:pronoun_sub_secure($code_utils:verb_or_property(player, "paste_header"), "") || $string_utils:center(player.name, 75, "-");
to_tell = {header};
for line in (lines)
to_tell = listappend(to_tell, (prefix + line) + suffix);
endfor
to_tell = listappend(to_tell, $string_utils:pronoun_sub_secure($code_utils:verb_or_property(player, "paste_footer"), "") || $string_utils:center("finished", 75, "-"));
for thing in (player.location.contents)
$command_utils:suspend_if_needed(0);
thing:tell_lines(to_tell);
endfor
player:tell("Done @pasting.");
.
#90:1
"Echo a line prefaced by a vertical bar.";
"Usage:";
"  |message";
"Example:";
"  Hacker wants to echo to the room what he just saw. He enters (either by hand, or with Emacs or a windowing system):";
"      |Haakon has disconnected.";
"  The room sees:";
"      Hacker | Haakon has disconnected.";
player.location:announce_all((((player.name + " | ") + verb[2..$]) + " ") + argstr);
.
#90:2
"Syntax: @paste-to <player>";
"";
"Which will then prompt you for the lines to privately send to <player>. The lines will be surrounded by a default footer and header.";
target = $string_utils:match_player(dobjstr);
$command_utils:player_match_result(target, dobjstr);
if (!valid(target))
return;
endif
prefix = "";
suffix = "";
lines = $command_utils:read_lines();
to_tell = {$string_utils:center("Private message from " + player.name, 75, "-")};
for line in (lines)
to_tell = listappend(to_tell, (prefix + line) + suffix);
endfor
to_tell = listappend(to_tell, $string_utils:center("end message", 75, "-"));
target:tell_lines(to_tell);
player:tell("Done @pasting.");
.
#91:0
":vector_add(V1 [,V2 ...]) => VN such that VN[n] = V1[n] + V2[n]...";
":vector_sub(V1 [,V2 ...]) => VN such that VN[n] = V1[n] - V2[n]...";
":vector_mul(V1 [,V2 ...]) => VN such that VN[n] = V1[n] * V2[n]...";
":vector_div(V1 [,V2 ...]) => VN such that VN[n] = V1[n] / V2[n]...";
"Vectors do not need to be the same length, but they should be. VN's length will be the length of the longest vector in the arguments. :vector_add and :vector_sub will pad out the smaller vectors with 0's or 0.0's. :vector_mul and :vector_div will pad out the smaller vectors with 1's or 1.0's. Vectors do not need to contain homogeneous data, but the nth term of each vector must be of the same type.";
"I can see a reason for wanting to do vector addition or subtraction, but multiplication and divareion is usually handled in other ways. I've included them here for novelty, and becuase it was easy enough to do.";
"";
"Vector addition is used when two or more similar vector quantities are at work and need to be resolved into a single vector. For instance, a ship travelling in a current will be acted upon by (at least) two forces: a force propelling it forward (its engine), and a force pushing it off course (the current). The sum of these two forces gives the resultant net force acting upon the ship and, since Force = Mass * Acceleration, the direction the ship is accelerating.";
"";
"Vector subtraction can be used to reverse the process of vector addition. In the ship problem above, let's say the actual resultant force is known, but it does not match the result of adding the propelling force and the drifting force. Friction is probably acting against the motion of the ship. Subtracting the computed resultant force from the known net force will yield the frictional force acting against the progress of the ship.";
"";
"Vector multiplication and division do not have RL examples, but vector multiplication of this type makes computing the dot product of two vectors simple.";
"";
if (length(args) == 1)
return args;
elseif (!args)
return raise(E_INVARG);
endif
type = verb[$ - 2..$];
lresult = max = length(args[1]);
results = args[1];
for n in [2..length(args)]
$command_utils:suspend_if_needed(0);
if (type == "add")
for m in [1..min(lcurr = length(args[n]), lresult)]
results[m] = results[m] + args[n][m];
$command_utils:suspend_if_needed(0);
endfor
if (lcurr > lresult)
results[lresult + 1..lcurr] = args[n][lresult + 1..lcurr];
endif
elseif (type == "sub")
for m in [1..min(lcurr = length(args[n]), lresult)]
results[m] = results[m] - args[n][m];
$command_utils:suspend_if_needed(0);
endfor
if (lcurr > lresult)
for m in [lresult + 1..lcurr]
results = {@results, -args[n][m]};
$command_utils:suspend_if_needed(0);
endfor
endif
elseif (type == "mul")
for m in [1..min(lcurr = length(args[n]), lresult)]
results[m] = results[m] * args[n][m];
$command_utils:suspend_if_needed(0);
endfor
if (lcurr > lresult)
results[lresult + 1..lcurr] = args[n][lresult + 1..lcurr];
endif
else
for m in [1..min(lcurr = length(args[n]), lresult)]
results[m] = results[m] / args[n][m];
$command_utils:suspend_if_needed(0);
endfor
if (lcurr > lresult)
for m in [lresult + 1..lcurr]
results = {@results, (typeof(foo = args[n][m]) == INT) ? 1 / foo | (1.0 / foo)};
$command_utils:suspend_if_needed(0);
endfor
endif
endif
endfor
return results;
.
#91:1
":matrix_add(M1 [, M2 ...]) => MN such that MN[m][n] = M1[m][n] + M2[m][n]...";
":matrix_sub(M1 [, M2 ...]) => MN such that MN[m][n] = M1[m][n] - M2[m][n]...";
"Matrices should all be of the same size.";
"";
"Matrix addition and subtraction is simply the addition or subtraction of the vectors contained in the matrices. See 'help $matrix_utils:vector:add' for more help.";
type = verb[$ - 2..$];
results = args[1];
if (typeof(results[1][1]) == LIST)
for n in [1..length(results)]
results[n] = this:(verb)(results[n], @$list_utils:slice(args[2..$], n));
endfor
else
for n in [1..length(results)]
results[n] = this:("vector_" + type)(results[n], @$list_utils:slice(args[2..$], n));
endfor
endif
return results;
.
#91:2
":transpose(Mmn) => Mnm";
"Transpose an m by n matrix into an n by m matrix by making the rows in the original the columns in the output.";
{mat} = args;
if (!this:is_matrix(mat))
return raise("E_INVMAT", "Invalid Matrix Format");
endif
j = this:dimensions(mat)[2];
result = {};
for n in [1..j]
result = {@result, this:column(mat, n)};
$command_utils:suspend_if_needed(0);
endfor
return result;
.
#91:3
":determinant(M) => NUM the determinant of the matrix.";
"";
"There are several properties of a matrix's determinant. Adding or subtracting a row or column from another row or colum of a matrix does not hange the value of its determinant. Multiplying a row or column of a matrix by a single scalar value has the effect of multiplying the matrix's determinant by the same scalar.";
"";
"However, the most dramatic use of determinants is in solving linear equations. For example, the solution to this system of equations:";
"";
"Ax1 + Bx2 + Cx3 = D";
"Ex1 + Fx2 + Gx3 = H";
"Ix1 + Jx2 + Kx3 = L";
"";
"is";
"";
"     1 |D B C|         1 |A D C|        1 |A B D|";
"x1 = - |H F G|    x2 = - |E H G|   x3 = - |E F H|";
"     Z |L J K|         Z |I L K|        Z |I J L|";
"";
"          |A B C|";
"where Z = |E F G|";
"          |I J K|";
"";
"or, in other words, x1, x2, and x3 are some determinant divided by Z, another determinant.";
"";
"Determinants are also used in computing the cross product of two vectors. See 'help $matrix_utils:cross_prod' for more info.";
"";
{mat} = args;
if (!this:is_square(mat))
return raise("E_INVMAT", "Invalid Matrix Format");
elseif (this:dimensions(mat) == {1, 1})
return mat[1][1];
elseif (this:dimensions(mat)[1] == 2)
return (mat[1][1] * mat[2][2]) - (mat[1][2] * mat[2][1]);
else
result = (typeof(mat[1][1]) == INT) ? 0 | 0.0;
coeff = (typeof(mat[1][1]) == INT) ? 1 | 1.0;
for n in [1..length(mat[1])]
result = result + ((coeff * mat[1][n]) * this:determinant(this:submatrix(1, n, mat)));
coeff = -coeff;
endfor
return result;
endif
"elseif dims == {1,1} lines are courtesy of Link (#122143).  21-Oct-05";
"Originated by Uther. Modified by Link (#122143) on 16-Nov-2005.";
.
#91:4
":inverse(M) => MN such that M * MN = I";
"";
"The inverse of a matrix is very similar to the reciprocal of a scalar number. If two numbers, A and B, equal 1 (the scalar identity number) when multiplied together (AB=1), then B is said the be the reciprocal of A, and A is the reciprocal of B. If A and B are matrices, and the result of multiplying them togeter is the Identity Matrix, then B is the inverse of A, and A is the inverse of B.";
"";
"Computing the inverse involves the solutions of several linear equations. Since linear equations can be easily solved with determinants, this is rather simple. See 'help $matrix_utils:determinant' for more on how determinants solve linear equations.";
"";
{mat} = args;
{i, j} = this:dimensions(mat);
if (tofloat(det = this:determinant(mat)) == 0.0)
return raise("E_NOINV", "No Inverse Exists");
endif
result = {};
for k in [1..i]
sub = {};
for l in [1..j]
sub = {@sub, ($math_utils:pow((typeof(mat[1][1]) == INT) ? -1 | -1.0, k + l) * this:determinant(this:submatrix(l, k, mat))) / det};
endfor
result = {@result, sub};
endfor
return result;
.
#91:5
":identity(INT <size>) => Identity matrix (I) of dimensions <size> by <size>.";
"All elements of I are 0, except for the diagonal elements which are 1.";
"";
"The Identity Matrix has the unique property such that when another matrix is multiplied by it, the other matrix remains unchanged. This is similar to the number 1. a*1 = a. A * I = A, if the dimensions of I and A are the same.";
"";
n = args[1];
result = this:null(n, n);
for i in [1..n]
result[i][i] = 1;
endfor
return result;
.
#91:6
":null(INT <size>) => Null matrix (O) of dimensions <size> by <size>.";
"All elements of O are 0.";
"";
"The Null Matrix has the property that is equivalent to the number 0; it reduces the original matrix to itself. a * 0 = 0. A * N = N.";
"";
{m, ?n = m} = args;
result = {};
for i in [1..m]
result = {@result, {}};
for j in [1..n]
result[i] = {@result[i], 0};
endfor
endfor
return result;
.
#91:7
":is_square(M) => 1 iff dimensions of M are equal to each other.";
{m} = args;
return (this:is_matrix(m) && (this:order(m) == 2)) && ((dim = this:dimensions(m))[1] == dim[2]);
.
#91:8
":is_null(M) => 1 iff M is O.";
m = length(mat = args[1]);
if (!this:is_square(mat))
return 0;
endif
for i in [1..m]
for j in [1..m]
if (mat[i][j] != 0)
return 0;
endif
endfor
endfor
return 1;
.
#91:9
":is_identity(M) => 1 iff M is I.";
m = length(mat = args[1]);
if (!this:is_square(mat))
return 0;
endif
for i in [1..m]
for j in [1..m]
if ((mat[i][j] != 0) && ((i != j) ? 1 | (mat[i][j] != 1)))
return 0;
endif
endfor
endfor
return 1;
.
#91:10
":cross_prod(V1, V2) => VN, the vector perpendicular to both V1 and V2 with length equal to the area of the parallelogram spanned by V1 and V2, and direction governed by the rule of thumb.";
"";
"If A = a1i + a2j + a3k, represented as a list as {a1, a2, a3}";
"and B = b1i + b2j + b3k, or {b1, b2, b3}, then";
"";
"        |i  j  k |";
"A x B = |a1 a2 a3| = |a2 a3|i - |a1 a3|j + |a1 a2|k";
"        |b1 b2 b3| = |b2 b3|    |b1 b3|    |b1 b2|";
"";
"or, in list terms, as the list of the coefficients of i, j, and k.";
"";
"Note: i, j, and k are unit vectors in the x, y, and z direction respectively.";
"";
"The rule of thumb: A x B = C  If you hold your right hand out so that your fingers point in the direction of A, and so that you can curl them through B as you make a hitchhiking fist, your thumb will point in the direction of C.";
"";
"Put another way, A x B = ABsin(THETA) (A cross B equals the magnitude of A times the magnitude of B times the sin of the angle between them) This is expressed as a vector perpendicular the the A-B plane, pointing `up' if you curl your right hand fingers from A to B, and `down' if your right hand fingers curl from B to A.";
"";
"The cross product has many uses in physics. Angular momentum is the cross product of a particles position vector from the point it is rotating around and it's linear momentum (L = r x p). Torque is the cross product of position and Force (t = r x F).";
"";
{v1, v2} = args;
if (((((l = length(v1)) != length(v2)) || (l != 3)) || (!this:is_vector(v1))) || (!this:is_vector(v2)))
return raise("E_INVVEC", "Invalid Vector Format");
endif
mat = {{1, 1, 1}, v1, v2};
coeff = 1;
result = {};
for n in [1..3]
result = {@result, coeff * this:determinant(this:submatrix(1, n, mat))};
coeff = -coeff;
endfor
return result;
.
#91:11
":norm(V) => FLOAT";
":length(V) => FLOAT";
"The norm is the length of a vector, the square root of the sum of the squares of its elements.";
"";
"In school, we all should have learned the Pythagorean Theorem of right triangles: The sum of the squares of the sides of a right triagle is equal to the square of the hypoteneuse. The Theorem holds true no matter how many dimensions are being considered. The length of a vector is equal to the square root of the sum of the squares of its components. The dot product of a vector with itself happens to be the sum of the squares of its components.";
"";
{v} = args;
return this:is_vector(v) ? sqrt(tofloat(this:dot_prod(v, v))) | E_TYPE;
.
#91:12
":submatrix(i, j, M1) => M2, the matrix formed from deleting the ith row and jth column from M1.";
{i, j, mat} = args;
{k, l} = this:dimensions(mat);
result = {};
for m in [1..k]
sub = {};
for n in [1..l]
if ((m != i) && (n != j))
sub = {@sub, mat[m][n]};
endif
endfor
if (sub)
result = {@result, sub};
endif
endfor
return result;
.
#91:13
":dot_prod(V1, V2) => NUM";
":inner_prod(V1, V2) => NUM";
"The dot, or inner, product of two vectors is the sum of the products of the corresponding elements of the vectors.";
"If V1 = {1, 2, 3} and V2 = {4, 5, 6}, then V1.V2 = 1*4 + 2*5 + 3*6 = 32";
"";
"The dot product is useful in computing the angle between two vectors, and the length of a vector. See 'help $matrix_utils:subtended_angle' and 'help $matrix_utils:length'.";
"";
"A . B = ABcos(THETA)  (A dot B equals the magnitude of A times the magnitude of B times the cosine of the angle between them.)";
"";
{v1, v2} = args;
if ((((l = length(v1)) != length(v2)) || (!this:is_vector(v1))) || (!this:is_vector(v2)))
return raise("E_INVVEC", "Invalid Vector Format");
endif
temp = this:vector_mul(v1, v2);
result = (typeof(temp[1]) == INT) ? 0 | 0.0;
for n in [1..l]
$command_utils:suspend_if_needed(0);
result = result + temp[n];
endfor
return result;
.
#91:14
":dimensions(M) => LIST of dimensional sizes.";
l = {length(m = args[1])};
if (typeof(m[1]) == LIST)
l = {@l, @this:dimensions(m[1])};
endif
return l;
.
#91:15
":order(M) => INT how many dimensions does this matrix have? 1 means vector";
return length(this:dimensions(args[1]));
.
#91:16
":scalar_vector_add(S, V) => VN such that VN[n] = V[n] + S...";
":scalar_vector_sub(S, V) => VN such that VN[n] = V[n] - S...";
":scalar_vector_mul(S, V) => VN such that VN[n] = V[n] * S...";
":scalar_vector_div(S, V) => VN such that VN[n] = V[n] / S...";
"Actually, arguments can be (S, V) or (V, S). Each element of V is augmented by S. S should be either an INT or a FLOAT, as appropriate to the values in V.";
"";
"I can see a reason for wanting to do scalar/vector multiplcation or division, but addition and subtraction between vector and scalar types is not done. I've included them here for novelty, and because it was easy enough to to.";
"";
"Scalar-vector multiplication stretches a vector along its direction, generating points along a line. One of the more famous uses from physics is Force equals mass times acceleration. F = ma. Force and acceleration are both vectors. Mass is a scalar quantity.";
"";
if (typeof(args[1]) == LIST)
{vval, sval} = args;
else
{sval, vval} = args;
endif
if (!this:is_vector(vval))
return raise("E_INVVEC", "Invalid Vector Format");
endif
type = verb[$ - 2..$];
for n in [1..length(vval)]
if (type == "add")
vval[n] = vval[n] + sval;
elseif (type == "sub")
vval[n] = vval[n] - sval;
elseif (type == "mul")
vval[n] = vval[n] * sval;
else
vval[n] = vval[n] / sval;
endif
endfor
return vval;
.
#91:17
":subtended_angle(V1, V2) => FLOAT smallest angle defined by V1, V2 in radians";
"";
"Any two vectors define two angles, one less than or equal to 180 degrees, the other 180 degrees or more. The larger can be determined from the smaller, since their sum must be 360 degrees.";
"";
"The dot product of the two angles, divided by the lengths of each of the vectors is the cosine of the smaller angle defined by the two vectors.";
"";
{v1, v2} = args;
if ((((l = length(v1)) != length(v2)) || (!this:is_vector(v1))) || (!this:is_vector(v2)))
return raise("E_INVVEC", "Invalid Vector Format");
endif
return acos(tofloat(this:dot_prod(v1, v2)) / (this:norm(v1) * this:norm(v2)));
.
#91:18
":column(M, INT <n>) => LIST the nth column of M.";
{mat, i} = args;
j = this:dimensions(mat)[1];
result = {};
for m in [1..j]
result = {@result, mat[m][i]};
$command_utils:suspend_if_needed(0);
endfor
return result;
.
#91:19
":matrix_mul(M1, M2) => MN such that MN[m][n] = the dot product of the mth row of M1 and the transpose of thenth column of M2.";
"";
"Matrix multiplication is the most common and complex operation performed on two matrices. First, matrices can only be multiplied if they are of compatible sizes. An i by j matrix can only be multiplied by a j by k matrix, and the results of this multiplication will be a matrix of size i by k. Each element in the resulting matrix is the dot product of a row from the first matrix and a column from the second matrix. (See 'help $matrix_utils:dot_prod'.)";
"";
{m1, m2} = args;
{i, j} = this:dimensions(m1);
{k, l} = this:dimensions(m2);
if (((j != k) || (!this:is_matrix(m1))) || (!this:is_matrix(m2)))
return raise("E_INVMAT", "Invalid Matrix Format");
endif
result = {};
for m in [1..i]
sub = {};
for n in [1..l]
$command_utils:suspend_if_needed(0);
sub = {@sub, this:dot_prod(m1[m], this:column(m2, n))};
endfor
result = {@result, sub};
endfor
return result;
.
#91:20
":scalar_matrix_add(S, M) => MN such that MN[m][n] = MN[m][n] + S...";
":scalar_matrix_sub(S, M) => MN such that MN[m][n] = MN[m][n] - S...";
":scalar_matrix_mul(S, M) => MN such that MN[m][n] = MN[m][n] * S...";
":scalar_matrix_div(S, M) => MN such that MN[m][n] = MN[m][n] / S...";
"Actually, arguments can be (S, M) or (M, S). Each element of M is augmented by S. S should be either an INT or a FLOAT, as appropriate to the values in M.";
"I can see a reason for wanting to do scalar/matrix multiplication or division, but addition and subtraction between matrix and scalar types is not done. I've included them here for novelty, and because it was easy enough to do.";
type = verb[$ - 2..$];
if (typeof(args[1]) == LIST)
{mval, sval} = args;
else
{sval, mval} = args;
endif
if (!this:is_matrix(mval))
return raise("E_INVMAT", "Invalid Matrix Format");
endif
results = {};
if (typeof(mval[1][1] == LIST))
for n in [1..length(mval)]
results = {@results, this:(verb)(mval[n], sval)};
endfor
else
for n in [1..length(mval)]
results = {@results, this:("scalar_vector_" + type)(mval[n], sval)};
endfor
endif
return results;
.
#91:21
"A matrix is defined as a list of vectors, each having the smae number of elements.";
{m} = args;
if ((typeof(m) != LIST) || (typeof(m[1]) != LIST))
return 0;
endif
len = length(m[1]);
for v in (m)
if ((!this:is_vector(v)) || (length(v) != len))
return 0;
endif
endfor
return 1;
.
#91:22
"A vector shall be defined as a list of INTs or FLOATs. (I'm not gonna worry about them all being the same type.)";
flag = 1;
{v} = args;
if (typeof(v) != LIST)
return 0;
endif
for n in (v)
if (((ntype = typeof(n)) != INT) && (ntype != FLOAT))
flag = 0;
break;
endif
$command_utils:suspend_if_needed(0);
endfor
return flag;
.
#91:23
":is_reflexive   (M) => 1 if M is a reflexive relation, -1 if areflexive,";
"                       0 otherwise.";
":is_areflexive does the same, but with 1 and -1 reversed.";
{m} = args;
if (!this:is_square(m))
return raise("E_INVMAT", "Invalid Matrix Format");
endif
good = bad = 0;
for n in [1..length(m)]
if (!m[n][n])
bad = 1;
else
good = 1;
endif
endfor
return this:_relation_result(good, bad, verb[4] == "a");
.
#91:24
":is_symmetric   (M) => 1 if M is a symmetric relation, -1 if asymmetric,";
"                       0 otherwise.";
":is_asymmetric does the same, but with 1 and -1 reversed.";
{mat} = args;
if (!this:is_square(mat))
return raise("E_INVMAT", "Invalid Matrix Format");
endif
good = bad = 0;
for m in [1..len = length(mat)]
for n in [m + 1..len]
if (mat[m][n] == mat[n][m])
good = 1;
else
bad = 1;
endif
endfor
endfor
return this:_relation_result(good, bad, verb[4] == "a");
.
#91:25
":is_transitive  (M) => 1 if M is a transitive relation, -1 if atransitive,";
"                       0 otherwise.";
":is_atransitive does the same, but with 1 and -1 reversed.";
{mat} = args;
if (!this:is_square(mat))
return raise("E_INVMAT", "Invalid Matrix Format");
endif
good = bad = 0;
for m in [1..len = length(mat)]
for n in [1..len]
if (mat[m][n])
for l in [1..len]
if (mat[n][l])
if (mat[m][l])
good = 1;
else
bad = 1;
endif
endif
endfor
endif
endfor
endfor
return this:_relation_result(good, bad, verb[4] == "a");
.
#91:26
"Common code for is_reflexive, is_symmetric, and is_transitive.";
{good, bad, flag} = args;
if (good && (!bad))
result = 1;
elseif ((!good) && bad)
result = -1;
else
result = 0;
endif
return flag * result;
.
#91:27
":is_partial_ordering(M) => 1 iff M is a reflexive, asymmetric, transitive relation.";
{mat} = args;
return ((this:is_asymmetric(mat) == this:is_reflexive(mat)) == this:is_transitive(mat)) == 1;
.
#93:0
":dd_to_dms(INT|FLOAT <degrees>) => LIST {INT <degrees>, INT <minutes>, FLOAT <seconds>}";
"This verb converts decimal degrees to degrees, minutes, and seconds.";
dd = tofloat(args[1]);
s = (((dd - tofloat(d = toint(dd))) * 60.0) - tofloat(m = toint((dd - tofloat(d)) * 60.0))) * 60.0;
return {d, m, s};
.
#93:1
":dms_to_dd(INT|FLOAT <deg>, INT|FLOAT <min>, INT|FLOAT <sec>) => FLOAT <deg>";
"This verb converts degrees/minutes/seconds to decimal degrees.";
{d, m, s} = args[1..3];
d = tofloat(d);
m = tofloat(m);
s = tofloat(s);
return (d + (m / 60.0)) + (s / 3600.0);
.
#93:2
":rect_to_polar(INT|FLOAT <x>, INT|FLOAT <y>) => FLOAT <radius>, FLOAT <angle>.";
"This verb converts from rectangular (x,y) coordinates to polar (r, theta) coordinates.";
{x, y} = args[1..2];
x = tofloat(x);
y = tofloat(y);
return {sqrt((x * x) + (x * x)), `atan(y, x) ! E_INVARG => 0.0'};
.
#93:3
":polar_to_rect(INT|FLOAT <radius>, INT|FLOAT <angle>) => FLOAT <x>, FLOAT <y>";
"This verb converts from polar (radius, angle) coordinates to rectangulat (x,y) coordinates.";
{r, a} = args[1..2];
r = tofloat(r);
a = tofloat(a);
return {(r = r / (1.0 + (z2 = (z = tan(a / 2.0)) * z))) * (1.0 - z2), (r * 2.0) * z};
.
#93:4
":F_to_C(INT|FLOAT <Fahrenheit>) => FLOAT <Celsius>";
"This verb converts Fahrenheit degrees to Celsius degrees.";
return (tofloat(args[1]) - 32.0) / 1.8;
.
#93:5
":C_to_F(INT|FLOAT <Celsius>) => FLOAT <Fahrenheit>";
"This verb converts Celsius degrees to Fahrenheit degrees.";
return (tofloat(args[1]) * 1.8) + 32.0;
.
#93:6
":convert(STR <units>, STR <units>) => FLOAT conversion factor | LIST errors.";
"This verb attempts to compute the conversion factor between two sets of units. If the two inputs are of the same type (two speeds, two lengths, etc.), the value is returned. If the two inputs are not of the same type, a LIST is returned as follows: {1, {FLOAT <value>, STR <units>}. {FLOAT <value>, STR <units>}}. The 1 indicates that the two inputs were correctly formed. <value> is the conversion factor of the input into the basic <units>. This error output is useful for determining the basic structure and value of an unknown unit of measure. If either of the inputs can not be broken down to known units, a LIST is returned as follows: {0, STR <bad input>}.";
"";
"The format of the input strings is fairly straight forward: any multiplicative combination of units, ending in an optional digit to represent that unit is raised to a power, the whole of which is preceeded by an initial value. Examples: \"100 kg m/sec2\", \"35 joules\", \"2000 furlongs/fortnight\"";
"";
"Some example uses:";
";$convert_utils:convert(\"2000 furlongs/fortnight\", \"mph\")";
"=> 0.744047619047619";
";$convert_utils:convert(\"kilowatt hours\", \"joules\")";
"=> 3600000.0";
"";
";$convert_utils:convert(\"furlongs\", \"mph\")";
"=> {1, {201.168, \"m\"}, {044704, \"m / s\"}}";
"";
";$convert_utils:convert(\"junk\", \"meters\")";
"=> {0, \"junk\"}";
{havestr, wantstr} = args;
{havenum, havestr} = $string_utils:first_word(havestr);
havestr = $string_utils:trimr(tostr(havenum, " ", strsub(havestr, " ", "")));
wantstr = strsub(wantstr, " ", "");
"Preceeding three lines added by GD (#110777) on 23-June-2007 to stop an annoying error when you try to convert to/from things like 'fluid ounces'.";
have = this:_do_convert(havestr);
want = this:_do_convert(wantstr);
if ((have && want) && (have[2] == want[2]))
return have[1] / want[1];
elseif (have && want)
return {1, {have[1], this:_format_units(@have[2])}, {want[1], this:_format_units(@want[2])}};
else
return {0, have ? wantstr | havestr};
endif
.
#93:7
"THIS VERB IS NOT INTENDED FOR USER USAGE.";
":_do_convert is the workhorse of $convert_utils:convert and is based loosely upon the 'units' Perl script the ships with BSD Unix.";
"Essentially, it breaks the input up into values and units, attempts to break each unit down into elementary (basic) units, modifies the value as it goes, until it has no more input or can not convert a unit into a basic unit.";
instr = args[1];
units = this.basic_units_template;
value = 1.0;
top = 1;
"Ensure that the division mark is a spearate word.";
instr = $string_utils:substitute(instr, {{"/", " / "}});
while (instr)
"Grab the next word to process";
{first, instr} = $string_utils:first_word(instr);
if (first == "/")
"Now we're working with values under the division mark - units with negative exponents.";
top = 1 - top;
continue;
elseif (match(first, "|"))
"The word was a value expressed as a ratio. Compute the ratio and adjust the value accordingly.";
value = this:_do_value(first, value, top);
continue;
elseif ($string_utils:is_integer(first) || $string_utils:is_float(first))
"The word was a value. Adjust the accumulated value accordingly.";
value = top ? value * tofloat(first) | (value / tofloat(first));
continue;
elseif (match(first, "[0-9]$"))
"The word ends with a digit, but isn't a value. It must be a powered unit. Expand it: cm3 => cm cm cm";
subs = match(first, "%([a-zA-Z]+%)%([0-9]+%)");
first = substitute("%1", subs);
power = toint(substitute("%2", subs));
while (power > 0)
instr = (first + " ") + instr;
power = power - 1;
endwhile
continue;
else
"Check to see if the word starts with one or more metric prefix and attempt to evaluate the prefix.";
{first, value, top} = this:_try_metric_prefix(first, value, top);
"Check to see if we have a basic unit. If so, adjust the apropriate unit count.";
if (index = first in this.basic_units)
units[index][2] = top ? units[index][2] + 1 | (units[index][2] - 1);
continue;
elseif (prop = `this.(first) ! E_PROPNF => 0')
"Check to see if this is a known unit. If so, convert it and adjust the value and units.";
result = this:_do_convert(prop);
value = top ? value * result[1] | (value / result[1]);
for i in [1..length(units)]
units[i][2] = top ? units[i][2] + result[2][i][2] | (units[i][2] - result[2][i][2]);
endfor
continue;
elseif (first[$] == "s")
"Check to see if this is a normal 's'-ending plural, and try to do the above checks again.";
temp = first[1..$ - 1];
if (index = temp in this.basic_units)
units[index][2] = top ? units[index][2] + 1 | (units[index][2] - 1);
continue;
elseif (prop = `this.(temp) ! E_PROPNF => 0')
result = this:_do_convert(prop);
value = top ? value * result[1] | (value / result[1]);
for i in [1..length(units)]
units[i][2] = top ? units[i][2] + result[2][i][2] | (units[i][2] - result[2][i][2]);
endfor
continue;
endif
endif
"We were unable to find any conversion for the current word, so halt all operation and return 0.";
return 0;
endif
endwhile
"We were able to successfully convert each part of the input. Return the equivalent value and units.";
return {value, units};
.
#93:8
"THIS VERB IS NOT INTENDED FOR USER USAGE.";
":_try_metric_prefix runs through the metrix multipliers and tries to match them against the beginning of the input string. If successful, the given value is adjusted appropritately, and the input string is modified. The verb loops until there are no more prefix matches. (Hence, \"kilodecameter\" can be matched with only one verb call.";
"If anyone knows of other possibilities here, please let me know.";
{first, value, top} = args;
while (1)
if (subs = match(first, "^yocto%(.*%)"))
first = substitute("%1", subs);
value = top ? value / 1e+24 | (value * 1e+24);
continue;
endif
if (subs = match(first, "^zepto%(.*%)"))
first = substitute("%1", subs);
value = top ? value / 1e+21 | (value * 1e+21);
continue;
endif
if (subs = match(first, "^atto%(.*%)"))
first = substitute("%1", subs);
value = top ? value / 1e+18 | (value * 1e+18);
continue;
endif
if (subs = match(first, "^femto%(.*%)"))
first = substitute("%1", subs);
value = top ? value / 1e+15 | (value * 1e+15);
continue;
endif
if (subs = match(first, "^pico%(.*%)"))
first = substitute("%1", subs);
value = top ? value / 1000000000000.0 | (value * 1000000000000.0);
continue;
endif
if (subs = match(first, "^nano%(.*%)"))
first = substitute("%1", subs);
value = top ? value / 1000000000.0 | (value * 1000000000.0);
continue;
endif
if (match(first, "^micron"))
break;
endif
if (subs = match(first, "^micro%(.*%)"))
first = substitute("%1", subs);
value = top ? value / 1000000.0 | (value * 1000000.0);
continue;
endif
if (subs = match(first, "^milli%(.*%)"))
first = substitute("%1", subs);
value = top ? value / 1000.0 | (value * 1000.0);
continue;
endif
if (subs = match(first, "^centi%(.*%)"))
first = substitute("%1", subs);
value = top ? value / 100.0 | (value * 100.0);
continue;
endif
if (subs = match(first, "^deci%(.*%)"))
first = substitute("%1", subs);
value = top ? value / 10.0 | (value * 10.0);
continue;
endif
if (subs = match(first, "^%(deca%|deka%)%(.*%)"))
first = substitute("%2", subs);
value = (!top) ? value / 10.0 | (value * 10.0);
continue;
endif
if (subs = match(first, "^hecto%(.*%)"))
first = substitute("%1", subs);
value = (!top) ? value / 100.0 | (value * 100.0);
continue;
endif
if (subs = match(first, "^kilo%(.*%)"))
first = substitute("%1", subs);
value = (!top) ? value / 1000.0 | (value * 1000.0);
continue;
endif
if (subs = match(first, "^mega%(.*%)"))
first = substitute("%1", subs);
value = (!top) ? value / 1000000.0 | (value * 1000000.0);
continue;
endif
if (subs = match(first, "^giga%(.*%)"))
first = substitute("%1", subs);
value = (!top) ? value / 1000000000.0 | (value * 1000000000.0);
continue;
endif
if (subs = match(first, "^tera%(.*%)"))
first = substitute("%1", subs);
value = (!top) ? value / 1000000000000.0 | (value * 1000000000000.0);
continue;
endif
if (subs = match(first, "^peta%(.*%)"))
first = substitute("%1", subs);
value = (!top) ? value / 1e+15 | (value * 1e+15);
continue;
endif
if (subs = match(first, "^exa%(.*%)"))
first = substitute("%1", subs);
value = (!top) ? value / 1e+18 | (value * 1e+18);
continue;
endif
if (subs = match(first, "^zetta%(.*%)"))
first = substitute("%1", subs);
value = (!top) ? value / 1e+21 | (value * 1e+21);
continue;
endif
if (subs = match(first, "^yotta%(.*%)"))
first = substitute("%1", subs);
value = (!top) ? value / 1e+24 | (value * 1e+24);
continue;
endif
break;
endwhile
return {first, value, top};
.
#93:9
"THIS VERB IS NOT INTENDED FOR USER USAGE.";
":_format_units takes the associative list of units and powers and construct a more user friendly string.";
top = bottom = "";
for pair in (args)
if (pair[2] > 0)
top = tostr(top, " ", pair[1], (pair[2] > 1) ? pair[2] | "");
elseif (pair[2] < 0)
bottom = tostr(bottom, " ", pair[1], (pair[2] < -1) ? -pair[2] | "");
endif
endfor
if (bottom)
return ((top + " /") + bottom)[2..$];
else
return top[2..$];
endif
.
#93:10
":K_to_C (INT|FLOAT <Kelvin>) => FLOAT <Celcius>";
"This verb converts Kelvin degrees to Celcius degrees.";
return tofloat(args[1]) - 273.0;
.
#93:11
":C_to_K (INT|FLOAT <Celcius>) => FLOAT <Kelvin>";
"This verb converts Celcius degrees to Kelvin degrees.";
return tofloat(args[1]) + 273.0;
.
#93:12
":F_to_R (INT|FLOAT <Fahrenheit>) => FLOAT <Rankine>";
"This verb converts Fahrenheit degrees to Rankine degrees.";
return tofloat(args[1]) + 459.67;
.
#93:13
":R_to_F (INT|FLOAT <Rankine>) => FLOAT <Fahrenheit>";
"This verb converts Rankine degrees to Fahrenheit degrees.";
return tofloat(args[1]) - 459.67;
.
#93:14
"THIS VERB IS NOT INTENDED FOR USER USAGE.";
":_do_value takes a string of the form <number>|<number>, interprets it as a ratio, and applies that ratio to the incoming 'value' accordingly with the 'top' input, and returns it back to the calling verb.";
{first, value, top} = args;
{numer, denom} = $string_utils:explode(first, "|");
return top ? (value * tofloat(numer)) / tofloat(denom) | ((value * tofloat(denom)) / tofloat(numer));
.
#94:0
"set_gender(newgender) attempts to change this.gender to newgender";
"  => E_PERM   if you don't own this or aren't its parent";
"  => Other return values as from $gender_utils:set.";
if (!($perm_utils:controls(caller_perms(), this) || (this == caller)))
return E_PERM;
else
result = $gender_utils:set(this, args[1]);
this.gender = (typeof(result) == STR) ? result | args[1];
return result;
endif
.
#94:1
if (player.wizard || (player == this.owner))
player:tell(this:set_gender(iobjstr) ? "Gender and pronouns set." | "Gender set.");
else
player:tell("Permission denied.");
endif
.
#94:2
"Copied from generic player (#6):verb_sub by ur-Rog (#6349) Fri Jan 22 11:20:11 1999 PST";
"This verb was copied by TheCat on 01/22/99, so that the generic gendered object will be able to do verb conjugation as well as pronoun substitution.";
text = args[1];
if (a = `$list_utils:assoc(text, this.verb_subs) ! ANY')
return a[2];
else
return $gender_utils:get_conj(text, this);
endif
.
#95:0
if (this:changed(who = player in this.active))
player:tell("You are still editing ", this:working_on(who), ".  Please type ABORT or SAVE first.");
elseif (spec = this:parse_invoke(dobjstr, verb))
this:init_session(who, @spec);
endif
.
#95:1
if (!(who = this:loaded(player)))
player:tell(this:nothing_loaded_msg());
return;
endif
if (dobjstr)
if (objprop = this:property_match_result(dobjstr))
this.objects[who] = objprop[1];
this.properties[who] = objprop[2];
else
return;
endif
else
objprop = {this.objects[who], this.properties[who]};
endif
value_list = this:to_value(@this:text(who));
if (value_list[1])
player:tell("Error on line ", value_list[1], ":  ", value_list[2]);
player:tell("Value not saved to ", this:working_on(who));
elseif (result = this:set_property(@objprop, value_list[2]))
player:tell("Value written to ", this:working_on(who), ".");
this:set_changed(who, 0);
else
player:tell(result);
player:tell("Value not saved to ", this:working_on(who));
endif
.
#95:2
player:tell("I don't understand that.");
.
#95:3
if (!(who = this:loaded(player)))
player:tell(this:nothing_loaded_msg());
elseif (typeof(range = this:parse_range(who, {"_", "1"}, @args)) != LIST)
player:tell(range);
elseif (range[3])
player:tell("Junk at end of cmd:  ", range[3]);
else
text = this.texts[who];
newins = ins = this.inserting[who];
start = range[1];
if (typeof(debris = this:explode_line("", text[start])) == STR)
player:tell("Line ", start, ":  ", debris);
return;
endif
if (!debris[1])
debris = listdelete(debris, 1);
endif
newlines = {};
for line in (text[i = start + 1..end = range[2]])
dlen = length(debris);
newlines = {@newlines, @debris[1..dlen - 1]};
if (ins == i)
newins = (start + length(newlines)) + 1;
endif
if (typeof(debris = this:explode_line(debris[dlen], line)) == STR)
player:tell("Line ", i, ":  ", debris);
return;
endif
i = i + 1;
endfor
explen = length(newlines) + length(debris);
if (ins > end)
newins = (ins - ((end - start) + 1)) + explen;
endif
this.texts[who] = {@text[1..start - 1], @newlines, @debris, @text[end + 1..length(text)]};
this.inserting[who] = newins;
player:tell("--> ", start, "..", (start + explen) - 1);
endif
.
#95:4
if (!(e = this:readable(who = args ? args[1] | (player in this.active)) || this:ok(who)))
return e;
endif
vlist = this:to_value(@this:text(who));
if (vlist[1])
player:tell("Error on line ", vlist[1], ":  ", vlist[2]);
return E_INVARG;
else
return vlist[2];
endif
.
#95:5
if (!(who = args[1]))
return "????";
endif
object = this.objects[who];
prop = this.properties[who] || "(???)";
return valid(object) ? tostr("\"", object.name, "\"(", object, ")", "." + prop) | tostr(".", prop, " on an invalid object (", object, ")");
.
#95:6
if (this:ok(who = args[1]))
this:load(who, args[4]);
this.objects[who] = args[2];
this.properties[who] = args[3];
player:tell("Now editing ", this:working_on(who), ".");
endif
.
#95:7
if (!(pp = $code_utils:parse_propref(string = args[1])))
player:tell("Property specification expected.");
return 0;
endif
objstr = pp[1];
prop = pp[2];
if ($command_utils:object_match_failed(object = player:my_match_object(objstr, this:get_room(player)), objstr))
elseif (!$object_utils:has_property(object, prop))
player:tell(object.name, "(", object, ") has no \".", prop, "\" property.");
else
return {object, prop};
endif
return 0;
.
#95:8
"WIZARDLY";
vl = $code_utils:verb_loc();
if ((caller != vl) || (caller_perms() != vl.owner))
return E_PERM;
endif
set_task_perms(player);
return args[1].(args[2]);
.
#95:9
"WIZARDLY";
vl = $code_utils:verb_loc();
if ((caller != vl) || (caller_perms() != vl.owner))
return E_PERM;
endif
{object, pname, value} = args;
set_task_perms(player);
if ($object_utils:has_callable_verb(object, "set_" + pname))
if (typeof(attempt = object:("set_" + pname)(value)) != ERR)
return attempt;
endif
endif
return (typeof(e = object.(pname) = value) == ERR) ? e | 1;
.
#95:10
su = $string_utils;
prev = args[1];
line = su:triml(args[2]);
indent = length(args[2]) - length(line);
if (line[1] == "@")
if (!(splicee = $no_one:eval(("{" + line[2..length(line)]) + "}"))[1])
return "Can't eval what's after the @.";
endif
newlines = this:explode_list(indent + 1, splicee[2]);
return {prev, @newlines};
elseif (line[1] == "}")
if (this:is_delimiter(prev) && (!index(prev, "{")))
return {tostr(args[2][1..indent], su:trim(prev), " ", line)};
else
return args;
endif
elseif (line[1] != "{")
return args;
elseif (!rindex(line, "}"))
if (this:is_delimiter(prev))
return {(su:trimr(prev) + (rindex(prev, "{") ? " " | ", ")) + line};
else
return args;
endif
elseif (!(v = $no_one:eval(line))[1])
return "Can't eval this line.";
else
newlines = {@this:explode_list(indent + 2, v[2]), su:space(indent) + "}"};
if (this:is_delimiter(prev))
return {su:trimr(prev) + (rindex(prev, "{") ? " {" | ", {"), @newlines};
else
return {prev, su:space(indent) + "{", @newlines};
endif
endif
.
#95:11
":explode_list(indent,list) => corresponding list of strings to use.";
lines = {};
indent = $string_utils:space(args[1]);
for element in (args[2])
if (typeof(element) == STR)
lines = {@lines, (indent + "\"") + element};
else
lines = {@lines, indent + $string_utils:print(element)};
endif
endfor
return lines;
.
#95:12
line = $string_utils:triml(args[1]);
return line && ((line[1] == "}") || ((line[1] == "{") && (!rindex(line, "}"))));
.
#95:13
":to_value(@list_of_strings) => {line#, error_message} or {0,value}";
"converts the given list of strings back into a value if possible";
stack = {};
curlist = {};
curstr = 0;
i = 0;
for line in (args)
i = i + 1;
if (!(line = $string_utils:triml(line)))
"skip blank lines";
elseif ((char = line[1]) == "+")
if (curstr == 0)
return {i, "previous line is not a string"};
endif
curstr = curstr + line[2..length(line)];
else
if (curstr != 0)
curlist = {@curlist, curstr};
curstr = 0;
endif
if ((char == "}") || ((char == "{") && (!rindex(line, "}"))))
comma = 0;
for c in [1..length(line)]
char = line[c];
if (char == "}")
if (comma)
return {i, "unexpected `}'"};
elseif (!stack)
return {i, "too many }'s"};
endif
curlist = {@stack[1], curlist};
stack = listdelete(stack, 1);
elseif (char == "{")
comma = 1;
stack = {curlist, @stack};
curlist = {};
elseif (char == " ")
elseif ((!comma) && (char == ","))
comma = 1;
else
return {i, tostr("unexpected `", char, "'")};
endif
endfor
elseif (char == "\"")
curstr = line[2..length(line)];
elseif (char == "@")
if (!(v = $no_one:eval(("{" + line[2..length(line)]) + "}"))[1])
return {i, "Can't eval what's after the @"};
endif
curlist = {@curlist, @v[2]};
else
if (!(v = $no_one:eval(line))[1])
return {i, "Can't eval this line"};
endif
curlist = {@curlist, v[2]};
endif
endif
endfor
if (stack)
return {i, "missing }"};
endif
if (curstr != 0)
return {0, {@curlist, curstr}};
else
return {0, curlist};
endif
.
#95:14
if (caller != this)
raise(E_PERM);
elseif (!(string = args[1]))
player:tell_lines({("Usage:  " + args[2]) + " <object>.<property>", ("        " + args[2]) + "          (continues editing an unsaved property)"});
elseif (!(objprop = this:property_match_result(string)))
elseif (ERR == typeof(value = this:property(@objprop)))
player:tell("Couldn't get property value:  ", value);
elseif (typeof(value) != LIST)
player:tell("Sorry... expecting a list-valued property.");
if (typeof(value) == STR)
player:tell("Use @notedit to edit string-valued properties");
else
player:tell("Anyway, you don't need an editor to edit `", value, "'.");
endif
else
return {@objprop, this:explode_list(0, value)};
endif
return 0;
.
#97:0
"HTTP Server";
"";
"This gets called by the #0:do_login_command";
"It keeps track of web browser guests, and it feeds them HTTP instead of Telnet.";
if ((caller != #0) && (caller != this))
return E_PERM;
endif
not_http = args ? args | {$login.blank_command};
guest = $string_utils:connection_hostname(connection_name(player));
if (!args)
if ((guestnum = $list_utils:iassoc(guest, this.guests)) > 0)
guestinfo = this.guests[guestnum];
if (guestinfo[3] > 1)
"Three blank requests means this is not a guest anymore.";
this.guests = listdelete(this.guests, guestnum);
return not_http;
endif
guestinfo[3] = guestinfo[3] + 1;
this.guests[guestnum] = guestinfo;
else
"Don't know who this is. Do the regular welcome.";
return not_http;
endif
elseif ((guestnum = $list_utils:iassoc(guest, this.guests)) > 0)
"Previously registered HTTP guest.";
if (args && (args[1] == "GET"))
"Registered guest does a GET.";
guestinfo = {guest, time(), 0};
this.guests[guestnum] = guestinfo;
html = {};
keys = $string_utils:explode(args[2], "/");
objid = keys ? toobj(keys[1]) | #-1;
if (valid(objid))
if ($object_utils:has_callable_verb(objid, "html"))
new_player = $no_one;
if ((length(keys) >= 3) && (length(keys[3]) > 2))
if (keys[3] == this:gen_key(keys[1], keys[2], keys[3][1..2]))
new_player = toobj(keys[2]);
keys = (length(keys) > 3) ? keys[4..$] | {};
endif
endif
old_player = player;
player = new_player;
html = `objid:html(@keys) ! ANY';
player = old_player;
if (typeof(html) == ERR)
html = {"HTTP/1.1 500 Internal Server Error", "Content-Type: text/plain", "", "", "ERROR:", tostr(objid) + ":html()", tostr(html)};
endif
elseif ($object_utils:has_readable_property(objid, "html"))
html = objid.html;
else
html = {"HTTP/1.1 404 NOT FOUND", "Content-Type: text/plain", "", "", "HTML not found."};
endif
else
html = {"HTTP/1.1 404 NOT FOUND", "Content-Type: text/plain", "", "", "Object not found."};
endif
"Default header is HTML";
html_header = {"HTTP/1.1 200 OK", "Content-Type: text/html", "", ""};
if (typeof(html) == STR)
html = {html};
endif
if (`html[1][1..6] == "<HTML>" ! ANY => 0')
html = {@html_header, @html};
endif
if ((typeof(html) == LIST) && (length(html) == 0))
html = html_header;
endif
if (html && (typeof(html) == LIST))
for h in (html)
if (typeof(h) == STR)
notify(player, h);
endif
endfor
endif
"Server options need a suspend before they take effect.";
old_boot = $server_options.boot_msg;
$server_options.boot_msg = "";
suspend(0);
boot_player(player);
$server_options.boot_msg = old_boot;
elseif (args[1][$] == ":")
"Client is telling us some HTTP header info.";
boot_player(player);
else
"They stopped doing GETs, so remove them as HTTP.";
this.guests = listdelete(this.guests, guestnum);
return not_http;
endif
elseif (args && (args[1] == "GET"))
"First visit. Register them as a guest and ask them to refresh.";
guestinfo = {guest, time(), 0};
this.guests = {@this.guests, guestinfo};
html = {"HTTP/1.1 200 OK", "Content-Type: text/html", "", "", "<meta http-equiv=\"refresh\" content=\"0\"><br><b>", "", "", "", "Web service initialized. Please reload this page.", "</b>"};
for h in (html)
notify(player, h);
endfor
boot_player(player);
else
"Regular telnet client.";
return not_http;
endif
"HTTP Session successful";
return;
.
#97:1
"This makes a URL key for a specific object and player.";
"With the keyed URL, the PLAYER will be set correctly when :HTML() is called";
key = this:gen_key(player, caller);
notify(player, ("This is the private key for you, " + player.name) + ". Do not share it.");
notify(player, ((((((((("http://" + $network.site) + ":") + $network.port) + "/") + tostr(caller)[2..$]) + "/") + tostr(player)[2..$]) + "/") + key) + "/");
.
#97:2
if (caller != this)
return E_PERM;
endif
player = args[1];
object = args[2];
hash = ((tonum(player) + tonum(object)) + this.master_key) % 100000000;
if (length(args) > 2)
salt = args[3];
key = crypt(tostr(hash), salt);
else
"Make it only alphanumeric salt, to get through a URL";
salt = this.alpha[random(length(this.alpha))] + this.alpha[random(length(this.alpha))];
key = crypt(tostr(hash), salt);
endif
"Clean out the non-alpha to make key work in a URL";
for i in [1..length(key)]
if (j = index(this.nonalpha, key[i], 1))
key[i] = this.alpha[j];
endif
endfor
return key;
.
0 clocks
0 queued tasks
0 suspended tasks
1 active connections with listeners
2 0
