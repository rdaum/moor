@programmer
; $tmp2 = create($nothing);
; add_property($tmp2, "x", 0, {player, "r"});


// Adapted from https://github.com/toddsundsted/stunt/blob/a4158f5835f1beb9d754c92fd5b3a137e459aabf/test/test_recycle.rb

// test_that_the_first_argument_is_required 
@programmer
; recycle();
E_ARGS

// test_that_the_first_argument_can_be_an_object
@wizard
; recycle(1);
E_TYPE
; recycle(1.0);
E_TYPE
; recycle("foobar");
E_TYPE
; recycle({});
E_TYPE
; recycle($nothing);
E_INVARG
; recycle(create($nothing));

// test_that_the_first_argument_must_be_valid
@programmer
; $object = create($nothing); recycle($object); recycle($object);
E_INVARG

// test_that_a_wizard_can_recycle_anything
@wizard
; $tmp1 = create($nothing); $tmp1.w = 0;
; $tmp2 = create($nothing); $tmp2.w = 1;
; add_property($tmp2, "x", 0, {player, "r"});
; $tmp2.x = create($nothing); $tmp2.x.w = 0;
; recycle($tmp2.x);
; recycle($tmp2);
; recycle($tmp1);

// test_that_a_programmer_can_only_recycle_things_it_controls
@programmer
; $tmp1 = create($nothing);
; $tmp2 = create($nothing);
; $tmp1.w = 0;
; $tmp2.w = 1;
; add_property($tmp2, "x", 0, {player, "r"});
; $tmp2.x = create($nothing); $tmp2.x.w = 0;
; add_property($tmp2, "y", 0, {player, "r"});
; $tmp2.y = create($nothing);
; recycle($tmp2.y);
; recycle($tmp2.x);
E_PERM
; recycle($tmp2);
E_PERM
; recycle($tmp1);
E_PERM