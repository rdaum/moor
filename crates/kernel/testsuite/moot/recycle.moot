// Adapted from https://github.com/toddsundsted/stunt/blob/a4158f5835f1beb9d754c92fd5b3a137e459aabf/test/test_recycle.rb

// test_that_the_first_argument_is_required 
@programmer
; recycle();
E_ARGS

// test_that_the_first_argument_can_be_an_object
@wizard
; recycle(1);
E_TYPE
; recycle(1.0);
E_TYPE
; recycle("foobar");
E_TYPE
; recycle({});
E_TYPE
; recycle($nothing);
E_INVARG
; recycle(create($nothing));

// test_that_the_first_argument_must_be_valid
@programmer
; $object = create($nothing); recycle($object); recycle($object);
E_INVARG

// test_that_a_wizard_can_recycle_anything
@wizard
; $tmp1 = create($nothing); $tmp1.w = 0;
; $tmp2 = create($nothing); $tmp2.w = 1;
; add_property($tmp2, "x", 0, {player, "r"});
; $tmp2.x = create($nothing); $tmp2.x.w = 0;
; recycle($tmp2.x);
; recycle($tmp2);
; recycle($tmp1);

// test_that_a_programmer_can_only_recycle_things_it_controls
// Note: Stunt requires the `w` bit to be set for `recycle()`.
//       MOO and moor, don"t so this test looks very different.
@wizard
; $object = create($nothing);
@programmer
; recycle($object);
E_PERM

// test_that_recycling_an_object_calls_recycle
@programmer
; $object = create($nothing);
; add_property($object, "recycle_called", 0, {player, ""});
; add_verb($object, {player, "xd", "recycle"}, {"this", "none", "this"});
; set_verb_code($object, "recycle", {
>    "typeof(this) == OBJ || raise(E_INVARG);",
>    "$object.recycle_called = $object.recycle_called + 1;"
> });
; return $object.recycle_called;
0
; recycle(create($object));
; return $object.recycle_called;
1
; recycle(create($object));
; return $object.recycle_called;
2

// test_that_calling_recycle_when_recycling_an_object_fails
; $object = create($nothing);
; add_property($object, "recycle_called", 0, {player, ""});
; add_verb($object, {player, "xd", "recycle"}, {"this", "none", "this"});
; set_verb_code($object, "recycle", {
>    "typeof(this) == OBJ || raise(E_INVARG);",
>    "$object.recycle_called = $object.recycle_called + 1;"
> });
; return $object.recycle_called;

// test_that_calling_recycle_on_a_recycled_object_fails
@programmer
; $object = create($nothing);
; add_property($object, "keep", 0, {player, ""});
; add_verb($object, {player, "xd", "recycle"}, {"this", "none", "this"});
; set_verb_code($object, "recycle", {
>   "typeof(this) == OBJ || raise(E_INVARG);",
>   "$object.keep = this;"
> });
; return typeof($object.keep) == INT;
1
; return recycle(create($object));
0
; return typeof($object.keep) == OBJ;
1
; recycle($object.keep);
E_INVARG
; return valid($object.keep);
0

// test_that_recycling_an_object_DOES_NOT_recycle_values_in_properties_defined_on_the_object
@wizard
; $object = create($nothing);
; add_property($object, "recycle_called", 0, {player, ""});
; add_verb($object, {player, "xd", "recycle"}, {"this", "none", "this"});
; set_verb_code($object, "recycle", {
>   "$object.recycle_called = $object.recycle_called + 1;"
> });
; add_verb($object, {player, "xd", "go"}, {"this", "none", "this"});
; set_verb_code($object, "go", {
>   "x = create($object);",
>   "add_property(x, \"next\", 0, {player, \"\"});",
>   "x.next = create($object);",
>   "recycle(x);"
> });
; $object.recycle_called = 0;
; $object:go();
; return $object.recycle_called;
1
