// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Obj } from '../moor-common/obj.js';
import { Symbol } from '../moor-common/symbol.js';


export class DuplicateVerb {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DuplicateVerb {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDuplicateVerb(bb:flatbuffers.ByteBuffer, obj?:DuplicateVerb):DuplicateVerb {
  return (obj || new DuplicateVerb()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDuplicateVerb(bb:flatbuffers.ByteBuffer, obj?:DuplicateVerb):DuplicateVerb {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DuplicateVerb()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

obj(obj?:Obj):Obj|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Obj()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

verb(obj?:Symbol):Symbol|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Symbol()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startDuplicateVerb(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addObj(builder:flatbuffers.Builder, objOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, objOffset, 0);
}

static addVerb(builder:flatbuffers.Builder, verbOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, verbOffset, 0);
}

static endDuplicateVerb(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // obj
  builder.requiredField(offset, 6) // verb
  return offset;
}

}
