// automatically generated by the FlatBuffers compiler, do not modify

import { NotifyEvent } from '../moor-common/notify-event.js';
import { PresentEvent } from '../moor-common/present-event.js';
import { TracebackEvent } from '../moor-common/traceback-event.js';
import { UnpresentEvent } from '../moor-common/unpresent-event.js';


export enum EventUnion {
  NONE = 0,
  NotifyEvent = 1,
  PresentEvent = 2,
  UnpresentEvent = 3,
  TracebackEvent = 4
}

export function unionToEventUnion(
  type: EventUnion,
  accessor: (obj:NotifyEvent|PresentEvent|TracebackEvent|UnpresentEvent) => NotifyEvent|PresentEvent|TracebackEvent|UnpresentEvent|null
): NotifyEvent|PresentEvent|TracebackEvent|UnpresentEvent|null {
  switch(EventUnion[type]) {
    case 'NONE': return null; 
    case 'NotifyEvent': return accessor(new NotifyEvent())! as NotifyEvent;
    case 'PresentEvent': return accessor(new PresentEvent())! as PresentEvent;
    case 'UnpresentEvent': return accessor(new UnpresentEvent())! as UnpresentEvent;
    case 'TracebackEvent': return accessor(new TracebackEvent())! as TracebackEvent;
    default: return null;
  }
}

export function unionListToEventUnion(
  type: EventUnion, 
  accessor: (index: number, obj:NotifyEvent|PresentEvent|TracebackEvent|UnpresentEvent) => NotifyEvent|PresentEvent|TracebackEvent|UnpresentEvent|null, 
  index: number
): NotifyEvent|PresentEvent|TracebackEvent|UnpresentEvent|null {
  switch(EventUnion[type]) {
    case 'NONE': return null; 
    case 'NotifyEvent': return accessor(index, new NotifyEvent())! as NotifyEvent;
    case 'PresentEvent': return accessor(index, new PresentEvent())! as PresentEvent;
    case 'UnpresentEvent': return accessor(index, new UnpresentEvent())! as UnpresentEvent;
    case 'TracebackEvent': return accessor(index, new TracebackEvent())! as TracebackEvent;
    default: return null;
  }
}
