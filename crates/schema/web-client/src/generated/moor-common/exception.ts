// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { Error } from "../moor-common/error.js";
import { Var } from "../moor-var/var.js";

export class Exception {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): Exception {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsException(bb: flatbuffers.ByteBuffer, obj?: Exception): Exception {
        return (obj || new Exception()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsException(bb: flatbuffers.ByteBuffer, obj?: Exception): Exception {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Exception()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    error(obj?: Error): Error | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? (obj || new Error()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    stack(index: number, obj?: Var): Var | null {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset
            ? (obj || new Var()).__init(
                this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),
                this.bb!,
            )
            : null;
    }

    stackLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    backtrace(index: number, obj?: Var): Var | null {
        const offset = this.bb!.__offset(this.bb_pos, 8);
        return offset
            ? (obj || new Var()).__init(
                this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),
                this.bb!,
            )
            : null;
    }

    backtraceLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 8);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    static startException(builder: flatbuffers.Builder) {
        builder.startObject(3);
    }

    static addError(builder: flatbuffers.Builder, errorOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, errorOffset, 0);
    }

    static addStack(builder: flatbuffers.Builder, stackOffset: flatbuffers.Offset) {
        builder.addFieldOffset(1, stackOffset, 0);
    }

    static createStackVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]!);
        }
        return builder.endVector();
    }

    static startStackVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(4, numElems, 4);
    }

    static addBacktrace(builder: flatbuffers.Builder, backtraceOffset: flatbuffers.Offset) {
        builder.addFieldOffset(2, backtraceOffset, 0);
    }

    static createBacktraceVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]!);
        }
        return builder.endVector();
    }

    static startBacktraceVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(4, numElems, 4);
    }

    static endException(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // error
        builder.requiredField(offset, 6); // stack
        builder.requiredField(offset, 8); // backtrace
        return offset;
    }

    static createException(
        builder: flatbuffers.Builder,
        errorOffset: flatbuffers.Offset,
        stackOffset: flatbuffers.Offset,
        backtraceOffset: flatbuffers.Offset,
    ): flatbuffers.Offset {
        Exception.startException(builder);
        Exception.addError(builder, errorOffset);
        Exception.addStack(builder, stackOffset);
        Exception.addBacktrace(builder, backtraceOffset);
        return Exception.endException(builder);
    }
}
