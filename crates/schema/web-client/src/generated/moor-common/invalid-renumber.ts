// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

export class InvalidRenumber {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): InvalidRenumber {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsInvalidRenumber(bb: flatbuffers.ByteBuffer, obj?: InvalidRenumber): InvalidRenumber {
        return (obj || new InvalidRenumber()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsInvalidRenumber(bb: flatbuffers.ByteBuffer, obj?: InvalidRenumber): InvalidRenumber {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new InvalidRenumber()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    message(): string | null;
    message(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    message(optionalEncoding?: any): string | Uint8Array | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
    }

    static startInvalidRenumber(builder: flatbuffers.Builder) {
        builder.startObject(1);
    }

    static addMessage(builder: flatbuffers.Builder, messageOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, messageOffset, 0);
    }

    static endInvalidRenumber(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // message
        return offset;
    }

    static createInvalidRenumber(builder: flatbuffers.Builder, messageOffset: flatbuffers.Offset): flatbuffers.Offset {
        InvalidRenumber.startInvalidRenumber(builder);
        InvalidRenumber.addMessage(builder, messageOffset);
        return InvalidRenumber.endInvalidRenumber(builder);
    }
}
