// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class InvalidVerb {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):InvalidVerb {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsInvalidVerb(bb:flatbuffers.ByteBuffer, obj?:InvalidVerb):InvalidVerb {
  return (obj || new InvalidVerb()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsInvalidVerb(bb:flatbuffers.ByteBuffer, obj?:InvalidVerb):InvalidVerb {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new InvalidVerb()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

vid():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

static startInvalidVerb(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addVid(builder:flatbuffers.Builder, vid:bigint) {
  builder.addFieldInt64(0, vid, BigInt('0'));
}

static endInvalidVerb(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createInvalidVerb(builder:flatbuffers.Builder, vid:bigint):flatbuffers.Offset {
  InvalidVerb.startInvalidVerb(builder);
  InvalidVerb.addVid(builder, vid);
  return InvalidVerb.endInvalidVerb(builder);
}
}
