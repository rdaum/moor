// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ObjectRefUnion, unionToObjectRefUnion, unionListToObjectRefUnion } from '../moor-common/object-ref-union.js';


export class ObjectRef {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ObjectRef {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsObjectRef(bb:flatbuffers.ByteBuffer, obj?:ObjectRef):ObjectRef {
  return (obj || new ObjectRef()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsObjectRef(bb:flatbuffers.ByteBuffer, obj?:ObjectRef):ObjectRef {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ObjectRef()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

refType():ObjectRefUnion {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : ObjectRefUnion.NONE;
}

ref<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startObjectRef(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addRefType(builder:flatbuffers.Builder, refType:ObjectRefUnion) {
  builder.addFieldInt8(0, refType, ObjectRefUnion.NONE);
}

static addRef(builder:flatbuffers.Builder, refOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, refOffset, 0);
}

static endObjectRef(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // ref
  return offset;
}

static createObjectRef(builder:flatbuffers.Builder, refType:ObjectRefUnion, refOffset:flatbuffers.Offset):flatbuffers.Offset {
  ObjectRef.startObjectRef(builder);
  ObjectRef.addRefType(builder, refType);
  ObjectRef.addRef(builder, refOffset);
  return ObjectRef.endObjectRef(builder);
}
}
