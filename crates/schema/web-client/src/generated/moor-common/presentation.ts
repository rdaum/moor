// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { PresentationAttribute } from '../moor-common/presentation-attribute.js';


export class Presentation {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Presentation {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPresentation(bb:flatbuffers.ByteBuffer, obj?:Presentation):Presentation {
  return (obj || new Presentation()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPresentation(bb:flatbuffers.ByteBuffer, obj?:Presentation):Presentation {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Presentation()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

contentType():string|null
contentType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
contentType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

content():string|null
content(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
content(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

target():string|null
target(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
target(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

attributes(index: number, obj?:PresentationAttribute):PresentationAttribute|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new PresentationAttribute()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

attributesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startPresentation(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addContentType(builder:flatbuffers.Builder, contentTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, contentTypeOffset, 0);
}

static addContent(builder:flatbuffers.Builder, contentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, contentOffset, 0);
}

static addTarget(builder:flatbuffers.Builder, targetOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, targetOffset, 0);
}

static addAttributes(builder:flatbuffers.Builder, attributesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, attributesOffset, 0);
}

static createAttributesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAttributesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endPresentation(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // id
  builder.requiredField(offset, 6) // content_type
  builder.requiredField(offset, 8) // content
  builder.requiredField(offset, 10) // target
  builder.requiredField(offset, 12) // attributes
  return offset;
}

static createPresentation(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, contentTypeOffset:flatbuffers.Offset, contentOffset:flatbuffers.Offset, targetOffset:flatbuffers.Offset, attributesOffset:flatbuffers.Offset):flatbuffers.Offset {
  Presentation.startPresentation(builder);
  Presentation.addId(builder, idOffset);
  Presentation.addContentType(builder, contentTypeOffset);
  Presentation.addContent(builder, contentOffset);
  Presentation.addTarget(builder, targetOffset);
  Presentation.addAttributes(builder, attributesOffset);
  return Presentation.endPresentation(builder);
}
}
