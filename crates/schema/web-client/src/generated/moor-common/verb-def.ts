// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Obj } from '../moor-common/obj.js';
import { Symbol } from '../moor-common/symbol.js';
import { Uuid } from '../moor-common/uuid.js';
import { VerbArgsSpec } from '../moor-common/verb-args-spec.js';


export class VerbDef {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):VerbDef {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVerbDef(bb:flatbuffers.ByteBuffer, obj?:VerbDef):VerbDef {
  return (obj || new VerbDef()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVerbDef(bb:flatbuffers.ByteBuffer, obj?:VerbDef):VerbDef {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VerbDef()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

uuid(obj?:Uuid):Uuid|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Uuid()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

location(obj?:Obj):Obj|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Obj()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

owner(obj?:Obj):Obj|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Obj()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

names(index: number, obj?:Symbol):Symbol|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Symbol()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

namesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

flags():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

args(obj?:VerbArgsSpec):VerbArgsSpec|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new VerbArgsSpec()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startVerbDef(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addUuid(builder:flatbuffers.Builder, uuidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, uuidOffset, 0);
}

static addLocation(builder:flatbuffers.Builder, locationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, locationOffset, 0);
}

static addOwner(builder:flatbuffers.Builder, ownerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, ownerOffset, 0);
}

static addNames(builder:flatbuffers.Builder, namesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, namesOffset, 0);
}

static createNamesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startNamesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addFlags(builder:flatbuffers.Builder, flags:number) {
  builder.addFieldInt16(4, flags, 0);
}

static addArgs(builder:flatbuffers.Builder, argsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, argsOffset, 0);
}

static endVerbDef(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // uuid
  builder.requiredField(offset, 6) // location
  builder.requiredField(offset, 8) // owner
  builder.requiredField(offset, 10) // names
  builder.requiredField(offset, 14) // args
  return offset;
}

}
