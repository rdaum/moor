// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Obj } from '../moor-common/obj.js';
import { Symbol } from '../moor-common/symbol.js';


export class VerbInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):VerbInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVerbInfo(bb:flatbuffers.ByteBuffer, obj?:VerbInfo):VerbInfo {
  return (obj || new VerbInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVerbInfo(bb:flatbuffers.ByteBuffer, obj?:VerbInfo):VerbInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VerbInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

location(obj?:Obj):Obj|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Obj()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

owner(obj?:Obj):Obj|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Obj()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

names(index: number, obj?:Symbol):Symbol|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Symbol()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

namesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

r():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

w():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

x():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

d():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

argSpec(index: number, obj?:Symbol):Symbol|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new Symbol()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

argSpecLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startVerbInfo(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addLocation(builder:flatbuffers.Builder, locationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, locationOffset, 0);
}

static addOwner(builder:flatbuffers.Builder, ownerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, ownerOffset, 0);
}

static addNames(builder:flatbuffers.Builder, namesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, namesOffset, 0);
}

static createNamesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startNamesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addR(builder:flatbuffers.Builder, r:boolean) {
  builder.addFieldInt8(3, +r, +false);
}

static addW(builder:flatbuffers.Builder, w:boolean) {
  builder.addFieldInt8(4, +w, +false);
}

static addX(builder:flatbuffers.Builder, x:boolean) {
  builder.addFieldInt8(5, +x, +false);
}

static addD(builder:flatbuffers.Builder, d:boolean) {
  builder.addFieldInt8(6, +d, +false);
}

static addArgSpec(builder:flatbuffers.Builder, argSpecOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, argSpecOffset, 0);
}

static createArgSpecVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startArgSpecVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endVerbInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // location
  builder.requiredField(offset, 6) // owner
  builder.requiredField(offset, 8) // names
  builder.requiredField(offset, 18) // arg_spec
  return offset;
}

}
