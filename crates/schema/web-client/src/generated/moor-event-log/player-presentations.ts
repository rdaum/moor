// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { Obj } from "../moor-common/obj.js";
import { StoredPresentation } from "../moor-event-log/stored-presentation.js";

export class PlayerPresentations {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): PlayerPresentations {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsPlayerPresentations(bb: flatbuffers.ByteBuffer, obj?: PlayerPresentations): PlayerPresentations {
        return (obj || new PlayerPresentations()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsPlayerPresentations(
        bb: flatbuffers.ByteBuffer,
        obj?: PlayerPresentations,
    ): PlayerPresentations {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new PlayerPresentations()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    player(obj?: Obj): Obj | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? (obj || new Obj()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    presentations(index: number, obj?: StoredPresentation): StoredPresentation | null {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset
            ? (obj || new StoredPresentation()).__init(
                this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),
                this.bb!,
            )
            : null;
    }

    presentationsLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    static startPlayerPresentations(builder: flatbuffers.Builder) {
        builder.startObject(2);
    }

    static addPlayer(builder: flatbuffers.Builder, playerOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, playerOffset, 0);
    }

    static addPresentations(builder: flatbuffers.Builder, presentationsOffset: flatbuffers.Offset) {
        builder.addFieldOffset(1, presentationsOffset, 0);
    }

    static createPresentationsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]!);
        }
        return builder.endVector();
    }

    static startPresentationsVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(4, numElems, 4);
    }

    static endPlayerPresentations(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // player
        builder.requiredField(offset, 6); // presentations
        return offset;
    }

    static createPlayerPresentations(
        builder: flatbuffers.Builder,
        playerOffset: flatbuffers.Offset,
        presentationsOffset: flatbuffers.Offset,
    ): flatbuffers.Offset {
        PlayerPresentations.startPlayerPresentations(builder);
        PlayerPresentations.addPlayer(builder, playerOffset);
        PlayerPresentations.addPresentations(builder, presentationsOffset);
        return PlayerPresentations.endPlayerPresentations(builder);
    }
}
