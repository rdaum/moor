// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { LineSpan } from "../moor-program/line-span.js";

export class ForkLineSpans {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): ForkLineSpans {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsForkLineSpans(bb: flatbuffers.ByteBuffer, obj?: ForkLineSpans): ForkLineSpans {
        return (obj || new ForkLineSpans()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsForkLineSpans(bb: flatbuffers.ByteBuffer, obj?: ForkLineSpans): ForkLineSpans {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ForkLineSpans()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    spans(index: number, obj?: LineSpan): LineSpan | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset
            ? (obj || new LineSpan()).__init(
                this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),
                this.bb!,
            )
            : null;
    }

    spansLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    static startForkLineSpans(builder: flatbuffers.Builder) {
        builder.startObject(1);
    }

    static addSpans(builder: flatbuffers.Builder, spansOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, spansOffset, 0);
    }

    static createSpansVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]!);
        }
        return builder.endVector();
    }

    static startSpansVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(4, numElems, 4);
    }

    static endForkLineSpans(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // spans
        return offset;
    }

    static createForkLineSpans(builder: flatbuffers.Builder, spansOffset: flatbuffers.Offset): flatbuffers.Offset {
        ForkLineSpans.startForkLineSpans(builder);
        ForkLineSpans.addSpans(builder, spansOffset);
        return ForkLineSpans.endForkLineSpans(builder);
    }
}
