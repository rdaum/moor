// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

export class LineSpan {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): LineSpan {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsLineSpan(bb: flatbuffers.ByteBuffer, obj?: LineSpan): LineSpan {
        return (obj || new LineSpan()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsLineSpan(bb: flatbuffers.ByteBuffer, obj?: LineSpan): LineSpan {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new LineSpan()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    offset(): bigint {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
    }

    lineNumber(): bigint {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
    }

    static startLineSpan(builder: flatbuffers.Builder) {
        builder.startObject(2);
    }

    static addOffset(builder: flatbuffers.Builder, offset: bigint) {
        builder.addFieldInt64(0, offset, BigInt("0"));
    }

    static addLineNumber(builder: flatbuffers.Builder, lineNumber: bigint) {
        builder.addFieldInt64(1, lineNumber, BigInt("0"));
    }

    static endLineSpan(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        return offset;
    }

    static createLineSpan(builder: flatbuffers.Builder, offset: bigint, lineNumber: bigint): flatbuffers.Offset {
        LineSpan.startLineSpan(builder);
        LineSpan.addOffset(builder, offset);
        LineSpan.addLineNumber(builder, lineNumber);
        return LineSpan.endLineSpan(builder);
    }
}
