// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { StoredName } from "../moor-program/stored-name.js";

export class StoredForRangeOperand {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): StoredForRangeOperand {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsStoredForRangeOperand(
        bb: flatbuffers.ByteBuffer,
        obj?: StoredForRangeOperand,
    ): StoredForRangeOperand {
        return (obj || new StoredForRangeOperand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsStoredForRangeOperand(
        bb: flatbuffers.ByteBuffer,
        obj?: StoredForRangeOperand,
    ): StoredForRangeOperand {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new StoredForRangeOperand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    loopVariable(obj?: StoredName): StoredName | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? (obj || new StoredName()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    endLabel(): number {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
    }

    environmentWidth(): number {
        const offset = this.bb!.__offset(this.bb_pos, 8);
        return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
    }

    static startStoredForRangeOperand(builder: flatbuffers.Builder) {
        builder.startObject(3);
    }

    static addLoopVariable(builder: flatbuffers.Builder, loopVariableOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, loopVariableOffset, 0);
    }

    static addEndLabel(builder: flatbuffers.Builder, endLabel: number) {
        builder.addFieldInt16(1, endLabel, 0);
    }

    static addEnvironmentWidth(builder: flatbuffers.Builder, environmentWidth: number) {
        builder.addFieldInt16(2, environmentWidth, 0);
    }

    static endStoredForRangeOperand(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // loop_variable
        return offset;
    }

    static createStoredForRangeOperand(
        builder: flatbuffers.Builder,
        loopVariableOffset: flatbuffers.Offset,
        endLabel: number,
        environmentWidth: number,
    ): flatbuffers.Offset {
        StoredForRangeOperand.startStoredForRangeOperand(builder);
        StoredForRangeOperand.addLoopVariable(builder, loopVariableOffset);
        StoredForRangeOperand.addEndLabel(builder, endLabel);
        StoredForRangeOperand.addEnvironmentWidth(builder, environmentWidth);
        return StoredForRangeOperand.endStoredForRangeOperand(builder);
    }
}
