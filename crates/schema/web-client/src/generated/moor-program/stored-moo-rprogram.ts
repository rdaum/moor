// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Symbol } from '../moor-common/symbol.js';
import { ForkLineSpans } from '../moor-program/fork-line-spans.js';
import { ForkVector } from '../moor-program/fork-vector.js';
import { LineSpan } from '../moor-program/line-span.js';
import { StoredForRangeOperand } from '../moor-program/stored-for-range-operand.js';
import { StoredForSequenceOperand } from '../moor-program/stored-for-sequence-operand.js';
import { StoredJumpLabel } from '../moor-program/stored-jump-label.js';
import { StoredListComprehend } from '../moor-program/stored-list-comprehend.js';
import { StoredNames } from '../moor-program/stored-names.js';
import { StoredRangeComprehend } from '../moor-program/stored-range-comprehend.js';
import { StoredScatterArgs } from '../moor-program/stored-scatter-args.js';
import { Var } from '../moor-var/var.js';


export class StoredMooRProgram {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):StoredMooRProgram {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsStoredMooRProgram(bb:flatbuffers.ByteBuffer, obj?:StoredMooRProgram):StoredMooRProgram {
  return (obj || new StoredMooRProgram()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsStoredMooRProgram(bb:flatbuffers.ByteBuffer, obj?:StoredMooRProgram):StoredMooRProgram {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new StoredMooRProgram()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

version():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

mainVector(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb!.__vector(this.bb_pos + offset) + index * 2) : 0;
}

mainVectorLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

mainVectorArray():Uint16Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint16Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

forkVectors(index: number, obj?:ForkVector):ForkVector|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new ForkVector()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

forkVectorsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

literals(index: number, obj?:Var):Var|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Var()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

literalsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

jumpLabels(index: number, obj?:StoredJumpLabel):StoredJumpLabel|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new StoredJumpLabel()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

jumpLabelsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

varNames(obj?:StoredNames):StoredNames|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new StoredNames()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

symbolTable(index: number, obj?:Symbol):Symbol|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new Symbol()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

symbolTableLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

scatterTables(index: number, obj?:StoredScatterArgs):StoredScatterArgs|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new StoredScatterArgs()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

scatterTablesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

forSequenceOperands(index: number, obj?:StoredForSequenceOperand):StoredForSequenceOperand|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? (obj || new StoredForSequenceOperand()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

forSequenceOperandsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

forRangeOperands(index: number, obj?:StoredForRangeOperand):StoredForRangeOperand|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? (obj || new StoredForRangeOperand()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

forRangeOperandsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

rangeComprehensions(index: number, obj?:StoredRangeComprehend):StoredRangeComprehend|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? (obj || new StoredRangeComprehend()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

rangeComprehensionsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

listComprehensions(index: number, obj?:StoredListComprehend):StoredListComprehend|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? (obj || new StoredListComprehend()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

listComprehensionsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

errorOperands(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

errorOperandsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

errorOperandsArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

lambdaPrograms(index: number, obj?:StoredMooRProgram):StoredMooRProgram|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? (obj || new StoredMooRProgram()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

lambdaProgramsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

lineNumberSpans(index: number, obj?:LineSpan):LineSpan|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? (obj || new LineSpan()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

lineNumberSpansLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

forkLineNumberSpans(index: number, obj?:ForkLineSpans):ForkLineSpans|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? (obj || new ForkLineSpans()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

forkLineNumberSpansLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startStoredMooRProgram(builder:flatbuffers.Builder) {
  builder.startObject(16);
}

static addVersion(builder:flatbuffers.Builder, version:number) {
  builder.addFieldInt16(0, version, 0);
}

static addMainVector(builder:flatbuffers.Builder, mainVectorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, mainVectorOffset, 0);
}

static createMainVectorVector(builder:flatbuffers.Builder, data:number[]|Uint16Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createMainVectorVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createMainVectorVector(builder:flatbuffers.Builder, data:number[]|Uint16Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(2, data.length, 2);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt16(data[i]!);
  }
  return builder.endVector();
}

static startMainVectorVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(2, numElems, 2);
}

static addForkVectors(builder:flatbuffers.Builder, forkVectorsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, forkVectorsOffset, 0);
}

static createForkVectorsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startForkVectorsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLiterals(builder:flatbuffers.Builder, literalsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, literalsOffset, 0);
}

static createLiteralsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLiteralsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addJumpLabels(builder:flatbuffers.Builder, jumpLabelsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, jumpLabelsOffset, 0);
}

static createJumpLabelsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startJumpLabelsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addVarNames(builder:flatbuffers.Builder, varNamesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, varNamesOffset, 0);
}

static addSymbolTable(builder:flatbuffers.Builder, symbolTableOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, symbolTableOffset, 0);
}

static createSymbolTableVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSymbolTableVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addScatterTables(builder:flatbuffers.Builder, scatterTablesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, scatterTablesOffset, 0);
}

static createScatterTablesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startScatterTablesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addForSequenceOperands(builder:flatbuffers.Builder, forSequenceOperandsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, forSequenceOperandsOffset, 0);
}

static createForSequenceOperandsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startForSequenceOperandsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addForRangeOperands(builder:flatbuffers.Builder, forRangeOperandsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, forRangeOperandsOffset, 0);
}

static createForRangeOperandsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startForRangeOperandsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRangeComprehensions(builder:flatbuffers.Builder, rangeComprehensionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, rangeComprehensionsOffset, 0);
}

static createRangeComprehensionsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRangeComprehensionsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addListComprehensions(builder:flatbuffers.Builder, listComprehensionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, listComprehensionsOffset, 0);
}

static createListComprehensionsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startListComprehensionsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addErrorOperands(builder:flatbuffers.Builder, errorOperandsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, errorOperandsOffset, 0);
}

static createErrorOperandsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startErrorOperandsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addLambdaPrograms(builder:flatbuffers.Builder, lambdaProgramsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, lambdaProgramsOffset, 0);
}

static createLambdaProgramsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLambdaProgramsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLineNumberSpans(builder:flatbuffers.Builder, lineNumberSpansOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, lineNumberSpansOffset, 0);
}

static createLineNumberSpansVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLineNumberSpansVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addForkLineNumberSpans(builder:flatbuffers.Builder, forkLineNumberSpansOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, forkLineNumberSpansOffset, 0);
}

static createForkLineNumberSpansVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startForkLineNumberSpansVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endStoredMooRProgram(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // main_vector
  builder.requiredField(offset, 8) // fork_vectors
  builder.requiredField(offset, 10) // literals
  builder.requiredField(offset, 12) // jump_labels
  builder.requiredField(offset, 14) // var_names
  builder.requiredField(offset, 16) // symbol_table
  builder.requiredField(offset, 18) // scatter_tables
  builder.requiredField(offset, 20) // for_sequence_operands
  builder.requiredField(offset, 22) // for_range_operands
  builder.requiredField(offset, 24) // range_comprehensions
  builder.requiredField(offset, 26) // list_comprehensions
  builder.requiredField(offset, 28) // error_operands
  builder.requiredField(offset, 30) // lambda_programs
  builder.requiredField(offset, 32) // line_number_spans
  builder.requiredField(offset, 34) // fork_line_number_spans
  return offset;
}

}
