// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

export class StoredName {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): StoredName {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsStoredName(bb: flatbuffers.ByteBuffer, obj?: StoredName): StoredName {
        return (obj || new StoredName()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsStoredName(bb: flatbuffers.ByteBuffer, obj?: StoredName): StoredName {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new StoredName()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    offset(): number {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
    }

    scopeDepth(): number {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
    }

    scopeId(): number {
        const offset = this.bb!.__offset(this.bb_pos, 8);
        return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
    }

    static startStoredName(builder: flatbuffers.Builder) {
        builder.startObject(3);
    }

    static addOffset(builder: flatbuffers.Builder, offset: number) {
        builder.addFieldInt16(0, offset, 0);
    }

    static addScopeDepth(builder: flatbuffers.Builder, scopeDepth: number) {
        builder.addFieldInt8(1, scopeDepth, 0);
    }

    static addScopeId(builder: flatbuffers.Builder, scopeId: number) {
        builder.addFieldInt16(2, scopeId, 0);
    }

    static endStoredName(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        return offset;
    }

    static createStoredName(
        builder: flatbuffers.Builder,
        offset: number,
        scopeDepth: number,
        scopeId: number,
    ): flatbuffers.Offset {
        StoredName.startStoredName(builder);
        StoredName.addOffset(builder, offset);
        StoredName.addScopeDepth(builder, scopeDepth);
        StoredName.addScopeId(builder, scopeId);
        return StoredName.endStoredName(builder);
    }
}
