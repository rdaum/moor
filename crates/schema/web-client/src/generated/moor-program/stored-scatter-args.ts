// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { StoredScatterLabel } from "../moor-program/stored-scatter-label.js";

export class StoredScatterArgs {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): StoredScatterArgs {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsStoredScatterArgs(bb: flatbuffers.ByteBuffer, obj?: StoredScatterArgs): StoredScatterArgs {
        return (obj || new StoredScatterArgs()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsStoredScatterArgs(
        bb: flatbuffers.ByteBuffer,
        obj?: StoredScatterArgs,
    ): StoredScatterArgs {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new StoredScatterArgs()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    labels(index: number, obj?: StoredScatterLabel): StoredScatterLabel | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset
            ? (obj || new StoredScatterLabel()).__init(
                this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),
                this.bb!,
            )
            : null;
    }

    labelsLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    done(): number {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
    }

    static startStoredScatterArgs(builder: flatbuffers.Builder) {
        builder.startObject(2);
    }

    static addLabels(builder: flatbuffers.Builder, labelsOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, labelsOffset, 0);
    }

    static createLabelsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]!);
        }
        return builder.endVector();
    }

    static startLabelsVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(4, numElems, 4);
    }

    static addDone(builder: flatbuffers.Builder, done: number) {
        builder.addFieldInt16(1, done, 0);
    }

    static endStoredScatterArgs(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // labels
        return offset;
    }

    static createStoredScatterArgs(
        builder: flatbuffers.Builder,
        labelsOffset: flatbuffers.Offset,
        done: number,
    ): flatbuffers.Offset {
        StoredScatterArgs.startStoredScatterArgs(builder);
        StoredScatterArgs.addLabels(builder, labelsOffset);
        StoredScatterArgs.addDone(builder, done);
        return StoredScatterArgs.endStoredScatterArgs(builder);
    }
}
