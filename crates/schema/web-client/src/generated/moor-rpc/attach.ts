// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Obj } from '../moor-common/obj.js';
import { Symbol } from '../moor-common/symbol.js';
import { AuthToken } from '../moor-rpc/auth-token.js';
import { ConnectType } from '../moor-rpc/connect-type.js';


export class Attach {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Attach {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAttach(bb:flatbuffers.ByteBuffer, obj?:Attach):Attach {
  return (obj || new Attach()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAttach(bb:flatbuffers.ByteBuffer, obj?:Attach):Attach {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Attach()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

authToken(obj?:AuthToken):AuthToken|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new AuthToken()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

connectType():ConnectType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : ConnectType.Connected;
}

handlerObject(obj?:Obj):Obj|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Obj()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

peerAddr():string|null
peerAddr(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
peerAddr(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

localPort():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

remotePort():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

acceptableContentTypes(index: number, obj?:Symbol):Symbol|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new Symbol()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

acceptableContentTypesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startAttach(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addAuthToken(builder:flatbuffers.Builder, authTokenOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, authTokenOffset, 0);
}

static addConnectType(builder:flatbuffers.Builder, connectType:ConnectType) {
  builder.addFieldInt8(1, connectType, ConnectType.Connected);
}

static addHandlerObject(builder:flatbuffers.Builder, handlerObjectOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, handlerObjectOffset, 0);
}

static addPeerAddr(builder:flatbuffers.Builder, peerAddrOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, peerAddrOffset, 0);
}

static addLocalPort(builder:flatbuffers.Builder, localPort:number) {
  builder.addFieldInt16(4, localPort, 0);
}

static addRemotePort(builder:flatbuffers.Builder, remotePort:number) {
  builder.addFieldInt16(5, remotePort, 0);
}

static addAcceptableContentTypes(builder:flatbuffers.Builder, acceptableContentTypesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, acceptableContentTypesOffset, 0);
}

static createAcceptableContentTypesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAcceptableContentTypesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endAttach(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // auth_token
  builder.requiredField(offset, 8) // handler_object
  builder.requiredField(offset, 10) // peer_addr
  return offset;
}

}
