// automatically generated by the FlatBuffers compiler, do not modify

import { DisconnectEvent } from "../moor-rpc/disconnect-event.js";
import { NarrativeEventMessage } from "../moor-rpc/narrative-event-message.js";
import { PlayerSwitchedEvent } from "../moor-rpc/player-switched-event.js";
import { RequestInputEvent } from "../moor-rpc/request-input-event.js";
import { SetConnectionOptionEvent } from "../moor-rpc/set-connection-option-event.js";
import { SystemMessageEvent } from "../moor-rpc/system-message-event.js";
import { TaskErrorEvent } from "../moor-rpc/task-error-event.js";
import { TaskSuccessEvent } from "../moor-rpc/task-success-event.js";
import { TaskSuspendedEvent } from "../moor-rpc/task-suspended-event.js";

export enum ClientEventUnion {
    NONE = 0,
    NarrativeEventMessage = 1,
    RequestInputEvent = 2,
    SystemMessageEvent = 3,
    DisconnectEvent = 4,
    TaskErrorEvent = 5,
    TaskSuccessEvent = 6,
    TaskSuspendedEvent = 7,
    PlayerSwitchedEvent = 8,
    SetConnectionOptionEvent = 9,
}

export function unionToClientEventUnion(
    type: ClientEventUnion,
    accessor: (
        obj:
            | DisconnectEvent
            | NarrativeEventMessage
            | PlayerSwitchedEvent
            | RequestInputEvent
            | SetConnectionOptionEvent
            | SystemMessageEvent
            | TaskErrorEvent
            | TaskSuccessEvent
            | TaskSuspendedEvent,
    ) =>
        | DisconnectEvent
        | NarrativeEventMessage
        | PlayerSwitchedEvent
        | RequestInputEvent
        | SetConnectionOptionEvent
        | SystemMessageEvent
        | TaskErrorEvent
        | TaskSuccessEvent
        | TaskSuspendedEvent
        | null,
):
    | DisconnectEvent
    | NarrativeEventMessage
    | PlayerSwitchedEvent
    | RequestInputEvent
    | SetConnectionOptionEvent
    | SystemMessageEvent
    | TaskErrorEvent
    | TaskSuccessEvent
    | TaskSuspendedEvent
    | null
{
    switch (ClientEventUnion[type]) {
        case "NONE":
            return null;
        case "NarrativeEventMessage":
            return accessor(new NarrativeEventMessage())! as NarrativeEventMessage;
        case "RequestInputEvent":
            return accessor(new RequestInputEvent())! as RequestInputEvent;
        case "SystemMessageEvent":
            return accessor(new SystemMessageEvent())! as SystemMessageEvent;
        case "DisconnectEvent":
            return accessor(new DisconnectEvent())! as DisconnectEvent;
        case "TaskErrorEvent":
            return accessor(new TaskErrorEvent())! as TaskErrorEvent;
        case "TaskSuccessEvent":
            return accessor(new TaskSuccessEvent())! as TaskSuccessEvent;
        case "TaskSuspendedEvent":
            return accessor(new TaskSuspendedEvent())! as TaskSuspendedEvent;
        case "PlayerSwitchedEvent":
            return accessor(new PlayerSwitchedEvent())! as PlayerSwitchedEvent;
        case "SetConnectionOptionEvent":
            return accessor(new SetConnectionOptionEvent())! as SetConnectionOptionEvent;
        default:
            return null;
    }
}

export function unionListToClientEventUnion(
    type: ClientEventUnion,
    accessor: (
        index: number,
        obj:
            | DisconnectEvent
            | NarrativeEventMessage
            | PlayerSwitchedEvent
            | RequestInputEvent
            | SetConnectionOptionEvent
            | SystemMessageEvent
            | TaskErrorEvent
            | TaskSuccessEvent
            | TaskSuspendedEvent,
    ) =>
        | DisconnectEvent
        | NarrativeEventMessage
        | PlayerSwitchedEvent
        | RequestInputEvent
        | SetConnectionOptionEvent
        | SystemMessageEvent
        | TaskErrorEvent
        | TaskSuccessEvent
        | TaskSuspendedEvent
        | null,
    index: number,
):
    | DisconnectEvent
    | NarrativeEventMessage
    | PlayerSwitchedEvent
    | RequestInputEvent
    | SetConnectionOptionEvent
    | SystemMessageEvent
    | TaskErrorEvent
    | TaskSuccessEvent
    | TaskSuspendedEvent
    | null
{
    switch (ClientEventUnion[type]) {
        case "NONE":
            return null;
        case "NarrativeEventMessage":
            return accessor(index, new NarrativeEventMessage())! as NarrativeEventMessage;
        case "RequestInputEvent":
            return accessor(index, new RequestInputEvent())! as RequestInputEvent;
        case "SystemMessageEvent":
            return accessor(index, new SystemMessageEvent())! as SystemMessageEvent;
        case "DisconnectEvent":
            return accessor(index, new DisconnectEvent())! as DisconnectEvent;
        case "TaskErrorEvent":
            return accessor(index, new TaskErrorEvent())! as TaskErrorEvent;
        case "TaskSuccessEvent":
            return accessor(index, new TaskSuccessEvent())! as TaskSuccessEvent;
        case "TaskSuspendedEvent":
            return accessor(index, new TaskSuspendedEvent())! as TaskSuspendedEvent;
        case "PlayerSwitchedEvent":
            return accessor(index, new PlayerSwitchedEvent())! as PlayerSwitchedEvent;
        case "SetConnectionOptionEvent":
            return accessor(index, new SetConnectionOptionEvent())! as SetConnectionOptionEvent;
        default:
            return null;
    }
}
