// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Symbol } from '../moor-common/symbol.js';


export class Counter {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Counter {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCounter(bb:flatbuffers.ByteBuffer, obj?:Counter):Counter {
  return (obj || new Counter()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCounter(bb:flatbuffers.ByteBuffer, obj?:Counter):Counter {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Counter()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name(obj?:Symbol):Symbol|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Symbol()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

count():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

totalCumulativeNs():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

static startCounter(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addCount(builder:flatbuffers.Builder, count:bigint) {
  builder.addFieldInt64(1, count, BigInt('0'));
}

static addTotalCumulativeNs(builder:flatbuffers.Builder, totalCumulativeNs:bigint) {
  builder.addFieldInt64(2, totalCumulativeNs, BigInt('0'));
}

static endCounter(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // name
  return offset;
}

static createCounter(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, count:bigint, totalCumulativeNs:bigint):flatbuffers.Offset {
  Counter.startCounter(builder);
  Counter.addName(builder, nameOffset);
  Counter.addCount(builder, count);
  Counter.addTotalCumulativeNs(builder, totalCumulativeNs);
  return Counter.endCounter(builder);
}
}
