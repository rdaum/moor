// automatically generated by the FlatBuffers compiler, do not modify

import { DaemonToHostAck } from "../moor-rpc/daemon-to-host-ack.js";
import { DaemonToHostPerfCounters } from "../moor-rpc/daemon-to-host-perf-counters.js";
import { DaemonToHostReject } from "../moor-rpc/daemon-to-host-reject.js";

export enum DaemonToHostReplyUnion {
    NONE = 0,
    DaemonToHostAck = 1,
    DaemonToHostReject = 2,
    DaemonToHostPerfCounters = 3,
}

export function unionToDaemonToHostReplyUnion(
    type: DaemonToHostReplyUnion,
    accessor: (
        obj: DaemonToHostAck | DaemonToHostPerfCounters | DaemonToHostReject,
    ) => DaemonToHostAck | DaemonToHostPerfCounters | DaemonToHostReject | null,
): DaemonToHostAck | DaemonToHostPerfCounters | DaemonToHostReject | null {
    switch (DaemonToHostReplyUnion[type]) {
        case "NONE":
            return null;
        case "DaemonToHostAck":
            return accessor(new DaemonToHostAck())! as DaemonToHostAck;
        case "DaemonToHostReject":
            return accessor(new DaemonToHostReject())! as DaemonToHostReject;
        case "DaemonToHostPerfCounters":
            return accessor(new DaemonToHostPerfCounters())! as DaemonToHostPerfCounters;
        default:
            return null;
    }
}

export function unionListToDaemonToHostReplyUnion(
    type: DaemonToHostReplyUnion,
    accessor: (
        index: number,
        obj: DaemonToHostAck | DaemonToHostPerfCounters | DaemonToHostReject,
    ) => DaemonToHostAck | DaemonToHostPerfCounters | DaemonToHostReject | null,
    index: number,
): DaemonToHostAck | DaemonToHostPerfCounters | DaemonToHostReject | null {
    switch (DaemonToHostReplyUnion[type]) {
        case "NONE":
            return null;
        case "DaemonToHostAck":
            return accessor(index, new DaemonToHostAck())! as DaemonToHostAck;
        case "DaemonToHostReject":
            return accessor(index, new DaemonToHostReject())! as DaemonToHostReject;
        case "DaemonToHostPerfCounters":
            return accessor(index, new DaemonToHostPerfCounters())! as DaemonToHostPerfCounters;
        default:
            return null;
    }
}
