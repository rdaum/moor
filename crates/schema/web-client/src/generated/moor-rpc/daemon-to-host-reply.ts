// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import {
    DaemonToHostReplyUnion,
    unionListToDaemonToHostReplyUnion,
    unionToDaemonToHostReplyUnion,
} from "../moor-rpc/daemon-to-host-reply-union.js";

export class DaemonToHostReply {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): DaemonToHostReply {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsDaemonToHostReply(bb: flatbuffers.ByteBuffer, obj?: DaemonToHostReply): DaemonToHostReply {
        return (obj || new DaemonToHostReply()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsDaemonToHostReply(
        bb: flatbuffers.ByteBuffer,
        obj?: DaemonToHostReply,
    ): DaemonToHostReply {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new DaemonToHostReply()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    replyType(): DaemonToHostReplyUnion {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.readUint8(this.bb_pos + offset) : DaemonToHostReplyUnion.NONE;
    }

    reply<T extends flatbuffers.Table>(obj: any): any | null {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
    }

    static startDaemonToHostReply(builder: flatbuffers.Builder) {
        builder.startObject(2);
    }

    static addReplyType(builder: flatbuffers.Builder, replyType: DaemonToHostReplyUnion) {
        builder.addFieldInt8(0, replyType, DaemonToHostReplyUnion.NONE);
    }

    static addReply(builder: flatbuffers.Builder, replyOffset: flatbuffers.Offset) {
        builder.addFieldOffset(1, replyOffset, 0);
    }

    static endDaemonToHostReply(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 6); // reply
        return offset;
    }

    static createDaemonToHostReply(
        builder: flatbuffers.Builder,
        replyType: DaemonToHostReplyUnion,
        replyOffset: flatbuffers.Offset,
    ): flatbuffers.Offset {
        DaemonToHostReply.startDaemonToHostReply(builder);
        DaemonToHostReply.addReplyType(builder, replyType);
        DaemonToHostReply.addReply(builder, replyOffset);
        return DaemonToHostReply.endDaemonToHostReply(builder);
    }
}
