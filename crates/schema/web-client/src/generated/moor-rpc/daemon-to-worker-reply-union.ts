// automatically generated by the FlatBuffers compiler, do not modify

import { WorkerAck } from '../moor-rpc/worker-ack.js';
import { WorkerAttached } from '../moor-rpc/worker-attached.js';
import { WorkerAuthFailed } from '../moor-rpc/worker-auth-failed.js';
import { WorkerInvalidPayload } from '../moor-rpc/worker-invalid-payload.js';
import { WorkerNotRegistered } from '../moor-rpc/worker-not-registered.js';
import { WorkerRejected } from '../moor-rpc/worker-rejected.js';
import { WorkerUnknownRequest } from '../moor-rpc/worker-unknown-request.js';


export enum DaemonToWorkerReplyUnion {
  NONE = 0,
  WorkerAck = 1,
  WorkerRejected = 2,
  WorkerAttached = 3,
  WorkerAuthFailed = 4,
  WorkerInvalidPayload = 5,
  WorkerUnknownRequest = 6,
  WorkerNotRegistered = 7
}

export function unionToDaemonToWorkerReplyUnion(
  type: DaemonToWorkerReplyUnion,
  accessor: (obj:WorkerAck|WorkerAttached|WorkerAuthFailed|WorkerInvalidPayload|WorkerNotRegistered|WorkerRejected|WorkerUnknownRequest) => WorkerAck|WorkerAttached|WorkerAuthFailed|WorkerInvalidPayload|WorkerNotRegistered|WorkerRejected|WorkerUnknownRequest|null
): WorkerAck|WorkerAttached|WorkerAuthFailed|WorkerInvalidPayload|WorkerNotRegistered|WorkerRejected|WorkerUnknownRequest|null {
  switch(DaemonToWorkerReplyUnion[type]) {
    case 'NONE': return null; 
    case 'WorkerAck': return accessor(new WorkerAck())! as WorkerAck;
    case 'WorkerRejected': return accessor(new WorkerRejected())! as WorkerRejected;
    case 'WorkerAttached': return accessor(new WorkerAttached())! as WorkerAttached;
    case 'WorkerAuthFailed': return accessor(new WorkerAuthFailed())! as WorkerAuthFailed;
    case 'WorkerInvalidPayload': return accessor(new WorkerInvalidPayload())! as WorkerInvalidPayload;
    case 'WorkerUnknownRequest': return accessor(new WorkerUnknownRequest())! as WorkerUnknownRequest;
    case 'WorkerNotRegistered': return accessor(new WorkerNotRegistered())! as WorkerNotRegistered;
    default: return null;
  }
}

export function unionListToDaemonToWorkerReplyUnion(
  type: DaemonToWorkerReplyUnion, 
  accessor: (index: number, obj:WorkerAck|WorkerAttached|WorkerAuthFailed|WorkerInvalidPayload|WorkerNotRegistered|WorkerRejected|WorkerUnknownRequest) => WorkerAck|WorkerAttached|WorkerAuthFailed|WorkerInvalidPayload|WorkerNotRegistered|WorkerRejected|WorkerUnknownRequest|null, 
  index: number
): WorkerAck|WorkerAttached|WorkerAuthFailed|WorkerInvalidPayload|WorkerNotRegistered|WorkerRejected|WorkerUnknownRequest|null {
  switch(DaemonToWorkerReplyUnion[type]) {
    case 'NONE': return null; 
    case 'WorkerAck': return accessor(index, new WorkerAck())! as WorkerAck;
    case 'WorkerRejected': return accessor(index, new WorkerRejected())! as WorkerRejected;
    case 'WorkerAttached': return accessor(index, new WorkerAttached())! as WorkerAttached;
    case 'WorkerAuthFailed': return accessor(index, new WorkerAuthFailed())! as WorkerAuthFailed;
    case 'WorkerInvalidPayload': return accessor(index, new WorkerInvalidPayload())! as WorkerInvalidPayload;
    case 'WorkerUnknownRequest': return accessor(index, new WorkerUnknownRequest())! as WorkerUnknownRequest;
    case 'WorkerNotRegistered': return accessor(index, new WorkerNotRegistered())! as WorkerNotRegistered;
    default: return null;
  }
}
