// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ClientToken } from '../moor-rpc/client-token.js';


export class Detach {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Detach {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDetach(bb:flatbuffers.ByteBuffer, obj?:Detach):Detach {
  return (obj || new Detach()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDetach(bb:flatbuffers.ByteBuffer, obj?:Detach):Detach {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Detach()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

clientToken(obj?:ClientToken):ClientToken|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new ClientToken()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

disconnected():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startDetach(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addClientToken(builder:flatbuffers.Builder, clientTokenOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, clientTokenOffset, 0);
}

static addDisconnected(builder:flatbuffers.Builder, disconnected:boolean) {
  builder.addFieldInt8(1, +disconnected, +false);
}

static endDetach(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // client_token
  return offset;
}

static createDetach(builder:flatbuffers.Builder, clientTokenOffset:flatbuffers.Offset, disconnected:boolean):flatbuffers.Offset {
  Detach.startDetach(builder);
  Detach.addClientToken(builder, clientTokenOffset);
  Detach.addDisconnected(builder, disconnected);
  return Detach.endDetach(builder);
}
}
