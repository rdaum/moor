// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import {
    HistoryRecallUnion,
    unionListToHistoryRecallUnion,
    unionToHistoryRecallUnion,
} from "../moor-rpc/history-recall-union.js";

export class HistoryRecall {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): HistoryRecall {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsHistoryRecall(bb: flatbuffers.ByteBuffer, obj?: HistoryRecall): HistoryRecall {
        return (obj || new HistoryRecall()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsHistoryRecall(bb: flatbuffers.ByteBuffer, obj?: HistoryRecall): HistoryRecall {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new HistoryRecall()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    recallType(): HistoryRecallUnion {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.readUint8(this.bb_pos + offset) : HistoryRecallUnion.NONE;
    }

    recall<T extends flatbuffers.Table>(obj: any): any | null {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
    }

    static startHistoryRecall(builder: flatbuffers.Builder) {
        builder.startObject(2);
    }

    static addRecallType(builder: flatbuffers.Builder, recallType: HistoryRecallUnion) {
        builder.addFieldInt8(0, recallType, HistoryRecallUnion.NONE);
    }

    static addRecall(builder: flatbuffers.Builder, recallOffset: flatbuffers.Offset) {
        builder.addFieldOffset(1, recallOffset, 0);
    }

    static endHistoryRecall(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 6); // recall
        return offset;
    }

    static createHistoryRecall(
        builder: flatbuffers.Builder,
        recallType: HistoryRecallUnion,
        recallOffset: flatbuffers.Offset,
    ): flatbuffers.Offset {
        HistoryRecall.startHistoryRecall(builder);
        HistoryRecall.addRecallType(builder, recallType);
        HistoryRecall.addRecall(builder, recallOffset);
        return HistoryRecall.endHistoryRecall(builder);
    }
}
