// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { Uuid } from "../moor-common/uuid.js";
import { HistoricalNarrativeEvent } from "../moor-rpc/historical-narrative-event.js";

export class HistoryResponse {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): HistoryResponse {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsHistoryResponse(bb: flatbuffers.ByteBuffer, obj?: HistoryResponse): HistoryResponse {
        return (obj || new HistoryResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsHistoryResponse(bb: flatbuffers.ByteBuffer, obj?: HistoryResponse): HistoryResponse {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new HistoryResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    events(index: number, obj?: HistoricalNarrativeEvent): HistoricalNarrativeEvent | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset
            ? (obj || new HistoricalNarrativeEvent()).__init(
                this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),
                this.bb!,
            )
            : null;
    }

    eventsLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    timeRangeStart(): bigint {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
    }

    timeRangeEnd(): bigint {
        const offset = this.bb!.__offset(this.bb_pos, 8);
        return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
    }

    totalEvents(): bigint {
        const offset = this.bb!.__offset(this.bb_pos, 10);
        return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
    }

    hasMoreBefore(): boolean {
        const offset = this.bb!.__offset(this.bb_pos, 12);
        return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
    }

    earliestEventId(obj?: Uuid): Uuid | null {
        const offset = this.bb!.__offset(this.bb_pos, 14);
        return offset ? (obj || new Uuid()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    latestEventId(obj?: Uuid): Uuid | null {
        const offset = this.bb!.__offset(this.bb_pos, 16);
        return offset ? (obj || new Uuid()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    static startHistoryResponse(builder: flatbuffers.Builder) {
        builder.startObject(7);
    }

    static addEvents(builder: flatbuffers.Builder, eventsOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, eventsOffset, 0);
    }

    static createEventsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]!);
        }
        return builder.endVector();
    }

    static startEventsVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(4, numElems, 4);
    }

    static addTimeRangeStart(builder: flatbuffers.Builder, timeRangeStart: bigint) {
        builder.addFieldInt64(1, timeRangeStart, BigInt("0"));
    }

    static addTimeRangeEnd(builder: flatbuffers.Builder, timeRangeEnd: bigint) {
        builder.addFieldInt64(2, timeRangeEnd, BigInt("0"));
    }

    static addTotalEvents(builder: flatbuffers.Builder, totalEvents: bigint) {
        builder.addFieldInt64(3, totalEvents, BigInt("0"));
    }

    static addHasMoreBefore(builder: flatbuffers.Builder, hasMoreBefore: boolean) {
        builder.addFieldInt8(4, +hasMoreBefore, +false);
    }

    static addEarliestEventId(builder: flatbuffers.Builder, earliestEventIdOffset: flatbuffers.Offset) {
        builder.addFieldOffset(5, earliestEventIdOffset, 0);
    }

    static addLatestEventId(builder: flatbuffers.Builder, latestEventIdOffset: flatbuffers.Offset) {
        builder.addFieldOffset(6, latestEventIdOffset, 0);
    }

    static endHistoryResponse(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // events
        return offset;
    }
}
