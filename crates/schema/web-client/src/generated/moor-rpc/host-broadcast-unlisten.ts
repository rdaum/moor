// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { HostType } from "../moor-rpc/host-type.js";

export class HostBroadcastUnlisten {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): HostBroadcastUnlisten {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsHostBroadcastUnlisten(
        bb: flatbuffers.ByteBuffer,
        obj?: HostBroadcastUnlisten,
    ): HostBroadcastUnlisten {
        return (obj || new HostBroadcastUnlisten()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsHostBroadcastUnlisten(
        bb: flatbuffers.ByteBuffer,
        obj?: HostBroadcastUnlisten,
    ): HostBroadcastUnlisten {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new HostBroadcastUnlisten()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    hostType(): HostType {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.readUint8(this.bb_pos + offset) : HostType.TCP;
    }

    port(): number {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
    }

    static startHostBroadcastUnlisten(builder: flatbuffers.Builder) {
        builder.startObject(2);
    }

    static addHostType(builder: flatbuffers.Builder, hostType: HostType) {
        builder.addFieldInt8(0, hostType, HostType.TCP);
    }

    static addPort(builder: flatbuffers.Builder, port: number) {
        builder.addFieldInt16(1, port, 0);
    }

    static endHostBroadcastUnlisten(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        return offset;
    }

    static createHostBroadcastUnlisten(
        builder: flatbuffers.Builder,
        hostType: HostType,
        port: number,
    ): flatbuffers.Offset {
        HostBroadcastUnlisten.startHostBroadcastUnlisten(builder);
        HostBroadcastUnlisten.addHostType(builder, hostType);
        HostBroadcastUnlisten.addPort(builder, port);
        return HostBroadcastUnlisten.endHostBroadcastUnlisten(builder);
    }
}
