// automatically generated by the FlatBuffers compiler, do not modify

import { DetachHost } from "../moor-rpc/detach-host.js";
import { HostPong } from "../moor-rpc/host-pong.js";
import { RegisterHost } from "../moor-rpc/register-host.js";
import { RequestPerformanceCounters } from "../moor-rpc/request-performance-counters.js";

export enum HostToDaemonMessageUnion {
    NONE = 0,
    RegisterHost = 1,
    DetachHost = 2,
    RequestPerformanceCounters = 3,
    HostPong = 4,
}

export function unionToHostToDaemonMessageUnion(
    type: HostToDaemonMessageUnion,
    accessor: (
        obj: DetachHost | HostPong | RegisterHost | RequestPerformanceCounters,
    ) => DetachHost | HostPong | RegisterHost | RequestPerformanceCounters | null,
): DetachHost | HostPong | RegisterHost | RequestPerformanceCounters | null {
    switch (HostToDaemonMessageUnion[type]) {
        case "NONE":
            return null;
        case "RegisterHost":
            return accessor(new RegisterHost())! as RegisterHost;
        case "DetachHost":
            return accessor(new DetachHost())! as DetachHost;
        case "RequestPerformanceCounters":
            return accessor(new RequestPerformanceCounters())! as RequestPerformanceCounters;
        case "HostPong":
            return accessor(new HostPong())! as HostPong;
        default:
            return null;
    }
}

export function unionListToHostToDaemonMessageUnion(
    type: HostToDaemonMessageUnion,
    accessor: (
        index: number,
        obj: DetachHost | HostPong | RegisterHost | RequestPerformanceCounters,
    ) => DetachHost | HostPong | RegisterHost | RequestPerformanceCounters | null,
    index: number,
): DetachHost | HostPong | RegisterHost | RequestPerformanceCounters | null {
    switch (HostToDaemonMessageUnion[type]) {
        case "NONE":
            return null;
        case "RegisterHost":
            return accessor(index, new RegisterHost())! as RegisterHost;
        case "DetachHost":
            return accessor(index, new DetachHost())! as DetachHost;
        case "RequestPerformanceCounters":
            return accessor(index, new RequestPerformanceCounters())! as RequestPerformanceCounters;
        case "HostPong":
            return accessor(index, new HostPong())! as HostPong;
        default:
            return null;
    }
}
