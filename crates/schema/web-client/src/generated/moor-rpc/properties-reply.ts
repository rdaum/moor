// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { PropInfo } from "../moor-common/prop-info.js";

export class PropertiesReply {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): PropertiesReply {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsPropertiesReply(bb: flatbuffers.ByteBuffer, obj?: PropertiesReply): PropertiesReply {
        return (obj || new PropertiesReply()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsPropertiesReply(bb: flatbuffers.ByteBuffer, obj?: PropertiesReply): PropertiesReply {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new PropertiesReply()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    properties(index: number, obj?: PropInfo): PropInfo | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset
            ? (obj || new PropInfo()).__init(
                this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),
                this.bb!,
            )
            : null;
    }

    propertiesLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    static startPropertiesReply(builder: flatbuffers.Builder) {
        builder.startObject(1);
    }

    static addProperties(builder: flatbuffers.Builder, propertiesOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, propertiesOffset, 0);
    }

    static createPropertiesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]!);
        }
        return builder.endVector();
    }

    static startPropertiesVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(4, numElems, 4);
    }

    static endPropertiesReply(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // properties
        return offset;
    }

    static createPropertiesReply(
        builder: flatbuffers.Builder,
        propertiesOffset: flatbuffers.Offset,
    ): flatbuffers.Offset {
        PropertiesReply.startPropertiesReply(builder);
        PropertiesReply.addProperties(builder, propertiesOffset);
        return PropertiesReply.endPropertiesReply(builder);
    }
}
