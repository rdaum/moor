// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import {
    ReplyResultUnion,
    unionListToReplyResultUnion,
    unionToReplyResultUnion,
} from "../moor-rpc/reply-result-union.js";

export class ReplyResult {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): ReplyResult {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsReplyResult(bb: flatbuffers.ByteBuffer, obj?: ReplyResult): ReplyResult {
        return (obj || new ReplyResult()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsReplyResult(bb: flatbuffers.ByteBuffer, obj?: ReplyResult): ReplyResult {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ReplyResult()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    resultType(): ReplyResultUnion {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.readUint8(this.bb_pos + offset) : ReplyResultUnion.NONE;
    }

    result<T extends flatbuffers.Table>(obj: any): any | null {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
    }

    static startReplyResult(builder: flatbuffers.Builder) {
        builder.startObject(2);
    }

    static addResultType(builder: flatbuffers.Builder, resultType: ReplyResultUnion) {
        builder.addFieldInt8(0, resultType, ReplyResultUnion.NONE);
    }

    static addResult(builder: flatbuffers.Builder, resultOffset: flatbuffers.Offset) {
        builder.addFieldOffset(1, resultOffset, 0);
    }

    static endReplyResult(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 6); // result
        return offset;
    }

    static createReplyResult(
        builder: flatbuffers.Builder,
        resultType: ReplyResultUnion,
        resultOffset: flatbuffers.Offset,
    ): flatbuffers.Offset {
        ReplyResult.startReplyResult(builder);
        ReplyResult.addResultType(builder, resultType);
        ReplyResult.addResult(builder, resultOffset);
        return ReplyResult.endReplyResult(builder);
    }
}
