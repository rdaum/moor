// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Uuid } from '../moor-common/uuid.js';
import { WorkerError } from '../moor-rpc/worker-error.js';


export class RequestError {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RequestError {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRequestError(bb:flatbuffers.ByteBuffer, obj?:RequestError):RequestError {
  return (obj || new RequestError()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRequestError(bb:flatbuffers.ByteBuffer, obj?:RequestError):RequestError {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RequestError()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

workerId(obj?:Uuid):Uuid|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Uuid()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

requestId(obj?:Uuid):Uuid|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Uuid()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

error(obj?:WorkerError):WorkerError|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new WorkerError()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startRequestError(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addWorkerId(builder:flatbuffers.Builder, workerIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, workerIdOffset, 0);
}

static addRequestId(builder:flatbuffers.Builder, requestIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, requestIdOffset, 0);
}

static addError(builder:flatbuffers.Builder, errorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, errorOffset, 0);
}

static endRequestError(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // worker_id
  builder.requiredField(offset, 6) // request_id
  builder.requiredField(offset, 8) // error
  return offset;
}

}
