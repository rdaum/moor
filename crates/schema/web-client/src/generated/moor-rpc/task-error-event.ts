// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { SchedulerError } from '../moor-rpc/scheduler-error.js';


export class TaskErrorEvent {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TaskErrorEvent {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTaskErrorEvent(bb:flatbuffers.ByteBuffer, obj?:TaskErrorEvent):TaskErrorEvent {
  return (obj || new TaskErrorEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTaskErrorEvent(bb:flatbuffers.ByteBuffer, obj?:TaskErrorEvent):TaskErrorEvent {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TaskErrorEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

taskId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

error(obj?:SchedulerError):SchedulerError|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new SchedulerError()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startTaskErrorEvent(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addTaskId(builder:flatbuffers.Builder, taskId:bigint) {
  builder.addFieldInt64(0, taskId, BigInt('0'));
}

static addError(builder:flatbuffers.Builder, errorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, errorOffset, 0);
}

static endTaskErrorEvent(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // error
  return offset;
}

}
