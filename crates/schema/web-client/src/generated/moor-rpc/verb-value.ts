// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { VerbInfo } from "../moor-common/verb-info.js";

export class VerbValue {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): VerbValue {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsVerbValue(bb: flatbuffers.ByteBuffer, obj?: VerbValue): VerbValue {
        return (obj || new VerbValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsVerbValue(bb: flatbuffers.ByteBuffer, obj?: VerbValue): VerbValue {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new VerbValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    verbInfo(obj?: VerbInfo): VerbInfo | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? (obj || new VerbInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    code(index: number): string;
    code(index: number, optionalEncoding: flatbuffers.Encoding): string | Uint8Array;
    code(index: number, optionalEncoding?: any): string | Uint8Array | null {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }

    codeLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    static startVerbValue(builder: flatbuffers.Builder) {
        builder.startObject(2);
    }

    static addVerbInfo(builder: flatbuffers.Builder, verbInfoOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, verbInfoOffset, 0);
    }

    static addCode(builder: flatbuffers.Builder, codeOffset: flatbuffers.Offset) {
        builder.addFieldOffset(1, codeOffset, 0);
    }

    static createCodeVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]!);
        }
        return builder.endVector();
    }

    static startCodeVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(4, numElems, 4);
    }

    static endVerbValue(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // verb_info
        builder.requiredField(offset, 6); // code
        return offset;
    }

    static createVerbValue(
        builder: flatbuffers.Builder,
        verbInfoOffset: flatbuffers.Offset,
        codeOffset: flatbuffers.Offset,
    ): flatbuffers.Offset {
        VerbValue.startVerbValue(builder);
        VerbValue.addVerbInfo(builder, verbInfoOffset);
        VerbValue.addCode(builder, codeOffset);
        return VerbValue.endVerbValue(builder);
    }
}
