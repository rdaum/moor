// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { VerbInfo } from "../moor-common/verb-info.js";

export class VerbsReply {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): VerbsReply {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsVerbsReply(bb: flatbuffers.ByteBuffer, obj?: VerbsReply): VerbsReply {
        return (obj || new VerbsReply()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsVerbsReply(bb: flatbuffers.ByteBuffer, obj?: VerbsReply): VerbsReply {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new VerbsReply()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    verbs(index: number, obj?: VerbInfo): VerbInfo | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset
            ? (obj || new VerbInfo()).__init(
                this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),
                this.bb!,
            )
            : null;
    }

    verbsLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    static startVerbsReply(builder: flatbuffers.Builder) {
        builder.startObject(1);
    }

    static addVerbs(builder: flatbuffers.Builder, verbsOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, verbsOffset, 0);
    }

    static createVerbsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]!);
        }
        return builder.endVector();
    }

    static startVerbsVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(4, numElems, 4);
    }

    static endVerbsReply(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // verbs
        return offset;
    }

    static createVerbsReply(builder: flatbuffers.Builder, verbsOffset: flatbuffers.Offset): flatbuffers.Offset {
        VerbsReply.startVerbsReply(builder);
        VerbsReply.addVerbs(builder, verbsOffset);
        return VerbsReply.endVerbsReply(builder);
    }
}
