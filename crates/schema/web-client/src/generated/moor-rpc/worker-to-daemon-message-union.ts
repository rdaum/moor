// automatically generated by the FlatBuffers compiler, do not modify

import { AttachWorker } from "../moor-rpc/attach-worker.js";
import { DetachWorker } from "../moor-rpc/detach-worker.js";
import { RequestError } from "../moor-rpc/request-error.js";
import { RequestResult } from "../moor-rpc/request-result.js";
import { WorkerPong } from "../moor-rpc/worker-pong.js";

export enum WorkerToDaemonMessageUnion {
    NONE = 0,
    AttachWorker = 1,
    WorkerPong = 2,
    DetachWorker = 3,
    RequestResult = 4,
    RequestError = 5,
}

export function unionToWorkerToDaemonMessageUnion(
    type: WorkerToDaemonMessageUnion,
    accessor: (
        obj: AttachWorker | DetachWorker | RequestError | RequestResult | WorkerPong,
    ) => AttachWorker | DetachWorker | RequestError | RequestResult | WorkerPong | null,
): AttachWorker | DetachWorker | RequestError | RequestResult | WorkerPong | null {
    switch (WorkerToDaemonMessageUnion[type]) {
        case "NONE":
            return null;
        case "AttachWorker":
            return accessor(new AttachWorker())! as AttachWorker;
        case "WorkerPong":
            return accessor(new WorkerPong())! as WorkerPong;
        case "DetachWorker":
            return accessor(new DetachWorker())! as DetachWorker;
        case "RequestResult":
            return accessor(new RequestResult())! as RequestResult;
        case "RequestError":
            return accessor(new RequestError())! as RequestError;
        default:
            return null;
    }
}

export function unionListToWorkerToDaemonMessageUnion(
    type: WorkerToDaemonMessageUnion,
    accessor: (
        index: number,
        obj: AttachWorker | DetachWorker | RequestError | RequestResult | WorkerPong,
    ) => AttachWorker | DetachWorker | RequestError | RequestResult | WorkerPong | null,
    index: number,
): AttachWorker | DetachWorker | RequestError | RequestResult | WorkerPong | null {
    switch (WorkerToDaemonMessageUnion[type]) {
        case "NONE":
            return null;
        case "AttachWorker":
            return accessor(index, new AttachWorker())! as AttachWorker;
        case "WorkerPong":
            return accessor(index, new WorkerPong())! as WorkerPong;
        case "DetachWorker":
            return accessor(index, new DetachWorker())! as DetachWorker;
        case "RequestResult":
            return accessor(index, new RequestResult())! as RequestResult;
        case "RequestError":
            return accessor(index, new RequestError())! as RequestError;
        default:
            return null;
    }
}
