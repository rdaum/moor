// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { Obj } from "../moor-common/obj.js";
import { Symbol } from "../moor-common/symbol.js";
import { VerbDef } from "../moor-common/verb-def.js";
import { Frame } from "../moor-task/frame.js";
import { Var } from "../moor-var/var.js";

export class Activation {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): Activation {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsActivation(bb: flatbuffers.ByteBuffer, obj?: Activation): Activation {
        return (obj || new Activation()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsActivation(bb: flatbuffers.ByteBuffer, obj?: Activation): Activation {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Activation()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    frame(obj?: Frame): Frame | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? (obj || new Frame()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    this_(obj?: Var): Var | null {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? (obj || new Var()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    player(obj?: Obj): Obj | null {
        const offset = this.bb!.__offset(this.bb_pos, 8);
        return offset ? (obj || new Obj()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    args(index: number, obj?: Var): Var | null {
        const offset = this.bb!.__offset(this.bb_pos, 10);
        return offset
            ? (obj || new Var()).__init(
                this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),
                this.bb!,
            )
            : null;
    }

    argsLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 10);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    verbName(obj?: Symbol): Symbol | null {
        const offset = this.bb!.__offset(this.bb_pos, 12);
        return offset ? (obj || new Symbol()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    verbdef(obj?: VerbDef): VerbDef | null {
        const offset = this.bb!.__offset(this.bb_pos, 14);
        return offset ? (obj || new VerbDef()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    permissions(obj?: Obj): Obj | null {
        const offset = this.bb!.__offset(this.bb_pos, 16);
        return offset ? (obj || new Obj()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    static startActivation(builder: flatbuffers.Builder) {
        builder.startObject(7);
    }

    static addFrame(builder: flatbuffers.Builder, frameOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, frameOffset, 0);
    }

    static addThis(builder: flatbuffers.Builder, this_Offset: flatbuffers.Offset) {
        builder.addFieldOffset(1, this_Offset, 0);
    }

    static addPlayer(builder: flatbuffers.Builder, playerOffset: flatbuffers.Offset) {
        builder.addFieldOffset(2, playerOffset, 0);
    }

    static addArgs(builder: flatbuffers.Builder, argsOffset: flatbuffers.Offset) {
        builder.addFieldOffset(3, argsOffset, 0);
    }

    static createArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]!);
        }
        return builder.endVector();
    }

    static startArgsVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(4, numElems, 4);
    }

    static addVerbName(builder: flatbuffers.Builder, verbNameOffset: flatbuffers.Offset) {
        builder.addFieldOffset(4, verbNameOffset, 0);
    }

    static addVerbdef(builder: flatbuffers.Builder, verbdefOffset: flatbuffers.Offset) {
        builder.addFieldOffset(5, verbdefOffset, 0);
    }

    static addPermissions(builder: flatbuffers.Builder, permissionsOffset: flatbuffers.Offset) {
        builder.addFieldOffset(6, permissionsOffset, 0);
    }

    static endActivation(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // frame
        builder.requiredField(offset, 6); // this
        builder.requiredField(offset, 8); // player
        builder.requiredField(offset, 10); // args
        builder.requiredField(offset, 12); // verb_name
        builder.requiredField(offset, 14); // verbdef
        builder.requiredField(offset, 16); // permissions
        return offset;
    }
}
