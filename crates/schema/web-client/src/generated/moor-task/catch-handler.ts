// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { CatchType } from "../moor-task/catch-type.js";

export class CatchHandler {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): CatchHandler {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsCatchHandler(bb: flatbuffers.ByteBuffer, obj?: CatchHandler): CatchHandler {
        return (obj || new CatchHandler()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsCatchHandler(bb: flatbuffers.ByteBuffer, obj?: CatchHandler): CatchHandler {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new CatchHandler()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    catchType(obj?: CatchType): CatchType | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? (obj || new CatchType()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    label(): number {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
    }

    static startCatchHandler(builder: flatbuffers.Builder) {
        builder.startObject(2);
    }

    static addCatchType(builder: flatbuffers.Builder, catchTypeOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, catchTypeOffset, 0);
    }

    static addLabel(builder: flatbuffers.Builder, label: number) {
        builder.addFieldInt16(1, label, 0);
    }

    static endCatchHandler(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // catch_type
        return offset;
    }

    static createCatchHandler(
        builder: flatbuffers.Builder,
        catchTypeOffset: flatbuffers.Offset,
        label: number,
    ): flatbuffers.Offset {
        CatchHandler.startCatchHandler(builder);
        CatchHandler.addCatchType(builder, catchTypeOffset);
        CatchHandler.addLabel(builder, label);
        return CatchHandler.endCatchHandler(builder);
    }
}
