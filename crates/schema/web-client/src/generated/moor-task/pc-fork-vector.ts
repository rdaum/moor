// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

export class PcForkVector {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): PcForkVector {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsPcForkVector(bb: flatbuffers.ByteBuffer, obj?: PcForkVector): PcForkVector {
        return (obj || new PcForkVector()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsPcForkVector(bb: flatbuffers.ByteBuffer, obj?: PcForkVector): PcForkVector {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new PcForkVector()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    offset(): bigint {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
    }

    static startPcForkVector(builder: flatbuffers.Builder) {
        builder.startObject(1);
    }

    static addOffset(builder: flatbuffers.Builder, offset: bigint) {
        builder.addFieldInt64(0, offset, BigInt("0"));
    }

    static endPcForkVector(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        return offset;
    }

    static createPcForkVector(builder: flatbuffers.Builder, offset: bigint): flatbuffers.Offset {
        PcForkVector.startPcForkVector(builder);
        PcForkVector.addOffset(builder, offset);
        return PcForkVector.endPcForkVector(builder);
    }
}
