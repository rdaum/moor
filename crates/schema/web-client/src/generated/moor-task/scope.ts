// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { ScopeType } from "../moor-task/scope-type.js";

export class Scope {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): Scope {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsScope(bb: flatbuffers.ByteBuffer, obj?: Scope): Scope {
        return (obj || new Scope()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsScope(bb: flatbuffers.ByteBuffer, obj?: Scope): Scope {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Scope()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    scopeType(obj?: ScopeType): ScopeType | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? (obj || new ScopeType()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    valstackPos(): bigint {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
    }

    startPos(): bigint {
        const offset = this.bb!.__offset(this.bb_pos, 8);
        return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
    }

    endPos(): bigint {
        const offset = this.bb!.__offset(this.bb_pos, 10);
        return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
    }

    hasEnvironment(): boolean {
        const offset = this.bb!.__offset(this.bb_pos, 12);
        return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
    }

    static startScope(builder: flatbuffers.Builder) {
        builder.startObject(5);
    }

    static addScopeType(builder: flatbuffers.Builder, scopeTypeOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, scopeTypeOffset, 0);
    }

    static addValstackPos(builder: flatbuffers.Builder, valstackPos: bigint) {
        builder.addFieldInt64(1, valstackPos, BigInt("0"));
    }

    static addStartPos(builder: flatbuffers.Builder, startPos: bigint) {
        builder.addFieldInt64(2, startPos, BigInt("0"));
    }

    static addEndPos(builder: flatbuffers.Builder, endPos: bigint) {
        builder.addFieldInt64(3, endPos, BigInt("0"));
    }

    static addHasEnvironment(builder: flatbuffers.Builder, hasEnvironment: boolean) {
        builder.addFieldInt8(4, +hasEnvironment, +false);
    }

    static endScope(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // scope_type
        return offset;
    }

    static createScope(
        builder: flatbuffers.Builder,
        scopeTypeOffset: flatbuffers.Offset,
        valstackPos: bigint,
        startPos: bigint,
        endPos: bigint,
        hasEnvironment: boolean,
    ): flatbuffers.Offset {
        Scope.startScope(builder);
        Scope.addScopeType(builder, scopeTypeOffset);
        Scope.addValstackPos(builder, valstackPos);
        Scope.addStartPos(builder, startPos);
        Scope.addEndPos(builder, endPos);
        Scope.addHasEnvironment(builder, hasEnvironment);
        return Scope.endScope(builder);
    }
}
