// automatically generated by the FlatBuffers compiler, do not modify

import { WakeGCComplete } from "../moor-task/wake-gccomplete.js";
import { WakeImmediate } from "../moor-task/wake-immediate.js";
import { WakeInput } from "../moor-task/wake-input.js";
import { WakeNever } from "../moor-task/wake-never.js";
import { WakeTask } from "../moor-task/wake-task.js";
import { WakeTime } from "../moor-task/wake-time.js";
import { WakeWorker } from "../moor-task/wake-worker.js";

export enum WakeConditionUnion {
    NONE = 0,
    WakeTime = 1,
    WakeNever = 2,
    WakeInput = 3,
    WakeImmediate = 4,
    WakeTask = 5,
    WakeWorker = 6,
    WakeGCComplete = 7,
}

export function unionToWakeConditionUnion(
    type: WakeConditionUnion,
    accessor: (
        obj: WakeGCComplete | WakeImmediate | WakeInput | WakeNever | WakeTask | WakeTime | WakeWorker,
    ) => WakeGCComplete | WakeImmediate | WakeInput | WakeNever | WakeTask | WakeTime | WakeWorker | null,
): WakeGCComplete | WakeImmediate | WakeInput | WakeNever | WakeTask | WakeTime | WakeWorker | null {
    switch (WakeConditionUnion[type]) {
        case "NONE":
            return null;
        case "WakeTime":
            return accessor(new WakeTime())! as WakeTime;
        case "WakeNever":
            return accessor(new WakeNever())! as WakeNever;
        case "WakeInput":
            return accessor(new WakeInput())! as WakeInput;
        case "WakeImmediate":
            return accessor(new WakeImmediate())! as WakeImmediate;
        case "WakeTask":
            return accessor(new WakeTask())! as WakeTask;
        case "WakeWorker":
            return accessor(new WakeWorker())! as WakeWorker;
        case "WakeGCComplete":
            return accessor(new WakeGCComplete())! as WakeGCComplete;
        default:
            return null;
    }
}

export function unionListToWakeConditionUnion(
    type: WakeConditionUnion,
    accessor: (
        index: number,
        obj: WakeGCComplete | WakeImmediate | WakeInput | WakeNever | WakeTask | WakeTime | WakeWorker,
    ) => WakeGCComplete | WakeImmediate | WakeInput | WakeNever | WakeTask | WakeTime | WakeWorker | null,
    index: number,
): WakeGCComplete | WakeImmediate | WakeInput | WakeNever | WakeTask | WakeTime | WakeWorker | null {
    switch (WakeConditionUnion[type]) {
        case "NONE":
            return null;
        case "WakeTime":
            return accessor(index, new WakeTime())! as WakeTime;
        case "WakeNever":
            return accessor(index, new WakeNever())! as WakeNever;
        case "WakeInput":
            return accessor(index, new WakeInput())! as WakeInput;
        case "WakeImmediate":
            return accessor(index, new WakeImmediate())! as WakeImmediate;
        case "WakeTask":
            return accessor(index, new WakeTask())! as WakeTask;
        case "WakeWorker":
            return accessor(index, new WakeWorker())! as WakeWorker;
        case "WakeGCComplete":
            return accessor(index, new WakeGCComplete())! as WakeGCComplete;
        default:
            return null;
    }
}
