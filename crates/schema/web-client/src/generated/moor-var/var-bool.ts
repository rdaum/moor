// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class VarBool {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):VarBool {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVarBool(bb:flatbuffers.ByteBuffer, obj?:VarBool):VarBool {
  return (obj || new VarBool()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVarBool(bb:flatbuffers.ByteBuffer, obj?:VarBool):VarBool {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VarBool()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

value():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startVarBool(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addValue(builder:flatbuffers.Builder, value:boolean) {
  builder.addFieldInt8(0, +value, +false);
}

static endVarBool(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createVarBool(builder:flatbuffers.Builder, value:boolean):flatbuffers.Offset {
  VarBool.startVarBool(builder);
  VarBool.addValue(builder, value);
  return VarBool.endVarBool(builder);
}
}
