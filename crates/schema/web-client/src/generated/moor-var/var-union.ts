// automatically generated by the FlatBuffers compiler, do not modify

import { VarBinary } from '../moor-var/var-binary.js';
import { VarBool } from '../moor-var/var-bool.js';
import { VarErr } from '../moor-var/var-err.js';
import { VarFloat } from '../moor-var/var-float.js';
import { VarFlyweight } from '../moor-var/var-flyweight.js';
import { VarInt } from '../moor-var/var-int.js';
import { VarLambda } from '../moor-var/var-lambda.js';
import { VarList } from '../moor-var/var-list.js';
import { VarMap } from '../moor-var/var-map.js';
import { VarNone } from '../moor-var/var-none.js';
import { VarObj } from '../moor-var/var-obj.js';
import { VarStr } from '../moor-var/var-str.js';
import { VarSym } from '../moor-var/var-sym.js';


export enum VarUnion {
  NONE = 0,
  VarNone = 1,
  VarBool = 2,
  VarInt = 3,
  VarFloat = 4,
  VarStr = 5,
  VarObj = 6,
  VarErr = 7,
  VarList = 8,
  VarMap = 9,
  VarSym = 10,
  VarBinary = 11,
  VarFlyweight = 12,
  VarLambda = 13
}

export function unionToVarUnion(
  type: VarUnion,
  accessor: (obj:VarBinary|VarBool|VarErr|VarFloat|VarFlyweight|VarInt|VarLambda|VarList|VarMap|VarNone|VarObj|VarStr|VarSym) => VarBinary|VarBool|VarErr|VarFloat|VarFlyweight|VarInt|VarLambda|VarList|VarMap|VarNone|VarObj|VarStr|VarSym|null
): VarBinary|VarBool|VarErr|VarFloat|VarFlyweight|VarInt|VarLambda|VarList|VarMap|VarNone|VarObj|VarStr|VarSym|null {
  switch(VarUnion[type]) {
    case 'NONE': return null; 
    case 'VarNone': return accessor(new VarNone())! as VarNone;
    case 'VarBool': return accessor(new VarBool())! as VarBool;
    case 'VarInt': return accessor(new VarInt())! as VarInt;
    case 'VarFloat': return accessor(new VarFloat())! as VarFloat;
    case 'VarStr': return accessor(new VarStr())! as VarStr;
    case 'VarObj': return accessor(new VarObj())! as VarObj;
    case 'VarErr': return accessor(new VarErr())! as VarErr;
    case 'VarList': return accessor(new VarList())! as VarList;
    case 'VarMap': return accessor(new VarMap())! as VarMap;
    case 'VarSym': return accessor(new VarSym())! as VarSym;
    case 'VarBinary': return accessor(new VarBinary())! as VarBinary;
    case 'VarFlyweight': return accessor(new VarFlyweight())! as VarFlyweight;
    case 'VarLambda': return accessor(new VarLambda())! as VarLambda;
    default: return null;
  }
}

export function unionListToVarUnion(
  type: VarUnion, 
  accessor: (index: number, obj:VarBinary|VarBool|VarErr|VarFloat|VarFlyweight|VarInt|VarLambda|VarList|VarMap|VarNone|VarObj|VarStr|VarSym) => VarBinary|VarBool|VarErr|VarFloat|VarFlyweight|VarInt|VarLambda|VarList|VarMap|VarNone|VarObj|VarStr|VarSym|null, 
  index: number
): VarBinary|VarBool|VarErr|VarFloat|VarFlyweight|VarInt|VarLambda|VarList|VarMap|VarNone|VarObj|VarStr|VarSym|null {
  switch(VarUnion[type]) {
    case 'NONE': return null; 
    case 'VarNone': return accessor(index, new VarNone())! as VarNone;
    case 'VarBool': return accessor(index, new VarBool())! as VarBool;
    case 'VarInt': return accessor(index, new VarInt())! as VarInt;
    case 'VarFloat': return accessor(index, new VarFloat())! as VarFloat;
    case 'VarStr': return accessor(index, new VarStr())! as VarStr;
    case 'VarObj': return accessor(index, new VarObj())! as VarObj;
    case 'VarErr': return accessor(index, new VarErr())! as VarErr;
    case 'VarList': return accessor(index, new VarList())! as VarList;
    case 'VarMap': return accessor(index, new VarMap())! as VarMap;
    case 'VarSym': return accessor(index, new VarSym())! as VarSym;
    case 'VarBinary': return accessor(index, new VarBinary())! as VarBinary;
    case 'VarFlyweight': return accessor(index, new VarFlyweight())! as VarFlyweight;
    case 'VarLambda': return accessor(index, new VarLambda())! as VarLambda;
    default: return null;
  }
}
