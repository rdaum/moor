# Production nginx configuration for mooR web client with SSL/TLS
#
# This is a complete nginx.conf file intended for Docker deployments.
# It provides HTTPS with Let's Encrypt certificates and HTTP->HTTPS redirect.
#
# Usage:
# 1. Replace YOUR_DOMAIN_HERE with your actual domain name
# 2. Replace YOUR_DOMAIN in SSL certificate paths with your domain
# 3. Ensure Let's Encrypt certificates are obtained (e.g., via certbot)
# 4. Mount as /etc/nginx/nginx.conf in the nginx container
#
# This config assumes:
# - Docker service name 'moor-web-host' for backend
# - Static files served from /usr/share/nginx/html
# - Let's Encrypt certificates in /etc/letsencrypt

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Enable gzip compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml text/javascript;

    # Define upstream backend
    upstream moor_api {
        server moor-web-host:8081;
    }

    # HTTP server - redirect to HTTPS
    server {
        listen 80;
        server_name YOUR_DOMAIN_HERE;  # Replace with your domain (e.g., example.com)

        # Allow Let's Encrypt ACME challenges
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # Redirect all other HTTP traffic to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS server
    server {
        listen 443 ssl;
        http2 on;
        server_name YOUR_DOMAIN_HERE;  # Replace with your domain (e.g., example.com)

        # SSL certificates
        # Replace YOUR_DOMAIN with your actual domain name
        # These paths assume you're using Let's Encrypt/certbot
        ssl_certificate /etc/letsencrypt/live/YOUR_DOMAIN/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/YOUR_DOMAIN/privkey.pem;

        # SSL configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        # Serve static files from the built frontend
        location / {
            root /usr/share/nginx/html;
            try_files $uri $uri/ /index.html;

            # Cache static assets
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
            }
        }

        # Proxy API endpoints to the Rust backend
        location /api/ {
            proxy_pass http://moor_api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Proxy auth endpoints
        location /auth/ {
            proxy_pass http://moor_api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Proxy flatbuffer API endpoints
        location /fb/ {
            proxy_pass http://moor_api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Proxy other backend endpoints
        location ~ ^/(welcome|eval|verbs|properties|objects|system_property)($|/) {
            proxy_pass http://moor_api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Proxy WebSocket connections
        location /ws/ {
            proxy_pass http://moor_api;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket timeout configuration
            proxy_read_timeout 3600s;    # 1 hour
            proxy_send_timeout 3600s;    # 1 hour
            proxy_connect_timeout 60s;
        }
    }
}
