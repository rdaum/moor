# Process composition for starting up a mooR system, with a telnet server and a web server, and a worker process
# for handling outbound HTTP requests.

# INSTALLATION:
# 1. Install process-compose from: https://github.com/F1bonacc1/process-compose
# 2. Run with: process-compose up
# 3. Stop with: Ctrl+C or process-compose down

# This mimics the behavior of docker-compose.yml but runs processes directly on the host using cargo run.
# Uses IPC defaults for ZMQ communication since all processes are running locally.

# The first time the system starts, it will import cores/lambda-moor from the cores directory.
# This is a fork of LambdaCore, reconstituted in mooR's `objdef` format, with some modifications.
# To import an existing LambdaMOO 1.8.x DB, change --import to point to it, and change --import-format to textdump
# After import, `moor-data` will contain the database that resulted.
# To re-import simply delete this directory.

# After this is running, a MUD client / telnet client can connect to port 8888 on localhost to interact with the
# system. (e.g. telnet localhost 8888). The web frontend is served on port 3000 and proxies API/WebSocket
# requests to moor-web-host on port 8081.

version: "0.5"

environment:
  - "RUST_BACKTRACE=1"

processes:
  # Initialization step: Generate enrollment token for CURVE authentication
  init-enrollment:
    command: >
      sh -c "
        if [ ! -f enrollment-token ]; then
          cargo run --release -p moor-daemon -- --rotate-enrollment-token
        fi &&
        export MOOR_ENROLLMENT_TOKEN=\$(cat enrollment-token) &&
        echo \"Enrollment token: \$MOOR_ENROLLMENT_TOKEN\"
      "
    restart: no
    availability:
      restart: exit_on_failure

  # The core Moor daemon, which handles the database, scheduling and execution of tasks, and hosts the RPC server.
  # Uses --generate-keypair to auto-generate PASETO keys on first run if they don't exist
  moor-daemon:
    command: >
      cargo run --release -p moor-daemon --
      ./moor-data
      --db=development.db
      --import=cores/lambda-moor/src --import-format=objdef
      --export=export --export-format=objdef
      --enrollment-token-file=enrollment-token
      --generate-keypair
    restart: on_failure
    depends_on:
      init-enrollment:
        condition: process_completed_successfully

  # A host process that runs the telnet server, and handles incoming connections and forwards events to the daemon.
  moor-telnet-host:
    command: >
      cargo run -p moor-telnet-host --
      --telnet-address=0.0.0.0
      --telnet-port=8888
      --enrollment-token-file=enrollment-token
    restart: on_failure
    depends_on:
      init-enrollment:
        condition: process_completed_successfully
      moor-daemon:
        condition: process_started

  # Frontend web server that serves static files and proxies API calls
  moor-frontend:
    command: >
      sh -c "
        if [ ! -d node_modules ]; then
          npm install
        fi &&
        npm run dev
      "
    environment:
      - MOOR_API_URL=http://localhost:8081
      - MOOR_WS_URL=ws://localhost:8081
    restart: on_failure
    depends_on:
      moor-web-host:
        condition: process_started

  # API server that handles websocket connections and REST endpoints
  moor-web-host:
    command: >
      cargo run -p moor-web-host --
      --listen-address=0.0.0.0:8081
      --enrollment-token-file=enrollment-token
    restart: on_failure
    depends_on:
      init-enrollment:
        condition: process_completed_successfully
      moor-daemon:
        condition: process_started

  # A worker process that handles requests from the daemon for outbound HTTP requests and returns the results back
  # to the daemon.
  moor-curl-worker:
    command: >
      cargo run -p moor-curl-worker --
      --enrollment-token-file=enrollment-token
    restart: on_failure
    depends_on:
      init-enrollment:
        condition: process_completed_successfully
      moor-daemon:
        condition: process_started