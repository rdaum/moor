# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorCommon

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Exception(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Exception()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsException(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Exception
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Exception
    def Error(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorCommon.Error import Error
            obj = Error()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Exception
    def Stack(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorVar.Var import Var
            obj = Var()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Exception
    def StackLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Exception
    def StackIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Exception
    def Backtrace(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorVar.Var import Var
            obj = Var()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Exception
    def BacktraceLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Exception
    def BacktraceIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def ExceptionStart(builder):
    builder.StartObject(3)

def Start(builder):
    ExceptionStart(builder)

def ExceptionAddError(builder, error):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(error), 0)

def AddError(builder, error):
    ExceptionAddError(builder, error)

def ExceptionAddStack(builder, stack):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(stack), 0)

def AddStack(builder, stack):
    ExceptionAddStack(builder, stack)

def ExceptionStartStackVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartStackVector(builder, numElems: int) -> int:
    return ExceptionStartStackVector(builder, numElems)

def ExceptionAddBacktrace(builder, backtrace):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(backtrace), 0)

def AddBacktrace(builder, backtrace):
    ExceptionAddBacktrace(builder, backtrace)

def ExceptionStartBacktraceVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartBacktraceVector(builder, numElems: int) -> int:
    return ExceptionStartBacktraceVector(builder, numElems)

def ExceptionEnd(builder):
    return builder.EndObject()

def End(builder):
    return ExceptionEnd(builder)
