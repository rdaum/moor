# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorCommon

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class NarrativeEvent(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NarrativeEvent()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNarrativeEvent(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # NarrativeEvent
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NarrativeEvent
    def EventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorCommon.Uuid import Uuid
            obj = Uuid()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NarrativeEvent
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # NarrativeEvent
    def Author(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorVar.Var import Var
            obj = Var()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NarrativeEvent
    def Event(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorCommon.Event import Event
            obj = Event()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def NarrativeEventStart(builder):
    builder.StartObject(4)

def Start(builder):
    NarrativeEventStart(builder)

def NarrativeEventAddEventId(builder, eventId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(eventId), 0)

def AddEventId(builder, eventId):
    NarrativeEventAddEventId(builder, eventId)

def NarrativeEventAddTimestamp(builder, timestamp):
    builder.PrependUint64Slot(1, timestamp, 0)

def AddTimestamp(builder, timestamp):
    NarrativeEventAddTimestamp(builder, timestamp)

def NarrativeEventAddAuthor(builder, author):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(author), 0)

def AddAuthor(builder, author):
    NarrativeEventAddAuthor(builder, author)

def NarrativeEventAddEvent(builder, event):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(event), 0)

def AddEvent(builder, event):
    NarrativeEventAddEvent(builder, event)

def NarrativeEventEnd(builder):
    return builder.EndObject()

def End(builder):
    return NarrativeEventEnd(builder)
