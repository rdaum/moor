# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorCommon

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ParseError(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ParseError()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsParseError(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ParseError
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ParseError
    def ErrorPosition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorCommon.CompileContext import CompileContext
            obj = CompileContext()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ParseError
    def Context(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ParseError
    def EndLine(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # ParseError
    def EndCol(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # ParseError
    def HasEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ParseError
    def Message(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ParseErrorStart(builder):
    builder.StartObject(6)

def Start(builder):
    ParseErrorStart(builder)

def ParseErrorAddErrorPosition(builder, errorPosition):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(errorPosition), 0)

def AddErrorPosition(builder, errorPosition):
    ParseErrorAddErrorPosition(builder, errorPosition)

def ParseErrorAddContext(builder, context):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(context), 0)

def AddContext(builder, context):
    ParseErrorAddContext(builder, context)

def ParseErrorAddEndLine(builder, endLine):
    builder.PrependUint64Slot(2, endLine, 0)

def AddEndLine(builder, endLine):
    ParseErrorAddEndLine(builder, endLine)

def ParseErrorAddEndCol(builder, endCol):
    builder.PrependUint64Slot(3, endCol, 0)

def AddEndCol(builder, endCol):
    ParseErrorAddEndCol(builder, endCol)

def ParseErrorAddHasEnd(builder, hasEnd):
    builder.PrependBoolSlot(4, hasEnd, 0)

def AddHasEnd(builder, hasEnd):
    ParseErrorAddHasEnd(builder, hasEnd)

def ParseErrorAddMessage(builder, message):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(message), 0)

def AddMessage(builder, message):
    ParseErrorAddMessage(builder, message)

def ParseErrorEnd(builder):
    return builder.EndObject()

def End(builder):
    return ParseErrorEnd(builder)
