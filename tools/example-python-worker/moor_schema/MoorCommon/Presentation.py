# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorCommon

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Presentation(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Presentation()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPresentation(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Presentation
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Presentation
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Presentation
    def ContentType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Presentation
    def Content(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Presentation
    def Target(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Presentation
    def Attributes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorCommon.PresentationAttribute import PresentationAttribute
            obj = PresentationAttribute()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Presentation
    def AttributesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Presentation
    def AttributesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def PresentationStart(builder):
    builder.StartObject(5)

def Start(builder):
    PresentationStart(builder)

def PresentationAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    PresentationAddId(builder, id)

def PresentationAddContentType(builder, contentType):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(contentType), 0)

def AddContentType(builder, contentType):
    PresentationAddContentType(builder, contentType)

def PresentationAddContent(builder, content):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(content), 0)

def AddContent(builder, content):
    PresentationAddContent(builder, content)

def PresentationAddTarget(builder, target):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(target), 0)

def AddTarget(builder, target):
    PresentationAddTarget(builder, target)

def PresentationAddAttributes(builder, attributes):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(attributes), 0)

def AddAttributes(builder, attributes):
    PresentationAddAttributes(builder, attributes)

def PresentationStartAttributesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAttributesVector(builder, numElems: int) -> int:
    return PresentationStartAttributesVector(builder, numElems)

def PresentationEnd(builder):
    return builder.EndObject()

def End(builder):
    return PresentationEnd(builder)
