# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorCommon

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class VerbArgsSpec(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VerbArgsSpec()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVerbArgsSpec(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # VerbArgsSpec
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VerbArgsSpec
    def Dobj(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # VerbArgsSpec
    def Prep(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # VerbArgsSpec
    def Iobj(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

def VerbArgsSpecStart(builder):
    builder.StartObject(3)

def Start(builder):
    VerbArgsSpecStart(builder)

def VerbArgsSpecAddDobj(builder, dobj):
    builder.PrependUint8Slot(0, dobj, 0)

def AddDobj(builder, dobj):
    VerbArgsSpecAddDobj(builder, dobj)

def VerbArgsSpecAddPrep(builder, prep):
    builder.PrependInt16Slot(1, prep, 0)

def AddPrep(builder, prep):
    VerbArgsSpecAddPrep(builder, prep)

def VerbArgsSpecAddIobj(builder, iobj):
    builder.PrependUint8Slot(2, iobj, 0)

def AddIobj(builder, iobj):
    VerbArgsSpecAddIobj(builder, iobj)

def VerbArgsSpecEnd(builder):
    return builder.EndObject()

def End(builder):
    return VerbArgsSpecEnd(builder)
