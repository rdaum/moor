# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorCommon

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class VerbDef(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VerbDef()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVerbDef(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # VerbDef
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VerbDef
    def Uuid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorCommon.Uuid import Uuid
            obj = Uuid()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VerbDef
    def Location(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorCommon.Obj import Obj
            obj = Obj()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VerbDef
    def Owner(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorCommon.Obj import Obj
            obj = Obj()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VerbDef
    def Names(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorCommon.Symbol import Symbol
            obj = Symbol()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VerbDef
    def NamesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VerbDef
    def NamesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # VerbDef
    def Flags(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # VerbDef
    def Args(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorCommon.VerbArgsSpec import VerbArgsSpec
            obj = VerbArgsSpec()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def VerbDefStart(builder):
    builder.StartObject(6)

def Start(builder):
    VerbDefStart(builder)

def VerbDefAddUuid(builder, uuid):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(uuid), 0)

def AddUuid(builder, uuid):
    VerbDefAddUuid(builder, uuid)

def VerbDefAddLocation(builder, location):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(location), 0)

def AddLocation(builder, location):
    VerbDefAddLocation(builder, location)

def VerbDefAddOwner(builder, owner):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(owner), 0)

def AddOwner(builder, owner):
    VerbDefAddOwner(builder, owner)

def VerbDefAddNames(builder, names):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(names), 0)

def AddNames(builder, names):
    VerbDefAddNames(builder, names)

def VerbDefStartNamesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartNamesVector(builder, numElems: int) -> int:
    return VerbDefStartNamesVector(builder, numElems)

def VerbDefAddFlags(builder, flags):
    builder.PrependUint16Slot(4, flags, 0)

def AddFlags(builder, flags):
    VerbDefAddFlags(builder, flags)

def VerbDefAddArgs(builder, args):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(args), 0)

def AddArgs(builder, args):
    VerbDefAddArgs(builder, args)

def VerbDefEnd(builder):
    return builder.EndObject()

def End(builder):
    return VerbDefEnd(builder)
