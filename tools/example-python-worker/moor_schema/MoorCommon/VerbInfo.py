# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorCommon

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class VerbInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VerbInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVerbInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # VerbInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VerbInfo
    def Location(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorCommon.Obj import Obj
            obj = Obj()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VerbInfo
    def Owner(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorCommon.Obj import Obj
            obj = Obj()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VerbInfo
    def Names(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorCommon.Symbol import Symbol
            obj = Symbol()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VerbInfo
    def NamesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VerbInfo
    def NamesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # VerbInfo
    def R(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # VerbInfo
    def W(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # VerbInfo
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # VerbInfo
    def D(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # VerbInfo
    def ArgSpec(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorCommon.Symbol import Symbol
            obj = Symbol()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VerbInfo
    def ArgSpecLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VerbInfo
    def ArgSpecIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def VerbInfoStart(builder):
    builder.StartObject(8)

def Start(builder):
    VerbInfoStart(builder)

def VerbInfoAddLocation(builder, location):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(location), 0)

def AddLocation(builder, location):
    VerbInfoAddLocation(builder, location)

def VerbInfoAddOwner(builder, owner):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(owner), 0)

def AddOwner(builder, owner):
    VerbInfoAddOwner(builder, owner)

def VerbInfoAddNames(builder, names):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(names), 0)

def AddNames(builder, names):
    VerbInfoAddNames(builder, names)

def VerbInfoStartNamesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartNamesVector(builder, numElems: int) -> int:
    return VerbInfoStartNamesVector(builder, numElems)

def VerbInfoAddR(builder, r):
    builder.PrependBoolSlot(3, r, 0)

def AddR(builder, r):
    VerbInfoAddR(builder, r)

def VerbInfoAddW(builder, w):
    builder.PrependBoolSlot(4, w, 0)

def AddW(builder, w):
    VerbInfoAddW(builder, w)

def VerbInfoAddX(builder, x):
    builder.PrependBoolSlot(5, x, 0)

def AddX(builder, x):
    VerbInfoAddX(builder, x)

def VerbInfoAddD(builder, d):
    builder.PrependBoolSlot(6, d, 0)

def AddD(builder, d):
    VerbInfoAddD(builder, d)

def VerbInfoAddArgSpec(builder, argSpec):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(argSpec), 0)

def AddArgSpec(builder, argSpec):
    VerbInfoAddArgSpec(builder, argSpec)

def VerbInfoStartArgSpecVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartArgSpecVector(builder, numElems: int) -> int:
    return VerbInfoStartArgSpecVector(builder, numElems)

def VerbInfoEnd(builder):
    return builder.EndObject()

def End(builder):
    return VerbInfoEnd(builder)
