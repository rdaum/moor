# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorEventLog

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PlayerPresentations(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PlayerPresentations()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPlayerPresentations(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PlayerPresentations
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PlayerPresentations
    def Player(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorCommon.Obj import Obj
            obj = Obj()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PlayerPresentations
    def Presentations(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorCommon.Presentation import Presentation
            obj = Presentation()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PlayerPresentations
    def PresentationsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PlayerPresentations
    def PresentationsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def PlayerPresentationsStart(builder):
    builder.StartObject(2)

def Start(builder):
    PlayerPresentationsStart(builder)

def PlayerPresentationsAddPlayer(builder, player):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(player), 0)

def AddPlayer(builder, player):
    PlayerPresentationsAddPlayer(builder, player)

def PlayerPresentationsAddPresentations(builder, presentations):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(presentations), 0)

def AddPresentations(builder, presentations):
    PlayerPresentationsAddPresentations(builder, presentations)

def PlayerPresentationsStartPresentationsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPresentationsVector(builder, numElems: int) -> int:
    return PlayerPresentationsStartPresentationsVector(builder, numElems)

def PlayerPresentationsEnd(builder):
    return builder.EndObject()

def End(builder):
    return PlayerPresentationsEnd(builder)
