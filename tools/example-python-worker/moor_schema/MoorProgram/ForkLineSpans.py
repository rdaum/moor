# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorProgram

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ForkLineSpans(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ForkLineSpans()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsForkLineSpans(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ForkLineSpans
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ForkLineSpans
    def Spans(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorProgram.LineSpan import LineSpan
            obj = LineSpan()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ForkLineSpans
    def SpansLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ForkLineSpans
    def SpansIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def ForkLineSpansStart(builder):
    builder.StartObject(1)

def Start(builder):
    ForkLineSpansStart(builder)

def ForkLineSpansAddSpans(builder, spans):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(spans), 0)

def AddSpans(builder, spans):
    ForkLineSpansAddSpans(builder, spans)

def ForkLineSpansStartSpansVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSpansVector(builder, numElems: int) -> int:
    return ForkLineSpansStartSpansVector(builder, numElems)

def ForkLineSpansEnd(builder):
    return builder.EndObject()

def End(builder):
    return ForkLineSpansEnd(builder)
