# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorProgram

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ForkVector(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ForkVector()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsForkVector(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ForkVector
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ForkVector
    def Offset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # ForkVector
    def Opcodes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # ForkVector
    def OpcodesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint16Flags, o)
        return 0

    # ForkVector
    def OpcodesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ForkVector
    def OpcodesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def ForkVectorStart(builder):
    builder.StartObject(2)

def Start(builder):
    ForkVectorStart(builder)

def ForkVectorAddOffset(builder, offset):
    builder.PrependUint64Slot(0, offset, 0)

def AddOffset(builder, offset):
    ForkVectorAddOffset(builder, offset)

def ForkVectorAddOpcodes(builder, opcodes):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(opcodes), 0)

def AddOpcodes(builder, opcodes):
    ForkVectorAddOpcodes(builder, opcodes)

def ForkVectorStartOpcodesVector(builder, numElems):
    return builder.StartVector(2, numElems, 2)

def StartOpcodesVector(builder, numElems: int) -> int:
    return ForkVectorStartOpcodesVector(builder, numElems)

def ForkVectorEnd(builder):
    return builder.EndObject()

def End(builder):
    return ForkVectorEnd(builder)
