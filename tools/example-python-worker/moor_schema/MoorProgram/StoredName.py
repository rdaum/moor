# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorProgram

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StoredName(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StoredName()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStoredName(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StoredName
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StoredName
    def Offset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # StoredName
    def ScopeDepth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # StoredName
    def ScopeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

def StoredNameStart(builder):
    builder.StartObject(3)

def Start(builder):
    StoredNameStart(builder)

def StoredNameAddOffset(builder, offset):
    builder.PrependUint16Slot(0, offset, 0)

def AddOffset(builder, offset):
    StoredNameAddOffset(builder, offset)

def StoredNameAddScopeDepth(builder, scopeDepth):
    builder.PrependUint8Slot(1, scopeDepth, 0)

def AddScopeDepth(builder, scopeDepth):
    StoredNameAddScopeDepth(builder, scopeDepth)

def StoredNameAddScopeId(builder, scopeId):
    builder.PrependUint16Slot(2, scopeId, 0)

def AddScopeId(builder, scopeId):
    StoredNameAddScopeId(builder, scopeId)

def StoredNameEnd(builder):
    return builder.EndObject()

def End(builder):
    return StoredNameEnd(builder)
