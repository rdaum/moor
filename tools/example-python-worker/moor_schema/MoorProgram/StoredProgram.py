# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorProgram

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StoredProgram(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StoredProgram()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStoredProgram(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StoredProgram
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StoredProgram
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # StoredProgram
    def MainVector(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # StoredProgram
    def MainVectorAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint16Flags, o)
        return 0

    # StoredProgram
    def MainVectorLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StoredProgram
    def MainVectorIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # StoredProgram
    def ForkVectors(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorProgram.ForkVector import ForkVector
            obj = ForkVector()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StoredProgram
    def ForkVectorsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StoredProgram
    def ForkVectorsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # StoredProgram
    def Literals(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorVar.Var import Var
            obj = Var()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StoredProgram
    def LiteralsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StoredProgram
    def LiteralsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # StoredProgram
    def JumpLabels(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorProgram.StoredJumpLabel import StoredJumpLabel
            obj = StoredJumpLabel()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StoredProgram
    def JumpLabelsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StoredProgram
    def JumpLabelsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # StoredProgram
    def VarNames(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorProgram.StoredNames import StoredNames
            obj = StoredNames()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StoredProgram
    def SymbolTable(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorCommon.Symbol import Symbol
            obj = Symbol()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StoredProgram
    def SymbolTableLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StoredProgram
    def SymbolTableIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # StoredProgram
    def ScatterTables(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorProgram.StoredScatterArgs import StoredScatterArgs
            obj = StoredScatterArgs()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StoredProgram
    def ScatterTablesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StoredProgram
    def ScatterTablesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # StoredProgram
    def ForSequenceOperands(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorProgram.StoredForSequenceOperand import StoredForSequenceOperand
            obj = StoredForSequenceOperand()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StoredProgram
    def ForSequenceOperandsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StoredProgram
    def ForSequenceOperandsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # StoredProgram
    def ForRangeOperands(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorProgram.StoredForRangeOperand import StoredForRangeOperand
            obj = StoredForRangeOperand()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StoredProgram
    def ForRangeOperandsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StoredProgram
    def ForRangeOperandsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # StoredProgram
    def RangeComprehensions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorProgram.StoredRangeComprehend import StoredRangeComprehend
            obj = StoredRangeComprehend()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StoredProgram
    def RangeComprehensionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StoredProgram
    def RangeComprehensionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # StoredProgram
    def ListComprehensions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorProgram.StoredListComprehend import StoredListComprehend
            obj = StoredListComprehend()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StoredProgram
    def ListComprehensionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StoredProgram
    def ListComprehensionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # StoredProgram
    def ErrorOperands(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # StoredProgram
    def ErrorOperandsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # StoredProgram
    def ErrorOperandsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StoredProgram
    def ErrorOperandsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # StoredProgram
    def LambdaPrograms(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorProgram.StoredProgram import StoredProgram
            obj = StoredProgram()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StoredProgram
    def LambdaProgramsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StoredProgram
    def LambdaProgramsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # StoredProgram
    def LineNumberSpans(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorProgram.LineSpan import LineSpan
            obj = LineSpan()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StoredProgram
    def LineNumberSpansLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StoredProgram
    def LineNumberSpansIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # StoredProgram
    def ForkLineNumberSpans(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorProgram.ForkLineSpans import ForkLineSpans
            obj = ForkLineSpans()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StoredProgram
    def ForkLineNumberSpansLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StoredProgram
    def ForkLineNumberSpansIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

def StoredProgramStart(builder):
    builder.StartObject(16)

def Start(builder):
    StoredProgramStart(builder)

def StoredProgramAddVersion(builder, version):
    builder.PrependUint16Slot(0, version, 0)

def AddVersion(builder, version):
    StoredProgramAddVersion(builder, version)

def StoredProgramAddMainVector(builder, mainVector):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(mainVector), 0)

def AddMainVector(builder, mainVector):
    StoredProgramAddMainVector(builder, mainVector)

def StoredProgramStartMainVectorVector(builder, numElems):
    return builder.StartVector(2, numElems, 2)

def StartMainVectorVector(builder, numElems: int) -> int:
    return StoredProgramStartMainVectorVector(builder, numElems)

def StoredProgramAddForkVectors(builder, forkVectors):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(forkVectors), 0)

def AddForkVectors(builder, forkVectors):
    StoredProgramAddForkVectors(builder, forkVectors)

def StoredProgramStartForkVectorsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartForkVectorsVector(builder, numElems: int) -> int:
    return StoredProgramStartForkVectorsVector(builder, numElems)

def StoredProgramAddLiterals(builder, literals):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(literals), 0)

def AddLiterals(builder, literals):
    StoredProgramAddLiterals(builder, literals)

def StoredProgramStartLiteralsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLiteralsVector(builder, numElems: int) -> int:
    return StoredProgramStartLiteralsVector(builder, numElems)

def StoredProgramAddJumpLabels(builder, jumpLabels):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(jumpLabels), 0)

def AddJumpLabels(builder, jumpLabels):
    StoredProgramAddJumpLabels(builder, jumpLabels)

def StoredProgramStartJumpLabelsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartJumpLabelsVector(builder, numElems: int) -> int:
    return StoredProgramStartJumpLabelsVector(builder, numElems)

def StoredProgramAddVarNames(builder, varNames):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(varNames), 0)

def AddVarNames(builder, varNames):
    StoredProgramAddVarNames(builder, varNames)

def StoredProgramAddSymbolTable(builder, symbolTable):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(symbolTable), 0)

def AddSymbolTable(builder, symbolTable):
    StoredProgramAddSymbolTable(builder, symbolTable)

def StoredProgramStartSymbolTableVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSymbolTableVector(builder, numElems: int) -> int:
    return StoredProgramStartSymbolTableVector(builder, numElems)

def StoredProgramAddScatterTables(builder, scatterTables):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(scatterTables), 0)

def AddScatterTables(builder, scatterTables):
    StoredProgramAddScatterTables(builder, scatterTables)

def StoredProgramStartScatterTablesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartScatterTablesVector(builder, numElems: int) -> int:
    return StoredProgramStartScatterTablesVector(builder, numElems)

def StoredProgramAddForSequenceOperands(builder, forSequenceOperands):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(forSequenceOperands), 0)

def AddForSequenceOperands(builder, forSequenceOperands):
    StoredProgramAddForSequenceOperands(builder, forSequenceOperands)

def StoredProgramStartForSequenceOperandsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartForSequenceOperandsVector(builder, numElems: int) -> int:
    return StoredProgramStartForSequenceOperandsVector(builder, numElems)

def StoredProgramAddForRangeOperands(builder, forRangeOperands):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(forRangeOperands), 0)

def AddForRangeOperands(builder, forRangeOperands):
    StoredProgramAddForRangeOperands(builder, forRangeOperands)

def StoredProgramStartForRangeOperandsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartForRangeOperandsVector(builder, numElems: int) -> int:
    return StoredProgramStartForRangeOperandsVector(builder, numElems)

def StoredProgramAddRangeComprehensions(builder, rangeComprehensions):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(rangeComprehensions), 0)

def AddRangeComprehensions(builder, rangeComprehensions):
    StoredProgramAddRangeComprehensions(builder, rangeComprehensions)

def StoredProgramStartRangeComprehensionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRangeComprehensionsVector(builder, numElems: int) -> int:
    return StoredProgramStartRangeComprehensionsVector(builder, numElems)

def StoredProgramAddListComprehensions(builder, listComprehensions):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(listComprehensions), 0)

def AddListComprehensions(builder, listComprehensions):
    StoredProgramAddListComprehensions(builder, listComprehensions)

def StoredProgramStartListComprehensionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartListComprehensionsVector(builder, numElems: int) -> int:
    return StoredProgramStartListComprehensionsVector(builder, numElems)

def StoredProgramAddErrorOperands(builder, errorOperands):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(errorOperands), 0)

def AddErrorOperands(builder, errorOperands):
    StoredProgramAddErrorOperands(builder, errorOperands)

def StoredProgramStartErrorOperandsVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartErrorOperandsVector(builder, numElems: int) -> int:
    return StoredProgramStartErrorOperandsVector(builder, numElems)

def StoredProgramAddLambdaPrograms(builder, lambdaPrograms):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(lambdaPrograms), 0)

def AddLambdaPrograms(builder, lambdaPrograms):
    StoredProgramAddLambdaPrograms(builder, lambdaPrograms)

def StoredProgramStartLambdaProgramsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLambdaProgramsVector(builder, numElems: int) -> int:
    return StoredProgramStartLambdaProgramsVector(builder, numElems)

def StoredProgramAddLineNumberSpans(builder, lineNumberSpans):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(lineNumberSpans), 0)

def AddLineNumberSpans(builder, lineNumberSpans):
    StoredProgramAddLineNumberSpans(builder, lineNumberSpans)

def StoredProgramStartLineNumberSpansVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLineNumberSpansVector(builder, numElems: int) -> int:
    return StoredProgramStartLineNumberSpansVector(builder, numElems)

def StoredProgramAddForkLineNumberSpans(builder, forkLineNumberSpans):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(forkLineNumberSpans), 0)

def AddForkLineNumberSpans(builder, forkLineNumberSpans):
    StoredProgramAddForkLineNumberSpans(builder, forkLineNumberSpans)

def StoredProgramStartForkLineNumberSpansVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartForkLineNumberSpansVector(builder, numElems: int) -> int:
    return StoredProgramStartForkLineNumberSpansVector(builder, numElems)

def StoredProgramEnd(builder):
    return builder.EndObject()

def End(builder):
    return StoredProgramEnd(builder)
