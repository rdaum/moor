# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorProgram

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StoredScatterLabel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StoredScatterLabel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStoredScatterLabel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StoredScatterLabel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StoredScatterLabel
    def LabelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # StoredScatterLabel
    def Label(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def StoredScatterLabelStart(builder):
    builder.StartObject(2)

def Start(builder):
    StoredScatterLabelStart(builder)

def StoredScatterLabelAddLabelType(builder, labelType):
    builder.PrependUint8Slot(0, labelType, 0)

def AddLabelType(builder, labelType):
    StoredScatterLabelAddLabelType(builder, labelType)

def StoredScatterLabelAddLabel(builder, label):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(label), 0)

def AddLabel(builder, label):
    StoredScatterLabelAddLabel(builder, label)

def StoredScatterLabelEnd(builder):
    return builder.EndObject()

def End(builder):
    return StoredScatterLabelEnd(builder)
