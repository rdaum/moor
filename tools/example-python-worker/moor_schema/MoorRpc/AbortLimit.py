# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorRpc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AbortLimit(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AbortLimit()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAbortLimit(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AbortLimit
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AbortLimit
    def Reason(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # AbortLimit
    def Ticks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # AbortLimit
    def TimeNanos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def AbortLimitStart(builder):
    builder.StartObject(3)

def Start(builder):
    AbortLimitStart(builder)

def AbortLimitAddReason(builder, reason):
    builder.PrependUint8Slot(0, reason, 0)

def AddReason(builder, reason):
    AbortLimitAddReason(builder, reason)

def AbortLimitAddTicks(builder, ticks):
    builder.PrependUint64Slot(1, ticks, 0)

def AddTicks(builder, ticks):
    AbortLimitAddTicks(builder, ticks)

def AbortLimitAddTimeNanos(builder, timeNanos):
    builder.PrependUint64Slot(2, timeNanos, 0)

def AddTimeNanos(builder, timeNanos):
    AbortLimitAddTimeNanos(builder, timeNanos)

def AbortLimitEnd(builder):
    return builder.EndObject()

def End(builder):
    return AbortLimitEnd(builder)
