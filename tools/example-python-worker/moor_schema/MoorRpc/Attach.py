# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorRpc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Attach(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Attach()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAttach(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Attach
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Attach
    def AuthToken(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorRpc.AuthToken import AuthToken
            obj = AuthToken()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Attach
    def ConnectType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Attach
    def HandlerObject(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorCommon.Obj import Obj
            obj = Obj()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Attach
    def PeerAddr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Attach
    def LocalPort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # Attach
    def RemotePort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # Attach
    def AcceptableContentTypes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorCommon.Symbol import Symbol
            obj = Symbol()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Attach
    def AcceptableContentTypesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Attach
    def AcceptableContentTypesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def AttachStart(builder):
    builder.StartObject(7)

def Start(builder):
    AttachStart(builder)

def AttachAddAuthToken(builder, authToken):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(authToken), 0)

def AddAuthToken(builder, authToken):
    AttachAddAuthToken(builder, authToken)

def AttachAddConnectType(builder, connectType):
    builder.PrependUint8Slot(1, connectType, 0)

def AddConnectType(builder, connectType):
    AttachAddConnectType(builder, connectType)

def AttachAddHandlerObject(builder, handlerObject):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(handlerObject), 0)

def AddHandlerObject(builder, handlerObject):
    AttachAddHandlerObject(builder, handlerObject)

def AttachAddPeerAddr(builder, peerAddr):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(peerAddr), 0)

def AddPeerAddr(builder, peerAddr):
    AttachAddPeerAddr(builder, peerAddr)

def AttachAddLocalPort(builder, localPort):
    builder.PrependUint16Slot(4, localPort, 0)

def AddLocalPort(builder, localPort):
    AttachAddLocalPort(builder, localPort)

def AttachAddRemotePort(builder, remotePort):
    builder.PrependUint16Slot(5, remotePort, 0)

def AddRemotePort(builder, remotePort):
    AttachAddRemotePort(builder, remotePort)

def AttachAddAcceptableContentTypes(builder, acceptableContentTypes):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(acceptableContentTypes), 0)

def AddAcceptableContentTypes(builder, acceptableContentTypes):
    AttachAddAcceptableContentTypes(builder, acceptableContentTypes)

def AttachStartAcceptableContentTypesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAcceptableContentTypesVector(builder, numElems: int) -> int:
    return AttachStartAcceptableContentTypesVector(builder, numElems)

def AttachEnd(builder):
    return builder.EndObject()

def End(builder):
    return AttachEnd(builder)
