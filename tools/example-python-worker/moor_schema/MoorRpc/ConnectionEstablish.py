# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorRpc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ConnectionEstablish(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ConnectionEstablish()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsConnectionEstablish(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ConnectionEstablish
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ConnectionEstablish
    def PeerAddr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConnectionEstablish
    def LocalPort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # ConnectionEstablish
    def RemotePort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # ConnectionEstablish
    def AcceptableContentTypes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorCommon.Symbol import Symbol
            obj = Symbol()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ConnectionEstablish
    def AcceptableContentTypesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ConnectionEstablish
    def AcceptableContentTypesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # ConnectionEstablish
    def ConnectionAttributes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorRpc.ConnectionAttribute import ConnectionAttribute
            obj = ConnectionAttribute()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ConnectionEstablish
    def ConnectionAttributesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ConnectionEstablish
    def ConnectionAttributesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def ConnectionEstablishStart(builder):
    builder.StartObject(5)

def Start(builder):
    ConnectionEstablishStart(builder)

def ConnectionEstablishAddPeerAddr(builder, peerAddr):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(peerAddr), 0)

def AddPeerAddr(builder, peerAddr):
    ConnectionEstablishAddPeerAddr(builder, peerAddr)

def ConnectionEstablishAddLocalPort(builder, localPort):
    builder.PrependUint16Slot(1, localPort, 0)

def AddLocalPort(builder, localPort):
    ConnectionEstablishAddLocalPort(builder, localPort)

def ConnectionEstablishAddRemotePort(builder, remotePort):
    builder.PrependUint16Slot(2, remotePort, 0)

def AddRemotePort(builder, remotePort):
    ConnectionEstablishAddRemotePort(builder, remotePort)

def ConnectionEstablishAddAcceptableContentTypes(builder, acceptableContentTypes):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(acceptableContentTypes), 0)

def AddAcceptableContentTypes(builder, acceptableContentTypes):
    ConnectionEstablishAddAcceptableContentTypes(builder, acceptableContentTypes)

def ConnectionEstablishStartAcceptableContentTypesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAcceptableContentTypesVector(builder, numElems: int) -> int:
    return ConnectionEstablishStartAcceptableContentTypesVector(builder, numElems)

def ConnectionEstablishAddConnectionAttributes(builder, connectionAttributes):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(connectionAttributes), 0)

def AddConnectionAttributes(builder, connectionAttributes):
    ConnectionEstablishAddConnectionAttributes(builder, connectionAttributes)

def ConnectionEstablishStartConnectionAttributesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartConnectionAttributesVector(builder, numElems: int) -> int:
    return ConnectionEstablishStartConnectionAttributesVector(builder, numElems)

def ConnectionEstablishEnd(builder):
    return builder.EndObject()

def End(builder):
    return ConnectionEstablishEnd(builder)
