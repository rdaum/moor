# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorRpc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Counter(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Counter()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCounter(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Counter
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Counter
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorCommon.Symbol import Symbol
            obj = Symbol()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Counter
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # Counter
    def TotalCumulativeNs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def CounterStart(builder):
    builder.StartObject(3)

def Start(builder):
    CounterStart(builder)

def CounterAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    CounterAddName(builder, name)

def CounterAddCount(builder, count):
    builder.PrependInt64Slot(1, count, 0)

def AddCount(builder, count):
    CounterAddCount(builder, count)

def CounterAddTotalCumulativeNs(builder, totalCumulativeNs):
    builder.PrependInt64Slot(2, totalCumulativeNs, 0)

def AddTotalCumulativeNs(builder, totalCumulativeNs):
    CounterAddTotalCumulativeNs(builder, totalCumulativeNs)

def CounterEnd(builder):
    return builder.EndObject()

def End(builder):
    return CounterEnd(builder)
