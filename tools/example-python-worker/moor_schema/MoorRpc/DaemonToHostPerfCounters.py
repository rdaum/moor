# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorRpc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DaemonToHostPerfCounters(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DaemonToHostPerfCounters()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDaemonToHostPerfCounters(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DaemonToHostPerfCounters
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DaemonToHostPerfCounters
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # DaemonToHostPerfCounters
    def Counters(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorRpc.CounterCategory import CounterCategory
            obj = CounterCategory()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DaemonToHostPerfCounters
    def CountersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DaemonToHostPerfCounters
    def CountersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def DaemonToHostPerfCountersStart(builder):
    builder.StartObject(2)

def Start(builder):
    DaemonToHostPerfCountersStart(builder)

def DaemonToHostPerfCountersAddTimestamp(builder, timestamp):
    builder.PrependUint64Slot(0, timestamp, 0)

def AddTimestamp(builder, timestamp):
    DaemonToHostPerfCountersAddTimestamp(builder, timestamp)

def DaemonToHostPerfCountersAddCounters(builder, counters):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(counters), 0)

def AddCounters(builder, counters):
    DaemonToHostPerfCountersAddCounters(builder, counters)

def DaemonToHostPerfCountersStartCountersVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCountersVector(builder, numElems: int) -> int:
    return DaemonToHostPerfCountersStartCountersVector(builder, numElems)

def DaemonToHostPerfCountersEnd(builder):
    return builder.EndObject()

def End(builder):
    return DaemonToHostPerfCountersEnd(builder)
