# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorRpc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class HistoryRecallSinceSeconds(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = HistoryRecallSinceSeconds()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsHistoryRecallSinceSeconds(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # HistoryRecallSinceSeconds
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # HistoryRecallSinceSeconds
    def SecondsAgo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # HistoryRecallSinceSeconds
    def Limit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def HistoryRecallSinceSecondsStart(builder):
    builder.StartObject(2)

def Start(builder):
    HistoryRecallSinceSecondsStart(builder)

def HistoryRecallSinceSecondsAddSecondsAgo(builder, secondsAgo):
    builder.PrependUint64Slot(0, secondsAgo, 0)

def AddSecondsAgo(builder, secondsAgo):
    HistoryRecallSinceSecondsAddSecondsAgo(builder, secondsAgo)

def HistoryRecallSinceSecondsAddLimit(builder, limit):
    builder.PrependUint64Slot(1, limit, 0)

def AddLimit(builder, limit):
    HistoryRecallSinceSecondsAddLimit(builder, limit)

def HistoryRecallSinceSecondsEnd(builder):
    return builder.EndObject()

def End(builder):
    return HistoryRecallSinceSecondsEnd(builder)
