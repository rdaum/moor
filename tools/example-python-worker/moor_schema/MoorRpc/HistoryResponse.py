# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorRpc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class HistoryResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = HistoryResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsHistoryResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # HistoryResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # HistoryResponse
    def Events(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorRpc.HistoricalNarrativeEvent import HistoricalNarrativeEvent
            obj = HistoricalNarrativeEvent()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HistoryResponse
    def EventsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HistoryResponse
    def EventsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # HistoryResponse
    def TimeRangeStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # HistoryResponse
    def TimeRangeEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # HistoryResponse
    def TotalEvents(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # HistoryResponse
    def HasMoreBefore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # HistoryResponse
    def EarliestEventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorCommon.Uuid import Uuid
            obj = Uuid()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HistoryResponse
    def LatestEventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorCommon.Uuid import Uuid
            obj = Uuid()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def HistoryResponseStart(builder):
    builder.StartObject(7)

def Start(builder):
    HistoryResponseStart(builder)

def HistoryResponseAddEvents(builder, events):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(events), 0)

def AddEvents(builder, events):
    HistoryResponseAddEvents(builder, events)

def HistoryResponseStartEventsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartEventsVector(builder, numElems: int) -> int:
    return HistoryResponseStartEventsVector(builder, numElems)

def HistoryResponseAddTimeRangeStart(builder, timeRangeStart):
    builder.PrependUint64Slot(1, timeRangeStart, 0)

def AddTimeRangeStart(builder, timeRangeStart):
    HistoryResponseAddTimeRangeStart(builder, timeRangeStart)

def HistoryResponseAddTimeRangeEnd(builder, timeRangeEnd):
    builder.PrependUint64Slot(2, timeRangeEnd, 0)

def AddTimeRangeEnd(builder, timeRangeEnd):
    HistoryResponseAddTimeRangeEnd(builder, timeRangeEnd)

def HistoryResponseAddTotalEvents(builder, totalEvents):
    builder.PrependUint64Slot(3, totalEvents, 0)

def AddTotalEvents(builder, totalEvents):
    HistoryResponseAddTotalEvents(builder, totalEvents)

def HistoryResponseAddHasMoreBefore(builder, hasMoreBefore):
    builder.PrependBoolSlot(4, hasMoreBefore, 0)

def AddHasMoreBefore(builder, hasMoreBefore):
    HistoryResponseAddHasMoreBefore(builder, hasMoreBefore)

def HistoryResponseAddEarliestEventId(builder, earliestEventId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(earliestEventId), 0)

def AddEarliestEventId(builder, earliestEventId):
    HistoryResponseAddEarliestEventId(builder, earliestEventId)

def HistoryResponseAddLatestEventId(builder, latestEventId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(latestEventId), 0)

def AddLatestEventId(builder, latestEventId):
    HistoryResponseAddLatestEventId(builder, latestEventId)

def HistoryResponseEnd(builder):
    return builder.EndObject()

def End(builder):
    return HistoryResponseEnd(builder)
