# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorRpc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class HostClientToDaemonMsg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = HostClientToDaemonMsg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsHostClientToDaemonMsg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # HostClientToDaemonMsg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # HostClientToDaemonMsg
    def ClientData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # HostClientToDaemonMsg
    def ClientDataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # HostClientToDaemonMsg
    def ClientDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HostClientToDaemonMsg
    def ClientDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # HostClientToDaemonMsg
    def Message(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorRpc.HostClientToDaemonMessage import HostClientToDaemonMessage
            obj = HostClientToDaemonMessage()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def HostClientToDaemonMsgStart(builder):
    builder.StartObject(2)

def Start(builder):
    HostClientToDaemonMsgStart(builder)

def HostClientToDaemonMsgAddClientData(builder, clientData):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(clientData), 0)

def AddClientData(builder, clientData):
    HostClientToDaemonMsgAddClientData(builder, clientData)

def HostClientToDaemonMsgStartClientDataVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartClientDataVector(builder, numElems: int) -> int:
    return HostClientToDaemonMsgStartClientDataVector(builder, numElems)

def HostClientToDaemonMsgAddMessage(builder, message):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(message), 0)

def AddMessage(builder, message):
    HostClientToDaemonMsgAddMessage(builder, message)

def HostClientToDaemonMsgEnd(builder):
    return builder.EndObject()

def End(builder):
    return HostClientToDaemonMsgEnd(builder)
