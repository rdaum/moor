# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorRpc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class InvokeVerb(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = InvokeVerb()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsInvokeVerb(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # InvokeVerb
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # InvokeVerb
    def ClientToken(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorRpc.ClientToken import ClientToken
            obj = ClientToken()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # InvokeVerb
    def AuthToken(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorRpc.AuthToken import AuthToken
            obj = AuthToken()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # InvokeVerb
    def Object(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorCommon.ObjectRef import ObjectRef
            obj = ObjectRef()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # InvokeVerb
    def Verb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorCommon.Symbol import Symbol
            obj = Symbol()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # InvokeVerb
    def Args(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorVar.Var import Var
            obj = Var()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # InvokeVerb
    def ArgsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # InvokeVerb
    def ArgsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def InvokeVerbStart(builder):
    builder.StartObject(5)

def Start(builder):
    InvokeVerbStart(builder)

def InvokeVerbAddClientToken(builder, clientToken):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(clientToken), 0)

def AddClientToken(builder, clientToken):
    InvokeVerbAddClientToken(builder, clientToken)

def InvokeVerbAddAuthToken(builder, authToken):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(authToken), 0)

def AddAuthToken(builder, authToken):
    InvokeVerbAddAuthToken(builder, authToken)

def InvokeVerbAddObject(builder, object):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(object), 0)

def AddObject(builder, object):
    InvokeVerbAddObject(builder, object)

def InvokeVerbAddVerb(builder, verb):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(verb), 0)

def AddVerb(builder, verb):
    InvokeVerbAddVerb(builder, verb)

def InvokeVerbAddArgs(builder, args):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(args), 0)

def AddArgs(builder, args):
    InvokeVerbAddArgs(builder, args)

def InvokeVerbStartArgsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartArgsVector(builder, numElems: int) -> int:
    return InvokeVerbStartArgsVector(builder, numElems)

def InvokeVerbEnd(builder):
    return builder.EndObject()

def End(builder):
    return InvokeVerbEnd(builder)
