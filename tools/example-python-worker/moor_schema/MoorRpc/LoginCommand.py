# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorRpc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class LoginCommand(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LoginCommand()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLoginCommand(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # LoginCommand
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LoginCommand
    def ClientToken(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorRpc.ClientToken import ClientToken
            obj = ClientToken()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LoginCommand
    def HandlerObject(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorCommon.Obj import Obj
            obj = Obj()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LoginCommand
    def ConnectArgs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # LoginCommand
    def ConnectArgsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LoginCommand
    def ConnectArgsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # LoginCommand
    def DoAttach(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def LoginCommandStart(builder):
    builder.StartObject(4)

def Start(builder):
    LoginCommandStart(builder)

def LoginCommandAddClientToken(builder, clientToken):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(clientToken), 0)

def AddClientToken(builder, clientToken):
    LoginCommandAddClientToken(builder, clientToken)

def LoginCommandAddHandlerObject(builder, handlerObject):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(handlerObject), 0)

def AddHandlerObject(builder, handlerObject):
    LoginCommandAddHandlerObject(builder, handlerObject)

def LoginCommandAddConnectArgs(builder, connectArgs):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(connectArgs), 0)

def AddConnectArgs(builder, connectArgs):
    LoginCommandAddConnectArgs(builder, connectArgs)

def LoginCommandStartConnectArgsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartConnectArgsVector(builder, numElems: int) -> int:
    return LoginCommandStartConnectArgsVector(builder, numElems)

def LoginCommandAddDoAttach(builder, doAttach):
    builder.PrependBoolSlot(3, doAttach, 0)

def AddDoAttach(builder, doAttach):
    LoginCommandAddDoAttach(builder, doAttach)

def LoginCommandEnd(builder):
    return builder.EndObject()

def End(builder):
    return LoginCommandEnd(builder)
