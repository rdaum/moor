# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorRpc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class WorkerRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = WorkerRequest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsWorkerRequest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # WorkerRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # WorkerRequest
    def WorkerId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorCommon.Uuid import Uuid
            obj = Uuid()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # WorkerRequest
    def Token(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorRpc.WorkerToken import WorkerToken
            obj = WorkerToken()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # WorkerRequest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorCommon.Uuid import Uuid
            obj = Uuid()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # WorkerRequest
    def Perms(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorCommon.Obj import Obj
            obj = Obj()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # WorkerRequest
    def Request(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorVar.Var import Var
            obj = Var()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # WorkerRequest
    def RequestLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WorkerRequest
    def RequestIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # WorkerRequest
    def TimeoutMs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def WorkerRequestStart(builder):
    builder.StartObject(6)

def Start(builder):
    WorkerRequestStart(builder)

def WorkerRequestAddWorkerId(builder, workerId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(workerId), 0)

def AddWorkerId(builder, workerId):
    WorkerRequestAddWorkerId(builder, workerId)

def WorkerRequestAddToken(builder, token):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(token), 0)

def AddToken(builder, token):
    WorkerRequestAddToken(builder, token)

def WorkerRequestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    WorkerRequestAddId(builder, id)

def WorkerRequestAddPerms(builder, perms):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(perms), 0)

def AddPerms(builder, perms):
    WorkerRequestAddPerms(builder, perms)

def WorkerRequestAddRequest(builder, request):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(request), 0)

def AddRequest(builder, request):
    WorkerRequestAddRequest(builder, request)

def WorkerRequestStartRequestVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRequestVector(builder, numElems: int) -> int:
    return WorkerRequestStartRequestVector(builder, numElems)

def WorkerRequestAddTimeoutMs(builder, timeoutMs):
    builder.PrependUint64Slot(5, timeoutMs, 0)

def AddTimeoutMs(builder, timeoutMs):
    WorkerRequestAddTimeoutMs(builder, timeoutMs)

def WorkerRequestEnd(builder):
    return builder.EndObject()

def End(builder):
    return WorkerRequestEnd(builder)
