# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorTask

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Activation(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Activation()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsActivation(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Activation
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Activation
    def Frame(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorTask.Frame import Frame
            obj = Frame()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Activation
    def This(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorVar.Var import Var
            obj = Var()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Activation
    def Player(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorCommon.Obj import Obj
            obj = Obj()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Activation
    def Args(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorVar.Var import Var
            obj = Var()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Activation
    def ArgsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Activation
    def ArgsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # Activation
    def VerbName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorCommon.Symbol import Symbol
            obj = Symbol()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Activation
    def Verbdef(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorCommon.VerbDef import VerbDef
            obj = VerbDef()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Activation
    def Permissions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorCommon.Obj import Obj
            obj = Obj()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ActivationStart(builder):
    builder.StartObject(7)

def Start(builder):
    ActivationStart(builder)

def ActivationAddFrame(builder, frame):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(frame), 0)

def AddFrame(builder, frame):
    ActivationAddFrame(builder, frame)

def ActivationAddThis(builder, this):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(this), 0)

def AddThis(builder, this):
    ActivationAddThis(builder, this)

def ActivationAddPlayer(builder, player):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(player), 0)

def AddPlayer(builder, player):
    ActivationAddPlayer(builder, player)

def ActivationAddArgs(builder, args):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(args), 0)

def AddArgs(builder, args):
    ActivationAddArgs(builder, args)

def ActivationStartArgsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartArgsVector(builder, numElems: int) -> int:
    return ActivationStartArgsVector(builder, numElems)

def ActivationAddVerbName(builder, verbName):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(verbName), 0)

def AddVerbName(builder, verbName):
    ActivationAddVerbName(builder, verbName)

def ActivationAddVerbdef(builder, verbdef):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(verbdef), 0)

def AddVerbdef(builder, verbdef):
    ActivationAddVerbdef(builder, verbdef)

def ActivationAddPermissions(builder, permissions):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(permissions), 0)

def AddPermissions(builder, permissions):
    ActivationAddPermissions(builder, permissions)

def ActivationEnd(builder):
    return builder.EndObject()

def End(builder):
    return ActivationEnd(builder)
