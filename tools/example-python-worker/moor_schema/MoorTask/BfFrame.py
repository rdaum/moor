# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorTask

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BfFrame(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BfFrame()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBfFrame(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # BfFrame
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BfFrame
    def BfId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # BfFrame
    def BfTrampoline(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # BfFrame
    def HasTrampoline(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # BfFrame
    def BfTrampolineArg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorVar.Var import Var
            obj = Var()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # BfFrame
    def ReturnValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorVar.Var import Var
            obj = Var()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def BfFrameStart(builder):
    builder.StartObject(5)

def Start(builder):
    BfFrameStart(builder)

def BfFrameAddBfId(builder, bfId):
    builder.PrependUint16Slot(0, bfId, 0)

def AddBfId(builder, bfId):
    BfFrameAddBfId(builder, bfId)

def BfFrameAddBfTrampoline(builder, bfTrampoline):
    builder.PrependUint64Slot(1, bfTrampoline, 0)

def AddBfTrampoline(builder, bfTrampoline):
    BfFrameAddBfTrampoline(builder, bfTrampoline)

def BfFrameAddHasTrampoline(builder, hasTrampoline):
    builder.PrependBoolSlot(2, hasTrampoline, 0)

def AddHasTrampoline(builder, hasTrampoline):
    BfFrameAddHasTrampoline(builder, hasTrampoline)

def BfFrameAddBfTrampolineArg(builder, bfTrampolineArg):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(bfTrampolineArg), 0)

def AddBfTrampolineArg(builder, bfTrampolineArg):
    BfFrameAddBfTrampolineArg(builder, bfTrampolineArg)

def BfFrameAddReturnValue(builder, returnValue):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(returnValue), 0)

def AddReturnValue(builder, returnValue):
    BfFrameAddReturnValue(builder, returnValue)

def BfFrameEnd(builder):
    return builder.EndObject()

def End(builder):
    return BfFrameEnd(builder)
