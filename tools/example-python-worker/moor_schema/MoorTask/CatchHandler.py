# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorTask

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CatchHandler(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CatchHandler()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCatchHandler(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CatchHandler
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CatchHandler
    def CatchType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorTask.CatchType import CatchType
            obj = CatchType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CatchHandler
    def Label(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

def CatchHandlerStart(builder):
    builder.StartObject(2)

def Start(builder):
    CatchHandlerStart(builder)

def CatchHandlerAddCatchType(builder, catchType):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(catchType), 0)

def AddCatchType(builder, catchType):
    CatchHandlerAddCatchType(builder, catchType)

def CatchHandlerAddLabel(builder, label):
    builder.PrependUint16Slot(1, label, 0)

def AddLabel(builder, label):
    CatchHandlerAddLabel(builder, label)

def CatchHandlerEnd(builder):
    return builder.EndObject()

def End(builder):
    return CatchHandlerEnd(builder)
