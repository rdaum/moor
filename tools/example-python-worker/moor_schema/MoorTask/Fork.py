# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorTask

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Fork(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Fork()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFork(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Fork
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Fork
    def Player(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorCommon.Obj import Obj
            obj = Obj()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Fork
    def Progr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorCommon.Obj import Obj
            obj = Obj()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Fork
    def ParentTaskId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Fork
    def DelayNanos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Fork
    def HasDelay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Fork
    def Activation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorTask.Activation import Activation
            obj = Activation()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Fork
    def ForkVectorOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Fork
    def TaskId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorProgram.StoredName import StoredName
            obj = StoredName()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ForkStart(builder):
    builder.StartObject(8)

def Start(builder):
    ForkStart(builder)

def ForkAddPlayer(builder, player):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(player), 0)

def AddPlayer(builder, player):
    ForkAddPlayer(builder, player)

def ForkAddProgr(builder, progr):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(progr), 0)

def AddProgr(builder, progr):
    ForkAddProgr(builder, progr)

def ForkAddParentTaskId(builder, parentTaskId):
    builder.PrependUint64Slot(2, parentTaskId, 0)

def AddParentTaskId(builder, parentTaskId):
    ForkAddParentTaskId(builder, parentTaskId)

def ForkAddDelayNanos(builder, delayNanos):
    builder.PrependUint64Slot(3, delayNanos, 0)

def AddDelayNanos(builder, delayNanos):
    ForkAddDelayNanos(builder, delayNanos)

def ForkAddHasDelay(builder, hasDelay):
    builder.PrependBoolSlot(4, hasDelay, 0)

def AddHasDelay(builder, hasDelay):
    ForkAddHasDelay(builder, hasDelay)

def ForkAddActivation(builder, activation):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(activation), 0)

def AddActivation(builder, activation):
    ForkAddActivation(builder, activation)

def ForkAddForkVectorOffset(builder, forkVectorOffset):
    builder.PrependUint64Slot(6, forkVectorOffset, 0)

def AddForkVectorOffset(builder, forkVectorOffset):
    ForkAddForkVectorOffset(builder, forkVectorOffset)

def ForkAddTaskId(builder, taskId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(taskId), 0)

def AddTaskId(builder, taskId):
    ForkAddTaskId(builder, taskId)

def ForkEnd(builder):
    return builder.EndObject()

def End(builder):
    return ForkEnd(builder)
