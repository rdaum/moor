# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorTask

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MooStackFrame(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MooStackFrame()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMooStackFrame(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MooStackFrame
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MooStackFrame
    def Program(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorProgram.StoredProgram import StoredProgram
            obj = StoredProgram()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MooStackFrame
    def Pc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # MooStackFrame
    def PcType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorTask.PcType import PcType
            obj = PcType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MooStackFrame
    def Environment(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorTask.EnvironmentScope import EnvironmentScope
            obj = EnvironmentScope()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MooStackFrame
    def EnvironmentLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MooStackFrame
    def EnvironmentIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # MooStackFrame
    def Valstack(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorVar.Var import Var
            obj = Var()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MooStackFrame
    def ValstackLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MooStackFrame
    def ValstackIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # MooStackFrame
    def ScopeStack(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorTask.Scope import Scope
            obj = Scope()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MooStackFrame
    def ScopeStackLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MooStackFrame
    def ScopeStackIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # MooStackFrame
    def Temp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorVar.Var import Var
            obj = Var()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MooStackFrame
    def CatchStack(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorTask.CatchHandler import CatchHandler
            obj = CatchHandler()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MooStackFrame
    def CatchStackLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MooStackFrame
    def CatchStackIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # MooStackFrame
    def FinallyStack(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorTask.FinallyReason import FinallyReason
            obj = FinallyReason()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MooStackFrame
    def FinallyStackLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MooStackFrame
    def FinallyStackIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # MooStackFrame
    def CaptureStack(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorTask.CapturedVar import CapturedVar
            obj = CapturedVar()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MooStackFrame
    def CaptureStackLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MooStackFrame
    def CaptureStackIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

def MooStackFrameStart(builder):
    builder.StartObject(10)

def Start(builder):
    MooStackFrameStart(builder)

def MooStackFrameAddProgram(builder, program):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(program), 0)

def AddProgram(builder, program):
    MooStackFrameAddProgram(builder, program)

def MooStackFrameAddPc(builder, pc):
    builder.PrependUint64Slot(1, pc, 0)

def AddPc(builder, pc):
    MooStackFrameAddPc(builder, pc)

def MooStackFrameAddPcType(builder, pcType):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(pcType), 0)

def AddPcType(builder, pcType):
    MooStackFrameAddPcType(builder, pcType)

def MooStackFrameAddEnvironment(builder, environment):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(environment), 0)

def AddEnvironment(builder, environment):
    MooStackFrameAddEnvironment(builder, environment)

def MooStackFrameStartEnvironmentVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartEnvironmentVector(builder, numElems: int) -> int:
    return MooStackFrameStartEnvironmentVector(builder, numElems)

def MooStackFrameAddValstack(builder, valstack):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(valstack), 0)

def AddValstack(builder, valstack):
    MooStackFrameAddValstack(builder, valstack)

def MooStackFrameStartValstackVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartValstackVector(builder, numElems: int) -> int:
    return MooStackFrameStartValstackVector(builder, numElems)

def MooStackFrameAddScopeStack(builder, scopeStack):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(scopeStack), 0)

def AddScopeStack(builder, scopeStack):
    MooStackFrameAddScopeStack(builder, scopeStack)

def MooStackFrameStartScopeStackVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartScopeStackVector(builder, numElems: int) -> int:
    return MooStackFrameStartScopeStackVector(builder, numElems)

def MooStackFrameAddTemp(builder, temp):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(temp), 0)

def AddTemp(builder, temp):
    MooStackFrameAddTemp(builder, temp)

def MooStackFrameAddCatchStack(builder, catchStack):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(catchStack), 0)

def AddCatchStack(builder, catchStack):
    MooStackFrameAddCatchStack(builder, catchStack)

def MooStackFrameStartCatchStackVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCatchStackVector(builder, numElems: int) -> int:
    return MooStackFrameStartCatchStackVector(builder, numElems)

def MooStackFrameAddFinallyStack(builder, finallyStack):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(finallyStack), 0)

def AddFinallyStack(builder, finallyStack):
    MooStackFrameAddFinallyStack(builder, finallyStack)

def MooStackFrameStartFinallyStackVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartFinallyStackVector(builder, numElems: int) -> int:
    return MooStackFrameStartFinallyStackVector(builder, numElems)

def MooStackFrameAddCaptureStack(builder, captureStack):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(captureStack), 0)

def AddCaptureStack(builder, captureStack):
    MooStackFrameAddCaptureStack(builder, captureStack)

def MooStackFrameStartCaptureStackVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCaptureStackVector(builder, numElems: int) -> int:
    return MooStackFrameStartCaptureStackVector(builder, numElems)

def MooStackFrameEnd(builder):
    return builder.EndObject()

def End(builder):
    return MooStackFrameEnd(builder)
