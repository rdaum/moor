# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorTask

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PendingTimeout(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PendingTimeout()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPendingTimeout(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PendingTimeout
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PendingTimeout
    def Reason(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorTask.AbortLimitReason import AbortLimitReason
            obj = AbortLimitReason()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PendingTimeout
    def This(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorVar.Var import Var
            obj = Var()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PendingTimeout
    def VerbName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorCommon.Symbol import Symbol
            obj = Symbol()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PendingTimeout
    def LineNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def PendingTimeoutStart(builder):
    builder.StartObject(4)

def Start(builder):
    PendingTimeoutStart(builder)

def PendingTimeoutAddReason(builder, reason):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(reason), 0)

def AddReason(builder, reason):
    PendingTimeoutAddReason(builder, reason)

def PendingTimeoutAddThis(builder, this):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(this), 0)

def AddThis(builder, this):
    PendingTimeoutAddThis(builder, this)

def PendingTimeoutAddVerbName(builder, verbName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(verbName), 0)

def AddVerbName(builder, verbName):
    PendingTimeoutAddVerbName(builder, verbName)

def PendingTimeoutAddLineNumber(builder, lineNumber):
    builder.PrependUint64Slot(3, lineNumber, 0)

def AddLineNumber(builder, lineNumber):
    PendingTimeoutAddLineNumber(builder, lineNumber)

def PendingTimeoutEnd(builder):
    return builder.EndObject()

def End(builder):
    return PendingTimeoutEnd(builder)
