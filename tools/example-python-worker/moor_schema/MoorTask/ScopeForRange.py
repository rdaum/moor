# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorTask

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ScopeForRange(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ScopeForRange()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsScopeForRange(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ScopeForRange
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ScopeForRange
    def CurrentValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorVar.Var import Var
            obj = Var()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ScopeForRange
    def EndValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorVar.Var import Var
            obj = Var()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ScopeForRange
    def LoopVariable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorProgram.StoredName import StoredName
            obj = StoredName()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ScopeForRange
    def EndLabel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

def ScopeForRangeStart(builder):
    builder.StartObject(4)

def Start(builder):
    ScopeForRangeStart(builder)

def ScopeForRangeAddCurrentValue(builder, currentValue):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(currentValue), 0)

def AddCurrentValue(builder, currentValue):
    ScopeForRangeAddCurrentValue(builder, currentValue)

def ScopeForRangeAddEndValue(builder, endValue):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(endValue), 0)

def AddEndValue(builder, endValue):
    ScopeForRangeAddEndValue(builder, endValue)

def ScopeForRangeAddLoopVariable(builder, loopVariable):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(loopVariable), 0)

def AddLoopVariable(builder, loopVariable):
    ScopeForRangeAddLoopVariable(builder, loopVariable)

def ScopeForRangeAddEndLabel(builder, endLabel):
    builder.PrependUint16Slot(3, endLabel, 0)

def AddEndLabel(builder, endLabel):
    ScopeForRangeAddEndLabel(builder, endLabel)

def ScopeForRangeEnd(builder):
    return builder.EndObject()

def End(builder):
    return ScopeForRangeEnd(builder)
