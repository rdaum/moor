# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorTask

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ScopeForSequence(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ScopeForSequence()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsScopeForSequence(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ScopeForSequence
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ScopeForSequence
    def Sequence(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorVar.Var import Var
            obj = Var()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ScopeForSequence
    def CurrentIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # ScopeForSequence
    def ValueBind(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorProgram.StoredName import StoredName
            obj = StoredName()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ScopeForSequence
    def KeyBind(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorProgram.StoredName import StoredName
            obj = StoredName()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ScopeForSequence
    def EndLabel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

def ScopeForSequenceStart(builder):
    builder.StartObject(5)

def Start(builder):
    ScopeForSequenceStart(builder)

def ScopeForSequenceAddSequence(builder, sequence):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sequence), 0)

def AddSequence(builder, sequence):
    ScopeForSequenceAddSequence(builder, sequence)

def ScopeForSequenceAddCurrentIndex(builder, currentIndex):
    builder.PrependUint64Slot(1, currentIndex, 0)

def AddCurrentIndex(builder, currentIndex):
    ScopeForSequenceAddCurrentIndex(builder, currentIndex)

def ScopeForSequenceAddValueBind(builder, valueBind):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(valueBind), 0)

def AddValueBind(builder, valueBind):
    ScopeForSequenceAddValueBind(builder, valueBind)

def ScopeForSequenceAddKeyBind(builder, keyBind):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(keyBind), 0)

def AddKeyBind(builder, keyBind):
    ScopeForSequenceAddKeyBind(builder, keyBind)

def ScopeForSequenceAddEndLabel(builder, endLabel):
    builder.PrependUint16Slot(4, endLabel, 0)

def AddEndLabel(builder, endLabel):
    ScopeForSequenceAddEndLabel(builder, endLabel)

def ScopeForSequenceEnd(builder):
    return builder.EndObject()

def End(builder):
    return ScopeForSequenceEnd(builder)
