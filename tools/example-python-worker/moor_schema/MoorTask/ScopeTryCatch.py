# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorTask

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ScopeTryCatch(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ScopeTryCatch()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsScopeTryCatch(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ScopeTryCatch
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ScopeTryCatch
    def Handlers(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorTask.CatchHandler import CatchHandler
            obj = CatchHandler()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ScopeTryCatch
    def HandlersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ScopeTryCatch
    def HandlersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def ScopeTryCatchStart(builder):
    builder.StartObject(1)

def Start(builder):
    ScopeTryCatchStart(builder)

def ScopeTryCatchAddHandlers(builder, handlers):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(handlers), 0)

def AddHandlers(builder, handlers):
    ScopeTryCatchAddHandlers(builder, handlers)

def ScopeTryCatchStartHandlersVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartHandlersVector(builder, numElems: int) -> int:
    return ScopeTryCatchStartHandlersVector(builder, numElems)

def ScopeTryCatchEnd(builder):
    return builder.EndObject()

def End(builder):
    return ScopeTryCatchEnd(builder)
