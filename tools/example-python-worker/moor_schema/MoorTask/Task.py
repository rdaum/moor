# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorTask

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Task(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Task()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTask(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Task
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Task
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # Task
    def TaskId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Task
    def Player(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorCommon.Obj import Obj
            obj = Obj()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Task
    def TaskStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorTask.TaskStart import TaskStart
            obj = TaskStart()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Task
    def VmHost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorTask.VmHost import VmHost
            obj = VmHost()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Task
    def Perms(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorCommon.Obj import Obj
            obj = Obj()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Task
    def Retries(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Task
    def RetryState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorTask.VMExecState import VMExecState
            obj = VMExecState()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Task
    def HandlingUncaughtError(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Task
    def PendingException(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorCommon.Exception import Exception
            obj = Exception()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Task
    def HandlingTaskTimeout(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Task
    def PendingTimeout(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorTask.PendingTimeout import PendingTimeout
            obj = PendingTimeout()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def TaskStart(builder):
    builder.StartObject(12)

def Start(builder):
    TaskStart(builder)

def TaskAddVersion(builder, version):
    builder.PrependUint16Slot(0, version, 0)

def AddVersion(builder, version):
    TaskAddVersion(builder, version)

def TaskAddTaskId(builder, taskId):
    builder.PrependUint64Slot(1, taskId, 0)

def AddTaskId(builder, taskId):
    TaskAddTaskId(builder, taskId)

def TaskAddPlayer(builder, player):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(player), 0)

def AddPlayer(builder, player):
    TaskAddPlayer(builder, player)

def TaskAddTaskStart(builder, taskStart):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(taskStart), 0)

def AddTaskStart(builder, taskStart):
    TaskAddTaskStart(builder, taskStart)

def TaskAddVmHost(builder, vmHost):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(vmHost), 0)

def AddVmHost(builder, vmHost):
    TaskAddVmHost(builder, vmHost)

def TaskAddPerms(builder, perms):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(perms), 0)

def AddPerms(builder, perms):
    TaskAddPerms(builder, perms)

def TaskAddRetries(builder, retries):
    builder.PrependUint8Slot(6, retries, 0)

def AddRetries(builder, retries):
    TaskAddRetries(builder, retries)

def TaskAddRetryState(builder, retryState):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(retryState), 0)

def AddRetryState(builder, retryState):
    TaskAddRetryState(builder, retryState)

def TaskAddHandlingUncaughtError(builder, handlingUncaughtError):
    builder.PrependBoolSlot(8, handlingUncaughtError, 0)

def AddHandlingUncaughtError(builder, handlingUncaughtError):
    TaskAddHandlingUncaughtError(builder, handlingUncaughtError)

def TaskAddPendingException(builder, pendingException):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(pendingException), 0)

def AddPendingException(builder, pendingException):
    TaskAddPendingException(builder, pendingException)

def TaskAddHandlingTaskTimeout(builder, handlingTaskTimeout):
    builder.PrependBoolSlot(10, handlingTaskTimeout, 0)

def AddHandlingTaskTimeout(builder, handlingTaskTimeout):
    TaskAddHandlingTaskTimeout(builder, handlingTaskTimeout)

def TaskAddPendingTimeout(builder, pendingTimeout):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(pendingTimeout), 0)

def AddPendingTimeout(builder, pendingTimeout):
    TaskAddPendingTimeout(builder, pendingTimeout)

def TaskEnd(builder):
    return builder.EndObject()

def End(builder):
    return TaskEnd(builder)
