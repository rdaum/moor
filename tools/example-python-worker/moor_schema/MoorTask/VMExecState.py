# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorTask

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class VMExecState(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VMExecState()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVMExecState(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # VMExecState
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VMExecState
    def ActivationStack(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorTask.Activation import Activation
            obj = Activation()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VMExecState
    def ActivationStackLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VMExecState
    def ActivationStackIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # VMExecState
    def TickCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # VMExecState
    def StartTimeNanos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def VMExecStateStart(builder):
    builder.StartObject(3)

def Start(builder):
    VMExecStateStart(builder)

def VMExecStateAddActivationStack(builder, activationStack):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(activationStack), 0)

def AddActivationStack(builder, activationStack):
    VMExecStateAddActivationStack(builder, activationStack)

def VMExecStateStartActivationStackVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartActivationStackVector(builder, numElems: int) -> int:
    return VMExecStateStartActivationStackVector(builder, numElems)

def VMExecStateAddTickCount(builder, tickCount):
    builder.PrependUint64Slot(1, tickCount, 0)

def AddTickCount(builder, tickCount):
    VMExecStateAddTickCount(builder, tickCount)

def VMExecStateAddStartTimeNanos(builder, startTimeNanos):
    builder.PrependUint64Slot(2, startTimeNanos, 0)

def AddStartTimeNanos(builder, startTimeNanos):
    VMExecStateAddStartTimeNanos(builder, startTimeNanos)

def VMExecStateEnd(builder):
    return builder.EndObject()

def End(builder):
    return VMExecStateEnd(builder)
