# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorTask

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class VmHost(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VmHost()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVmHost(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # VmHost
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VmHost
    def TaskId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # VmHost
    def MaxStackDepth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # VmHost
    def MaxTicks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # VmHost
    def MaxTimeMs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # VmHost
    def ExecState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorTask.VMExecState import VMExecState
            obj = VMExecState()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def VmHostStart(builder):
    builder.StartObject(5)

def Start(builder):
    VmHostStart(builder)

def VmHostAddTaskId(builder, taskId):
    builder.PrependUint64Slot(0, taskId, 0)

def AddTaskId(builder, taskId):
    VmHostAddTaskId(builder, taskId)

def VmHostAddMaxStackDepth(builder, maxStackDepth):
    builder.PrependUint64Slot(1, maxStackDepth, 0)

def AddMaxStackDepth(builder, maxStackDepth):
    VmHostAddMaxStackDepth(builder, maxStackDepth)

def VmHostAddMaxTicks(builder, maxTicks):
    builder.PrependUint64Slot(2, maxTicks, 0)

def AddMaxTicks(builder, maxTicks):
    VmHostAddMaxTicks(builder, maxTicks)

def VmHostAddMaxTimeMs(builder, maxTimeMs):
    builder.PrependUint64Slot(3, maxTimeMs, 0)

def AddMaxTimeMs(builder, maxTimeMs):
    VmHostAddMaxTimeMs(builder, maxTimeMs)

def VmHostAddExecState(builder, execState):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(execState), 0)

def AddExecState(builder, execState):
    VmHostAddExecState(builder, execState)

def VmHostEnd(builder):
    return builder.EndObject()

def End(builder):
    return VmHostEnd(builder)
