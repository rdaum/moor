# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorVar

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Var(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Var()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVar(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Var
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Var
    def VariantType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Var
    def Variant(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def VarStart(builder):
    builder.StartObject(2)

def Start(builder):
    VarStart(builder)

def VarAddVariantType(builder, variantType):
    builder.PrependUint8Slot(0, variantType, 0)

def AddVariantType(builder, variantType):
    VarAddVariantType(builder, variantType)

def VarAddVariant(builder, variant):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(variant), 0)

def AddVariant(builder, variant):
    VarAddVariant(builder, variant)

def VarEnd(builder):
    return builder.EndObject()

def End(builder):
    return VarEnd(builder)
