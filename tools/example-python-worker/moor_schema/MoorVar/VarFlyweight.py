# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorVar

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class VarFlyweight(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VarFlyweight()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVarFlyweight(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # VarFlyweight
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VarFlyweight
    def Delegate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorCommon.Obj import Obj
            obj = Obj()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VarFlyweight
    def Slots(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorVar.FlyweightSlot import FlyweightSlot
            obj = FlyweightSlot()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VarFlyweight
    def SlotsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VarFlyweight
    def SlotsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # VarFlyweight
    def Contents(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorVar.VarList import VarList
            obj = VarList()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def VarFlyweightStart(builder):
    builder.StartObject(3)

def Start(builder):
    VarFlyweightStart(builder)

def VarFlyweightAddDelegate(builder, delegate):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(delegate), 0)

def AddDelegate(builder, delegate):
    VarFlyweightAddDelegate(builder, delegate)

def VarFlyweightAddSlots(builder, slots):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(slots), 0)

def AddSlots(builder, slots):
    VarFlyweightAddSlots(builder, slots)

def VarFlyweightStartSlotsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSlotsVector(builder, numElems: int) -> int:
    return VarFlyweightStartSlotsVector(builder, numElems)

def VarFlyweightAddContents(builder, contents):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(contents), 0)

def AddContents(builder, contents):
    VarFlyweightAddContents(builder, contents)

def VarFlyweightEnd(builder):
    return builder.EndObject()

def End(builder):
    return VarFlyweightEnd(builder)
