# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorVar

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class VarLambda(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VarLambda()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVarLambda(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # VarLambda
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VarLambda
    def Params(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorProgram.StoredScatterArgs import StoredScatterArgs
            obj = StoredScatterArgs()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VarLambda
    def Body(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorProgram.StoredProgram import StoredProgram
            obj = StoredProgram()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VarLambda
    def CapturedEnv(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorVar.VarList import VarList
            obj = VarList()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VarLambda
    def CapturedEnvLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VarLambda
    def CapturedEnvIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # VarLambda
    def SelfVar(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MoorProgram.StoredName import StoredName
            obj = StoredName()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def VarLambdaStart(builder):
    builder.StartObject(4)

def Start(builder):
    VarLambdaStart(builder)

def VarLambdaAddParams(builder, params):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(params), 0)

def AddParams(builder, params):
    VarLambdaAddParams(builder, params)

def VarLambdaAddBody(builder, body):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(body), 0)

def AddBody(builder, body):
    VarLambdaAddBody(builder, body)

def VarLambdaAddCapturedEnv(builder, capturedEnv):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(capturedEnv), 0)

def AddCapturedEnv(builder, capturedEnv):
    VarLambdaAddCapturedEnv(builder, capturedEnv)

def VarLambdaStartCapturedEnvVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCapturedEnvVector(builder, numElems: int) -> int:
    return VarLambdaStartCapturedEnvVector(builder, numElems)

def VarLambdaAddSelfVar(builder, selfVar):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(selfVar), 0)

def AddSelfVar(builder, selfVar):
    VarLambdaAddSelfVar(builder, selfVar)

def VarLambdaEnd(builder):
    return builder.EndObject()

def End(builder):
    return VarLambdaEnd(builder)
