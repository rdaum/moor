# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MoorVar

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class VarMap(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VarMap()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVarMap(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # VarMap
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VarMap
    def Pairs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MoorVar.VarMapPair import VarMapPair
            obj = VarMapPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VarMap
    def PairsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VarMap
    def PairsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def VarMapStart(builder):
    builder.StartObject(1)

def Start(builder):
    VarMapStart(builder)

def VarMapAddPairs(builder, pairs):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(pairs), 0)

def AddPairs(builder, pairs):
    VarMapAddPairs(builder, pairs)

def VarMapStartPairsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPairsVector(builder, numElems: int) -> int:
    return VarMapStartPairsVector(builder, numElems)

def VarMapEnd(builder):
    return builder.EndObject()

def End(builder):
    return VarMapEnd(builder)
