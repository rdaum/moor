// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class AnonymousObjId {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AnonymousObjId {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAnonymousObjId(bb:flatbuffers.ByteBuffer, obj?:AnonymousObjId):AnonymousObjId {
  return (obj || new AnonymousObjId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAnonymousObjId(bb:flatbuffers.ByteBuffer, obj?:AnonymousObjId):AnonymousObjId {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AnonymousObjId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

packedValue():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

static startAnonymousObjId(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addPackedValue(builder:flatbuffers.Builder, packedValue:bigint) {
  builder.addFieldInt64(0, packedValue, BigInt('0'));
}

static endAnonymousObjId(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createAnonymousObjId(builder:flatbuffers.Builder, packedValue:bigint):flatbuffers.Offset {
  AnonymousObjId.startAnonymousObjId(builder);
  AnonymousObjId.addPackedValue(builder, packedValue);
  return AnonymousObjId.endAnonymousObjId(builder);
}
}
