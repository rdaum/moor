// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { CompileContext } from "../moor-common/compile-context.js";
import { Symbol } from "../moor-common/symbol.js";

export class AssignToConst {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): AssignToConst {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsAssignToConst(bb: flatbuffers.ByteBuffer, obj?: AssignToConst): AssignToConst {
        return (obj || new AssignToConst()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsAssignToConst(bb: flatbuffers.ByteBuffer, obj?: AssignToConst): AssignToConst {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new AssignToConst()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    context(obj?: CompileContext): CompileContext | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset
            ? (obj || new CompileContext()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!)
            : null;
    }

    varName(obj?: Symbol): Symbol | null {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? (obj || new Symbol()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    static startAssignToConst(builder: flatbuffers.Builder) {
        builder.startObject(2);
    }

    static addContext(builder: flatbuffers.Builder, contextOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, contextOffset, 0);
    }

    static addVarName(builder: flatbuffers.Builder, varNameOffset: flatbuffers.Offset) {
        builder.addFieldOffset(1, varNameOffset, 0);
    }

    static endAssignToConst(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // context
        builder.requiredField(offset, 6); // var_name
        return offset;
    }
}
