// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Obj } from '../moor-common/obj.js';


export class ChparentPropertyNameConflict {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ChparentPropertyNameConflict {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsChparentPropertyNameConflict(bb:flatbuffers.ByteBuffer, obj?:ChparentPropertyNameConflict):ChparentPropertyNameConflict {
  return (obj || new ChparentPropertyNameConflict()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsChparentPropertyNameConflict(bb:flatbuffers.ByteBuffer, obj?:ChparentPropertyNameConflict):ChparentPropertyNameConflict {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ChparentPropertyNameConflict()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

descendant(obj?:Obj):Obj|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Obj()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

ancestor(obj?:Obj):Obj|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Obj()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

property():string|null
property(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
property(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startChparentPropertyNameConflict(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addDescendant(builder:flatbuffers.Builder, descendantOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, descendantOffset, 0);
}

static addAncestor(builder:flatbuffers.Builder, ancestorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, ancestorOffset, 0);
}

static addProperty(builder:flatbuffers.Builder, propertyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, propertyOffset, 0);
}

static endChparentPropertyNameConflict(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // descendant
  builder.requiredField(offset, 6) // ancestor
  builder.requiredField(offset, 8) // property
  return offset;
}

}
