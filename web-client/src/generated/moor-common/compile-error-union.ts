// automatically generated by the FlatBuffers compiler, do not modify

import { AssignToConst } from '../moor-common/assign-to-const.js';
import { BadSlotName } from '../moor-common/bad-slot-name.js';
import { DisabledFeature } from '../moor-common/disabled-feature.js';
import { DuplicateVariable } from '../moor-common/duplicate-variable.js';
import { InvalidAssignment } from '../moor-common/invalid-assignment.js';
import { InvalidTypeLiteralAssignment } from '../moor-common/invalid-type-literal-assignment.js';
import { ParseError } from '../moor-common/parse-error.js';
import { StringLexError } from '../moor-common/string-lex-error.js';
import { UnknownBuiltinFunction } from '../moor-common/unknown-builtin-function.js';
import { UnknownLoopLabel } from '../moor-common/unknown-loop-label.js';
import { UnknownTypeConstant } from '../moor-common/unknown-type-constant.js';


export enum CompileErrorUnion {
  NONE = 0,
  StringLexError = 1,
  ParseError = 2,
  UnknownBuiltinFunction = 3,
  UnknownTypeConstant = 4,
  UnknownLoopLabel = 5,
  DuplicateVariable = 6,
  AssignToConst = 7,
  DisabledFeature = 8,
  BadSlotName = 9,
  InvalidAssignment = 10,
  InvalidTypeLiteralAssignment = 11
}

export function unionToCompileErrorUnion(
  type: CompileErrorUnion,
  accessor: (obj:AssignToConst|BadSlotName|DisabledFeature|DuplicateVariable|InvalidAssignment|InvalidTypeLiteralAssignment|ParseError|StringLexError|UnknownBuiltinFunction|UnknownLoopLabel|UnknownTypeConstant) => AssignToConst|BadSlotName|DisabledFeature|DuplicateVariable|InvalidAssignment|InvalidTypeLiteralAssignment|ParseError|StringLexError|UnknownBuiltinFunction|UnknownLoopLabel|UnknownTypeConstant|null
): AssignToConst|BadSlotName|DisabledFeature|DuplicateVariable|InvalidAssignment|InvalidTypeLiteralAssignment|ParseError|StringLexError|UnknownBuiltinFunction|UnknownLoopLabel|UnknownTypeConstant|null {
  switch(CompileErrorUnion[type]) {
    case 'NONE': return null; 
    case 'StringLexError': return accessor(new StringLexError())! as StringLexError;
    case 'ParseError': return accessor(new ParseError())! as ParseError;
    case 'UnknownBuiltinFunction': return accessor(new UnknownBuiltinFunction())! as UnknownBuiltinFunction;
    case 'UnknownTypeConstant': return accessor(new UnknownTypeConstant())! as UnknownTypeConstant;
    case 'UnknownLoopLabel': return accessor(new UnknownLoopLabel())! as UnknownLoopLabel;
    case 'DuplicateVariable': return accessor(new DuplicateVariable())! as DuplicateVariable;
    case 'AssignToConst': return accessor(new AssignToConst())! as AssignToConst;
    case 'DisabledFeature': return accessor(new DisabledFeature())! as DisabledFeature;
    case 'BadSlotName': return accessor(new BadSlotName())! as BadSlotName;
    case 'InvalidAssignment': return accessor(new InvalidAssignment())! as InvalidAssignment;
    case 'InvalidTypeLiteralAssignment': return accessor(new InvalidTypeLiteralAssignment())! as InvalidTypeLiteralAssignment;
    default: return null;
  }
}

export function unionListToCompileErrorUnion(
  type: CompileErrorUnion, 
  accessor: (index: number, obj:AssignToConst|BadSlotName|DisabledFeature|DuplicateVariable|InvalidAssignment|InvalidTypeLiteralAssignment|ParseError|StringLexError|UnknownBuiltinFunction|UnknownLoopLabel|UnknownTypeConstant) => AssignToConst|BadSlotName|DisabledFeature|DuplicateVariable|InvalidAssignment|InvalidTypeLiteralAssignment|ParseError|StringLexError|UnknownBuiltinFunction|UnknownLoopLabel|UnknownTypeConstant|null, 
  index: number
): AssignToConst|BadSlotName|DisabledFeature|DuplicateVariable|InvalidAssignment|InvalidTypeLiteralAssignment|ParseError|StringLexError|UnknownBuiltinFunction|UnknownLoopLabel|UnknownTypeConstant|null {
  switch(CompileErrorUnion[type]) {
    case 'NONE': return null; 
    case 'StringLexError': return accessor(index, new StringLexError())! as StringLexError;
    case 'ParseError': return accessor(index, new ParseError())! as ParseError;
    case 'UnknownBuiltinFunction': return accessor(index, new UnknownBuiltinFunction())! as UnknownBuiltinFunction;
    case 'UnknownTypeConstant': return accessor(index, new UnknownTypeConstant())! as UnknownTypeConstant;
    case 'UnknownLoopLabel': return accessor(index, new UnknownLoopLabel())! as UnknownLoopLabel;
    case 'DuplicateVariable': return accessor(index, new DuplicateVariable())! as DuplicateVariable;
    case 'AssignToConst': return accessor(index, new AssignToConst())! as AssignToConst;
    case 'DisabledFeature': return accessor(index, new DisabledFeature())! as DisabledFeature;
    case 'BadSlotName': return accessor(index, new BadSlotName())! as BadSlotName;
    case 'InvalidAssignment': return accessor(index, new InvalidAssignment())! as InvalidAssignment;
    case 'InvalidTypeLiteralAssignment': return accessor(index, new InvalidTypeLiteralAssignment())! as InvalidTypeLiteralAssignment;
    default: return null;
  }
}
