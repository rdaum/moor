// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import {
    CompileErrorUnion,
    unionListToCompileErrorUnion,
    unionToCompileErrorUnion,
} from "../moor-common/compile-error-union.js";

export class CompileError {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): CompileError {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsCompileError(bb: flatbuffers.ByteBuffer, obj?: CompileError): CompileError {
        return (obj || new CompileError()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsCompileError(bb: flatbuffers.ByteBuffer, obj?: CompileError): CompileError {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new CompileError()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    errorType(): CompileErrorUnion {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.readUint8(this.bb_pos + offset) : CompileErrorUnion.NONE;
    }

    error<T extends flatbuffers.Table>(obj: any): any | null {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
    }

    static startCompileError(builder: flatbuffers.Builder) {
        builder.startObject(2);
    }

    static addErrorType(builder: flatbuffers.Builder, errorType: CompileErrorUnion) {
        builder.addFieldInt8(0, errorType, CompileErrorUnion.NONE);
    }

    static addError(builder: flatbuffers.Builder, errorOffset: flatbuffers.Offset) {
        builder.addFieldOffset(1, errorOffset, 0);
    }

    static endCompileError(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 6); // error
        return offset;
    }

    static createCompileError(
        builder: flatbuffers.Builder,
        errorType: CompileErrorUnion,
        errorOffset: flatbuffers.Offset,
    ): flatbuffers.Offset {
        CompileError.startCompileError(builder);
        CompileError.addErrorType(builder, errorType);
        CompileError.addError(builder, errorOffset);
        return CompileError.endCompileError(builder);
    }
}
