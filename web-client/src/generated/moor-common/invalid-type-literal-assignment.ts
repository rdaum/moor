// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { CompileContext } from '../moor-common/compile-context.js';


export class InvalidTypeLiteralAssignment {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):InvalidTypeLiteralAssignment {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsInvalidTypeLiteralAssignment(bb:flatbuffers.ByteBuffer, obj?:InvalidTypeLiteralAssignment):InvalidTypeLiteralAssignment {
  return (obj || new InvalidTypeLiteralAssignment()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsInvalidTypeLiteralAssignment(bb:flatbuffers.ByteBuffer, obj?:InvalidTypeLiteralAssignment):InvalidTypeLiteralAssignment {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new InvalidTypeLiteralAssignment()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

context(obj?:CompileContext):CompileContext|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new CompileContext()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

literal():string|null
literal(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
literal(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startInvalidTypeLiteralAssignment(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addContext(builder:flatbuffers.Builder, contextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, contextOffset, 0);
}

static addLiteral(builder:flatbuffers.Builder, literalOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, literalOffset, 0);
}

static endInvalidTypeLiteralAssignment(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // context
  builder.requiredField(offset, 6) // literal
  return offset;
}

static createInvalidTypeLiteralAssignment(builder:flatbuffers.Builder, contextOffset:flatbuffers.Offset, literalOffset:flatbuffers.Offset):flatbuffers.Offset {
  InvalidTypeLiteralAssignment.startInvalidTypeLiteralAssignment(builder);
  InvalidTypeLiteralAssignment.addContext(builder, contextOffset);
  InvalidTypeLiteralAssignment.addLiteral(builder, literalOffset);
  return InvalidTypeLiteralAssignment.endInvalidTypeLiteralAssignment(builder);
}
}
