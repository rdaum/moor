// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Event } from '../moor-common/event.js';
import { Uuid } from '../moor-common/uuid.js';
import { Var } from '../moor-var/var.js';


export class NarrativeEvent {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):NarrativeEvent {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsNarrativeEvent(bb:flatbuffers.ByteBuffer, obj?:NarrativeEvent):NarrativeEvent {
  return (obj || new NarrativeEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsNarrativeEvent(bb:flatbuffers.ByteBuffer, obj?:NarrativeEvent):NarrativeEvent {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new NarrativeEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

eventId(obj?:Uuid):Uuid|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Uuid()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

timestamp():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

author(obj?:Var):Var|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Var()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

event(obj?:Event):Event|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Event()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startNarrativeEvent(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addEventId(builder:flatbuffers.Builder, eventIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, eventIdOffset, 0);
}

static addTimestamp(builder:flatbuffers.Builder, timestamp:bigint) {
  builder.addFieldInt64(1, timestamp, BigInt('0'));
}

static addAuthor(builder:flatbuffers.Builder, authorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, authorOffset, 0);
}

static addEvent(builder:flatbuffers.Builder, eventOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, eventOffset, 0);
}

static endNarrativeEvent(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // event_id
  builder.requiredField(offset, 8) // author
  builder.requiredField(offset, 10) // event
  return offset;
}

}
