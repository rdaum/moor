// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { EventMetadata } from "../moor-common/event-metadata.js";
import { Symbol } from "../moor-common/symbol.js";
import { Var } from "../moor-var/var.js";

export class NotifyEvent {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): NotifyEvent {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsNotifyEvent(bb: flatbuffers.ByteBuffer, obj?: NotifyEvent): NotifyEvent {
        return (obj || new NotifyEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsNotifyEvent(bb: flatbuffers.ByteBuffer, obj?: NotifyEvent): NotifyEvent {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new NotifyEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    value(obj?: Var): Var | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? (obj || new Var()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    contentType(obj?: Symbol): Symbol | null {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? (obj || new Symbol()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    noFlush(): boolean {
        const offset = this.bb!.__offset(this.bb_pos, 8);
        return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
    }

    noNewline(): boolean {
        const offset = this.bb!.__offset(this.bb_pos, 10);
        return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
    }

    metadata(index: number, obj?: EventMetadata): EventMetadata | null {
        const offset = this.bb!.__offset(this.bb_pos, 12);
        return offset
            ? (obj || new EventMetadata()).__init(
                this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),
                this.bb!,
            )
            : null;
    }

    metadataLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 12);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    static startNotifyEvent(builder: flatbuffers.Builder) {
        builder.startObject(5);
    }

    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, valueOffset, 0);
    }

    static addContentType(builder: flatbuffers.Builder, contentTypeOffset: flatbuffers.Offset) {
        builder.addFieldOffset(1, contentTypeOffset, 0);
    }

    static addNoFlush(builder: flatbuffers.Builder, noFlush: boolean) {
        builder.addFieldInt8(2, +noFlush, +false);
    }

    static addNoNewline(builder: flatbuffers.Builder, noNewline: boolean) {
        builder.addFieldInt8(3, +noNewline, +false);
    }

    static addMetadata(builder: flatbuffers.Builder, metadataOffset: flatbuffers.Offset) {
        builder.addFieldOffset(4, metadataOffset, 0);
    }

    static createMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]!);
        }
        return builder.endVector();
    }

    static startMetadataVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(4, numElems, 4);
    }

    static endNotifyEvent(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // value
        return offset;
    }
}
