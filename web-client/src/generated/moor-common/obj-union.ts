// automatically generated by the FlatBuffers compiler, do not modify

import { AnonymousObjId } from '../moor-common/anonymous-obj-id.js';
import { ObjId } from '../moor-common/obj-id.js';
import { UuObjId } from '../moor-common/uu-obj-id.js';


export enum ObjUnion {
  NONE = 0,
  ObjId = 1,
  UuObjId = 2,
  AnonymousObjId = 3
}

export function unionToObjUnion(
  type: ObjUnion,
  accessor: (obj:AnonymousObjId|ObjId|UuObjId) => AnonymousObjId|ObjId|UuObjId|null
): AnonymousObjId|ObjId|UuObjId|null {
  switch(ObjUnion[type]) {
    case 'NONE': return null; 
    case 'ObjId': return accessor(new ObjId())! as ObjId;
    case 'UuObjId': return accessor(new UuObjId())! as UuObjId;
    case 'AnonymousObjId': return accessor(new AnonymousObjId())! as AnonymousObjId;
    default: return null;
  }
}

export function unionListToObjUnion(
  type: ObjUnion, 
  accessor: (index: number, obj:AnonymousObjId|ObjId|UuObjId) => AnonymousObjId|ObjId|UuObjId|null, 
  index: number
): AnonymousObjId|ObjId|UuObjId|null {
  switch(ObjUnion[type]) {
    case 'NONE': return null; 
    case 'ObjId': return accessor(index, new ObjId())! as ObjId;
    case 'UuObjId': return accessor(index, new UuObjId())! as UuObjId;
    case 'AnonymousObjId': return accessor(index, new AnonymousObjId())! as AnonymousObjId;
    default: return null;
  }
}
