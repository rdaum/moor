// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

export class PrepSpec {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): PrepSpec {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsPrepSpec(bb: flatbuffers.ByteBuffer, obj?: PrepSpec): PrepSpec {
        return (obj || new PrepSpec()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsPrepSpec(bb: flatbuffers.ByteBuffer, obj?: PrepSpec): PrepSpec {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new PrepSpec()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    value(): number {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
    }

    static startPrepSpec(builder: flatbuffers.Builder) {
        builder.startObject(1);
    }

    static addValue(builder: flatbuffers.Builder, value: number) {
        builder.addFieldInt16(0, value, 0);
    }

    static endPrepSpec(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        return offset;
    }

    static createPrepSpec(builder: flatbuffers.Builder, value: number): flatbuffers.Offset {
        PrepSpec.startPrepSpec(builder);
        PrepSpec.addValue(builder, value);
        return PrepSpec.endPrepSpec(builder);
    }
}
