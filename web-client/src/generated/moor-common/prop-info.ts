// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { Obj } from "../moor-common/obj.js";
import { Symbol } from "../moor-common/symbol.js";

export class PropInfo {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): PropInfo {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsPropInfo(bb: flatbuffers.ByteBuffer, obj?: PropInfo): PropInfo {
        return (obj || new PropInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsPropInfo(bb: flatbuffers.ByteBuffer, obj?: PropInfo): PropInfo {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new PropInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    definer(obj?: Obj): Obj | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? (obj || new Obj()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    location(obj?: Obj): Obj | null {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? (obj || new Obj()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    name(obj?: Symbol): Symbol | null {
        const offset = this.bb!.__offset(this.bb_pos, 8);
        return offset ? (obj || new Symbol()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    owner(obj?: Obj): Obj | null {
        const offset = this.bb!.__offset(this.bb_pos, 10);
        return offset ? (obj || new Obj()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    r(): boolean {
        const offset = this.bb!.__offset(this.bb_pos, 12);
        return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
    }

    w(): boolean {
        const offset = this.bb!.__offset(this.bb_pos, 14);
        return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
    }

    chown(): boolean {
        const offset = this.bb!.__offset(this.bb_pos, 16);
        return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
    }

    static startPropInfo(builder: flatbuffers.Builder) {
        builder.startObject(7);
    }

    static addDefiner(builder: flatbuffers.Builder, definerOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, definerOffset, 0);
    }

    static addLocation(builder: flatbuffers.Builder, locationOffset: flatbuffers.Offset) {
        builder.addFieldOffset(1, locationOffset, 0);
    }

    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {
        builder.addFieldOffset(2, nameOffset, 0);
    }

    static addOwner(builder: flatbuffers.Builder, ownerOffset: flatbuffers.Offset) {
        builder.addFieldOffset(3, ownerOffset, 0);
    }

    static addR(builder: flatbuffers.Builder, r: boolean) {
        builder.addFieldInt8(4, +r, +false);
    }

    static addW(builder: flatbuffers.Builder, w: boolean) {
        builder.addFieldInt8(5, +w, +false);
    }

    static addChown(builder: flatbuffers.Builder, chown: boolean) {
        builder.addFieldInt8(6, +chown, +false);
    }

    static endPropInfo(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // definer
        builder.requiredField(offset, 6); // location
        builder.requiredField(offset, 8); // name
        builder.requiredField(offset, 10); // owner
        return offset;
    }
}
