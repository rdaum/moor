// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

export class Symbol {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): Symbol {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsSymbol(bb: flatbuffers.ByteBuffer, obj?: Symbol): Symbol {
        return (obj || new Symbol()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsSymbol(bb: flatbuffers.ByteBuffer, obj?: Symbol): Symbol {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Symbol()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    value(): string | null;
    value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    value(optionalEncoding?: any): string | Uint8Array | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
    }

    static startSymbol(builder: flatbuffers.Builder) {
        builder.startObject(1);
    }

    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, valueOffset, 0);
    }

    static endSymbol(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // value
        return offset;
    }

    static createSymbol(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset): flatbuffers.Offset {
        Symbol.startSymbol(builder);
        Symbol.addValue(builder, valueOffset);
        return Symbol.endSymbol(builder);
    }
}
