// automatically generated by the FlatBuffers compiler, do not modify

import { AmbiguousMatch } from '../moor-common/ambiguous-match.js';
import { ChparentPropertyNameConflict } from '../moor-common/chparent-property-name-conflict.js';
import { DuplicatePropertyDefinition } from '../moor-common/duplicate-property-definition.js';
import { DuplicateVerb } from '../moor-common/duplicate-verb.js';
import { FailedMatch } from '../moor-common/failed-match.js';
import { InvalidRenumber } from '../moor-common/invalid-renumber.js';
import { InvalidVerb } from '../moor-common/invalid-verb.js';
import { ObjectAlreadyExists } from '../moor-common/object-already-exists.js';
import { ObjectNotFound } from '../moor-common/object-not-found.js';
import { ObjectPermissionDenied } from '../moor-common/object-permission-denied.js';
import { PropertyDefinitionNotFound } from '../moor-common/property-definition-not-found.js';
import { PropertyNotFound } from '../moor-common/property-not-found.js';
import { PropertyPermissionDenied } from '../moor-common/property-permission-denied.js';
import { PropertyTypeMismatch } from '../moor-common/property-type-mismatch.js';
import { RecursiveMove } from '../moor-common/recursive-move.js';
import { RollbackRetry } from '../moor-common/rollback-retry.js';
import { VerbDecodeError } from '../moor-common/verb-decode-error.js';
import { VerbNotFound } from '../moor-common/verb-not-found.js';
import { VerbPermissionDenied } from '../moor-common/verb-permission-denied.js';
import { WorldStateDatabaseError } from '../moor-common/world-state-database-error.js';


export enum WorldStateErrorUnion {
  NONE = 0,
  ObjectNotFound = 1,
  ObjectAlreadyExists = 2,
  RecursiveMove = 3,
  ObjectPermissionDenied = 4,
  PropertyNotFound = 5,
  PropertyPermissionDenied = 6,
  PropertyDefinitionNotFound = 7,
  DuplicatePropertyDefinition = 8,
  ChparentPropertyNameConflict = 9,
  PropertyTypeMismatch = 10,
  VerbNotFound = 11,
  InvalidVerb = 12,
  VerbDecodeError = 13,
  VerbPermissionDenied = 14,
  DuplicateVerb = 15,
  FailedMatch = 16,
  AmbiguousMatch = 17,
  InvalidRenumber = 18,
  WorldStateDatabaseError = 19,
  RollbackRetry = 20
}

export function unionToWorldStateErrorUnion(
  type: WorldStateErrorUnion,
  accessor: (obj:AmbiguousMatch|ChparentPropertyNameConflict|DuplicatePropertyDefinition|DuplicateVerb|FailedMatch|InvalidRenumber|InvalidVerb|ObjectAlreadyExists|ObjectNotFound|ObjectPermissionDenied|PropertyDefinitionNotFound|PropertyNotFound|PropertyPermissionDenied|PropertyTypeMismatch|RecursiveMove|RollbackRetry|VerbDecodeError|VerbNotFound|VerbPermissionDenied|WorldStateDatabaseError) => AmbiguousMatch|ChparentPropertyNameConflict|DuplicatePropertyDefinition|DuplicateVerb|FailedMatch|InvalidRenumber|InvalidVerb|ObjectAlreadyExists|ObjectNotFound|ObjectPermissionDenied|PropertyDefinitionNotFound|PropertyNotFound|PropertyPermissionDenied|PropertyTypeMismatch|RecursiveMove|RollbackRetry|VerbDecodeError|VerbNotFound|VerbPermissionDenied|WorldStateDatabaseError|null
): AmbiguousMatch|ChparentPropertyNameConflict|DuplicatePropertyDefinition|DuplicateVerb|FailedMatch|InvalidRenumber|InvalidVerb|ObjectAlreadyExists|ObjectNotFound|ObjectPermissionDenied|PropertyDefinitionNotFound|PropertyNotFound|PropertyPermissionDenied|PropertyTypeMismatch|RecursiveMove|RollbackRetry|VerbDecodeError|VerbNotFound|VerbPermissionDenied|WorldStateDatabaseError|null {
  switch(WorldStateErrorUnion[type]) {
    case 'NONE': return null; 
    case 'ObjectNotFound': return accessor(new ObjectNotFound())! as ObjectNotFound;
    case 'ObjectAlreadyExists': return accessor(new ObjectAlreadyExists())! as ObjectAlreadyExists;
    case 'RecursiveMove': return accessor(new RecursiveMove())! as RecursiveMove;
    case 'ObjectPermissionDenied': return accessor(new ObjectPermissionDenied())! as ObjectPermissionDenied;
    case 'PropertyNotFound': return accessor(new PropertyNotFound())! as PropertyNotFound;
    case 'PropertyPermissionDenied': return accessor(new PropertyPermissionDenied())! as PropertyPermissionDenied;
    case 'PropertyDefinitionNotFound': return accessor(new PropertyDefinitionNotFound())! as PropertyDefinitionNotFound;
    case 'DuplicatePropertyDefinition': return accessor(new DuplicatePropertyDefinition())! as DuplicatePropertyDefinition;
    case 'ChparentPropertyNameConflict': return accessor(new ChparentPropertyNameConflict())! as ChparentPropertyNameConflict;
    case 'PropertyTypeMismatch': return accessor(new PropertyTypeMismatch())! as PropertyTypeMismatch;
    case 'VerbNotFound': return accessor(new VerbNotFound())! as VerbNotFound;
    case 'InvalidVerb': return accessor(new InvalidVerb())! as InvalidVerb;
    case 'VerbDecodeError': return accessor(new VerbDecodeError())! as VerbDecodeError;
    case 'VerbPermissionDenied': return accessor(new VerbPermissionDenied())! as VerbPermissionDenied;
    case 'DuplicateVerb': return accessor(new DuplicateVerb())! as DuplicateVerb;
    case 'FailedMatch': return accessor(new FailedMatch())! as FailedMatch;
    case 'AmbiguousMatch': return accessor(new AmbiguousMatch())! as AmbiguousMatch;
    case 'InvalidRenumber': return accessor(new InvalidRenumber())! as InvalidRenumber;
    case 'WorldStateDatabaseError': return accessor(new WorldStateDatabaseError())! as WorldStateDatabaseError;
    case 'RollbackRetry': return accessor(new RollbackRetry())! as RollbackRetry;
    default: return null;
  }
}

export function unionListToWorldStateErrorUnion(
  type: WorldStateErrorUnion, 
  accessor: (index: number, obj:AmbiguousMatch|ChparentPropertyNameConflict|DuplicatePropertyDefinition|DuplicateVerb|FailedMatch|InvalidRenumber|InvalidVerb|ObjectAlreadyExists|ObjectNotFound|ObjectPermissionDenied|PropertyDefinitionNotFound|PropertyNotFound|PropertyPermissionDenied|PropertyTypeMismatch|RecursiveMove|RollbackRetry|VerbDecodeError|VerbNotFound|VerbPermissionDenied|WorldStateDatabaseError) => AmbiguousMatch|ChparentPropertyNameConflict|DuplicatePropertyDefinition|DuplicateVerb|FailedMatch|InvalidRenumber|InvalidVerb|ObjectAlreadyExists|ObjectNotFound|ObjectPermissionDenied|PropertyDefinitionNotFound|PropertyNotFound|PropertyPermissionDenied|PropertyTypeMismatch|RecursiveMove|RollbackRetry|VerbDecodeError|VerbNotFound|VerbPermissionDenied|WorldStateDatabaseError|null, 
  index: number
): AmbiguousMatch|ChparentPropertyNameConflict|DuplicatePropertyDefinition|DuplicateVerb|FailedMatch|InvalidRenumber|InvalidVerb|ObjectAlreadyExists|ObjectNotFound|ObjectPermissionDenied|PropertyDefinitionNotFound|PropertyNotFound|PropertyPermissionDenied|PropertyTypeMismatch|RecursiveMove|RollbackRetry|VerbDecodeError|VerbNotFound|VerbPermissionDenied|WorldStateDatabaseError|null {
  switch(WorldStateErrorUnion[type]) {
    case 'NONE': return null; 
    case 'ObjectNotFound': return accessor(index, new ObjectNotFound())! as ObjectNotFound;
    case 'ObjectAlreadyExists': return accessor(index, new ObjectAlreadyExists())! as ObjectAlreadyExists;
    case 'RecursiveMove': return accessor(index, new RecursiveMove())! as RecursiveMove;
    case 'ObjectPermissionDenied': return accessor(index, new ObjectPermissionDenied())! as ObjectPermissionDenied;
    case 'PropertyNotFound': return accessor(index, new PropertyNotFound())! as PropertyNotFound;
    case 'PropertyPermissionDenied': return accessor(index, new PropertyPermissionDenied())! as PropertyPermissionDenied;
    case 'PropertyDefinitionNotFound': return accessor(index, new PropertyDefinitionNotFound())! as PropertyDefinitionNotFound;
    case 'DuplicatePropertyDefinition': return accessor(index, new DuplicatePropertyDefinition())! as DuplicatePropertyDefinition;
    case 'ChparentPropertyNameConflict': return accessor(index, new ChparentPropertyNameConflict())! as ChparentPropertyNameConflict;
    case 'PropertyTypeMismatch': return accessor(index, new PropertyTypeMismatch())! as PropertyTypeMismatch;
    case 'VerbNotFound': return accessor(index, new VerbNotFound())! as VerbNotFound;
    case 'InvalidVerb': return accessor(index, new InvalidVerb())! as InvalidVerb;
    case 'VerbDecodeError': return accessor(index, new VerbDecodeError())! as VerbDecodeError;
    case 'VerbPermissionDenied': return accessor(index, new VerbPermissionDenied())! as VerbPermissionDenied;
    case 'DuplicateVerb': return accessor(index, new DuplicateVerb())! as DuplicateVerb;
    case 'FailedMatch': return accessor(index, new FailedMatch())! as FailedMatch;
    case 'AmbiguousMatch': return accessor(index, new AmbiguousMatch())! as AmbiguousMatch;
    case 'InvalidRenumber': return accessor(index, new InvalidRenumber())! as InvalidRenumber;
    case 'WorldStateDatabaseError': return accessor(index, new WorldStateDatabaseError())! as WorldStateDatabaseError;
    case 'RollbackRetry': return accessor(index, new RollbackRetry())! as RollbackRetry;
    default: return null;
  }
}
