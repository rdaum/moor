// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { Obj } from "../moor-common/obj.js";
import { Uuid } from "../moor-common/uuid.js";

export class LoggedNarrativeEvent {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): LoggedNarrativeEvent {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsLoggedNarrativeEvent(bb: flatbuffers.ByteBuffer, obj?: LoggedNarrativeEvent): LoggedNarrativeEvent {
        return (obj || new LoggedNarrativeEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsLoggedNarrativeEvent(
        bb: flatbuffers.ByteBuffer,
        obj?: LoggedNarrativeEvent,
    ): LoggedNarrativeEvent {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new LoggedNarrativeEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    eventId(obj?: Uuid): Uuid | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? (obj || new Uuid()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    timestamp(): bigint {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
    }

    player(obj?: Obj): Obj | null {
        const offset = this.bb!.__offset(this.bb_pos, 8);
        return offset ? (obj || new Obj()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    encryptedBlob(index: number): number | null {
        const offset = this.bb!.__offset(this.bb_pos, 10);
        return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
    }

    encryptedBlobLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 10);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    encryptedBlobArray(): Uint8Array | null {
        const offset = this.bb!.__offset(this.bb_pos, 10);
        return offset
            ? new Uint8Array(
                this.bb!.bytes().buffer,
                this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),
                this.bb!.__vector_len(this.bb_pos + offset),
            )
            : null;
    }

    static startLoggedNarrativeEvent(builder: flatbuffers.Builder) {
        builder.startObject(4);
    }

    static addEventId(builder: flatbuffers.Builder, eventIdOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, eventIdOffset, 0);
    }

    static addTimestamp(builder: flatbuffers.Builder, timestamp: bigint) {
        builder.addFieldInt64(1, timestamp, BigInt("0"));
    }

    static addPlayer(builder: flatbuffers.Builder, playerOffset: flatbuffers.Offset) {
        builder.addFieldOffset(2, playerOffset, 0);
    }

    static addEncryptedBlob(builder: flatbuffers.Builder, encryptedBlobOffset: flatbuffers.Offset) {
        builder.addFieldOffset(3, encryptedBlobOffset, 0);
    }

    static createEncryptedBlobVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]!);
        }
        return builder.endVector();
    }

    static startEncryptedBlobVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(1, numElems, 1);
    }

    static endLoggedNarrativeEvent(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // event_id
        builder.requiredField(offset, 8); // player
        builder.requiredField(offset, 10); // encrypted_blob
        return offset;
    }
}
