// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class StoredPresentation {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):StoredPresentation {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsStoredPresentation(bb:flatbuffers.ByteBuffer, obj?:StoredPresentation):StoredPresentation {
  return (obj || new StoredPresentation()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsStoredPresentation(bb:flatbuffers.ByteBuffer, obj?:StoredPresentation):StoredPresentation {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new StoredPresentation()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

encryptedContent(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

encryptedContentLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

encryptedContentArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startStoredPresentation(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addEncryptedContent(builder:flatbuffers.Builder, encryptedContentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, encryptedContentOffset, 0);
}

static createEncryptedContentVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startEncryptedContentVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endStoredPresentation(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // id
  builder.requiredField(offset, 6) // encrypted_content
  return offset;
}

static createStoredPresentation(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, encryptedContentOffset:flatbuffers.Offset):flatbuffers.Offset {
  StoredPresentation.startStoredPresentation(builder);
  StoredPresentation.addId(builder, idOffset);
  StoredPresentation.addEncryptedContent(builder, encryptedContentOffset);
  return StoredPresentation.endStoredPresentation(builder);
}
}
