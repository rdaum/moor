// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

export class ForkVector {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): ForkVector {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsForkVector(bb: flatbuffers.ByteBuffer, obj?: ForkVector): ForkVector {
        return (obj || new ForkVector()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsForkVector(bb: flatbuffers.ByteBuffer, obj?: ForkVector): ForkVector {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ForkVector()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    offset(): bigint {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
    }

    opcodes(index: number): number | null {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.readUint16(this.bb!.__vector(this.bb_pos + offset) + index * 2) : 0;
    }

    opcodesLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    opcodesArray(): Uint16Array | null {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset
            ? new Uint16Array(
                this.bb!.bytes().buffer,
                this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),
                this.bb!.__vector_len(this.bb_pos + offset),
            )
            : null;
    }

    static startForkVector(builder: flatbuffers.Builder) {
        builder.startObject(2);
    }

    static addOffset(builder: flatbuffers.Builder, offset: bigint) {
        builder.addFieldInt64(0, offset, BigInt("0"));
    }

    static addOpcodes(builder: flatbuffers.Builder, opcodesOffset: flatbuffers.Offset) {
        builder.addFieldOffset(1, opcodesOffset, 0);
    }

    static createOpcodesVector(builder: flatbuffers.Builder, data: number[] | Uint16Array): flatbuffers.Offset;
    /**
     * @deprecated This Uint8Array overload will be removed in the future.
     */
    static createOpcodesVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset;
    static createOpcodesVector(
        builder: flatbuffers.Builder,
        data: number[] | Uint16Array | Uint8Array,
    ): flatbuffers.Offset {
        builder.startVector(2, data.length, 2);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt16(data[i]!);
        }
        return builder.endVector();
    }

    static startOpcodesVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(2, numElems, 2);
    }

    static endForkVector(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 6); // opcodes
        return offset;
    }

    static createForkVector(
        builder: flatbuffers.Builder,
        offset: bigint,
        opcodesOffset: flatbuffers.Offset,
    ): flatbuffers.Offset {
        ForkVector.startForkVector(builder);
        ForkVector.addOffset(builder, offset);
        ForkVector.addOpcodes(builder, opcodesOffset);
        return ForkVector.endForkVector(builder);
    }
}
