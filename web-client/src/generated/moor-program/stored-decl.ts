// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { StoredDeclType } from "../moor-program/stored-decl-type.js";
import { StoredVariable } from "../moor-program/stored-variable.js";

export class StoredDecl {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): StoredDecl {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsStoredDecl(bb: flatbuffers.ByteBuffer, obj?: StoredDecl): StoredDecl {
        return (obj || new StoredDecl()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsStoredDecl(bb: flatbuffers.ByteBuffer, obj?: StoredDecl): StoredDecl {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new StoredDecl()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    declType(): StoredDeclType {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.readUint8(this.bb_pos + offset) : StoredDeclType.Global;
    }

    identifier(obj?: StoredVariable): StoredVariable | null {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset
            ? (obj || new StoredVariable()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!)
            : null;
    }

    depth(): bigint {
        const offset = this.bb!.__offset(this.bb_pos, 8);
        return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
    }

    constant(): boolean {
        const offset = this.bb!.__offset(this.bb_pos, 10);
        return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
    }

    scopeId(): number {
        const offset = this.bb!.__offset(this.bb_pos, 12);
        return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
    }

    static startStoredDecl(builder: flatbuffers.Builder) {
        builder.startObject(5);
    }

    static addDeclType(builder: flatbuffers.Builder, declType: StoredDeclType) {
        builder.addFieldInt8(0, declType, StoredDeclType.Global);
    }

    static addIdentifier(builder: flatbuffers.Builder, identifierOffset: flatbuffers.Offset) {
        builder.addFieldOffset(1, identifierOffset, 0);
    }

    static addDepth(builder: flatbuffers.Builder, depth: bigint) {
        builder.addFieldInt64(2, depth, BigInt("0"));
    }

    static addConstant(builder: flatbuffers.Builder, constant: boolean) {
        builder.addFieldInt8(3, +constant, +false);
    }

    static addScopeId(builder: flatbuffers.Builder, scopeId: number) {
        builder.addFieldInt16(4, scopeId, 0);
    }

    static endStoredDecl(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 6); // identifier
        return offset;
    }
}
