// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import {
    StoredProgramLanguage,
    unionListToStoredProgramLanguage,
    unionToStoredProgramLanguage,
} from "../moor-program/stored-program-language.js";

export class StoredProgram {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): StoredProgram {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsStoredProgram(bb: flatbuffers.ByteBuffer, obj?: StoredProgram): StoredProgram {
        return (obj || new StoredProgram()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsStoredProgram(bb: flatbuffers.ByteBuffer, obj?: StoredProgram): StoredProgram {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new StoredProgram()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    languageType(): StoredProgramLanguage {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.readUint8(this.bb_pos + offset) : StoredProgramLanguage.NONE;
    }

    language<T extends flatbuffers.Table>(obj: any): any | null {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
    }

    static startStoredProgram(builder: flatbuffers.Builder) {
        builder.startObject(2);
    }

    static addLanguageType(builder: flatbuffers.Builder, languageType: StoredProgramLanguage) {
        builder.addFieldInt8(0, languageType, StoredProgramLanguage.NONE);
    }

    static addLanguage(builder: flatbuffers.Builder, languageOffset: flatbuffers.Offset) {
        builder.addFieldOffset(1, languageOffset, 0);
    }

    static endStoredProgram(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 6); // language
        return offset;
    }

    static createStoredProgram(
        builder: flatbuffers.Builder,
        languageType: StoredProgramLanguage,
        languageOffset: flatbuffers.Offset,
    ): flatbuffers.Offset {
        StoredProgram.startStoredProgram(builder);
        StoredProgram.addLanguageType(builder, languageType);
        StoredProgram.addLanguage(builder, languageOffset);
        return StoredProgram.endStoredProgram(builder);
    }
}
