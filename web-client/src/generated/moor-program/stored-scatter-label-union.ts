// automatically generated by the FlatBuffers compiler, do not modify

import { StoredScatterOptional } from "../moor-program/stored-scatter-optional.js";
import { StoredScatterRequired } from "../moor-program/stored-scatter-required.js";
import { StoredScatterRest } from "../moor-program/stored-scatter-rest.js";

export enum StoredScatterLabelUnion {
    NONE = 0,
    StoredScatterRequired = 1,
    StoredScatterOptional = 2,
    StoredScatterRest = 3,
}

export function unionToStoredScatterLabelUnion(
    type: StoredScatterLabelUnion,
    accessor: (
        obj: StoredScatterOptional | StoredScatterRequired | StoredScatterRest,
    ) => StoredScatterOptional | StoredScatterRequired | StoredScatterRest | null,
): StoredScatterOptional | StoredScatterRequired | StoredScatterRest | null {
    switch (StoredScatterLabelUnion[type]) {
        case "NONE":
            return null;
        case "StoredScatterRequired":
            return accessor(new StoredScatterRequired())! as StoredScatterRequired;
        case "StoredScatterOptional":
            return accessor(new StoredScatterOptional())! as StoredScatterOptional;
        case "StoredScatterRest":
            return accessor(new StoredScatterRest())! as StoredScatterRest;
        default:
            return null;
    }
}

export function unionListToStoredScatterLabelUnion(
    type: StoredScatterLabelUnion,
    accessor: (
        index: number,
        obj: StoredScatterOptional | StoredScatterRequired | StoredScatterRest,
    ) => StoredScatterOptional | StoredScatterRequired | StoredScatterRest | null,
    index: number,
): StoredScatterOptional | StoredScatterRequired | StoredScatterRest | null {
    switch (StoredScatterLabelUnion[type]) {
        case "NONE":
            return null;
        case "StoredScatterRequired":
            return accessor(index, new StoredScatterRequired())! as StoredScatterRequired;
        case "StoredScatterOptional":
            return accessor(index, new StoredScatterOptional())! as StoredScatterOptional;
        case "StoredScatterRest":
            return accessor(index, new StoredScatterRest())! as StoredScatterRest;
        default:
            return null;
    }
}
