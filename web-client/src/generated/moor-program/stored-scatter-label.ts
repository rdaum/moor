// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import {
    StoredScatterLabelUnion,
    unionListToStoredScatterLabelUnion,
    unionToStoredScatterLabelUnion,
} from "../moor-program/stored-scatter-label-union.js";

export class StoredScatterLabel {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): StoredScatterLabel {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsStoredScatterLabel(bb: flatbuffers.ByteBuffer, obj?: StoredScatterLabel): StoredScatterLabel {
        return (obj || new StoredScatterLabel()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsStoredScatterLabel(
        bb: flatbuffers.ByteBuffer,
        obj?: StoredScatterLabel,
    ): StoredScatterLabel {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new StoredScatterLabel()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    labelType(): StoredScatterLabelUnion {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.readUint8(this.bb_pos + offset) : StoredScatterLabelUnion.NONE;
    }

    label<T extends flatbuffers.Table>(obj: any): any | null {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
    }

    static startStoredScatterLabel(builder: flatbuffers.Builder) {
        builder.startObject(2);
    }

    static addLabelType(builder: flatbuffers.Builder, labelType: StoredScatterLabelUnion) {
        builder.addFieldInt8(0, labelType, StoredScatterLabelUnion.NONE);
    }

    static addLabel(builder: flatbuffers.Builder, labelOffset: flatbuffers.Offset) {
        builder.addFieldOffset(1, labelOffset, 0);
    }

    static endStoredScatterLabel(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 6); // label
        return offset;
    }

    static createStoredScatterLabel(
        builder: flatbuffers.Builder,
        labelType: StoredScatterLabelUnion,
        labelOffset: flatbuffers.Offset,
    ): flatbuffers.Offset {
        StoredScatterLabel.startStoredScatterLabel(builder);
        StoredScatterLabel.addLabelType(builder, labelType);
        StoredScatterLabel.addLabel(builder, labelOffset);
        return StoredScatterLabel.endStoredScatterLabel(builder);
    }
}
