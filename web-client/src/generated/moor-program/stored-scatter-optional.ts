// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { StoredName } from "../moor-program/stored-name.js";

export class StoredScatterOptional {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): StoredScatterOptional {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsStoredScatterOptional(
        bb: flatbuffers.ByteBuffer,
        obj?: StoredScatterOptional,
    ): StoredScatterOptional {
        return (obj || new StoredScatterOptional()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsStoredScatterOptional(
        bb: flatbuffers.ByteBuffer,
        obj?: StoredScatterOptional,
    ): StoredScatterOptional {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new StoredScatterOptional()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    name(obj?: StoredName): StoredName | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? (obj || new StoredName()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    defaultLabel(): number {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
    }

    hasDefault(): boolean {
        const offset = this.bb!.__offset(this.bb_pos, 8);
        return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
    }

    static startStoredScatterOptional(builder: flatbuffers.Builder) {
        builder.startObject(3);
    }

    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, nameOffset, 0);
    }

    static addDefaultLabel(builder: flatbuffers.Builder, defaultLabel: number) {
        builder.addFieldInt16(1, defaultLabel, 0);
    }

    static addHasDefault(builder: flatbuffers.Builder, hasDefault: boolean) {
        builder.addFieldInt8(2, +hasDefault, +false);
    }

    static endStoredScatterOptional(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // name
        return offset;
    }

    static createStoredScatterOptional(
        builder: flatbuffers.Builder,
        nameOffset: flatbuffers.Offset,
        defaultLabel: number,
        hasDefault: boolean,
    ): flatbuffers.Offset {
        StoredScatterOptional.startStoredScatterOptional(builder);
        StoredScatterOptional.addName(builder, nameOffset);
        StoredScatterOptional.addDefaultLabel(builder, defaultLabel);
        StoredScatterOptional.addHasDefault(builder, hasDefault);
        return StoredScatterOptional.endStoredScatterOptional(builder);
    }
}
