// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import {
    StoredVarNameUnion,
    unionListToStoredVarNameUnion,
    unionToStoredVarNameUnion,
} from "../moor-program/stored-var-name-union.js";

export class StoredVariable {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): StoredVariable {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsStoredVariable(bb: flatbuffers.ByteBuffer, obj?: StoredVariable): StoredVariable {
        return (obj || new StoredVariable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsStoredVariable(bb: flatbuffers.ByteBuffer, obj?: StoredVariable): StoredVariable {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new StoredVariable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    id(): number {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
    }

    scopeId(): number {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
    }

    varNameType(): StoredVarNameUnion {
        const offset = this.bb!.__offset(this.bb_pos, 8);
        return offset ? this.bb!.readUint8(this.bb_pos + offset) : StoredVarNameUnion.NONE;
    }

    varName<T extends flatbuffers.Table>(obj: any): any | null {
        const offset = this.bb!.__offset(this.bb_pos, 10);
        return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
    }

    static startStoredVariable(builder: flatbuffers.Builder) {
        builder.startObject(4);
    }

    static addId(builder: flatbuffers.Builder, id: number) {
        builder.addFieldInt16(0, id, 0);
    }

    static addScopeId(builder: flatbuffers.Builder, scopeId: number) {
        builder.addFieldInt16(1, scopeId, 0);
    }

    static addVarNameType(builder: flatbuffers.Builder, varNameType: StoredVarNameUnion) {
        builder.addFieldInt8(2, varNameType, StoredVarNameUnion.NONE);
    }

    static addVarName(builder: flatbuffers.Builder, varNameOffset: flatbuffers.Offset) {
        builder.addFieldOffset(3, varNameOffset, 0);
    }

    static endStoredVariable(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 10); // var_name
        return offset;
    }

    static createStoredVariable(
        builder: flatbuffers.Builder,
        id: number,
        scopeId: number,
        varNameType: StoredVarNameUnion,
        varNameOffset: flatbuffers.Offset,
    ): flatbuffers.Offset {
        StoredVariable.startStoredVariable(builder);
        StoredVariable.addId(builder, id);
        StoredVariable.addScopeId(builder, scopeId);
        StoredVariable.addVarNameType(builder, varNameType);
        StoredVariable.addVarName(builder, varNameOffset);
        return StoredVariable.endStoredVariable(builder);
    }
}
