// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { AbortLimitReason } from "../moor-rpc/abort-limit-reason.js";

export class AbortLimit {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): AbortLimit {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsAbortLimit(bb: flatbuffers.ByteBuffer, obj?: AbortLimit): AbortLimit {
        return (obj || new AbortLimit()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsAbortLimit(bb: flatbuffers.ByteBuffer, obj?: AbortLimit): AbortLimit {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new AbortLimit()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    reason(): AbortLimitReason {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.readUint8(this.bb_pos + offset) : AbortLimitReason.Ticks;
    }

    ticks(): bigint {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
    }

    timeNanos(): bigint {
        const offset = this.bb!.__offset(this.bb_pos, 8);
        return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
    }

    static startAbortLimit(builder: flatbuffers.Builder) {
        builder.startObject(3);
    }

    static addReason(builder: flatbuffers.Builder, reason: AbortLimitReason) {
        builder.addFieldInt8(0, reason, AbortLimitReason.Ticks);
    }

    static addTicks(builder: flatbuffers.Builder, ticks: bigint) {
        builder.addFieldInt64(1, ticks, BigInt("0"));
    }

    static addTimeNanos(builder: flatbuffers.Builder, timeNanos: bigint) {
        builder.addFieldInt64(2, timeNanos, BigInt("0"));
    }

    static endAbortLimit(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        return offset;
    }

    static createAbortLimit(
        builder: flatbuffers.Builder,
        reason: AbortLimitReason,
        ticks: bigint,
        timeNanos: bigint,
    ): flatbuffers.Offset {
        AbortLimit.startAbortLimit(builder);
        AbortLimit.addReason(builder, reason);
        AbortLimit.addTicks(builder, ticks);
        AbortLimit.addTimeNanos(builder, timeNanos);
        return AbortLimit.endAbortLimit(builder);
    }
}
