// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { Symbol } from "../moor-common/symbol.js";
import { WorkerToken } from "../moor-rpc/worker-token.js";

export class AttachWorker {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): AttachWorker {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsAttachWorker(bb: flatbuffers.ByteBuffer, obj?: AttachWorker): AttachWorker {
        return (obj || new AttachWorker()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsAttachWorker(bb: flatbuffers.ByteBuffer, obj?: AttachWorker): AttachWorker {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new AttachWorker()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    token(obj?: WorkerToken): WorkerToken | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? (obj || new WorkerToken()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    workerType(obj?: Symbol): Symbol | null {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? (obj || new Symbol()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    static startAttachWorker(builder: flatbuffers.Builder) {
        builder.startObject(2);
    }

    static addToken(builder: flatbuffers.Builder, tokenOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, tokenOffset, 0);
    }

    static addWorkerType(builder: flatbuffers.Builder, workerTypeOffset: flatbuffers.Offset) {
        builder.addFieldOffset(1, workerTypeOffset, 0);
    }

    static endAttachWorker(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // token
        builder.requiredField(offset, 6); // worker_type
        return offset;
    }
}
