// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { CompileContext } from '../moor-rpc/compile-context.js';


export class BadSlotName {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):BadSlotName {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBadSlotName(bb:flatbuffers.ByteBuffer, obj?:BadSlotName):BadSlotName {
  return (obj || new BadSlotName()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBadSlotName(bb:flatbuffers.ByteBuffer, obj?:BadSlotName):BadSlotName {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BadSlotName()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

context(obj?:CompileContext):CompileContext|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new CompileContext()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

slot():string|null
slot(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
slot(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startBadSlotName(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addContext(builder:flatbuffers.Builder, contextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, contextOffset, 0);
}

static addSlot(builder:flatbuffers.Builder, slotOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, slotOffset, 0);
}

static endBadSlotName(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // context
  builder.requiredField(offset, 6) // slot
  return offset;
}

static createBadSlotName(builder:flatbuffers.Builder, contextOffset:flatbuffers.Offset, slotOffset:flatbuffers.Offset):flatbuffers.Offset {
  BadSlotName.startBadSlotName(builder);
  BadSlotName.addContext(builder, contextOffset);
  BadSlotName.addSlot(builder, slotOffset);
  return BadSlotName.endBadSlotName(builder);
}
}
