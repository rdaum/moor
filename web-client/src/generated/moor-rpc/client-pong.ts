// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Obj } from '../moor-common/obj.js';
import { ClientToken } from '../moor-rpc/client-token.js';
import { HostType } from '../moor-rpc/host-type.js';


export class ClientPong {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ClientPong {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsClientPong(bb:flatbuffers.ByteBuffer, obj?:ClientPong):ClientPong {
  return (obj || new ClientPong()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsClientPong(bb:flatbuffers.ByteBuffer, obj?:ClientPong):ClientPong {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ClientPong()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

clientToken(obj?:ClientToken):ClientToken|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new ClientToken()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

clientSysTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

player(obj?:Obj):Obj|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Obj()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

hostType():HostType {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : HostType.TCP;
}

socketAddr():string|null
socketAddr(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
socketAddr(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startClientPong(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addClientToken(builder:flatbuffers.Builder, clientTokenOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, clientTokenOffset, 0);
}

static addClientSysTime(builder:flatbuffers.Builder, clientSysTime:bigint) {
  builder.addFieldInt64(1, clientSysTime, BigInt('0'));
}

static addPlayer(builder:flatbuffers.Builder, playerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, playerOffset, 0);
}

static addHostType(builder:flatbuffers.Builder, hostType:HostType) {
  builder.addFieldInt8(3, hostType, HostType.TCP);
}

static addSocketAddr(builder:flatbuffers.Builder, socketAddrOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, socketAddrOffset, 0);
}

static endClientPong(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // client_token
  builder.requiredField(offset, 8) // player
  builder.requiredField(offset, 12) // socket_addr
  return offset;
}

}
