// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { DaemonToClientReply } from '../moor-rpc/daemon-to-client-reply.js';


export class ClientSuccess {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ClientSuccess {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsClientSuccess(bb:flatbuffers.ByteBuffer, obj?:ClientSuccess):ClientSuccess {
  return (obj || new ClientSuccess()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsClientSuccess(bb:flatbuffers.ByteBuffer, obj?:ClientSuccess):ClientSuccess {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ClientSuccess()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

reply(obj?:DaemonToClientReply):DaemonToClientReply|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new DaemonToClientReply()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startClientSuccess(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addReply(builder:flatbuffers.Builder, replyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, replyOffset, 0);
}

static endClientSuccess(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // reply
  return offset;
}

static createClientSuccess(builder:flatbuffers.Builder, replyOffset:flatbuffers.Offset):flatbuffers.Offset {
  ClientSuccess.startClientSuccess(builder);
  ClientSuccess.addReply(builder, replyOffset);
  return ClientSuccess.endClientSuccess(builder);
}
}
