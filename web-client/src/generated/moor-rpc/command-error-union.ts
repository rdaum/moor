// automatically generated by the FlatBuffers compiler, do not modify

import { CouldNotParseCommand } from "../moor-rpc/could-not-parse-command.js";
import { DatabaseError } from "../moor-rpc/database-error.js";
import { NoCommandMatch } from "../moor-rpc/no-command-match.js";
import { NoObjectMatch } from "../moor-rpc/no-object-match.js";
import { PermissionDenied } from "../moor-rpc/permission-denied.js";

export enum CommandErrorUnion {
    NONE = 0,
    CouldNotParseCommand = 1,
    NoObjectMatch = 2,
    NoCommandMatch = 3,
    DatabaseError = 4,
    PermissionDenied = 5,
}

export function unionToCommandErrorUnion(
    type: CommandErrorUnion,
    accessor: (
        obj: CouldNotParseCommand | DatabaseError | NoCommandMatch | NoObjectMatch | PermissionDenied,
    ) => CouldNotParseCommand | DatabaseError | NoCommandMatch | NoObjectMatch | PermissionDenied | null,
): CouldNotParseCommand | DatabaseError | NoCommandMatch | NoObjectMatch | PermissionDenied | null {
    switch (CommandErrorUnion[type]) {
        case "NONE":
            return null;
        case "CouldNotParseCommand":
            return accessor(new CouldNotParseCommand())! as CouldNotParseCommand;
        case "NoObjectMatch":
            return accessor(new NoObjectMatch())! as NoObjectMatch;
        case "NoCommandMatch":
            return accessor(new NoCommandMatch())! as NoCommandMatch;
        case "DatabaseError":
            return accessor(new DatabaseError())! as DatabaseError;
        case "PermissionDenied":
            return accessor(new PermissionDenied())! as PermissionDenied;
        default:
            return null;
    }
}

export function unionListToCommandErrorUnion(
    type: CommandErrorUnion,
    accessor: (
        index: number,
        obj: CouldNotParseCommand | DatabaseError | NoCommandMatch | NoObjectMatch | PermissionDenied,
    ) => CouldNotParseCommand | DatabaseError | NoCommandMatch | NoObjectMatch | PermissionDenied | null,
    index: number,
): CouldNotParseCommand | DatabaseError | NoCommandMatch | NoObjectMatch | PermissionDenied | null {
    switch (CommandErrorUnion[type]) {
        case "NONE":
            return null;
        case "CouldNotParseCommand":
            return accessor(index, new CouldNotParseCommand())! as CouldNotParseCommand;
        case "NoObjectMatch":
            return accessor(index, new NoObjectMatch())! as NoObjectMatch;
        case "NoCommandMatch":
            return accessor(index, new NoCommandMatch())! as NoCommandMatch;
        case "DatabaseError":
            return accessor(index, new DatabaseError())! as DatabaseError;
        case "PermissionDenied":
            return accessor(index, new PermissionDenied())! as PermissionDenied;
        default:
            return null;
    }
}
