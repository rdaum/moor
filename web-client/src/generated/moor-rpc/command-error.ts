// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { CommandErrorUnion, unionToCommandErrorUnion, unionListToCommandErrorUnion } from '../moor-rpc/command-error-union.js';


export class CommandError {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CommandError {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCommandError(bb:flatbuffers.ByteBuffer, obj?:CommandError):CommandError {
  return (obj || new CommandError()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCommandError(bb:flatbuffers.ByteBuffer, obj?:CommandError):CommandError {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CommandError()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

errorType():CommandErrorUnion {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : CommandErrorUnion.NONE;
}

error<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startCommandError(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addErrorType(builder:flatbuffers.Builder, errorType:CommandErrorUnion) {
  builder.addFieldInt8(0, errorType, CommandErrorUnion.NONE);
}

static addError(builder:flatbuffers.Builder, errorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, errorOffset, 0);
}

static endCommandError(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // error
  return offset;
}

static createCommandError(builder:flatbuffers.Builder, errorType:CommandErrorUnion, errorOffset:flatbuffers.Offset):flatbuffers.Offset {
  CommandError.startCommandError(builder);
  CommandError.addErrorType(builder, errorType);
  CommandError.addError(builder, errorOffset);
  return CommandError.endCommandError(builder);
}
}
