// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class CompileContext {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CompileContext {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCompileContext(bb:flatbuffers.ByteBuffer, obj?:CompileContext):CompileContext {
  return (obj || new CompileContext()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCompileContext(bb:flatbuffers.ByteBuffer, obj?:CompileContext):CompileContext {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CompileContext()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

line():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

col():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

static startCompileContext(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addLine(builder:flatbuffers.Builder, line:bigint) {
  builder.addFieldInt64(0, line, BigInt('0'));
}

static addCol(builder:flatbuffers.Builder, col:bigint) {
  builder.addFieldInt64(1, col, BigInt('0'));
}

static endCompileContext(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createCompileContext(builder:flatbuffers.Builder, line:bigint, col:bigint):flatbuffers.Offset {
  CompileContext.startCompileContext(builder);
  CompileContext.addLine(builder, line);
  CompileContext.addCol(builder, col);
  return CompileContext.endCompileContext(builder);
}
}
