// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { Symbol } from "../moor-common/symbol.js";
import { ConnectionAttribute } from "../moor-rpc/connection-attribute.js";

export class ConnectionEstablish {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): ConnectionEstablish {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsConnectionEstablish(bb: flatbuffers.ByteBuffer, obj?: ConnectionEstablish): ConnectionEstablish {
        return (obj || new ConnectionEstablish()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsConnectionEstablish(
        bb: flatbuffers.ByteBuffer,
        obj?: ConnectionEstablish,
    ): ConnectionEstablish {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ConnectionEstablish()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    peerAddr(): string | null;
    peerAddr(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    peerAddr(optionalEncoding?: any): string | Uint8Array | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
    }

    localPort(): number {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
    }

    remotePort(): number {
        const offset = this.bb!.__offset(this.bb_pos, 8);
        return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
    }

    acceptableContentTypes(index: number, obj?: Symbol): Symbol | null {
        const offset = this.bb!.__offset(this.bb_pos, 10);
        return offset
            ? (obj || new Symbol()).__init(
                this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),
                this.bb!,
            )
            : null;
    }

    acceptableContentTypesLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 10);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    connectionAttributes(index: number, obj?: ConnectionAttribute): ConnectionAttribute | null {
        const offset = this.bb!.__offset(this.bb_pos, 12);
        return offset
            ? (obj || new ConnectionAttribute()).__init(
                this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),
                this.bb!,
            )
            : null;
    }

    connectionAttributesLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 12);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    static startConnectionEstablish(builder: flatbuffers.Builder) {
        builder.startObject(5);
    }

    static addPeerAddr(builder: flatbuffers.Builder, peerAddrOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, peerAddrOffset, 0);
    }

    static addLocalPort(builder: flatbuffers.Builder, localPort: number) {
        builder.addFieldInt16(1, localPort, 0);
    }

    static addRemotePort(builder: flatbuffers.Builder, remotePort: number) {
        builder.addFieldInt16(2, remotePort, 0);
    }

    static addAcceptableContentTypes(builder: flatbuffers.Builder, acceptableContentTypesOffset: flatbuffers.Offset) {
        builder.addFieldOffset(3, acceptableContentTypesOffset, 0);
    }

    static createAcceptableContentTypesVector(
        builder: flatbuffers.Builder,
        data: flatbuffers.Offset[],
    ): flatbuffers.Offset {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]!);
        }
        return builder.endVector();
    }

    static startAcceptableContentTypesVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(4, numElems, 4);
    }

    static addConnectionAttributes(builder: flatbuffers.Builder, connectionAttributesOffset: flatbuffers.Offset) {
        builder.addFieldOffset(4, connectionAttributesOffset, 0);
    }

    static createConnectionAttributesVector(
        builder: flatbuffers.Builder,
        data: flatbuffers.Offset[],
    ): flatbuffers.Offset {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]!);
        }
        return builder.endVector();
    }

    static startConnectionAttributesVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(4, numElems, 4);
    }

    static endConnectionEstablish(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // peer_addr
        return offset;
    }

    static createConnectionEstablish(
        builder: flatbuffers.Builder,
        peerAddrOffset: flatbuffers.Offset,
        localPort: number,
        remotePort: number,
        acceptableContentTypesOffset: flatbuffers.Offset,
        connectionAttributesOffset: flatbuffers.Offset,
    ): flatbuffers.Offset {
        ConnectionEstablish.startConnectionEstablish(builder);
        ConnectionEstablish.addPeerAddr(builder, peerAddrOffset);
        ConnectionEstablish.addLocalPort(builder, localPort);
        ConnectionEstablish.addRemotePort(builder, remotePort);
        ConnectionEstablish.addAcceptableContentTypes(builder, acceptableContentTypesOffset);
        ConnectionEstablish.addConnectionAttributes(builder, connectionAttributesOffset);
        return ConnectionEstablish.endConnectionEstablish(builder);
    }
}
