// automatically generated by the FlatBuffers compiler, do not modify

import { AttachResult } from '../moor-rpc/attach-result.js';
import { ClientAttributeSet } from '../moor-rpc/client-attribute-set.js';
import { CurrentPresentations } from '../moor-rpc/current-presentations.js';
import { Disconnected } from '../moor-rpc/disconnected.js';
import { EvalResult } from '../moor-rpc/eval-result.js';
import { EventLogHistoryDeleted } from '../moor-rpc/event-log-history-deleted.js';
import { EventLogPublicKey } from '../moor-rpc/event-log-public-key.js';
import { HistoryResponseReply } from '../moor-rpc/history-response-reply.js';
import { InputThanks } from '../moor-rpc/input-thanks.js';
import { ListObjectsReply } from '../moor-rpc/list-objects-reply.js';
import { LoginResult } from '../moor-rpc/login-result.js';
import { NewConnection } from '../moor-rpc/new-connection.js';
import { PresentationDismissed } from '../moor-rpc/presentation-dismissed.js';
import { PropertiesReply } from '../moor-rpc/properties-reply.js';
import { PropertyUpdated } from '../moor-rpc/property-updated.js';
import { PropertyValue } from '../moor-rpc/property-value.js';
import { ResolveResult } from '../moor-rpc/resolve-result.js';
import { SysPropValue } from '../moor-rpc/sys-prop-value.js';
import { SystemHandlerResponseReply } from '../moor-rpc/system-handler-response-reply.js';
import { SystemVerbResponseReply } from '../moor-rpc/system-verb-response-reply.js';
import { TaskSubmitted } from '../moor-rpc/task-submitted.js';
import { ThanksPong } from '../moor-rpc/thanks-pong.js';
import { VerbProgramResponseReply } from '../moor-rpc/verb-program-response-reply.js';
import { VerbValue } from '../moor-rpc/verb-value.js';
import { VerbsReply } from '../moor-rpc/verbs-reply.js';


export enum DaemonToClientReplyUnion {
  NONE = 0,
  NewConnection = 1,
  LoginResult = 2,
  AttachResult = 3,
  SysPropValue = 4,
  TaskSubmitted = 5,
  InputThanks = 6,
  EvalResult = 7,
  ThanksPong = 8,
  VerbsReply = 9,
  PropertiesReply = 10,
  VerbProgramResponseReply = 11,
  PropertyValue = 12,
  VerbValue = 13,
  ResolveResult = 14,
  HistoryResponseReply = 15,
  CurrentPresentations = 16,
  PresentationDismissed = 17,
  ClientAttributeSet = 18,
  Disconnected = 19,
  EventLogPublicKey = 20,
  EventLogHistoryDeleted = 21,
  ListObjectsReply = 22,
  PropertyUpdated = 23,
  SystemHandlerResponseReply = 24,
  SystemVerbResponseReply = 25
}

export function unionToDaemonToClientReplyUnion(
  type: DaemonToClientReplyUnion,
  accessor: (obj:AttachResult|ClientAttributeSet|CurrentPresentations|Disconnected|EvalResult|EventLogHistoryDeleted|EventLogPublicKey|HistoryResponseReply|InputThanks|ListObjectsReply|LoginResult|NewConnection|PresentationDismissed|PropertiesReply|PropertyUpdated|PropertyValue|ResolveResult|SysPropValue|SystemHandlerResponseReply|SystemVerbResponseReply|TaskSubmitted|ThanksPong|VerbProgramResponseReply|VerbValue|VerbsReply) => AttachResult|ClientAttributeSet|CurrentPresentations|Disconnected|EvalResult|EventLogHistoryDeleted|EventLogPublicKey|HistoryResponseReply|InputThanks|ListObjectsReply|LoginResult|NewConnection|PresentationDismissed|PropertiesReply|PropertyUpdated|PropertyValue|ResolveResult|SysPropValue|SystemHandlerResponseReply|SystemVerbResponseReply|TaskSubmitted|ThanksPong|VerbProgramResponseReply|VerbValue|VerbsReply|null
): AttachResult|ClientAttributeSet|CurrentPresentations|Disconnected|EvalResult|EventLogHistoryDeleted|EventLogPublicKey|HistoryResponseReply|InputThanks|ListObjectsReply|LoginResult|NewConnection|PresentationDismissed|PropertiesReply|PropertyUpdated|PropertyValue|ResolveResult|SysPropValue|SystemHandlerResponseReply|SystemVerbResponseReply|TaskSubmitted|ThanksPong|VerbProgramResponseReply|VerbValue|VerbsReply|null {
  switch(DaemonToClientReplyUnion[type]) {
    case 'NONE': return null; 
    case 'NewConnection': return accessor(new NewConnection())! as NewConnection;
    case 'LoginResult': return accessor(new LoginResult())! as LoginResult;
    case 'AttachResult': return accessor(new AttachResult())! as AttachResult;
    case 'SysPropValue': return accessor(new SysPropValue())! as SysPropValue;
    case 'TaskSubmitted': return accessor(new TaskSubmitted())! as TaskSubmitted;
    case 'InputThanks': return accessor(new InputThanks())! as InputThanks;
    case 'EvalResult': return accessor(new EvalResult())! as EvalResult;
    case 'ThanksPong': return accessor(new ThanksPong())! as ThanksPong;
    case 'VerbsReply': return accessor(new VerbsReply())! as VerbsReply;
    case 'PropertiesReply': return accessor(new PropertiesReply())! as PropertiesReply;
    case 'VerbProgramResponseReply': return accessor(new VerbProgramResponseReply())! as VerbProgramResponseReply;
    case 'PropertyValue': return accessor(new PropertyValue())! as PropertyValue;
    case 'VerbValue': return accessor(new VerbValue())! as VerbValue;
    case 'ResolveResult': return accessor(new ResolveResult())! as ResolveResult;
    case 'HistoryResponseReply': return accessor(new HistoryResponseReply())! as HistoryResponseReply;
    case 'CurrentPresentations': return accessor(new CurrentPresentations())! as CurrentPresentations;
    case 'PresentationDismissed': return accessor(new PresentationDismissed())! as PresentationDismissed;
    case 'ClientAttributeSet': return accessor(new ClientAttributeSet())! as ClientAttributeSet;
    case 'Disconnected': return accessor(new Disconnected())! as Disconnected;
    case 'EventLogPublicKey': return accessor(new EventLogPublicKey())! as EventLogPublicKey;
    case 'EventLogHistoryDeleted': return accessor(new EventLogHistoryDeleted())! as EventLogHistoryDeleted;
    case 'ListObjectsReply': return accessor(new ListObjectsReply())! as ListObjectsReply;
    case 'PropertyUpdated': return accessor(new PropertyUpdated())! as PropertyUpdated;
    case 'SystemHandlerResponseReply': return accessor(new SystemHandlerResponseReply())! as SystemHandlerResponseReply;
    case 'SystemVerbResponseReply': return accessor(new SystemVerbResponseReply())! as SystemVerbResponseReply;
    default: return null;
  }
}

export function unionListToDaemonToClientReplyUnion(
  type: DaemonToClientReplyUnion, 
  accessor: (index: number, obj:AttachResult|ClientAttributeSet|CurrentPresentations|Disconnected|EvalResult|EventLogHistoryDeleted|EventLogPublicKey|HistoryResponseReply|InputThanks|ListObjectsReply|LoginResult|NewConnection|PresentationDismissed|PropertiesReply|PropertyUpdated|PropertyValue|ResolveResult|SysPropValue|SystemHandlerResponseReply|SystemVerbResponseReply|TaskSubmitted|ThanksPong|VerbProgramResponseReply|VerbValue|VerbsReply) => AttachResult|ClientAttributeSet|CurrentPresentations|Disconnected|EvalResult|EventLogHistoryDeleted|EventLogPublicKey|HistoryResponseReply|InputThanks|ListObjectsReply|LoginResult|NewConnection|PresentationDismissed|PropertiesReply|PropertyUpdated|PropertyValue|ResolveResult|SysPropValue|SystemHandlerResponseReply|SystemVerbResponseReply|TaskSubmitted|ThanksPong|VerbProgramResponseReply|VerbValue|VerbsReply|null, 
  index: number
): AttachResult|ClientAttributeSet|CurrentPresentations|Disconnected|EvalResult|EventLogHistoryDeleted|EventLogPublicKey|HistoryResponseReply|InputThanks|ListObjectsReply|LoginResult|NewConnection|PresentationDismissed|PropertiesReply|PropertyUpdated|PropertyValue|ResolveResult|SysPropValue|SystemHandlerResponseReply|SystemVerbResponseReply|TaskSubmitted|ThanksPong|VerbProgramResponseReply|VerbValue|VerbsReply|null {
  switch(DaemonToClientReplyUnion[type]) {
    case 'NONE': return null; 
    case 'NewConnection': return accessor(index, new NewConnection())! as NewConnection;
    case 'LoginResult': return accessor(index, new LoginResult())! as LoginResult;
    case 'AttachResult': return accessor(index, new AttachResult())! as AttachResult;
    case 'SysPropValue': return accessor(index, new SysPropValue())! as SysPropValue;
    case 'TaskSubmitted': return accessor(index, new TaskSubmitted())! as TaskSubmitted;
    case 'InputThanks': return accessor(index, new InputThanks())! as InputThanks;
    case 'EvalResult': return accessor(index, new EvalResult())! as EvalResult;
    case 'ThanksPong': return accessor(index, new ThanksPong())! as ThanksPong;
    case 'VerbsReply': return accessor(index, new VerbsReply())! as VerbsReply;
    case 'PropertiesReply': return accessor(index, new PropertiesReply())! as PropertiesReply;
    case 'VerbProgramResponseReply': return accessor(index, new VerbProgramResponseReply())! as VerbProgramResponseReply;
    case 'PropertyValue': return accessor(index, new PropertyValue())! as PropertyValue;
    case 'VerbValue': return accessor(index, new VerbValue())! as VerbValue;
    case 'ResolveResult': return accessor(index, new ResolveResult())! as ResolveResult;
    case 'HistoryResponseReply': return accessor(index, new HistoryResponseReply())! as HistoryResponseReply;
    case 'CurrentPresentations': return accessor(index, new CurrentPresentations())! as CurrentPresentations;
    case 'PresentationDismissed': return accessor(index, new PresentationDismissed())! as PresentationDismissed;
    case 'ClientAttributeSet': return accessor(index, new ClientAttributeSet())! as ClientAttributeSet;
    case 'Disconnected': return accessor(index, new Disconnected())! as Disconnected;
    case 'EventLogPublicKey': return accessor(index, new EventLogPublicKey())! as EventLogPublicKey;
    case 'EventLogHistoryDeleted': return accessor(index, new EventLogHistoryDeleted())! as EventLogHistoryDeleted;
    case 'ListObjectsReply': return accessor(index, new ListObjectsReply())! as ListObjectsReply;
    case 'PropertyUpdated': return accessor(index, new PropertyUpdated())! as PropertyUpdated;
    case 'SystemHandlerResponseReply': return accessor(index, new SystemHandlerResponseReply())! as SystemHandlerResponseReply;
    case 'SystemVerbResponseReply': return accessor(index, new SystemVerbResponseReply())! as SystemVerbResponseReply;
    default: return null;
  }
}
