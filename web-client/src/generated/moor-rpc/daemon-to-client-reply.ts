// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { DaemonToClientReplyUnion, unionToDaemonToClientReplyUnion, unionListToDaemonToClientReplyUnion } from '../moor-rpc/daemon-to-client-reply-union.js';


export class DaemonToClientReply {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DaemonToClientReply {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDaemonToClientReply(bb:flatbuffers.ByteBuffer, obj?:DaemonToClientReply):DaemonToClientReply {
  return (obj || new DaemonToClientReply()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDaemonToClientReply(bb:flatbuffers.ByteBuffer, obj?:DaemonToClientReply):DaemonToClientReply {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DaemonToClientReply()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

replyType():DaemonToClientReplyUnion {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : DaemonToClientReplyUnion.NONE;
}

reply<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startDaemonToClientReply(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addReplyType(builder:flatbuffers.Builder, replyType:DaemonToClientReplyUnion) {
  builder.addFieldInt8(0, replyType, DaemonToClientReplyUnion.NONE);
}

static addReply(builder:flatbuffers.Builder, replyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, replyOffset, 0);
}

static endDaemonToClientReply(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // reply
  return offset;
}

static createDaemonToClientReply(builder:flatbuffers.Builder, replyType:DaemonToClientReplyUnion, replyOffset:flatbuffers.Offset):flatbuffers.Offset {
  DaemonToClientReply.startDaemonToClientReply(builder);
  DaemonToClientReply.addReplyType(builder, replyType);
  DaemonToClientReply.addReply(builder, replyOffset);
  return DaemonToClientReply.endDaemonToClientReply(builder);
}
}
