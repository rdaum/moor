// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { CounterCategory } from '../moor-rpc/counter-category.js';


export class DaemonToHostPerfCounters {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DaemonToHostPerfCounters {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDaemonToHostPerfCounters(bb:flatbuffers.ByteBuffer, obj?:DaemonToHostPerfCounters):DaemonToHostPerfCounters {
  return (obj || new DaemonToHostPerfCounters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDaemonToHostPerfCounters(bb:flatbuffers.ByteBuffer, obj?:DaemonToHostPerfCounters):DaemonToHostPerfCounters {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DaemonToHostPerfCounters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

timestamp():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

counters(index: number, obj?:CounterCategory):CounterCategory|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new CounterCategory()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

countersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startDaemonToHostPerfCounters(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addTimestamp(builder:flatbuffers.Builder, timestamp:bigint) {
  builder.addFieldInt64(0, timestamp, BigInt('0'));
}

static addCounters(builder:flatbuffers.Builder, countersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, countersOffset, 0);
}

static createCountersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCountersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endDaemonToHostPerfCounters(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // counters
  return offset;
}

static createDaemonToHostPerfCounters(builder:flatbuffers.Builder, timestamp:bigint, countersOffset:flatbuffers.Offset):flatbuffers.Offset {
  DaemonToHostPerfCounters.startDaemonToHostPerfCounters(builder);
  DaemonToHostPerfCounters.addTimestamp(builder, timestamp);
  DaemonToHostPerfCounters.addCounters(builder, countersOffset);
  return DaemonToHostPerfCounters.endDaemonToHostPerfCounters(builder);
}
}
