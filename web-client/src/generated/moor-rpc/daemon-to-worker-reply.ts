// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { DaemonToWorkerReplyUnion, unionToDaemonToWorkerReplyUnion, unionListToDaemonToWorkerReplyUnion } from '../moor-rpc/daemon-to-worker-reply-union.js';


export class DaemonToWorkerReply {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DaemonToWorkerReply {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDaemonToWorkerReply(bb:flatbuffers.ByteBuffer, obj?:DaemonToWorkerReply):DaemonToWorkerReply {
  return (obj || new DaemonToWorkerReply()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDaemonToWorkerReply(bb:flatbuffers.ByteBuffer, obj?:DaemonToWorkerReply):DaemonToWorkerReply {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DaemonToWorkerReply()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

replyType():DaemonToWorkerReplyUnion {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : DaemonToWorkerReplyUnion.NONE;
}

reply<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startDaemonToWorkerReply(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addReplyType(builder:flatbuffers.Builder, replyType:DaemonToWorkerReplyUnion) {
  builder.addFieldInt8(0, replyType, DaemonToWorkerReplyUnion.NONE);
}

static addReply(builder:flatbuffers.Builder, replyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, replyOffset, 0);
}

static endDaemonToWorkerReply(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // reply
  return offset;
}

static createDaemonToWorkerReply(builder:flatbuffers.Builder, replyType:DaemonToWorkerReplyUnion, replyOffset:flatbuffers.Offset):flatbuffers.Offset {
  DaemonToWorkerReply.startDaemonToWorkerReply(builder);
  DaemonToWorkerReply.addReplyType(builder, replyType);
  DaemonToWorkerReply.addReply(builder, replyOffset);
  return DaemonToWorkerReply.endDaemonToWorkerReply(builder);
}
}
