// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

export class GarbageCollectionFailed {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): GarbageCollectionFailed {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsGarbageCollectionFailed(
        bb: flatbuffers.ByteBuffer,
        obj?: GarbageCollectionFailed,
    ): GarbageCollectionFailed {
        return (obj || new GarbageCollectionFailed()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsGarbageCollectionFailed(
        bb: flatbuffers.ByteBuffer,
        obj?: GarbageCollectionFailed,
    ): GarbageCollectionFailed {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new GarbageCollectionFailed()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    message(): string | null;
    message(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    message(optionalEncoding?: any): string | Uint8Array | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
    }

    static startGarbageCollectionFailed(builder: flatbuffers.Builder) {
        builder.startObject(1);
    }

    static addMessage(builder: flatbuffers.Builder, messageOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, messageOffset, 0);
    }

    static endGarbageCollectionFailed(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // message
        return offset;
    }

    static createGarbageCollectionFailed(
        builder: flatbuffers.Builder,
        messageOffset: flatbuffers.Offset,
    ): flatbuffers.Offset {
        GarbageCollectionFailed.startGarbageCollectionFailed(builder);
        GarbageCollectionFailed.addMessage(builder, messageOffset);
        return GarbageCollectionFailed.endGarbageCollectionFailed(builder);
    }
}
