// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { Uuid } from "../moor-common/uuid.js";

export class HistoryRecallSinceEvent {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): HistoryRecallSinceEvent {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsHistoryRecallSinceEvent(
        bb: flatbuffers.ByteBuffer,
        obj?: HistoryRecallSinceEvent,
    ): HistoryRecallSinceEvent {
        return (obj || new HistoryRecallSinceEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsHistoryRecallSinceEvent(
        bb: flatbuffers.ByteBuffer,
        obj?: HistoryRecallSinceEvent,
    ): HistoryRecallSinceEvent {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new HistoryRecallSinceEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    eventId(obj?: Uuid): Uuid | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? (obj || new Uuid()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    limit(): bigint {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
    }

    static startHistoryRecallSinceEvent(builder: flatbuffers.Builder) {
        builder.startObject(2);
    }

    static addEventId(builder: flatbuffers.Builder, eventIdOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, eventIdOffset, 0);
    }

    static addLimit(builder: flatbuffers.Builder, limit: bigint) {
        builder.addFieldInt64(1, limit, BigInt("0"));
    }

    static endHistoryRecallSinceEvent(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // event_id
        return offset;
    }

    static createHistoryRecallSinceEvent(
        builder: flatbuffers.Builder,
        eventIdOffset: flatbuffers.Offset,
        limit: bigint,
    ): flatbuffers.Offset {
        HistoryRecallSinceEvent.startHistoryRecallSinceEvent(builder);
        HistoryRecallSinceEvent.addEventId(builder, eventIdOffset);
        HistoryRecallSinceEvent.addLimit(builder, limit);
        return HistoryRecallSinceEvent.endHistoryRecallSinceEvent(builder);
    }
}
