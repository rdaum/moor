// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class HistoryRecallSinceSeconds {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):HistoryRecallSinceSeconds {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsHistoryRecallSinceSeconds(bb:flatbuffers.ByteBuffer, obj?:HistoryRecallSinceSeconds):HistoryRecallSinceSeconds {
  return (obj || new HistoryRecallSinceSeconds()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsHistoryRecallSinceSeconds(bb:flatbuffers.ByteBuffer, obj?:HistoryRecallSinceSeconds):HistoryRecallSinceSeconds {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new HistoryRecallSinceSeconds()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

secondsAgo():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

limit():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

static startHistoryRecallSinceSeconds(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addSecondsAgo(builder:flatbuffers.Builder, secondsAgo:bigint) {
  builder.addFieldInt64(0, secondsAgo, BigInt('0'));
}

static addLimit(builder:flatbuffers.Builder, limit:bigint) {
  builder.addFieldInt64(1, limit, BigInt('0'));
}

static endHistoryRecallSinceSeconds(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createHistoryRecallSinceSeconds(builder:flatbuffers.Builder, secondsAgo:bigint, limit:bigint):flatbuffers.Offset {
  HistoryRecallSinceSeconds.startHistoryRecallSinceSeconds(builder);
  HistoryRecallSinceSeconds.addSecondsAgo(builder, secondsAgo);
  HistoryRecallSinceSeconds.addLimit(builder, limit);
  return HistoryRecallSinceSeconds.endHistoryRecallSinceSeconds(builder);
}
}
