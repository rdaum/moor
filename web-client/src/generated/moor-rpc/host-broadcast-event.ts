// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { HostBroadcastEventUnion, unionToHostBroadcastEventUnion, unionListToHostBroadcastEventUnion } from '../moor-rpc/host-broadcast-event-union.js';


export class HostBroadcastEvent {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):HostBroadcastEvent {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsHostBroadcastEvent(bb:flatbuffers.ByteBuffer, obj?:HostBroadcastEvent):HostBroadcastEvent {
  return (obj || new HostBroadcastEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsHostBroadcastEvent(bb:flatbuffers.ByteBuffer, obj?:HostBroadcastEvent):HostBroadcastEvent {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new HostBroadcastEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

eventType():HostBroadcastEventUnion {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : HostBroadcastEventUnion.NONE;
}

event<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startHostBroadcastEvent(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addEventType(builder:flatbuffers.Builder, eventType:HostBroadcastEventUnion) {
  builder.addFieldInt8(0, eventType, HostBroadcastEventUnion.NONE);
}

static addEvent(builder:flatbuffers.Builder, eventOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, eventOffset, 0);
}

static endHostBroadcastEvent(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // event
  return offset;
}

static createHostBroadcastEvent(builder:flatbuffers.Builder, eventType:HostBroadcastEventUnion, eventOffset:flatbuffers.Offset):flatbuffers.Offset {
  HostBroadcastEvent.startHostBroadcastEvent(builder);
  HostBroadcastEvent.addEventType(builder, eventType);
  HostBroadcastEvent.addEvent(builder, eventOffset);
  return HostBroadcastEvent.endHostBroadcastEvent(builder);
}
}
