// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { Obj } from "../moor-common/obj.js";
import { HostType } from "../moor-rpc/host-type.js";

export class HostBroadcastListen {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): HostBroadcastListen {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsHostBroadcastListen(bb: flatbuffers.ByteBuffer, obj?: HostBroadcastListen): HostBroadcastListen {
        return (obj || new HostBroadcastListen()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsHostBroadcastListen(
        bb: flatbuffers.ByteBuffer,
        obj?: HostBroadcastListen,
    ): HostBroadcastListen {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new HostBroadcastListen()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    handlerObject(obj?: Obj): Obj | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? (obj || new Obj()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    hostType(): HostType {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.readUint8(this.bb_pos + offset) : HostType.TCP;
    }

    port(): number {
        const offset = this.bb!.__offset(this.bb_pos, 8);
        return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
    }

    printMessages(): boolean {
        const offset = this.bb!.__offset(this.bb_pos, 10);
        return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
    }

    static startHostBroadcastListen(builder: flatbuffers.Builder) {
        builder.startObject(4);
    }

    static addHandlerObject(builder: flatbuffers.Builder, handlerObjectOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, handlerObjectOffset, 0);
    }

    static addHostType(builder: flatbuffers.Builder, hostType: HostType) {
        builder.addFieldInt8(1, hostType, HostType.TCP);
    }

    static addPort(builder: flatbuffers.Builder, port: number) {
        builder.addFieldInt16(2, port, 0);
    }

    static addPrintMessages(builder: flatbuffers.Builder, printMessages: boolean) {
        builder.addFieldInt8(3, +printMessages, +false);
    }

    static endHostBroadcastListen(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // handler_object
        return offset;
    }

    static createHostBroadcastListen(
        builder: flatbuffers.Builder,
        handlerObjectOffset: flatbuffers.Offset,
        hostType: HostType,
        port: number,
        printMessages: boolean,
    ): flatbuffers.Offset {
        HostBroadcastListen.startHostBroadcastListen(builder);
        HostBroadcastListen.addHandlerObject(builder, handlerObjectOffset);
        HostBroadcastListen.addHostType(builder, hostType);
        HostBroadcastListen.addPort(builder, port);
        HostBroadcastListen.addPrintMessages(builder, printMessages);
        return HostBroadcastListen.endHostBroadcastListen(builder);
    }
}
