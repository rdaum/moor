// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { HostClientToDaemonMessage } from "../moor-rpc/host-client-to-daemon-message.js";

export class HostClientToDaemonMsg {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): HostClientToDaemonMsg {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsHostClientToDaemonMsg(
        bb: flatbuffers.ByteBuffer,
        obj?: HostClientToDaemonMsg,
    ): HostClientToDaemonMsg {
        return (obj || new HostClientToDaemonMsg()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsHostClientToDaemonMsg(
        bb: flatbuffers.ByteBuffer,
        obj?: HostClientToDaemonMsg,
    ): HostClientToDaemonMsg {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new HostClientToDaemonMsg()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    clientData(index: number): number | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
    }

    clientDataLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    clientDataArray(): Uint8Array | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset
            ? new Uint8Array(
                this.bb!.bytes().buffer,
                this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),
                this.bb!.__vector_len(this.bb_pos + offset),
            )
            : null;
    }

    message(obj?: HostClientToDaemonMessage): HostClientToDaemonMessage | null {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset
            ? (obj || new HostClientToDaemonMessage()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!)
            : null;
    }

    static startHostClientToDaemonMsg(builder: flatbuffers.Builder) {
        builder.startObject(2);
    }

    static addClientData(builder: flatbuffers.Builder, clientDataOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, clientDataOffset, 0);
    }

    static createClientDataVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]!);
        }
        return builder.endVector();
    }

    static startClientDataVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(1, numElems, 1);
    }

    static addMessage(builder: flatbuffers.Builder, messageOffset: flatbuffers.Offset) {
        builder.addFieldOffset(1, messageOffset, 0);
    }

    static endHostClientToDaemonMsg(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // client_data
        builder.requiredField(offset, 6); // message
        return offset;
    }
}
