// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { HostToDaemonMessageUnion, unionToHostToDaemonMessageUnion, unionListToHostToDaemonMessageUnion } from '../moor-rpc/host-to-daemon-message-union.js';


export class HostToDaemonMessage {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):HostToDaemonMessage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsHostToDaemonMessage(bb:flatbuffers.ByteBuffer, obj?:HostToDaemonMessage):HostToDaemonMessage {
  return (obj || new HostToDaemonMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsHostToDaemonMessage(bb:flatbuffers.ByteBuffer, obj?:HostToDaemonMessage):HostToDaemonMessage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new HostToDaemonMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

messageType():HostToDaemonMessageUnion {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : HostToDaemonMessageUnion.NONE;
}

message<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startHostToDaemonMessage(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addMessageType(builder:flatbuffers.Builder, messageType:HostToDaemonMessageUnion) {
  builder.addFieldInt8(0, messageType, HostToDaemonMessageUnion.NONE);
}

static addMessage(builder:flatbuffers.Builder, messageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, messageOffset, 0);
}

static endHostToDaemonMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // message
  return offset;
}

static createHostToDaemonMessage(builder:flatbuffers.Builder, messageType:HostToDaemonMessageUnion, messageOffset:flatbuffers.Offset):flatbuffers.Offset {
  HostToDaemonMessage.startHostToDaemonMessage(builder);
  HostToDaemonMessage.addMessageType(builder, messageType);
  HostToDaemonMessage.addMessage(builder, messageOffset);
  return HostToDaemonMessage.endHostToDaemonMessage(builder);
}
}
