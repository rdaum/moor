// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { Uuid } from "../moor-common/uuid.js";
import { AuthToken } from "../moor-rpc/auth-token.js";
import { Var } from "../moor-var/var.js";

export class InvokeSystemHandler {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): InvokeSystemHandler {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsInvokeSystemHandler(bb: flatbuffers.ByteBuffer, obj?: InvokeSystemHandler): InvokeSystemHandler {
        return (obj || new InvokeSystemHandler()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsInvokeSystemHandler(
        bb: flatbuffers.ByteBuffer,
        obj?: InvokeSystemHandler,
    ): InvokeSystemHandler {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new InvokeSystemHandler()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    hostId(obj?: Uuid): Uuid | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? (obj || new Uuid()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    handlerType(): string | null;
    handlerType(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    handlerType(optionalEncoding?: any): string | Uint8Array | null {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
    }

    args(index: number, obj?: Var): Var | null {
        const offset = this.bb!.__offset(this.bb_pos, 8);
        return offset
            ? (obj || new Var()).__init(
                this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),
                this.bb!,
            )
            : null;
    }

    argsLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 8);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    authToken(obj?: AuthToken): AuthToken | null {
        const offset = this.bb!.__offset(this.bb_pos, 10);
        return offset ? (obj || new AuthToken()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    static startInvokeSystemHandler(builder: flatbuffers.Builder) {
        builder.startObject(4);
    }

    static addHostId(builder: flatbuffers.Builder, hostIdOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, hostIdOffset, 0);
    }

    static addHandlerType(builder: flatbuffers.Builder, handlerTypeOffset: flatbuffers.Offset) {
        builder.addFieldOffset(1, handlerTypeOffset, 0);
    }

    static addArgs(builder: flatbuffers.Builder, argsOffset: flatbuffers.Offset) {
        builder.addFieldOffset(2, argsOffset, 0);
    }

    static createArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]!);
        }
        return builder.endVector();
    }

    static startArgsVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(4, numElems, 4);
    }

    static addAuthToken(builder: flatbuffers.Builder, authTokenOffset: flatbuffers.Offset) {
        builder.addFieldOffset(3, authTokenOffset, 0);
    }

    static endInvokeSystemHandler(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // host_id
        builder.requiredField(offset, 6); // handler_type
        builder.requiredField(offset, 8); // args
        return offset;
    }
}
