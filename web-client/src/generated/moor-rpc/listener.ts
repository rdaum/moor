// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Obj } from '../moor-common/obj.js';


export class Listener {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Listener {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsListener(bb:flatbuffers.ByteBuffer, obj?:Listener):Listener {
  return (obj || new Listener()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsListener(bb:flatbuffers.ByteBuffer, obj?:Listener):Listener {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Listener()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

handlerObject(obj?:Obj):Obj|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Obj()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

socketAddr():string|null
socketAddr(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
socketAddr(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startListener(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addHandlerObject(builder:flatbuffers.Builder, handlerObjectOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, handlerObjectOffset, 0);
}

static addSocketAddr(builder:flatbuffers.Builder, socketAddrOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, socketAddrOffset, 0);
}

static endListener(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // handler_object
  builder.requiredField(offset, 6) // socket_addr
  return offset;
}

static createListener(builder:flatbuffers.Builder, handlerObjectOffset:flatbuffers.Offset, socketAddrOffset:flatbuffers.Offset):flatbuffers.Offset {
  Listener.startListener(builder);
  Listener.addHandlerObject(builder, handlerObjectOffset);
  Listener.addSocketAddr(builder, socketAddrOffset);
  return Listener.endListener(builder);
}
}
