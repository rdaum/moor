// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Obj } from '../moor-common/obj.js';
import { ClientToken } from '../moor-rpc/client-token.js';


export class LoginCommand {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LoginCommand {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLoginCommand(bb:flatbuffers.ByteBuffer, obj?:LoginCommand):LoginCommand {
  return (obj || new LoginCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLoginCommand(bb:flatbuffers.ByteBuffer, obj?:LoginCommand):LoginCommand {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LoginCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

clientToken(obj?:ClientToken):ClientToken|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new ClientToken()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

handlerObject(obj?:Obj):Obj|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Obj()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

connectArgs(index: number):string
connectArgs(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
connectArgs(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

connectArgsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

doAttach():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startLoginCommand(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addClientToken(builder:flatbuffers.Builder, clientTokenOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, clientTokenOffset, 0);
}

static addHandlerObject(builder:flatbuffers.Builder, handlerObjectOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, handlerObjectOffset, 0);
}

static addConnectArgs(builder:flatbuffers.Builder, connectArgsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, connectArgsOffset, 0);
}

static createConnectArgsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startConnectArgsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDoAttach(builder:flatbuffers.Builder, doAttach:boolean) {
  builder.addFieldInt8(3, +doAttach, +false);
}

static endLoginCommand(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // client_token
  builder.requiredField(offset, 6) // handler_object
  builder.requiredField(offset, 8) // connect_args
  return offset;
}

}
