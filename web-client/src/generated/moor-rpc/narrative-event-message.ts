// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { NarrativeEvent } from "../moor-common/narrative-event.js";
import { Obj } from "../moor-common/obj.js";

export class NarrativeEventMessage {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): NarrativeEventMessage {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsNarrativeEventMessage(
        bb: flatbuffers.ByteBuffer,
        obj?: NarrativeEventMessage,
    ): NarrativeEventMessage {
        return (obj || new NarrativeEventMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsNarrativeEventMessage(
        bb: flatbuffers.ByteBuffer,
        obj?: NarrativeEventMessage,
    ): NarrativeEventMessage {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new NarrativeEventMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    player(obj?: Obj): Obj | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? (obj || new Obj()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    event(obj?: NarrativeEvent): NarrativeEvent | null {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset
            ? (obj || new NarrativeEvent()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!)
            : null;
    }

    static startNarrativeEventMessage(builder: flatbuffers.Builder) {
        builder.startObject(2);
    }

    static addPlayer(builder: flatbuffers.Builder, playerOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, playerOffset, 0);
    }

    static addEvent(builder: flatbuffers.Builder, eventOffset: flatbuffers.Offset) {
        builder.addFieldOffset(1, eventOffset, 0);
    }

    static endNarrativeEventMessage(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // player
        builder.requiredField(offset, 6); // event
        return offset;
    }
}
