// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ObjectRef } from '../moor-common/object-ref.js';
import { Symbol } from '../moor-common/symbol.js';
import { AuthToken } from '../moor-rpc/auth-token.js';
import { ClientToken } from '../moor-rpc/client-token.js';


export class Program {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Program {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsProgram(bb:flatbuffers.ByteBuffer, obj?:Program):Program {
  return (obj || new Program()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsProgram(bb:flatbuffers.ByteBuffer, obj?:Program):Program {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Program()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

clientToken(obj?:ClientToken):ClientToken|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new ClientToken()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

authToken(obj?:AuthToken):AuthToken|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new AuthToken()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

object(obj?:ObjectRef):ObjectRef|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new ObjectRef()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

verb(obj?:Symbol):Symbol|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Symbol()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

code(index: number):string
code(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
code(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

codeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startProgram(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addClientToken(builder:flatbuffers.Builder, clientTokenOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, clientTokenOffset, 0);
}

static addAuthToken(builder:flatbuffers.Builder, authTokenOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, authTokenOffset, 0);
}

static addObject(builder:flatbuffers.Builder, objectOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, objectOffset, 0);
}

static addVerb(builder:flatbuffers.Builder, verbOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, verbOffset, 0);
}

static addCode(builder:flatbuffers.Builder, codeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, codeOffset, 0);
}

static createCodeVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCodeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endProgram(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // client_token
  builder.requiredField(offset, 6) // auth_token
  builder.requiredField(offset, 8) // object
  builder.requiredField(offset, 10) // verb
  builder.requiredField(offset, 12) // code
  return offset;
}

}
