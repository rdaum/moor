// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { Uuid } from "../moor-common/uuid.js";
import { HostType } from "../moor-rpc/host-type.js";
import { Listener } from "../moor-rpc/listener.js";

export class RegisterHost {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): RegisterHost {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsRegisterHost(bb: flatbuffers.ByteBuffer, obj?: RegisterHost): RegisterHost {
        return (obj || new RegisterHost()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsRegisterHost(bb: flatbuffers.ByteBuffer, obj?: RegisterHost): RegisterHost {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new RegisterHost()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    hostId(obj?: Uuid): Uuid | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? (obj || new Uuid()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    timestamp(): bigint {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
    }

    hostType(): HostType {
        const offset = this.bb!.__offset(this.bb_pos, 8);
        return offset ? this.bb!.readUint8(this.bb_pos + offset) : HostType.TCP;
    }

    listeners(index: number, obj?: Listener): Listener | null {
        const offset = this.bb!.__offset(this.bb_pos, 10);
        return offset
            ? (obj || new Listener()).__init(
                this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),
                this.bb!,
            )
            : null;
    }

    listenersLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 10);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    static startRegisterHost(builder: flatbuffers.Builder) {
        builder.startObject(4);
    }

    static addHostId(builder: flatbuffers.Builder, hostIdOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, hostIdOffset, 0);
    }

    static addTimestamp(builder: flatbuffers.Builder, timestamp: bigint) {
        builder.addFieldInt64(1, timestamp, BigInt("0"));
    }

    static addHostType(builder: flatbuffers.Builder, hostType: HostType) {
        builder.addFieldInt8(2, hostType, HostType.TCP);
    }

    static addListeners(builder: flatbuffers.Builder, listenersOffset: flatbuffers.Offset) {
        builder.addFieldOffset(3, listenersOffset, 0);
    }

    static createListenersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]!);
        }
        return builder.endVector();
    }

    static startListenersVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(4, numElems, 4);
    }

    static endRegisterHost(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // host_id
        builder.requiredField(offset, 10); // listeners
        return offset;
    }

    static createRegisterHost(
        builder: flatbuffers.Builder,
        hostIdOffset: flatbuffers.Offset,
        timestamp: bigint,
        hostType: HostType,
        listenersOffset: flatbuffers.Offset,
    ): flatbuffers.Offset {
        RegisterHost.startRegisterHost(builder);
        RegisterHost.addHostId(builder, hostIdOffset);
        RegisterHost.addTimestamp(builder, timestamp);
        RegisterHost.addHostType(builder, hostType);
        RegisterHost.addListeners(builder, listenersOffset);
        return RegisterHost.endRegisterHost(builder);
    }
}
