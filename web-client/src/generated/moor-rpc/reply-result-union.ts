// automatically generated by the FlatBuffers compiler, do not modify

import { ClientSuccess } from "../moor-rpc/client-success.js";
import { Failure } from "../moor-rpc/failure.js";
import { HostSuccess } from "../moor-rpc/host-success.js";

export enum ReplyResultUnion {
    NONE = 0,
    HostSuccess = 1,
    ClientSuccess = 2,
    Failure = 3,
}

export function unionToReplyResultUnion(
    type: ReplyResultUnion,
    accessor: (obj: ClientSuccess | Failure | HostSuccess) => ClientSuccess | Failure | HostSuccess | null,
): ClientSuccess | Failure | HostSuccess | null {
    switch (ReplyResultUnion[type]) {
        case "NONE":
            return null;
        case "HostSuccess":
            return accessor(new HostSuccess())! as HostSuccess;
        case "ClientSuccess":
            return accessor(new ClientSuccess())! as ClientSuccess;
        case "Failure":
            return accessor(new Failure())! as Failure;
        default:
            return null;
    }
}

export function unionListToReplyResultUnion(
    type: ReplyResultUnion,
    accessor: (
        index: number,
        obj: ClientSuccess | Failure | HostSuccess,
    ) => ClientSuccess | Failure | HostSuccess | null,
    index: number,
): ClientSuccess | Failure | HostSuccess | null {
    switch (ReplyResultUnion[type]) {
        case "NONE":
            return null;
        case "HostSuccess":
            return accessor(index, new HostSuccess())! as HostSuccess;
        case "ClientSuccess":
            return accessor(index, new ClientSuccess())! as ClientSuccess;
        case "Failure":
            return accessor(index, new Failure())! as Failure;
        default:
            return null;
    }
}
