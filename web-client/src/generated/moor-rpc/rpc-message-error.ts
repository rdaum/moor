// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { RpcMessageErrorCode } from "../moor-rpc/rpc-message-error-code.js";
import { SchedulerError } from "../moor-rpc/scheduler-error.js";

export class RpcMessageError {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): RpcMessageError {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsRpcMessageError(bb: flatbuffers.ByteBuffer, obj?: RpcMessageError): RpcMessageError {
        return (obj || new RpcMessageError()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsRpcMessageError(bb: flatbuffers.ByteBuffer, obj?: RpcMessageError): RpcMessageError {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new RpcMessageError()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    errorCode(): RpcMessageErrorCode {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.readUint8(this.bb_pos + offset) : RpcMessageErrorCode.AlreadyConnected;
    }

    message(): string | null;
    message(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    message(optionalEncoding?: any): string | Uint8Array | null {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
    }

    schedulerError(obj?: SchedulerError): SchedulerError | null {
        const offset = this.bb!.__offset(this.bb_pos, 8);
        return offset
            ? (obj || new SchedulerError()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!)
            : null;
    }

    static startRpcMessageError(builder: flatbuffers.Builder) {
        builder.startObject(3);
    }

    static addErrorCode(builder: flatbuffers.Builder, errorCode: RpcMessageErrorCode) {
        builder.addFieldInt8(0, errorCode, RpcMessageErrorCode.AlreadyConnected);
    }

    static addMessage(builder: flatbuffers.Builder, messageOffset: flatbuffers.Offset) {
        builder.addFieldOffset(1, messageOffset, 0);
    }

    static addSchedulerError(builder: flatbuffers.Builder, schedulerErrorOffset: flatbuffers.Offset) {
        builder.addFieldOffset(2, schedulerErrorOffset, 0);
    }

    static endRpcMessageError(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        return offset;
    }
}
