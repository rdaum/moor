// automatically generated by the FlatBuffers compiler, do not modify

import { CommandExecutionError } from '../moor-rpc/command-execution-error.js';
import { CompilationError } from '../moor-rpc/compilation-error.js';
import { CouldNotStartTask } from '../moor-rpc/could-not-start-task.js';
import { GarbageCollectionFailed } from '../moor-rpc/garbage-collection-failed.js';
import { InputRequestNotFound } from '../moor-rpc/input-request-not-found.js';
import { ObjectResolutionFailed } from '../moor-rpc/object-resolution-failed.js';
import { PropertyRetrievalFailed } from '../moor-rpc/property-retrieval-failed.js';
import { SchedulerNotResponding } from '../moor-rpc/scheduler-not-responding.js';
import { TaskAbortedCancelled } from '../moor-rpc/task-aborted-cancelled.js';
import { TaskAbortedError } from '../moor-rpc/task-aborted-error.js';
import { TaskAbortedException } from '../moor-rpc/task-aborted-exception.js';
import { TaskAbortedLimit } from '../moor-rpc/task-aborted-limit.js';
import { TaskAbortedVerbNotFound } from '../moor-rpc/task-aborted-verb-not-found.js';
import { TaskNotFound } from '../moor-rpc/task-not-found.js';
import { VerbProgramFailed } from '../moor-rpc/verb-program-failed.js';
import { VerbRetrievalFailed } from '../moor-rpc/verb-retrieval-failed.js';


export enum SchedulerErrorUnion {
  NONE = 0,
  SchedulerNotResponding = 1,
  TaskNotFound = 2,
  InputRequestNotFound = 3,
  CouldNotStartTask = 4,
  CompilationError = 5,
  CommandExecutionError = 6,
  TaskAbortedLimit = 7,
  TaskAbortedError = 8,
  TaskAbortedVerbNotFound = 9,
  TaskAbortedException = 10,
  TaskAbortedCancelled = 11,
  VerbProgramFailed = 12,
  PropertyRetrievalFailed = 13,
  VerbRetrievalFailed = 14,
  ObjectResolutionFailed = 15,
  GarbageCollectionFailed = 16
}

export function unionToSchedulerErrorUnion(
  type: SchedulerErrorUnion,
  accessor: (obj:CommandExecutionError|CompilationError|CouldNotStartTask|GarbageCollectionFailed|InputRequestNotFound|ObjectResolutionFailed|PropertyRetrievalFailed|SchedulerNotResponding|TaskAbortedCancelled|TaskAbortedError|TaskAbortedException|TaskAbortedLimit|TaskAbortedVerbNotFound|TaskNotFound|VerbProgramFailed|VerbRetrievalFailed) => CommandExecutionError|CompilationError|CouldNotStartTask|GarbageCollectionFailed|InputRequestNotFound|ObjectResolutionFailed|PropertyRetrievalFailed|SchedulerNotResponding|TaskAbortedCancelled|TaskAbortedError|TaskAbortedException|TaskAbortedLimit|TaskAbortedVerbNotFound|TaskNotFound|VerbProgramFailed|VerbRetrievalFailed|null
): CommandExecutionError|CompilationError|CouldNotStartTask|GarbageCollectionFailed|InputRequestNotFound|ObjectResolutionFailed|PropertyRetrievalFailed|SchedulerNotResponding|TaskAbortedCancelled|TaskAbortedError|TaskAbortedException|TaskAbortedLimit|TaskAbortedVerbNotFound|TaskNotFound|VerbProgramFailed|VerbRetrievalFailed|null {
  switch(SchedulerErrorUnion[type]) {
    case 'NONE': return null; 
    case 'SchedulerNotResponding': return accessor(new SchedulerNotResponding())! as SchedulerNotResponding;
    case 'TaskNotFound': return accessor(new TaskNotFound())! as TaskNotFound;
    case 'InputRequestNotFound': return accessor(new InputRequestNotFound())! as InputRequestNotFound;
    case 'CouldNotStartTask': return accessor(new CouldNotStartTask())! as CouldNotStartTask;
    case 'CompilationError': return accessor(new CompilationError())! as CompilationError;
    case 'CommandExecutionError': return accessor(new CommandExecutionError())! as CommandExecutionError;
    case 'TaskAbortedLimit': return accessor(new TaskAbortedLimit())! as TaskAbortedLimit;
    case 'TaskAbortedError': return accessor(new TaskAbortedError())! as TaskAbortedError;
    case 'TaskAbortedVerbNotFound': return accessor(new TaskAbortedVerbNotFound())! as TaskAbortedVerbNotFound;
    case 'TaskAbortedException': return accessor(new TaskAbortedException())! as TaskAbortedException;
    case 'TaskAbortedCancelled': return accessor(new TaskAbortedCancelled())! as TaskAbortedCancelled;
    case 'VerbProgramFailed': return accessor(new VerbProgramFailed())! as VerbProgramFailed;
    case 'PropertyRetrievalFailed': return accessor(new PropertyRetrievalFailed())! as PropertyRetrievalFailed;
    case 'VerbRetrievalFailed': return accessor(new VerbRetrievalFailed())! as VerbRetrievalFailed;
    case 'ObjectResolutionFailed': return accessor(new ObjectResolutionFailed())! as ObjectResolutionFailed;
    case 'GarbageCollectionFailed': return accessor(new GarbageCollectionFailed())! as GarbageCollectionFailed;
    default: return null;
  }
}

export function unionListToSchedulerErrorUnion(
  type: SchedulerErrorUnion, 
  accessor: (index: number, obj:CommandExecutionError|CompilationError|CouldNotStartTask|GarbageCollectionFailed|InputRequestNotFound|ObjectResolutionFailed|PropertyRetrievalFailed|SchedulerNotResponding|TaskAbortedCancelled|TaskAbortedError|TaskAbortedException|TaskAbortedLimit|TaskAbortedVerbNotFound|TaskNotFound|VerbProgramFailed|VerbRetrievalFailed) => CommandExecutionError|CompilationError|CouldNotStartTask|GarbageCollectionFailed|InputRequestNotFound|ObjectResolutionFailed|PropertyRetrievalFailed|SchedulerNotResponding|TaskAbortedCancelled|TaskAbortedError|TaskAbortedException|TaskAbortedLimit|TaskAbortedVerbNotFound|TaskNotFound|VerbProgramFailed|VerbRetrievalFailed|null, 
  index: number
): CommandExecutionError|CompilationError|CouldNotStartTask|GarbageCollectionFailed|InputRequestNotFound|ObjectResolutionFailed|PropertyRetrievalFailed|SchedulerNotResponding|TaskAbortedCancelled|TaskAbortedError|TaskAbortedException|TaskAbortedLimit|TaskAbortedVerbNotFound|TaskNotFound|VerbProgramFailed|VerbRetrievalFailed|null {
  switch(SchedulerErrorUnion[type]) {
    case 'NONE': return null; 
    case 'SchedulerNotResponding': return accessor(index, new SchedulerNotResponding())! as SchedulerNotResponding;
    case 'TaskNotFound': return accessor(index, new TaskNotFound())! as TaskNotFound;
    case 'InputRequestNotFound': return accessor(index, new InputRequestNotFound())! as InputRequestNotFound;
    case 'CouldNotStartTask': return accessor(index, new CouldNotStartTask())! as CouldNotStartTask;
    case 'CompilationError': return accessor(index, new CompilationError())! as CompilationError;
    case 'CommandExecutionError': return accessor(index, new CommandExecutionError())! as CommandExecutionError;
    case 'TaskAbortedLimit': return accessor(index, new TaskAbortedLimit())! as TaskAbortedLimit;
    case 'TaskAbortedError': return accessor(index, new TaskAbortedError())! as TaskAbortedError;
    case 'TaskAbortedVerbNotFound': return accessor(index, new TaskAbortedVerbNotFound())! as TaskAbortedVerbNotFound;
    case 'TaskAbortedException': return accessor(index, new TaskAbortedException())! as TaskAbortedException;
    case 'TaskAbortedCancelled': return accessor(index, new TaskAbortedCancelled())! as TaskAbortedCancelled;
    case 'VerbProgramFailed': return accessor(index, new VerbProgramFailed())! as VerbProgramFailed;
    case 'PropertyRetrievalFailed': return accessor(index, new PropertyRetrievalFailed())! as PropertyRetrievalFailed;
    case 'VerbRetrievalFailed': return accessor(index, new VerbRetrievalFailed())! as VerbRetrievalFailed;
    case 'ObjectResolutionFailed': return accessor(index, new ObjectResolutionFailed())! as ObjectResolutionFailed;
    case 'GarbageCollectionFailed': return accessor(index, new GarbageCollectionFailed())! as GarbageCollectionFailed;
    default: return null;
  }
}
