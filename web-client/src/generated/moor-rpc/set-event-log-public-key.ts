// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { AuthToken } from '../moor-rpc/auth-token.js';
import { ClientToken } from '../moor-rpc/client-token.js';


export class SetEventLogPublicKey {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SetEventLogPublicKey {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSetEventLogPublicKey(bb:flatbuffers.ByteBuffer, obj?:SetEventLogPublicKey):SetEventLogPublicKey {
  return (obj || new SetEventLogPublicKey()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSetEventLogPublicKey(bb:flatbuffers.ByteBuffer, obj?:SetEventLogPublicKey):SetEventLogPublicKey {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SetEventLogPublicKey()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

clientToken(obj?:ClientToken):ClientToken|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new ClientToken()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

authToken(obj?:AuthToken):AuthToken|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new AuthToken()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

publicKey():string|null
publicKey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
publicKey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startSetEventLogPublicKey(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addClientToken(builder:flatbuffers.Builder, clientTokenOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, clientTokenOffset, 0);
}

static addAuthToken(builder:flatbuffers.Builder, authTokenOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, authTokenOffset, 0);
}

static addPublicKey(builder:flatbuffers.Builder, publicKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, publicKeyOffset, 0);
}

static endSetEventLogPublicKey(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // client_token
  builder.requiredField(offset, 6) // auth_token
  builder.requiredField(offset, 8) // public_key
  return offset;
}

}
