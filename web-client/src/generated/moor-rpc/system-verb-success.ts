// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { NarrativeEvent } from '../moor-common/narrative-event.js';
import { Var } from '../moor-var/var.js';


export class SystemVerbSuccess {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SystemVerbSuccess {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSystemVerbSuccess(bb:flatbuffers.ByteBuffer, obj?:SystemVerbSuccess):SystemVerbSuccess {
  return (obj || new SystemVerbSuccess()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSystemVerbSuccess(bb:flatbuffers.ByteBuffer, obj?:SystemVerbSuccess):SystemVerbSuccess {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SystemVerbSuccess()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

result(obj?:Var):Var|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Var()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

output(index: number, obj?:NarrativeEvent):NarrativeEvent|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new NarrativeEvent()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

outputLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startSystemVerbSuccess(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addResult(builder:flatbuffers.Builder, resultOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, resultOffset, 0);
}

static addOutput(builder:flatbuffers.Builder, outputOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, outputOffset, 0);
}

static createOutputVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startOutputVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endSystemVerbSuccess(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // result
  builder.requiredField(offset, 6) // output
  return offset;
}

static createSystemVerbSuccess(builder:flatbuffers.Builder, resultOffset:flatbuffers.Offset, outputOffset:flatbuffers.Offset):flatbuffers.Offset {
  SystemVerbSuccess.startSystemVerbSuccess(builder);
  SystemVerbSuccess.addResult(builder, resultOffset);
  SystemVerbSuccess.addOutput(builder, outputOffset);
  return SystemVerbSuccess.endSystemVerbSuccess(builder);
}
}
