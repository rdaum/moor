// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { AbortLimit } from '../moor-rpc/abort-limit.js';


export class TaskAbortedLimit {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TaskAbortedLimit {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTaskAbortedLimit(bb:flatbuffers.ByteBuffer, obj?:TaskAbortedLimit):TaskAbortedLimit {
  return (obj || new TaskAbortedLimit()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTaskAbortedLimit(bb:flatbuffers.ByteBuffer, obj?:TaskAbortedLimit):TaskAbortedLimit {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TaskAbortedLimit()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

limit(obj?:AbortLimit):AbortLimit|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new AbortLimit()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startTaskAbortedLimit(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addLimit(builder:flatbuffers.Builder, limitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, limitOffset, 0);
}

static endTaskAbortedLimit(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // limit
  return offset;
}

static createTaskAbortedLimit(builder:flatbuffers.Builder, limitOffset:flatbuffers.Offset):flatbuffers.Offset {
  TaskAbortedLimit.startTaskAbortedLimit(builder);
  TaskAbortedLimit.addLimit(builder, limitOffset);
  return TaskAbortedLimit.endTaskAbortedLimit(builder);
}
}
