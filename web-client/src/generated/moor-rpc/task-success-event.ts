// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { Var } from "../moor-var/var.js";

export class TaskSuccessEvent {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): TaskSuccessEvent {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsTaskSuccessEvent(bb: flatbuffers.ByteBuffer, obj?: TaskSuccessEvent): TaskSuccessEvent {
        return (obj || new TaskSuccessEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsTaskSuccessEvent(bb: flatbuffers.ByteBuffer, obj?: TaskSuccessEvent): TaskSuccessEvent {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new TaskSuccessEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    taskId(): bigint {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
    }

    result(obj?: Var): Var | null {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? (obj || new Var()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    static startTaskSuccessEvent(builder: flatbuffers.Builder) {
        builder.startObject(2);
    }

    static addTaskId(builder: flatbuffers.Builder, taskId: bigint) {
        builder.addFieldInt64(0, taskId, BigInt("0"));
    }

    static addResult(builder: flatbuffers.Builder, resultOffset: flatbuffers.Offset) {
        builder.addFieldOffset(1, resultOffset, 0);
    }

    static endTaskSuccessEvent(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 6); // result
        return offset;
    }
}
