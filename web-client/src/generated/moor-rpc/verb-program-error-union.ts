// automatically generated by the FlatBuffers compiler, do not modify

import { NoVerbToProgram } from '../moor-rpc/no-verb-to-program.js';
import { VerbCompilationError } from '../moor-rpc/verb-compilation-error.js';
import { VerbDatabaseError } from '../moor-rpc/verb-database-error.js';


export enum VerbProgramErrorUnion {
  NONE = 0,
  NoVerbToProgram = 1,
  VerbCompilationError = 2,
  VerbDatabaseError = 3
}

export function unionToVerbProgramErrorUnion(
  type: VerbProgramErrorUnion,
  accessor: (obj:NoVerbToProgram|VerbCompilationError|VerbDatabaseError) => NoVerbToProgram|VerbCompilationError|VerbDatabaseError|null
): NoVerbToProgram|VerbCompilationError|VerbDatabaseError|null {
  switch(VerbProgramErrorUnion[type]) {
    case 'NONE': return null; 
    case 'NoVerbToProgram': return accessor(new NoVerbToProgram())! as NoVerbToProgram;
    case 'VerbCompilationError': return accessor(new VerbCompilationError())! as VerbCompilationError;
    case 'VerbDatabaseError': return accessor(new VerbDatabaseError())! as VerbDatabaseError;
    default: return null;
  }
}

export function unionListToVerbProgramErrorUnion(
  type: VerbProgramErrorUnion, 
  accessor: (index: number, obj:NoVerbToProgram|VerbCompilationError|VerbDatabaseError) => NoVerbToProgram|VerbCompilationError|VerbDatabaseError|null, 
  index: number
): NoVerbToProgram|VerbCompilationError|VerbDatabaseError|null {
  switch(VerbProgramErrorUnion[type]) {
    case 'NONE': return null; 
    case 'NoVerbToProgram': return accessor(index, new NoVerbToProgram())! as NoVerbToProgram;
    case 'VerbCompilationError': return accessor(index, new VerbCompilationError())! as VerbCompilationError;
    case 'VerbDatabaseError': return accessor(index, new VerbDatabaseError())! as VerbDatabaseError;
    default: return null;
  }
}
