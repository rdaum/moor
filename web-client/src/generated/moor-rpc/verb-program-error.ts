// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { VerbProgramErrorUnion, unionToVerbProgramErrorUnion, unionListToVerbProgramErrorUnion } from '../moor-rpc/verb-program-error-union.js';


export class VerbProgramError {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):VerbProgramError {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVerbProgramError(bb:flatbuffers.ByteBuffer, obj?:VerbProgramError):VerbProgramError {
  return (obj || new VerbProgramError()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVerbProgramError(bb:flatbuffers.ByteBuffer, obj?:VerbProgramError):VerbProgramError {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VerbProgramError()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

errorType():VerbProgramErrorUnion {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : VerbProgramErrorUnion.NONE;
}

error<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startVerbProgramError(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addErrorType(builder:flatbuffers.Builder, errorType:VerbProgramErrorUnion) {
  builder.addFieldInt8(0, errorType, VerbProgramErrorUnion.NONE);
}

static addError(builder:flatbuffers.Builder, errorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, errorOffset, 0);
}

static endVerbProgramError(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // error
  return offset;
}

static createVerbProgramError(builder:flatbuffers.Builder, errorType:VerbProgramErrorUnion, errorOffset:flatbuffers.Offset):flatbuffers.Offset {
  VerbProgramError.startVerbProgramError(builder);
  VerbProgramError.addErrorType(builder, errorType);
  VerbProgramError.addError(builder, errorOffset);
  return VerbProgramError.endVerbProgramError(builder);
}
}
