// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Obj } from '../moor-common/obj.js';


export class VerbProgramSuccess {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):VerbProgramSuccess {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVerbProgramSuccess(bb:flatbuffers.ByteBuffer, obj?:VerbProgramSuccess):VerbProgramSuccess {
  return (obj || new VerbProgramSuccess()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVerbProgramSuccess(bb:flatbuffers.ByteBuffer, obj?:VerbProgramSuccess):VerbProgramSuccess {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VerbProgramSuccess()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

obj(obj?:Obj):Obj|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Obj()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

verbName():string|null
verbName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
verbName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startVerbProgramSuccess(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addObj(builder:flatbuffers.Builder, objOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, objOffset, 0);
}

static addVerbName(builder:flatbuffers.Builder, verbNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, verbNameOffset, 0);
}

static endVerbProgramSuccess(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // obj
  builder.requiredField(offset, 6) // verb_name
  return offset;
}

static createVerbProgramSuccess(builder:flatbuffers.Builder, objOffset:flatbuffers.Offset, verbNameOffset:flatbuffers.Offset):flatbuffers.Offset {
  VerbProgramSuccess.startVerbProgramSuccess(builder);
  VerbProgramSuccess.addObj(builder, objOffset);
  VerbProgramSuccess.addVerbName(builder, verbNameOffset);
  return VerbProgramSuccess.endVerbProgramSuccess(builder);
}
}
