// automatically generated by the FlatBuffers compiler, do not modify

import { NoWorkerAvailable } from "../moor-rpc/no-worker-available.js";
import { WorkerDetached } from "../moor-rpc/worker-detached.js";
import { WorkerInternalError } from "../moor-rpc/worker-internal-error.js";
import { WorkerInvalidRequest } from "../moor-rpc/worker-invalid-request.js";
import { WorkerPermissionDenied } from "../moor-rpc/worker-permission-denied.js";
import { WorkerRequestError } from "../moor-rpc/worker-request-error.js";
import { WorkerRequestTimedOut } from "../moor-rpc/worker-request-timed-out.js";

export enum WorkerErrorUnion {
    NONE = 0,
    WorkerPermissionDenied = 1,
    WorkerInvalidRequest = 2,
    WorkerInternalError = 3,
    WorkerRequestTimedOut = 4,
    WorkerRequestError = 5,
    WorkerDetached = 6,
    NoWorkerAvailable = 7,
}

export function unionToWorkerErrorUnion(
    type: WorkerErrorUnion,
    accessor: (
        obj:
            | NoWorkerAvailable
            | WorkerDetached
            | WorkerInternalError
            | WorkerInvalidRequest
            | WorkerPermissionDenied
            | WorkerRequestError
            | WorkerRequestTimedOut,
    ) =>
        | NoWorkerAvailable
        | WorkerDetached
        | WorkerInternalError
        | WorkerInvalidRequest
        | WorkerPermissionDenied
        | WorkerRequestError
        | WorkerRequestTimedOut
        | null,
):
    | NoWorkerAvailable
    | WorkerDetached
    | WorkerInternalError
    | WorkerInvalidRequest
    | WorkerPermissionDenied
    | WorkerRequestError
    | WorkerRequestTimedOut
    | null
{
    switch (WorkerErrorUnion[type]) {
        case "NONE":
            return null;
        case "WorkerPermissionDenied":
            return accessor(new WorkerPermissionDenied())! as WorkerPermissionDenied;
        case "WorkerInvalidRequest":
            return accessor(new WorkerInvalidRequest())! as WorkerInvalidRequest;
        case "WorkerInternalError":
            return accessor(new WorkerInternalError())! as WorkerInternalError;
        case "WorkerRequestTimedOut":
            return accessor(new WorkerRequestTimedOut())! as WorkerRequestTimedOut;
        case "WorkerRequestError":
            return accessor(new WorkerRequestError())! as WorkerRequestError;
        case "WorkerDetached":
            return accessor(new WorkerDetached())! as WorkerDetached;
        case "NoWorkerAvailable":
            return accessor(new NoWorkerAvailable())! as NoWorkerAvailable;
        default:
            return null;
    }
}

export function unionListToWorkerErrorUnion(
    type: WorkerErrorUnion,
    accessor: (
        index: number,
        obj:
            | NoWorkerAvailable
            | WorkerDetached
            | WorkerInternalError
            | WorkerInvalidRequest
            | WorkerPermissionDenied
            | WorkerRequestError
            | WorkerRequestTimedOut,
    ) =>
        | NoWorkerAvailable
        | WorkerDetached
        | WorkerInternalError
        | WorkerInvalidRequest
        | WorkerPermissionDenied
        | WorkerRequestError
        | WorkerRequestTimedOut
        | null,
    index: number,
):
    | NoWorkerAvailable
    | WorkerDetached
    | WorkerInternalError
    | WorkerInvalidRequest
    | WorkerPermissionDenied
    | WorkerRequestError
    | WorkerRequestTimedOut
    | null
{
    switch (WorkerErrorUnion[type]) {
        case "NONE":
            return null;
        case "WorkerPermissionDenied":
            return accessor(index, new WorkerPermissionDenied())! as WorkerPermissionDenied;
        case "WorkerInvalidRequest":
            return accessor(index, new WorkerInvalidRequest())! as WorkerInvalidRequest;
        case "WorkerInternalError":
            return accessor(index, new WorkerInternalError())! as WorkerInternalError;
        case "WorkerRequestTimedOut":
            return accessor(index, new WorkerRequestTimedOut())! as WorkerRequestTimedOut;
        case "WorkerRequestError":
            return accessor(index, new WorkerRequestError())! as WorkerRequestError;
        case "WorkerDetached":
            return accessor(index, new WorkerDetached())! as WorkerDetached;
        case "NoWorkerAvailable":
            return accessor(index, new NoWorkerAvailable())! as NoWorkerAvailable;
        default:
            return null;
    }
}
