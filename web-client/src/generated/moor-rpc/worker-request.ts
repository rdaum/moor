// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { Obj } from "../moor-common/obj.js";
import { Uuid } from "../moor-common/uuid.js";
import { Var } from "../moor-var/var.js";

export class WorkerRequest {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): WorkerRequest {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsWorkerRequest(bb: flatbuffers.ByteBuffer, obj?: WorkerRequest): WorkerRequest {
        return (obj || new WorkerRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsWorkerRequest(bb: flatbuffers.ByteBuffer, obj?: WorkerRequest): WorkerRequest {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new WorkerRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    workerId(obj?: Uuid): Uuid | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? (obj || new Uuid()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    id(obj?: Uuid): Uuid | null {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? (obj || new Uuid()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    perms(obj?: Obj): Obj | null {
        const offset = this.bb!.__offset(this.bb_pos, 8);
        return offset ? (obj || new Obj()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    request(index: number, obj?: Var): Var | null {
        const offset = this.bb!.__offset(this.bb_pos, 10);
        return offset
            ? (obj || new Var()).__init(
                this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),
                this.bb!,
            )
            : null;
    }

    requestLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 10);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    timeoutMs(): bigint {
        const offset = this.bb!.__offset(this.bb_pos, 12);
        return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
    }

    static startWorkerRequest(builder: flatbuffers.Builder) {
        builder.startObject(5);
    }

    static addWorkerId(builder: flatbuffers.Builder, workerIdOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, workerIdOffset, 0);
    }

    static addId(builder: flatbuffers.Builder, idOffset: flatbuffers.Offset) {
        builder.addFieldOffset(1, idOffset, 0);
    }

    static addPerms(builder: flatbuffers.Builder, permsOffset: flatbuffers.Offset) {
        builder.addFieldOffset(2, permsOffset, 0);
    }

    static addRequest(builder: flatbuffers.Builder, requestOffset: flatbuffers.Offset) {
        builder.addFieldOffset(3, requestOffset, 0);
    }

    static createRequestVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]!);
        }
        return builder.endVector();
    }

    static startRequestVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(4, numElems, 4);
    }

    static addTimeoutMs(builder: flatbuffers.Builder, timeoutMs: bigint) {
        builder.addFieldInt64(4, timeoutMs, BigInt("0"));
    }

    static endWorkerRequest(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // worker_id
        builder.requiredField(offset, 6); // id
        builder.requiredField(offset, 8); // perms
        builder.requiredField(offset, 10); // request
        return offset;
    }
}
