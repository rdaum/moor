// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { AbortLimitReasonUnion, unionToAbortLimitReasonUnion, unionListToAbortLimitReasonUnion } from '../moor-task/abort-limit-reason-union.js';


export class AbortLimitReason {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AbortLimitReason {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAbortLimitReason(bb:flatbuffers.ByteBuffer, obj?:AbortLimitReason):AbortLimitReason {
  return (obj || new AbortLimitReason()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAbortLimitReason(bb:flatbuffers.ByteBuffer, obj?:AbortLimitReason):AbortLimitReason {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AbortLimitReason()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

reasonType():AbortLimitReasonUnion {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : AbortLimitReasonUnion.NONE;
}

reason<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startAbortLimitReason(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addReasonType(builder:flatbuffers.Builder, reasonType:AbortLimitReasonUnion) {
  builder.addFieldInt8(0, reasonType, AbortLimitReasonUnion.NONE);
}

static addReason(builder:flatbuffers.Builder, reasonOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, reasonOffset, 0);
}

static endAbortLimitReason(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // reason
  return offset;
}

static createAbortLimitReason(builder:flatbuffers.Builder, reasonType:AbortLimitReasonUnion, reasonOffset:flatbuffers.Offset):flatbuffers.Offset {
  AbortLimitReason.startAbortLimitReason(builder);
  AbortLimitReason.addReasonType(builder, reasonType);
  AbortLimitReason.addReason(builder, reasonOffset);
  return AbortLimitReason.endAbortLimitReason(builder);
}
}
