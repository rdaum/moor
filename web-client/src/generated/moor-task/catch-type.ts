// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { CatchTypeUnion, unionToCatchTypeUnion, unionListToCatchTypeUnion } from '../moor-task/catch-type-union.js';


export class CatchType {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CatchType {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCatchType(bb:flatbuffers.ByteBuffer, obj?:CatchType):CatchType {
  return (obj || new CatchType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCatchType(bb:flatbuffers.ByteBuffer, obj?:CatchType):CatchType {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CatchType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

catchTypeType():CatchTypeUnion {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : CatchTypeUnion.NONE;
}

catchType<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startCatchType(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addCatchTypeType(builder:flatbuffers.Builder, catchTypeType:CatchTypeUnion) {
  builder.addFieldInt8(0, catchTypeType, CatchTypeUnion.NONE);
}

static addCatchType(builder:flatbuffers.Builder, catchTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, catchTypeOffset, 0);
}

static endCatchType(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // catch_type
  return offset;
}

static createCatchType(builder:flatbuffers.Builder, catchTypeType:CatchTypeUnion, catchTypeOffset:flatbuffers.Offset):flatbuffers.Offset {
  CatchType.startCatchType(builder);
  CatchType.addCatchTypeType(builder, catchTypeType);
  CatchType.addCatchType(builder, catchTypeOffset);
  return CatchType.endCatchType(builder);
}
}
