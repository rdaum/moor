// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { Var } from "../moor-var/var.js";

export class EnvironmentScope {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): EnvironmentScope {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsEnvironmentScope(bb: flatbuffers.ByteBuffer, obj?: EnvironmentScope): EnvironmentScope {
        return (obj || new EnvironmentScope()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsEnvironmentScope(bb: flatbuffers.ByteBuffer, obj?: EnvironmentScope): EnvironmentScope {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new EnvironmentScope()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    vars(index: number, obj?: Var): Var | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset
            ? (obj || new Var()).__init(
                this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),
                this.bb!,
            )
            : null;
    }

    varsLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    static startEnvironmentScope(builder: flatbuffers.Builder) {
        builder.startObject(1);
    }

    static addVars(builder: flatbuffers.Builder, varsOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, varsOffset, 0);
    }

    static createVarsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]!);
        }
        return builder.endVector();
    }

    static startVarsVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(4, numElems, 4);
    }

    static endEnvironmentScope(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // vars
        return offset;
    }

    static createEnvironmentScope(builder: flatbuffers.Builder, varsOffset: flatbuffers.Offset): flatbuffers.Offset {
        EnvironmentScope.startEnvironmentScope(builder);
        EnvironmentScope.addVars(builder, varsOffset);
        return EnvironmentScope.endEnvironmentScope(builder);
    }
}
