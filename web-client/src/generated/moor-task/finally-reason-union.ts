// automatically generated by the FlatBuffers compiler, do not modify

import { FinallyAbort } from "../moor-task/finally-abort.js";
import { FinallyExit } from "../moor-task/finally-exit.js";
import { FinallyFallthrough } from "../moor-task/finally-fallthrough.js";
import { FinallyRaise } from "../moor-task/finally-raise.js";
import { FinallyReturn } from "../moor-task/finally-return.js";

export enum FinallyReasonUnion {
    NONE = 0,
    FinallyFallthrough = 1,
    FinallyRaise = 2,
    FinallyReturn = 3,
    FinallyAbort = 4,
    FinallyExit = 5,
}

export function unionToFinallyReasonUnion(
    type: FinallyReasonUnion,
    accessor: (
        obj: FinallyAbort | FinallyExit | FinallyFallthrough | FinallyRaise | FinallyReturn,
    ) => FinallyAbort | FinallyExit | FinallyFallthrough | FinallyRaise | FinallyReturn | null,
): FinallyAbort | FinallyExit | FinallyFallthrough | FinallyRaise | FinallyReturn | null {
    switch (FinallyReasonUnion[type]) {
        case "NONE":
            return null;
        case "FinallyFallthrough":
            return accessor(new FinallyFallthrough())! as FinallyFallthrough;
        case "FinallyRaise":
            return accessor(new FinallyRaise())! as FinallyRaise;
        case "FinallyReturn":
            return accessor(new FinallyReturn())! as FinallyReturn;
        case "FinallyAbort":
            return accessor(new FinallyAbort())! as FinallyAbort;
        case "FinallyExit":
            return accessor(new FinallyExit())! as FinallyExit;
        default:
            return null;
    }
}

export function unionListToFinallyReasonUnion(
    type: FinallyReasonUnion,
    accessor: (
        index: number,
        obj: FinallyAbort | FinallyExit | FinallyFallthrough | FinallyRaise | FinallyReturn,
    ) => FinallyAbort | FinallyExit | FinallyFallthrough | FinallyRaise | FinallyReturn | null,
    index: number,
): FinallyAbort | FinallyExit | FinallyFallthrough | FinallyRaise | FinallyReturn | null {
    switch (FinallyReasonUnion[type]) {
        case "NONE":
            return null;
        case "FinallyFallthrough":
            return accessor(index, new FinallyFallthrough())! as FinallyFallthrough;
        case "FinallyRaise":
            return accessor(index, new FinallyRaise())! as FinallyRaise;
        case "FinallyReturn":
            return accessor(index, new FinallyReturn())! as FinallyReturn;
        case "FinallyAbort":
            return accessor(index, new FinallyAbort())! as FinallyAbort;
        case "FinallyExit":
            return accessor(index, new FinallyExit())! as FinallyExit;
        default:
            return null;
    }
}
