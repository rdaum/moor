// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Obj } from '../moor-common/obj.js';
import { StoredName } from '../moor-program/stored-name.js';
import { Activation } from '../moor-task/activation.js';


export class Fork {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Fork {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFork(bb:flatbuffers.ByteBuffer, obj?:Fork):Fork {
  return (obj || new Fork()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFork(bb:flatbuffers.ByteBuffer, obj?:Fork):Fork {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Fork()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

player(obj?:Obj):Obj|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Obj()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

progr(obj?:Obj):Obj|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Obj()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

parentTaskId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

delayNanos():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

hasDelay():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

activation(obj?:Activation):Activation|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new Activation()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

forkVectorOffset():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

taskId(obj?:StoredName):StoredName|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new StoredName()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startFork(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addPlayer(builder:flatbuffers.Builder, playerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, playerOffset, 0);
}

static addProgr(builder:flatbuffers.Builder, progrOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, progrOffset, 0);
}

static addParentTaskId(builder:flatbuffers.Builder, parentTaskId:bigint) {
  builder.addFieldInt64(2, parentTaskId, BigInt('0'));
}

static addDelayNanos(builder:flatbuffers.Builder, delayNanos:bigint) {
  builder.addFieldInt64(3, delayNanos, BigInt('0'));
}

static addHasDelay(builder:flatbuffers.Builder, hasDelay:boolean) {
  builder.addFieldInt8(4, +hasDelay, +false);
}

static addActivation(builder:flatbuffers.Builder, activationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, activationOffset, 0);
}

static addForkVectorOffset(builder:flatbuffers.Builder, forkVectorOffset:bigint) {
  builder.addFieldInt64(6, forkVectorOffset, BigInt('0'));
}

static addTaskId(builder:flatbuffers.Builder, taskIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, taskIdOffset, 0);
}

static endFork(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // player
  builder.requiredField(offset, 6) // progr
  builder.requiredField(offset, 14) // activation
  return offset;
}

}
