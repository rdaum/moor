// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { FrameUnion, unionListToFrameUnion, unionToFrameUnion } from "../moor-task/frame-union.js";

export class Frame {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): Frame {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsFrame(bb: flatbuffers.ByteBuffer, obj?: Frame): Frame {
        return (obj || new Frame()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsFrame(bb: flatbuffers.ByteBuffer, obj?: Frame): Frame {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Frame()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    frameType(): FrameUnion {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.readUint8(this.bb_pos + offset) : FrameUnion.NONE;
    }

    frame<T extends flatbuffers.Table>(obj: any): any | null {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
    }

    static startFrame(builder: flatbuffers.Builder) {
        builder.startObject(2);
    }

    static addFrameType(builder: flatbuffers.Builder, frameType: FrameUnion) {
        builder.addFieldInt8(0, frameType, FrameUnion.NONE);
    }

    static addFrame(builder: flatbuffers.Builder, frameOffset: flatbuffers.Offset) {
        builder.addFieldOffset(1, frameOffset, 0);
    }

    static endFrame(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 6); // frame
        return offset;
    }

    static createFrame(
        builder: flatbuffers.Builder,
        frameType: FrameUnion,
        frameOffset: flatbuffers.Offset,
    ): flatbuffers.Offset {
        Frame.startFrame(builder);
        Frame.addFrameType(builder, frameType);
        Frame.addFrame(builder, frameOffset);
        return Frame.endFrame(builder);
    }
}
