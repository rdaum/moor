// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { StoredProgram } from "../moor-program/stored-program.js";
import { CapturedVar } from "../moor-task/captured-var.js";
import { CatchHandler } from "../moor-task/catch-handler.js";
import { EnvironmentScope } from "../moor-task/environment-scope.js";
import { FinallyReason } from "../moor-task/finally-reason.js";
import { PcType } from "../moor-task/pc-type.js";
import { Scope } from "../moor-task/scope.js";
import { Var } from "../moor-var/var.js";

export class MooStackFrame {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): MooStackFrame {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsMooStackFrame(bb: flatbuffers.ByteBuffer, obj?: MooStackFrame): MooStackFrame {
        return (obj || new MooStackFrame()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsMooStackFrame(bb: flatbuffers.ByteBuffer, obj?: MooStackFrame): MooStackFrame {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new MooStackFrame()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    program(obj?: StoredProgram): StoredProgram | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? (obj || new StoredProgram()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    pc(): bigint {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
    }

    pcType(obj?: PcType): PcType | null {
        const offset = this.bb!.__offset(this.bb_pos, 8);
        return offset ? (obj || new PcType()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    environment(index: number, obj?: EnvironmentScope): EnvironmentScope | null {
        const offset = this.bb!.__offset(this.bb_pos, 10);
        return offset
            ? (obj || new EnvironmentScope()).__init(
                this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),
                this.bb!,
            )
            : null;
    }

    environmentLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 10);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    valstack(index: number, obj?: Var): Var | null {
        const offset = this.bb!.__offset(this.bb_pos, 12);
        return offset
            ? (obj || new Var()).__init(
                this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),
                this.bb!,
            )
            : null;
    }

    valstackLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 12);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    scopeStack(index: number, obj?: Scope): Scope | null {
        const offset = this.bb!.__offset(this.bb_pos, 14);
        return offset
            ? (obj || new Scope()).__init(
                this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),
                this.bb!,
            )
            : null;
    }

    scopeStackLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 14);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    temp(obj?: Var): Var | null {
        const offset = this.bb!.__offset(this.bb_pos, 16);
        return offset ? (obj || new Var()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    catchStack(index: number, obj?: CatchHandler): CatchHandler | null {
        const offset = this.bb!.__offset(this.bb_pos, 18);
        return offset
            ? (obj || new CatchHandler()).__init(
                this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),
                this.bb!,
            )
            : null;
    }

    catchStackLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 18);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    finallyStack(index: number, obj?: FinallyReason): FinallyReason | null {
        const offset = this.bb!.__offset(this.bb_pos, 20);
        return offset
            ? (obj || new FinallyReason()).__init(
                this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),
                this.bb!,
            )
            : null;
    }

    finallyStackLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 20);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    captureStack(index: number, obj?: CapturedVar): CapturedVar | null {
        const offset = this.bb!.__offset(this.bb_pos, 22);
        return offset
            ? (obj || new CapturedVar()).__init(
                this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),
                this.bb!,
            )
            : null;
    }

    captureStackLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 22);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    static startMooStackFrame(builder: flatbuffers.Builder) {
        builder.startObject(10);
    }

    static addProgram(builder: flatbuffers.Builder, programOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, programOffset, 0);
    }

    static addPc(builder: flatbuffers.Builder, pc: bigint) {
        builder.addFieldInt64(1, pc, BigInt("0"));
    }

    static addPcType(builder: flatbuffers.Builder, pcTypeOffset: flatbuffers.Offset) {
        builder.addFieldOffset(2, pcTypeOffset, 0);
    }

    static addEnvironment(builder: flatbuffers.Builder, environmentOffset: flatbuffers.Offset) {
        builder.addFieldOffset(3, environmentOffset, 0);
    }

    static createEnvironmentVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]!);
        }
        return builder.endVector();
    }

    static startEnvironmentVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(4, numElems, 4);
    }

    static addValstack(builder: flatbuffers.Builder, valstackOffset: flatbuffers.Offset) {
        builder.addFieldOffset(4, valstackOffset, 0);
    }

    static createValstackVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]!);
        }
        return builder.endVector();
    }

    static startValstackVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(4, numElems, 4);
    }

    static addScopeStack(builder: flatbuffers.Builder, scopeStackOffset: flatbuffers.Offset) {
        builder.addFieldOffset(5, scopeStackOffset, 0);
    }

    static createScopeStackVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]!);
        }
        return builder.endVector();
    }

    static startScopeStackVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(4, numElems, 4);
    }

    static addTemp(builder: flatbuffers.Builder, tempOffset: flatbuffers.Offset) {
        builder.addFieldOffset(6, tempOffset, 0);
    }

    static addCatchStack(builder: flatbuffers.Builder, catchStackOffset: flatbuffers.Offset) {
        builder.addFieldOffset(7, catchStackOffset, 0);
    }

    static createCatchStackVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]!);
        }
        return builder.endVector();
    }

    static startCatchStackVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(4, numElems, 4);
    }

    static addFinallyStack(builder: flatbuffers.Builder, finallyStackOffset: flatbuffers.Offset) {
        builder.addFieldOffset(8, finallyStackOffset, 0);
    }

    static createFinallyStackVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]!);
        }
        return builder.endVector();
    }

    static startFinallyStackVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(4, numElems, 4);
    }

    static addCaptureStack(builder: flatbuffers.Builder, captureStackOffset: flatbuffers.Offset) {
        builder.addFieldOffset(9, captureStackOffset, 0);
    }

    static createCaptureStackVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]!);
        }
        return builder.endVector();
    }

    static startCaptureStackVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(4, numElems, 4);
    }

    static endMooStackFrame(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // program
        builder.requiredField(offset, 8); // pc_type
        builder.requiredField(offset, 10); // environment
        builder.requiredField(offset, 12); // valstack
        builder.requiredField(offset, 14); // scope_stack
        builder.requiredField(offset, 16); // temp
        builder.requiredField(offset, 18); // catch_stack
        builder.requiredField(offset, 20); // finally_stack
        builder.requiredField(offset, 22); // capture_stack
        return offset;
    }
}
