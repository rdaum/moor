// automatically generated by the FlatBuffers compiler, do not modify

import { PcForkVector } from '../moor-task/pc-fork-vector.js';
import { PcLambda } from '../moor-task/pc-lambda.js';
import { PcMain } from '../moor-task/pc-main.js';


export enum PcTypeUnion {
  NONE = 0,
  PcMain = 1,
  PcForkVector = 2,
  PcLambda = 3
}

export function unionToPcTypeUnion(
  type: PcTypeUnion,
  accessor: (obj:PcForkVector|PcLambda|PcMain) => PcForkVector|PcLambda|PcMain|null
): PcForkVector|PcLambda|PcMain|null {
  switch(PcTypeUnion[type]) {
    case 'NONE': return null; 
    case 'PcMain': return accessor(new PcMain())! as PcMain;
    case 'PcForkVector': return accessor(new PcForkVector())! as PcForkVector;
    case 'PcLambda': return accessor(new PcLambda())! as PcLambda;
    default: return null;
  }
}

export function unionListToPcTypeUnion(
  type: PcTypeUnion, 
  accessor: (index: number, obj:PcForkVector|PcLambda|PcMain) => PcForkVector|PcLambda|PcMain|null, 
  index: number
): PcForkVector|PcLambda|PcMain|null {
  switch(PcTypeUnion[type]) {
    case 'NONE': return null; 
    case 'PcMain': return accessor(index, new PcMain())! as PcMain;
    case 'PcForkVector': return accessor(index, new PcForkVector())! as PcForkVector;
    case 'PcLambda': return accessor(index, new PcLambda())! as PcLambda;
    default: return null;
  }
}
