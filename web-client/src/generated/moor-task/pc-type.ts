// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { PcTypeUnion, unionListToPcTypeUnion, unionToPcTypeUnion } from "../moor-task/pc-type-union.js";

export class PcType {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): PcType {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsPcType(bb: flatbuffers.ByteBuffer, obj?: PcType): PcType {
        return (obj || new PcType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsPcType(bb: flatbuffers.ByteBuffer, obj?: PcType): PcType {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new PcType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    pcTypeType(): PcTypeUnion {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.readUint8(this.bb_pos + offset) : PcTypeUnion.NONE;
    }

    pcType<T extends flatbuffers.Table>(obj: any): any | null {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
    }

    static startPcType(builder: flatbuffers.Builder) {
        builder.startObject(2);
    }

    static addPcTypeType(builder: flatbuffers.Builder, pcTypeType: PcTypeUnion) {
        builder.addFieldInt8(0, pcTypeType, PcTypeUnion.NONE);
    }

    static addPcType(builder: flatbuffers.Builder, pcTypeOffset: flatbuffers.Offset) {
        builder.addFieldOffset(1, pcTypeOffset, 0);
    }

    static endPcType(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 6); // pc_type
        return offset;
    }

    static createPcType(
        builder: flatbuffers.Builder,
        pcTypeType: PcTypeUnion,
        pcTypeOffset: flatbuffers.Offset,
    ): flatbuffers.Offset {
        PcType.startPcType(builder);
        PcType.addPcTypeType(builder, pcTypeType);
        PcType.addPcType(builder, pcTypeOffset);
        return PcType.endPcType(builder);
    }
}
