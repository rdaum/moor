// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { Symbol } from "../moor-common/symbol.js";
import { AbortLimitReason } from "../moor-task/abort-limit-reason.js";
import { Var } from "../moor-var/var.js";

export class PendingTimeout {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): PendingTimeout {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsPendingTimeout(bb: flatbuffers.ByteBuffer, obj?: PendingTimeout): PendingTimeout {
        return (obj || new PendingTimeout()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsPendingTimeout(bb: flatbuffers.ByteBuffer, obj?: PendingTimeout): PendingTimeout {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new PendingTimeout()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    reason(obj?: AbortLimitReason): AbortLimitReason | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset
            ? (obj || new AbortLimitReason()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!)
            : null;
    }

    this_(obj?: Var): Var | null {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? (obj || new Var()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    verbName(obj?: Symbol): Symbol | null {
        const offset = this.bb!.__offset(this.bb_pos, 8);
        return offset ? (obj || new Symbol()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    lineNumber(): bigint {
        const offset = this.bb!.__offset(this.bb_pos, 10);
        return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
    }

    static startPendingTimeout(builder: flatbuffers.Builder) {
        builder.startObject(4);
    }

    static addReason(builder: flatbuffers.Builder, reasonOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, reasonOffset, 0);
    }

    static addThis(builder: flatbuffers.Builder, this_Offset: flatbuffers.Offset) {
        builder.addFieldOffset(1, this_Offset, 0);
    }

    static addVerbName(builder: flatbuffers.Builder, verbNameOffset: flatbuffers.Offset) {
        builder.addFieldOffset(2, verbNameOffset, 0);
    }

    static addLineNumber(builder: flatbuffers.Builder, lineNumber: bigint) {
        builder.addFieldInt64(3, lineNumber, BigInt("0"));
    }

    static endPendingTimeout(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // reason
        builder.requiredField(offset, 6); // this
        builder.requiredField(offset, 8); // verb_name
        return offset;
    }
}
