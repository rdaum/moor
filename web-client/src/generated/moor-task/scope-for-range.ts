// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { StoredName } from '../moor-program/stored-name.js';
import { Var } from '../moor-var/var.js';


export class ScopeForRange {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ScopeForRange {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsScopeForRange(bb:flatbuffers.ByteBuffer, obj?:ScopeForRange):ScopeForRange {
  return (obj || new ScopeForRange()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsScopeForRange(bb:flatbuffers.ByteBuffer, obj?:ScopeForRange):ScopeForRange {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ScopeForRange()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

currentValue(obj?:Var):Var|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Var()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

endValue(obj?:Var):Var|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Var()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

loopVariable(obj?:StoredName):StoredName|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new StoredName()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

endLabel():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

static startScopeForRange(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addCurrentValue(builder:flatbuffers.Builder, currentValueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, currentValueOffset, 0);
}

static addEndValue(builder:flatbuffers.Builder, endValueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, endValueOffset, 0);
}

static addLoopVariable(builder:flatbuffers.Builder, loopVariableOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, loopVariableOffset, 0);
}

static addEndLabel(builder:flatbuffers.Builder, endLabel:number) {
  builder.addFieldInt16(3, endLabel, 0);
}

static endScopeForRange(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // current_value
  builder.requiredField(offset, 6) // end_value
  builder.requiredField(offset, 8) // loop_variable
  return offset;
}

}
