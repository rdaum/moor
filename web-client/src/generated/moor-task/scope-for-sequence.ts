// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { StoredName } from '../moor-program/stored-name.js';
import { Var } from '../moor-var/var.js';


export class ScopeForSequence {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ScopeForSequence {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsScopeForSequence(bb:flatbuffers.ByteBuffer, obj?:ScopeForSequence):ScopeForSequence {
  return (obj || new ScopeForSequence()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsScopeForSequence(bb:flatbuffers.ByteBuffer, obj?:ScopeForSequence):ScopeForSequence {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ScopeForSequence()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

sequence(obj?:Var):Var|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Var()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

currentIndex():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

valueBind(obj?:StoredName):StoredName|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new StoredName()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

keyBind(obj?:StoredName):StoredName|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new StoredName()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

endLabel():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

currentKey(obj?:Var):Var|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new Var()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startScopeForSequence(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addSequence(builder:flatbuffers.Builder, sequenceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, sequenceOffset, 0);
}

static addCurrentIndex(builder:flatbuffers.Builder, currentIndex:bigint) {
  builder.addFieldInt64(1, currentIndex, BigInt('0'));
}

static addValueBind(builder:flatbuffers.Builder, valueBindOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, valueBindOffset, 0);
}

static addKeyBind(builder:flatbuffers.Builder, keyBindOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, keyBindOffset, 0);
}

static addEndLabel(builder:flatbuffers.Builder, endLabel:number) {
  builder.addFieldInt16(4, endLabel, 0);
}

static addCurrentKey(builder:flatbuffers.Builder, currentKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, currentKeyOffset, 0);
}

static endScopeForSequence(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // sequence
  builder.requiredField(offset, 8) // value_bind
  return offset;
}

}
