// automatically generated by the FlatBuffers compiler, do not modify

import { ScopeBlock } from "../moor-task/scope-block.js";
import { ScopeComprehension } from "../moor-task/scope-comprehension.js";
import { ScopeEif } from "../moor-task/scope-eif.js";
import { ScopeForRange } from "../moor-task/scope-for-range.js";
import { ScopeForSequence } from "../moor-task/scope-for-sequence.js";
import { ScopeFor } from "../moor-task/scope-for.js";
import { ScopeIf } from "../moor-task/scope-if.js";
import { ScopeTryCatch } from "../moor-task/scope-try-catch.js";
import { ScopeTryFinally } from "../moor-task/scope-try-finally.js";
import { ScopeWhile } from "../moor-task/scope-while.js";

export enum ScopeTypeUnion {
    NONE = 0,
    ScopeTryFinally = 1,
    ScopeTryCatch = 2,
    ScopeIf = 3,
    ScopeEif = 4,
    ScopeWhile = 5,
    ScopeFor = 6,
    ScopeForSequence = 7,
    ScopeForRange = 8,
    ScopeBlock = 9,
    ScopeComprehension = 10,
}

export function unionToScopeTypeUnion(
    type: ScopeTypeUnion,
    accessor: (
        obj:
            | ScopeBlock
            | ScopeComprehension
            | ScopeEif
            | ScopeFor
            | ScopeForRange
            | ScopeForSequence
            | ScopeIf
            | ScopeTryCatch
            | ScopeTryFinally
            | ScopeWhile,
    ) =>
        | ScopeBlock
        | ScopeComprehension
        | ScopeEif
        | ScopeFor
        | ScopeForRange
        | ScopeForSequence
        | ScopeIf
        | ScopeTryCatch
        | ScopeTryFinally
        | ScopeWhile
        | null,
):
    | ScopeBlock
    | ScopeComprehension
    | ScopeEif
    | ScopeFor
    | ScopeForRange
    | ScopeForSequence
    | ScopeIf
    | ScopeTryCatch
    | ScopeTryFinally
    | ScopeWhile
    | null
{
    switch (ScopeTypeUnion[type]) {
        case "NONE":
            return null;
        case "ScopeTryFinally":
            return accessor(new ScopeTryFinally())! as ScopeTryFinally;
        case "ScopeTryCatch":
            return accessor(new ScopeTryCatch())! as ScopeTryCatch;
        case "ScopeIf":
            return accessor(new ScopeIf())! as ScopeIf;
        case "ScopeEif":
            return accessor(new ScopeEif())! as ScopeEif;
        case "ScopeWhile":
            return accessor(new ScopeWhile())! as ScopeWhile;
        case "ScopeFor":
            return accessor(new ScopeFor())! as ScopeFor;
        case "ScopeForSequence":
            return accessor(new ScopeForSequence())! as ScopeForSequence;
        case "ScopeForRange":
            return accessor(new ScopeForRange())! as ScopeForRange;
        case "ScopeBlock":
            return accessor(new ScopeBlock())! as ScopeBlock;
        case "ScopeComprehension":
            return accessor(new ScopeComprehension())! as ScopeComprehension;
        default:
            return null;
    }
}

export function unionListToScopeTypeUnion(
    type: ScopeTypeUnion,
    accessor: (
        index: number,
        obj:
            | ScopeBlock
            | ScopeComprehension
            | ScopeEif
            | ScopeFor
            | ScopeForRange
            | ScopeForSequence
            | ScopeIf
            | ScopeTryCatch
            | ScopeTryFinally
            | ScopeWhile,
    ) =>
        | ScopeBlock
        | ScopeComprehension
        | ScopeEif
        | ScopeFor
        | ScopeForRange
        | ScopeForSequence
        | ScopeIf
        | ScopeTryCatch
        | ScopeTryFinally
        | ScopeWhile
        | null,
    index: number,
):
    | ScopeBlock
    | ScopeComprehension
    | ScopeEif
    | ScopeFor
    | ScopeForRange
    | ScopeForSequence
    | ScopeIf
    | ScopeTryCatch
    | ScopeTryFinally
    | ScopeWhile
    | null
{
    switch (ScopeTypeUnion[type]) {
        case "NONE":
            return null;
        case "ScopeTryFinally":
            return accessor(index, new ScopeTryFinally())! as ScopeTryFinally;
        case "ScopeTryCatch":
            return accessor(index, new ScopeTryCatch())! as ScopeTryCatch;
        case "ScopeIf":
            return accessor(index, new ScopeIf())! as ScopeIf;
        case "ScopeEif":
            return accessor(index, new ScopeEif())! as ScopeEif;
        case "ScopeWhile":
            return accessor(index, new ScopeWhile())! as ScopeWhile;
        case "ScopeFor":
            return accessor(index, new ScopeFor())! as ScopeFor;
        case "ScopeForSequence":
            return accessor(index, new ScopeForSequence())! as ScopeForSequence;
        case "ScopeForRange":
            return accessor(index, new ScopeForRange())! as ScopeForRange;
        case "ScopeBlock":
            return accessor(index, new ScopeBlock())! as ScopeBlock;
        case "ScopeComprehension":
            return accessor(index, new ScopeComprehension())! as ScopeComprehension;
        default:
            return null;
    }
}
