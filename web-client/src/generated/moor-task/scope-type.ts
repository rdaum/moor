// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ScopeTypeUnion, unionToScopeTypeUnion, unionListToScopeTypeUnion } from '../moor-task/scope-type-union.js';


export class ScopeType {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ScopeType {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsScopeType(bb:flatbuffers.ByteBuffer, obj?:ScopeType):ScopeType {
  return (obj || new ScopeType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsScopeType(bb:flatbuffers.ByteBuffer, obj?:ScopeType):ScopeType {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ScopeType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

scopeTypeType():ScopeTypeUnion {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : ScopeTypeUnion.NONE;
}

scopeType<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startScopeType(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addScopeTypeType(builder:flatbuffers.Builder, scopeTypeType:ScopeTypeUnion) {
  builder.addFieldInt8(0, scopeTypeType, ScopeTypeUnion.NONE);
}

static addScopeType(builder:flatbuffers.Builder, scopeTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, scopeTypeOffset, 0);
}

static endScopeType(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // scope_type
  return offset;
}

static createScopeType(builder:flatbuffers.Builder, scopeTypeType:ScopeTypeUnion, scopeTypeOffset:flatbuffers.Offset):flatbuffers.Offset {
  ScopeType.startScopeType(builder);
  ScopeType.addScopeTypeType(builder, scopeTypeType);
  ScopeType.addScopeType(builder, scopeTypeOffset);
  return ScopeType.endScopeType(builder);
}
}
