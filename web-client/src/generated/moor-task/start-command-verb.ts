// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Obj } from '../moor-common/obj.js';


export class StartCommandVerb {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):StartCommandVerb {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsStartCommandVerb(bb:flatbuffers.ByteBuffer, obj?:StartCommandVerb):StartCommandVerb {
  return (obj || new StartCommandVerb()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsStartCommandVerb(bb:flatbuffers.ByteBuffer, obj?:StartCommandVerb):StartCommandVerb {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new StartCommandVerb()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

handlerObject(obj?:Obj):Obj|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Obj()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

player(obj?:Obj):Obj|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Obj()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

command():string|null
command(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
command(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startStartCommandVerb(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addHandlerObject(builder:flatbuffers.Builder, handlerObjectOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, handlerObjectOffset, 0);
}

static addPlayer(builder:flatbuffers.Builder, playerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, playerOffset, 0);
}

static addCommand(builder:flatbuffers.Builder, commandOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, commandOffset, 0);
}

static endStartCommandVerb(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // handler_object
  builder.requiredField(offset, 6) // player
  builder.requiredField(offset, 8) // command
  return offset;
}

}
