// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { Fork } from "../moor-task/fork.js";

export class StartFork {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): StartFork {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsStartFork(bb: flatbuffers.ByteBuffer, obj?: StartFork): StartFork {
        return (obj || new StartFork()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsStartFork(bb: flatbuffers.ByteBuffer, obj?: StartFork): StartFork {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new StartFork()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    forkRequest(obj?: Fork): Fork | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? (obj || new Fork()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    suspendedNanos(): bigint {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
    }

    static startStartFork(builder: flatbuffers.Builder) {
        builder.startObject(2);
    }

    static addForkRequest(builder: flatbuffers.Builder, forkRequestOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, forkRequestOffset, 0);
    }

    static addSuspendedNanos(builder: flatbuffers.Builder, suspendedNanos: bigint) {
        builder.addFieldInt64(1, suspendedNanos, BigInt("0"));
    }

    static endStartFork(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // fork_request
        return offset;
    }

    static createStartFork(
        builder: flatbuffers.Builder,
        forkRequestOffset: flatbuffers.Offset,
        suspendedNanos: bigint,
    ): flatbuffers.Offset {
        StartFork.startStartFork(builder);
        StartFork.addForkRequest(builder, forkRequestOffset);
        StartFork.addSuspendedNanos(builder, suspendedNanos);
        return StartFork.endStartFork(builder);
    }
}
