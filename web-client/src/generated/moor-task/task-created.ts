// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { TaskStartUnion, unionToTaskStartUnion, unionListToTaskStartUnion } from '../moor-task/task-start-union.js';


export class TaskCreated {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TaskCreated {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTaskCreated(bb:flatbuffers.ByteBuffer, obj?:TaskCreated):TaskCreated {
  return (obj || new TaskCreated()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTaskCreated(bb:flatbuffers.ByteBuffer, obj?:TaskCreated):TaskCreated {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TaskCreated()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

startType():TaskStartUnion {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : TaskStartUnion.NONE;
}

start<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startTaskCreated(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addStartType(builder:flatbuffers.Builder, startType:TaskStartUnion) {
  builder.addFieldInt8(0, startType, TaskStartUnion.NONE);
}

static addStart(builder:flatbuffers.Builder, startOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, startOffset, 0);
}

static endTaskCreated(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // start
  return offset;
}

static createTaskCreated(builder:flatbuffers.Builder, startType:TaskStartUnion, startOffset:flatbuffers.Offset):flatbuffers.Offset {
  TaskCreated.startTaskCreated(builder);
  TaskCreated.addStartType(builder, startType);
  TaskCreated.addStart(builder, startOffset);
  return TaskCreated.endTaskCreated(builder);
}
}
