// automatically generated by the FlatBuffers compiler, do not modify

import { StartCommandVerb } from '../moor-task/start-command-verb.js';
import { StartDoCommand } from '../moor-task/start-do-command.js';
import { StartEval } from '../moor-task/start-eval.js';
import { StartFork } from '../moor-task/start-fork.js';
import { StartVerb } from '../moor-task/start-verb.js';


export enum TaskStartUnion {
  NONE = 0,
  StartCommandVerb = 1,
  StartDoCommand = 2,
  StartVerb = 3,
  StartFork = 4,
  StartEval = 5
}

export function unionToTaskStartUnion(
  type: TaskStartUnion,
  accessor: (obj:StartCommandVerb|StartDoCommand|StartEval|StartFork|StartVerb) => StartCommandVerb|StartDoCommand|StartEval|StartFork|StartVerb|null
): StartCommandVerb|StartDoCommand|StartEval|StartFork|StartVerb|null {
  switch(TaskStartUnion[type]) {
    case 'NONE': return null; 
    case 'StartCommandVerb': return accessor(new StartCommandVerb())! as StartCommandVerb;
    case 'StartDoCommand': return accessor(new StartDoCommand())! as StartDoCommand;
    case 'StartVerb': return accessor(new StartVerb())! as StartVerb;
    case 'StartFork': return accessor(new StartFork())! as StartFork;
    case 'StartEval': return accessor(new StartEval())! as StartEval;
    default: return null;
  }
}

export function unionListToTaskStartUnion(
  type: TaskStartUnion, 
  accessor: (index: number, obj:StartCommandVerb|StartDoCommand|StartEval|StartFork|StartVerb) => StartCommandVerb|StartDoCommand|StartEval|StartFork|StartVerb|null, 
  index: number
): StartCommandVerb|StartDoCommand|StartEval|StartFork|StartVerb|null {
  switch(TaskStartUnion[type]) {
    case 'NONE': return null; 
    case 'StartCommandVerb': return accessor(index, new StartCommandVerb())! as StartCommandVerb;
    case 'StartDoCommand': return accessor(index, new StartDoCommand())! as StartDoCommand;
    case 'StartVerb': return accessor(index, new StartVerb())! as StartVerb;
    case 'StartFork': return accessor(index, new StartFork())! as StartFork;
    case 'StartEval': return accessor(index, new StartEval())! as StartEval;
    default: return null;
  }
}
