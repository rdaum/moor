// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { TaskStateUnion, unionToTaskStateUnion, unionListToTaskStateUnion } from '../moor-task/task-state-union.js';


export class TaskState {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TaskState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTaskState(bb:flatbuffers.ByteBuffer, obj?:TaskState):TaskState {
  return (obj || new TaskState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTaskState(bb:flatbuffers.ByteBuffer, obj?:TaskState):TaskState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TaskState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

stateType():TaskStateUnion {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : TaskStateUnion.NONE;
}

state<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startTaskState(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addStateType(builder:flatbuffers.Builder, stateType:TaskStateUnion) {
  builder.addFieldInt8(0, stateType, TaskStateUnion.NONE);
}

static addState(builder:flatbuffers.Builder, stateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, stateOffset, 0);
}

static endTaskState(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // state
  return offset;
}

static createTaskState(builder:flatbuffers.Builder, stateType:TaskStateUnion, stateOffset:flatbuffers.Offset):flatbuffers.Offset {
  TaskState.startTaskState(builder);
  TaskState.addStateType(builder, stateType);
  TaskState.addState(builder, stateOffset);
  return TaskState.endTaskState(builder);
}
}
