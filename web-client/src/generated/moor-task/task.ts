// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Exception } from '../moor-common/exception.js';
import { Obj } from '../moor-common/obj.js';
import { PendingTimeout } from '../moor-task/pending-timeout.js';
import { TaskState } from '../moor-task/task-state.js';
import { VMExecState } from '../moor-task/vmexec-state.js';
import { VmHost } from '../moor-task/vm-host.js';


export class Task {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Task {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTask(bb:flatbuffers.ByteBuffer, obj?:Task):Task {
  return (obj || new Task()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTask(bb:flatbuffers.ByteBuffer, obj?:Task):Task {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Task()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

version():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

taskId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

player(obj?:Obj):Obj|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Obj()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

state(obj?:TaskState):TaskState|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new TaskState()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

vmHost(obj?:VmHost):VmHost|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new VmHost()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

perms(obj?:Obj):Obj|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new Obj()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

retries():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

retryState(obj?:VMExecState):VMExecState|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new VMExecState()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

handlingUncaughtError():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

pendingException(obj?:Exception):Exception|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? (obj || new Exception()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

handlingTaskTimeout():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

pendingTimeout(obj?:PendingTimeout):PendingTimeout|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? (obj || new PendingTimeout()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startTask(builder:flatbuffers.Builder) {
  builder.startObject(12);
}

static addVersion(builder:flatbuffers.Builder, version:number) {
  builder.addFieldInt16(0, version, 0);
}

static addTaskId(builder:flatbuffers.Builder, taskId:bigint) {
  builder.addFieldInt64(1, taskId, BigInt('0'));
}

static addPlayer(builder:flatbuffers.Builder, playerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, playerOffset, 0);
}

static addState(builder:flatbuffers.Builder, stateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, stateOffset, 0);
}

static addVmHost(builder:flatbuffers.Builder, vmHostOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, vmHostOffset, 0);
}

static addPerms(builder:flatbuffers.Builder, permsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, permsOffset, 0);
}

static addRetries(builder:flatbuffers.Builder, retries:number) {
  builder.addFieldInt8(6, retries, 0);
}

static addRetryState(builder:flatbuffers.Builder, retryStateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, retryStateOffset, 0);
}

static addHandlingUncaughtError(builder:flatbuffers.Builder, handlingUncaughtError:boolean) {
  builder.addFieldInt8(8, +handlingUncaughtError, +false);
}

static addPendingException(builder:flatbuffers.Builder, pendingExceptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, pendingExceptionOffset, 0);
}

static addHandlingTaskTimeout(builder:flatbuffers.Builder, handlingTaskTimeout:boolean) {
  builder.addFieldInt8(10, +handlingTaskTimeout, +false);
}

static addPendingTimeout(builder:flatbuffers.Builder, pendingTimeoutOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, pendingTimeoutOffset, 0);
}

static endTask(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 8) // player
  builder.requiredField(offset, 10) // state
  builder.requiredField(offset, 12) // vm_host
  builder.requiredField(offset, 14) // perms
  builder.requiredField(offset, 18) // retry_state
  return offset;
}

}
