// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { VMExecState } from '../moor-task/vmexec-state.js';


export class VmHost {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):VmHost {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVmHost(bb:flatbuffers.ByteBuffer, obj?:VmHost):VmHost {
  return (obj || new VmHost()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVmHost(bb:flatbuffers.ByteBuffer, obj?:VmHost):VmHost {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VmHost()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

taskId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

maxStackDepth():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

maxTicks():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

maxTimeMs():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

execState(obj?:VMExecState):VMExecState|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new VMExecState()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startVmHost(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addTaskId(builder:flatbuffers.Builder, taskId:bigint) {
  builder.addFieldInt64(0, taskId, BigInt('0'));
}

static addMaxStackDepth(builder:flatbuffers.Builder, maxStackDepth:bigint) {
  builder.addFieldInt64(1, maxStackDepth, BigInt('0'));
}

static addMaxTicks(builder:flatbuffers.Builder, maxTicks:bigint) {
  builder.addFieldInt64(2, maxTicks, BigInt('0'));
}

static addMaxTimeMs(builder:flatbuffers.Builder, maxTimeMs:bigint) {
  builder.addFieldInt64(3, maxTimeMs, BigInt('0'));
}

static addExecState(builder:flatbuffers.Builder, execStateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, execStateOffset, 0);
}

static endVmHost(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 12) // exec_state
  return offset;
}

}
