// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { WakeConditionUnion, unionToWakeConditionUnion, unionListToWakeConditionUnion } from '../moor-task/wake-condition-union.js';


export class WakeCondition {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):WakeCondition {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsWakeCondition(bb:flatbuffers.ByteBuffer, obj?:WakeCondition):WakeCondition {
  return (obj || new WakeCondition()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsWakeCondition(bb:flatbuffers.ByteBuffer, obj?:WakeCondition):WakeCondition {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new WakeCondition()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

conditionType():WakeConditionUnion {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : WakeConditionUnion.NONE;
}

condition<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startWakeCondition(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addConditionType(builder:flatbuffers.Builder, conditionType:WakeConditionUnion) {
  builder.addFieldInt8(0, conditionType, WakeConditionUnion.NONE);
}

static addCondition(builder:flatbuffers.Builder, conditionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, conditionOffset, 0);
}

static endWakeCondition(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // condition
  return offset;
}

static createWakeCondition(builder:flatbuffers.Builder, conditionType:WakeConditionUnion, conditionOffset:flatbuffers.Offset):flatbuffers.Offset {
  WakeCondition.startWakeCondition(builder);
  WakeCondition.addConditionType(builder, conditionType);
  WakeCondition.addCondition(builder, conditionOffset);
  return WakeCondition.endWakeCondition(builder);
}
}
