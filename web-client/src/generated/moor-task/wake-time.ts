// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class WakeTime {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):WakeTime {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsWakeTime(bb:flatbuffers.ByteBuffer, obj?:WakeTime):WakeTime {
  return (obj || new WakeTime()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsWakeTime(bb:flatbuffers.ByteBuffer, obj?:WakeTime):WakeTime {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new WakeTime()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

nanos():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

static startWakeTime(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addNanos(builder:flatbuffers.Builder, nanos:bigint) {
  builder.addFieldInt64(0, nanos, BigInt('0'));
}

static endWakeTime(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createWakeTime(builder:flatbuffers.Builder, nanos:bigint):flatbuffers.Offset {
  WakeTime.startWakeTime(builder);
  WakeTime.addNanos(builder, nanos);
  return WakeTime.endWakeTime(builder);
}
}
