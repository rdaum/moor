// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { Uuid } from "../moor-common/uuid.js";

export class WakeWorker {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): WakeWorker {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsWakeWorker(bb: flatbuffers.ByteBuffer, obj?: WakeWorker): WakeWorker {
        return (obj || new WakeWorker()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsWakeWorker(bb: flatbuffers.ByteBuffer, obj?: WakeWorker): WakeWorker {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new WakeWorker()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    uuid(obj?: Uuid): Uuid | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? (obj || new Uuid()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    static startWakeWorker(builder: flatbuffers.Builder) {
        builder.startObject(1);
    }

    static addUuid(builder: flatbuffers.Builder, uuidOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, uuidOffset, 0);
    }

    static endWakeWorker(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // uuid
        return offset;
    }

    static createWakeWorker(builder: flatbuffers.Builder, uuidOffset: flatbuffers.Offset): flatbuffers.Offset {
        WakeWorker.startWakeWorker(builder);
        WakeWorker.addUuid(builder, uuidOffset);
        return WakeWorker.endWakeWorker(builder);
    }
}
