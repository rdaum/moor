// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Symbol } from '../moor-common/symbol.js';
import { Var } from '../moor-var/var.js';


export class FlyweightSlot {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FlyweightSlot {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFlyweightSlot(bb:flatbuffers.ByteBuffer, obj?:FlyweightSlot):FlyweightSlot {
  return (obj || new FlyweightSlot()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFlyweightSlot(bb:flatbuffers.ByteBuffer, obj?:FlyweightSlot):FlyweightSlot {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FlyweightSlot()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name(obj?:Symbol):Symbol|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Symbol()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

value(obj?:Var):Var|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Var()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startFlyweightSlot(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addValue(builder:flatbuffers.Builder, valueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, valueOffset, 0);
}

static endFlyweightSlot(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // name
  builder.requiredField(offset, 6) // value
  return offset;
}

}
