// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class VarFloat {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):VarFloat {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVarFloat(bb:flatbuffers.ByteBuffer, obj?:VarFloat):VarFloat {
  return (obj || new VarFloat()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVarFloat(bb:flatbuffers.ByteBuffer, obj?:VarFloat):VarFloat {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VarFloat()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

value():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startVarFloat(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addValue(builder:flatbuffers.Builder, value:number) {
  builder.addFieldFloat64(0, value, 0.0);
}

static endVarFloat(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createVarFloat(builder:flatbuffers.Builder, value:number):flatbuffers.Offset {
  VarFloat.startVarFloat(builder);
  VarFloat.addValue(builder, value);
  return VarFloat.endVarFloat(builder);
}
}
