// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Obj } from '../moor-common/obj.js';
import { FlyweightSlot } from '../moor-var/flyweight-slot.js';
import { VarList } from '../moor-var/var-list.js';


export class VarFlyweight {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):VarFlyweight {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVarFlyweight(bb:flatbuffers.ByteBuffer, obj?:VarFlyweight):VarFlyweight {
  return (obj || new VarFlyweight()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVarFlyweight(bb:flatbuffers.ByteBuffer, obj?:VarFlyweight):VarFlyweight {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VarFlyweight()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

delegate(obj?:Obj):Obj|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Obj()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

slots(index: number, obj?:FlyweightSlot):FlyweightSlot|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new FlyweightSlot()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

slotsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

contents(obj?:VarList):VarList|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new VarList()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startVarFlyweight(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addDelegate(builder:flatbuffers.Builder, delegateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, delegateOffset, 0);
}

static addSlots(builder:flatbuffers.Builder, slotsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, slotsOffset, 0);
}

static createSlotsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSlotsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addContents(builder:flatbuffers.Builder, contentsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, contentsOffset, 0);
}

static endVarFlyweight(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // delegate
  builder.requiredField(offset, 6) // slots
  builder.requiredField(offset, 8) // contents
  return offset;
}

}
