// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { StoredName } from '../moor-program/stored-name.js';
import { StoredProgram } from '../moor-program/stored-program.js';
import { StoredScatterArgs } from '../moor-program/stored-scatter-args.js';
import { VarList } from '../moor-var/var-list.js';


export class VarLambda {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):VarLambda {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVarLambda(bb:flatbuffers.ByteBuffer, obj?:VarLambda):VarLambda {
  return (obj || new VarLambda()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVarLambda(bb:flatbuffers.ByteBuffer, obj?:VarLambda):VarLambda {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VarLambda()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

params(obj?:StoredScatterArgs):StoredScatterArgs|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new StoredScatterArgs()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

body(obj?:StoredProgram):StoredProgram|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new StoredProgram()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

capturedEnv(index: number, obj?:VarList):VarList|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new VarList()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

capturedEnvLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

selfVar(obj?:StoredName):StoredName|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new StoredName()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startVarLambda(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addParams(builder:flatbuffers.Builder, paramsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, paramsOffset, 0);
}

static addBody(builder:flatbuffers.Builder, bodyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, bodyOffset, 0);
}

static addCapturedEnv(builder:flatbuffers.Builder, capturedEnvOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, capturedEnvOffset, 0);
}

static createCapturedEnvVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCapturedEnvVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSelfVar(builder:flatbuffers.Builder, selfVarOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, selfVarOffset, 0);
}

static endVarLambda(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // params
  builder.requiredField(offset, 6) // body
  builder.requiredField(offset, 8) // captured_env
  return offset;
}

}
