// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Var } from '../moor-var/var.js';


export class VarList {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):VarList {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVarList(bb:flatbuffers.ByteBuffer, obj?:VarList):VarList {
  return (obj || new VarList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVarList(bb:flatbuffers.ByteBuffer, obj?:VarList):VarList {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VarList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

elements(index: number, obj?:Var):Var|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Var()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

elementsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startVarList(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addElements(builder:flatbuffers.Builder, elementsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, elementsOffset, 0);
}

static createElementsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startElementsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endVarList(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // elements
  return offset;
}

static createVarList(builder:flatbuffers.Builder, elementsOffset:flatbuffers.Offset):flatbuffers.Offset {
  VarList.startVarList(builder);
  VarList.addElements(builder, elementsOffset);
  return VarList.endVarList(builder);
}
}
