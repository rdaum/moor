// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { Var } from "../moor-var/var.js";

export class VarMapPair {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): VarMapPair {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsVarMapPair(bb: flatbuffers.ByteBuffer, obj?: VarMapPair): VarMapPair {
        return (obj || new VarMapPair()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsVarMapPair(bb: flatbuffers.ByteBuffer, obj?: VarMapPair): VarMapPair {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new VarMapPair()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    key(obj?: Var): Var | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? (obj || new Var()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    value(obj?: Var): Var | null {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? (obj || new Var()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    static startVarMapPair(builder: flatbuffers.Builder) {
        builder.startObject(2);
    }

    static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, keyOffset, 0);
    }

    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {
        builder.addFieldOffset(1, valueOffset, 0);
    }

    static endVarMapPair(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // key
        builder.requiredField(offset, 6); // value
        return offset;
    }
}
