// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Symbol } from '../moor-common/symbol.js';


export class VarSym {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):VarSym {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVarSym(bb:flatbuffers.ByteBuffer, obj?:VarSym):VarSym {
  return (obj || new VarSym()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVarSym(bb:flatbuffers.ByteBuffer, obj?:VarSym):VarSym {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VarSym()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

symbol(obj?:Symbol):Symbol|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Symbol()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startVarSym(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addSymbol(builder:flatbuffers.Builder, symbolOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, symbolOffset, 0);
}

static endVarSym(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // symbol
  return offset;
}

static createVarSym(builder:flatbuffers.Builder, symbolOffset:flatbuffers.Offset):flatbuffers.Offset {
  VarSym.startVarSym(builder);
  VarSym.addSymbol(builder, symbolOffset);
  return VarSym.endVarSym(builder);
}
}
