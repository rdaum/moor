// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { VarUnion, unionToVarUnion, unionListToVarUnion } from '../moor-var/var-union.js';


export class Var {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Var {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVar(bb:flatbuffers.ByteBuffer, obj?:Var):Var {
  return (obj || new Var()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVar(bb:flatbuffers.ByteBuffer, obj?:Var):Var {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Var()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

variantType():VarUnion {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : VarUnion.NONE;
}

variant<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startVar(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addVariantType(builder:flatbuffers.Builder, variantType:VarUnion) {
  builder.addFieldInt8(0, variantType, VarUnion.NONE);
}

static addVariant(builder:flatbuffers.Builder, variantOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, variantOffset, 0);
}

static endVar(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // variant
  return offset;
}

static createVar(builder:flatbuffers.Builder, variantType:VarUnion, variantOffset:flatbuffers.Offset):flatbuffers.Offset {
  Var.startVar(builder);
  Var.addVariantType(builder, variantType);
  Var.addVariant(builder, variantOffset);
  return Var.endVar(builder);
}
}
